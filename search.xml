<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>写在人生的边上</title>
    <url>/2014/10/16/%E5%86%99%E5%9C%A8%E4%BA%BA%E7%94%9F%E7%9A%84%E8%BE%B9%E4%B8%8A/</url>
    <content><![CDATA[<h2 id="写在人生的边上"><a href="#写在人生的边上" class="headerlink" title="写在人生的边上"></a>写在人生的边上</h2><p>钱钟书先生有一本书叫做《写在人生的边上》。</p>
<p>读罢，由于缺乏足够的文学涵养，记性差，并没有对这本书留下非常深刻的印象。</p>
<p>除了这本书的书名。</p>
<p>当然，后来钱先生出了另一本书，叫做『人生边上的边上』, 那又是另一番意味了。</p>
<a id="more"></a>

<p>古人总是在书籍的边上写下一些东西，此为批注，便好像是在书上留下了自己的痕迹。</p>
<p>写下到此一游的风范，从古时候那孙猴子在如来的掌中留下一泡尿，到现在某些低素质游客随手乱刻乱画，可谓是一大特色，但细细想来这可能是老祖宗留下的传统。</p>
<p>在茫茫然中度过自己的一生，就好像草草写下一本书籍，还来不及写下什么优质的内容，就已经就已经从一本书的扉页翻到了尾页。</p>
<p>同样的剧情，同样的套路，只是人换了，而已。</p>
<p>可人总是想留下什么东西，总想向自己或者是他人证明，『我是独特的，是唯一的』。不是吗？</p>
<p>比如在纸墨世界里留下一本书籍，或者是在比特世界里留下自己的博客。用这些文字，在一个已知的世界里，写一些已经知道的或者是不知道的世界，那多有趣。</p>
<p>如果说人这种动物的一生仅仅用一本书就可以包容的话，那么我想，在我的故事的结尾，我可以看到我的人生的那本书，以及写在书本边上的那些批注，甚至写批注上的批注。这样，总归是让自己的一生，多了一些有趣的意义。</p>
<blockquote>
<p>写东西，也是为了获得并且保持更加精确的思考。</p>
</blockquote>
<p>此为我写这些文字的原因，也是我重新开始写这些文字的原因。</p>
<hr>
<p>ChangeLog:</p>
<ul>
<li>2015-02-20 增加图片</li>
<li>2016-11-23 重新润饰文字</li>
<li>2017-03-08 增加几句新感慨</li>
</ul>
]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>至尊宝和孙悟空 - 『大话西游』影评</title>
    <url>/2014/10/25/%E5%AD%99%E6%82%9F%E7%A9%BA%E5%92%8C%E8%87%B3%E5%B0%8A%E5%AE%9D/</url>
    <content><![CDATA[<p>有才的人往往是很有个性的，甚至个性难以驾驭，生活这么枯燥无味，天天做着同样的事情，吃饭，打怪，看着猪队友坑自己，还要听肉眼凡胎唐僧的绵延不绝的滔滔口水。</p>
<p>这样的生活有什么意思呢？我可是当年踏碎凌霄，放肆桀骜的齐天大圣孙悟空啊！</p>
<a id="more"></a>

<p>于是，孙悟空打伤了紫霞仙子，把师傅送给牛魔王，抢走了月光宝盒。</p>
<p>孙悟空是想逃走，想逃避这样的一份普度众生的伟大职业。众生与我何干？我只管红尘潇潇洒洒便好。</p>
<p>那时候的孙悟空，放荡不羁爱自由，哪想着有一天会跌倒在观音和如来的手下。也不会想到，这个平时废话一大篇的唐僧居然用生命给自己换回了一个救赎的机会。</p>
<p>可是他的命运从转生成至尊宝那一天起，就已经刻在了命运之轮上。注定逃不了的。</p>
<p>五百年后，转世悟空至尊宝在五岳山第四边 101 号 B One 做着一份非常光辉的职业——山贼。偏偏蜘蛛精春三十娘来了，偏偏白骨精白晶晶来了，菩提老祖来了，牛魔王来了。甚至，这个时候，至尊宝以为自己爱上了那个爱上了孙猴子的白骨精。</p>
<blockquote>
<p>只怪好景不长，该来的总是逃不掉。</p>
</blockquote>
<p>冥冥之中，一切早就按照命运之轮运行，为了拯救心上人白晶晶，至尊宝阴差阳错回到了 500 年前，却和紫霞仙子相识。为了回到五百年后，至尊宝不惜欺骗紫霞仙子，说上一段一万年的承诺。</p>
<p>紫霞爱上了至尊宝，却落入了牛魔王的手中，至尊宝回到山洞，却意外的发现自己爱上的人是紫霞。却不是白晶晶。</p>
<ul>
<li>『我一定是太想念晶晶了！』</li>
<li>『是啊，昏倒的时候叫了晶晶这个名字 98 次！』</li>
<li>『晶晶是我娘子！』</li>
<li>『还有一个名字叫做紫霞的你叫了 784 次，784 次…. 这个紫霞一定欠了你很多钱！』</li>
</ul>
<blockquote>
<p>爱情这东西总是后知后觉的，不是么？</p>
</blockquote>
<p>因为对白晶晶有责任感，至尊宝用月光宝盒想救白晶晶，却意外邂逅真爱紫霞。</p>
<p>为了打败牛魔王，救回紫霞，就要成为孙悟空，但如果成为不了孙悟空，将永远失去紫霞。</p>
<p>白晶晶和蜘蛛精再次闯进洞来，杀了至尊宝。死掉以后的至尊宝大彻大悟——为了化解人世间的仇恨，背负起该有的责任，救回紫霞，去取西经。</p>
<p>带上紧箍圈，获得强大的力量却再也不能有人世间的半点情欲。</p>
<p>唐僧对这孙悟空说：『你终于能够重返正途了，阿弥陀佛.』</p>
<p>而最终，紫霞死去了。</p>
<p>小的时候看《大话西游》的时候，可谓是单纯到只能解读笑点。<br>现在看《大话西游》的时候，总是看着看着，就开始有些伤怀。其实众生依旧皆苦，剧中的至尊宝好歹是受过精神压力后戴上紧箍儿，瞬间开挂一般一夫当关万夫莫开。现实中想要去守护一些东西，还要经过漫长的修炼。</p>
<p>『等你明白了舍生取义的道理，你自然会回来和我唱这首歌的』 唐僧仿佛看穿了一切，又仿佛和之前一样对自己认为的道理令人发指的相信。</p>
<p>紧箍咒，圈住至尊宝昔日的梦想与爱情，圈住棱角分明的个性。至尊宝终究成为了悟空。</p>
<p>天边的你，漂泊在云海。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="http://music.163.com/outchain/player?type=2&id=33162226&auto=1&height=66"></iframe>

<ul>
<li>月溅星河</li>
<li>长路漫漫</li>
<li>风烟残尽</li>
<li>独影阑珊</li>
<li>谁叫我身手不凡</li>
<li>谁让我爱恨两难</li>
<li>到后来</li>
<li>肝肠寸断</li>
</ul>
<p>女孩问：『那个人样子好怪。』<br>男孩笑道：『我也看到了，他好像一条狗。』</p>
<p>UPDATE:</p>
<ul>
<li>刘镇伟导演出了大话三，我觉得依旧是一个不错的番外，在我心里并不能算是续集。经典的续集总是难续的。</li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li>2014-10-25 完成初稿</li>
<li>2016-12-03 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>Chorthotkey 发布</title>
    <url>/2015/02/22/Chorthotkey%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<h2 id="概要介绍"><a href="#概要介绍" class="headerlink" title="概要介绍"></a>概要介绍</h2><p>经过长时间的电脑的使用，我渐渐的喜欢上了 Autohotkey 这个神器，喜欢 Python 是因为 Python 强大与高效，喜欢 AHK 则是太方便了。</p>
<p>长时间的使用，毕竟也积攒了一些脚本，加上对很多脚本的收集以及修改，勉强算得上是一个入门的 AHK 菜鸟了。</p>
<p>AHK 的优点可以对快捷键进行编程，对一个经常使用电脑自动化处理一些事情的人说，非常之方便，但缺点，太多，效率低，语法乱，数据结构乱。让我写一段文字处理简直就让我非常难受。</p>
<a id="more"></a>

<p>但为了取长补短，我仅仅使用其中的对快捷键编程的功能，加上收集来的别人的一些函数。修改集成，然后做一个顺手的 AHK 脚本，名字就叫做 Chorthotkey。</p>
<blockquote>
<p>开源，协议选择 Mit 协议。简而言之也就是你改了名字版权就是你的了。</p>
</blockquote>
<p>我在编写这篇文章的时候，也在重构并进行 V0.4 版本的完善。</p>
<p>什么时候使用 AHK 脚本呢。</p>
<blockquote>
<p>当繁杂的功能可以批量完成的时候。</p>
</blockquote>
<p>换而言之，当这个功能不值得用另一个大的专业性比较强的软件代替的时候，或者对快捷键进行编程的时候。</p>
<ul>
<li>先说第一点：当我想使用一个功能的时候，比如快速打开一个网页，或者进行文字上的简单处理，这个时候没有必要单独下载一个软件进行处理，这个在 AHK 中就是简单的几行代码就可以搞定。比如打开网站直接 Run <a href="http://www.baidu.com/">www.baidu.com</a> AHK 就会直接调用相关浏览器打开 baidu. 这么简单的东西没有必要单独下载一个软件进行管理。</li>
<li>再说第二点：当我想着对快捷键进行编程调用进行自动化处理东西的时候，或者编写一套自己的热键用来打游戏或者其他的一些编辑用途等等，都可以。理论上来说，AHK 几乎是只有想不到没有做不到的。</li>
</ul>
<p>那么，AHK 不能替代什么东西？</p>
<p>在文件管理方面，尽管你可以自己编写很多的快捷键，但你没有办法超越 TotalCMD，没有办法超越 Listary 或者 Everything，所以，你编写的东西只需要辅助你使用这些东西就好了。</p>
<p>在文本编辑方面，你始终无法超越 sublime text 3，无法超越 vi，无法超越 Emacs，你只需要辅助你使用这些工具即可。</p>
<p>其他专业软件同理。</p>
<p>既然说了 AHK 那么多的不足和缺憾，但是 AHK 在我的脚本语言中依然傲立第二名，就是因为它擅长的快捷键编程。</p>
<p>好了，废话这么多，总该说点干货了。</p>
<p>我认为 Autohotkey 用好这三个脚本即可：</p>
<ul>
<li>Candy 一个非常强大的第三方弹出菜单 amii 编写。</li>
<li>ChortHotKey 一个我编写的工具</li>
<li>vimd 无所不在的 vim 党编写的软件。</li>
</ul>
<p>好吧，我无耻的把三个工具放在一起了。虽然 Candy 和 vimdesktop 在使用上面甩 Chorthotkey 几条街，但是，我乐意把他们放在一起，怎么滴？</p>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>AHK 的操作按照是否聪明分为两种：</p>
<ol>
<li>第一种叫做非上下文的操作</li>
<li>第二种叫做上下文操作</li>
</ol>
<p>AHK 操作按照使用场景分为：</p>
<ol>
<li>直接操作</li>
<li>选中操作</li>
</ol>
<p>AHK 按照操作目标分为</p>
<ol>
<li>程序类操作</li>
<li>键盘类操作</li>
<li>文件类操作</li>
<li>文本类操作</li>
<li>命令类操作</li>
<li>其他操作</li>
</ol>
<p>选取一个角度对 Chorthotkey 描述 — 按照操作目标</p>
<p>PS：浏览器建议 chrome</p>
<h3 id="1-程序类-–-涉及运行程序，或者一些常用的小功能"><a href="#1-程序类-–-涉及运行程序，或者一些常用的小功能" class="headerlink" title="1. 程序类 – 涉及运行程序，或者一些常用的小功能"></a>1. 程序类 – 涉及运行程序，或者一些常用的小功能</h3><p>我的所有程序都是使用配置好的环境变量 D:\Sysconfig 其中的快捷方式搞定的。比如 win+r 输入 qq 然后回车自动打开 QQ。这个并不使用 AHK。因为没有必要增加大量的热键来增加自己的记忆负担。<br>但是使用频率非常高的必须设置快捷键。</p>
<p>程序类快捷键我主要使用的是 Win 按键，AHK 中用 # 来表示</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #a 到有道官网查找单词翻译，并且保存到桌面上一个文本文档中。</span></span><br><span class="line"><span class="meta"> #b 选中某段文字进行解析，如果里面有网址则访问网址，否则使用百度进行搜索</span></span><br><span class="line"><span class="meta"> #g 选中某段文字进行解析，如果里面有网址则访问网址，否则使用 Google 进行搜索</span></span><br><span class="line"><span class="meta"> #f 打开 everything 进行搜索</span></span><br><span class="line"><span class="meta"> #e 替换原有的资源管理器，打开 TotalCMD</span></span><br><span class="line"><span class="meta"> #q 打开 QQ</span></span><br><span class="line"><span class="meta"> #v open with vim</span></span><br><span class="line"><span class="meta"> #s open with sublime text</span></span><br><span class="line"></span><br><span class="line">官方的操作</span><br><span class="line"></span><br><span class="line"><span class="meta"> #c Windows8 什么鸟菜单</span></span><br><span class="line"><span class="meta"> #x win8 快捷菜单</span></span><br><span class="line"><span class="meta"> #r 运行，比较方便</span></span><br><span class="line"><span class="meta"> #1-9 数字，建议把几个（四个之内，超过四个你的手可能就跟不上操作了）可能有变化的软件放在 pin 在 taskbar 上面。</span></span><br></pre></td></tr></table></figure>

<h3 id="2-键盘鼠标操作"><a href="#2-键盘鼠标操作" class="headerlink" title="2. 键盘鼠标操作"></a>2. 键盘鼠标操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alt+f4 按住左键再按住右键输出</span><br><span class="line"></span><br><span class="line">CAPSLOCK 超级导航</span><br><span class="line">CAPSLOCK 输出 ESC</span><br><span class="line">SHIFT &amp; CAPSLOCK 调用 Candy</span><br><span class="line">下面内容属于组合键的另一个按键</span><br><span class="line">hjkl 前下上右</span><br><span class="line">a 行尾进行编辑</span><br><span class="line">o 下一行进行编辑</span><br><span class="line"></span><br><span class="line">n ctrl+delete</span><br><span class="line">m delete</span><br><span class="line">, backspace</span><br><span class="line">. ctrl+backspace</span><br><span class="line"></span><br><span class="line">5 打开 coding workspace</span><br><span class="line">6 打开未整理文件</span><br><span class="line">7 打开 Onedirve</span><br><span class="line">8 打开同步文件夹</span><br><span class="line">9 打开娱乐文件</span><br><span class="line">0 打开 sysconfig</span><br></pre></td></tr></table></figure>

<h3 id="3-文件类操作"><a href="#3-文件类操作" class="headerlink" title="3. 文件类操作"></a>3. 文件类操作</h3><p>选中的文件夹在 TC 中打开，其余操作全部在 TC 中解决<br>由于我使用了 Capslock 的导航功能，这时候的 capslock hjkl 完全可以当作左下上右使用。<br>vim+tc，可以使用 vim desktop 进行超级强化。我一直对 TOTALCMD 的快捷键设计抱有不满和一丝丝的畏惧，但是这个软件把 TC 的快捷键常用快捷键精简到了令人发指的地步。</p>
<blockquote>
<p>I love TC plus AHK</p>
</blockquote>
<h3 id="4-文本类操作"><a href="#4-文本类操作" class="headerlink" title="4. 文本类操作"></a>4. 文本类操作</h3><p>candy 操作，保存，发送等等，凡是 Ctrl + c 飘落的地方，就一定会有 candy 的存在（火影忍者既视感）。请在我另一篇 Blog 中看看我是怎么使用 Candy 的。</p>
<h3 id="5-命令类操作"><a href="#5-命令类操作" class="headerlink" title="5. 命令类操作"></a>5. 命令类操作</h3><p>这里面存放的是 AHK 的命令。其实就是使用 ahk 调用 python 脚本执行之类的东西。起到一个胶水的作用。</p>
<h3 id="6-其他操作"><a href="#6-其他操作" class="headerlink" title="6. 其他操作"></a>6. 其他操作</h3><p>热字符串输入其实和代码的 Snippet 比较相近。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用的特别频繁的</span><br><span class="line">//date 20150223</span><br><span class="line">/dd</span><br><span class="line">//time 08:52:33</span><br><span class="line">/tt</span><br><span class="line">//lastupdate 最后修改时间 2015-02-23 08:52:33</span><br><span class="line">/ll</span><br><span class="line">//mail twocucao@gmail.com</span><br><span class="line">/mm</span><br><span class="line">//anouncement  声明 lalalalalallalalalallalalalla</span><br><span class="line">/aa</span><br><span class="line"></span><br><span class="line">常用的</span><br><span class="line">//motto 我挥舞着纸笔和键盘，发誓要把这个世界写个明白。</span><br><span class="line"></span><br><span class="line">常用打开 Vim 的文字模板使用</span><br><span class="line">/hexo  打开 gvim，粘贴进去对应的模板。</span><br><span class="line"></span><br><span class="line">比如我输入</span><br><span class="line">//hexo</span><br><span class="line">那么就会 Copy 我之前定义的文字，然后存放在我的剪切板中。（时间是动态的）</span><br><span class="line">接着脚本打开 gvim，你要做的就是把文字粘贴进去就可以进行 HEXO 的编写了。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">title: 标题</span><br><span class="line">date:<span class="number">2015</span>-02-<span class="number">23</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">30</span></span><br><span class="line">tags: 感悟</span><br><span class="line">category: 『生活，感悟』</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">正文</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">其他</span><br><span class="line"></span><br><span class="line">博客文章原创声明：</span><br><span class="line">本博文章如果没有声明为整理或者转载，均为本人原创。非商业可以任意转载分享。但是编写的代码如果没有特别声明，虽然我建议保留原作者出处，但是代码皆为 mit 协议，也就是修改了名字也算是你的版权，开源世界嘛，我就喜欢那些可以拿来直接使用的东西，贯彻最纯粹的免费自由，但是求求你，改掉名字等等信息再说是版权是你的啊。</span><br><span class="line"></span><br><span class="line">![关于本人](http://twocucao.xyz/about/),</span><br><span class="line">点击链接就可以以 web 幻灯片的方式看到我的介绍。</span><br><span class="line"></span><br><span class="line">我的 Github 地址：https://github.com/twocucao  （尽管东西不多，但是欢迎来 Star 和 Fork，就算你们来这里提前 Star Folk 了）</span><br><span class="line">简书地址：http://www.jianshu.com/users/9a7e0b9da317/latest_articles （不常更新，而且几乎没有技术文章的讲解）</span><br><span class="line">联系方式：twocucao@gmail.com</span><br><span class="line">本人才疏学浅，是一个水平比较菜的程序员，如果行文之间发现任何错误，欢迎指正，特别欢迎技术上的指正。</span><br></pre></td></tr></table></figure>

<h2 id="三剑客地址"><a href="#三剑客地址" class="headerlink" title="三剑客地址"></a>三剑客地址</h2><ul>
<li>Chorthotkey <a href="https://github.com/twocucao/ChortHotKey">https://github.com/twocucao/ChortHotKey</a></li>
<li>Candy <a href="https://github.com/aamii/Candy">https://github.com/aamii/Candy</a></li>
<li>VimDesktop <a href="https://github.com/victorwoo/vimdesktop">https://github.com/victorwoo/vimdesktop</a></li>
</ul>
<p>如果你想了解关于 ahk 的世界，请到这里来看：</p>
<ul>
<li><p><a href="http://xbeta.info/autohotkey-guide-2.htm">善用佳软的 ahk 地址</a></p>
</li>
<li><p><a href="http://zhuanlan.zhihu.com/autohotkey">A 大在知乎的系列专题</a></p>
</li>
<li><p><a href="https://github.com/twocucao/ChortHotKey">我的 AUTOHOTKEY 脚本使用我的脚本来上手速度会快很多）</a></p>
</li>
<li><p><a href="https://github.com/twocucao/AwesomeAutohotkeyL">AWESOME AUTOHOTKEY_L 这里仅仅是关于 AHKL 的资源。</a></p>
</li>
<li><p><a href="http://www.ahk8.com/">AHK 论坛</a></p>
</li>
<li><p>欢迎加入 AUTOHOTKEY 的官方群 3222783 这里的大神喜欢解答有挑战性的问题，很多 AHK 的脚本都在这里。</p>
</li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li>2016-11-23 已经于 2015-12 月份转投苹果平台，从此不想念 Windows. 除了 Windows 上面的 Autohotkey / Everything / TotalCMD</li>
</ul>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>效率</tag>
        <tag>Autohotkey</tag>
        <tag>自动化</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅的使用 Windows 之编辑器 Sublime Text</title>
    <url>/2015/02/27/%E7%BC%96%E8%BE%91%E5%99%A8Sublime/</url>
    <content><![CDATA[<p>于<strong>2016 中期</strong> 重修文字，声明已转投 Vim. sublime 作为非主力编辑器。<br>于<strong>2017 前期</strong> 重修文字，声明已转投 Spacemacs.<br>于<strong>2017 后期</strong> 重修文字，重回 Vim.</p>
<a id="more"></a>
<p>这个 Sublime 究竟好在哪里？</p>
<ul>
<li>方便的 Vim 模式。</li>
<li>各种语言特性支持。</li>
<li>强大的社区支持。插件教程，balbalbala</li>
<li>长的好看，而且能干。</li>
</ul>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="下载安装（建议便携版本）"><a href="#下载安装（建议便携版本）" class="headerlink" title="下载安装（建议便携版本）"></a>下载安装（建议便携版本）</h3><p><a href="http://www.sublimetext.com/3">http://www.sublimetext.com/3</a></p>
<h3 id="安装-Package-Control-用于管理插件"><a href="#安装-Package-Control-用于管理插件" class="headerlink" title="安装 Package Control  用于管理插件"></a>安装 Package Control  用于管理插件</h3><p>步骤：view showconsole 输入下面代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">&#x27;eb2297e1a458f27d836c04bb0cbaf282&#x27;</span> + <span class="string">&#x27;d0e7a3098092775ccb37ca9d6b2e4b7d&#x27;</span>; pf = <span class="string">&#x27;Package Control.sublime-package&#x27;</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">&#x27;http://packagecontrol.io/&#x27;</span> + pf.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;%20&#x27;</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">&#x27;Error validating download (got %s instead of %s), please try manual install&#x27;</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="built_in">open</span>(os.path.join( ipp, pf), <span class="string">&#x27;wb&#x27;</span> ).write(by)</span><br></pre></td></tr></table></figure>
<p>重启，然后你就可以正常使用 Package Control 了</p>
<h2 id="基本使用方法之编辑功能"><a href="#基本使用方法之编辑功能" class="headerlink" title="基本使用方法之编辑功能"></a>基本使用方法之编辑功能</h2><h3 id="命令面板"><a href="#命令面板" class="headerlink" title="命令面板"></a>命令面板</h3><p>^+p</p>
<p>ctrl+shift+p 打开的是命令面板<br>命令面板主要内容分为四块。</p>
<ul>
<li>设置</li>
<li>改变语法</li>
<li>来自插件的命令</li>
</ul>
<h3 id="Go-to-Anything"><a href="#Go-to-Anything" class="headerlink" title="Go to Anything"></a>Go to Anything</h3><p>^p  打开的是切换面板<br>直接输入文件名可以切换文件<br>可以直接预览<br>输入 @ 可以查看按照 Header 查看 (Markdown 语法）, 代码中按照函数来查找<br>输入 # 可以查看变量</p>
<h4 id="同一页面搜索"><a href="#同一页面搜索" class="headerlink" title="同一页面搜索"></a>同一页面搜索</h4><p>^r</p>
<h4 id="整个项目搜索"><a href="#整个项目搜索" class="headerlink" title="整个项目搜索"></a>整个项目搜索</h4><p>ctrl + shift + r</p>
<h4 id="Toggle-Sidebar"><a href="#Toggle-Sidebar" class="headerlink" title="Toggle Sidebar"></a>Toggle Sidebar</h4><p>ctrl+k Ctrl+b</p>
<h4 id="切换面板"><a href="#切换面板" class="headerlink" title="切换面板"></a>切换面板</h4><p>alt + shift + 1 to 4</p>
<h4 id="直达某行"><a href="#直达某行" class="headerlink" title="直达某行"></a>直达某行</h4><p>ctrl+g</p>
<h4 id="移动行"><a href="#移动行" class="headerlink" title="移动行"></a>移动行</h4><p>ctrl+shift+ 上下左右。</p>
<h2 id="结论一"><a href="#结论一" class="headerlink" title="结论一"></a>结论一</h2><p>嘿嘿，这样看上去你基本的编辑任务都是可以比较出色完成的吧？<br>好，我们依然可以看出来，这款编辑器的的确确足够日常编辑使用了，但是，还是并不代表有一定的优越性啊？</p>
<p>你说，老师，能不能再给力一点啊？<br><img src="http://imgsrc.baidu.com/forum/w%3D580/sign=87eeeefcd688d43ff0a991fa4d1cd2aa/1f91e058ccbf6c81fbe76561bc3eb13532fa407e.jpg"></p>
<h2 id="深入研究其中的编辑功能"><a href="#深入研究其中的编辑功能" class="headerlink" title="深入研究其中的编辑功能"></a>深入研究其中的编辑功能</h2><p>把上面的一些功能进行系统性梳理。<br>已经有前辈完成了，我就直接贴上他的地址了。</p>
<p><a href="http://feliving.github.io/Sublime-Text-3-Documentation/index.html">http://feliving.github.io/Sublime-Text-3-Documentation/index.html</a></p>
<h2 id="结论二，确实强大。但是…"><a href="#结论二，确实强大。但是…" class="headerlink" title="结论二，确实强大。但是…"></a>结论二，确实强大。但是…</h2><p>你说，老师，能不能再给力一点啊？<br><img src="http://imgsrc.baidu.com/forum/w%3D580/sign=87eeeefcd688d43ff0a991fa4d1cd2aa/1f91e058ccbf6c81fbe76561bc3eb13532fa407e.jpg"><br>……………………..<br>………………………<br>……………………..<br>…………………..<br>…………………….<br>…………………….</p>
<p>当然可以！!</p>
<h2 id="插件，让-sublime-长出逆风飞翔的翅膀。"><a href="#插件，让-sublime-长出逆风飞翔的翅膀。" class="headerlink" title="插件，让 sublime 长出逆风飞翔的翅膀。"></a>插件，让 sublime 长出逆风飞翔的翅膀。</h2><p>sublime 的功能已经是比较强大了。可是还有什么地方可以优化的吗？<br>加上插件，可以增强已经有的功能，可以扩展越来没有的功能。下面请看好！</p>
<h3 id="用-Vim-强化编辑功能。"><a href="#用-Vim-强化编辑功能。" class="headerlink" title="用 Vim 强化编辑功能。"></a>用 Vim 强化编辑功能。</h3><p>在编辑强化方面，Sublime 自带了一个非常好用的模式，叫做 Vintage mode<br>这个模式有一点点的小问题，就是不方便，我们不妨使用另一个小插件来替换它。</p>
<p><a href="https://github.com/guillermooo/Vintageous">https://github.com/guillermooo/Vintageous</a></p>
<p>ctrl+shift+p 输入 install 输入{enter} 输入 Vintageous{Enter}</p>
<p>安装完毕，你就可以在 Sublime 上面比较方便的使用 vim 编辑方式了。</p>
<h3 id="能不能好看一点？"><a href="#能不能好看一点？" class="headerlink" title="能不能好看一点？"></a>能不能好看一点？</h3><p>Of course!</p>
<p>来来来，戳这里戳这里</p>
<p><a href="https://scotch.io/bar-talk/the-complete-visual-guide-to-sublime-text-3-themes-color-schemes-and-cool-features">https://scotch.io/bar-talk/the-complete-visual-guide-to-sublime-text-3-themes-color-schemes-and-cool-features</a></p>
<h3 id="新建文件可以方便一点吗？"><a href="#新建文件可以方便一点吗？" class="headerlink" title="新建文件可以方便一点吗？"></a>新建文件可以方便一点吗？</h3><p>可以，AdvancedNewFile<br>你只需要 ctrl+alt+n 就可以使用这个插件。</p>
<p>输入文件名可以直接在当前目录下新建。<br>你也可以使用相对路径比如  ../  或者 ../_drafts/AndroidShow<br>是不是非常方便？</p>
<h3 id="侧边栏好像右键菜单好少，能不能再给力一点啊"><a href="#侧边栏好像右键菜单好少，能不能再给力一点啊" class="headerlink" title="侧边栏好像右键菜单好少，能不能再给力一点啊"></a>侧边栏好像右键菜单好少，能不能再给力一点啊</h3><p>有，SidebarEnhancement</p>
<h3 id="只能补全功能不够用，能不能再给力一点啊"><a href="#只能补全功能不够用，能不能再给力一点啊" class="headerlink" title="只能补全功能不够用，能不能再给力一点啊"></a>只能补全功能不够用，能不能再给力一点啊</h3><p>好，SublimeCodeIntel</p>
<h3 id="我有强迫症，对齐功能不够强大，能不能再给力一点啊"><a href="#我有强迫症，对齐功能不够强大，能不能再给力一点啊" class="headerlink" title="我有强迫症，对齐功能不够强大，能不能再给力一点啊"></a>我有强迫症，对齐功能不够强大，能不能再给力一点啊</h3><p>好，ALignment</p>
<h3 id="写注释可以方便一些，就像-Intellij-IDEA-那样写注释吗？"><a href="#写注释可以方便一些，就像-Intellij-IDEA-那样写注释吗？" class="headerlink" title="写注释可以方便一些，就像 Intellij IDEA 那样写注释吗？"></a>写注释可以方便一些，就像 Intellij IDEA 那样写注释吗？</h3><p>可以 Doc Blockr</p>
<h3 id="前端工程师要那些插件吗？"><a href="#前端工程师要那些插件吗？" class="headerlink" title="前端工程师要那些插件吗？"></a>前端工程师要那些插件吗？</h3><p>Emmet<br>HTML-CSS-JS<br>等等</p>
<h3 id="我平时用-markdown-写-BLOG-有什么比较方便的东西吗？"><a href="#我平时用-markdown-写-BLOG-有什么比较方便的东西吗？" class="headerlink" title="我平时用 markdown 写 BLOG, 有什么比较方便的东西吗？"></a>我平时用 markdown 写 BLOG, 有什么比较方便的东西吗？</h3><p>markdown</p>
<ul>
<li>extended</li>
<li>preview</li>
<li>light</li>
<li>toc</li>
</ul>
<h2 id="结论三，老师真的很好用啊。但是…"><a href="#结论三，老师真的很好用啊。但是…" class="headerlink" title="结论三，老师真的很好用啊。但是…"></a>结论三，老师真的很好用啊。但是…</h2><p>你说，老师，能不能再给力一点啊？<br><img src="http://imgsrc.baidu.com/forum/w%3D580/sign=87eeeefcd688d43ff0a991fa4d1cd2aa/1f91e058ccbf6c81fbe76561bc3eb13532fa407e.jpg"><br>……………………..<br>………………………<br>……………………..<br>…………………..<br>…………………….<br>……………………..<br>………………………<br>……………………..<br>…………………..<br>…………………….<br>……………………..<br>………………………<br>……………………..<br>…………………..<br>…………………….<br>……………………..<br>………………………<br>……………………..<br>…………………..<br>…………………….<br>……………………..<br>………………………<br>……………………..<br>…………………..<br>…………………….</p>
<p>特码的，你是来编程的还是来配置编辑器的啊！<br>等你有需求了再去寻找更好的配置方案 OK?</p>
<h2 id="其他链接"><a href="#其他链接" class="headerlink" title="其他链接"></a>其他链接</h2><p>这个 BLog 分享了不少关于 Sublime 的干货<br><a href="https://scotch.io/">https://scotch.io/</a></p>
<p>这个视频链接讲解了一些关于 Sublime 的一些小知识。<br><a href="http://www.imooc.com/learn/40">http://www.imooc.com/learn/40</a></p>
<p>sublime 非官方资源<br><a href="http://docs.sublimetext.info/en/latest/index.html">http://docs.sublimetext.info/en/latest/index.html</a></p>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2016-12-05</strong> 重修文字，已转投 Vim. sublime 作为非主力编辑器。</li>
</ul>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>效率</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 小爬虫案例 -- 抓取女神邓紫棋相关照片</title>
    <url>/2015/03/09/%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在平时抓取部分自己喜欢的资源的时候，我们常常会去下载一些比较有用的资源，比如，我比较喜欢 GEM 的照片，但是，这个东西，总不能总是去找别人要吧，那么，怎么办？</p>
<p>很简单，我们只需要通过 Python 写一个小小的爬虫就可以解决这些问题。</p>
<p>什么是爬虫？自己可以百度去。</p>
<p>我这里指的爬虫是那些可以模拟浏览器的行为的小程序。</p>
<p>比如，我要抓取 G.E.M 的相片，那么，我就想个办法。把图片的地址解析出来。然后写一个小功能下载不就好了么。</p>
<a id="more"></a>

<p>虽然，话是这么说，</p>
<p>但，怎么下手？</p>
<p>这在写这篇文章，并且写到这里的时候，刚刚决定了抓取几个站点</p>
<p>（刚刚百度了 邓紫棋壁纸 得到这个网站 <a href="http://www.6188.com/show/12788_1.html">http://www.6188.com/show/12788_1.html</a>)</p>
<h2 id="0x01-准备工作以及爬取思路"><a href="#0x01-准备工作以及爬取思路" class="headerlink" title="0x01 准备工作以及爬取思路"></a>0x01 准备工作以及爬取思路</h2><p>Python3,Chrome 浏览器或者 Firefox,<br>Python3 基本依赖库 beautifulsoup4 lxml</p>
<p>任务如下：</p>
<ol>
<li><p>第一个简单案例 <a href="http://www.6188.com/show/12788_1.html">http://www.6188.com/show/12788_1.html</a></p>
</li>
<li><p>百度 API 解析</p>
</li>
<li><p>虾米照片爬取</p>
</li>
</ol>
<p>4.instagram 墙外下载 Gem 照片</p>
<ol start="5">
<li>发烧级别的 GEM 粉丝 - 虾米网 down! down! down!</li>
</ol>
<p>涉及到的知识点：</p>
<ol>
<li>爬虫的最最基本思路</li>
<li>几个解析方法 正则解析，bs4 解析，lxml 解析</li>
<li>多线程使用</li>
</ol>
<h2 id="0x02-6188-com-壁纸抓取-–-关键词爬虫"><a href="#0x02-6188-com-壁纸抓取-–-关键词爬虫" class="headerlink" title="0x02 6188.com 壁纸抓取 – 关键词爬虫"></a>0x02 6188.com 壁纸抓取 – 关键词爬虫</h2><p>先说一下思路，首先，你要会点击下载按钮.(#-#)</p>
<ol>
<li><p>访问 <a href="http://www.6188.com/show/12788_1.html">http://www.6188.com/show/12788_1.html</a></p>
</li>
<li><p>点击下载大图</p>
</li>
<li><p>看大图，手动另存为</p>
</li>
</ol>
<p>这是普通人下载图片的方式。</p>
<p>让我们用程序员的眼光来看。</p>
<p>浏览器呈现的具体的过程可以看我的 PyDjango 中关于计算机 Http 协议的部分。</p>
<p>经过抓包 (http 包）分析 (chrome 的 F12), 知道，要想获取图片原始链接，有这么一个流程</p>
<p>从 <a href="http://www.6188.com/show/12788_1.html">http://www.6188.com/show/12788_1.html</a> 解析出下面链接</p>
<p>从 <a href="http://www.6188.com/show.php?pic=/flashAll/20140211/1392111065nvjKS7.jpg">http://www.6188.com/show.php?pic=/flashAll/20140211/1392111065nvjKS7.jpg</a> 解析下面链接</p>
<p>从 <a href="http://pic.6188.com/upload_6188s/flashAll/20140211/1392111065nvjKS7.jpg">http://pic.6188.com/upload_6188s/flashAll/20140211/1392111065nvjKS7.jpg</a> 下载图片。</p>
<p>这样一看，非常简单明了。这就是下载一张图片的链接。</p>
<p>同样道理，把下面的程序写成一个 for 循环，就可以直接下载 35 张图片。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">http://www.6188.com/show/12788_1.html</span><br><span class="line">http://www.6188.com/show/12788_2.html</span><br><span class="line">http://www.6188.com/show/12788_3.html</span><br><span class="line">...</span><br><span class="line">http://www.6188.com/show/12788_35.html</span><br></pre></td></tr></table></figure>

<p>写的应该比较容易认出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;micheal&#x27;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;http://www.6188.com/show/12788_1.html&quot;</span>)</span><br><span class="line">m = re.search(<span class="string">&quot;(/show\.php.+jpg)\&quot;&quot;</span>, r.text)</span><br><span class="line"></span><br><span class="line">pic_url = <span class="string">&quot;http://www.6188.com&quot;</span> + m.group(<span class="number">0</span>)</span><br><span class="line">print(m.group(<span class="number">0</span>))</span><br><span class="line">data = requests.get(pic_url)</span><br><span class="line">print(data.text)</span><br><span class="line"></span><br><span class="line">m = re.search(<span class="string">&quot;src=&#x27;(http://.+\.jpg)&quot;</span>, data.text)</span><br><span class="line">real_url = m.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">&quot;real_url-- 正在下载 --&quot;</span>+real_url)</span><br><span class="line">    r = requests.get(real_url,stream=<span class="literal">True</span>)</span><br><span class="line">    fileName = <span class="string">&quot;GEM.jpg&quot;</span></span><br><span class="line">    fileFullPath = os.path.join(<span class="string">&#x27;/home/micheal/Pictures/&#x27;</span>, fileName)</span><br><span class="line">    print(<span class="string">&quot;正在下载&quot;</span> + <span class="built_in">str</span>(data.status_code))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileFullPath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">1024</span> * <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> chunk: <span class="comment"># filter out keep-alive new chunks</span></span><br><span class="line">                f.write(chunk)</span><br><span class="line">                f.flush()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">&quot;出错&quot;</span>)</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;任务完成&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>添加 For 循环，优化一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;micheal&#x27;</span></span><br><span class="line"></span><br><span class="line">s = requests.session() <span class="comment"># 仿真 browser 使用一个会话</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">    html_url = <span class="string">&quot;http://www.6188.com/show/12788_&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;.html&quot;</span></span><br><span class="line">    r = s.get(html_url)</span><br><span class="line">    print(<span class="string">&quot;downloading&quot;</span> + html_url)</span><br><span class="line">    m = re.search(<span class="string">&quot;(/show\.php.+jpg)\&quot;&quot;</span>, r.text)</span><br><span class="line"></span><br><span class="line">    pic_url = <span class="string">&quot;http://www.6188.com&quot;</span> + m.group(<span class="number">0</span>)</span><br><span class="line">    print(m.group(<span class="number">0</span>))</span><br><span class="line">    data = s.get(pic_url)</span><br><span class="line">    print(data.text)</span><br><span class="line"></span><br><span class="line">    m = re.search(<span class="string">&quot;src=&#x27;(http://.+\.jpg)&quot;</span>, data.text)</span><br><span class="line">    real_url = m.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        img_store_dir = <span class="string">&quot;/home/micheal/Pictures/GEM/6188&quot;</span></span><br><span class="line">        print(<span class="string">&quot;real_url-- 正在下载 --&quot;</span>+real_url)</span><br><span class="line">        r = s.get(real_url,stream=<span class="literal">True</span>)</span><br><span class="line">        fileName = <span class="string">&quot;GEM&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_store_dir):</span><br><span class="line">            os.makedirs(img_store_dir)</span><br><span class="line">        fileFullPath = os.path.join(img_store_dir, fileName)</span><br><span class="line">        print(<span class="string">&quot;正在下载&quot;</span> + <span class="built_in">str</span>(data.status_code))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(fileFullPath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">1024</span> * <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> chunk: <span class="comment"># filter out keep-alive new chunks</span></span><br><span class="line">                    f.write(chunk)</span><br><span class="line">                    f.flush()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">&quot;出错&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;任务完成&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>###评价</p>
<p>第一个小程序应该是非常容易看懂的。</p>
<p>那么，这个程序有什么缺点呢？</p>
<ul>
<li>下载速度太慢，需要使用多线程，</li>
<li>解析方法不具有通用性，这张网页中只有一个地址需要解析，所以正则表达式还是可以胜任。但是，复杂的网页肯定不行</li>
<li>下载的图片太少了。</li>
</ul>
<h2 id="0x03-百度-API-的解析-–-关键词多线程"><a href="#0x03-百度-API-的解析-–-关键词多线程" class="headerlink" title="0x03 百度 API 的解析 – 关键词多线程"></a>0x03 百度 API 的解析 – 关键词多线程</h2><p>主要就是增加了一个多线程的任务，原理什么的基本上和上面那个的相似</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;micheal&#x27;</span></span><br><span class="line"></span><br><span class="line">q = Queue(maxsize=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># http://image.baidu.com/i?tn=resultjsonavatarnew&amp;ie=utf-8&amp;word=%E9%82%93%E7%B4%AB%E6%A3%8B&amp;cg=star&amp;pn=0&amp;rn=60</span></span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            real_url = q.get()</span><br><span class="line">            print(<span class="string">&quot;正在下载&quot;</span> + real_url)</span><br><span class="line"></span><br><span class="line">            img_store_dir = <span class="string">&quot;/home/micheal/Pictures/GEM/baidu&quot;</span></span><br><span class="line">            print(<span class="string">&quot;real_url-- 正在下载 --&quot;</span>+real_url)</span><br><span class="line">            r = s.get(real_url,stream=<span class="literal">True</span>)</span><br><span class="line">            fileName = real_url.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_store_dir):</span><br><span class="line">                os.makedirs(img_store_dir)</span><br><span class="line">            fileFullPath = os.path.join(img_store_dir, fileName)</span><br><span class="line">            print(<span class="string">&quot;正在下载&quot;</span> + <span class="built_in">str</span>(r.status_code))</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(fileFullPath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">1024</span> * <span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">if</span> chunk: <span class="comment"># filter out keep-alive new chunks</span></span><br><span class="line">                        f.write(chunk)</span><br><span class="line">                        f.flush()</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;出错&quot;</span>)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        q.task_done()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        fr = i * <span class="number">60</span></span><br><span class="line">        to = i * <span class="number">60</span> + <span class="number">60</span></span><br><span class="line">        r = requests.get(<span class="string">&quot;http://image.baidu.com/i?tn=resultjsonavatarnew&amp;ie=utf-8&amp;word=%E9%82%93%E7%B4%AB%E6%A3%8B&amp;cg=star&amp;pn=&quot;</span>+<span class="built_in">str</span>(fr)+<span class="string">&quot;&amp;rn=&quot;</span>+<span class="built_in">str</span>(to)+<span class="string">&quot;&amp;itg=1&amp;z=3&amp;fr=&amp;width=0&amp;height=0&amp;lm=-1&amp;ic=0&amp;s=0&amp;st=-1&quot;</span>)</span><br><span class="line">        data = json.loads(r.text)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">            real_url = data[<span class="string">&#x27;imgs&#x27;</span>][j][<span class="string">&#x27;objURL&#x27;</span>]</span><br><span class="line">            print(real_url)</span><br><span class="line">            q.put(real_url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">            t = threading.Thread(target=worker)</span><br><span class="line">            t.daemon = <span class="literal">True</span></span><br><span class="line">            t.start()</span><br><span class="line"></span><br><span class="line">q.join()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;任务完成&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>引入了多线程，但是抓取效果并不好，大概有 10% 左右的照片可能是有点问题的，把线程数目从 20 条调整小一些。</p>
<p>先写到这里，明天接着写剩下来的代码。</p>
<h2 id="0x04-抓取虾米的相册-–-反反爬虫"><a href="#0x04-抓取虾米的相册-–-反反爬虫" class="headerlink" title="0x04 抓取虾米的相册 – 反反爬虫"></a>0x04 抓取虾米的相册 – 反反爬虫</h2><p>好吧，我们将魔手伸向了虾米音乐的图片板块</p>
<p><a href="http://www.xiami.com/artist/pic-55712">http://www.xiami.com/artist/pic-55712</a></p>
<p>我们尝试使用昨天的方法获取页面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ss = requests.session()</span><br><span class="line">r = ss.get(“http://www.xiami.com/artist/pic-55712?spm=0.0.0.0.IaKt5o&amp;page=3”)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是出现问题了，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> “-//IETF//DTD <span class="meta-keyword">HTML</span> 2.0//EN”&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>400 Bad Request<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">”white”</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">with</span>(<span class="built_in">document</span>)<span class="keyword">with</span>(body)<span class="keyword">with</span>(insertBefore(createElement(“script”),firstChild))setAttribute(“exparams”,”category=&amp;userid=&amp;aplus&amp;yunid=&amp;&amp;asid=AABI4v5USkJh1pUp01o=”,id=”tb-beacon-aplus”,src=(location&gt;”https”?”<span class="comment">//s”:”//a”)+”.tbcdn.cn/s/aplus_v2.js”)</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>400 Bad Request<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Your browser sent a request that this server could not understand. Sorry for the inconvenience.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Please report this message and include the following information to us.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Thank you very much!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>URL:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>http://www.xiami.com/artist/pic-55712?spm=0.0.0.0.IaKt5o<span class="symbol">&amp;amp;</span>page=3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Server:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>web-xiami-main-030.cm10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Date:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2015/03/10 20:23:36<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span>Powered by Tengine<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">h</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们前面使用的代码都是爬取一些没有做太多防止爬虫的网站，但是，我们今天准备爬取的是一个有防护措施的网站。</p>
<p>没办法，修改一下 headers, 然后继续访问即可。</p>
<h2 id="0xEE-更新"><a href="#0xEE-更新" class="headerlink" title="0xEE 更新"></a>0xEE 更新</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-12-19</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>Scrapy</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>扇贝背单词小助手</title>
    <url>/2015/03/17/%E6%89%87%E8%B4%9D%E8%83%8C%E5%8D%95%E8%AF%8D%E5%B0%8F%E5%8A%A9%E6%89%8B/</url>
    <content><![CDATA[<h2 id="本文内容"><a href="#本文内容" class="headerlink" title="本文内容"></a>本文内容</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li>英文单词的处理</li>
<li>shanbay 单词本的提交</li>
</ul>
<h3 id="英文单词的处理"><a href="#英文单词的处理" class="headerlink" title="英文单词的处理"></a>英文单词的处理</h3><p>正则表达式进行提取，然后通过 Python 的自然语言处理工具 ntlk 进行单词原型的转换</p>
<h3 id="shanbay-单词的处理"><a href="#shanbay-单词的处理" class="headerlink" title="shanbay 单词的处理"></a>shanbay 单词的处理</h3><p>由于使用了传说中的 requests，使得代码简洁程度大大提升。</p>
<a id="more"></a>

<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><p>英文单词处理模块</p>
<p>shanbay 登录以及单词的提交</p>
<p>这是 v0.1 版本，有不少细节需要调整。有时间我会继续更新<br>代码 9 逻辑比较简单，自己阅读代码吧</p>
<p><a href="https://github.com/twocucao/PyTools">请来 github 这里</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;micheal&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> nltk.stem <span class="keyword">import</span> WordNetLemmatizer</span><br><span class="line"></span><br><span class="line">lemmatizer = WordNetLemmatizer()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 常量设置</span></span><br><span class="line"></span><br><span class="line">BOOKS_FOLDER = <span class="string">&quot;Books/&quot;</span></span><br><span class="line"></span><br><span class="line">OUTPUTS_FOLDER = <span class="string">&quot;OutPuts/&quot;</span></span><br><span class="line"></span><br><span class="line">COVER_FILE = <span class="string">&quot;cover.jpg&quot;</span></span><br><span class="line"></span><br><span class="line">EXCLUDED_LIB_FILE = <span class="string">&quot;excluded_libs.txt&quot;</span></span><br><span class="line"></span><br><span class="line">SUMMARY_FILE = <span class="string">&quot;SUMMARY.json&quot;</span></span><br><span class="line"></span><br><span class="line">ALL_LIB_FILE = <span class="string">&quot;all.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 初始化数据，</span></span><br><span class="line"><span class="comment"># 创建 ALLFile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createMergeFile</span>():</span></span><br><span class="line">    fo = <span class="built_in">open</span>(ALL_LIB_FILE, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> os.listdir(BOOKS_FOLDER):</span><br><span class="line">        fi = <span class="built_in">open</span>(BOOKS_FOLDER + name, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            s = fi.read(<span class="number">16</span> * <span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            fo.write(s)</span><br><span class="line">        fi.close()</span><br><span class="line">    fo.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sorted_words_list_from</span>(<span class="params">txt_path</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txt_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        strs = f.read()</span><br><span class="line">        s = re.findall(<span class="string">&quot;\w+&quot;</span>, <span class="built_in">str</span>.lower(strs), flags=re.ASCII)</span><br><span class="line"></span><br><span class="line">    ss = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> s:</span><br><span class="line">        ss.append(lemmatizer.lemmatize(item))</span><br><span class="line"></span><br><span class="line">    l = <span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(ss)))</span><br><span class="line">    ll = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        m = re.search(<span class="string">&quot;\d+&quot;</span>, i)</span><br><span class="line">        n = re.search(<span class="string">&quot;\W+&quot;</span>, i, flags=re.ASCII)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> m <span class="keyword">and</span> <span class="keyword">not</span> n <span class="keyword">and</span> <span class="built_in">len</span>(i) &gt; <span class="number">4</span>:</span><br><span class="line">            ll.append(i)</span><br><span class="line">            <span class="comment"># 不属于数字也不属于非（英文 + 数字）并且字母长度大于 4 的集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ll</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">WordCountInit</span>():</span></span><br><span class="line">    createMergeFile()</span><br><span class="line"></span><br><span class="line">    excluded_words = get_sorted_words_list_from(<span class="string">&quot;excluded_libs.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    file = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    folder_list = os.listdir(BOOKS_FOLDER)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> folder_list:</span><br><span class="line">        file[item] = get_sorted_words_list_from(BOOKS_FOLDER + item)</span><br><span class="line"></span><br><span class="line">        words = file[item]</span><br><span class="line"></span><br><span class="line">        real_words = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> excluded_words:</span><br><span class="line">                real_words.append(word)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(&quot;excluded_words\n&quot;+str(excluded_words))</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;real_words\n&quot;</span> + <span class="built_in">str</span>(real_words))</span><br><span class="line"></span><br><span class="line">        excluded_words.extend(file[item])</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(OUTPUTS_FOLDER + item, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="built_in">str</span>(<span class="built_in">sorted</span>(<span class="built_in">list</span>(real_words))))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(file)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> WordsCount <span class="keyword">import</span> get_sorted_words_list_from, WordCountInit</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;micheal&#x27;</span></span><br><span class="line"></span><br><span class="line">word_book_url = <span class="string">&quot;http://www.shanbay.com/wordbook/99004/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> nltk.stem <span class="keyword">import</span> WordNetLemmatizer</span><br><span class="line"></span><br><span class="line">lemmatizer = WordNetLemmatizer()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShanBay</span>:</span></span><br><span class="line">    <span class="comment"># 初始化 shanbay 的基本信息</span></span><br><span class="line">    <span class="comment"># 1. 登录，</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2，创建 wordbook</span></span><br><span class="line">    <span class="comment"># 3，创建 wordlist，</span></span><br><span class="line">    <span class="comment"># 4，用集合填充 wordlist</span></span><br><span class="line">    <span class="comment"># 5，填充策略</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;基本数据正在初始化&quot;</span>)</span><br><span class="line">        WordCountInit()</span><br><span class="line">        print(<span class="string">&quot;初始化完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.93 Safari/537.36&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;en-US,en;q=0.5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;max-age=0&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.index_url = <span class="string">&quot;http://www.shanbay.com/&quot;</span></span><br><span class="line"></span><br><span class="line">        self.login_url = <span class="string">&quot;http://www.shanbay.com/accounts/login/&quot;</span></span><br><span class="line"></span><br><span class="line">        self.sb_session = requests.Session()</span><br><span class="line">        self.sb_session.headers.update(self.headers)</span><br><span class="line">        self.sb_session.get(self.login_url)</span><br><span class="line">        <span class="comment"># 开始登录</span></span><br><span class="line">        <span class="comment"># 初始化登录</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;正在登录中&quot;</span>)</span><br><span class="line">        self.doLogin(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;单词书  情况如下 \n&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;SUMMARY.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            decodejson = json.loads(f.read())</span><br><span class="line">            self.book_info_title = decodejson[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">            self.book_info_category = decodejson[<span class="string">&quot;category&quot;</span>]</span><br><span class="line">            self.book_info_description = decodejson[<span class="string">&quot;description&quot;</span>]</span><br><span class="line">            self.book_info_price = decodejson[<span class="string">&quot;price&quot;</span>]</span><br><span class="line">            print(</span><br><span class="line">                <span class="string">&quot;标题：&quot;</span> + self.book_info_title + <span class="string">&quot;\n 类型：&quot;</span> + self.book_info_category + <span class="string">&quot;\n 描述：&quot;</span> + self.book_info_description + <span class="string">&quot;\n 价格：&quot;</span> + self.book_info_price)</span><br><span class="line"></span><br><span class="line">        self.createWordBook()</span><br><span class="line"></span><br><span class="line">        <span class="comment">## 判断有多少个路进然后接着进行一系列的操作</span></span><br><span class="line">        word_list_list = os.listdir(<span class="string">&quot;Books/&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> word_list <span class="keyword">in</span> word_list_list:</span><br><span class="line">            print(<span class="string">&quot;正在创建&quot;</span> + word_list)</span><br><span class="line"></span><br><span class="line">            dt = datetime.now()</span><br><span class="line"></span><br><span class="line">            list_id = self.createWordList(self.word_book_id, <span class="string">&quot;List&quot;</span> + dt.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>),</span><br><span class="line">                                          <span class="string">&quot;这仅仅是一个比较简单的描述&quot;</span> + dt.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>))</span><br><span class="line"></span><br><span class="line">            self.fillWordListById(list_id, get_sorted_words_list_from(<span class="string">&quot;OutPuts/&quot;</span> + word_list))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(self.sb_session.get(self.index_url).text)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doLogin</span>(<span class="params">self, username, password</span>):</span></span><br><span class="line">        self.login_form = &#123;</span><br><span class="line">            <span class="string">&quot;csrfmiddlewaretoken&quot;</span>: self.sb_session.cookies[<span class="string">&quot;csrftoken&quot;</span>],</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.sb_session.post(self.login_url, self.login_form)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fillWordListById</span>(<span class="params">self, _id, words</span>):</span></span><br><span class="line">        <span class="comment"># &quot;172981&quot;</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            post_data = &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: _id,</span><br><span class="line">                <span class="string">&quot;word&quot;</span>: word,</span><br><span class="line">            &#125;</span><br><span class="line">            self.sb_session.post(<span class="string">&quot;http://www.shanbay.com/api/v1/wordlist/vocabulary/&quot;</span>, post_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createWordBook</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># http://www.shanbay.com/wordbook/create/basicinfo/</span></span><br><span class="line"></span><br><span class="line">        createWordBookForm = &#123;</span><br><span class="line">            <span class="string">&quot;csrfmiddlewaretoken&quot;</span>: self.sb_session.cookies[<span class="string">&quot;csrftoken&quot;</span>],</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: self.book_info_title,</span><br><span class="line">            <span class="string">&quot;category&quot;</span>: self.book_info_category,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: self.book_info_description,</span><br><span class="line">            <span class="string">&quot;price&quot;</span>: self.book_info_price,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        t = self.sb_session.post(<span class="string">&quot;http://www.shanbay.com/wordbook/create/basicinfo/&quot;</span>, createWordBookForm)</span><br><span class="line">        self.word_book_id = <span class="built_in">str</span>(t.url).split(<span class="string">&quot;/&quot;</span>)[-<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 封面没有办法提交...... 以后再说</span></span><br><span class="line">        coverFiles = &#123;</span><br><span class="line">            <span class="string">&quot;csrfmiddlewaretoken&quot;</span>: self.sb_session.cookies[<span class="string">&quot;csrftoken&quot;</span>],</span><br><span class="line">            <span class="string">&quot;cover&quot;</span>: (<span class="string">&#x27;cover.jpg&#x27;</span>, <span class="built_in">open</span>(<span class="string">&#x27;cover.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>), <span class="string">&#x27;image/jpeg&#x27;</span>, &#123;<span class="string">&#x27;Expires&#x27;</span>: <span class="string">&#x27;0&#x27;</span>&#125;),</span><br><span class="line">            <span class="string">&quot;wordbook_id&quot;</span>: self.word_book_id,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: self.book_info_description,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># files = &#123;&#x27;file&#x27;: (&#x27;report.xls&#x27;, open(&#x27;report.xls&#x27;, &#x27;rb&#x27;), &#x27;application/vnd.ms-excel&#x27;, &#123;&#x27;Expires&#x27;: &#x27;0&#x27;&#125;)&#125;</span></span><br><span class="line"></span><br><span class="line">        self.sb_session.post(<span class="string">&quot;http://www.shanbay.com/wordbook/create/&quot;</span> + self.word_book_id + <span class="string">&quot;/uploadcover/&quot;</span>,</span><br><span class="line">                             files=coverFiles)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doMenu</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># while True:</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># print(&quot;&quot;&quot;\</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># 请输入相关操作：</span></span><br><span class="line">        <span class="comment"># 1.createWordBook</span></span><br><span class="line">        <span class="comment"># 2.createWordList</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#     &quot;&quot;&quot;)</span></span><br><span class="line">        <span class="comment">#     self.word_book_id = input(&quot;word_book_id&quot;)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createWordList</span>(<span class="params">self, _id, name, desc</span>):</span></span><br><span class="line">        createWordListFrom = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: desc,</span><br><span class="line">            <span class="string">&quot;wordbook_id&quot;</span>: _id,</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        r = self.sb_session.post(<span class="string">&quot;http://www.shanbay.com/api/v1/wordbook/wordlist/&quot;</span>, createWordListFrom)</span><br><span class="line">        <span class="keyword">return</span> (json.loads(r.text)[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;wordlist&quot;</span>][<span class="string">&quot;id&quot;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">sss = ShanBay()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个程序还是比较简单的。</p>
<p>博客文章原创声明：<br>本博文章如果没有声明为整理或者转载，均为本人原创。非商业可以任意转载分享。<br>关于本人』(<a href="http://twocucao.xyz/about/">http://twocucao.xyz/about/</a>),<br>点击链接就可以 web 幻灯片的方式看到我对自己的介绍。</p>
<p>我的 Github 地址：<a href="https://github.com/twocucao">https://github.com/twocucao</a>  （尽管东西不多，但是欢迎来 Star 和 Fork，就算你们来这里提前 Star Folk 了）<br>简书地址：<a href="http://www.jianshu.com/users/9a7e0b9da317/latest_articles">http://www.jianshu.com/users/9a7e0b9da317/latest_articles</a> （不常更新，而且几乎没有技术文章的讲解）<br>联系方式：<a href="mailto:&#116;&#119;&#x6f;&#x63;&#117;&#99;&#97;&#x6f;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#116;&#119;&#x6f;&#x63;&#117;&#99;&#97;&#x6f;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a><br>本人才疏学浅，是一个水平比较菜的程序员，如果行文之间发现任何错误，欢迎指正，特别欢迎技术上的指正。</p>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>效率</tag>
        <tag>小玩具</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell CheatSheet</title>
    <url>/2018/08/28/ShellCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Shell 单行命令。</p>
<p>脚本主要适用于 BASH 环境，因为 Server 端的 Bash 主要还是 Bash 脚本居多。</p>
<p>不定期更新。</p>
<blockquote>
<p>声明：Bash 命令适合那些十来行代码可以搞定的比较简单的逻辑，一般情况下用于处理一些服务的开启。至于部署，强烈推荐 Ansible. 目前在项目中使用 Ansible 从零开始无人值守部署一台机器。基本上完美到极致。</p>
</blockquote>
<a id="more"></a>

<h2 id="0x01-快捷键操作"><a href="#0x01-快捷键操作" class="headerlink" title="0x01. 快捷键操作"></a>0x01. 快捷键操作</h2><ul>
<li>「<strong>c-c</strong>」  : 中断当前命令。</li>
<li>「<strong>c-z</strong>」  : 当前程序暂停，bg 切换后台运行，使用 fg 可以调回</li>
<li>「<strong>tab</strong>」  : 补全</li>
<li>「<strong>tabx2</strong>」  : 补全提示</li>
<li>「<strong>c-r</strong>」  : 搜索命令行</li>
<li>「<strong>c-w</strong>」  : 同 vim</li>
<li>「<strong>c-u</strong>」  : 删除整行</li>
<li>「<strong>a-b/a-f</strong>」  : 移动一个词</li>
<li>「<strong>c-a</strong>」  : 移动至行首</li>
<li>「<strong>c-e</strong>」  : 移动至行尾</li>
<li>「<strong>c-k</strong>」  : 删除光标到行尾</li>
<li>「<strong>c-l</strong>」  : 清屏</li>
<li>「<strong>c-x,c-e</strong>」  : 用默认编辑器编辑当前命令（这样就可以把其他文本移动扔掉了。)</li>
</ul>
<h2 id="0x02-Linux-命令"><a href="#0x02-Linux-命令" class="headerlink" title="0x02. Linux 命令"></a>0x02. Linux 命令</h2><p>如果你和我一样使用的是 mac 系统，请先参考下面的链接</p>
<p><a href="https://github.com/twocucao/dotfiles/blob/master/install_brew_packages.sh">https://github.com/twocucao/dotfiles/blob/master/install_brew_packages.sh</a></p>
<blockquote>
<p>经过上面一步，则基本上 find sed tar which 这些命令使用的 gnu 版本 (linux 版本）, 而非系统自带的 unix 版本了。</p>
</blockquote>
<blockquote>
<p>如何查找帮助</p>
</blockquote>
<ol>
<li>找男人 man 一下</li>
<li>whatis / which / where</li>
<li>tldr</li>
</ol>
<p>值得一提的就是 tldr, 直接可以在上面查看命令的常规使用。实在是碉堡了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Secure Shell is a protocol used to securely <span class="built_in">log</span> onto remote systems.</span><br><span class="line">It can be used <span class="keyword">for</span> logging or executing commands on a remote server.</span><br><span class="line"></span><br><span class="line">- Connect to a remote server:</span><br><span class="line">    ssh username@remote_host</span><br><span class="line"></span><br><span class="line">- Connect to a remote server with a specific identity (private key):</span><br><span class="line">    ssh -i path/to/key_file username@remote_host</span><br><span class="line"></span><br><span class="line">- Connect to a remote server using a specific port:</span><br><span class="line">    ssh username@remote_host -p 2222</span><br><span class="line"></span><br><span class="line">- Run a <span class="built_in">command</span> on a remote server:</span><br><span class="line">    ssh remote_host <span class="built_in">command</span> -with -flags</span><br><span class="line"></span><br><span class="line">- SSH tunneling: Dynamic port forwarding (SOCKS proxy on localhost:9999):</span><br><span class="line">    ssh -D 9999 -C username@remote_host</span><br><span class="line"></span><br><span class="line">- SSH tunneling: Forward a specific port (localhost:9999 to slashdot.org:80) along with disabling pseudo-[t]ty allocation and executio[n] of remote commands:</span><br><span class="line">    ssh -L 9999:slashdot.org:80 -N -T username@remote_host</span><br><span class="line"></span><br><span class="line">- SSH jumping: Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters):</span><br><span class="line">    ssh -J username@jump_host username@remote_host</span><br><span class="line"></span><br><span class="line">- Agent forwarding: Forward the authentication information to the remote machine (see `man ssh_config` <span class="keyword">for</span> available options):</span><br><span class="line">    ssh -A username@remote_host</span><br></pre></td></tr></table></figure>

<h2 id="0x03-Tips-amp-amp-Hacks"><a href="#0x03-Tips-amp-amp-Hacks" class="headerlink" title="0x03 Tips &amp;&amp; Hacks"></a>0x03 Tips &amp;&amp; Hacks</h2><h3 id="文件-目录"><a href="#文件-目录" class="headerlink" title="文件 / 目录"></a>文件 / 目录</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul>
<li>mkdir</li>
<li>rm</li>
<li>cd</li>
<li>cp</li>
<li>pwd</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建和删除</span></span><br><span class="line">mkdir</span><br><span class="line">mkdir -p a/b/c</span><br><span class="line">rm</span><br><span class="line">rm -rf dir/file/regex</span><br><span class="line">rm *<span class="built_in">log</span></span><br><span class="line"><span class="comment"># 等价</span></span><br><span class="line">find ./ -name <span class="string">&quot;*log&quot;</span> -<span class="built_in">exec</span> rm &#123;&#125;;</span><br><span class="line">mv</span><br><span class="line"></span><br><span class="line"><span class="comment">## mv 可以用于移动文件，也可以进行重命名</span></span><br><span class="line"></span><br><span class="line">cp</span><br><span class="line"></span><br><span class="line">find ./ | wc -l</span><br><span class="line">cp -r source_dir dest_dir</span><br><span class="line">rsync --progress -a source_dir dest_dir</span><br><span class="line">rsync -vr --progress you_folder_here twocucao@192.168.2.151:/Users/twocucao/Codes/</span><br><span class="line"><span class="comment"># 目录切换</span></span><br><span class="line">ls -lrt</span><br><span class="line"></span><br><span class="line">find ./ -name <span class="string">&quot;*.o&quot;</span> -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">more</span><br><span class="line">head</span><br><span class="line">tail</span><br><span class="line">tail -f filename</span><br><span class="line">diff</span><br><span class="line"></span><br><span class="line">chown</span><br><span class="line">chmod</span><br><span class="line">chown -R tuxapp <span class="built_in">source</span>/</span><br><span class="line">chmod a+x myscript</span><br><span class="line"></span><br><span class="line">ln cc ccA</span><br><span class="line">ln -s cc ccTo</span><br><span class="line"></span><br><span class="line">cat -v record.log | grep AAA | grep -v BBB | wc -l</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="查找文件之-find-gfind"><a href="#查找文件之-find-gfind" class="headerlink" title="查找文件之 find (gfind)"></a>查找文件之 find (gfind)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Find</span></span><br><span class="line"></span><br><span class="line">find . \( -name <span class="string">&quot;*.txt&quot;</span> -o -name <span class="string">&quot;*.pdf&quot;</span> \) -<span class="built_in">print</span></span><br><span class="line"><span class="comment"># 正则方式查找。txt 和。pdf</span></span><br><span class="line">find . -regex  <span class="string">&quot;.*\(\.txt|\.pdf\)$&quot;</span></span><br><span class="line">find . ! -name <span class="string">&quot;*.txt&quot;</span> -<span class="built_in">print</span></span><br><span class="line">find . -maxdepth 1 -<span class="built_in">type</span> f</span><br><span class="line"><span class="comment"># 定制搜索</span></span><br><span class="line"><span class="comment">## 按照类型搜索</span></span><br><span class="line">find . -<span class="built_in">type</span> f -<span class="built_in">print</span>  <span class="comment">#只列出所有文件</span></span><br><span class="line">find . -<span class="built_in">type</span> d -<span class="built_in">print</span>  <span class="comment">#只列出所有目录</span></span><br><span class="line">find . -<span class="built_in">type</span> l -<span class="built_in">print</span>  <span class="comment">#只列出所有符号链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 按照时间搜索</span></span><br><span class="line">find . -atime 7 -<span class="built_in">type</span> f -<span class="built_in">print</span> <span class="comment"># 最近第 7 天被访问过的所有文件：</span></span><br><span class="line">find . -atime -7 -<span class="built_in">type</span> f -<span class="built_in">print</span> <span class="comment"># 最近 7 天内被访问过的所有文件：</span></span><br><span class="line">find . -atime +7 <span class="built_in">type</span> f -<span class="built_in">print</span> <span class="comment"># 查询 7 天前被访问过的所有文件：</span></span><br><span class="line"><span class="comment"># w,k,M,G</span></span><br><span class="line">find . -<span class="built_in">type</span> f -size +2k</span><br><span class="line">find . -<span class="built_in">type</span> f -perm 644 -<span class="built_in">print</span>  <span class="comment"># 找具有可执行权限的所有文件</span></span><br><span class="line">find . -<span class="built_in">type</span> f -user weber -<span class="built_in">print</span> <span class="comment"># 找用户 weber 所拥有的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后续动作</span></span><br><span class="line"><span class="comment">## 删除</span></span><br><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.swp&quot;</span> -delete</span><br><span class="line"><span class="comment">## 执行动作</span></span><br><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.swp&quot;</span> | xargs rm</span><br><span class="line">find . -<span class="built_in">type</span> f -user root -<span class="built_in">exec</span> chown weber &#123;&#125; \;</span><br><span class="line"><span class="comment">## eg: copy 到另一个目录</span></span><br><span class="line">find . -<span class="built_in">type</span> f -mtime +10 -name <span class="string">&quot;*.txt&quot;</span> -<span class="built_in">exec</span> cp &#123;&#125; OLD \;</span><br><span class="line"><span class="comment">##  -exec ./commands.sh &#123;&#125; \;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 删除内部为空的文件夹</span></span><br><span class="line"><span class="comment"># 递归删除 a/b/c</span></span><br><span class="line">find . -<span class="built_in">type</span> d -empty -delete</span><br><span class="line"><span class="comment">#    使用.gitkeep 进行填充</span></span><br><span class="line">find . -<span class="built_in">type</span> d -empty -<span class="built_in">exec</span> touch &#123;&#125;/.gitkeep \;</span><br><span class="line">find . -<span class="built_in">type</span> d -empty -not -path <span class="string">&#x27;*/\.*&#x27;</span> -<span class="built_in">exec</span> touch &#123;&#125;/.gitkeep \; <span class="comment"># 不初始化.git/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 寻找 TOP 10</span></span><br><span class="line">find . -<span class="built_in">type</span> f -<span class="built_in">printf</span> <span class="string">&#x27;%s %p\n&#x27;</span>| sort -nr | head -10 | awk <span class="string">&#x27;&#123;$1/=1024*1024;printf &quot;%.2fMB - %s\n&quot;,$1,$2&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 寻找文件夹 TOP 10</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;&#125;: A placeholder token that will be replaced with the path of the search result (documents/images/party.jpg).</span><br><span class="line">&#123;.&#125;: Like &#123;&#125;, but without the file extension (documents/images/party).</span><br><span class="line">&#123;/&#125;: A placeholder that will be replaced by the basename of the search result (party.jpg).</span><br><span class="line">&#123;//&#125;: Uses the parent of the discovered path (documents/images).</span><br><span class="line">&#123;/.&#125;: Uses the basename, with the extension removed (party).</span><br><span class="line"><span class="comment"># Convert all jpg files to png files:</span></span><br><span class="line">fd -e jpg -x convert &#123;&#125; &#123;.&#125;.png</span><br><span class="line"></span><br><span class="line"><span class="comment"># Unpack all zip files (if no placeholder is given, the path is appended):</span></span><br><span class="line">fd -e zip -x unzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert all flac files into opus files:</span></span><br><span class="line">fd -e flac -x ffmpeg -i &#123;&#125; -c:a libopus &#123;.&#125;.opus</span><br><span class="line"></span><br><span class="line"><span class="comment"># Count the number of lines in Rust files (the command template can be terminated with &#x27;;&#x27;):</span></span><br><span class="line">fd -x wc -l \; -e rs</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="压缩-解压缩"><a href="#压缩-解压缩" class="headerlink" title="压缩 / 解压缩"></a>压缩 / 解压缩</h4><ul>
<li>7z</li>
<li>7za</li>
<li>7zr</li>
<li>tar</li>
<li>gzip</li>
<li>unzip</li>
<li>unrar</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打包</span></span><br><span class="line">tar -cvf</span><br><span class="line"><span class="comment">#解包</span></span><br><span class="line">tar -xvf</span><br><span class="line"><span class="comment">#压缩</span></span><br><span class="line">gzip</span><br><span class="line"><span class="comment">#解压缩 gunzip bzip</span></span><br></pre></td></tr></table></figure>

<ul>
<li>tar 是将多个文件放在一起变成一个 tar 文件 (Tape Archiver)</li>
<li>gzip 是讲一个文件变成一个压缩文件</li>
</ul>
<blockquote>
<p>则 foo.tar.gz 指的是 先把文件转为 tar 文件，然后 gzip 之</p>
</blockquote>
<h3 id="文本篇"><a href="#文本篇" class="headerlink" title="文本篇"></a>文本篇</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep match_pattern file</span><br><span class="line"></span><br><span class="line">-o 只输出匹配的文本行</span><br><span class="line">-v 只输出没有匹配的文本行</span><br><span class="line">-c 统计文件中包含文本的次数</span><br><span class="line"></span><br><span class="line">-n 打印匹配行号</span><br><span class="line">-i 搜索时符合大小写</span><br><span class="line">-l 之打印文件名</span><br><span class="line"></span><br><span class="line">grep <span class="string">&quot;class&quot;</span> . -R -n <span class="comment"># 多级目录中对文本递归搜索</span></span><br><span class="line">grep -e <span class="string">&quot;class&quot;</span> -e <span class="string">&quot;vitural&quot;</span> file <span class="comment"># 匹配多个模式</span></span><br><span class="line">grep <span class="string">&quot;test&quot;</span> file* -lZ| xargs -0 rm <span class="comment"># grep 输出以、0 作为结尾符的文件名：（-z）</span></span><br><span class="line"></span><br><span class="line">-d 定义定界符</span><br><span class="line">-n 输出为多行</span><br><span class="line">-l &#123;&#125; 指定替换字符串</span><br><span class="line">cat file.txt | xargs <span class="comment"># 打印多行</span></span><br><span class="line">cat file.txt | xargs -n 3 <span class="comment"># 分割多行</span></span><br><span class="line">cat file.txt | xargs -I &#123;&#125; ./command.sh -p &#123;&#125; -1</span><br><span class="line">-0 指定、0 为输入定界符</span><br><span class="line">find source_dir/ -<span class="built_in">type</span> f -name <span class="string">&quot;*.cpp&quot;</span> -print0 |xargs -0 wc -l</span><br><span class="line"></span><br><span class="line">sort 排序</span><br><span class="line">-n 按数字进行排序</span><br><span class="line">-d 按字典序进行排序</span><br><span class="line">-r 逆序排序</span><br><span class="line">-k N 指定按照第 N 列排序</span><br><span class="line"></span><br><span class="line">sort -nrk 1 data.txt</span><br><span class="line">sort -bd data // 忽略像空格之类的前导空白字符</span><br><span class="line"></span><br><span class="line">sort unsort.txt | uniq &gt; sorted.txt <span class="comment"># 消除重复行</span></span><br><span class="line">sort unsort.txt | uniq -c <span class="comment"># 统计各行在文件中出现的次数</span></span><br><span class="line">sort unsort.txt | uniq -d <span class="comment"># 找出重复行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 tr 进行转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cut 按列切分文本</span></span><br><span class="line">cut -f2,4 filename <span class="comment">#截取文件的第 2 列和第 4 列</span></span><br><span class="line">cut -f3 --complement filename <span class="comment">#去文件除第 3 列的所有列</span></span><br><span class="line">cut -f2 -d<span class="string">&quot;;&quot;</span> filename -d <span class="comment">#指定定界符</span></span><br><span class="line">cut -c1-5 file <span class="comment">#打印第一到 5 个字符</span></span><br><span class="line">cut -c-2 file  <span class="comment">#打印前 2 个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># paste 按列拼接文本</span></span><br><span class="line">paste file1 file2 -d <span class="string">&quot;,&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wc 统计行和字符的工具</span></span><br><span class="line">wc -l file <span class="comment"># 统计行数</span></span><br><span class="line">wc -w file <span class="comment"># 统计单词数</span></span><br><span class="line">wc -c file <span class="comment"># 统计字符数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sed 文本替换利器</span></span><br><span class="line">sed <span class="string">&#x27;s/text/replace_text/&#x27;</span> file  <span class="comment"># 首处替换</span></span><br><span class="line">sed <span class="string">&#x27;s/text/replace_text/g&#x27;</span> file  <span class="comment"># 全局替换</span></span><br><span class="line">sed -i <span class="string">&#x27;s/text/repalce_text/g&#x27;</span> file <span class="comment"># 替换文件</span></span><br><span class="line">sed <span class="string">&#x27;/^$/d&#x27;</span> file  <span class="comment"># 移除空白行</span></span><br><span class="line">sed -i <span class="string">&#x27;s/twocucao/micheal/g&#x27;</span> xx.dump.sql</span><br><span class="line">sed -n 634428,887831p insert_doc_ids_new.sql &gt; uninserted_sql.sql</span><br></pre></td></tr></table></figure>

<h3 id="用户篇"><a href="#用户篇" class="headerlink" title="用户篇"></a>用户篇</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 yaweb 为 sudo 用户</span></span><br><span class="line">usermod -aG sudo yaweb</span><br></pre></td></tr></table></figure>

<p>所有用户和用户组信息保存在：/etc/passwd , /etc/group</p>
<p>用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -m yaweb <span class="comment"># 创建相关账号，和用户目录 /home/yaweb</span></span><br><span class="line">passwd yaweb</span><br><span class="line">userdel -r yaweb <span class="comment"># 删除</span></span><br></pre></td></tr></table></figure>

<p>用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -g groupName username <span class="comment"># 变更组</span></span><br><span class="line">usermod -G groupName username <span class="comment"># 添加到组</span></span><br><span class="line">usermod -aG sudo yaweb <span class="comment"># 添加 yaweb 到 sudo 组</span></span><br></pre></td></tr></table></figure>

<p>用户权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown userMark(+|-)PermissionsMark</span><br></pre></td></tr></table></figure>
<p>userMark 取值：</p>
<ul>
<li>u：用户</li>
<li>g：组</li>
<li>o：其它用户</li>
<li>a：所有用户</li>
</ul>
<p>PermissionsMark 取值：</p>
<ul>
<li>r: 读</li>
<li>w：写</li>
<li>x：执行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod a+x main         对所有用户给文件 main 增加可执行权限</span><br><span class="line">chmod g+w blogs        对组用户给文件 blogs 增加可写权限</span><br><span class="line">chown -R weber server/</span><br></pre></td></tr></table></figure>

<p>远程登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -l root 192.168.2.253</span><br><span class="line">ssh-copy-id root@192.168.2.253</span><br></pre></td></tr></table></figure>

<h3 id="网络篇"><a href="#网络篇" class="headerlink" title="网络篇"></a>网络篇</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;hostname &#x2F;etc&#x2F;hosts</span><br><span class="line">netstat -a</span><br></pre></td></tr></table></figure>

<h3 id="磁盘篇"><a href="#磁盘篇" class="headerlink" title="磁盘篇"></a>磁盘篇</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前目录大小</span></span><br><span class="line">du -sh</span><br><span class="line">du -sh `ls` | sort</span><br><span class="line"><span class="comment"># 查看当前目录的下一级文件和子目录的磁盘容量</span></span><br><span class="line">du -lh --max-depth=1</span><br></pre></td></tr></table></figure>

<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | grep twocucao</span><br><span class="line">ps -lu twocucao</span><br><span class="line"># 完整显示</span><br><span class="line">ps -ajx</span><br><span class="line">ps au | grep phantomjs | awk &#39;&#123; print $2 &#125;&#39; | xargs kill -9</span><br><span class="line"></span><br><span class="line">top</span><br><span class="line">htop</span><br><span class="line"></span><br><span class="line">lsof -i:3306</span><br><span class="line">lsof -u twocucao</span><br><span class="line"></span><br><span class="line">kill -9 pidnum</span><br><span class="line"></span><br><span class="line"># 将用户 colin115 下的所有进程名以 av_开头的进程终止：</span><br><span class="line"></span><br><span class="line">ps -u colin115 |  awk &#39;&#x2F;av_&#x2F; &#123;print &quot;kill -9 &quot; $1&#125;&#39; | sh</span><br><span class="line"># 将用户 colin115 下所有进程名中包含 HOST 的进程终止：</span><br><span class="line"></span><br><span class="line">ps -fe| grep colin115|grep HOST |awk &#39;&#123;print $2&#125;&#39; | xargs kill -9;</span><br></pre></td></tr></table></figure>

<h4 id="Systemd"><a href="#Systemd" class="headerlink" title="Systemd"></a>Systemd</h4><p>创建一个 Systemd 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;gunicorn.service:</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;gunicorn daemon</span><br><span class="line">Requires&#x3D;gunicorn.socket</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">PIDFile&#x3D;&#x2F;run&#x2F;gunicorn&#x2F;pid</span><br><span class="line">User&#x3D;someuser</span><br><span class="line">Group&#x3D;someuser</span><br><span class="line">RuntimeDirectory&#x3D;gunicorn</span><br><span class="line">WorkingDirectory&#x3D;&#x2F;home&#x2F;someuser&#x2F;applicationroot</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;gunicorn --pid &#x2F;run&#x2F;gunicorn&#x2F;pid   \</span><br><span class="line">          --bind unix:&#x2F;run&#x2F;gunicorn&#x2F;socket applicationname.wsgi</span><br><span class="line">ExecReload&#x3D;&#x2F;bin&#x2F;kill -s HUP $MAINPID</span><br><span class="line">ExecStop&#x3D;&#x2F;bin&#x2F;kill -s TERM $MAINPID</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>

<h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><p>内存瓶颈</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">htop</span><br><span class="line">free <span class="comment"># 从 /proc/meminfo 读取数据</span></span><br></pre></td></tr></table></figure>

<p>IO 瓶颈</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ubuntu 下 可以 mac 下不可以</span></span><br><span class="line">iostat -d -x -k 1 1</span><br></pre></td></tr></table></figure>

<p>如果 %iowait 的值过高，表示硬盘存在 I/O 瓶颈。<br>如果 %util 接近 100%，说明产生的 I/O 请求太多，I/O 系统已经满负荷，该磁盘可能存在瓶颈。<br>如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；<br>如果 await 远大于 svctm，说明 I/O 队列太长，io 响应太慢，则需要进行必要优化。<br>如果 avgqu-sz 比较大，也表示有大量 io 在等待。</p>
<h2 id="增强版软件"><a href="#增强版软件" class="headerlink" title="增强版软件"></a>增强版软件</h2><h3 id="外部检查"><a href="#外部检查" class="headerlink" title="外部检查"></a>外部检查</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 域名与 IP 分析</span><br><span class="line">dig</span><br><span class="line"></span><br><span class="line"># 端口分析</span><br><span class="line">nmap -v -sS -O 192.168.2.0&#x2F;24</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="FTP-Client-提交文件"><a href="#FTP-Client-提交文件" class="headerlink" title="FTP Client 提交文件"></a>FTP Client 提交文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">lftp &lt;&lt;SCRIPT</span><br><span class="line">set ftps:initial-prot &quot;&quot;</span><br><span class="line">set ftp:ssl-force true</span><br><span class="line">set ftp:ssl-protect-data true</span><br><span class="line">set ssl:verify-certificate no</span><br><span class="line">open ftp:&#x2F;&#x2F;xxx.xxx.xxx.xxx:21</span><br><span class="line">user ftpuser ftppass</span><br><span class="line">lcd &#x2F;Users&#x2F;&lt;username&gt;&#x2F;Ftps&#x2F;Workspace&#x2F;libs</span><br><span class="line">put &#x2F;Users&#x2F;&lt;username&gt;&#x2F;Ftps&#x2F;Workspace&#x2F;repos&#x2F;xxx.jar</span><br><span class="line">exit</span><br><span class="line">SCRIPT</span><br></pre></td></tr></table></figure>

<h3 id="媒体编辑"><a href="#媒体编辑" class="headerlink" title="媒体编辑"></a>媒体编辑</h3><h4 id="抽取视频中的音乐"><a href="#抽取视频中的音乐" class="headerlink" title="抽取视频中的音乐"></a>抽取视频中的音乐</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 抽取 mp4 中的音频并保存为 mp3</span><br><span class="line">mkdir outputs</span><br><span class="line">for f in *.mp4; do ffmpeg -i &quot;$f&quot; -c:a libmp3lame &quot;outputs&#x2F;$&#123;f%.mp4&#125;.mp3&quot;; done</span><br></pre></td></tr></table></figure>

<h4 id="批量获取"><a href="#批量获取" class="headerlink" title="批量获取"></a>批量获取</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert &#123;&#123;image1.png&#125;&#125; &#123;&#123;image2.png&#125;&#125; &#123;&#123;image3.png&#125;&#125; -delay &#123;&#123;100&#125;&#125; &#123;&#123;animation.gif&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有趣的重命名"><a href="#有趣的重命名" class="headerlink" title="有趣的重命名"></a>有趣的重命名</h3><p>常用 mv 进行重命名，有的时候这个功能显得很不实用，比如，我要把当前的文件夹内的所有图片命名为 0001.png-9999.png, 这个 mv 时候就相当的鸡肋。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install renameutils mmv rename</span><br></pre></td></tr></table></figure>
<p>如果对于大批的文件需要重命名，比如有接近 10000 个文件，大量乱码文件改为 0001.jpg - 9999.jpg</p>
<p>这种东西放在 IPython 里面写 Python 脚本也还 OK, 但是总想直接一行命令解决</p>
<h3 id="常用组合技"><a href="#常用组合技" class="headerlink" title="常用组合技"></a>常用组合技</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 windows txt 文件中的查看二字的数量</span></span><br><span class="line">cat * | iconv -f GBK | grep 查看 | wc -l</span><br></pre></td></tr></table></figure>

<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bat</span><br><span class="line">exa</span><br><span class="line">json_pp</span><br><span class="line">python -m json.tool</span><br><span class="line">tig</span><br><span class="line">tokei</span><br></pre></td></tr></table></figure>

<h3 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tmux</span><br><span class="line"></span><br><span class="line">tmux new -s you_tmux_name</span><br><span class="line">tmux ls</span><br><span class="line">tmux a</span><br><span class="line">tmux a -t you_tmux_name</span><br><span class="line">c-b + d</span><br><span class="line">tmux kill-session -t you_tmux_name</span><br></pre></td></tr></table></figure>

<p>进阶工具 tmuxp</p>
<h2 id="部署工具"><a href="#部署工具" class="headerlink" title="部署工具"></a>部署工具</h2><h3 id="进程守护-supervisor"><a href="#进程守护-supervisor" class="headerlink" title="进程守护 supervisor"></a>进程守护 supervisor</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">supervisorctl tail -f you_app_name stdout</span><br><span class="line">supervisorctl tail -100 you_app_name stderr</span><br></pre></td></tr></table></figure>

<h2 id="资料推荐"><a href="#资料推荐" class="headerlink" title="资料推荐"></a>资料推荐</h2><ol>
<li>一个关于 Linux 命令的各种奇技的网站 <a href="http://www.commandlinefu.com/commands/browse">http://www.commandlinefu.com/commands/browse</a></li>
<li>Linux 工具快速教程 <a href="http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html">http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html</a></li>
<li>一个 Awesome List, <a href="https://github.com/jaywcjlove/linux-command">https://github.com/jaywcjlove/linux-command</a></li>
<li>命令行的艺术  <a href="https://github.com/jlevy/the-art-of-command-line">https://github.com/jlevy/the-art-of-command-line</a></li>
<li>man command 需要好好研读，特别是 man bash 至少要研读几遍</li>
</ol>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2015-04-18</strong> 初始化本文</li>
<li><strong>2018-08-28</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>Cheatsheet</tag>
        <tag>macOS</tag>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索引擎的一些技巧</title>
    <url>/2015/05/04/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="0x01-Google-搜索引擎技巧"><a href="#0x01-Google-搜索引擎技巧" class="headerlink" title="0x01 Google 搜索引擎技巧"></a>0x01 Google 搜索引擎技巧</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">intitle: 古文观止 site: pan.baidu.com</span><br><span class="line">+ or</span><br><span class="line">link:http://www.reanren.com</span><br><span class="line">inurl</span><br><span class="line"><span class="string">&quot;&quot;</span></span><br><span class="line">『长城防*墙』</span><br></pre></td></tr></table></figure>

<h2 id="0x02-Baidu-搜索引擎技巧"><a href="#0x02-Baidu-搜索引擎技巧" class="headerlink" title="0x02 Baidu 搜索引擎技巧"></a>0x02 Baidu 搜索引擎技巧</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">site:</span><br></pre></td></tr></table></figure>

<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2016-12-22</strong> 几乎重修文字，修改标题为 搜索引擎的一些技巧。</li>
</ul>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>编程工具</tag>
        <tag>高效</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅的使用 Windows 10</title>
    <url>/2015/06/14/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8Windows10/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>刚开始 Win10 发布没有多久的时候我就写了这篇回答，放在知乎上，后来又搬运到 jianshu 上，现在搬运到自己的博客上，也算是落叶归根。</p>
<blockquote>
<p>已经过了折腾的年龄，答案仅仅从提升效率方面来说，是否优雅就看诸位的审美了。</p>
</blockquote>
<p>本文目录</p>
<ol>
<li>文件夹与文件一定要分类命名好。</li>
<li>Win10 自带功能怎样提升效率。</li>
</ol>
<ul>
<li>2.1 快捷键</li>
<li>2.2 触摸板手势</li>
<li>2.3 Win+R</li>
</ul>
<ol start="3">
<li>非 Windows 自带的必备的提升效率，节省时间的软件。</li>
</ol>
<ul>
<li>3.1 文档，图片，文本，以及通用文件管理器</li>
<li>3.2 Everything is OK</li>
<li>3.3 Chrome （Google 出品，必属精品）</li>
<li>3.4 阅读方面 calibre ， 欧路词典</li>
<li>3.5 笔记软件 xmind，wiznote</li>
<li>3.6 播放器</li>
<li>3.7 其他想到再补充</li>
</ul>
<p>4. 不写点代码优化一下工作流程，你都不好意思说自己逼格高。</p>
<ul>
<li>4.1 autohotkey</li>
</ul>
<h2 id="0x01-文件命名"><a href="#0x01-文件命名" class="headerlink" title="0x01. 文件命名"></a>0x01. 文件命名</h2><blockquote>
<p>文件夹与文件一定要分类命名好</p>
</blockquote>
<p>贴上我的几张图来看一下我的文件夹命名：</p>
<p>一级文件夹如下：<br><img src="http://upload-images.jianshu.io/upload_images/52890-b6a5322beca48d2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>二级文件夹如下：<br><img src="http://upload-images.jianshu.io/upload_images/52890-656d90e16abaff66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>三级或者三级以上文件夹</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-bdf7349fccedda52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>文件命名规范（因为涉及到后面使用 Everything，所以我们的命名尽量追求便于搜索）</p>
<p>举个例子，对于读书笔记 ：读书笔记、_设计模式、_20150303_v2.1.xmind</p>
<p>对于照片这种文件比较多的，优先命名文件夹，其次按照地址人物日期命名，比如：大明湖胖、_夏雨荷、_20150101</p>
<blockquote>
<p>无需刻意追求命名，方便搜索，方便管理就好。</p>
</blockquote>
<p>不妨参考下面文章：</p>
<p><a href="http://www.zhihu.com/question/21537488">电脑上的文件夹该如何命名（整理）才能做到很久都不用重新整理的那种？ - 文件整理</a></p>
<p>嗯这样你在搜索笔记的时候在 Everything 里面只需要键入 2015 笔记就可以查看 2015 笔记文件。</p>
<p>是不是很方便？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-f4a815755900d627.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-1fb3ac3766e59044.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>当然桌面上尽量少放或者不放文件夹，我的桌面上仅仅有一个链接到 OneDrive 里面的 TEMP 文件夹的快捷方式，用于存放临时没有整理的文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-be22e9252b149d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h2 id="0x02-Win10-自带功能怎样提升效率"><a href="#0x02-Win10-自带功能怎样提升效率" class="headerlink" title="0x02. Win10 自带功能怎样提升效率"></a>0x02. Win10 自带功能怎样提升效率</h2><ul>
<li><p>2.1 快捷键其他答主说的都可以，你就直接参考他们的答案中的关于快捷键。我仅仅说一些重点快捷键。Win+ 数字键 把常用的软件附在任务栏上。建议四个以内，方便单手操作。Win+X Alt+tab 切换窗口 WIn+R 运行</p>
</li>
<li><p>2.2 触摸板手势参考最高票的答案。虽然我觉得增加的那么多的触摸手势比较鸡肋。</p>
</li>
<li><p>2.3 Win+RWin+R 主要用于启动一些程序或者一些 DOS 小命令。</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-d39ea3f078f1d800.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>我将所有的便携与非便携软件的快捷方式放在这里并且配置环境变量。比如，我需要启动为知笔记，我就仅仅需要闭上眼睛输入 Win+R + wz +<Enter></p>
<p>其他软件同理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sublime text 打开需要输入 </span></span><br><span class="line">Win+R + st +&lt;Enter&gt;</span><br><span class="line"><span class="comment"># 欧路词典 打开需要输入 </span></span><br><span class="line">Win+R + ol +&lt;Enter&gt;</span><br><span class="line"><span class="comment"># 这里省去若干软件打开方式。</span></span><br></pre></td></tr></table></figure>

<p>关于 Win+R 你可以参考善用佳软 <a href="http://xbeta.info/win-run.htm">最绿色最高效，用 win+r 启动常用程序和文档</a> 的介绍。</p>
<h2 id="0x03-非-Windows-自带的必备软件"><a href="#0x03-非-Windows-自带的必备软件" class="headerlink" title="0x03. 非 Windows 自带的必备软件"></a>0x03. 非 Windows 自带的必备软件</h2><ol start="3">
<li>非 Windows 自带的必备的提升效率，节省时间的软件。</li>
</ol>
<ul>
<li>3.1 文档，图片，文本，以及通用文件管理器如果文件多，就一定需要一个用于管理这种类型文件的管理器 - 托马斯。电脑达人</li>
</ul>
<p>图片管理用 Picasa</p>
<p>文本管理直接使用笔记软件比如为知笔记，或者印象笔记。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-efe86c9e4bd48b95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>文件管理进阶的话可以使用 totalcmd，不过学习路线比较陡峭，没有足够的需求，不要搞 TC.</p>
<p>用 Everything。或者 listary</p>
<ul>
<li>3.2 Everything is OK</li>
</ul>
<p>无坚不摧，为快不破。 everything 是搜索效率最快的软件。没有之一。合理的命名可以为你的生活节省一半找资料的时间。</p>
<ul>
<li>3.3 Chrome （Google 出品，必属精品）</li>
</ul>
<p>浏览器本身速度快，配合强大的插件库。让你在实力派装逼的道路上越走越远</p>
<p>这玩意的强大在哪到处都有，直接在知乎上搜一下就好了。</p>
<ul>
<li>3.4 阅读方面 calibre ， 欧路词典，</li>
</ul>
<p>calibre 主要是用来看经济学人，老乡恶魔的奶爸推荐。</p>
<p>欧路词典可以外挂其他的开源词库，查词速度超级快。</p>
<ul>
<li><p>3.5 笔记软件 xmind，wiznote 用于记录笔记。前者用于梳理思路，把一本书读薄，后者用于将自己的知识体系梳理一遍，把书读厚。消化资料。</p>
</li>
<li><p>3.6 播放器</p>
</li>
</ul>
<p>QQ 影音 – 满足普通播放需求</p>
<p>kmplayer – 用于视频截图</p>
<p>foobar2000 – 逼格提升必备</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-1d8bc57d69948d60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>网易云音乐 – 这货真的不错。</p>
<ul>
<li>3.7 其他想到再补充</li>
</ul>
<h2 id="0x04-不写点代码优化一下工作流程，你都不好意思说自己逼格高。"><a href="#0x04-不写点代码优化一下工作流程，你都不好意思说自己逼格高。" class="headerlink" title="0x04. 不写点代码优化一下工作流程，你都不好意思说自己逼格高。"></a>0x04. 不写点代码优化一下工作流程，你都不好意思说自己逼格高。</h2><p>不写点代码优化一下工作流程，你都不好意思说自己逼格高。- autohotkey</p>
<p>可以针对快捷键进行编程。有了它，妈妈再也不担心我操作速度慢的要死了。</p>
<p>有如下场景：一大段文字中有一个网址，你需要访问它，我的解决方法就是选中那些文字，然后一个 Win+b，直接打开 chrome 进行搜索，如果文字中没有网址，那么对选中文字进行百度。同理可以推淘宝，京东 github 等等。或者这样一个场景，你需要大量的文本编辑，但是上下左右离自己的工作区比较远，你可以小拇指按住大写锁定按键，然后使用 HJKL 进行移动。</p>
<p>教程参考 <a href="http://zhuanlan.zhihu.com/autohotkey">AutoHotkey 之美 - 知乎专栏</a></p>
<p>新手可以先拿我搜刮整理的 AHK 代码看看。<a href="https://github.com/twocucao/ChortHotKey">twocucao/ChortHotKey · GitHub</a></p>
<p>PS：我上面提到的软件几乎都是神级软件，都是入门容易精通难的深坑，想调教好也不是想象中呢么简单的，但，书到用时方恨少，你可以先挑一些使用。如果你以后有不少的文件需要管理，在未来，你一定会用到。</p>
<p>至于哪些图标怎么搞定？步骤如下：制作出那样的图片文件 （PS）<br>转换成 ico 文件（Iconmaster），把 ico 文件拷贝到指定文件夹内部（这步是为了方便修改文件夹切换电脑带来的文件夹图标恢复原样）<br>ico 设置到文件夹上 （修改文件夹内部的 desktop.ini 文件）</p>
<p>附上制作的 PSD 文件，ICONMASTER 以及一个样板文件夹（注意要开启显示系统文件以及隐藏文件两个选项，然后查看样板文件夹中的 desktop.ini 以及 ico 文件。修改的话，也就是修改 desktop.ini 文件里面的对应文件名称就好了）</p>
<p>链接： <a href="http://pan.baidu.com/s/1qWyx6oc">百度云地址</a> 密码：g9up</p>
<p>foobar 链接：<a href="http://pan.baidu.com/s/1e7xZC">百度云地址</a> 密码：e0as</p>
<p>文件图标受此答案启发：<a href="http://www.zhihu.com/question/19901022">如何整理电脑文件夹？ - 计算机</a></p>
<blockquote>
<p>2016-01-04 已经更换 Macbook Pro, 依然挂念 Windows.<br>2017-05-01 21:42:00 已经更换 2016 年 Macbook Pro With Multi-Touchbar, 再无挂念 Windows.</p>
</blockquote>
<h2 id="0x05-后续"><a href="#0x05-后续" class="headerlink" title="0x05. 后续"></a>0x05. 后续</h2><p>所谓用 Windows 还是 MacOS 都是一种选择而已，孰高孰下谁知道呢。并不是说用了一个操作系统，用了某个软件，就会显得自己多么高明，如果不能为自己的日常工作提高效率，让自己节省下来的时间留给自己，那又有什么意义呢？</p>
<p>当我在 Windows 上的时候一味追求 APM, 即高效的操作，但其实最高效的还是自己的思路清晰，想好了再动手。</p>
<blockquote>
<p>谋定而后动</p>
</blockquote>
<p>如是而已。</p>
<blockquote>
<p>抓到老鼠的猫才是好猫呀！</p>
</blockquote>
<p>ChangeLog:</p>
<ul>
<li>2017-03-08 09:32:15 整理知乎回答，搬运到博客上。</li>
<li>2017-05-01 09:32:15 补充现在使用的电脑信息</li>
<li>2017-06-10 09:32:15 重新排版，增加后续章节。</li>
</ul>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>『博人传』影评</title>
    <url>/2015/09/19/%E5%8D%9A%E4%BA%BA%E4%BC%A0%E5%BD%B1%E8%AF%84/</url>
    <content><![CDATA[<p><strong>全国最大忍者村火影忍者村倒闭了！！！</strong></p>
<p>博人传影评内无剧透。</p>
<p>故事发生在鸣人当上火影之后。天天忙于公务，一直没有时间陪自己的孩子。</p>
<p>也是在这时，世界的科技日新月异，转眼间木叶的电脑技术已经杰出到世人无法理解的地步。</p>
<p>宇智波童参考这查克拉的结构，结合中国功夫中的内功，外功，亦欲以究天人之际，通古今之变，终于在 SCI 上发表论文《查克拉的数学原理和中国周易的必然联系》，该论文深刻阐述了<strong>查克拉的本质</strong>，查克拉由两个东西构成，一个叫做阴，另一个叫做阳，而所有人的查克拉都可以都可以通过一定量的排序组合变成不同属性的查克拉。</p>
<a id="more"></a>

<p>宇智波童在此基础上提出了查克拉论，并建立不同属性的查克拉与两极四象五行之间的联系。他还写到，在人发出忍术的时候，首先将自己的体内的阴阳进行排序，接着转为两极能，接着再添加方向编码，变为四象能，附加自身的体质就可以转为具象的查克拉能。也就是，人们看到的查克拉，本质上就是『阴阳组合』四象』体质』。阴阳组合的长度代表一组忍术的强度，四象也就是四个方向，组合的越好，忍术就越灵活，而体质方面，像鸣人那样的风一样的男子，使用的就是风遁，像佐助那样的脾气火爆，做事比较雷人的使用的就是火遁和雷遁，像鹿丸那样聪明的，经常求别人心里阴影面积的人，使用的就是影子系术。既然查克拉是通过阴阳编码而成，那么，就可以对自己忍术的查克拉进行充分的抽样研究，从而不断优化自己忍术的编码。通过优化自己忍术的编码，就可以通过少量的查克拉调用比较强大的忍术方法。</p>
<p>论文发表的第二年，宇智波童发明了一种卷轴纸，这种卷轴纸张的正面在查克拉的激发下可以留下痕迹，而且不同的忍术留下的痕迹也是不相同，除非摔在地上破碎，否则几乎痕迹不会发生变化。于是宇智波童在这张纸上将自己的忍术口遁 - 一本正经胡说八道之术 通过查克拉留在了卷轴纸上。并将此种类型的纸张命名为磁卷轴。磁卷轴在背面接触查克拉的同时会释放忍术。也就是通与激发卷轴痕迹同等查克拉的时候，释放忍术。</p>
<p>第三年，宇智波童对卷轴进行大幅度改造，卷轴已经具有极小的体积，极大的容量了，并且造出了世界上第一个磁性忍术卷轴 3D 解释器。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-89b39501ba26fbcc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="火影：博人传"></p>
<p>就如同你看到的，只需要你把卷轴放进去。解释器就会对卷轴进行解释。可是释放多种不同类型的忍术。对这些都不需要和与激发卷轴痕迹同等查克拉，我们在解释阶段做了大量的优化，比如，为了提高执行速度，我们引入了 just-in-time 技术，由于忍术 = 『 『 『阴阳组合』四象』体质』，大幅度提升阴阳组合构成就可以无敌于战场，我们引入了压缩技术，通过大量的压缩算法，把自然能源压缩到卷轴中，基本上，使用者只需使用极少的查克拉就可以释放极大的忍术。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-ea42906081e3d177.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="火影博人传.jpg"></p>
<p>如同你所看到的，只需一点点，卷轴，就可以有无限的能量。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-73a7dcaba3454879.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="火影：博人传.jpg"></p>
<p>木叶忍者村开发出这种技术以后，把技术的步骤放到 NinjutsuHub 上，于是，世界忍者纷纷加入到这种磁性忍术卷轴 3D 解释器的开发商，当然，正如你所知道的，在遥远的东方某国在技术公开以后第二天就有不要脸的忍术公司发表文章说他们自主研发了一套磁性忍术卷轴 3D 技术。</p>
<p>磁性忍术卷轴 3D 解释器风靡全国之后，木叶忍者村的忍者渐渐也不需要会什么忍术的人了。人才日渐凋零。火影漩涡鸣人不堪重负。逃离木叶。于是，宇智波童携带着一流的技术和人才，流浪到遥远的东方。</p>
<p>突然的出现，</p>
<p>在街角的咖啡店，</p>
<p>也带着笑脸，</p>
<p>用大喇叭大声吼道：</p>
<p><strong>木叶忍村，木叶忍村，全球最牛忍者村，木叶忍者村倒闭啦，王八蛋火影吃喝嫖赌欠下三点五个亿的赌债，带着他的老婆佐助逃跑了，我们没有办法，拿着忍术抵现金，原来五影才能使用的忍术，无需背口诀，无需结印，不开刀，无痛苦，第一天买装备，第二天无痛打怪，全场清仓大甩卖，统统只要三十元，统统只要三十元，统统只要三十元。</strong></p>
<p>PS：鸣人和佐助终于在一起了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-5f006dcb1edc053c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="火影：博人传.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-d8b1c80e990c41ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="火影：博人传.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-1ef75a12932690eb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="火影：博人传.jpg"></p>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-03-19</strong> 重修文字，祝贺鸣人君和雏田君终成眷属</li>
</ul>
]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>2015-2019 年书单</title>
    <url>/2015/12/31/%E4%B9%A6%E5%8D%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记下一些看过的和没有看过的书籍。</p>
<p>标记如下：</p>
<ul>
<li>[o] 看过，并且留有读书笔记</li>
<li><input checked="" disabled="" type="checkbox"> 没看过，或者准备再看一次</li>
<li>[-] 正在看</li>
</ul>
<h3 id="技术类"><a href="#技术类" class="headerlink" title="技术类"></a>技术类</h3><p>其实程序员的编程类知识的获取大多来源于官网的 api docment 以及 guide, 但也并不完全如此。</p>
<p>有的官网的 tutorial 写的不够入门，guide 写的缺乏案例，api document 写的相当及简略。</p>
<blockquote>
<p>很多时候，还是需要去阅读源码的。</p>
</blockquote>
<p>但下面的一些书籍，或多或少让我觉得应该和官网结合起来看。</p>
<a id="more"></a>

<h4 id="Web-与爬虫"><a href="#Web-与爬虫" class="headerlink" title="Web 与爬虫"></a>Web 与爬虫</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 鸟哥的私房菜 两本</li>
<li><input checked="" disabled="" type="checkbox"> Python Cookbook</li>
<li><input checked="" disabled="" type="checkbox"> Python 算法教程</li>
<li><input checked="" disabled="" type="checkbox"> Python 可视化编程</li>
<li><input checked="" disabled="" type="checkbox"> Python Web 开发实战</li>
<li><input checked="" disabled="" type="checkbox"> Python For Data Analysis</li>
<li><input checked="" disabled="" type="checkbox"> Flask Web 开发</li>
<li><input checked="" disabled="" type="checkbox"> MySQL 技术内幕 : SQL 编程</li>
<li><input checked="" disabled="" type="checkbox"> MySQL 技术内幕 : InnoDB 技术内幕</li>
<li><input checked="" disabled="" type="checkbox"> 深入浅出 MySQL</li>
<li><input checked="" disabled="" type="checkbox"> SQL 反模式</li>
<li><input checked="" disabled="" type="checkbox"> Linux 集群和自动化运维</li>
<li><input checked="" disabled="" type="checkbox"> Practical Vim</li>
<li><input checked="" disabled="" type="checkbox"> Javascript 语言精髓与编程实践</li>
<li><input checked="" disabled="" type="checkbox"> Javascript 高级程序设计</li>
<li><input checked="" disabled="" type="checkbox"> Javascript 设计模式与开发实践</li>
<li><input checked="" disabled="" type="checkbox"> Javascript 设计模式</li>
<li><input checked="" disabled="" type="checkbox"> 高性能 Javascript</li>
</ul>
<h4 id="基本功"><a href="#基本功" class="headerlink" title="基本功"></a>基本功</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 深入理解计算机系统</li>
<li><input checked="" disabled="" type="checkbox"> 计算机网络</li>
<li><input checked="" disabled="" type="checkbox"> 设计模式</li>
<li><input checked="" disabled="" type="checkbox"> 重构</li>
<li><input checked="" disabled="" type="checkbox"> 算法（第四版）</li>
</ul>
<h4 id="科技与人文"><a href="#科技与人文" class="headerlink" title="科技与人文"></a>科技与人文</h4><ul>
<li><input checked="" disabled="" type="checkbox"> MacTalk 人生元编程</li>
</ul>
<h3 id="非技术类"><a href="#非技术类" class="headerlink" title="非技术类"></a>非技术类</h3><h4 id="未分类"><a href="#未分类" class="headerlink" title="未分类"></a>未分类</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 异类</li>
<li><input checked="" disabled="" type="checkbox"> 眨眼之间</li>
<li><input checked="" disabled="" type="checkbox"> 引爆点</li>
<li><input checked="" disabled="" type="checkbox"> 逆转</li>
<li><input checked="" disabled="" type="checkbox"> 大开眼界</li>
</ul>
<h4 id="励志鸡汤"><a href="#励志鸡汤" class="headerlink" title="励志鸡汤"></a>励志鸡汤</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 技巧：如何用一年的时间获得十年的经验</li>
</ul>
<h4 id="思考与写作"><a href="#思考与写作" class="headerlink" title="思考与写作"></a>思考与写作</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 学会独立思考</li>
<li><input checked="" disabled="" type="checkbox"> 清醒思考的艺术</li>
<li><input checked="" disabled="" type="checkbox"> 厚黑学</li>
<li><input checked="" disabled="" type="checkbox"> 如何阅读一本书 <a href="http://twocucao.xyz/2017/01/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E4%B8%8E%E6%97%B6%E9%97%B4%E5%81%9A%E6%9C%8B%E5%8F%8B/">我的笔记</a></li>
<li><input checked="" disabled="" type="checkbox"> 把时间当作朋友 <a href="http://twocucao.xyz/2017/01/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E4%B8%8E%E6%97%B6%E9%97%B4%E5%81%9A%E6%9C%8B%E5%8F%8B/">我的笔记</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="#">正解：从写作文到写作</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="#">小说课</a></li>
<li><input checked="" disabled="" type="checkbox"> 精进：如何成为一个很厉害的人</li>
<li><input checked="" disabled="" type="checkbox"> Beyond Feelings</li>
<li><input checked="" disabled="" type="checkbox"> 公正：该如何做是好？</li>
</ul>
<h4 id="沟通与交流"><a href="#沟通与交流" class="headerlink" title="沟通与交流"></a>沟通与交流</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 好好说话 <a href="http://twocucao.xyz/2017/01/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E5%A5%BD%E5%A5%BD%E8%AF%B4%E8%AF%9D/">我的笔记</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/5321463/">沟通的艺术（插图修订第 14 版） : 看入人里，看出人外</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/3533221/">非暴力沟通</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="#">所谓情商高，就是会说话</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="#">演讲的力量 : 如何让公众表达变成影响力</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="#">谈话的力量</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="#">高难度谈话</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="#">沟通圣经 : 听说读写全方位沟通技巧（修订第 5 版）</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="#">关键对话 : 如何高效能沟通（原书第 2 版）</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="#">谈判是什么</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="#">沃顿商学院最受欢迎的谈判课</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="#">遇谁都能聊得开 : 92 个技巧让你的谈话充满魅力</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="#">沃顿商学院最受欢迎的谈判课</a></li>
</ul>
<h4 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h4><p>** 金庸 **</p>
<p>飞雪连天射白鹿，笑书神侠倚碧鸳</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 飞狐外传</li>
<li><input checked="" disabled="" type="checkbox"> 雪山飞狐</li>
<li><input checked="" disabled="" type="checkbox"> 连城诀</li>
<li><input checked="" disabled="" type="checkbox"> 天龙八部</li>
<li><input checked="" disabled="" type="checkbox"> 射雕英雄传</li>
<li><input checked="" disabled="" type="checkbox"> 白马啸西风</li>
<li><input checked="" disabled="" type="checkbox"> 鹿鼎记</li>
<li><input checked="" disabled="" type="checkbox"> 笑傲江湖</li>
<li><input checked="" disabled="" type="checkbox"> 书剑恩仇录</li>
<li><input checked="" disabled="" type="checkbox"> 神雕侠侣</li>
<li><input checked="" disabled="" type="checkbox"> 倚天屠龙记</li>
<li><input checked="" disabled="" type="checkbox"> 碧血剑</li>
<li><input checked="" disabled="" type="checkbox"> 鸳鸯刀</li>
</ul>
<p>** 古龙 **</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 天涯明月刀</li>
<li><input checked="" disabled="" type="checkbox"> 绝代双骄</li>
<li><input checked="" disabled="" type="checkbox"> 陆小凤传奇</li>
<li><input checked="" disabled="" type="checkbox"> 萧十一郎</li>
<li><input checked="" disabled="" type="checkbox"> 火并萧十一郎</li>
<li><input checked="" disabled="" type="checkbox"> 多情剑客无情剑</li>
<li><input checked="" disabled="" type="checkbox"> 小李飞刀</li>
<li><input checked="" disabled="" type="checkbox"> 楚留香传奇</li>
<li><input checked="" disabled="" type="checkbox"> 天涯明月刀</li>
</ul>
<p>** 福尔摩斯 **</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 柯南道尔 福尔摩斯探案集</li>
<li><input checked="" disabled="" type="checkbox"> BBC 神探夏洛克</li>
</ul>
<h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><p>** 历史虚构类 **</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 明朝那些事儿</li>
<li><input checked="" disabled="" type="checkbox"> 唐浩明 - 曾国藩</li>
<li><input checked="" disabled="" type="checkbox"> 唐浩明 - 杨度</li>
<li><input checked="" disabled="" type="checkbox"> 唐浩明 - 张之洞</li>
</ul>
<p>** 世界史 **</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 全球通史</li>
</ul>
<p>** 中国史 - 先秦 **</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第一卷   ：祖先》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第二卷   ：国家》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第三卷   ：奠基者》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第四卷   ：青春志》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第五卷   ：从春秋到战国》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第六卷   ：百家争鸣》</li>
</ul>
<p>** 中国史 - 秦汉魏晋南北朝 **</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第七卷   ：秦并天下》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第八卷   ：汉武的帝国》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第九卷   ：两汉两罗马》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第十卷   ：三国纪》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第十一卷 ：魏晋风度》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第十二卷 ：南朝，北朝》</li>
</ul>
<p>** 中国史 - 隋唐 **</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第十三卷 ：隋唐定局》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第十四卷 ：禅宗兴起》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第十五卷 ：女皇武则天》</li>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第十六卷 ：安史之乱》</li>
</ul>
<p>** 中国史 - 宋元 **</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 《易中天中华史·第十七卷 ：大宋革新》</li>
</ul>
<h4 id="杂文"><a href="#杂文" class="headerlink" title="杂文"></a>杂文</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 李敖 - 活着你就得有趣</li>
<li><input checked="" disabled="" type="checkbox"> 李敖 - 活着你就得有种</li>
<li><input checked="" disabled="" type="checkbox"> 李敖 - 活着你就得有料</li>
</ul>
<h4 id="新技能-Get"><a href="#新技能-Get" class="headerlink" title="新技能 Get"></a>新技能 Get</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 和你一样，爱上手机拍照</li>
<li><input checked="" disabled="" type="checkbox"> 居家超级整理术</li>
</ul>
<h4 id="运动健身"><a href="#运动健身" class="headerlink" title="运动健身"></a>运动健身</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 硬派健身</li>
<li><input checked="" disabled="" type="checkbox"> 一平米健身</li>
</ul>
<hr>
<p>UPDATE:</p>
<table>
<thead>
<tr>
<th>日期</th>
<th>类型</th>
<th>详细操作</th>
</tr>
</thead>
<tbody><tr>
<td><strong>2017-02-10</strong></td>
<td>创建</td>
<td>初始化本文</td>
</tr>
<tr>
<td><strong>2017-02-18</strong></td>
<td>更新</td>
<td>添加两篇读书笔记地址，细化读书书目</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>书单</tag>
        <tag>书评</tag>
      </tags>
  </entry>
  <entry>
    <title>Oh My Mac!</title>
    <url>/2016/02/01/PC2MAC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我会想念 Windows 上面的一切，但我选择了 Mac。</p>
<p>从某种程度上讲，我并不是讨厌 Windows。尽管我是一个伪装成、*nix 程序员的技术菜鸟。</p>
<p>我还记得高一时候家里给我买的第一台二手电脑，那是一台烂到令人发指的破电脑，你可能见过那种俗称大屁股的电脑，512M 内存，64M 显存。我就在那一台机器上打了仙剑三通关和仙剑四的青鸾峰到寿阳城阶段，千佛寺时候家里电脑实在是烂到令人发指，于是电脑就报废了。后来，家里面换了一台电脑，128 显存，内存 2g 的联想杨天电脑。我就在这一台机器上打了仙剑四的寿阳城之后的剧情。</p>
<a id="more"></a>

<p>正如你可以看出来的，我并不讨厌 Windows，甚至某种程度上，我非常喜欢 Windows，正是盗版时代风靡全球的 Windows 才给了我电脑的启蒙。</p>
<p>喜欢 Windows 的部分原因也是因为穷，只能用盗版（我当年以为是免费，后来才知道这叫做盗版）。就像当我知道仙剑四团队因为我这样只知道免费的盗版人群解散了以后，心痛不已。自此以后，如果经济上可以，我一定会买正版。倒也不是为了买给别人看，这只是代表我对软件开发者的最崇高的敬意。也是弥补我因为无知犯下的错误的愧疚感。</p>
<p>Windows 对我来说就是启蒙老师。</p>
<p>但 Windows 的种种环境配置，日常使用和我<em>inux 的技术栈完全不兼容了。从 XP 到 Vista 再到 7 再到 8 再到 10，这种情况依旧没有发生什么本质的变化。这样的我不得不选择模拟、</em>nix 工具，虚拟机或者双系统。但，模拟的<em>nix 实在太难用，虚拟机里面的系统用起来根本操作根本就不丝滑，双系统一会切换到 Win，一会切换到 Ubuntu 这种情况简直让我非常的抓狂。</em>nux 的环境又不能不要，可 Win 的桌面软件实在是难以割舍。</p>
<p>于是，一个切换到 OSX 的想法在我的脑海中不断的浮现。但是正如你所知道的一个很现实的情况：</p>
<blockquote>
<p>没钱，也不愿意给父母添麻烦。</p>
</blockquote>
<p>但</p>
<blockquote>
<p>幽灵，一个想买 MacBook Pro 的想法，像幽灵一样，在脑海中不断的浮现。</p>
</blockquote>
<p>直到前几天才攒够足够的钱买了一台二手 mbp 改装一下 SSD。作为丐帮 Mac 第一新人，进入了 MAC 的世界里。</p>
<p><em>对，我受够了 Windows 里面各种奇葩的问题，也受够了 Ubuntu 等 Linux 系统的糟糕的桌面体验。</em></p>
<p>对于一个不研究。net 的人来说，Windows 完成了他伟大的启蒙任务。也是时候与你告别了。</p>
<p>只是人总要和以前的一些人和事情不断的做告别，不是吗？</p>
<p>以前看过很多比较浅显的讲解，正是那些讲解，让我逐渐入了门，然后我就不得不与他们做告别。</p>
<p>他们完成了他们伟大的任务，他们的伟大之处永远都在为新手敞开大门，所以，我们成长之后不应该去鄙视那些给你带来进步的事物，而是礼貌的挥挥手向他们告别。</p>
<h2 id="开始迁移"><a href="#开始迁移" class="headerlink" title="开始迁移"></a>开始迁移</h2><p>那么，依照我丰富的 Windows 使用经验来说，我需要解决的问题就是把原有的 Windows 和 Ubuntu 上的东西搬运到我的新电脑上。</p>
<p>使用电脑 = 软件 + 操作<br>学会使用电脑 = 描述问题 + 搜索引擎 + 笔记</p>
<h3 id="0-自带的软件各种-Hack"><a href="#0-自带的软件各种-Hack" class="headerlink" title="0. 自带的软件各种 Hack"></a>0. 自带的软件各种 Hack</h3><p>其实，自带的软件往往有不可忽略的强大之处。比如，Windows 世界里面的 Win+R 按键。</p>
<p>目前来说，发现苹果上面自带软件不错的地方如下：</p>
<ul>
<li>自带软件，苹果的一些应用，itunes，iphoto，isg 等等。使用这些软件简直就是易如反掌。没什么好说，不错的软件就是 spotlight 了，这个软件非常的强大。可以说是进阶版本的 Windows 上面的搜索 +Win+R。但是然并卵，我们用 alfred2 这个神一样的东西，逐渐就把这基本的软件废弃了。我使用的也就是自带的 finder。</li>
<li>Mac 上的软件的快捷键可以通过一个叫做 cheatsheet 的的软件进行查看，安装好这个软件，打开一个软件，然后长按 cmd 按键。</li>
</ul>
<h4 id="0-0-系统设置调整"><a href="#0-0-系统设置调整" class="headerlink" title="0.0 系统设置调整"></a>0.0 系统设置调整</h4><p>从 Win 过来人在一些细节操作上与 Mac 的设计有一些不同。这些可以在系统里面进行设置。</p>
<p>比如， 鼠标滚轮调整</p>
<p>preference - mouse - 取消勾选：scroll direction ：natural</p>
<h4 id="0-1-文件的操作"><a href="#0-1-文件的操作" class="headerlink" title="0.1 文件的操作"></a>0.1 文件的操作</h4><p>windows 里面管理文件的东西叫做 explorer.<br>mac 里面叫做 finder.<br>二者，图形操作上大致相同。但是结合快捷键的操作就不同了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cmd 为 command 按键，通常情况下为所有桌面程序通用性的快捷键。</span><br><span class="line"># ctrl ，通常情况下是针对程序的功能进行加强，并且此功能往往是非 cmd 类（窗口操作，选择，复制粘贴等等）操作。</span><br><span class="line"># shift 按键通常用于加强操作。一般会让操作更进一步 or 相反操作。</span><br><span class="line">cmd+tab &#x3D;~ alt+tab 程序之间的切换</span><br><span class="line">cmd+&#96; 应用内窗口切换</span><br><span class="line"></span><br><span class="line">cmd+h 窗口 hide</span><br><span class="line">cmd+m 窗口 minimize</span><br><span class="line">cmd+n 新建窗口</span><br><span class="line">cmd+o 打开</span><br><span class="line">cmd+s 保存</span><br><span class="line">cmd+shift+s 另存为</span><br><span class="line">cmd+p 打印 print</span><br><span class="line">cmd+w 关闭</span><br><span class="line">cmd+q quit</span><br><span class="line"></span><br><span class="line">cmd+a select all</span><br><span class="line">cmd+i show info</span><br><span class="line">cmd+n create a new folder</span><br><span class="line">cmd+f search</span><br><span class="line">cmd+c copy</span><br><span class="line">cmd+v paste</span><br><span class="line">cmd+delete  删除选中文件</span><br><span class="line">cmd+shift+delete 清空回收站</span><br><span class="line"></span><br><span class="line">cmd+&#x3D; 放大</span><br><span class="line">cmd+- 缩小</span><br><span class="line">cmd+t 新建选项卡</span><br><span class="line">cmd+r 刷新</span><br><span class="line"></span><br><span class="line">cmd+shift+3 截取整个屏幕</span><br><span class="line">cmd+shift+4 截取选择区域</span><br><span class="line">cmd+shift+4+SPACE 截取选择窗口</span><br><span class="line">cmd+ 鼠标点击 -&gt; 选中不连续文件</span><br><span class="line">control+ 鼠标点击 -&gt; 相当于 win 中右键点击</span><br><span class="line"></span><br><span class="line">fn+left home</span><br><span class="line">fn+right end</span><br><span class="line">fn+up pageup</span><br><span class="line">fn+down pagedown</span><br></pre></td></tr></table></figure>

<h4 id="0-2-Trackpad"><a href="#0-2-Trackpad" class="headerlink" title="0.2 Trackpad"></a>0.2 Trackpad</h4><p>到 trackpad 中设置对应鼠标手势</p>
<ol>
<li>点击</li>
</ol>
<p>单指点击 - 单击<br>单指滑动 - 滑动鼠标光标<br>双指点击 - 相当于 Windows 的鼠标右键<br>三指点击 - 划词查找</p>
<ol start="2">
<li>滑动与缩放</li>
</ol>
<p>双指上下滑动 - 滚动<br>双指缩放 - 与 Android 上图片缩放一致<br>双指双击 - 只能缩放<br>双指旋转 - 旋转<br>双指左右滑动 - 应用内切换网页<br>双指头从右往左<br>三指头左右滑动 - 全屏幕 App 切换<br>大拇指和食中无名缩放 - launchpad</p>
<h3 id="1-日常软件"><a href="#1-日常软件" class="headerlink" title="1. 日常软件"></a>1. 日常软件</h3><h4 id="1-1-一些满足日常生活的软件"><a href="#1-1-一些满足日常生活的软件" class="headerlink" title="1.1 一些满足日常生活的软件"></a>1.1 一些满足日常生活的软件</h4><p>Alfred - 让你的 spotlight 更上一层楼，程序打开 / 切换、文件搜索、互联网搜索、与其他软件交互的利器。<br>weixin，qq - 这是必须的。<br>CleanMyMac - 系统清理软件。<br>欧陆词典 - 国产词典领域最牛。别说有道词典了好伐。<br>calibre - 电子书必备，下载免费经济学人。<br>Wiznote - 为知笔记，实在是国产良心之作。可惜，Mac 上面的功能比较少。<br>PS，Sketch - P 图必备吧？<br>Safari，Chrome+ 大量的插件 - 不多说，Chrome 简直就是我的第二操作系统。那犀利的插件，Get 到痛点的功能，用起来纵享丝滑一般的流畅，都深深的迷住了我。除了吃内存，其他都好。<br>PDF reader，ibook - 文档查看必备。<br>MS OFFICE，Work 套件：包括 pages, numbers, keynote. 其实 Windows 的生产力之说大抵也就是 Office 系列 VS 系列了，虽然我不喜欢 Office，但是不得不说，Excel 做的真的是世界级的牛。其他，PPT，Word 嘛？反正我不喜欢，奈何别人都用这个。我只好在电脑上安装一份了。<br>虚拟机：parallels desktop<br>迅雷 本来挺简洁的，最近出来一个商城。哦，看来距离我卸载他的日期已经不多了。<br>管理 Android 手机：airdroid 用于管理我的坚果手机。<br>写作与编码，Sublime+ 插件，MacVim+ 插件<br>邮件：airmail 好简洁，好强大，和 Gmail 简直就是无缝对接嘛。<br>思维导图：xmind - 一直在用。依赖 Java 环境。<br>解压缩：BetterZip 7z 解压缩 我比较喜欢 7z<br>你懂的：shadowsocks 不多说了，看小粉红出墙征战四方寸草不生的优良工具。<br>其他系统自带软件</p>
<h3 id="2-开发环境"><a href="#2-开发环境" class="headerlink" title="2. 开发环境"></a>2. 开发环境</h3><p>ide 类：xcode 和 xcode-cli 工具（用于安装 homebrew 和 homebrew cask）</p>
<h4 id="2-1-homebrew"><a href="#2-1-homebrew" class="headerlink" title="2.1 homebrew"></a>2.1 homebrew</h4><p>少什么？homebrew 一下就好。</p>
<p>如果你想更深一步，那就使用 homebrew cask</p>
<h4 id="2-2-sublime-text"><a href="#2-2-sublime-text" class="headerlink" title="2.2 sublime text"></a>2.2 sublime text</h4><p>sublime text 作为我很长一段时间的主力编辑器，优点如下：</p>
<ul>
<li>快，打开文件比较快。当然，比 notepad++ 要慢</li>
<li>多光标编辑。</li>
<li>强大的插件库</li>
</ul>
<p>对，加上第三点，sublime 成为了编辑器世界的女神级别人物。哎，想起我对别人大力推荐这个编辑器别人还是一如既往的使用 npp，实在是糟心。</p>
<p>插件库里面的主题我比较喜欢 sodarized<br>喜欢的功能性插件为 pretty 系插件，比如，对 json,html,js.css 进行一键格式化。哦，简直帅爆了。<br>当然其他能留下深刻印象的就是 lint 系列插件和部分对编辑器的侧边栏，右键菜单，以及对应语言的库进行补充的插件了。</p>
<p>现在继续使用这一款软件的原因也是如此。</p>
<h4 id="2-3-macvim-spf13-vim"><a href="#2-3-macvim-spf13-vim" class="headerlink" title="2.3 macvim + spf13-vim"></a>2.3 macvim + spf13-vim</h4><p>我对计算机上古时代的前辈们总是有很崇高的敬意。这在我是用来了 Vim 以后才逐渐有这种想法。</p>
<p>对，Vim 真的很神奇。但是 Vim 是我见过的为数不多的使用难度超越了我认识到的所有软件的软件。之前排名在 top 1 的应该是 Windows 上面的 Totalcmd。</p>
<p>出于 Vim 及其陡峭的学习路径，我认为 Vim 本身适合可以盲打，并且是键盘流爱好者的情况下再学习。否则，学习效率会极其的低下。为什么我知道？一把辛酸泪。</p>
<p>在这个时代，最宝贵的就是有用的信息，对，我遇到了 SPF13Vim 这个已经配置好的 VIm 版本。并且从中学习到了一些奇技淫巧。</p>
<p>现在基本上是离不开 Vim 了。甚至面对没有 Vim 类型操作的编辑器或者浏览器的时候，简直无法忍受。</p>
<p>尽管现在我还是一个 Vim 菜鸟。有机会我会整理好自己的 Vim 配置，放在 github 上面。</p>
<p>Vim 使用一定要改按键！！！</p>
<p>CapsLock 按键没有什么用，改成 Escape 按键或者改成 Ctrl 按键，推荐改成 Ctrl，因为 ESC 除了 Vim 里面使用的比较少，但是使用 Ctrl 的场景就比较多了（Vim 中 ESC 可以使用 Ctrl+\『代替，而且不需要使用第三方工具），这样让小拇指很舒服。</p>
<h4 id="2-4-Chrome"><a href="#2-4-Chrome" class="headerlink" title="2.4 Chrome"></a>2.4 Chrome</h4><p>由于一些众所周知，或者你不知道我也懒得告诉你的原因。我们比较信赖国外的好的产品。</p>
<p>Chrome 就是这样的产品。</p>
<p>我以前的文章也写过，只是由于硬盘发生了一次数据丢失事件，关于 chrome 的笔记都已经丢掉了，我就再也没有写过 chrome 的那些牛的要死的功能。</p>
<p>但是我还是要推荐一些我喜欢的插件。</p>
<p>adblock - 去广告标准配置了吧<br>autoPatchWork - 自动拼接下一页到本页<br>capture，explain and send screenshots - 截图<br>cssviewer - 查看 css 的工具<br>Dream Afar New Tab - 美化新标签页面必备<br>json editor - 格式化 json 专用<br>isometric contribution - 其实也就是美化 github 上面提交的工具<br>One Click extensions Manager - 由于 chrome 的标签数量惊人，所以有的时候为了提升速度还是禁用掉一些比较好。<br>Pocket - read it later  PS：虽然我自从用了为知笔记以后就不用 pocket 了。但 pocket 真的值得一用<br>Vimium - 快速浏览网页的神器<br>Web Timer - 记录花在每个站点的时间。<br>Wiznote WebCliper - Pocket 的替代品<br>Octotree - 如果你玩 github 没装这个插件，是时候使用这个插件然后感叹时光一去永不回了。<br>SwitchyOMega - 你懂得</p>
<h4 id="2-5-Lang-环境"><a href="#2-5-Lang-环境" class="headerlink" title="2.5 Lang 环境"></a>2.5 Lang 环境</h4><p>Lang 环境，顾名思义，就是各种语言的环境。</p>
<p>我们程序员需要懂和计算机交流的本事，所以，我们需要学很多的语言。但，问题也就因此而来。选择什么样的软件来管理不同的软件环境呢？如果是 Ruby 环境，我们又怎么配置 Ruby 不同版本呢？</p>
<p>计算机世界的铁律：</p>
<blockquote>
<p>只要有树叶飞舞的地方，火就会燃烧</p>
</blockquote>
<p>额，等等，说串场了</p>
<blockquote>
<p>只要有痛点，就有解决痛点的工具。</p>
</blockquote>
<p>Java 这个需要切换版本的要求比较低。无所谓。何况，已经很久没有写 Java 了。 我一般情况下使用的是 Java8<br>rvm ruby 社区的人都喜欢使用最新最潮的技术，所以，切换版本这种事情必须要做，rbenv 和 rvm 都是非常有用 ruby 版本管理器。我喜欢 rvm。<br>nvm nodejs 比较火，虽然我对 nodejs 并不是很感冒，但是我不得不承认，有些人写出来的 nodejs 工具实在是方便的要死。比如，gitbook-cli，hexo-cli，二者都是记录自己的笔记的好东西。<br>Lang 对于 Python，我选择了 anaconda，anaconda 为特殊的 Python 分发包。里面的库比较全面，不需要我特地为一个包找教程来安装。</p>
<h4 id="2-6-终端"><a href="#2-6-终端" class="headerlink" title="2.6 终端"></a>2.6 终端</h4><p>首先，我们对终端的认识可能还停留在 unix 机器或者 ubuntu 桌面进不了的时代。Mac 上面 iterm2 作为一个终端模拟器，则是做到了同类中的最强者。好用到想让人哭。</p>
<p>shell 一般情况下使用的 bash，但是那是对运维人员来说的，我们开发者使用的是 zsh。配置 zsh 的文件使用是 OhMyZsh.</p>
<p>好用到想哭。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>从我的角度来看 Win 和 Mac 的好于不好</p>
<p>Win 的好在于系统优良的兼容性，以及入门就可以上手的强大的操作性。由于出自于什么都爱做的微软公司，从整体来说，VS，.NET, 游戏性，兼容性，性能，新手上手速度来说，都是遥遥领先 Mac 的。<br>也可惜了，微软的战线实在是拉的太长，什么都想做，什么都想垄断。于是，与之服务密切相关的公司也就受到了 MS 的牵制。这对大公司来说，几乎是不能够忍受的行为。于是硅谷的公司使用微软服务的也就接近 5%（可能有误差）。并且，糟糕的终端环境（DOS）和无法与、<em>nux 世界的脚本友好相处使得系统的可定制性和进阶操作性大大降低。<br>虽然有 Everything，TotalCMD，AHK 这种神级辅助工具可以满足定制要求。但由于过高的学习成本（AHK 语言真的很混乱啊，TC 实在是太难用了）但也无法满足、</em>nux 程序员的要求。这就是我不得不切换到 Mac 上面的理由。</p>
<p>Mac 的好在于终端和美观的图形的结合。也就是开发基于、*nux 应用的非常方便以及非常容易与脚本文件配合出强大的组合技能，反观 Win 上，则这种组合技能则在环境配置上和操作流畅度上差了很多。<br>缺点也是相当容易看出来的 – 娱乐项目实在是少的要死。再者说，我们也不需要娱乐性那么强的软件，不是么？</p>
<p>哦，终于集齐了 PC，Linux，Mac 的配置文章</p>
<p><a href="https://www.zhihu.com/question/30816866/answer/59415036">关于 Ubuntu 我的回答</a></p>
<p><a href="https://www.zhihu.com/question/32129337/answer/59379401">关于 Win10 我的回答</a></p>
<p>就酱紫。</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>2016-02-03 : 更新 Trackpad 部分，修改部分文字<br>2016-02-07 : 重写快捷键部分，将快捷键按照程序划分。<br>2017-04-01 : 重写碎碎念部分。<br>2017-05-01 : 已经更换最新款 Macbook Pro, 算是实现了一个小目标吧。</p>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>效率</tag>
        <tag>macOS</tag>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>斗鱼 TV 弹幕助手</title>
    <url>/2016/02/04/%E6%96%97%E9%B1%BCTV%E5%BC%B9%E5%B9%95%E5%8A%A9%E6%89%8B/</url>
    <content><![CDATA[<h1 id="斗鱼弹幕助手"><a href="#斗鱼弹幕助手" class="headerlink" title="斗鱼弹幕助手"></a>斗鱼弹幕助手</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>前几天闲着无聊，看到舍友们都在看斗鱼 TV，虽然我对那些网络游戏东西都不是非常感兴趣。只是我突然间想到，如果我可以获取上面的弹幕内容。不就有点意思了么？</p>
<h2 id="1-分析阶段"><a href="#1-分析阶段" class="headerlink" title="1. 分析阶段"></a>1. 分析阶段</h2><p>如果我想要抓取网页上面的东西，无非就是两种方法</p>
<a id="more"></a>

<ol>
<li>使用浏览器，手工（自己点击）或者非手工（使用 JS 脚本），存取我想要的东西。</li>
<li>编写 HTTP 客户端（斗鱼无 HTTPS 通讯）</li>
</ol>
<p>第一种方法是万能的，但显然是不行的， 原因如下：</p>
<ul>
<li>手动保存实在是不可行，程序员不为也。</li>
<li>浏览器与本地交互有限，换而言之，也就是即使我抓取了对应的弹幕，我也没有办法解决持久化的问题。</li>
<li>假设你选择的是 Chrome 或者 firefox 浏览器，也不是不能实现持久化，但这需要写扩展，Chrome 扩展没有写过，也不是很感兴趣。</li>
</ul>
<p>第二种方法显然是一个正常的程序员的做法。</p>
<p>写一个客户端，也就是写一个小爬虫，使用的场景：</p>
<blockquote>
<p>用户在终端执行命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>回想一下抓取网站的方法</p>
<p>四步走：请求网页（原始数据） - 提取数据（提纯数据） - 保存数据 - 分析数据</p>
<p>很显然，只要解决了请求网页，其他的也就无非解析和 SQL 语句什么的。</p>
<h3 id="1-1-斗鱼-TV-弹幕抓取的思路确定"><a href="#1-1-斗鱼-TV-弹幕抓取的思路确定" class="headerlink" title="1.1. 斗鱼 TV 弹幕抓取的思路确定"></a>1.1. 斗鱼 TV 弹幕抓取的思路确定</h3><p>如果是像我上面说的那么简单，也就不必再写一篇文章。毕竟，网页小爬虫没有什么技术含量。分布式爬虫才有。</p>
<p>通常情况下的网页小爬虫无非要解决如下问题：</p>
<p>请求，如果对方有一定策略的反爬虫，那需要反反爬虫。比如，</p>
<ul>
<li>header 带上 host，带上 refer，带上其他</li>
<li>需要验证，那就申请用户名和密码，然后登陆</li>
<li>如果在登录时期有防跨站机制，那就先获取一次登录页面，然后解析出 token，带上对应的 token 然后登陆。</li>
<li>在程序中加入 Log，并且存到本地。防止出现各种各样的反爬虫机制 ban 掉了程序，从而方便进行下一步防反爬虫对策。</li>
</ul>
<p>并且，由于请求响应机制的存在，通常情况下，每一个请求对应一个响应，如果出错了，要么超时，要么有状态码，所以 web 爬虫实在也相对而言比较容易些。</p>
<p>那么，斗鱼 TV 的站点是不是这样子的容易爬取呢？</p>
<p>你猜到了，答案是“不是”。</p>
<p>由于弹幕具有实时性，就决定了斗鱼 TV 的弹幕无法通过保存完整指定时间端弹幕的 XML（比如 BILIBILI 的一个视频弹幕是存在一段 xml 中的）或者 Json 数据来显示弹幕。要不然的话，那主播操作很出色的时候，观众的弹幕岂不是无法实时显示了么？</p>
<p>那么，肯定就是 WebSocket 了，于是，我一如既往的打开 F12，查看网络流量。</p>
<blockquote>
<p>正如你想到的那样，没有任何的弹幕流量来往。一个 WebSocket 的消息都没有。</p>
</blockquote>
<p>那么，消息肯定是有的，但是消息并不是通过 HTTP 协议或者 WebSocket 协议传输的，那么问题会出在哪呢？</p>
<p>分析前端的代码，找出获取弹幕的 JS 代码，苦于代码太多，找了很久没有找到。那也就是执行逻辑可能在 flash 里面。</p>
<p>于是祭出大杀器 WireShark，抓一下流量。终于看到弹幕的样子了。</p>
<p>是这样的。</p>
<p><img src="/images/douyutveachmsg.png" alt="每条消息的内容"></p>
<p>原来使用的是 Flash 的 Socket 功能。</p>
<p>多分析几组数据，但还是对发送消息内容缺乏把握，特别是在用户认证，用户接收弹幕这一块。在搜索引擎上搜索了一阵，发现知乎上有个帖子，读完终于解了我的疑惑。</p>
<p>省略若干消息分析过程。</p>
<p>总结后得出斗鱼 TV 网站的服务器分布。</p>
<p><img src="/images/douyutvinfo.jpg" alt="猜测网站架构图"></p>
<h3 id="1-2-房间信息和弹幕认证服务器获取"><a href="#1-2-房间信息和弹幕认证服务器获取" class="headerlink" title="1.2. 房间信息和弹幕认证服务器获取"></a>1.2. 房间信息和弹幕认证服务器获取</h3><p>首先我们拿随便一个主播房间来说，比如，mkk</p>
<p>Ta 的房间链接分为两种</p>
<ul>
<li><a href="http://www.douyutv.com/mkk">http://www.douyutv.com/mkk</a></li>
<li><a href="http://www.douyutv.com/%E3%80%8E%E6%88%BF%E9%97%B4">http://www.douyutv.com/『房间</a> id]</li>
</ul>
<p>对这个主播房间页面请求，正常，所有的有用信息都不是放在 HTML 中渲染出来，而是放在 HTML 中内置的 JS 脚本中，这是为了减少服务器渲染 HTML 的压力？可是渲染放在 JS 里面不也一样需要渲染？（不明白）总之，就是程序先加载没有具体数据填充页面，然后 JS 更新数据。</p>
<p>内置的两段 JS 脚本，JS 脚本中有两个变量，该变量很容易转换成 JSON 数据，也就是两段 JSON 数据，一个是关于主播的个人信息，另一个是关于弹幕认证服务器的列表（该列表中的任意一个服务器均可以认证，但每一次请求主播页面得到的认证服务器列表都不一样）</p>
<p>通过这步，我们就拿到了主播的信息以及弹幕服务器的认证地址，端口。</p>
<h3 id="1-3-发送-Socket-消息的流程简介"><a href="#1-3-发送-Socket-消息的流程简介" class="headerlink" title="1.3. 发送 Socket 消息的流程简介"></a>1.3. 发送 Socket 消息的流程简介</h3><p>我们通过抓包，分析那一大坨数据包，可以确定以下通过以下的流程便可以获取弹幕消息。（分析过程比较繁琐）</p>
<p>首先建立两个 Socket。一个用于认证 (@danmu_auth_socket)，另一个用户获取弹幕 (@danmu_client)。</p>
<ul>
<li><strong>步骤 1:</strong> @danmu_auth_socket 发送消息登陆，获取消息 1 解析出匿名用户的用户名，再获取消息 2 解析出 gid</li>
<li><strong>步骤 2:</strong> @danmu_auth_socket 发送 qrl 消息，获取两个没有什么用的消息</li>
<li><strong>步骤 3:</strong> @danmu_auth_socket 发送 keeplive 消息</li>
<li><strong>步骤 4:</strong> @danmu_socket 发送伪登陆消息（所有匿名用户都一样只需要输入步骤一中用户名就行了，因为认证已经在上面做过了）</li>
<li><strong>步骤 5:</strong> @danmu_socket 发送 join_group 消息需要步骤一中国的 gid</li>
<li><strong>步骤 6:</strong> @danmu_socket 不断的 recv 消息就可以获取弹幕消息了</li>
</ul>
<p>后面会详细解释</p>
<h3 id="2-1-消息-Socket-消息格式以及发送一条消息"><a href="#2-1-消息-Socket-消息格式以及发送一条消息" class="headerlink" title="2.1. 消息 Socket 消息格式以及发送一条消息"></a>2.1. 消息 Socket 消息格式以及发送一条消息</h3><p>既然是发消息，那么每条消息总是有些格式的。</p>
<p>斗鱼的消息格式大致如下：</p>
<p><img src="/images/douyutveachmsg.png" alt="每条消息的内容"></p>
<p>并遵循下面的格式：</p>
<ol>
<li>通信协议长度，后四个部分的长度，四个字节</li>
<li>第二部分与第一部分一样</li>
<li>请求代码，发送给斗鱼的话，内容为 0xb1,0x02, 斗鱼返回的代码为 0xb2,0x02</li>
<li>发送内容</li>
<li>末尾字节</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding : utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span></span></span><br><span class="line">  <span class="comment"># 向斗鱼发送的消息</span></span><br><span class="line">  <span class="comment"># 1. 通信协议长度，后四个部分的长度，四个字节</span></span><br><span class="line">  <span class="comment"># 2. 第二部分与第一部分一样</span></span><br><span class="line">  <span class="comment"># 3. 请求代码，发送给斗鱼的话，内容为 0xb1,0x02, 斗鱼返回的代码为 0xb2,0x02</span></span><br><span class="line">  <span class="comment"># 4. 发送内容</span></span><br><span class="line">  <span class="comment"># 5. 末尾字节</span></span><br><span class="line">  <span class="comment">#pack(&#x27;c*&#x27;) 是字节数组转字符串的一种诡异的转化方式</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(content)</span></span></span><br><span class="line">    <span class="variable">@length</span> = [content.size + <span class="number">9</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>].pack(<span class="string">&#x27;c*&#x27;</span>)</span><br><span class="line">    <span class="variable">@code</span> = <span class="variable">@length</span>.dup</span><br><span class="line">    <span class="variable">@magic</span> = [<span class="number">0xb1</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>].pack(<span class="string">&#x27;c*&#x27;</span>)</span><br><span class="line">    <span class="variable">@content</span>  = content</span><br><span class="line">    <span class="variable">@end</span> = [<span class="number">0x00</span>].pack(<span class="string">&#x27;c*&#x27;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    <span class="variable">@length</span> + <span class="variable">@code</span> + <span class="variable">@magic</span> + <span class="variable">@content</span> + @<span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>经过封装，我们仅仅关注那些可见的字符串，也就是 Content 部分就可以了。<br>content 部分，也就是发送消息的内容，在文章后面将会详解。</p>
<p>开启两个 Socket，一个用户认证，另一个用于弹幕的获取。</p>
<p>用于用户弹幕认证的，是 2.1 中所说的认证服务器列表中任意一个。挑选出来一组 ip 和端口</p>
<blockquote>
<p>@danmu_auth_socket = TCPSocket.new @auth_dst_ip,@auth_dst_port</p>
</blockquote>
<p>用户获取弹幕的只要为</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">danmu.douyutv.<span class="symbol">com:</span><span class="number">8601</span></span><br><span class="line">danmu.douyutv.<span class="symbol">com:</span><span class="number">8602</span></span><br><span class="line">danmu.douyutv.<span class="symbol">com:</span><span class="number">12601</span></span><br><span class="line">danmu.douyutv.<span class="symbol">com:</span><span class="number">12602</span></span><br></pre></td></tr></table></figure>
<p>四组域名：端口均可以作为如下的 DANMU_SERVER 和 PORT</p>
<blockquote>
<p>@danmu_socket = TCPSocket.new DANMU_SERVER,DANMU_PORT</p>
</blockquote>
<p>发送一条消息只需如此</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">data = <span class="string">&quot;type@=loginreq/username@=&quot;</span>+<span class="variable">@username</span>+<span class="string">&quot;/password@=1234567890123456/roomid@=&quot;</span> + <span class="variable">@room_id</span>.to_s + <span class="string">&quot;/&quot;</span></span><br><span class="line">all_data = message(data)</span><br><span class="line"><span class="variable">@danmu_socket</span>.write all_data</span><br></pre></td></tr></table></figure>

<p><strong>接下来，我们需处理上面说的六个步骤</strong></p>
<h3 id="2-2-发送消息详细流程之步骤一"><a href="#2-2-发送消息详细流程之步骤一" class="headerlink" title="2.2. 发送消息详细流程之步骤一"></a>2.2. 发送消息详细流程之步骤一</h3><p>发送消息内容为：</p>
<blockquote>
<p>type@=loginreq/username@=/ct@=0/password@=/roomid@=156277/devid@=DF9E4515E0EE766B39F8D8A2E928BB7C/rt@=1453795822/vk@=4fc6e613fc650a058757331ed6c8a619/ver@=20150929/</p>
</blockquote>
<p>我们需要注意的内容如下：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">type 表示消息的类型登陆消息为 loginreq</span><br><span class="line">username 不需要，请求登陆以后系统会自动的返回对应的游客账号。</span><br><span class="line">ct 不清楚什么意思，默认为 <span class="number">0</span> 并无影响</span><br><span class="line">password 不需要</span><br><span class="line">roomid 房间的 id</span><br><span class="line">devid 为设备标识，无所谓，所以我们使用随机的 UUID 生成</span><br><span class="line">rt 应该是 runtime 吧，时间戳</span><br><span class="line">vk 为时间戳 +<span class="string">&quot;7oE9nPEG9xXV69phU31FYCLUagKeYtsF&quot;</span>+devid 的字符串拼接结果的 MD5 值（这个是参考了一篇文章，关于这一处我也不大明白怎么探究出来的）</span><br><span class="line">ver 默认</span><br></pre></td></tr></table></figure>

<p>通过这一步，我们可以获取两条消息，并从消息中使用正则表达式获取对应的用户名以及 gid</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">str = <span class="variable">@danmu_auth_socket</span>.recv(<span class="number">4000</span>)</span><br><span class="line"><span class="variable">@username</span>= str[<span class="regexp">/\/username@=(.+)\/nickname/</span>,<span class="number">1</span>]</span><br><span class="line">str = <span class="variable">@danmu_auth_socket</span>.recv(<span class="number">4000</span>)</span><br><span class="line"><span class="variable">@gid</span> = str[<span class="regexp">/\/gid@=(\d+)\//</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h3 id="2-3-发送消息详细流程之步骤二"><a href="#2-3-发送消息详细流程之步骤二" class="headerlink" title="2.3. 发送消息详细流程之步骤二"></a>2.3. 发送消息详细流程之步骤二</h3><p>发送的消息内容为</p>
<blockquote>
<p>“type@=qrl/rid@=” + @room_id.to_s + “/“</p>
</blockquote>
<p>无需多说，类型为 qrl，rid 为 roomid，直接发送这条消息就好。返回的两条消息也没有什么价值。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">send_message(<span class="symbol">:qrl</span>,<span class="variable">@danmu_auth_socket</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">str = <span class="variable">@danmu_auth_socket</span>.recv(<span class="number">4000</span>)</span><br><span class="line">str = <span class="variable">@danmu_auth_socket</span>.recv(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-4-发送消息详细流程之步骤三"><a href="#2-4-发送消息详细流程之步骤三" class="headerlink" title="2.4. 发送消息详细流程之步骤三"></a>2.4. 发送消息详细流程之步骤三</h3><p>发送的消息内容为</p>
<blockquote>
<p>“type@=keeplive/tick@=” + timestamp + “/vbw@=0/k@=19beba41da8ac2b4c7895a66cab81e23/“</p>
</blockquote>
<p>直接发送。无太大意义。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">send_message(<span class="symbol">:keeplive</span>,<span class="variable">@danmu_auth_socket</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">str = <span class="variable">@danmu_auth_socket</span>.recv(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure>

<p><strong>前三步，也就是 2.2-2.3-2.4 三步骤，也就是使用 @danmu_auth_socket 完成获取 username 和 gid 的重要步骤。获取这两个字段以后，也就完成了它存在的使命。</strong></p>
<p>接下来的就是 @danmu_socket 获取弹幕的时候了！</p>
<h3 id="2-5-发送消息详细流程之步骤四"><a href="#2-5-发送消息详细流程之步骤四" class="headerlink" title="2.5. 发送消息详细流程之步骤四"></a>2.5. 发送消息详细流程之步骤四</h3><p>消息内容为：”type@=loginreq/username@=”+@username+”/password@=1234567890123456/roomid@=” + @room_id.to_s + “/“</p>
<p>和上面 2.2 中略有不同。但是，需要注意的是</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">username 为 <span class="number">2.2</span> 中所得到的 username</span><br><span class="line">password 的变化</span><br><span class="line">少了几个字段</span><br></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">data = <span class="string">&quot;type@=loginreq/username@=&quot;</span>+<span class="variable">@username</span>+<span class="string">&quot;/password@=1234567890123456/roomid@=&quot;</span> + <span class="variable">@room_id</span>.to_s + <span class="string">&quot;/&quot;</span></span><br><span class="line">all_data = message(data)</span><br><span class="line"><span class="variable">@danmu_socket</span>.write all_data</span><br><span class="line">str = <span class="variable">@danmu_socket</span>.recv(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2-6-发送消息详细流程之步骤五"><a href="#2-6-发送消息详细流程之步骤五" class="headerlink" title="2.6. 发送消息详细流程之步骤五"></a>2.6. 发送消息详细流程之步骤五</h3><p>接下来就是完成认证的最后一步了，join_group 的消息内容为</p>
<blockquote>
<p>“type@=joingroup/rid@=” + @room_id.to_s + “/gid@=”+@gid+”/“</p>
</blockquote>
<p>gid 为 2.2 中所得到的 gid。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">send_message(<span class="symbol">:join_group</span>,<span class="variable">@danmu_socket</span>,<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2-7-发送消息详细流程之步骤六"><a href="#2-7-发送消息详细流程之步骤六" class="headerlink" title="2.7. 发送消息详细流程之步骤六"></a>2.7. 发送消息详细流程之步骤六</h3><p>获取弹幕，并且打印出来。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">danmu_data = <span class="variable">@danmu_socket</span>.recv(<span class="number">4000</span>)</span><br><span class="line">type = danmu_data[danmu_data.index(<span class="string">&quot;type@=&quot;</span>)..-<span class="number">3</span>]</span><br><span class="line">puts type.gsub(<span class="string">&#x27;sui&#x27;</span>,<span class="string">&#x27;&#x27;</span>).gsub(<span class="string">&#x27;@S&#x27;</span>,<span class="string">&#x27;/&#x27;</span>).gsub(<span class="string">&#x27;@A=&#x27;</span>,<span class="string">&#x27;:&#x27;</span>).gsub(<span class="string">&#x27;@=&#x27;</span>,<span class="string">&#x27;:&#x27;</span>).split(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>后三步，则是 @danmu_socket</strong> 获取弹幕的步骤。</p>
<p>于是，通过这些步骤，就可以完成了简单的 douutv 的和新代码，接下来的步骤就是完善，重构这些代码了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="1-痛点一，头疼的过度封装"><a href="#1-痛点一，头疼的过度封装" class="headerlink" title="1. 痛点一，头疼的过度封装"></a>1. 痛点一，头疼的过度封装</h3><p>我们知道，在编写 Ruby 的 Socket Server 和 Client 的时候，非常方便，特别是传输的 socket 消息内容为字符串的时候。</p>
<p>但是，当处理的消息内容不可打印的字符串的时候，必须要转化成字节数组的时候，让我着实混乱了一阵，直到使用了 pack(”c*“) 和 unpack(“c*“), 并且通过 wireshark 抓包验证了自己的发送的数据包和接受的数据包才安心使用 pack 与 unpack。</p>
<h3 id="2-痛点二，至今还没有解决-rtmp-地址的获取"><a href="#2-痛点二，至今还没有解决-rtmp-地址的获取" class="headerlink" title="2. 痛点二，至今还没有解决 rtmp 地址的获取"></a>2. 痛点二，至今还没有解决 rtmp 地址的获取</h3><p>找了很久没有办法解决 rtmp 地址的自动获取：</p>
<p>路径如下</p>
<p><a href="http://www.douyutv.com/swf_api/room/301712?cdn=&amp;nofan=yes&amp;_t=24243097&amp;sign=3b2efb130cb25a85e621f477f95c7341">http://www.douyutv.com/swf_api/room/301712?cdn=&amp;nofan=yes&amp;_t=24243097&amp;sign=3b2efb130cb25a85e621f477f95c7341</a></p>
<p>这一处的请求不是 XHR，也就是不是 JS 脚本通过 XMLHttpRequest 异步加载；那么，八成是 flash 通过 http 协议获取的。我估计八成执行逻辑应该是在 flash 之中。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>核心代码的地址为：</p>
<p>重构版本即将出炉。</p>
<p>还请轻拍。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>PS: 如果有问题可以在下方留言或者发送 email 到 <a href="mailto:&#x74;&#119;&#x6f;&#99;&#x75;&#99;&#x61;&#x6f;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#x74;&#119;&#x6f;&#99;&#x75;&#99;&#x61;&#x6f;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a> 给我。</p>
<h2 id="ChangeLog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h2><p>2016-02-09 09:01:00 - 重写部分内容。增加 Ruby Socket 部分。</p>
]]></content>
      <categories>
        <category>我的开源项目</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>Wireshark</tag>
        <tag>逆向工程</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 程序员如何优雅的看斗鱼 TV</title>
    <url>/2016/02/15/Python%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95%E5%8A%A9%E6%89%8B/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>过年的一段时间抽空研究写了一些关于斗鱼 TV 的弹幕的获取。分别使用 Python 和 Ruby 写了弹幕获取的客户端。</p>
<p>文章地址为：</p>
<p>Python 版本：<br><a href="http://www.jianshu.com/p/2e0d14978ae9">http://www.jianshu.com/p/2e0d14978ae9</a></p>
<p>Ruby 版本附加原理讲解：<br><a href="http://www.jianshu.com/p/ef0225b6bb0e">http://www.jianshu.com/p/ef0225b6bb0e</a></p>
<p>文章末尾写到了我有一个痛点 –rtmp 直播视频无法获取，后来在网友 <a href="http://www.jianshu.com/users/0675b42ac3ba">往事侞湮</a>] 的友善提醒下，终于 Get 到了。</p>
<p>于是，稍微完善了一下，我就发布了第一个命令行版本的斗鱼 TV 浏览弹幕小助手。</p>
<p>如果你是 MacOSX 的用户，你只需要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mplayer</span><br><span class="line">pip3 install danmu.fm</span><br><span class="line"><span class="comment"># danmu.fm -q 1 -v 1 [url]</span></span><br><span class="line"><span class="comment"># 比如</span></span><br><span class="line">danmu.fm -q 2 -v 1 http://www.douyutv.com/16789</span><br><span class="line"><span class="comment"># -q 参数 0 为不调用 mplayer 进行播放，1 为使用 mplayer 进行普清视频的播放，2 为使用 mplayer 进行高清视频的播放，3 为使用 mplayer 进行超清视频的播放</span></span><br></pre></td></tr></table></figure>

<p>如果你是 Ubuntu 用户，你只需要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mplayer</span><br><span class="line">pip3 install danmu.fm</span><br><span class="line"><span class="comment"># danmu.fm  -v 1 [url]</span></span><br><span class="line"><span class="comment"># 比如</span></span><br><span class="line">danmu.fm  -v 1 -q http://www.douyutv.com/16789</span><br><span class="line"><span class="comment">#ubuntu 上 mplayer 播放器可以正常播放</span></span><br></pre></td></tr></table></figure>

<p>如果你是 Win 用户，</p>
<blockquote>
<p>唉，windows 上面糟糕的编码问题。那单纯来看字幕的话也不是不可以的。只是我暂时没有对 Win 进行兼容。还是换 Linux 吧。</p>
</blockquote>
<h2 id="0x01-演示效果"><a href="#0x01-演示效果" class="headerlink" title="0x01 演示效果"></a>0x01 演示效果</h2><p><img src="http://upload-images.jianshu.io/upload_images/52890-396d6451c68d2a83.gif?imageMogr2/auto-orient/strip" alt="1123.gif"></p>
<h2 id="0xEE-代码地址"><a href="#0xEE-代码地址" class="headerlink" title="0xEE 代码地址"></a>0xEE 代码地址</h2><p><a href="https://github.com/twocucao/danmu.fm">https://github.com/twocucao/danmu.fm</a></p>
<p>如果喜欢，请点个喜欢或者 star 一下</p>
<hr>
<p>ChangeLog:</p>
<ul>
<li>**Update 20160609 : ** 更新 Python 客户端，修复由于斗鱼网页版面修改带来的小问题，直接开启海量弹幕模式（请大家不要问我为什么端午节这一天为什么闲着没事更新代码，这个真的和情人节是同一个原因）.</li>
<li>**Update 20160220 : **更新 Python 客户端，增加直播视频的 Live 获取，以及 Mac 平台下面的 Mplayer 的视频播放。代码均放在 Github 上面。<a href="//link.zhihu.com/?target=https://github.com/twocucao/danmu.fm">GitHub - twocucao/danmu.fm: douyutv danmu 斗鱼 TV 弹幕助手**</a></li>
<li><strong>Update 20160214 : **更新 Python 和 Ruby 客户端（请大家不要问我为什么情人节这一天为什么闲着没事更新代码）</strong></li>
</ul>
]]></content>
      <categories>
        <category>我的开源项目</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>逆向工程</tag>
        <tag>爬虫</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于背单词软件，你不知道的惊人真相</title>
    <url>/2016/02/24/%E5%85%B3%E4%BA%8E%E8%83%8C%E5%8D%95%E8%AF%8D%E8%BD%AF%E4%BB%B6,%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%83%8A%E4%BA%BA%E7%9C%9F%E7%9B%B8/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><ul>
<li>你想知道背单词软件有大概多少人注册第一天都没有背完嘛？</li>
<li>你想知道背单词软件这么火，这么多人在使用，真的有多少人真的在背诵嘛？</li>
</ul>
<p>别急，Python 程序员用数据给你说话。</p>
<p>文章目录如下：</p>
<ul>
<li>0x00 前言</li>
<li>0x01 问题的提出和任务的分解</li>
<li>0x02 任务一，信息爬取</li>
<li>ox03 任务二，清理和存储</li>
<li>0x04 任务三，分析</li>
<li>0x05 任务四，结论</li>
<li>0x06 整个流程的不足和反思。</li>
<li>0x07 代码。</li>
</ul>
<h2 id="0x01-问题的提出和任务的分解"><a href="#0x01-问题的提出和任务的分解" class="headerlink" title="0x01 问题的提出和任务的分解"></a>0x01 问题的提出和任务的分解</h2><p>前两天，就在一个雷电交加的夜晚，我躺在床上，草草的看了一篇英文文章，突然想到一个非常有意思的问题：</p>
<blockquote>
<p>是不是大部分的人做事真的不能坚持呢？比如，背单词。</p>
</blockquote>
<p>好，那我就看看到底有多少人是坚持不下来的？</p>
<p>那么，我们的问题就变成了这样子：</p>
<ul>
<li>有多少人是在坚持或者曾经坚持过背单词呢？（假设 100 天以上算的上是背单词的话）</li>
<li>有多少梦想，毁于不能坚持？</li>
<li>背单词的人们学习的量，是不是符合正太分布呢？</li>
</ul>
<p>于是我选中了业内的标杆扇贝软件作为分析的对象。抽取其中的大约 1/30 的用户的公开数据，也就是游客用户都可以看得到的数据，进行抽样调查。</p>
<p> 调查的具体内容如下：</p>
<ul>
<li>打卡最高 / 成长值最高 / 学习单词数量最高</li>
<li>平均每个人打卡次数 / 成长值 / 学习单词数量</li>
<li>打卡 / 成长值 / 学习单词数量的分布（也就是已经坚持了多少天了）</li>
</ul>
<p>那么，我的任务也就可以分解如下：</p>
<ul>
<li>爬取数据<ul>
<li>使用 Python2 的 Scrapy 进行爬站</li>
</ul>
</li>
<li>清理数据<ul>
<li>sql 语句和 pandas 运算</li>
</ul>
</li>
<li>分析数据<ul>
<li>pandas + seaborn + ipython book</li>
</ul>
</li>
<li>得出结论</li>
</ul>
<h2 id="0x02-任务一，信息爬取，清理和存储"><a href="#0x02-任务一，信息爬取，清理和存储" class="headerlink" title="0x02 任务一，信息爬取，清理和存储"></a>0x02 任务一，信息爬取，清理和存储</h2><p>每个用户的信息都在这里：</p>
<p><a href="http://www.shanbay.com/bdc/review/progress/2">http://www.shanbay.com/bdc/review/progress/2</a></p>
<p>使用 beautifulsoup4 进行解析即可。其他部分参考代码。</p>
<p>扇贝的工程师反爬虫做的还不错，主要有两点：</p>
<ul>
<li>访问数量超标，封禁 IP 半个小时。对应的方法就是代理服务器.（代码中已经删除代理服务器，所以，如果你运行不了代码，那你应该知道怎么做了.)</li>
<li>cookie 如果不禁用很快就无法爬取。对应的方法就是禁用 Cookie.</li>
</ul>
<h2 id="0x03-任务二，清理和存储"><a href="#0x03-任务二，清理和存储" class="headerlink" title="0x03 任务二，清理和存储"></a>0x03 任务二，清理和存储</h2><p>对于数据库，使用 Postgresql 存储就好了。也没有什么大问题。参考代码。有问题在评论下面问。</p>
<p>通常情况下在存入数据库的时候需要进行数据的净化，不处理也没有什么大问题。</p>
<h2 id="0x04-任务三，分析"><a href="#0x04-任务三，分析" class="headerlink" title="0x04 任务三，分析"></a>0x04 任务三，分析</h2><p>分析阶段，使用 IPython notebook. 通常情况下，我们使用的是 Anaconda 里面的 Python3 版本 . 可以到这里下载，注意，mac 和 ubuntu 下载的是命令行版本。</p>
<p><a href="https://www.continuum.io/downloads">https://www.continuum.io/downloads</a></p>
<p>安装完毕以后，重启终端。环境变量生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接安装 seaborn</span></span><br><span class="line">pip install seaborn</span><br></pre></td></tr></table></figure>

<p>切换到指定目录然后敲入命令 ipython notebook 打开浏览器进行编辑。</p>
<p>至于怎么使用，请看代码。</p>
<h2 id="0x05-任务三，结论"><a href="#0x05-任务三，结论" class="headerlink" title="0x05 任务三，结论"></a>0x05 任务三，结论</h2><p>在这里省去部分的分析过程直接贴出结论。</p>
<p>总共抓取 1111111 张网页，成功获取 610888 个用户的信息。</p>
<p>于是得出结论如下：</p>
<p><strong>扇贝之最：</strong></p>
<ul>
<li>最高打卡天数：chainyu 1830 天</li>
<li>最高成长值：Lerystal 成长值 28767</li>
<li>最高单词数量：chenmaoboss 单词量 38313</li>
</ul>
<p><strong>平均到每一个人身上</strong></p>
<ul>
<li>平均每人打卡天数：14.18, 而超过成长平均值的人数为 71342, 占总抽样人数的，额，11.69%</li>
<li>平均成长值：121.79, 而超过平均成长的人数为 13351, 占总抽样人数的，额，11.42%</li>
<li>平均学习单词数量：78.92, 而背超过平均单词的人数为 13351, 占总抽样人数的，额，2.19%（注意，真的是 2% 左右）</li>
</ul>
<p><strong>那么，我们来看看打卡，成长值，单词数量的，分布吧.</strong></p>
<p>第一个，所有人的打卡数量直方图。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-700e3adc4e88dd4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这是所有人的打卡数量直方图"></p>
<p>简直惨不忍睹。</p>
<p>第二个，非零用户的打卡数量直方图。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-d43f053706de8b37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="非零用户的打卡数量的直方图"></p>
<p>这真是一段悲伤的故事。由于坚持不了几天的用户实在是太多，简直就是反比例函数嘛，导致图像严重畸形。那么，我们只能分段了看用户打卡天数在 0<del>20,20</del>100,100<del>500,500</del>2000 范围的分布图了。</p>
<p>分别如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-532a24af7f6a4c0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="0~20"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-a1adbb9a925128a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20~100"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-6e0b3c72b5c02c13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="100~500"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-2cf944cc1c837507.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="500~2000"></p>
<p>其他成长值的各种分布也是如此，在此就不贴出来了。</p>
<p>正如你所看到的，我再来总结一下，</p>
<p>在抽样中，</p>
<ol>
<li>英语梦死在前 0 天的有 416351 人，占总比 68.15%;</li>
<li>英语梦死在前 1 天的有 466761 人，占总比 76.40%;</li>
<li>英语梦死在前 2 天的有 484535 人，占总比 79.31%;</li>
<li>英语梦死在前 5 天的有 510230 人，占总比 83.52%;</li>
<li>英语梦死在前 10 天的有 531219 人，占总比 86.95%;</li>
<li>英语梦死在前 20 天的有 551557 人，占总比 90.28%;</li>
<li>英语梦死在前 50 天的有 575975 人，占总比的 94.28%;</li>
<li>英语梦死在前 100 天的有 590700 人，占总比 96.69%;</li>
<li>英语梦死在前 200 天的有 575975 人，占总比 98.36%;</li>
<li>英语梦死在前 263 天的有 600875 人，占总比 98.81%;</li>
</ol>
<p>你可以大致感受到残酷的现实，几乎没有多少人可以坚持到 200 天以后。</p>
<p>但是，你还需要注意到的事情是：</p>
<blockquote>
<p>抽样的来源是 ID 为 1~1111111 之间的 60W 成员</p>
</blockquote>
<p>众所周知的事情是：</p>
<ul>
<li>早期的用户往往质量相对会高一些。而且，注册的 ID 越大，证明注册时间距离现在越近。获得 200 天的几率也就低了不少。</li>
</ul>
<blockquote>
<p>那么，这样的话，英语梦死在 200 天之前的人数比例还会大上不少。</p>
</blockquote>
<p>回到文章开始：</p>
<p>问：背单词软件有大概多少人注册第一天都没有背完嘛？<br>答：68.15%</p>
<p>问：有多少人是在坚持或者曾经坚持过背单词呢？（假设 100 天以上算的上是背单词的话）<br>答：保守估计，不足 3.4%</p>
<p>问：有多少梦想，毁于不能坚持？<br>答：不妨干了这碗鸡汤，歌唱青春一去不复返。</p>
<p>问：背单词的人们学习的量，是不是符合正太分布呢？<br>答：不是，简直就是反比例函数。</p>
<p>抛出一个结论：</p>
<blockquote>
<p>以绝大部分人努力之低，根本就用不着拼天赋。</p>
</blockquote>
<p>赠给你我，共勉。</p>
<h2 id="0x06-整个流程的不足和反思。"><a href="#0x06-整个流程的不足和反思。" class="headerlink" title="0x06 整个流程的不足和反思。"></a>0x06 整个流程的不足和反思。</h2><p>扇贝的工程师反爬虫做的还不错，主要有两点：</p>
<ul>
<li>访问数量超标，封禁 IP 半个小时。对应的方法就是代理服务器。</li>
<li>cookie 如果不禁用很快就无法爬取。对应的方法就是禁用 Cookie.</li>
</ul>
<p>爬虫框架使用 Scrapy, 这样就免去了大量的繁琐的线程调度问题，直接写获取信息的逻辑代码，以及存储信息的逻辑代码就好了。</p>
<p>在编写爬虫的过程中，有一些经验：</p>
<ul>
<li>在爬虫开启以后，由于我暴力的关闭，导致还是有不少的 item 没有完成请求处理和存储。</li>
<li>我在处理异常的时候忘了应当把失败的 item 存放放在文件中，方便我第二次补充，这样的话就不会丢失一部分的用户信息了。</li>
<li>代理服务器需要自己写脚本进行测试，否则你可能有很多很多的请求都会超时（毕竟很多代理服务器还是很不靠谱的）.</li>
</ul>
<p>我的分析数据能力并不是很强，仅仅是从 CS109 里面偷学了一点点，然后使用 Seaborn 画图，但是这整个过程中还是觉得自己分析不过来，不是写不出代码，而是不清楚使用什么样的数据模型进行分析更好。</p>
<h2 id="0x07-代码"><a href="#0x07-代码" class="headerlink" title="0x07 代码"></a>0x07 代码</h2><p>代码放在了 Github 上面，咳咳，注意，没有把代理服务器放进去。如果你跑一下会发现只能半小时抓取 300+ 页面，这不是我的问题，是你没有把代理服务器填好。代码比较粗糙，还请轻拍。</p>
<p>代码的地址为：</p>
<p><a href="https://github.com/twocucao/DataScience/">https://github.com/twocucao/DataScience/</a></p>
<p>仓库里包含了抓取网站的代码和分析数据的 IPython Notebook, 自己阅读吧。</p>
<p>如果喜欢本文，就点个喜欢吧。</p>
]]></content>
      <categories>
        <category>我的开源项目</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>如何发布一个 Python 命令行工具</title>
    <url>/2016/03/15/%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAPy%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="本文简介"><a href="#本文简介" class="headerlink" title="本文简介"></a>本文简介</h2><p>上次写的一个终端里面斗鱼 TV 弹幕 Python 版本和 Ruby 版本，并且发布到 PIP 和 RubyGems 上面。在发布 PIP 包的时候，居然 Google 不到一篇可以非常好的讲解这个流程的文章。于是整理这篇文章，并且方便后来自己检索，并且方便他人找资料。</p>
<p>自推荐下依照本文定制的命令行工具 danmu.fm 的 github 地址：</p>
<p><a href="https://github.com/twocucao/danmu.fm">https://github.com/twocucao/danmu.fm</a></p>
<p>本文的目的也是非常简单：</p>
<blockquote>
<p>**写一个 Python 命令行工具，并且发布到 PIP 上面.**并且在这个过程中给出我自己的一些思考。</p>
</blockquote>
<a id="more"></a>

<h2 id="如何分解这个发布任务？"><a href="#如何分解这个发布任务？" class="headerlink" title="如何分解这个发布任务？"></a>如何分解这个发布任务？</h2><p>只需要进行如下的两个步骤便可以：</p>
<ul>
<li><ol>
<li>写好一个 Python 命令行工具。</li>
</ol>
</li>
<li><ol start="2">
<li>发布它。</li>
</ol>
</li>
</ul>
<p>当然，这样不够细致。再细分一下。</p>
<ul>
<li><ol>
<li>写好一个 Python 命令行工具</li>
</ol>
<ul>
<li>1.1. 命令行的特点，以及 Python 的如何编写命令行</li>
<li>1.2. 如何组织代码结构。</li>
</ul>
</li>
<li><ol start="2">
<li>发布</li>
</ol>
</li>
<li>2.1. 注册 pypi 账户<ul>
<li>2.2. 注册在账户下面注册 Python 包</li>
<li>2.3. 上传<strong>打包</strong>好的 Python 命令行工具。</li>
</ul>
</li>
<li><ol start="3">
<li>完善代码</li>
</ol>
</li>
</ul>
<h2 id="1-写好一个-Python-命令行工具"><a href="#1-写好一个-Python-命令行工具" class="headerlink" title="1. 写好一个 Python 命令行工具"></a>1. 写好一个 Python 命令行工具</h2><p>写好一个命令行工具首先要知道命令行工具是什么？</p>
<blockquote>
<p>在我看来，命令行工具就是一种完成某种类型的任务的终端程序。</p>
</blockquote>
<p>也就是基本上没有什么用户界面的程序。</p>
<p>由于基本上没有什么用户界面，所以导致单个命令行的交互能力及其低下。但这种低下的交互性对于一些固定工作而言，简直就是最灵活的工具。只需要输入一些命令便可以完成某种类型的工作。实在是方便的很。</p>
<p>所以，某种程度上，终端程序低交互的缺点反而成了优点。</p>
<h3 id="1-1-Python-的如何编写一个简单的命令行"><a href="#1-1-Python-的如何编写一个简单的命令行" class="headerlink" title="1.1.Python 的如何编写一个简单的命令行"></a>1.1.Python 的如何编写一个简单的命令行</h3><p>对于 Python 和命令行交互，我们很容易想出一个比较方便的方案。</p>
<p>sys.argv 就是这样的嘛！</p>
<p>我们很容易这样写代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python testargv.py thisisaargv1</span><br></pre></td></tr></table></figure>
<p>甚至我们也可以这样写命令行，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python testargv.py thisisaargv1 -d -f 0</span><br></pre></td></tr></table></figure>
<p>那么，这样写的后果就是，不方便解析出（不是不能，是不方便） -d -f 0 以及 thisisaargv1.</p>
<p>不信的话，你解析一个下面场景的命令行试试，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户可能这样输入</span></span><br><span class="line">danmu.fm http://www.douyutv.com/xiaocang -q 1 -v 2</span><br><span class="line">danmu.fm -q 1 -v 2 http://www.douyutv.com/xiaocang</span><br><span class="line"><span class="comment"># 当然，肯定还有漏写啦，等等，你得需要转类型，增加各种 blablabla 的描述吧，添加默认的参数值吧。</span></span><br></pre></td></tr></table></figure>

<p>于是 Python 就提供了一个非常好用的模块可以使用。叫做 argparse.</p>
<p>上面的描述就变成了这个样子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">APP_DESC=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这就是描述</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">print(APP_DESC)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    sys.argv.append(<span class="string">&#x27;--help&#x27;</span>)</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-q&#x27;</span>,<span class="string">&#x27;--quality&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">0</span>,<span class="built_in">help</span>=<span class="string">&quot;download video quality : 1 for the standard-definition; 3 for the super-definition&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-v&#x27;</span>,<span class="string">&#x27;--verbose&#x27;</span>, default=<span class="number">0</span>,<span class="built_in">help</span>=<span class="string">&quot;print more debuging information&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;--store&#x27;</span>,<span class="built_in">help</span>=<span class="string">&quot;保存流媒体文件到指定位置&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;--config&#x27;</span>,default=<span class="number">0</span>,<span class="built_in">help</span>=<span class="string">&quot;读取~/.danmu.fm 配置，请~/.danmu.fm 指定数据库&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;url&#x27;</span>,metavar=<span class="string">&#x27;URL&#x27;</span>,nargs=<span class="string">&#x27;+&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;zhubo page URL (http://www.douyutv.com/*/)&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="comment"># 获取对应参数只需要 args.quality,args.url 之类。</span></span><br><span class="line">url = (args.url)[<span class="number">0</span>]</span><br><span class="line">print(url)</span><br><span class="line"><span class="comment">#其他执行逻辑</span></span><br></pre></td></tr></table></figure>
<p>保存为 danmu.py</p>
<p>这样就可以执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python danmu.py http:&#x2F;&#x2F;www.douyutv.com&#x2F;xiaocang -q 1 -v 2</span><br></pre></td></tr></table></figure>
<p>通过 args 就可以获取参数，然后进行终端程序的参数初始化。</p>
<p>可是这和我们的要求还是不同嘛，我们不想多写 Python XXX, 我们想直接 XXX. 就像这样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">danmu.fm -q 1 -v 2 http://www.douyutv.com/xiaocang</span><br></pre></td></tr></table></figure>

<p>不急，下面就是了。</p>
<h3 id="1-2-如何组织代码结构。"><a href="#1-2-如何组织代码结构。" class="headerlink" title="1.2. 如何组织代码结构。"></a>1.2. 如何组织代码结构。</h3><p>于是，现在就要开始组织代码结构了。</p>
<p>我们在最终的代码目录大概是这样的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">danmu.fm</span><br><span class="line">├── README.md</span><br><span class="line">├── danmufm</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── client</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── __init__.pyc</span><br><span class="line">│   │   ├── douyu_client.py</span><br><span class="line">│   │   └── douyu_danmu_client.py</span><br><span class="line">│   ├── danmu.py</span><br><span class="line">│   ├── misc</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── color_printer.py</span><br><span class="line">│   │   ├── downloaders.py</span><br><span class="line">│   │   └── player.py</span><br><span class="line">│   └── model</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── douyu_msg.py</span><br><span class="line">├── docs</span><br><span class="line">├── setup.cfg</span><br><span class="line">├── setup.py</span><br><span class="line">├── sh.py</span><br><span class="line">└── tests</span><br></pre></td></tr></table></figure>
<p>这就是我上次写的 danmu.fm 的代码目录。</p>
<p>聪明的你这时候你注意到了：</p>
<ol>
<li>主要的程序不是放在根目录下面，而是放在第二目录 danmufm 下面。</li>
<li>setup.cfg 是什么鬼东西</li>
<li>setup.py 是什么鬼东西</li>
</ol>
<p>对于上面几点，我们分别进行解释</p>
<p>###1.2.1 为什么主要程序在第二目录下</p>
<p>为了把主要的程序分离出来，放在第二目录下面，这样的待会打包以后多出很多文件夹就不会对源码造成干扰。</p>
<p>当然，由于把程序放在了第二目录下面，所以，脚本里面的 from import 语句应该使用相对路径导入。</p>
<p>相对路径导入的的时候需要注意运行的时候使用如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m danmufm.danmu [xxxx]</span><br></pre></td></tr></table></figure>

<p>###1.2.2 setup.cfg</p>
<p>填写如下内容即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[metadata]</span><br><span class="line">description-file &#x3D; README.md</span><br></pre></td></tr></table></figure>
<p>然后去写 Markdown 的 Readme 就好了。</p>
<p>###1.2.3 setup.py</p>
<p>这个是重头戏了。</p>
<p>setup 这个 py 文件就是打包配置文件。对这个程序是谁的，有什么依赖，入口是什么，等等等等的配置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#-*- encoding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">打包的用的 setup 必须引入，</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">VERSION = <span class="string">&#x27;0.1.1&#x27;</span></span><br><span class="line"></span><br><span class="line">setup(name=<span class="string">&#x27;danmu.fm&#x27;</span>,</span><br><span class="line">      version=VERSION,</span><br><span class="line">      description=<span class="string">&quot;a tiny and smart cli player of douyutv,ximalayad,anmu based on Python&quot;</span>,</span><br><span class="line">      long_description=<span class="string">&#x27;just enjoy&#x27;</span>,</span><br><span class="line">      classifiers=[], <span class="comment"># Get strings from http://pypi.python.org/pypi?%3Aaction=list_classifiers</span></span><br><span class="line">      keywords=<span class="string">&#x27;python douyu danmu danmu.fm terminal&#x27;</span>,</span><br><span class="line">      author=<span class="string">&#x27;twocucao&#x27;</span>,</span><br><span class="line">      author_email=<span class="string">&#x27;twocucao@gmail.com&#x27;</span>,</span><br><span class="line">      url=<span class="string">&#x27;https://github.com/twocucao/doumu.fm&#x27;</span>,</span><br><span class="line">      license=<span class="string">&#x27;MIT&#x27;</span>,</span><br><span class="line">      packages=find_packages(),</span><br><span class="line">      include_package_data=<span class="literal">True</span>,</span><br><span class="line">      zip_safe=<span class="literal">True</span>,</span><br><span class="line">      install_requires=[</span><br><span class="line">        <span class="string">&#x27;requests&#x27;</span>,</span><br><span class="line">      ],</span><br><span class="line">      entry_points=&#123;</span><br><span class="line">        <span class="string">&#x27;console_scripts&#x27;</span>:[</span><br><span class="line">            <span class="string">&#x27;danmu.fm = danmufm.danmu:main&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>官方有 distutils 这个包管理器工具，设置也非常的简单，只是，它不支持 entry_points 属性，由于无法使用 entry_point, 也就无法通过命令来跳转到指定模块运行程序，这也就意味着，官方工具不方便写成命令行。还是 setuptools 好。</p>
<p>上面需要注意的就是 install_requires 可以添加依赖。其他的你猜都可以猜出来是做什么的。自己去看代码，我就不多说了。</p>
<h2 id="2-发布"><a href="#2-发布" class="headerlink" title="2. 发布"></a>2. 发布</h2><p>所谓的发布，就是将打包好的程序的某个版本发布到某个仓库中。</p>
<h3 id="2-1-注册-pypi-账户"><a href="#2-1-注册-pypi-账户" class="headerlink" title="2.1. 注册 pypi 账户"></a>2.1. 注册 pypi 账户</h3><p>到这个上面注册账号：<br><a href="https://pypi.python.org/pypi">https://pypi.python.org/pypi</a></p>
<h3 id="2-2-注册在账户下面注册-Python-包"><a href="#2-2-注册在账户下面注册-Python-包" class="headerlink" title="2.2. 注册在账户下面注册 Python 包"></a>2.2. 注册在账户下面注册 Python 包</h3><p>进入对应项目根文件，然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 setup.py register</span><br></pre></td></tr></table></figure>
<p>这一步程序会让你输入刚刚注册的账号和密码，然后注册该包。注册该包以后，你就有了一个小仓库。可以存放不同版本的 danmu.fm.</p>
<p>注册的仓库是可以在这个地址看到的，<br><a href="https://pypi.python.org/pypi?:action=pkg_edit&amp;name=danmu.fm">https://pypi.python.org/pypi?%3Aaction=pkg_edit&amp;name=danmu.fm</a></p>
<h3 id="2-3-上传打包好的-Python-命令行工具。"><a href="#2-3-上传打包好的-Python-命令行工具。" class="headerlink" title="2.3. 上传打包好的 Python 命令行工具。"></a>2.3. 上传<strong>打包</strong>好的 Python 命令行工具。</h3><p>这里需要借助一个小工具，twine.twine 是一个更加安全方便上传打包好的代码的工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install twine</span><br></pre></td></tr></table></figure>

<p>接着开始打包，打包成两个版本，一个是不需要 build 的版本，另一个是需要 build 的版本（顺带吐槽下，这两个诡异的命名）.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python setup.py sdist bdist_wheel</span><br></pre></td></tr></table></figure>

<p>于是剩下来的就显而易见了，上传 build 完毕的程序到仓库中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">twine upload dist/danmu.fm-0.1.2*</span><br></pre></td></tr></table></figure>

<p>于是，安装一下，测试是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install danmu.fm --upgrade</span><br></pre></td></tr></table></figure>

<p>命令行的工具是这样使用的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">danmu.fm -q 2 -v 1 http://www.douyutv.com/16789</span><br></pre></td></tr></table></figure>

<h2 id="3-完善"><a href="#3-完善" class="headerlink" title="3. 完善"></a>3. 完善</h2><p>不断的完善代码，然后打包终端程序发布到仓库给别人用，这就是整个的 PIP 打包发布流程。</p>
<ul>
<li>这个时候，你可能需要使用版本控制软件。</li>
<li>你可能需要增多的代码的测试。</li>
</ul>
]]></content>
      <categories>
        <category>我的开源项目</category>
      </categories>
      <tags>
        <tag>pip</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Python 监控 Mac 一天的运行（上）</title>
    <url>/2016/04/15/MacPythonMonitorPart1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一不小心写成上下两篇了。真是有些过意不去。毕竟，写的太多就少了一部分读者（少了一部分赞额）.</p>
<p>之所以拆成上下两篇，主要是因为在研究的过程中越发感到在一篇中强行植入那么多的东西，自己的文章结构组织起来有些困难，对读者来说，也是不容易理解。那倒不如拆分成两部分。</p>
<h2 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h2><p>我的需求如此简单，统计 Mac 上面一天的运行情况，然后在每天的下午六点把统计的情况汇总通过 Email 发送给我。</p>
<a id="more"></a>

<p>用更加具体来说，就是，</p>
<blockquote>
<p>隔一段时间使用 Python 脚本，统计当前电脑的运行情况，CPU, 内存，硬盘，网络使用状况，然后在每天的下午六点通过 Email 把统计情况汇总，并且必须要有监控图，并通过 Email 发送给我的邮箱。</p>
</blockquote>
<p>初看这玩意是挺简单的，但是自己动手写了以后就知道，其实还是稍微有些费时间的。</p>
<p>比如：</p>
<ul>
<li>linux 下面定时执行一个脚本只需要 crontab 或者 at 以下就好了.mac 上是是什么？怎么运行一个任务？</li>
<li>统计的数据存哪儿？用什么存？</li>
<li>表格绘图怎么画出来？</li>
<li>Email 怎么发送，如果要发送好看一点点的 Email 怎么办？</li>
</ul>
<p>既然那么多，那就分成两篇，一篇用来介绍 Mac 上面的定时任务（简单，短文）, 另一篇用 Python 来监控 Mac 电脑，并持久化监控数据，绘图，汇总，发送 email.(稍微复杂一点，带图长文）</p>
<ul>
<li>上篇讲在 Mac 上如何让一个脚本定时运行。</li>
<li>下篇讲如何写一个 Python 监控脚本。</li>
</ul>
<h2 id="本文结构"><a href="#本文结构" class="headerlink" title="本文结构"></a>本文结构</h2><ul>
<li>前言</li>
<li>本文结构</li>
<li>为什么需要定时任务？</li>
<li>Mac 上面如何进行定时任务。</li>
<li>疑问和解答</li>
<li>扩展阅读</li>
</ul>
<h2 id="为什么需要定时任务？"><a href="#为什么需要定时任务？" class="headerlink" title="为什么需要定时任务？"></a>为什么需要定时任务？</h2><p>所谓的定时任务，分为两种：</p>
<ol>
<li>指定时间执行的程序</li>
<li>每隔一段时间执行的程序</li>
</ol>
<p>执行的内容，通常情况下和要做什么事情有关，但是从内容上，分为两种：</p>
<ol>
<li>任务之间的数据没有什么关联的</li>
</ol>
<ul>
<li>比如，你想去抓一些数据（迅雷会员账号）但是懒得自己动手，于是就写了一个小脚本，放在每天早上的 8 点钟，去抓来账号。</li>
</ul>
<ol start="2">
<li>任务之间的数据有关联的，甚至某种程度上可以绘制图像。</li>
</ol>
<ul>
<li>比如，下一篇要说的使用 Python 监控自己的电脑情况，e.g: 流量。隔一段时间就查看一下自己的电脑运行情况，把情况存下来。甚至，在某个时间点，把结果汇总发给某个人。</li>
</ul>
<h2 id="Mac-上面如何进行定时任务。"><a href="#Mac-上面如何进行定时任务。" class="headerlink" title="Mac 上面如何进行定时任务。"></a>Mac 上面如何进行定时任务。</h2><ul>
<li>首先，你要写一个任务。</li>
<li>其次，让这个任务定时执行。</li>
</ul>
<p>好，简单的写一个任务 get_time.sh.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">date &gt;&gt; /Users/twocucao/Downloads/dates.txt</span><br></pre></td></tr></table></figure>
<p>接着加上可执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod a+x get_time.sh</span><br></pre></td></tr></table></figure>

<p>那么，怎么让 Mac 通过 launchd 隔一段时间就执行脚本呢？</p>
<p>创建一个特殊的 xml 文件叫做 com.twocucao.apple.getdates.plist, 给你所要运行的命令建立一个进程。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="meta-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.twocucao.apple.getdates<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/twocucao/OhMyCode/Bash/get_time.sh<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">integer</span>&gt;</span>10<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于这个 com.twocucao.apple.getdates 随你命名的，保证唯一就好。通常情况下选择反转域名（和 Java 编程类似）, 其他的，依照你的脚本位置和间隔时间修改。</p>
<p>拷贝到 LaunchDaemons, 加载定时工作，然后检查是否加载成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp com.twocucao.apple.getdates.plist /Library/LaunchDaemons</span><br><span class="line">launchctl load -w /Library/LaunchDaemons/com.twocucao.apple.getdates.plist</span><br><span class="line"><span class="comment">#列出定时任务，并且筛选一下。确认是否加载成功。</span></span><br><span class="line">launchctl list | grep twocucao</span><br></pre></td></tr></table></figure>

<p>由于这个脚本实在是太弱智了仅仅是为了演示，所以，记得把他给卸载，删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">launchctl unload -w /Library/LaunchDaemons/com.twocucao.apple.getdates.plist</span><br><span class="line">rm /Library/LaunchDaemons/com.twocucao.apple.getdates.plist</span><br></pre></td></tr></table></figure>

<h2 id="疑问和解答"><a href="#疑问和解答" class="headerlink" title="疑问和解答"></a>疑问和解答</h2><ul>
<li>问：为什么要把脚本的配置放在 /Library/LaunchAgents 呢？</li>
<li>答：当然，你可以拷贝到其他的地方，<ul>
<li>如果你的需求是该用户登录时候执行的话，那么拷贝到：~/Library/LaunchAgents, 这叫做 User Agents.</li>
<li>如果你的需求是该用户登录时候执行的话，那么拷贝到：/Library/LaunchAgents, 这叫做 Global Agents</li>
<li>如果你的需求是让 Root 用户或者指定用户登录时候执行的话，那么拷贝到：/Library/LaunchDaemons , 这叫做 Global Daemons</li>
<li>如果你的需求是用户登录执行，那么拷贝到：/System/Library/LaunchAgents ,System Agents</li>
<li>如果你的需求是让 Root 用户或者指定用户登录时候执行的话，那么拷贝到：/System/Library/LaunchDaemons, 这叫做 System Daemons.</li>
</ul>
</li>
</ul>
<blockquote>
<p>user-agents 是级别最低，其他所需权限依次递增。</p>
</blockquote>
<ul>
<li><p>问：怎么检查任务执行结果？</p>
</li>
<li><p>答：tail -f /Users/twocucao/Downloads/dates.txt</p>
</li>
<li><p>问：如何确定 launchd 存在这个任务</p>
</li>
<li><p>答：launchctl list</p>
</li>
<li><p>问：既然是隔一段时间就能执行脚本，那么，我可以先用简单的 shell 脚本，配置好相关执行信息，让他定时执行，接着修改 shell 脚本执行新的逻辑么？</p>
</li>
<li><p>答：可以。</p>
</li>
<li><p>问：bash 命令监控多么方便，为何下一篇要使用 Python 作为监控工具。</p>
</li>
<li><p>答：shell 命令编写代码不直观，编写效率低.Python 有很好的第三方库可以使用。</p>
</li>
</ul>
<h2 id="扩展阅读（精选优质资料）"><a href="#扩展阅读（精选优质资料）" class="headerlink" title="扩展阅读（精选优质资料）"></a>扩展阅读（精选优质资料）</h2><ol>
<li>一个关于 Linux 命令的各种奇技的网站 <a href="http://www.commandlinefu.com/commands/browse">http://www.commandlinefu.com/commands/browse</a></li>
<li>Linux 工具快速教程 <a href="http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html">http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html</a></li>
<li>关于 launchd 的参考链接，</li>
</ol>
<ul>
<li><a href="http://launchd.info/">http://launchd.info/</a> <a href="http://www.splinter.com.au/using-launchd-to-run-a-script-every-5-mins-on/">http://www.splinter.com.au/using-launchd-to-run-a-script-every-5-mins-on/</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html">https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html</a></li>
<li><a href="http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html">http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html</a></li>
</ul>
<ol start="4">
<li>命令行的艺术  <a href="https://github.com/jlevy/the-art-of-command-line">https://github.com/jlevy/the-art-of-command-line</a></li>
</ol>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2016-12-05</strong> 重新排版。</li>
</ul>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>编程工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 上面的远程控制 Teamviewer</title>
    <url>/2016/04/02/MacRemoteControl/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>前段时间一直在抓取一个站点，这个站点非常难爬取，原因如下：</p>
<ul>
<li>第一点，网站 Ajax 超级多。</li>
<li>第二点，所有的 API 都是 js 加密后才能访问。</li>
<li>第三点，这也是最最要命的一点，访问特别特别不稳定。有的时候加载时间特别长，70 秒请求一个 API 这点我会告诉你吗？动不动就 404 not found 我能和你说？</li>
</ul>
<p>当然，这些都难不倒我，我最后挑选了 Phantomjs, 编写 Js 调用脚本，从命令行调用程序，将抓取结果输出到标准输出流中，接着获取使用 beautifulsoup 进行基本的解析。剩下的就是入库了。</p>
<p>这里的技术点也是蛮多的，以后有机会就介绍一下.（汗，因为毕业设计这回事情实在是耽误了不少梳理博文的时间，攒了不少开了个头的文章，但自己又不忍心把不好的文章放出来污染大众视野.)</p>
<a id="more"></a>

<h2 id="0x01-事情开始变化了"><a href="#0x01-事情开始变化了" class="headerlink" title="0x01 事情开始变化了"></a>0x01 事情开始变化了</h2><p>程序在运行了很长一段时间之后，有一定几率崩溃。再次开启的时候，有一些需要人工检查的参数，用 supervisor 并不是很方便。</p>
<h2 id="0x02-那怎么该如何是好？"><a href="#0x02-那怎么该如何是好？" class="headerlink" title="0x02 那怎么该如何是好？"></a>0x02 那怎么该如何是好？</h2><p>公司的电脑上写了每个小时将自己的抓取情况发送给我的邮箱，但是糟心的问题是，一旦我在家中，程序崩溃了，我也就只能浪费掉我那接近半天的抓取时间了。我必须要远程控制公司的电脑。怎么办呢？</p>
<ul>
<li>第一种，使用 ssh, 这样我在家里就可以远程控制公司的电脑了。</li>
<li>第二种，使用远程控制软件。</li>
</ul>
<p>我首先想到的是使用 ssh, 因为这个比较常用，用起来会习惯一些。</p>
<h3 id="2-1-在家里配置-ssh-到公司的电脑上需要哪些方法呢？"><a href="#2-1-在家里配置-ssh-到公司的电脑上需要哪些方法呢？" class="headerlink" title="2.1 在家里配置 ssh 到公司的电脑上需要哪些方法呢？"></a>2.1 在家里配置 ssh 到公司的电脑上需要哪些方法呢？</h3><p><strong>请注意：</strong></p>
<blockquote>
<p><strong>ssh 无法穿透路由器</strong></p>
</blockquote>
<p>什么意思？很简单，对于你在家里这个外网来说，你只能”看到”公司在公网的这台路由器，无法看到经过 NAT 转换的公司内网的服务器。</p>
<p>于是，我们可以得出远程方法如下：</p>
<ul>
<li><p>公司路由器的公网地址固定，那么可以在路由器上直接做一个端口映射，将路由器的 ip 的 22 端口（也可以是其他端口）映射到公司局域网内部的一台机器。这样你就可以直接 ssh 公司的路由器，但最终访问的就是你的 mac 或者 linux 机器了。</p>
</li>
<li><p>那如果公司的路由器是拨号上网的呢（比如我现在待得这个小公司，使用的是电信宽带光纤拨号上网）? 很简单，通常情况下你需要及时获取公司公网的 ip 地址。所以，你只需要在你的公司电脑上写个脚本定时把公网的 ip 地址发给你的邮箱里就好了。</p>
</li>
<li><p>在操作的时候，直接使用 tmux 或者 screen 就可以查看这些耗时软件的运行情况了。</p>
</li>
</ul>
<p>但，我最后没有使用这个方案呢？因为电信把路由器的高级功能给阉割掉了，端口映射做不了。并且，由于公司的路由器均为普通网线口，并非光纤接口，唯一有光纤接口的就仅仅只有电信的路由器。</p>
<p>虽然 ssh 很方便，可是打电话找电信太麻烦，于是这个方案被我否定了。</p>
<h3 id="2-2-那么远程控制软件怎么样呢？"><a href="#2-2-那么远程控制软件怎么样呢？" class="headerlink" title="2.2 那么远程控制软件怎么样呢？"></a>2.2 那么远程控制软件怎么样呢？</h3><p>经过不断的搜索，我发现了一款非常棒的穿透力特别强远程操作又相对稳定的软件。可能你也听说过这款软件 teamviewer.</p>
<p>前段时间也用这个软件给学弟们操作搭建部署环境的时候用到的，非常好用。比 qq 的远程协助稳定多了。</p>
<p>并且，可以通过注册账号，直接把机器分配给账号。</p>
<p>然后直接登录账号进行连接就好了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-7b8cb37a1b402612.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="操作界面.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-2d3817fd19ffef66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="远程状态"></p>
<p>╮(╯▽╰)╭所以，我就可以安安心心在家里阅读抓取情况的邮件，当邮件抓取数量出现异常的时候，我就直接开远程过去查看了，修整软件就好了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-2c036e6f181cc4cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="写爬虫的感觉就像皇上批阅折子一样"></p>
<h2 id="0x03-结论"><a href="#0x03-结论" class="headerlink" title="0x03 结论"></a>0x03 结论</h2><p>当然，其实最好的方式还是通过 ssh 配合 tmux 进行管理，但是如果你没有路由器的操作权限（不能做端口映射）, 或者像我一样公司的上网环境比较坑（电信路由器）的话，teamviewer 也算是图形界面中优雅的远控方式。并且，可以使用 windows 控制 mac, 也可使用 mac 控制 windows, 这点实在让人非常心动。</p>
<blockquote>
<p>后续：其实可以用路由器做两次端口转发的，当时没有想到这个两层端口转发。</p>
</blockquote>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-03-14</strong> 重修文字，修正部分错误的说法</li>
</ul>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>编程工具</tag>
        <tag>远程控制</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Cheatsheet</title>
    <url>/2016/07/01/MacCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><blockquote>
<p>好的工匠懂得挑选合适的工具。</p>
</blockquote>
<p>做软件行业之间长了，见多了各种操作系统孰优孰劣 / 编程语言哪家强的论战，也就渐渐懂得了这个异常朴素的道理。也懒得去争论。有争论的时间，不如好好的编写代码，多看些技术书籍。以及熟悉自己的工具。</p>
<p>如果说，你现在问我到底是哪个 OS 好，我只能说：</p>
<blockquote>
<p>好的工匠懂得挑选合适的工具。而不是炫耀自己的工具。</p>
</blockquote>
<p>BTW : <strong>大约在 2015 年 12 月份有了第一台 MAC, 如今更加喜爱。</strong></p>
<p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Mac 快捷键和工具。</p>
<p>不定期更新。</p>
<a id="more"></a>

<h2 id="0x01-必备软件"><a href="#0x01-必备软件" class="headerlink" title="0x01. 必备软件"></a>0x01. 必备软件</h2><h3 id="1-1-常见应用"><a href="#1-1-常见应用" class="headerlink" title="1.1. 常见应用"></a>1.1. 常见应用</h3><p><strong>非技术流</strong></p>
<ul>
<li>启动器 Alfred 3</li>
<li>浏览器 Chrome Firefox</li>
<li>输入法 搜狗输入法</li>
<li>系统清理 AppCleaner</li>
<li>系统增强 Caffeine / PopClip / BetterZip / Amphetamine</li>
<li>手机管理工具 HandShaker / AirDroid</li>
<li>邮件客户端 Airmail 2</li>
<li>录屏截图 Annotate / Camtasia 2 /  Snagit / ScreenFlow</li>
<li>下载工具 Aria2GUI / 迅雷</li>
<li>影音处理 Adobe PhotoShop CC , Adobe PhotoShop , Adobe LightingRoom , Final Cut Pro</li>
<li>影音浏览 MPlayerX, QuickTime , IQIYI , NeteaseMusic , iina</li>
<li>远程协助 TeamViewer</li>
<li>办公软件 Wiznote , PDF Expert , Office（虚拟机内部）OmniFocus , OmniGraffle , EuDic , MacTex : Latex</li>
<li>云存储 iCloud , 百度云</li>
<li>手机管理 HandShaker</li>
</ul>
<p><strong>技术流</strong></p>
<ul>
<li>终端：iTerm2</li>
<li>GIS 相关 QGIS , PostgreSQL + PostGIS</li>
<li>IDE 选择 JetBrain 家的软件 PyCharm, IntellijIDEA</li>
<li>编辑器 MacVim （主力）, 配合 <a href="https://github.com/twocucao/c-vim">C-VIM</a> 作为日常编写文字的利器。</li>
<li>数据库 MySQL , PostgreSQL（主力） , Redis , MongoDB</li>
<li>数据管理 Navicat,Datagrip,RoboMongo,rdm</li>
<li>文档查看 Dash</li>
<li>网络工具 SS QT 不解释</li>
<li>网络抓包 Charles, Wireshark, Chrome</li>
<li>代码仓库 Github SourceTree</li>
<li>数据分析 Tableau</li>
<li>虚拟机 Vmware Fusion</li>
<li>抓包工具 Wireshark</li>
</ul>
<p><strong>mac 独有命令行</strong></p>
<ul>
<li>open</li>
<li>pbcopy</li>
<li>pbpaste</li>
<li>screencapture</li>
<li>launchctl</li>
<li>mdfind（还是 linux 的 find 好用）</li>
<li>sip （还是比较推荐 imagemagic)</li>
</ul>
<h3 id="1-2-Homebrew-和-iTerm2"><a href="#1-2-Homebrew-和-iTerm2" class="headerlink" title="1.2. Homebrew 和 iTerm2"></a>1.2. Homebrew 和 iTerm2</h3><p><a href="http://www.iterm2.com/">iterm2 下载</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># homebrew 安装</span></span><br><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>另起终端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># aerial 屏保</span></span><br><span class="line"><span class="comment"># https://github.com/JohnCoates/Aerial</span></span><br><span class="line">brew cask install aerial</span><br><span class="line"><span class="comment"># https://github.com/sindresorhus/quick-look-plugins</span></span><br><span class="line">brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzipql qlimagesize webpquicklook suspicious-package quicklookase qlvideo</span><br><span class="line"><span class="comment"># Install some other useful utilities like `sponge`.</span></span><br><span class="line">brew install moreutils</span><br><span class="line"><span class="comment"># Install GNU `find`, `locate`, `updatedb`, and `xargs`, `g`-prefixed.</span></span><br><span class="line">brew install findutils</span><br><span class="line"><span class="comment"># Install GNU `sed`, overwriting the built-in `sed`.</span></span><br><span class="line">brew install gnu-sed --with-default-names</span><br><span class="line"></span><br><span class="line">brew install bash zsh</span><br><span class="line">brew install wget --with-iri</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Python</span></span><br><span class="line">brew install python</span><br><span class="line">brew install python3</span><br><span class="line"></span><br><span class="line">brew tap bramstein/webfonttools</span><br><span class="line">brew install sfnt2woff</span><br><span class="line">brew install sfnt2woff-zopfli</span><br><span class="line">brew install woff2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install other useful binaries.</span></span><br><span class="line">brew install ack</span><br><span class="line">brew install dark-mode</span><br><span class="line"><span class="comment">#brew install exiv2</span></span><br><span class="line">brew install git</span><br><span class="line">brew install git-lfs</span><br><span class="line">brew install git-flow</span><br><span class="line">brew install git-extras</span><br><span class="line">brew install hub</span><br><span class="line">brew install imagemagick --with-webp</span><br><span class="line">brew install lua</span><br><span class="line">brew install lynx</span><br><span class="line">brew install p7zip</span><br><span class="line">brew install pigz</span><br><span class="line">brew install pv</span><br><span class="line">brew install rename</span><br><span class="line">brew install rhino</span><br><span class="line">brew install speedtest_cli</span><br><span class="line">brew install ssh-copy-id</span><br><span class="line">brew install tree</span><br><span class="line">brew install webkit2png</span><br><span class="line">brew install zopfli</span><br><span class="line">brew install pkg-config libffi</span><br><span class="line">brew install pandoc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lxml and Libxslt</span></span><br><span class="line">brew install libxml2</span><br><span class="line">brew install libxslt</span><br><span class="line">brew link libxml2 --force</span><br><span class="line">brew link libxslt --force</span><br><span class="line"></span><br><span class="line">brew cleanup</span><br><span class="line"><span class="comment"># 如果需要升级</span></span><br><span class="line">brew update &amp;&amp; brew upgrade --all &amp;&amp; brew cleanup &amp;&amp; brew prune</span><br></pre></td></tr></table></figure>

<p>有时候 /usr/local 的可能会存在权限问题，建议如果可能出现问题，则需要执行下面的命令修复权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chown -R $(whoami):admin /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>

<h2 id="0x02-开发者必备"><a href="#0x02-开发者必备" class="headerlink" title="0x02. 开发者必备"></a>0x02. 开发者必备</h2><h3 id="2-0-Shell"><a href="#2-0-Shell" class="headerlink" title="2.0. Shell"></a>2.0. Shell</h3><blockquote>
<p> 注意：MAC 使用的大多命令来自于 FreeBSD , 并不是来自 GNU , 所以很多命令会与常规的 linux 命令不太一样。<br> 所以，Shell 命令请在安装完 Gnu 的工具集之后，可以到我的文章 Shell CheatSheat 查看语法。</p>
</blockquote>
<p>关于 shell 脚本，请参考我的另一篇文章。</p>
<p><a href="/2015/04/18/ShellCheatSheet/">Shell CheatSheat</a></p>
<h3 id="2-1-Python"><a href="#2-1-Python" class="headerlink" title="2.1. Python"></a>2.1. Python</h3><blockquote>
<p>笔者虽然也接触过很多语言，都是粗浅一过，但无一精通，唯一可以稍微谈谈的就是 Python 语言。</p>
</blockquote>
<blockquote>
<p>当然，安装完毕自然是可以参考一下我的 Python 武器库啦 <a href="http://www.url.com/">Python 工程师的武器库</a></p>
</blockquote>
<h4 id="2-1-1-Python-安装"><a href="#2-1-1-Python-安装" class="headerlink" title="2.1.1. Python 安装"></a>2.1.1. Python 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv.git ~/.pyenv</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着另开终端</span></span><br><span class="line"><span class="comment"># 不喜写兼容代码，所有代码均向 3.5+ 靠拢</span></span><br><span class="line">v=3.5.2|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></span><br><span class="line">v=3.6.0|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></span><br><span class="line">v=2.7.11|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></span><br><span class="line"><span class="comment"># 可以先用迅雷把 官网的 Anaconda3-4.4.0-MacOSX-x86_64.sh 下载下来，然后</span></span><br><span class="line">mv Anaconda3-4.4.0-MacOSX-x86_64.sh ~/.pyenv/cache/ &amp;&amp; pyenv install anaconda3-4.4.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Global Python 为 2.7.11, 备注：尽量不要把 Py3 设置为全局，否则由于 Homebrew 本身有一些依赖是依赖于 Py2 的，这样容易出现一些奇怪的问题。</span></span><br><span class="line">pyenv global 2.7.11</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple requests</span><br><span class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></span><br><span class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">&quot;jedi&gt;=0.9.0&quot;</span> <span class="string">&quot;json-rpc&gt;=1.8.1&quot;</span> <span class="string">&quot;service_factory&gt;=0.1.5&quot;</span> flake8 pytest autoflake hy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建最常用 Py3 虚拟环境</span></span><br><span class="line">pyenv virtualenv 3.5.2 py3-daily</span><br><span class="line">pyenv activate py3-daily</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple requests</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple beatutifulsoup4</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple ipython[notebook]</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple jupyter</span><br><span class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></span><br><span class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">&quot;jedi&gt;=0.9.0&quot;</span> <span class="string">&quot;json-rpc&gt;=1.8.1&quot;</span> <span class="string">&quot;service_factory&gt;=0.1.5&quot;</span> flake8 pytest autoflake hy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Anaconda 的数据科学 AI 环境</span></span><br><span class="line">pyenv virtualenv anaconda3-4.4.0 py3-ai</span><br><span class="line">pyenv activate anaconda3-4.4.0/envs/py3-ai</span><br><span class="line">pyenv deactivate</span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-Python-环境的坑"><a href="#2-1-2-Python-环境的坑" class="headerlink" title="2.1.2 Python 环境的坑"></a>2.1.2 Python 环境的坑</h4><h5 id="Homebrew-的-Python-问题"><a href="#Homebrew-的-Python-问题" class="headerlink" title="Homebrew 的 Python 问题"></a>Homebrew 的 Python 问题</h5><p>如果本机安装了 Homebrew 如果后面使用 PyEnv 或者 Anaconda 设置当前环境为默认 Python 为 Python3（不建议这么搞）, 但是如果偏偏要把默认的 Python 版本换成 Python3, 会弹出一些 pythonpath 的问题，执行下面命令即可暂时屏蔽这个问题，但是后没有隐患则不清楚。<br>mv /usr/local/lib/python2.7/site-packages/sitecustomize.py /usr/local/lib/python2.7/site-packages/sitecustomize.py.back</p>
<h5 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h5><p>在 Python 中执行下面的代码的时候总是报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ip = socket.gethostbyname(socket.gethostname())</span><br><span class="line"><span class="comment"># socket.gaierror: [Errno 8] nodename nor servname provided, or not known</span></span><br></pre></td></tr></table></figure>

<p>最后发现是因为设置主机名没有设置好</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo scutil --<span class="built_in">set</span> ComputerName <span class="string">&quot;newname&quot;</span></span><br><span class="line">sudo scutil --<span class="built_in">set</span> LocalHostName <span class="string">&quot;newname&quot;</span></span><br><span class="line">sudo scutil --<span class="built_in">set</span> HostName <span class="string">&quot;newname&quot;</span></span><br><span class="line">dscacheutil -flushcache</span><br><span class="line"><span class="comment"># 然后重启电脑即可</span></span><br></pre></td></tr></table></figure>

<h2 id="0x03-高效率软件-amp-amp-专业软件"><a href="#0x03-高效率软件-amp-amp-专业软件" class="headerlink" title="0x03. 高效率软件 &amp;&amp; 专业软件"></a>0x03. 高效率软件 &amp;&amp; 专业软件</h2><h3 id="3-1-OmniFocus"><a href="#3-1-OmniFocus" class="headerlink" title="3.1. OmniFocus"></a>3.1. OmniFocus</h3><h3 id="3-2-OmniGraffle"><a href="#3-2-OmniGraffle" class="headerlink" title="3.2. OmniGraffle"></a>3.2. OmniGraffle</h3><h3 id="3-3-Final-Cut-Pro"><a href="#3-3-Final-Cut-Pro" class="headerlink" title="3.3. Final Cut Pro"></a>3.3. Final Cut Pro</h3><h3 id="3-4-Keynote"><a href="#3-4-Keynote" class="headerlink" title="3.4. Keynote"></a>3.4. Keynote</h3><h2 id="0xDD-参考链接"><a href="#0xDD-参考链接" class="headerlink" title="0xDD. 参考链接"></a>0xDD. 参考链接</h2><ul>
<li><a href="https://github.com/donnemartin/dev-setup">https://github.com/donnemartin/dev-setup</a></li>
</ul>
<h2 id="0xEE-扩展阅读"><a href="#0xEE-扩展阅读" class="headerlink" title="0xEE. 扩展阅读"></a>0xEE. 扩展阅读</h2><ul>
<li><a href="https://www.zhihu.com/question/30816866/answer/59415036">关于 Mac 我的回答</a></li>
<li><a href="https://www.zhihu.com/question/30816866/answer/59415036">关于 Ubuntu 我的回答</a></li>
<li><a href="https://www.zhihu.com/question/32129337/answer/59379401">关于 Win10 我的回答</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-06-28</strong> Python 环境 和 Homebrew 安装环境</li>
</ul>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>CheatSheet</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Cheatsheet</title>
    <url>/2016/09/12/MySQLCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 MySQL 相关命令。主要包含：</p>
<ul>
<li>MySQL Shell, 其实就是 SQL 命令。</li>
<li>MySQL 配套工具</li>
<li>Python API</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>

<h2 id="0x01-安装，配置，基本-shell-命令"><a href="#0x01-安装，配置，基本-shell-命令" class="headerlink" title="0x01 安装，配置，基本 shell 命令"></a>0x01 安装，配置，基本 shell 命令</h2><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><blockquote>
<p>UTF-8 , Please</p>
</blockquote>
<p>真的很讨厌那些用 GBK 的程序员啊！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意，下面的设置 MySQL 是无法保存 emoji 的 /</span></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">init-connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line">character-set-server = utf8</span><br></pre></td></tr></table></figure>

<p>然后在 mysql console 执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&quot;%character%&quot;</span>;show variables like <span class="string">&quot;%collation%&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>如下即可</p>
<h2 id="0x02-MySQL-配套工具"><a href="#0x02-MySQL-配套工具" class="headerlink" title="0x02 MySQL 配套工具"></a>0x02 MySQL 配套工具</h2><ul>
<li>JetBrain 的 Datagrip 作为 编写大段 SQL 语句的 IDE</li>
<li>通过网络或者 Dash 查看文档</li>
<li>强烈推荐 mycli 作为正常情况下的 MySQL 命令的替代品。</li>
<li>MySQL 官方自带工具</li>
</ul>
<p>只挑选几个重要的，常用的说一说。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 MYSQL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常规 mysql</span></span><br><span class="line">mysql -u username -p password</span><br><span class="line"><span class="comment">## 命令的用户名和密码最好与命令合在一起</span></span><br><span class="line">mysqlshow -uroot -psomepass some_db;</span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">mysql -u username -p password &lt; filename</span><br><span class="line"><span class="comment"># 优雅的导入数据，可以查看进度条的 Hacks</span></span><br><span class="line">pv -i 1 -p -t -e /Users/twocucao/Codes/update_new_date.sql | mysql -uadmin -p123456 -h 192.168.2.254 --port=3306 some_db</span><br><span class="line"><span class="comment"># 导出数据</span></span><br><span class="line">mysqldump -u username -p password database [tables] &gt; filename</span><br><span class="line">mysqldump database table_bame --<span class="built_in">where</span>=<span class="string">&quot;date_column BETWEEN &#x27;2012-07-01 00:00:00&#x27; and &#x27;2012-12-01 00:00:00&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ref : http://dev.mysql.com/doc/refman/5.7/en/mysqldump.html#option_mysqldump_where</span></span><br></pre></td></tr></table></figure>

<h2 id="0x03-MySQL-常用代码"><a href="#0x03-MySQL-常用代码" class="headerlink" title="0x03 MySQL 常用代码"></a>0x03 MySQL 常用代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES;</span><br><span class="line">CREATE DATABASE database;</span><br><span class="line">USE database;</span><br><span class="line">SHOW TABLES;</span><br><span class="line">DESCRIBE table;</span><br><span class="line">SHOW COLUMN FROM table;</span><br><span class="line">DROP DATEBASE;</span><br></pre></td></tr></table></figure>

<h2 id="0x04-常用代码片段"><a href="#0x04-常用代码片段" class="headerlink" title="0x04 常用代码片段"></a>0x04 常用代码片段</h2><h3 id="1-数据清洗常用脚本"><a href="#1-数据清洗常用脚本" class="headerlink" title="1. 数据清洗常用脚本"></a>1. 数据清洗常用脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 少量去重</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> everyday_info_temp <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  everyday_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span>,<span class="built_in">date</span>,numbers;</span><br><span class="line"><span class="comment">-- 大量去重</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> everyday_info_temp <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  everyday_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span>,<span class="built_in">date</span>,numbers <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p><a href="http://stackoverflow.com/questions/16568228/how-to-transpose-mysql-table-rows-into-columns">http://stackoverflow.com/questions/16568228/how-to-transpose-mysql-table-rows-into-columns</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT @max :&#x3D; MAX(ID)+ 1 FROM ABC;</span><br><span class="line"></span><br><span class="line">PREPARE stmt FROM &#39;ALTER TABLE ABC AUTO_INCREMENT &#x3D; ?&#39;;</span><br><span class="line">EXECUTE stmt USING @max;</span><br><span class="line"></span><br><span class="line">DEALLOCATE PREPARE stmt;</span><br></pre></td></tr></table></figure>

<p>mysql&gt; delete from shophtml;<br>Query OK, 117141 rows affected (4 min 2.92 sec)<br>TRUNCATE shophtml;</p>
<h3 id="2-用户管理常用脚本"><a href="#2-用户管理常用脚本" class="headerlink" title="2. 用户管理常用脚本"></a>2. 用户管理常用脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT User FROM mysql.user;</span><br></pre></td></tr></table></figure>

<h3 id="3-备份迁移常用脚本"><a href="#3-备份迁移常用脚本" class="headerlink" title="3. 备份迁移常用脚本"></a>3. 备份迁移常用脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">TIMESTAMP&#x3D;$(date +&quot;%F&quot;)</span><br><span class="line">BACKUP_DIR&#x3D;&quot;&#x2F;mnt&#x2F;$TIMESTAMP&quot;</span><br><span class="line">MYSQL_USER&#x3D;&quot;root&quot;</span><br><span class="line">MYSQL&#x3D;&#x2F;usr&#x2F;bin&#x2F;mysql</span><br><span class="line">MYSQL_PASSWORD&#x3D;&quot;password&quot;</span><br><span class="line">MYSQLDUMP&#x3D;&#x2F;usr&#x2F;bin&#x2F;mysqldump</span><br><span class="line">DATABASE&#x3D;&quot;cyjoycity&quot;</span><br><span class="line"></span><br><span class="line">mkdir -p &quot;$BACKUP_DIR&#x2F;mysql&quot;</span><br><span class="line"></span><br><span class="line">for t in $($MYSQL -NBA -u $MYSQL_USER -p$MYSQL_PASSWORD -D $DATABASE -e &#39;show tables&#39;)</span><br><span class="line">do</span><br><span class="line">    echo &quot;DUMPING TABLE: $DB.$t&quot;</span><br><span class="line">    $MYSQLDUMP --force --opt --user&#x3D;$MYSQL_USER -p$MYSQL_PASSWORD $DATABASE $t | gzip &gt; &quot;$BACKUP_DIR&#x2F;mysql&#x2F;$t.sql.gz&quot;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-性能优化常用脚本"><a href="#4-性能优化常用脚本" class="headerlink" title="4. 性能优化常用脚本"></a>4. 性能优化常用脚本</h3><p>SHOW FULL PROCESSLIST;</p>
<h3 id="6-远程连接"><a href="#6-远程连接" class="headerlink" title="6. 远程连接"></a>6. 远程连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;mysql&#x2F;my.cnf</span><br><span class="line"></span><br><span class="line"># bind-address &#x3D; 127.0.0.1</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<h3 id="5-其他脚本"><a href="#5-其他脚本" class="headerlink" title="5. 其他脚本"></a>5. 其他脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 6. 随机选择 10 组记录</span></span><br><span class="line"><span class="comment">-- 慢速</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Table_Name <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">RAND</span>() <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 快速</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span></span><br><span class="line">  <span class="keyword">FROM</span> random <span class="keyword">AS</span> r1 <span class="keyword">JOIN</span></span><br><span class="line">       (<span class="keyword">SELECT</span> <span class="keyword">CEIL</span>(<span class="keyword">RAND</span>() *</span><br><span class="line">                     (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">id</span>)</span><br><span class="line">                        <span class="keyword">FROM</span> random)) <span class="keyword">AS</span> <span class="keyword">id</span>)</span><br><span class="line">        <span class="keyword">AS</span> r2</span><br><span class="line"> <span class="keyword">WHERE</span> r1.id &gt;= r2.id</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> r1.id <span class="keyword">ASC</span></span><br><span class="line"> <span class="keyword">LIMIT</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 1. 查询时间</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_format</span>(create_time, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">as</span> <span class="keyword">day</span> <span class="keyword">from</span> table_name</span><br><span class="line"><span class="keyword">select</span> from_unixtime(create_time, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">as</span> <span class="keyword">day</span> <span class="keyword">from</span> table_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. CASE WHEN 案例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.1 返回同一列多个结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.2 行列值颠倒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 替换某字段内容</span></span><br><span class="line"><span class="keyword">update</span> table_name <span class="keyword">set</span> <span class="keyword">content</span> = <span class="keyword">REPLACE</span>(<span class="keyword">content</span>, <span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>)  <span class="keyword">where</span> (<span class="keyword">content</span> <span class="keyword">like</span> <span class="string">&#x27;%aaa%&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 获取表中某字段包含某字符串的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`表名`</span> <span class="keyword">WHERE</span> <span class="keyword">LOCATE</span>(<span class="string">&#x27;关键字&#x27;</span>, 字段名）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 字符串处理</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>（字段名，<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">FROM</span> 表名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 求解数字的连续范围</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(<span class="built_in">number</span>) start_range,<span class="keyword">max</span>(<span class="built_in">number</span>) end_range</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">number</span>,rn,<span class="built_in">number</span>-rn diff <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> <span class="built_in">number</span>,@<span class="built_in">number</span>:=@<span class="built_in">number</span>+<span class="number">1</span> rn <span class="keyword">from</span> test_number,(<span class="keyword">select</span> @<span class="built_in">number</span>:=<span class="number">0</span>) <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">    ) b</span><br><span class="line">) c <span class="keyword">group</span> <span class="keyword">by</span> diff;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0x05-性能优化切入点"><a href="#0x05-性能优化切入点" class="headerlink" title="0x05 性能优化切入点"></a>0x05 性能优化切入点</h2><p>应用的切入点也比较简单和暴力：</p>
<ol>
<li>优化应用层面的查询。</li>
<li>优化数据库的 SQL 查询。</li>
<li>优化数据库的存储结构。</li>
<li>优化单个数据库服务器的性能。</li>
<li>遵循『机多运算大』的原则，上几台机器。</li>
<li>更好的机器，即加内存条，上好的 CPU。</li>
</ol>
<p>优化前三点，则需要理解取数据的客户端从发送 SQL 语句到接受数据之间都发生了什么？流程如下：</p>
<ol>
<li>开启连接</li>
<li>发送查询给服务器</li>
<li>分析查询</li>
<li>执行查询</li>
<li>传输数据</li>
<li>关闭连接</li>
</ol>
<h3 id="优化应用层面的查询"><a href="#优化应用层面的查询" class="headerlink" title="优化应用层面的查询"></a>优化应用层面的查询</h3><p>在同样工作量的情况下不断的减少数据库的连接，将多个动作放在一起使用 TRANSACTION 可以显著提高速度。</p>
<ol>
<li>对于 OLTP 类型的数据库设计的数据库，一些耗时查询往往是可以在应用层面查询进行优化的，比如在手写代码应用级缓存，借助外部组件 (redis) 应用内缓存。</li>
<li>对于一些有性能要求的场景，不要使用 select * from xxx 这种查询，服务器到客户端传输也是需要时间的，而是要选择需要的字段。</li>
<li>如果有必要，不要在循环内部进行数据库查询，而是直接取出来放在内存中进行运算。学过的算法与数据结构用起来！!</li>
</ol>
<h3 id="优化数据库的-SQL-查询"><a href="#优化数据库的-SQL-查询" class="headerlink" title="优化数据库的 SQL 查询"></a>优化数据库的 SQL 查询</h3><p>如同前文所见，到了 SQL 命令这层切入点能够优化的地方只有步骤 4.</p>
<p>对于查找，效率取决于：</p>
<ol>
<li>取记录数量</li>
<li>搜索到这些记录的时间。</li>
</ol>
<p>对于插入，执行查询则插入记录和更新索引两个部分，也是插入的瓶颈所在：</p>
<ol>
<li>插入记录 速度取决于记录数量，记录大小</li>
<li>更新索引 速度取决于索引数量。</li>
</ol>
<p>对于更新，执行查询则有查找，更新记录和更新索引两个部分，也是更新的瓶颈所在：</p>
<ol>
<li>查找 需要参考查找</li>
<li>更新记录 速度取决于记录数量，记录大小</li>
<li>更新索引 速度取决于更新索引字段的数量。</li>
</ol>
<p>对于删除，执行查询则有查找，删除记录和删除索引两个部分，也是删除的瓶颈所在：</p>
<ol>
<li>查找 需要参考查找</li>
<li>删除记录 速度取决于记录数量，记录大小</li>
<li>更新索引 速度取决于更新索引字段的数量。</li>
</ol>
<h4 id="查询的优化"><a href="#查询的优化" class="headerlink" title="查询的优化"></a>查询的优化</h4><h4 id="索引的代价"><a href="#索引的代价" class="headerlink" title="索引的代价"></a>索引的代价</h4><blockquote>
<p>在计算机这个神奇的世界里面，没有一个算法与数据结构的挑选是没有代价的。便于查询，则不便于插入更新。</p>
</blockquote>
<p>有的人把索引比作字典。说字典的索引页面就好像是数据表中的索引。</p>
<p>这个比方很贴切，可以用在索引的比方上，也可以用在索引的代价上。</p>
<ul>
<li>一个没有索引的页面，即是一个只有页码，编号的字典。当我们查询一个新字的时候，只能从第一页翻到结尾，效率很低。</li>
<li>一个有一个索引的页面，即是一个有页码，编号，拼音索引的字典。当我们查询一个新字的时候，先查询索引，然后从索引查页码，于是很快找到字。当我们<strong>增加 / 删除 / 更新</strong>一个字之后，还需要更新拼音索引。</li>
<li>一个有多个索引的页面，即是一个有页码，编号，拼音索引和部首索引以及其他索引的字典。当我们<strong>增加 / 删除 / 更新</strong>一个字之后，还需要更新拼音索引，部首索引等等索引。</li>
</ul>
<blockquote>
<p><strong>计算机世界就是这样，没有完美的算法，也没有完美的模型。</strong></p>
</blockquote>
<h3 id="数据存储结构"><a href="#数据存储结构" class="headerlink" title="数据存储结构"></a>数据存储结构</h3><h3 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h3><p>留空，这个可能比较接近运维或者 DBA 的工作</p>
<h3 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h3><p>留空，这个可能比较接近运维或者 DBA 的工作</p>
<h2 id="0x06-常见问题"><a href="#0x06-常见问题" class="headerlink" title="0x06 常见问题"></a>0x06 常见问题</h2><h3 id="密码忘了怎么办？"><a href="#密码忘了怎么办？" class="headerlink" title="密码忘了怎么办？"></a>密码忘了怎么办？</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysql stop</span><br><span class="line">mysqld_safe --skip-grant-tables &amp;</span><br><span class="line"><span class="comment"># 在另一个终端 输入 mysql 进入终端</span></span><br><span class="line">在另一端执行 SQL 命令</span><br><span class="line">UPDATE mysql.user SET password=PASSWORD(<span class="string">&#x27;nouveau&#x27;</span>) WHERE user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment">## Kill mysqld_safe from the terminal, using Control + \</span></span><br><span class="line">/etc/init.d/mysql start</span><br></pre></td></tr></table></figure>

<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><p>关于 SQL 与数据库的有趣解释</p>
<ol>
<li><a href="http://stackoverflow.com/questions/38549/what-is-the-difference-between-inner-join-and-outer-join">Inner Join 和 Outer Join</a></li>
<li><a href="http://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php">如何防止 SQL 注入</a></li>
<li><a href="http://stackoverflow.com/questions/1108/how-does-database-indexing-work">索引是怎么工作的</a></li>
<li><a href="https://gold.xitu.io/post/584e7b298d6d81005456eb53">Mysql 常用 SQL 语句集锦（本文部分 SQL 语句取自此博文）</a></li>
</ol>
<p><a href="http://stackoverflow.com/questions/194852/concatenate-many-rows-into-a-single-text-string">http://stackoverflow.com/questions/194852/concatenate-many-rows-into-a-single-text-string</a></p>
]]></content>
      <categories>
        <category>后台组件</category>
      </categories>
      <tags>
        <tag>Cheatsheet</tag>
        <tag>MySQL</tag>
        <tag>关系型数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Python 监控 Mac 一天的运行（下）</title>
    <url>/2016/07/15/MacPythonMonitorPart2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果有不清楚本文介绍的是什么的？请移步<br>（使用 Python 监控 Mac 一天的运行 - 上）[<a href="http://www.jianshu.com/p/9ebb527e93a0]">http://www.jianshu.com/p/9ebb527e93a0]</a></p>
<p>任务回顾一下：</p>
<blockquote>
<p>隔一段时间使用 Python 脚本，统计当前电脑的运行情况，CPU, 内存，硬盘，网络使用状况，然后在每天的下午六点通过 Email 把统计情况汇总，并且必须要有监控图，并通过 Email 发送给我的邮箱。</p>
</blockquote>
<p>好了，这篇文章，我们讲解的是具体的 Python 脚本完成这些任务。因为代码可能稍微复杂一点点，老规矩，讲解思路和必要注意点，其他的请参阅代码。</p>
<h2 id="目标确定与任务分解"><a href="#目标确定与任务分解" class="headerlink" title="目标确定与任务分解"></a>目标确定与任务分解</h2><p>目标就如同上面两段所写。</p>
<p>那么把任务分解一下：</p>
<ul>
<li>首先，你得知道如何获取计算机的运行信息。</li>
<li>其次，你得知道如何把这些数据保存下来（不保存怎么分析）.</li>
<li>接着，你得知道如何分析并制图。</li>
<li>最后，你得知道如何发送邮件。</li>
</ul>
<p>好了，本文的目录也就应运而生了。</p>
<ul>
<li>前言</li>
<li>目标确定和任务分解</li>
<li>Python 获取计算机运行信息</li>
<li>RRDTool 保存计算机运行信息<ul>
<li>为什么是 RRDTool 而不是 sqlite</li>
<li>RRD 怎么保存信息</li>
<li>RRD 怎么保存计算机运行信息</li>
</ul>
</li>
<li>RRDTool 制图功能</li>
<li>汇总并发送 Email</li>
<li>思考与不足</li>
<li>代码</li>
</ul>
<h2 id="Python-获取计算机运行信息"><a href="#Python-获取计算机运行信息" class="headerlink" title="Python 获取计算机运行信息"></a>Python 获取计算机运行信息</h2><p>我们知道有很多 shell 命令可以获取当前时间点，或者当前时间段的计算机各种情况，但是呢，我们只需要某个时间点的计算机的运行情况，Python 中有一个比较好的神器叫做 psutil, 果断安装之。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install psutil</span><br></pre></td></tr></table></figure>

<p>运行如下脚本，你就可以看出来你的电脑运行的当前状况了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> rrdtool</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen,URLError</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">now = <span class="built_in">str</span>(time.strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>))</span><br><span class="line">today = <span class="built_in">str</span>(time.strftime(<span class="string">&quot;%Y%m%d&quot;</span>))</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s - \</span></span><br><span class="line"><span class="string">[%(process)d]%(filename)s:%(lineno)d - %(levelname)s: %(message)s&quot;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%I:%S&#x27;</span>,</span><br><span class="line">    filename=os.path.expanduser(<span class="string">&#x27;~/OhMyCode/PyTools/logs/&#x27;</span>+today+<span class="string">&#x27;.log&#x27;</span>),</span><br><span class="line">    level=logging.INFO</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">&#x27;monitor_my_mac&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.version_info &lt; (<span class="number">3</span>,):</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;at least Python3.0 is required!!&quot;</span>)</span><br><span class="line">APP_DESC = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                ---- A Terminal Tools For Monitoring Mac Daily</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author Micheal Gardner (twocucao@gmail.com)</span></span><br><span class="line"><span class="string">                                last_update 2016-02-28</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linux_distribution</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> platform.linux_distribution()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;N/A&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_connectivity</span>(<span class="params">reference</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查是否连接到网络&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        urlopen(reference, timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> URLError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secs2str</span>(<span class="params">secs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 将秒转化为字符串 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(secs) &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,time.localtime(secs)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_all_info</span>():</span></span><br><span class="line">    network_connectivity = check_connectivity(<span class="string">&quot;http://119.75.218.70&quot;</span>)</span><br><span class="line"></span><br><span class="line">    public_ip_addr = urlopen(<span class="string">&#x27;http://ip.42.pl/raw&#x27;</span>).read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#=============&gt;操作系统信息&lt;==============#</span></span><br><span class="line">    print(<span class="string">&quot;========&gt;MACHINE&lt;==========&quot;</span>)</span><br><span class="line">    print(getpass.getuser())</span><br><span class="line">    print(platform.uname())</span><br><span class="line">    <span class="comment"># print(os.uname())</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;&quot;&quot;Python version: %s</span></span><br><span class="line"><span class="string">    dist: %s</span></span><br><span class="line"><span class="string">    linux_distribution: %s</span></span><br><span class="line"><span class="string">    system: %s</span></span><br><span class="line"><span class="string">    machine: %s</span></span><br><span class="line"><span class="string">    platform: %s</span></span><br><span class="line"><span class="string">    uname: %s</span></span><br><span class="line"><span class="string">    version: %s</span></span><br><span class="line"><span class="string">    mac_ver: %s</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> % (</span><br><span class="line">    sys.version.split(<span class="string">&#x27;\n&#x27;</span>),</span><br><span class="line">    <span class="built_in">str</span>(platform.dist()),</span><br><span class="line">    linux_distribution(),</span><br><span class="line">    platform.system(),</span><br><span class="line">    platform.machine(),</span><br><span class="line">    platform.platform(),</span><br><span class="line">    platform.uname(),</span><br><span class="line">    platform.version(),</span><br><span class="line">    platform.mac_ver(),</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    os_boot_time = psutil.boot_time()</span><br><span class="line">    print(<span class="string">&quot;Boottime: &quot;</span> + <span class="built_in">str</span>(os_boot_time) +<span class="string">&quot;-&gt;&quot;</span>+secs2str(os_boot_time)  )</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;========&gt;CPU&lt;==========&quot;</span>)</span><br><span class="line">    print(psutil.cpu_times())</span><br><span class="line">    print(psutil.cpu_count())</span><br><span class="line">    print(psutil.cpu_count(logical=<span class="literal">False</span>))</span><br><span class="line">    print(psutil.cpu_times_percent())</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;========&gt;MEM&lt;==========&quot;</span>)</span><br><span class="line">    print(psutil.virtual_memory())</span><br><span class="line">    print(psutil.swap_memory())</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;========&gt;DISK&lt;==========&quot;</span>)</span><br><span class="line">    print(psutil.disk_partitions())</span><br><span class="line">    print(psutil.disk_usage(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">    print(psutil.disk_io_counters())</span><br><span class="line">    print(psutil.disk_io_counters(perdisk=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;========&gt;NET&lt;==========&quot;</span>)</span><br><span class="line">    print(psutil.net_io_counters())</span><br><span class="line">    print(psutil.net_io_counters(pernic=<span class="literal">True</span>))</span><br><span class="line">    print(psutil.users())</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;hostname:&quot;</span> + socket.gethostname())</span><br><span class="line">    print(<span class="string">&quot;internal ip address: &quot;</span> + socket.gethostbyname(socket.gethostname()))</span><br><span class="line">    print(<span class="string">&quot;connected to internet?: &quot;</span> + <span class="built_in">str</span>(network_connectivity))</span><br><span class="line">    print(<span class="string">&quot;public ip: &quot;</span> + public_ip_addr )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(APP_DESC)</span><br><span class="line">    fetch_all_info()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>好的，下面我就想把这些数据保存下来。</p>
<h2 id="RRDTool-保存计算机运行信息"><a href="#RRDTool-保存计算机运行信息" class="headerlink" title="RRDTool 保存计算机运行信息"></a>RRDTool 保存计算机运行信息</h2><p>对于 RRDTool, 引自 RRDTool 的官网</p>
<blockquote>
<p>RRDtool is the OpenSource industry standard, high performance data logging and graphing system for time series data. RRDtool can be easily integrated in shell scripts, perl, python, ruby, lua or tcl applications.</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-b79e26953467d4a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="stream-pop.png"></p>
<blockquote>
<p><strong>注意：</strong>    如果你看不懂下面关于 RRDTool 的相关内容，请立即反复参考下面的链接，大致留下 rrd 的印象。注意，<strong>是反复，是反复，是反复</strong>, 重要的事情听说要说三遍的。</p>
</blockquote>
<p><a href="http://oss.oetiker.ch/rrdtool/tut/rrdtutorial.en.html">http://oss.oetiker.ch/rrdtool/tut/rrdtutorial.en.html</a></p>
<p>wait,wait,don’t tell me, 你怎么使用这个什么 RRDTool, 这又是什么东西？既然你一天只存储一点点的东西，为什么不使用 sqlite?</p>
<h3 id="为什么是-RRDTool-而不是-sqlite"><a href="#为什么是-RRDTool-而不是-sqlite" class="headerlink" title="为什么是 RRDTool 而不是 sqlite"></a>为什么是 RRDTool 而不是 sqlite</h3><p>答案很简单，因为我们采用的是监控，采用 sqlite 不是说不可以，只是 sqlite 在监控领域不是很专业。那为什么不够专业呢？</p>
<blockquote>
<p>因为在这个场景下，仅仅有存储数据的功能是不够的。</p>
</blockquote>
<blockquote>
<p>还需要根据监控的场景，进行各种绘图功能。</p>
</blockquote>
<ul>
<li>如果使用 sqlite, 还要安装各种 python 绘图，运算库 (seaborn,numpy,pandas 等）进行统计绘图，那样就不够轻量级了。</li>
<li>而 rrdtool 作为运维监控的常用工具，则成为首选数据库。</li>
</ul>
<h3 id="RRD-怎么保存信息"><a href="#RRD-怎么保存信息" class="headerlink" title="RRD 怎么保存信息"></a>RRD 怎么保存信息</h3><p>既然，这是一种叫做数据库的东西，那么，最好的学习方式就是和在实战中练习并且和之前学过的同类型数据进行对比。</p>
<p>那好，我们要回想一下，在学习过的关系型数据库里面，我们是怎么进行数据的怎删改查的。</p>
<p>首先，对于关系型数据库，DBA 创建数据库并指派给某些权限用户，接着由 DB 用户创建表，表中需要各种数据的定义数据类型，最后插入数据，并且进行大量的 curd.</p>
<p>在 sqlite 这种依靠单个文件作为存储介质的关系型数据库，则是由 DB 用户创建表，表中需要各种数据的定义数据类型，最后依赖 SQL 语句插入数据，并且进行大量的 curd.（注：没有谈到事务不代表事务不重要）</p>
<p>rrdtool 也是这个道理。它也是依靠单文件作为存储介质的一种 rrd 数据库的实现。先看下面的实例：</p>
<p>这个实例来自于官网的 tutorial : <a href="http://oss.oetiker.ch/rrdtool/tut/rrdtutorial.en.html">http://oss.oetiker.ch/rrdtool/tut/rrdtutorial.en.html</a></p>
<p>仔细阅读官方教程，我们大致可以得出以下结论。</p>
<p>对于创建数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rrdtool create test.rrd             \</span><br><span class="line">        --start 920804400          \</span><br><span class="line">        DS:speed:COUNTER:600:0:U   \</span><br><span class="line">        RRA:AVERAGE:0.5:1:24       \</span><br><span class="line">        RRA:AVERAGE:0.5:6:10</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个数据库文件，文件名为 test,</li>
<li>开始时间为 unix 时间戳 920804400 ,</li>
<li>存储的行车速度（额，其实这里我觉得用行车路程表示比较好）</li>
<li>用两个 rra 用来保存”当保存行车路程的时候，经过计算的值”.</li>
<li>一个 databese 是一个 rrd 文件，一个 rrd 文件中存储多个 rra（类似于关系型数据库中，一个数据库里面有多张表）, 但是这里的”表”是用来存储不同的时间间隔的数据，所有的数据来源由创建数据库的时候指定的，(rr 代表 round robin,a 代表 achive)</li>
<li>第一个 RRA 存储的是平均值（也可以存储 MAX 和 MIN),CDP 中的 PDP 超过一半的时候，则 CDP 标记为 UNKNOWNA（这里咱默认 0.5 就好）, 每隔 1 X 300 秒的时候，存一次平均值，存 24 次。</li>
</ul>
<p>对于更新数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rrdtool update test.rrd 920804700:12345 920805000:12357 920805300:12363</span><br><span class="line">rrdtool update test.rrd 920805600:12363 920805900:12363 920806200:12373</span><br><span class="line">rrdtool update test.rrd 920806500:12383 920806800:12393 920807100:12399</span><br><span class="line">rrdtool update test.rrd 920807400:12405 920807700:12411 920808000:12415</span><br><span class="line">rrdtool update test.rrd 920808300:12420 920808600:12422 920808900:12423</span><br></pre></td></tr></table></figure>
<p>你可能有疑惑：官网里面的 speed 指的不是速度么，怎么会用来代表路程.（回顾一下：路程 = 时间 X 速度）, 官网的教程插入数据的时候，使用的是某个时间点已经行驶的路程。说实话，我也觉得很疑惑。<br>请注意：它更新的数据都是累加的 (COUNTOR), 也就是说，</p>
<p>对于绘图：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rrdtool graph speed.png                                 \</span><br><span class="line">    --start 920804400 --end 920808000               \</span><br><span class="line">    DEF:myspeed=test.rrd:speed:AVERAGE              \</span><br><span class="line">    LINE2:myspeed<span class="comment">#FF0000</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rrdtool graph speed2.png                           \</span><br><span class="line">    --start 920804400 --end 920808000               \</span><br><span class="line">    --vertical-label m/s                            \</span><br><span class="line">    DEF:myspeed=test.rrd:speed:AVERAGE              \</span><br><span class="line">    CDEF:realspeed=myspeed,1000,\*                  \</span><br><span class="line">    LINE2:realspeed<span class="comment">#FF0000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rrdtool graph speed3.png                             \</span><br><span class="line">    --start 920804400 --end 920808000               \</span><br><span class="line">    --vertical-label km/h                           \</span><br><span class="line">    DEF:myspeed=test.rrd:speed:AVERAGE              \</span><br><span class="line">    <span class="string">&quot;CDEF:kmh=myspeed,3600,*&quot;</span>                       \</span><br><span class="line">    CDEF:fast=kmh,100,GT,kmh,0,IF                   \</span><br><span class="line">    CDEF:good=kmh,100,GT,0,kmh,IF                   \</span><br><span class="line">    HRULE:100<span class="comment">#0000FF:&quot;Maximum allowed&quot;              \</span></span><br><span class="line">    AREA:good<span class="comment">#00FF00:&quot;Good speed&quot;                   \</span></span><br><span class="line">    AREA:fast<span class="comment">#FF0000:&quot;Too fast&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rrdtool graph speed4.png                           \</span><br><span class="line">      --start 920804400 --end 920808000               \</span><br><span class="line">      --vertical-label km/h                           \</span><br><span class="line">      DEF:myspeed=test.rrd:speed:AVERAGE              \</span><br><span class="line">      CDEF:nonans=myspeed,UN,0,myspeed,IF             \</span><br><span class="line">      CDEF:kmh=nonans,3600,*                          \</span><br><span class="line">      CDEF:fast=kmh,100,GT,100,0,IF                   \</span><br><span class="line">      CDEF:over=kmh,100,GT,kmh,100,-,0,IF             \</span><br><span class="line">      CDEF:good=kmh,100,GT,0,kmh,IF                   \</span><br><span class="line">      HRULE:100<span class="comment">#0000FF:&quot;Maximum allowed&quot;              \</span></span><br><span class="line">      AREA:good<span class="comment">#00FF00:&quot;Good speed&quot;                   \</span></span><br><span class="line">      AREA:fast<span class="comment">#550000:&quot;Too fast&quot;                     \</span></span><br><span class="line">      STACK:over<span class="comment">#FF0000:&quot;Over speed&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-e7979c928d1bf4ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="speed.png"><br><img src="http://upload-images.jianshu.io/upload_images/52890-92c75ac53eedd2bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="speed2.png"><br><img src="http://upload-images.jianshu.io/upload_images/52890-061e0e0c91521d9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="speed3.png"><br><img src="http://upload-images.jianshu.io/upload_images/52890-59100ed39a3b8588.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="speed4.png"></p>
<h3 id="RRD-怎么保存计算机运行信息"><a href="#RRD-怎么保存计算机运行信息" class="headerlink" title="RRD 怎么保存计算机运行信息"></a>RRD 怎么保存计算机运行信息</h3><p>在这里，仅仅使用带宽的统计作为演示案例（案例来自使用 Python 自动化运维这本书）.</p>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><h4 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h4><h4 id="RRDTool-制图"><a href="#RRDTool-制图" class="headerlink" title="RRDTool 制图"></a>RRDTool 制图</h4><h2 id="汇总并发送-Email"><a href="#汇总并发送-Email" class="headerlink" title="汇总并发送 Email"></a>汇总并发送 Email</h2><h2 id="思考与不足"><a href="#思考与不足" class="headerlink" title="思考与不足"></a>思考与不足</h2><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码地址为：</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/yorkoliu/pyauto/blob/master/%E7%AC%AC%E4%B8%89%E7%AB%A0/rrdtool/graph.py">https://github.com/yorkoliu/pyauto/blob/master/%E7%AC%AC%E4%B8%89%E7%AB%A0/rrdtool/graph.py</a></p>
<p><a href="http://stackoverflow.com/questions/21784641/installation-issue-with-matplotlib-python">http://stackoverflow.com/questions/21784641/installation-issue-with-matplotlib-python</a></p>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-03-14</strong> 本文已经彻底烂尾了，哈哈哈</li>
</ul>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>效率</tag>
        <tag>小玩具</tag>
        <tag>编程工具</tag>
      </tags>
  </entry>
  <entry>
    <title>IPython Notebook 引入 ECharts 做可视化</title>
    <url>/2016/09/20/IPynb%E5%92%8CECharts/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Python 的开发生态圈有相当多的好用的数据分析挖掘工具。Pandas,Numpy,Scikit-Learn 等等。</p>
<p>在进行数据分析挖掘的方面，我们选用 IPython Notebook 对数据进行前期的探索和挖掘。以及内部的可视化交流。</p>
<p>也需要经常新的进行一些可视化来使得探索过程更加的顺利。面对海量的数据可视化，也依照目的使用不同的工具。</p>
<ul>
<li>对于后台开发 / 数据挖掘 / 爬虫工程师而言，内部沟通的过程中注重信息交流沟通的快捷和准确，而不需要考虑可视化的美观程度，所以使用 IPython Notebook 配上 Matplotlib 或者是 Seaborn 进行可视化。</li>
<li>与其他非开发的技术人员交流沟通的时候，这个时候优美的图表就成为了重中之重。</li>
</ul>
<blockquote>
<p>可是 Seaborn Matplotlib 这些库画出来的图，如同那些其貌不扬的高手，包含大量信息，美中不足的就是<strong>不美</strong>。那可不可以使用更加漂亮的图来可视化呢？</p>
</blockquote>
<p>有，ECharts<a href="http://echarts.baidu.com/examples.html">案例地址戳这里</a></p>
<blockquote>
<p>想拥有 IPython Notebook 的优点上，还能够最大化 IPython Notebook 的美观程度，这就是我们想在 IPython Notebook 中引入 ECharts 作为可视化的初衷。</p>
</blockquote>
<blockquote>
<p>如果你使用过 IPython Notebook，细心的你一定大致了解，核心困难点在于如何在 IPython Notebook 中引入 ECharts.</p>
</blockquote>
<p>今天我们使用 IPython NoteBook 来演示一个简单的 ECharts 饼图案例。本文的数据来自大众点评闵行区部分美食店铺。</p>
<h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><p>IPython 中，我们知道，可以通过 IPython.display 导入 HTML.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> HTML</span><br><span class="line">HTML(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;div&gt;这是一小块 HTML&lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>执行就 IPython Notebook 中看到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;这是一小块 HTML&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/52890-e7646baa6145766b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="显示 HTML"></p>
<p>但问题来了，我们知道，在通常的情况下，是不能动态引入 JS 脚本的。因此我们在开发 HTML 静态页面的时候，往往脚本都是在 Head 或者 Body 结束标签之前就写死了。如果要在 IPython 中增加 ECharts, 是不是需要修改一些配置文件，让 IPython Notebook 在 Header 部分引入 ECharts 脚本呢？</p>
<p>答案是<strong>不需要</strong>.</p>
<blockquote>
<p>为何？因为 IPython Notebook 本身自带一个 Js 模块，叫做 RequireJS. 通过这个模块<strong>可以动态引入并执行 JS.</strong></p>
</blockquote>
<p>具体原理不详细介绍，但是这个模块为 IPython Notebook 动态引入其他 JS 框架和代码带来了无限的可能性。注意，再次强调，这个模块可以帮助我们<strong>可以动态引入并执行 JS.</strong></p>
<p>于是通过下面的代码，我们就轻松的将 ECharts 引入到 IPython Notebook 中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chart_header_html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;div id=&quot;chart&quot; style=&quot;width:800px; height:600px;&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    require.config(&#123;</span></span><br><span class="line"><span class="string">         paths:&#123;</span></span><br><span class="line"><span class="string">            echarts: &#x27;//cdn.bootcss.com/echarts/3.2.3/echarts.min&#x27;,</span></span><br><span class="line"><span class="string">         &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    require([&#x27;echarts&#x27;],function(ec)&#123;</span></span><br><span class="line"><span class="string">var myChart = ec.init(document.getElementById(&#x27;chart&#x27;));</span></span><br><span class="line"><span class="string">                var option = &#123;</span></span><br><span class="line"><span class="string">                    title: &#123;</span></span><br><span class="line"><span class="string">                        text: &#x27;闵行区美食类人均消费餐馆分布&#x27;,</span></span><br><span class="line"><span class="string">                        subtext: &#x27;数据来自大众点评&#x27;,</span></span><br><span class="line"><span class="string">                        x: &#x27;center&#x27;</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                    tooltip: &#123;</span></span><br><span class="line"><span class="string">                        trigger: &#x27;item&#x27;,</span></span><br><span class="line"><span class="string">                        formatter: &quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&quot;</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                    legend: &#123;</span></span><br><span class="line"><span class="string">                        orient: &#x27;vertical&#x27;,</span></span><br><span class="line"><span class="string">                        left: &#x27;left&#x27;,</span></span><br><span class="line"><span class="string">                        data: [&#x27;人均消费不明&#x27;,&#x27;人均消费 0~50 元&#x27;, &#x27;人均消费 50~100 元&#x27;, &#x27;人均消费 100~150 元&#x27;, &#x27;人均消费 150~200 元&#x27;, &#x27;人均消费 200 元以上&#x27;]</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                    series: [</span></span><br><span class="line"><span class="string">                        &#123;</span></span><br><span class="line"><span class="string">                            name: &#x27;店铺比例&#x27;,</span></span><br><span class="line"><span class="string">                            type: &#x27;pie&#x27;,</span></span><br><span class="line"><span class="string">                            radius: &#x27;55%&#x27;,</span></span><br><span class="line"><span class="string">                            center: [&#x27;50%&#x27;, &#x27;60%&#x27;],</span></span><br><span class="line"><span class="string">                            data: [</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">chart_content_html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                &#123;value: %s, name: &#x27;人均消费不明&#x27;&#125;,</span></span><br><span class="line"><span class="string">                                &#123;value: %s, name: &#x27;人均消费 0~50 元&#x27;&#125;,</span></span><br><span class="line"><span class="string">                                &#123;value: %s, name: &#x27;人均消费 50~100 元&#x27;&#125;,</span></span><br><span class="line"><span class="string">                                &#123;value: %s, name: &#x27;人均消费 100~150 元&#x27;&#125;,</span></span><br><span class="line"><span class="string">                                &#123;value: %s, name: &#x27;人均消费 150~200 元&#x27;&#125;,</span></span><br><span class="line"><span class="string">                                &#123;value: %s, name: &#x27;人均消费 200 元以上&#x27;&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> % (consume_unknown_restaurant_count,consume_0_50_restaurant_count,consume_50_100_restaurant_count,consume_100_150_restaurant_count,consume_150_200_restaurant_count,consume_200_greater_restaurant_count)</span><br><span class="line">chart_footer_html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                            ],</span></span><br><span class="line"><span class="string">                            itemStyle: &#123;</span></span><br><span class="line"><span class="string">                                emphasis: &#123;</span></span><br><span class="line"><span class="string">                                    shadowBlur: 10,</span></span><br><span class="line"><span class="string">                                    shadowOffsetX: 0,</span></span><br><span class="line"><span class="string">                                    shadowColor: &#x27;rgba(0, 0, 0, 0.5)&#x27;</span></span><br><span class="line"><span class="string">                                &#125;</span></span><br><span class="line"><span class="string">                            &#125;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    ]</span></span><br><span class="line"><span class="string">                &#125;;</span></span><br><span class="line"><span class="string">                myChart.setOption(option);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">HTML(</span><br><span class="line"> chart_header_html + chart_content_html + chart_footer_html</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看一看代码，首先，配置对应的脚本。引入 requirejs 的配置模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">     paths:&#123;</span><br><span class="line">        echarts: <span class="string">&#x27;//cdn.bootcss.com/echarts/3.2.3/echarts.min&#x27;</span>,</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>接着使用如下代码进行引入和执行代码，具体的 Demo 可以参考文章末尾的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;echarts&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">ec</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> option = &#123;</span><br><span class="line"><span class="comment">//... 图表配置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//... 获取图表 div</span></span><br><span class="line"><span class="comment">//... 为所获取的图表 DIV 设置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>于是，美观漂亮的可视化图就出来了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-59bffc49212928be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ECharts 饼图"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>附上 IPythonNotebook 以及 Excel 表用于大家分析。</p>
<ul>
<li><a href="https://github.com/twocucao/DataScience/blob/master/project_03_dianpin/simple_stat.ipynb">对应的 IPythonNotebook</a></li>
<li><a href="https://github.com/twocucao/DataScience/blob/master/project_03_dianpin/%E5%A4%A7%E4%BC%97%E7%82%B9%E8%AF%84%E9%97%B5%E8%A1%8C%E5%8C%BA%E7%BE%8E%E9%A3%9F%E9%A4%90%E5%8E%85%E7%AE%80%E5%8D%95%E7%BB%9F%E8%AE%A1.xlsx">对应的 Excel 表</a></li>
</ul>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>数据可视化</tag>
        <tag>IPytho Notebook</tag>
        <tag>ECharts</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04 Cheatsheet</title>
    <url>/2017/10/20/UbuntuCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Shell 单行命令。</p>
<p>不定期更新。</p>
<p>桌面版和 Server 版的操作系统版本均为 Ubuntu 16.04 , 数据库为 MySQL / PostgreSQL , Python 3.5.2 开发和运行环境。</p>
<p>由于部分 Mac 上面的配置与 Ubuntu 上配置几乎相同，特别是一些桌面端，跨平台，强烈建议使用。</p>
<p>每次来一个新同事就需要给他们的环境进行配置，配置其实挺麻烦的，虽然可以花一天的时间配置一遍，但总觉得如果多来几个同事的话我基本上就废掉了。<br>于是抛弃 bash 脚本，修改为 Ansible 脚本，将当前的配置任务彻底脚本化。</p>
<a id="more"></a>

<h2 id="0x01-Ubuntu-桌面版开发基本配置"><a href="#0x01-Ubuntu-桌面版开发基本配置" class="headerlink" title="0x01 Ubuntu 桌面版开发基本配置"></a>0x01 Ubuntu 桌面版开发基本配置</h2><p>语言级别配置，请参考我的其他文章，如何优雅的使用 MAC</p>
<h2 id="0x02-Ubuntu-服务器版本基本配置"><a href="#0x02-Ubuntu-服务器版本基本配置" class="headerlink" title="0x02 Ubuntu 服务器版本基本配置"></a>0x02 Ubuntu 服务器版本基本配置</h2><p>第一步，更新源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span></span><br><span class="line">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更换源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev</span><br><span class="line">sudo apt-get install zsh tree htop</span><br><span class="line">sudo apt-get install build-essential acl ntp htop git libpq-dev libmysqlclient-dev libffi-dev libfreetype6-dev libjpeg8-dev liblcms2-dev libtiff5-dev libwebp-dev libxml2-dev libxslt1-dev tcl8.6-dev tk8.6-dev zlib1g-dev python-dev python-pip python-pycurl python-tk ipython supervisor python3.5 python3.5-dev python3-pip python3-lxml python3-tk ipython3</span><br><span class="line">sudo apt-get install mysql-server mysql-client libmysqlclient-dev slurm</span><br><span class="line"></span><br><span class="line"><span class="comment"># GIT 配置</span></span><br><span class="line">git config --global color.ui <span class="literal">true</span></span><br><span class="line">git config --global user.name <span class="string">&quot;twocucao&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;twocucao@gmail.com&quot;</span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;twocucao@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-设置无登录密钥"><a href="#2-1-设置无登录密钥" class="headerlink" title="2.1 设置无登录密钥"></a>2.1 设置无登录密钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 刚开始用了一个很蠢的方法</span></span><br><span class="line">scp ~/.ssh/id_rsa.pub twocucao@192.168.2.156:.ssh/id_rsa.pub</span><br><span class="line">ssh twocucao@192.168.2.156 <span class="string">&quot;mkdir .ssh;chmod 0700 .ssh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在想想，可以直接 ssh-copy-id</span></span><br><span class="line">ssh-copy-id twocucao@192.168.2.156</span><br></pre></td></tr></table></figure>

<p><a href="http://askubuntu.com/questions/46930/how-can-i-set-up-password-less-ssh-login">http://askubuntu.com/questions/46930/how-can-i-set-up-password-less-ssh-login</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo vi /etc/ssh/sshd_config <span class="comment"># 找到 PermitRootLogin no 一行，改为 PermitRootLogin yes</span></span><br><span class="line">sudo service ssh restart</span><br><span class="line"></span><br><span class="line">sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev</span><br><span class="line"></span><br><span class="line">sudo adduser deploy</span><br><span class="line">sudo adduser deploy sudo</span><br><span class="line">su deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开发机复制 ssh 公钥。</span></span><br><span class="line"><span class="comment"># 可以用下面的命令，汗，之前都是在服务器上面创建.ssh 文件夹，然后在本地 scp 拷贝过去，现在想想这个方法还是挺笨的。</span></span><br><span class="line"><span class="comment"># 就像这样</span></span><br><span class="line">scp ~/.ssh/id_rsa.pub deploy@192.168.1.143:/webapps/xxxapp/.ssh/authorized_keys</span><br><span class="line"><span class="comment"># 其实这个命令就 OK 了。</span></span><br><span class="line">ssh-copy-id deploy@IPADDRESS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器</span></span><br><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7</span><br><span class="line">sudo apt-get install -y apt-transport-https ca-certificates</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y nginx-extras</span><br><span class="line">sudo service nginx start</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0x02-Ubuntu-服务器版本基本配置-1"><a href="#0x02-Ubuntu-服务器版本基本配置-1" class="headerlink" title="0x02 Ubuntu 服务器版本基本配置"></a>0x02 Ubuntu 服务器版本基本配置</h2><h2 id="0x03-了解-Linux-服务器运行情况"><a href="#0x03-了解-Linux-服务器运行情况" class="headerlink" title="0x03 了解 Linux 服务器运行情况"></a>0x03 了解 Linux 服务器运行情况</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行时间</span></span><br><span class="line">uptime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内存情况</span></span><br><span class="line">free -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络类</span></span><br><span class="line"><span class="comment">## 实时流量监控</span></span><br><span class="line">iftop</span><br><span class="line"><span class="comment">## 进程占用带宽</span></span><br><span class="line">nethogs</span><br><span class="line"><span class="comment">## sudo nethogs eth0</span></span><br><span class="line">iptraf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 磁盘类</span></span><br><span class="line">iotop</span><br><span class="line"><span class="comment">## 当 dstat 的 wai 字段值比较大时，可以使用 iotop 找出哪些进程出了问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 综合类 之 监控进程，进程管理</span></span><br><span class="line">top</span><br><span class="line">htop</span><br><span class="line">glances <span class="comment"># PS , 这个监控粒度更细</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 综合类 可以取代 vmstat , iostat , netstat , ifstat</span></span><br><span class="line">dstat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 综合类</span></span><br><span class="line"><span class="comment"># 约等于 strace + tcpdump + htop + iftop + lsof</span></span><br><span class="line">sysdig</span><br></pre></td></tr></table></figure>

<h2 id="0x04-踩坑集合"><a href="#0x04-踩坑集合" class="headerlink" title="0x04 踩坑集合"></a>0x04 踩坑集合</h2><p>前段时间公司新买了一台 Thinkpad Server 作为内网服务器。</p>
<p>于是在安装 Ubuntu16.04 的时候就遇到了一个令人哭笑不得的问题。</p>
<blockquote>
<p><strong>无法正常安装</strong> 报 ubuntu 的 initramfs 错误。</p>
</blockquote>
<p>于是，我下意识的去 Google 问题，在 Ubuntu 的一个论坛上面找到了对应的答案：</p>
<blockquote>
<p>是 Superblock 的问题。</p>
</blockquote>
<p>对应措施如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到分区号</span></span><br><span class="line">sudo fdisk -l|grep Linux|grep -Ev <span class="string">&#x27;swap&#x27;</span></span><br><span class="line"><span class="comment"># 找到超级块</span></span><br><span class="line">sudo dumpe2fs /dev/sda2 | grep superblock</span><br><span class="line"><span class="comment"># 修复超级块</span></span><br><span class="line">sudo fsck -b 32768 /dev/sda2 -y</span><br></pre></td></tr></table></figure>

<p>然后重启即可。</p>
<p>当然，问题并没有结束，还是在老地方发现 initramfs 错误。</p>
<p>就在我哭笑不得的准备最后一搏，实在不行就安装 CentOS 作为系统的时候，由于安装时候选择 language 的时候选择英文，结果居然安装成功了。</p>
<blockquote>
<p>所以，解决问题的方式就是<strong>不要使用简体中文进行安装</strong>.</p>
</blockquote>
<p>虽然这是一个很奇怪的问题，至今我也没有探索出来具体的原因。想到问题居然是因为安装的时候因为选择了中文安装。</p>
<blockquote>
<p>这个问题还真的是…..</p>
</blockquote>
<p><strong>最后知道真相的我眼泪掉下来</strong></p>
<h3 id="3-1-磁盘问题"><a href="#3-1-磁盘问题" class="headerlink" title="3.1 磁盘问题"></a>3.1 磁盘问题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df -h 查看磁盘块占用的文件（block）</span><br><span class="line">df -i 查看索引节点的占用（Inodes）</span><br><span class="line">find &#x2F; -size +100M |xargs ls -lh</span><br><span class="line"># 删除 5 天前的文件</span><br><span class="line">find &#x2F;path&#x2F;to&#x2F;files* -mtime +5 -exec rm &#123;&#125; \;</span><br><span class="line">du -h</span><br><span class="line">rm xxx.log</span><br><span class="line">echo &quot;&quot; &gt; xxx.log</span><br></pre></td></tr></table></figure>

<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-03-19</strong> 重修文字，准备整理安装配置将结果转化为 Ansible PlayBook</li>
<li><strong>2017-10-20</strong> 重修文字，准备整理安装配置将结果转化为 Ansible PlayBook</li>
</ul>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>Cheatsheet</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>重新整理，再度出发</title>
    <url>/2016/11/23/%E9%87%8D%E6%96%B0%E6%95%B4%E7%90%86%E5%86%8D%E5%BA%A6%E5%87%BA%E5%8F%91/</url>
    <content><![CDATA[<blockquote>
<p>整理自己的心情，整理自己的经历，也要整理自己的博客。</p>
</blockquote>
<a id="more"></a>

<blockquote>
<p>重新整理，再度出发。</p>
</blockquote>
<p>来到上海的第 9 个月，对自己的水平还是不是很满意。</p>
<p>前几天回常州遇到几个不错的学弟，问了问他们的状况，也大致如此，总觉得自己的水平还是太烂太烂。</p>
<p>李笑来在《把时间当做朋友》这本书里面写过，一个优秀的人，因为对自己的要求高，所以即便他有一门技术 90 分，其他的技术都是 70 分，但是相对于一个普通的人，他的最牛技术为 80 分，而他的其他技术都是 60 分，但由于本身对自己要求就不高，也就心安理得的很接纳自己。</p>
<p>这让我意识到了这一点：恰好是我的高要求让我成为了一个出色的我。</p>
<blockquote>
<p>每次到了夜深人静的时候我总是睡不着，我怀疑是不是只有我的明天没有变得更好。</p>
</blockquote>
<p>重新捡起博客，只想证明给自己看，我想做的事情，我一定要去做。</p>
<blockquote>
<p>人生总是那么短暂，如果不抓紧时间做一些事情，总觉得自己没有存在过。</p>
</blockquote>
<blockquote>
<p>Get Busy Living, Or Get Busy Dying.</p>
</blockquote>
<p>写这篇文章，重新理清楚自己编写文章的分类和标签。也准备把很多太监在自己的笔记里面的技术知识转为代码和文章陆陆续续放出来。</p>
<p>分类如下：</p>
<ul>
<li>善用佳软</li>
<li>深入理解 macOS</li>
<li>Python 黑魔法</li>
<li>Linux DevOps</li>
<li>进击的 JavaScript</li>
<li>后端框架之 Django 进阶</li>
<li>前端框架之 Vue 进阶</li>
<li>Python 爬虫</li>
<li>其他编程语言</li>
<li>后台组件</li>
<li>数据科学</li>
<li>编程漫谈</li>
<li>逆向工程</li>
<li>源码阅读</li>
<li>写在人生的边上</li>
</ul>
<p>标签如下：</p>
<ul>
<li>MongoDB</li>
<li>MySQL</li>
<li>RabbitMQ</li>
<li>Redis</li>
<li>ElasticSearch</li>
<li>分布式</li>
<li>前端开发</li>
<li>可视化</li>
<li>后台组件</li>
<li>后端开发</li>
<li>影评</li>
<li>性能优化</li>
<li>数据分析</li>
<li>机器学习</li>
<li>算法与数据结构</li>
<li>编程工具</li>
<li>编辑器</li>
<li>重构技巧</li>
<li>知乎专业回答</li>
<li>书单与简评</li>
<li>碎碎念</li>
<li>沟通交流</li>
</ul>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="http://music.163.com/outchain/player?type=2&id=189259&auto=1&height=66"></iframe>

<hr>
<p>UPDATE:</p>
<ul>
<li><strong>2016-11-23</strong> : 更新标签内容</li>
<li><strong>2016-12-03</strong> : 修订标签内容</li>
<li><strong>2017-01-15</strong> : 更新分类与标签内容</li>
<li><strong>2017-12-19</strong> : 更新分类与标签内容</li>
</ul>
]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬虫工程师的武器库</title>
    <url>/2016/11/25/PythonistAwesomeList/</url>
    <content><![CDATA[<p>从大三接触 Python 到现在几乎已经有两年的接触经验了，除去中间有一年左右接私活写写 Android 和 Lamp 之外，有 Python 实际项目开发经验也算是 9 个多月，也稍微算得上是一个入门级别的 Python 程序员了。</p>
<p>网上不乏一些不错的 Awesome list, 但是说实话，这种类型的清单某些程度上不就相当于推荐自己没有看过的书单？</p>
<p>而我对自己的 Awesome List 是有要求的。</p>
<a id="more"></a>
<ul>
<li>不求大而全到让人摸不着头脑。</li>
<li>项目只收纳在真实开发项目中<strong>用过</strong>, 正在学习的，并且的的确确提升了我的开发效率的。</li>
<li>平台仅专注 Mac/Linux 上面的工具。</li>
<li>所选工具除非特意标注，皆兼容 Py3.4+</li>
</ul>
<p>我觉得这样的 Awesome List 比起那些涵盖各个方面的集合要好很多。</p>
<h2 id="0x01-Python-库"><a href="#0x01-Python-库" class="headerlink" title="0x01. Python 库"></a>0x01. Python 库</h2><p>我平时的开发以爬虫和 Django 框架为主，偶尔写写 Flask</p>
<h3 id="1-1-爬虫类"><a href="#1-1-爬虫类" class="headerlink" title="1.1. 爬虫类"></a>1.1. 爬虫类</h3><p>爬虫其实也并不是很需要技术水平的东西，对于小规模的爬虫，获取 - 解析 - 分析 - 入库即可。</p>
<p>只是抓取情景变化了之后，需要做的事情就是把各个模块解耦，甚至流程也在某种程度上发生了变化，变成了获取 - 入原始网页库 - 分析 - 入中间数据库 - 再获取 - 分析 - 入关系数据库。</p>
<p>在这个过程中，Python 中有很多很方便的库可以使用。</p>
<p>爬虫框架</p>
<ul>
<li>Scrapy 爬虫框架王者，配合 Scrapy-Redis 可以很快写出分布式爬虫。</li>
<li>PySpider 用过一两次，觉得总有些奇奇怪怪的小问题。值得围观，不推荐。</li>
</ul>
<p>当然，即便如此，也并不代表不需要编写定制自己的爬虫。</p>
<blockquote>
<p>Scrapy 就像品牌机，是个通用型爬虫，抓取一些简单的网站很好，对付一些比较复杂反爬虫机制比较强的网站，用起来总是束手束脚的，感觉还是需要自己动手组合各个模块进行抓取的。</p>
</blockquote>
<blockquote>
<p>我是觉得 Scrapy 这种异步的程序调试起来是很费事情的，如果我的想法有错误的话，还请不吝赐教。</p>
</blockquote>
<p>所以，下面是我在<strong>抓取解析分析入库</strong>这个流程中用到的工具第三方库：</p>
<p>爬虫分析网站常用：</p>
<ul>
<li><del>phantomjs</del> （ Google 出了 Chrome HeadLess 之后，PhantomJS 停止维护）</li>
<li>chrome</li>
<li>charles 用于抓包和测试</li>
</ul>
<p>爬虫获取常用：</p>
<ul>
<li>requests</li>
<li>multiprocessing</li>
<li>threading</li>
<li>asyncio Py3.5 异步库</li>
</ul>
<p>爬虫解析常用：</p>
<ul>
<li>正则表达式</li>
<li>json</li>
<li>nodejs 配合 v8 引擎可以复用一部分 js 代码得出真实数据。</li>
<li>beautifulsoup</li>
<li>lxml</li>
<li>pyquery</li>
<li>w3lib 这也是 scrapy 用的库推荐</li>
<li>pytesseract 简单的图像识别</li>
<li>click 用于编写命令行工具</li>
</ul>
<p>数据库驱动</p>
<ul>
<li>mysqlclient-python</li>
<li>psycopg2</li>
<li>PyMongo</li>
<li>redis-py</li>
</ul>
<p>数据清洗与入库</p>
<ul>
<li>Pandas</li>
<li><a href="https://github.com/kennethreitz/records">https://github.com/kennethreitz/records</a></li>
<li><a href="https://github.com/kennethreitz/tablib">https://github.com/kennethreitz/tablib</a></li>
<li>IPython Notebook</li>
</ul>
<p>数据提取与可视化</p>
<ul>
<li>xlsxwriter</li>
<li>Matplotlib</li>
<li>Seaborn</li>
<li>ECharts 虽然不是 Python 语言的，但是可以嵌入到 IPython Notebook 中进行可视化。详情请参照我在简书上写的这篇文章 <a href="http://www.jianshu.com/p/609193efee1a">IPython Notebook 引入 ECharts 做可视化</a></li>
</ul>
<p>爬虫的部署与监控：</p>
<ul>
<li>psutil</li>
<li>supervisor</li>
<li>Ansible, Ansible 快支持 Py3 了，所以值得关注。将自己平时部署更新的脚本转成 Ansible 脚本的话，大大提高了部署的速度与准确度。</li>
</ul>
<h3 id="1-2-网站开发类"><a href="#1-2-网站开发类" class="headerlink" title="1.2. 网站开发类"></a>1.2. 网站开发类</h3><ul>
<li>Django</li>
<li>django-autocomplete-light</li>
<li>django-celery</li>
<li>django-compressor</li>
<li>django-coverage-plugin</li>
<li>django-crispy-forms</li>
<li>django-debug-toolbar</li>
<li>django-environ</li>
<li>django-extensions</li>
<li>django-filebrowser</li>
<li>django-filter</li>
<li>django-formtools</li>
<li>django-grappelli</li>
<li>django-guardian</li>
<li>django-import-export</li>
<li>django-model-utils</li>
<li>django-mptt</li>
<li>django-redis</li>
<li>django-reversion</li>
<li>djangorestframework</li>
<li>django-compressor</li>
<li>django-pipeline</li>
</ul>
<p>由于并非专注开发 Flask 程序，所以不推荐 Flask 相关资源。</p>
<h3 id="1-3-Jupyter-的生态圈"><a href="#1-3-Jupyter-的生态圈" class="headerlink" title="1.3. Jupyter 的生态圈"></a>1.3. Jupyter 的生态圈</h3><p>由于 Jupyter 原来叫做 IPython Notebook</p>
<h3 id="1-4-其他-Python-库"><a href="#1-4-其他-Python-库" class="headerlink" title="1.4. 其他 Python 库"></a>1.4. 其他 Python 库</h3><p>命令行工具：</p>
<ul>
<li>httpie</li>
<li>mycli 如果现在进入 MySQL 终端进行查询的话，首选 MyCLI</li>
</ul>
<p>小工具：</p>
<ul>
<li>douban.fm 终端 douban.fm</li>
<li>douyu.fm 这是我写的一个关于斗鱼 TV 弹幕获取的终端小程序</li>
</ul>
<h2 id="0x02-网站-订阅"><a href="#0x02-网站-订阅" class="headerlink" title="0x02. 网站 / 订阅"></a>0x02. 网站 / 订阅</h2><p>对于网站与订阅，求精不求多。</p>
<ul>
<li>董明伟的博客 <a href="http://www.dongwm.com/">http://www.dongwm.com/</a></li>
<li>知乎上关于 Python 的专题 <a href="https://www.zhihu.com/topic/19552832">https://www.zhihu.com/topic/19552832</a></li>
</ul>
<p>个人比较看东西找书或者是找代码的时候有两个习惯：</p>
<ul>
<li><ol>
<li>找牛的人看的资料，而不仅仅是牛人的资料。牛人一般情况下推荐的资料也是上上作品。类似于 PageRank, 一直看下去收获相当大。</li>
</ol>
</li>
<li><ol start="2">
<li>求精不求多。毕竟技术日新月异，学好一两个领域足矣。</li>
</ol>
</li>
</ul>
<h2 id="0x03-书单"><a href="#0x03-书单" class="headerlink" title="0x03. 书单"></a>0x03. 书单</h2><p>其实程序员的阅读量并不完全在纸质书上，主要在各种技术文章上，在各种官网的 Tutorial,Guide,API, 和 Source Code 上面，但是有一些书籍多读几遍还是很有帮助的。</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 鸟哥的私房菜 两本</li>
<li><input checked="" disabled="" type="checkbox"> Python Cookbook</li>
<li><input checked="" disabled="" type="checkbox"> Python 算法教程</li>
<li><input checked="" disabled="" type="checkbox"> Python 可视化编程</li>
<li><input checked="" disabled="" type="checkbox"> Python Web 开发实战</li>
<li><input checked="" disabled="" type="checkbox"> Python For Data Analysis</li>
<li><input checked="" disabled="" type="checkbox"> MySQL 技术内幕 : SQL 编程</li>
<li><input checked="" disabled="" type="checkbox"> MySQL 技术内幕 : InnoDB 技术内幕</li>
<li><input checked="" disabled="" type="checkbox"> 深入浅出 MySQL</li>
<li><input checked="" disabled="" type="checkbox"> SQL 反模式</li>
<li><input checked="" disabled="" type="checkbox"> Linux 集群和自动化运维</li>
<li><input checked="" disabled="" type="checkbox"> Practical Vim</li>
<li><input checked="" disabled="" type="checkbox"> 大型网站技术架构。核心原理与案例分析</li>
</ul>
<h2 id="0x04-进阶源码单"><a href="#0x04-进阶源码单" class="headerlink" title="0x04. 进阶源码单"></a>0x04. 进阶源码单</h2><p>书单是进阶的读者推荐给入门读者的读物。<br>源码单是进阶的程序员推荐给入门读者的读物。</p>
<p>下面是董明伟推荐的两个源码单：</p>
<p>初级 Pythoner 源码单</p>
<ol>
<li>kennethreitz/pip-pop: Tools for managing requirements files.</li>
<li>kennethreitz/envoy: Python Subprocesses for Humans™.</li>
<li>kennethreitz/records: SQL for Humans™</li>
<li>mitsuhiko/pluginbase: A simple but flexible plugin system for Python.</li>
<li>mitsuhiko/pipsi: pip script installer</li>
<li>mitsuhiko/unp: Unpacks things.</li>
<li>chrisallenlane/cheat</li>
<li>jek/blinker: A fast Python in-process signal/event dispatching system.</li>
<li>mitsuhiko/platter: A useful helper for wheel deployments.</li>
<li>kennethreitz/tablib: Python Module for Tabular Datasets in XLS, CSV, JSON, YAML, &amp;c.</li>
</ol>
<p>进阶 Pythoner 源码单</p>
<ol>
<li>faif/python-patterns 使用 Python 实现一些设计模式的例子。</li>
<li>pallets/werkzeug flask 的 WSGI 工具集。其中包含了实现非常好的 LocalProxy,cached_property,import_string,find_modules,TypeConversionDict 等。</li>
<li>bottlepy/bottle 阅读一个 Web 框架对 Web 开发就会有更深刻的理解，flask 太大，bottle 就 4k 多行，当然如果你有毅力和兴趣直接看 flask 是最好了的。</li>
<li>msiemens/tinydb 了解用 Python 实现数据库。</li>
<li>coleifer/peewee 了解 ORM 的实现。</li>
<li>pallets/click click 已经内置于在 flask 0.11 里，提供命令行功能，值得阅读。</li>
</ol>
<p>以及一个非常神奇的进阶项目 500lines<br><a href="https://github.com/aosabook/500lines">https://github.com/aosabook/500lines</a></p>
<h2 id="0xDD-常用的一些-Python-配置"><a href="#0xDD-常用的一些-Python-配置" class="headerlink" title="0xDD. 常用的一些 Python 配置"></a>0xDD. 常用的一些 Python 配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新所有 pip 包到最新</span></span><br><span class="line">pip freeze --<span class="built_in">local</span> | grep -v <span class="string">&#x27;^\-e&#x27;</span> | cut -d = -f 1  | xargs -n1 pip install -U -i https://pypi.doubanio.com/simple</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0xEE-结论"><a href="#0xEE-结论" class="headerlink" title="0xEE. 结论"></a>0xEE. 结论</h2><blockquote>
<p>这就是我，一个 Python 爬虫工程师常用的以及现在主要在学习的关于 Python 方面的 Awesome List. 整理出来分享给大家。</p>
</blockquote>
<blockquote>
<p>本文不定期更新</p>
</blockquote>
<blockquote>
<p><strong>生命苦短，我用 Python</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>学习资源</tag>
        <tag>Awesome List</tag>
      </tags>
  </entry>
  <entry>
    <title>Text Processing CheatSheet</title>
    <url>/2016/12/03/TextProcessingCheatsheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中的文本处理相关思路。</p>
<p>本文的目录为：</p>
<ul>
<li>正则处理相关</li>
<li>HTML/XML 处理相关</li>
<li>Python 中的文本处理</li>
</ul>
<h2 id="0x01-正则处理相关"><a href="#0x01-正则处理相关" class="headerlink" title="0x01 正则处理相关"></a>0x01 正则处理相关</h2><h3 id="1-1-正则表达式"><a href="#1-1-正则表达式" class="headerlink" title="1.1. 正则表达式"></a>1.1. 正则表达式</h3><p>正则是个很奇葩的名字，为什么叫做正则表达式呢，首先是个表达式，其次，这是一种叫做正则 (regular expression, rational expression) 的表达式。<br>名称为什么叫做 regular 呢，因为它基于 regular language. 而 regular language 是一种 formal language. 得，现在又开始是编译原理相关概念了。为了逃避概念，通过用途来简单定义正则表达式。</p>
<p>简而言之，就是一种用于字符串搜索的模式。或者就是一种领域专用编程语言。</p>
<p><a href="https://en.wikipedia.org/wiki/Regular_expression">https://en.wikipedia.org/wiki/Regular_expression</a></p>
<h3 id="1-2-Python-中正则表达式语法"><a href="#1-2-Python-中正则表达式语法" class="headerlink" title="1.2. Python 中正则表达式语法"></a>1.2. Python 中正则表达式语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 元字符</span></span><br><span class="line">. ^ $ * + ? &#123; &#125; [ ] \ | ( )</span><br><span class="line"></span><br><span class="line">* <span class="comment"># 速记，天上一个星星都没有，0 到多个。</span></span><br><span class="line">+ <span class="comment"># 一加手机..... 1 到多个。</span></span><br><span class="line">? # 有还是没有 即 0 or 1</span><br><span class="line">*? # 没有疑问就是贪婪，有疑问就是非贪婪</span><br><span class="line">+?</span><br><span class="line">??</span><br><span class="line"></span><br><span class="line">&#123;m&#125; <span class="comment"># m 份</span></span><br><span class="line">&#123;m,n&#125; <span class="comment"># 优先匹配 a&#123;2,&#125;b 优先匹配 aaaab 中 aaaab</span></span><br><span class="line">&#123;m,n&#125;? # 优先匹配 a&#123;2,&#125;b 优先匹配 aaaab 中 aab</span><br><span class="line"></span><br><span class="line">[] <span class="comment"># [a\-z] == [az-]</span></span><br><span class="line"><span class="comment"># 1. [\w] [\S]</span></span><br><span class="line"><span class="comment"># 2. [^5]</span></span><br><span class="line"><span class="comment"># 3. [akm$]  在 [] 中 $ 并不具备元字符特点</span></span><br><span class="line"></span><br><span class="line">PattenA | PattenB</span><br><span class="line">(...) <span class="comment"># 捕获 , 引用可以使用、1 , 但是还有一种扩展语法</span></span><br><span class="line"></span><br><span class="line">(?...) # 扩展</span><br><span class="line"><span class="comment"># - (?aiLmsux)</span></span><br><span class="line"><span class="comment"># - (?:...) 不捕获</span></span><br><span class="line"><span class="comment"># - (?P&lt;quote&gt;...) 正则内引用 (?P=quote);python 内获取 m.group(&#x27;quote&#x27;) ,m.end(&#x27;quote&#x27;);re.sub 内 repl 参数为、g&lt;quote&gt; \g&lt;1&gt; \1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-3-Python-中使用正则的方法"><a href="#1-3-Python-中使用正则的方法" class="headerlink" title="1.3. Python 中使用正则的方法"></a>1.3. Python 中使用正则的方法</h3><h4 id="1-3-1-re-模块的用法"><a href="#1-3-1-re-模块的用法" class="headerlink" title="1.3.1. re 模块的用法"></a>1.3.1. re 模块的用法</h4><ul>
<li>sub 替换</li>
<li>match / fullmatch 匹配</li>
<li>search 搜索</li>
<li>split 分片</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.split(<span class="string">&#x27;(\W+)&#x27;</span>, <span class="string">&#x27;...words, words...&#x27;</span>)</span><br><span class="line"><span class="comment"># [&#x27;&#x27;, &#x27;...&#x27;, &#x27;words&#x27;, &#x27;, &#x27;, &#x27;words&#x27;, &#x27;...&#x27;, &#x27;&#x27;]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>match 为匹配起始字符 / fullmatch 为全部字符 / search 为搜索</p>
</blockquote>
<h4 id="1-3-2-match-object-的用法"><a href="#1-3-2-match-object-的用法" class="headerlink" title="1.3.2. match object 的用法"></a>1.3.2. match object 的用法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m.group(<span class="number">0</span>)</span><br><span class="line">m.group(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r&quot;(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)&quot;</span>, <span class="string">&quot;Malcolm Reynolds&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="string">&#x27;first_name&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;Malcolm&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="string">&#x27;last_name&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;Reynolds&#x27;</span></span><br><span class="line">m.start() <span class="comment"># 起始</span></span><br><span class="line">m.end()   <span class="comment"># 结尾</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4-正则表达式性能"><a href="#1-4-正则表达式性能" class="headerlink" title="1.4. 正则表达式性能"></a>1.4. 正则表达式性能</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译优于不编译</span></span><br><span class="line">prog = re.<span class="built_in">compile</span>(pattern)</span><br><span class="line">result = prog.match(string)</span><br><span class="line">re.match(pattern,string)</span><br></pre></td></tr></table></figure>
<h2 id="0x02-HTML-XML-处理相关"><a href="#0x02-HTML-XML-处理相关" class="headerlink" title="0x02 HTML/XML 处理相关"></a>0x02 HTML/XML 处理相关</h2><h3 id="2-1-Beautifulsoup-处理-HTML"><a href="#2-1-Beautifulsoup-处理-HTML" class="headerlink" title="2.1. Beautifulsoup 处理 HTML"></a>2.1. Beautifulsoup 处理 HTML</h3><p>解析往往伴随着各种各样奇葩的不奇葩的，诡异的不诡异的网页数据抽取，这个过程中，我们常使用两个库来解决问题，一个库叫做 lxml, 另一个库叫做 BeautifulSoup.</p>
<p>beautifulsoup 可是让我们通过直接手动编写遍历 dom 树的方法来快速遍历 dom 树从而获得数据。相比自己写解析器而言，可以算得上非常的节省时间了。</p>
<p>只要能手动遍历 dom 树，基本上所有的数据都是可以获取的。痛点就是手动编写遍历 Dom 树并且完成测试的时间可能长一些。</p>
<p>但是开发效率就比较低了。</p>
<p>举个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;lal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;street-address&quot;</span> <span class="attr">title</span>=<span class="string">&quot;浦东南路八佰伴西面&quot;</span>&gt;</span></span><br><span class="line">       地址：浦东南路八佰伴西面</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;street-address&quot;</span> <span class="attr">title</span>=<span class="string">&quot;浦东南路&quot;</span>&gt;</span></span><br><span class="line">       名称：xxxx</span><br><span class="line">    &lt;/div &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我想要地址属性，如果是 beautifulsoup, 则我们需要先定位到 id 为 lal 的 div 元素。然后获取每个元素的 text 部分，然后使用 if 判断地址属性，然后提取 text.</p>
<p><strong>但是如果用 xpath, 则可以把对元素的简单定位简单判断直接写在 xpath 表达式。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sel.xpath(<span class="string">&#x27;//div[@id=&quot;lal&quot;]/*[contains(text(),&quot;地址&quot;)]/text()&#x27;</span>).extract_first()</span><br><span class="line"><span class="comment"># 如果还需要添加筛选名称，则可是使用</span></span><br><span class="line">sel.xpath(<span class="string">&#x27;//div[@id=&quot;lal&quot;]/*[contains(text(),&quot;名称&quot;)]/text()&#x27;</span>).extract_first()</span><br></pre></td></tr></table></figure>
<p>这样可以极大的提升开发效率。</p>
<p>页面的结构越复杂，则 xpath 带来的开发效率越高。</p>
<h3 id="2-2-XPath-处理-HTML"><a href="#2-2-XPath-处理-HTML" class="headerlink" title="2.2. XPath 处理 HTML"></a>2.2. XPath 处理 HTML</h3><h4 id="2-2-1-概念"><a href="#2-2-1-概念" class="headerlink" title="2.2.1. 概念"></a>2.2.1. 概念</h4><p>XPath 是一种通过路径表达式定位 XML 文档内容的语法。<br>由于内置了大量的表达式函数，可以通过极少的代码完成定位。<br>有七种<strong>节点类型</strong>:</p>
<ul>
<li>element</li>
<li>attribute</li>
<li>text</li>
<li>namespace</li>
<li>processing-instruction</li>
<li>comment</li>
<li>document nodes</li>
</ul>
<p>有五种<strong>节点间关系</strong>:</p>
<ul>
<li>父节点 Parent</li>
<li>子节点 Children</li>
<li>兄弟节点 Siblings</li>
<li>先祖节点，即父与父父节点。Ancestors</li>
<li>后代节点，即子与子子节点。Descendants</li>
</ul>
<table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>nodename</td>
<td>节点名称</td>
<td>a</td>
</tr>
<tr>
<td>/</td>
<td>根节点</td>
<td>/</td>
</tr>
<tr>
<td>//</td>
<td>匹配所有</td>
<td>bookstore//book</td>
</tr>
<tr>
<td>.</td>
<td>当前节点</td>
<td></td>
</tr>
<tr>
<td>..</td>
<td>父节点</td>
<td>a/../a/..</td>
</tr>
<tr>
<td>@</td>
<td>属性</td>
<td>a/@href</td>
</tr>
<tr>
<td>[]</td>
<td>谓语</td>
<td>book[1] , book[last()-1]</td>
</tr>
<tr>
<td>func()</td>
<td>表达式函数</td>
<td>postion()</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response.xpath(<span class="string">&quot;//*[@id=\&quot;landlb_B04_04\&quot;]/span[2]/a[contains(@href,&#x27;market&#x27;)]&quot;</span>)</span><br><span class="line">response.xpath(<span class="string">&quot;//*[@id=\&quot;landlb_B04_04\&quot;]/span[2]/a[not(@class)]&quot;</span>)</span><br><span class="line">response.xpath(<span class="string">&quot;//ul/li/b[contains(text(),&#x27;什么玩意&#x27;)]/following-sibling::span/text()&quot;</span>)</span><br><span class="line">response.xpath(<span class="string">&quot;//div[@class=&#x27;address&#x27;]/text()[preceding::span[@class=&#x27;item&#x27; and contains(text(),&#x27;地址：&#x27;)]]&quot;</span>)</span><br><span class="line">response.xpath(<span class="string">&quot;//ul/li/b[contains(text(),&#x27;什么玩意：&#x27;)]/following-sibling::a/text()&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//*[contains(text(),<span class="string">&#x27;ABC&#x27;</span>)]</span><br><span class="line"><span class="comment"># http://stackoverflow.com/questions/3655549/xpath-containstext-some-string-doesnt-work-when-used-with-node-with-more/3655588#3655588</span></span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;atag btag&quot;</span> /&gt;</span><br><span class="line">//div[contains(@class, <span class="string">&#x27;atag&#x27;</span>) and contains(@class ,<span class="string">&#x27;btag&#x27;</span>)]</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-lxml-parsel"><a href="#2-2-2-lxml-parsel" class="headerlink" title="2.2.2. lxml parsel"></a>2.2.2. lxml parsel</h4><p>这两个库是 Python 中常用的解析表达式， parsel 依赖于 lxml , 安装完 lxml 后直接安装即可。</p>
<h4 id="2-2-3-lxml-的番外"><a href="#2-2-3-lxml-的番外" class="headerlink" title="2.2.3. lxml 的番外"></a>2.2.3. lxml 的番外</h4><p>众所周知，Mac 的 Homebrew 很方便，每一次遇到需要下载编译的组件的时候，只需要执行 brew install xxx, 很快就可以使用了。</p>
<p>但 homebrew 安装的软件都是最新的，这很容易导致部分软件由于版本更新带来的兼容性问题。</p>
<p>这不，最近在 Mac 上进行开发的时候每次调用初始化 lxml 的时候总是无法进行解析，最后经过排查发现问题是 lxml 在编译的时候使用的 libxml 2.9.4 但是 使用的版本为 2.9.2 , 于是每当我使用 lxml 的时候，就会报错。</p>
<p>不得已，找到 lxml 的 F&amp;Q 部分发现提 issue 之前需要先查看依赖版本。</p>
<p>于是进入 IPython 排查。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;%-20s: %s&quot;</span> % (<span class="string">&#x27;Python&#x27;</span>, sys.version_info))</span><br><span class="line">print(<span class="string">&quot;%-20s: %s&quot;</span> % (<span class="string">&#x27;lxml.etree&#x27;</span>, etree.LXML_VERSION))</span><br><span class="line">print(<span class="string">&quot;%-20s: %s&quot;</span> % (<span class="string">&#x27;libxml used&#x27;</span>, etree.LIBXML_VERSION))</span><br><span class="line">print(<span class="string">&quot;%-20s: %s&quot;</span> % (<span class="string">&#x27;libxml compiled&#x27;</span>, etree.LIBXML_COMPILED_VERSION))</span><br><span class="line">print(<span class="string">&quot;%-20s: %s&quot;</span> % (<span class="string">&#x27;libxslt used&#x27;</span>, etree.LIBXSLT_VERSION))</span><br><span class="line">print(<span class="string">&quot;%-20s: %s&quot;</span> % (<span class="string">&#x27;libxslt compiled&#x27;</span>, etree.LIBXSLT_COMPILED_VERSION))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python : sys.version_info(major=3, minor=5, micro=1, releaselevel=&#x27;final&#x27;, serial=0)</span></span><br><span class="line"><span class="comment"># lxml.etree : (3, 6, 2, 0)</span></span><br><span class="line"><span class="comment"># libxml used : (2, 9, 2)</span></span><br><span class="line"><span class="comment"># libxml compiled : (2, 9, 4) # 注意问题出在这里。</span></span><br><span class="line"><span class="comment"># libxslt used : (1, 1, 28)</span></span><br><span class="line"><span class="comment"># libxslt compiled : (1, 1, 28)</span></span><br></pre></td></tr></table></figure>

<p>于是使用 pip 强制进行安装升级。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STATIC_DEPS&#x3D;true pip install -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F; –trusted-host pypi.douban.com lxml –ignore-installed –no-cache-dir –upgrade -vvv</span><br></pre></td></tr></table></figure>
<p>安装完毕即可。</p>
<h3 id="2-3-标准库处理-HTML"><a href="#2-3-标准库处理-HTML" class="headerlink" title="2.3. 标准库处理 HTML"></a>2.3. 标准库处理 HTML</h3>]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>编程工具</tag>
        <tag>CheatSheet</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB Cheatsheet</title>
    <url>/2016/12/09/MongoCheatSheet/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 MongoDB 相关命令。</p>
<ul>
<li>Mongo Shell</li>
<li>Mongo 配套工具</li>
<li>Python API</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MacOS 安装</span></span><br><span class="line">brew install mongodb</span><br><span class="line">brew services start mongodb</span><br><span class="line"><span class="comment"># Ubuntu Server 16.04</span></span><br><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse&quot;</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list</span><br><span class="line">apt-get update -y</span><br><span class="line">apt-get install -y mongodb-org</span><br><span class="line">service mongod start</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h3><h2 id="MongoDB-配套工具"><a href="#MongoDB-配套工具" class="headerlink" title="MongoDB 配套工具"></a>MongoDB 配套工具</h2><ul>
<li>RoboMongo</li>
<li>通过网络或者 Dash 查看文档</li>
<li>Mongo 官方自带工具</li>
</ul>
<h2 id="MongoDB-Shell"><a href="#MongoDB-Shell" class="headerlink" title="MongoDB Shell"></a>MongoDB Shell</h2><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p>db.users.find({“name”: /.<em>m.</em>/})<br>db.users.find({‘name’: {‘$regex’: ‘sometext’}})</p>
<p><a href="https://docs.mongodb.com/manual/">https://docs.mongodb.com/manual/</a></p>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><p>use myNewDatabase<br>db.myCollection.insert( { x: 1 } );</p>
<h3 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h3><h2 id="PyMongo"><a href="#PyMongo" class="headerlink" title="PyMongo"></a>PyMongo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建索引的时候，会阻塞当前的操作，甚至是查询操作</span></span><br><span class="line"><span class="comment"># 据说转为 background 方式不会阻塞但是，没有实践过</span></span><br><span class="line"><span class="string">&quot;msg&quot;</span> : <span class="string">&quot;Index Build Index Build: 167413/751748 22%&quot;</span>,</span><br><span class="line"><span class="string">&quot;progress&quot;</span> : &#123;</span><br><span class="line">	<span class="string">&quot;done&quot;</span> : 167413,</span><br><span class="line">	<span class="string">&quot;total&quot;</span> : 751748</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后台组件</category>
      </categories>
      <tags>
        <tag>Cheatsheet</tag>
        <tag>MongoDB</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Cheatsheet 集合篇</title>
    <url>/2016/12/10/CheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>本文为 Cheatsheet 类型文章的集合。</p>
<p>编码最重要的是思路。</p>
<blockquote>
<p>做什么不是呢？</p>
</blockquote>
<ul>
<li>有人问：你想那么多不累吗？</li>
<li>答：比起出乱子，想多当然是最省事的方式。</li>
</ul>
<p>截止今日已经更新 7 篇 CheatSheet 文章，打算不断完善它们。</p>
<a id="more"></a>

<h2 id="0x01-目录"><a href="#0x01-目录" class="headerlink" title="0x01. 目录"></a>0x01. 目录</h2><ul>
<li><p><a href="/2016/10/05/UbuntuCheatsheet/">Ubuntu CheatSheet</a></p>
</li>
<li><p><a href="/2016/12/05/MacCheatsheet/">Mac CheatSheet</a></p>
</li>
<li><p><a href="/2016/10/05/VimCheatsheet/">Vim CheatSheet</a></p>
</li>
<li><p><a href="/2016/12/11/RedisCheatSheet/">VSCode CheatSheet</a></p>
</li>
<li><p><a href="/2015/04/18/ShellCheatCheet/">Shell CheatSheet</a></p>
</li>
<li><p><a href="/2016/12/11/RedisCheatSheet/">Pandas CheatSheet</a></p>
</li>
<li><p><a href="/2016/12/03/XPathCheatsheet/">XPath CheatSheet</a></p>
</li>
<li><p><a href="/2016/09/12/MySQLCheatSheet/">Docker CheatSheet</a></p>
</li>
<li><p><a href="/2016/09/12/MySQLCheatSheet/">MySQL CheatSheet</a></p>
</li>
<li><p><a href="/2016/09/12/MySQLCheatSheet/">PostgreSQL CheatSheet</a></p>
</li>
<li><p><a href="/2016/12/09/MongoCheatSheet/">Mongo CheatSheet</a></p>
</li>
<li><p><a href="/2016/12/11/RedisCheatSheet/">Redis CheatSheet</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程利器</category>
      </categories>
      <tags>
        <tag>Cheatsheet</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Cheatsheet</title>
    <url>/2016/12/11/RedisCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 MongoDB 相关命令。</p>
<ul>
<li>Redis Shell</li>
<li>Redis 配套工具</li>
<li>Redis-Py</li>
<li>常见问题</li>
<li>踩坑记录</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>

<h2 id="0x01-Redis-Shell"><a href="#0x01-Redis-Shell" class="headerlink" title="0x01 Redis Shell"></a>0x01 Redis Shell</h2><ul>
<li>RedisClient</li>
<li>通过网络或者 Dash 查看文档</li>
<li>Redis 官方自带工具</li>
</ul>
<h2 id="0x02-Redis-使用场景"><a href="#0x02-Redis-使用场景" class="headerlink" title="0x02 Redis 使用场景"></a>0x02 Redis 使用场景</h2><ol>
<li>记录点赞数 hash</li>
<li>记录最近帖子列表 便于快速显示 zset</li>
<li>记录帖子的点赞人，和去重 zset</li>
<li>相关内容。list</li>
<li>计数器，用于分配 ID</li>
</ol>
<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>基本用法就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set lock:upgdatenewprofile true ex 5 nx</span><br><span class="line">TODO: 搞事情</span><br><span class="line">del lock:upgdatenewprofile</span><br></pre></td></tr></table></figure>

<p>但是呢？这个逻辑还是有问题的，比如第一个线程的搞事情的时间大于 5s, 那么第二个线程就会加个锁，然后第一个线程释放掉锁。</p>
<p>于是第三个线程一看，哟，没锁，就开始搞事情。</p>
<p>这种情况可以使用可重入锁.（但可重入锁本身就会增加代码的复杂度）</p>
<h3 id="延时队列"><a href="#延时队列" class="headerlink" title="延时队列"></a>延时队列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brpop</span><br><span class="line">blpop</span><br></pre></td></tr></table></figure>

<p>blocking 本身也会爆异常，所以，也要处理好异常。</p>
<h2 id="0x03-Redis-Py"><a href="#0x03-Redis-Py" class="headerlink" title="0x03 Redis-Py"></a>0x03 Redis-Py</h2><h3 id="基本类型与其操作"><a href="#基本类型与其操作" class="headerlink" title="基本类型与其操作"></a>基本类型与其操作</h3><ul>
<li>string</li>
<li>hash</li>
<li>set</li>
<li>zset 有序集合</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set&#x2F;get</span><br><span class="line">mget name1,name2,name3</span><br><span class="line">mset name1 value1 name2 value2</span><br><span class="line">expire name1 5</span><br><span class="line">setex name1 5 value1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 队列</span><br><span class="line">rpush queue item1 item2 item3</span><br><span class="line">llen queue</span><br><span class="line">lpop queue</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 栈</span><br><span class="line">rpush stack item1 item2 item3</span><br><span class="line">llen stack</span><br><span class="line">rpop stack</span><br></pre></td></tr></table></figure>

<p>慢操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lindex # O(n)</span><br><span class="line"></span><br><span class="line">lrange queue 0 -1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hash 操作</span><br><span class="line">hgetall</span><br><span class="line">hlen</span><br><span class="line">hget</span><br><span class="line">hset</span><br><span class="line">hmset</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 有序列表</span><br><span class="line">zadd</span><br><span class="line">xrange</span><br><span class="line">zrevrange</span><br><span class="line">zcard</span><br></pre></td></tr></table></figure>

<h3 id="高级类型与其操作"><a href="#高级类型与其操作" class="headerlink" title="高级类型与其操作"></a>高级类型与其操作</h3><h2 id="0x04-常见问题"><a href="#0x04-常见问题" class="headerlink" title="0x04 常见问题"></a>0x04 常见问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bgsave 镜像全量持久化 耗时长</span><br><span class="line">bgsave 子进程创建之后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开.fork &#x2F; cow</span><br><span class="line">aof 增量持久化，定期 aof 重写，redis4.0 混合了 bgsave 和 aof, 效果更好</span><br><span class="line">aof 如果每条数据 sync 一下，那么就会不丢数据。然而，鬼才会这么做。</span><br></pre></td></tr></table></figure>

<h2 id="0x05-踩坑记录"><a href="#0x05-踩坑记录" class="headerlink" title="0x05 踩坑记录"></a>0x05 踩坑记录</h2><h3 id="1-无法磁盘持久化"><a href="#1-无法磁盘持久化" class="headerlink" title="1. 无法磁盘持久化"></a>1. 无法磁盘持久化</h3><p>用 scrapy 配合 scrapy-redis 抓取网页并且存储到 MongoDB 里面。</p>
<p>由于 scrapy-redis 重写了 scrapy 的几个核心模块，借助 redis 来实现多个 scrapy 节点从而实现分布式。</p>
<p>默认的 scrapy 设置会把 items 放在 redis 从而方便程序对 items 进行后续处理。这个设计很完美，只是美中不足的是，我常常需要抓取大量页面直接缓存到数据库中。这就导致了 redis 很快就满了。</p>
<p>于是很容易报出这么一个错误。</p>
<blockquote>
<p>(error) MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.</p>
</blockquote>
<p>出错原因如同提示所言，无法磁盘持久化。</p>
<p>基本上问题可能就是：</p>
<ol>
<li>磁盘满了。</li>
<li>redis 本身在某个地方配置了磁盘缓存的大小。</li>
<li>其他权限之类的问题。</li>
</ol>
<p>最快的解决方式就是删除占用磁盘的部分。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 redis-cli 删除 items</span></span><br><span class="line">config <span class="built_in">set</span> stop-writes-on-bgsave-error no</span><br><span class="line">del xxx_html:items</span><br><span class="line">config <span class="built_in">set</span> stop-writes-on-bgsave-error yes</span><br><span class="line"><span class="comment"># 到 bash 下面检查磁盘，我的机器瞬间释放了 3GB 的磁盘空间</span></span><br><span class="line">df -hl</span><br></pre></td></tr></table></figure>
<p>备注：del 一次即可，因为有程序正在运行，所以当 del 之后，原来阻塞的程序接着开始运行。 xxx_html:items 会不断出现新的值。</p>
<p>Scrapy 立马就开始工作了（无需重启）</p>
<p>但是这也不是没有弊端的，依据官方文档所言，只有你完全不 care 数据持久化的情况下才可以使用这种方式</p>
<p>最好的方式当然是让 bgsave 完全 work 了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># redis-cli</span><br><span class="line">127.0.0.1:6379&gt; CONFIG SET dir &#x2F;data&#x2F;tmp</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; CONFIG SET dbfilename temp.rdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; BGSAVE</span><br><span class="line">Background saving started</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2016-12-11</strong> 重修文字</li>
<li><strong>2018-08-28</strong> 常用场景</li>
</ul>
]]></content>
      <categories>
        <category>后台组件</category>
      </categories>
      <tags>
        <tag>Cheatsheet</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL CheatSheet</title>
    <url>/2017/01/05/PostgreSQLCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 PostgreSQL 相关和命令。</p>
<p>PostGIS 相关的资料参考文章 <a href="/2016/10/05/UbuntuCheatsheet/">Geo Processing With Python</a></p>
<ul>
<li>安装与基本配置</li>
<li>PostgreSQL 配套工具</li>
<li>PostgreSQL SQL 常用代码片段</li>
<li>Python Driver : psycopg2 , 与两个 ORM ( Django ORM / SQLAlchemy )</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>

<h2 id="0x01-安装，配置，基本-shell-命令"><a href="#0x01-安装，配置，基本-shell-命令" class="headerlink" title="0x01 安装，配置，基本 shell 命令"></a>0x01 安装，配置，基本 shell 命令</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h3 id="基本-Shell-命令"><a href="#基本-Shell-命令" class="headerlink" title="基本 Shell 命令"></a>基本 Shell 命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启关闭</span><br><span class="line">pg_ctl -D &#x2F;usr&#x2F;local&#x2F;var&#x2F;postgres -l &#x2F;usr&#x2F;local&#x2F;var&#x2F;postgres&#x2F;server.log start</span><br><span class="line">pg_ctl -D &#x2F;usr&#x2F;local&#x2F;var&#x2F;postgres -l &#x2F;usr&#x2F;local&#x2F;var&#x2F;postgres&#x2F;server.log stop</span><br><span class="line">pg_ctl -D &#x2F;usr&#x2F;local&#x2F;var&#x2F;postgres start</span><br><span class="line">pg_ctl -D &#x2F;usr&#x2F;local&#x2F;var&#x2F;postgres stop -s -m fast</span><br></pre></td></tr></table></figure>

<h3 id="数据的导入导出"><a href="#数据的导入导出" class="headerlink" title="数据的导入导出"></a>数据的导入导出</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pg_dump -C -Fp -f dump.sql -U twocucao QCS -h 192.168.2.175</span><br><span class="line">pg_dump -C -Fp -f 20160602-150144-dump.sql -U twocucao QCS --column-inserts --data-only --table=users_table -h 192.168.2.175</span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">psql -U twocucao -d QCS -a -f insert_doc_ids.sql -h 192.168.2.175</span><br><span class="line">pg_restore --verbose --clean --no-acl --no-owner -h localhost example.dump</span><br></pre></td></tr></table></figure>

<h2 id="0x02-PostgreSQL-配套工具"><a href="#0x02-PostgreSQL-配套工具" class="headerlink" title="0x02 PostgreSQL 配套工具"></a>0x02 PostgreSQL 配套工具</h2><ul>
<li>JetBrain 的 Datagrip 作为 编写大段 SQL 语句的 IDE</li>
<li>通过网络或者 Dash 查看文档</li>
<li>PostgreSQL 官方自带工具</li>
</ul>
<h2 id="0x03-PostgreSQL-SQL-常用代码"><a href="#0x03-PostgreSQL-SQL-常用代码" class="headerlink" title="0x03 PostgreSQL SQL 常用代码"></a>0x03 PostgreSQL SQL 常用代码</h2><h3 id="3-1-PostgreSQL-相关"><a href="#3-1-PostgreSQL-相关" class="headerlink" title="3.1 PostgreSQL 相关"></a>3.1 PostgreSQL 相关</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 强行中断连接到此数据库的 session</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    pg_terminate_backend(pid)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    pg_stat_activity</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="comment">-- don&#x27;t kill my own connection!</span></span><br><span class="line">    pid &lt;&gt; pg_backend_pid()</span><br><span class="line">    <span class="comment">-- don&#x27;t kill the connections to other databases</span></span><br><span class="line">    <span class="keyword">AND</span> datname = <span class="string">&#x27;demoweb&#x27;</span> ;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-DCL-Data-Control-Languge"><a href="#3-2-DCL-Data-Control-Languge" class="headerlink" title="3.2 DCL ( Data Control Languge )"></a>3.2 DCL ( Data Control Languge )</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建只读用户</span><br><span class="line">\c demoweb</span><br><span class="line">CREATE ROLE ro_user WITH LOGIN ENCRYPTED PASSWORD &#39;xxx123456&#39;;</span><br><span class="line">GRANT CONNECT ON DATABASE demoweb TO ro_user;</span><br><span class="line">-- This assumes you&#39;re actually connected to mydb..</span><br><span class="line">GRANT USAGE ON SCHEMA public TO ro_user;</span><br><span class="line">GRANT SELECT ON ALL TABLES IN SCHEMA public TO ro_user;</span><br><span class="line">GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO ro_user;</span><br><span class="line"></span><br><span class="line">-- 撤销数据库连接 ()</span><br><span class="line">REVOKE CONNECT ON DATABASE demoweb FROM PUBLIC, demoweb;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-DDL-Data-Definition-Language"><a href="#3-3-DDL-Data-Definition-Language" class="headerlink" title="3.3 DDL ( Data Definition Language )"></a>3.3 DDL ( Data Definition Language )</h3><p>CREATE<br>ALTER<br>DROP<br>TRUNCATE<br>COMMENT<br>RENAME</p>
<h3 id="3-4-DML-Data-Manipulation-Languge"><a href="#3-4-DML-Data-Manipulation-Languge" class="headerlink" title="3.4 DML ( Data Manipulation Languge )"></a>3.4 DML ( Data Manipulation Languge )</h3><p>SELECT<br>INSERT<br>UPDATE<br>DELETE<br>MERGE<br>CALL<br>EXPLAIN PLAN<br>LOCK TABLE</p>
<h3 id="3-5-TCL-Transaction-Control-Languge"><a href="#3-5-TCL-Transaction-Control-Languge" class="headerlink" title="3.5 TCL ( Transaction Control Languge )"></a>3.5 TCL ( Transaction Control Languge )</h3><h2 id="0x04-常用代码片段"><a href="#0x04-常用代码片段" class="headerlink" title="0x04. 常用代码片段"></a>0x04. 常用代码片段</h2><h3 id="4-1-Tips-And-Hacks"><a href="#4-1-Tips-And-Hacks" class="headerlink" title="4.1. Tips And Hacks"></a>4.1. Tips And Hacks</h3><h4 id="Recursive-Query"><a href="#Recursive-Query" class="headerlink" title="Recursive Query"></a>Recursive Query</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WITH cte_name(</span><br><span class="line">    CTE_query_definition -- non-recursive term</span><br><span class="line">    UNION [ALL]</span><br><span class="line">    CTE_query_definition -- recursive term</span><br><span class="line">) SELECT * FROM cte_name;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-大数据量运算技巧"><a href="#4-2-大数据量运算技巧" class="headerlink" title="4.2. 大数据量运算技巧"></a>4.2. 大数据量运算技巧</h3><h3 id="4-3-备份还原技巧"><a href="#4-3-备份还原技巧" class="headerlink" title="4.3 备份还原技巧"></a>4.3 备份还原技巧</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 需要备份的机器</span><br><span class="line">DB_NAME&#x3D;&#39;xxxdb&#39;</span><br><span class="line">DUMP_DB_FILE&#x3D;&#39;latest_dump.sql.gz&#39;</span><br><span class="line">sudo -u postgres pg_dump $DB_NAME | gzip -9 &gt; $DUMP_DB_FILE</span><br><span class="line">TARGET_HOSTNAME&#x3D;&#39;xxx.org&#39;</span><br><span class="line">TARGET_PATH&#x3D;&#39;&#x2F;webapps&#x2F;&#39;</span><br><span class="line">scp $DUMP_DB_FILE root@$TARGET_HOSTNAME:&#x2F;webapps&#x2F;</span><br><span class="line"></span><br><span class="line"># 需要还原的机器</span><br><span class="line">DB_NAME&#x3D;&#39;xxxdb&#39;</span><br><span class="line">DUMP_DB_FILE&#x3D;&#39;latest_dump.sql.gz&#39;</span><br><span class="line">sudo -u postgres dropdb $DB_NAME</span><br><span class="line">sudo -u postgres createdb $DB_NAME</span><br><span class="line">gunzip &lt; $DUMP_DB_FILE | sudo -u postgres psql $DB_NAME</span><br></pre></td></tr></table></figure>

<h2 id="0x05-并发优化技巧"><a href="#0x05-并发优化技巧" class="headerlink" title="0x05. 并发优化技巧"></a>0x05. 并发优化技巧</h2><blockquote>
<p>优化技巧请参考我关于 MySQL 的一片文章。</p>
</blockquote>
<h3 id="5-1-ACID"><a href="#5-1-ACID" class="headerlink" title="5.1 ACID"></a>5.1 ACID</h3><ul>
<li>Atomicity     : 行不行，给个准话</li>
<li>Consistency   : 完成时候，数据保持一致（多版本并发控制）</li>
<li>Isolation     : 事务与事务之间是隔离的。即一事务无法查看另一个事务正在修改的数据（默认，如果不默认这玩意，则隔离程度是可以设置的）</li>
<li>Durablity     : 就是存下来了。</li>
</ul>
<h4 id="多版本并发控制模型"><a href="#多版本并发控制模型" class="headerlink" title="多版本并发控制模型"></a>多版本并发控制模型</h4><ul>
<li>Each query sees only transactions completed before it started</li>
<li>On query start, PostgreSQL records:<ul>
<li>the transaction counter</li>
<li>all transaction id’s that are in-process</li>
</ul>
</li>
<li>In a multi-statement transaction, a transaction’s own previous queries are also visible</li>
<li>The above assumes the default read committed isolation level</li>
</ul>
<p>使用 MVCC 多版本并发控制比锁定模型的主要优点是在 MVCC 里， 对检索（读）数据的锁要求与写数据的锁要求不冲突， 所以读不会阻塞写，而写也从不阻塞读。<br>在数据库里也有表和行级别的锁定机制， 用于给那些无法轻松接受 MVCC 行为的应用。 不过，恰当地使用 MVCC 总会提供比锁更好地性能。</p>
<h3 id="5-2-DDL-事务"><a href="#5-2-DDL-事务" class="headerlink" title="5.2 DDL 事务"></a>5.2 DDL 事务</h3><p>DDL 可以多条放在一起，然后直接 DDL, 据说可以在 sharding 时候用….</p>
<h3 id="5-3-事务使用"><a href="#5-3-事务使用" class="headerlink" title="5.3 事务使用"></a>5.3 事务使用</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- insert_somethings;</span></span><br><span class="line"><span class="keyword">savepoint</span> my_savepoint01;</span><br><span class="line"><span class="comment">-- wrong ops</span></span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> my_savepoint01;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-事务隔离级别"><a href="#5-4-事务隔离级别" class="headerlink" title="5.4 事务隔离级别"></a>5.4 事务隔离级别</h3><ul>
<li><p>READ UNCOMMITED</p>
</li>
<li><p>READ COMMITED</p>
</li>
<li><p>REPEATABLE READ</p>
</li>
<li><p>SEARLIZABLE</p>
</li>
<li><p>脏读          :  和程序的并发一致 默认是不可能的。</p>
</li>
<li><p>不可重复读    :  一个事物重新读取前面读过的数，但是发现被改过了。能读原来则是可重复读。读新的，则是不可重复读。</p>
</li>
<li><p>幻读          :  （举一个为赋新词强说愁的例子）比如，先 count 一下，然后依照 count 值遍历 cursor, 结果发现数量发生变化。</p>
</li>
</ul>
<p>读已提交，是默认。在这里，脏读（不会）、不可重复读（可能）、幻读（可能）。</p>
<h3 id="5-5-锁机制"><a href="#5-5-锁机制" class="headerlink" title="5.5 锁机制"></a>5.5 锁机制</h3><ul>
<li>表级锁模式</li>
<li>行级锁模式</li>
</ul>
<h3 id="5-6-死锁"><a href="#5-6-死锁" class="headerlink" title="5.6 死锁"></a>5.6 死锁</h3><p>死锁的典型案例就是：</p>
<ol>
<li>当你找你爸要钱的时候，你爸说，要是你妈给你钱，我就给你钱。</li>
<li>当你找你妈要钱的时候，你妈说，要是你爸给你钱，我就给你钱。</li>
</ol>
<p>死锁的四个必要条件：</p>
<ul>
<li>互斥条件</li>
<li>请求和保持条件</li>
<li>不剥夺条件</li>
<li>环路等待条件</li>
</ul>
<p>避免死锁的方式，一般是按照顺序来。</p>
<p>当然，数据库可以自动检测出死锁，但是由于捕获死锁需要一定的代价。可能会导致应用程序过久地持有排他锁。</p>
<blockquote>
<p>慎用排他锁。</p>
</blockquote>
<h2 id="0x07-踩坑集"><a href="#0x07-踩坑集" class="headerlink" title="0x07. 踩坑集"></a>0x07. 踩坑集</h2><ul>
<li>序列问题</li>
</ul>
]]></content>
      <categories>
        <category>后台组件</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>CheatSheet</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>从一个小问题来说 Python 的作用域</title>
    <url>/2017/01/14/OneQuestionToSeePythonScope/</url>
    <content><![CDATA[<blockquote>
<p>备注，这种动态设置 module 里的方法不推荐</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>整理工具字符类的时候，想借助正则表达式来实现一部分的文字判断抽取等操作。</p>
<p>比如实现：</p>
<ul>
<li>判断文字是否为 UUID</li>
<li>判断文字是否包含 UUID</li>
<li>抽取文字是中第一个 UUID</li>
<li>抽取文字是中所有 UUID</li>
</ul>
<a id="more"></a>

<h3 id="一个暴力的实现方法"><a href="#一个暴力的实现方法" class="headerlink" title="一个暴力的实现方法"></a>一个暴力的实现方法</h3><p>如果正则表达式比较少，就只一个 UUID，我们就不需要思考什么，我们分别编写四个函数：</p>
<ul>
<li>is_uuid(_str)</li>
<li>has_uuid(_str)</li>
<li>extract_first_uuid(_str)</li>
<li>extract_all_uuid(_str)</li>
</ul>
<blockquote>
<p>没错，过早优化是万恶之源</p>
</blockquote>
<p>但很显然，手动方法显得很弱智，当我需要编写判断 QQ 号的时候，我又必须编写四个函数：</p>
<ul>
<li>is_qq_num(_str)</li>
<li>has_qq_num(_str)</li>
<li>extract_first_qq_num(_str)</li>
<li>extract_all_qq_num(_str)</li>
</ul>
<p>然而：</p>
<ul>
<li>如果，我还需要判断手机号、日期、时间等等，这手动复制粘贴的过程就比较痛苦了。</li>
<li>如果，我去要添加一个方法，给 QQ 号码，uuid 等打码 那就必须要给所有的 uuid, 手机，邮箱都添加一个 dama_xxx(_str) 方法</li>
</ul>
<p>有没有好一点的解决方法呢？</p>
<!-- more -->

<h3 id="两个方法"><a href="#两个方法" class="headerlink" title="两个方法"></a>两个方法</h3><p>第一种，比如把函数修改为：</p>
<ul>
<li>is(_str,QQ_NUM_PATTEN)</li>
<li>has(_str,QQ_NUM_PATTEN)</li>
<li>extract_first(_str,QQ_NUM_PATTEN)</li>
<li>extract_all(_str,QQ_NUM_PATTEN)</li>
</ul>
<p>第二种，Python 中动态添加工具方法，我个人比较喜欢这种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个优雅的错误实现方式</span></span><br><span class="line"><span class="keyword">for</span> regex, regex_pattern <span class="keyword">in</span> REGEXES.items():</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_regex_func</span>(<span class="params">_str</span>):</span></span><br><span class="line">        <span class="keyword">return</span> has_pattern(_str, regex_pattern)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_regex_func</span>(<span class="params">_str</span>):</span></span><br><span class="line">        <span class="keyword">return</span> match_pattern(_str, regex_pattern)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extract_first_regex_func</span>(<span class="params">_str</span>):</span></span><br><span class="line">        <span class="keyword">return</span> find_first_matched_pattern(_str, regex_pattern)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extract_all_regex_func</span>(<span class="params">_str</span>):</span></span><br><span class="line">        <span class="keyword">return</span> find_all_matched_pattern(_str, regex_pattern)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setattr</span>(sys.modules[__name__], <span class="string">&#x27;has_&#123;regex_suffix&#125;&#x27;</span>.<span class="built_in">format</span>(regex_suffix=regex), has_regex_func)</span><br><span class="line">    <span class="built_in">setattr</span>(sys.modules[__name__], <span class="string">&#x27;is_&#123;regex_suffix&#125;&#x27;</span>.<span class="built_in">format</span>(regex_suffix=regex), is_regex_func)</span><br><span class="line">    <span class="built_in">setattr</span>(sys.modules[__name__], <span class="string">&#x27;extract_first_&#123;regex_suffix&#125;&#x27;</span>.<span class="built_in">format</span>(regex_suffix=regex), extract_first_regex_func)</span><br><span class="line">    <span class="built_in">setattr</span>(sys.modules[__name__], <span class="string">&#x27;extract_all_&#123;regex_suffix&#125;&#x27;</span>.<span class="built_in">format</span>(regex_suffix=regex), extract_all_regex_func)</span><br></pre></td></tr></table></figure>

<p>于是我添加了测试方法：</p>
<blockquote>
<p>一个不对稍微有些复杂的逻辑的程序进行测试的程序员不是一个称职的老司机。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@pytest.mark.parametrize(&#39;test_input,expected&#39;, [</span><br><span class="line">    (&quot;321323199509234453&quot;, False),</span><br><span class="line">    (&quot;000528-332222&quot;, False),</span><br><span class="line">    (&quot;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&quot;, True),</span><br><span class="line">])</span><br><span class="line">def test_is_uuid(test_input, expected):</span><br><span class="line">    assert is_uuid(test_input) &#x3D;&#x3D; expected</span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&#39;test_input,expected&#39;, [</span><br><span class="line">    (&quot;321323199509234453&quot;, False),</span><br><span class="line">    (&quot;000528-332222&quot;, False),</span><br><span class="line">    (&quot;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&quot;, True),</span><br><span class="line">])</span><br><span class="line">def test_has_uuid(test_input, expected):</span><br><span class="line">    assert has_uuid(test_input) &#x3D;&#x3D; expected</span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&#39;test_input,expected&#39;, [</span><br><span class="line">    (&quot;321323199509234453&quot;, None),</span><br><span class="line">    (&quot;000528-332222&quot;, None),</span><br><span class="line">    (&quot;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&quot;, &quot;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&quot;),</span><br><span class="line">])</span><br><span class="line">def test_extract_first_uuid(test_input, expected):</span><br><span class="line">    assert extract_first_uuid(test_input) &#x3D;&#x3D; expected</span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&#39;test_input,expected&#39;, [</span><br><span class="line">    (&quot;321323199509234453&quot;, None),</span><br><span class="line">    (&quot;000528-332222&quot;, None),</span><br><span class="line">    (</span><br><span class="line">            &quot;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&quot;,</span><br><span class="line">            [&#39;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&#39;, &#39;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&#39;,</span><br><span class="line">             &#39;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&#39;, &#39;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&#39;]),</span><br><span class="line">    (</span><br><span class="line">            &quot;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4   521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4   521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4   aslakdj 521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&quot;,</span><br><span class="line">            [&#39;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&#39;, &#39;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&#39;,</span><br><span class="line">             &#39;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&#39;, &#39;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&#39;]),</span><br><span class="line">])</span><br><span class="line">def test_extract_all_uuid(test_input, expected):</span><br><span class="line">    assert extract_all_uuid(test_input) &#x3D;&#x3D; expected</span><br></pre></td></tr></table></figure>

<p>测试未通过：</p>
<p>怎么查看代码本身都没有什么逻辑问题，那么问题出在哪里？</p>
<p>对程序植入一些 print 代码来 Debug 一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for regex, regex_pattern in REGEXES.items():</span><br><span class="line">    def has_regex_func(_str, regex_pattern&#x3D;regex_pattern):</span><br><span class="line">        # 当函数被调用之后，打印 regex_pattern 查看对应的字符串</span><br><span class="line">        print(regex_pattern)</span><br><span class="line">        return has_pattern(_str, regex_pattern)</span><br><span class="line"></span><br><span class="line">    def is_regex_func(_str, regex_pattern&#x3D;regex_pattern):</span><br><span class="line">        return match_pattern(_str, regex_pattern)</span><br><span class="line"></span><br><span class="line">    def extract_first_regex_func(_str, regex_pattern&#x3D;regex_pattern):</span><br><span class="line">        return find_first_matched_pattern(_str, regex_pattern)</span><br><span class="line"></span><br><span class="line">    def extract_all_regex_func(_str, regex_pattern&#x3D;regex_pattern):</span><br><span class="line">        return find_all_matched_pattern(_str, regex_pattern)</span><br><span class="line"></span><br><span class="line">    # 查看是否为同一个函数</span><br><span class="line">    print(id(has_regex_func))</span><br><span class="line"></span><br><span class="line">    setattr(sys.modules[__name__], &#39;has_&#123;regex_suffix&#125;&#39;.format(regex_suffix&#x3D;regex), has_regex_func)</span><br><span class="line">    setattr(sys.modules[__name__], &#39;is_&#123;regex_suffix&#125;&#39;.format(regex_suffix&#x3D;regex), is_regex_func)</span><br><span class="line">    setattr(sys.modules[__name__], &#39;extract_first_&#123;regex_suffix&#125;&#39;.format(regex_suffix&#x3D;regex), extract_first_regex_func)</span><br><span class="line">    setattr(sys.modules[__name__], &#39;extract_all_&#123;regex_suffix&#125;&#39;.format(regex_suffix&#x3D;regex), extract_all_regex_func)</span><br></pre></td></tr></table></figure>

<p>于是发现问题，所有打印出来的 regex_pattern 都是一致的。也就是，不管是 has_uuid 还是 has_qq_num 还是其他，最后 regex_pattern 都是我在字典中实现的</p>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>Metaprogramming</tag>
      </tags>
  </entry>
  <entry>
    <title>写给 Pythoner 的 Spacemacs 入门指北</title>
    <url>/2017/01/15/Spacemacs/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最开始，使用 Sublime Text 编码，后来用 Vim 混合 PyCharm 写 Python。</p>
<p>前几天，Github 上的 Spacemacs 已经成功的突破一万 Star, 听说几个我非常佩服的 Pythoner（比如『Python Web 开发实战』的作者董伟明） 也是非常喜欢 Spacemacs, 我就萌生了从 Vim 切换到 Spacemacs 的想法，说做就做。</p>
<blockquote>
<p>注：本文所有内容基于 macOS 10.11, 软件环境为 zsh , pyenv , python3.5.2 , node5.12.0. 其他类 Unix 平台略作修改即可使用。至于 Windows 平台，建议安装 Ubuntu 虚拟机。本文也需要读者具备基本的 VIM 基本常识和 Python 常识。</p>
</blockquote>
<a id="more"></a>

<p>迁移到一个编辑器需要找到一些操作的 Emacs 替代操作。于是我安排文章结构如下：</p>
<ul>
<li>[0x00. 基本软件环境安装](#0x00- 基本软件环境安装)<ul>
<li>[0.1 zsh 与 ohmyzsh](#01-zsh- 与 -ohmyzsh)</li>
<li>[0.2 pyenv 与 pyenv virtualenv](#02-pyenv- 与 -pyenv-virtualenv)</li>
<li>[0.3 nvm 以及常用 npm 包](#03-nvm- 以及常用 -npm- 包)</li>
<li>[0.4 Spacemacs 安装以及基本配置](#04-spacemacs- 安装以及基本配置)</li>
</ul>
</li>
<li>[0x01. 日常的编辑](#0x01- 日常的编辑)<ul>
<li>[1.1 文件导航](#11- 文件导航)</li>
<li>[1.2 文件编辑](#12- 文件编辑)</li>
<li><a href="#13-markdown-writing">1.3 Markdown Writing</a></li>
</ul>
</li>
<li>[0x02. Python 编程](#0x02-python- 编程)<ul>
<li>[2.1 代码补全](#21- 代码补全)</li>
<li>[2.2 代码跳转](#22- 代码跳转)</li>
<li>[2.3 pytest 测试](#23-pytest- 测试)</li>
</ul>
</li>
<li><a href="#0x03-ipython-notebook">0x03. IPython Notebook</a><ul>
<li>[3.1 IPython Notebook 基本配置](#31-ipython-notebook- 基本配置)</li>
<li><a href="#32-emacs-ipython-notebook">3.2 Emacs IPython Notebook</a></li>
</ul>
</li>
<li>[0x04. 扩展](#0x04- 扩展)</li>
</ul>
<p>本文只负责把读者带入 Spacemacs 的世界中，而不是涉及到 Spacemacs 的方方面面，所以此文为指北。而非详细的指南 (Guide).</p>
<h2 id="0x00-基本软件环境安装"><a href="#0x00-基本软件环境安装" class="headerlink" title="0x00. 基本软件环境安装"></a>0x00. 基本软件环境安装</h2><h3 id="0-1-zsh-与-ohmyzsh"><a href="#0-1-zsh-与-ohmyzsh" class="headerlink" title="0.1 zsh 与 ohmyzsh"></a>0.1 zsh 与 ohmyzsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install zsh</span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="0-2-pyenv-与-pyenv-virtualenv"><a href="#0-2-pyenv-与-pyenv-virtualenv" class="headerlink" title="0.2 pyenv 与 pyenv virtualenv"></a>0.2 pyenv 与 pyenv virtualenv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv.git ~/.pyenv</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不喜写兼容代码，所有代码均向 3.5+ 靠拢</span></span><br><span class="line">v=3.5.2|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></span><br><span class="line">v=3.6.0|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></span><br><span class="line">v=2.7.11|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Global Python 为 2.7.11, 备注：尽量不要把 Py3 设置为全局，否则由于 Homebrew 本身有一些依赖是依赖于 Py2 的，这样容易出现一些奇怪的问题。</span></span><br><span class="line">pyenv global 2.7.11</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple requests</span><br><span class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></span><br><span class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">&quot;jedi&gt;=0.9.0&quot;</span> <span class="string">&quot;json-rpc&gt;=1.8.1&quot;</span> <span class="string">&quot;service_factory&gt;=0.1.5&quot;</span> flake8 pytest autoflake hy</span><br><span class="line"></span><br><span class="line">pyenv virtualenv 3.5.2 py3-daily</span><br><span class="line">pyenv activate py3-daily</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple requests</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple beatutifulsoup4</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple ipython[notebook]</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple jupyter</span><br><span class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></span><br><span class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">&quot;jedi&gt;=0.9.0&quot;</span> <span class="string">&quot;json-rpc&gt;=1.8.1&quot;</span> <span class="string">&quot;service_factory&gt;=0.1.5&quot;</span> flake8 pytest autoflake hy</span><br><span class="line">pyenv deactivate</span><br><span class="line"><span class="comment"># pyenv uninstall py3-daily</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="0-3-nvm-以及常用-npm-包"><a href="#0-3-nvm-以及常用-npm-包" class="headerlink" title="0.3 nvm 以及常用 npm 包"></a>0.3 nvm 以及常用 npm 包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 nvm</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</span><br><span class="line">nvm install 5.12.0</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\n#alias for cnpm\nalias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="string">  --userconfig=$HOME/.cnpmrc&quot;&#x27;</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="built_in">source</span> ~/.zshrc</span><br><span class="line">npm install -g vmd</span><br><span class="line">npm install -g gitbook-cli</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install -g tern</span><br><span class="line">npm install -g js-beautify</span><br><span class="line">npm install -g js-hint</span><br></pre></td></tr></table></figure>

<h3 id="0-4-Spacemacs-安装以及基本配置"><a href="#0-4-Spacemacs-安装以及基本配置" class="headerlink" title="0.4 Spacemacs 安装以及基本配置"></a>0.4 Spacemacs 安装以及基本配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install ag</span><br><span class="line">brew install grep</span><br><span class="line">brew tap d12frosted/emacs-plus</span><br><span class="line">brew install emacs-plus</span><br><span class="line"><span class="comment"># 安装完毕之后，克隆我的配置 repo, 有一些基本的配置用于解决墙的问题。解决方案来自于子龙山人</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/syl20bnr/spacemacs ~/.emacs.d</span><br><span class="line">mv ~/.spacemacs .spacemacs.bak</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/twocucao/spacemacs.d.git ~/.spacemacs.d</span><br><span class="line"><span class="comment"># 输入 emacs 进行初始化，如果你可以正常访问 Github 的话时间在半小时之内。</span></span><br><span class="line">emacs</span><br></pre></td></tr></table></figure>

<p>安装 Spacemacs 过程中画面如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-d5c8171294ec9f3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装 Spacemacs 过程中画面"></p>
<p>安装前，Emacs 长这个样子：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-4e6026d213191939.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装前"></p>
<p>安装后，Emacs 长这个样子：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-45747c68366ef275.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装后.png"></p>
<p><strong>在正式进入，请牢牢记住下面几个按键已经功能，以备不时之需</strong></p>
<ul>
<li>spc : 跳出命令面板</li>
<li>spc-spc : 跳出命令列表，可运行命令，也可以查找快捷键</li>
<li>spc-h-spc : 查找包的用途与定义</li>
</ul>
<p>嗯，可以谈下一话题了！</p>
<h2 id="0x01-日常的编辑"><a href="#0x01-日常的编辑" class="headerlink" title="0x01. 日常的编辑"></a>0x01. 日常的编辑</h2><h3 id="1-1-文件导航"><a href="#1-1-文件导航" class="headerlink" title="1.1 文件导航"></a>1.1 文件导航</h3><ul>
<li>(VIM 流）hjkloOaA zz</li>
<li>(VIM 流）查找 * /words</li>
<li>spc-f-j 开发 neotree</li>
<li>spc-tab 切换到上一个 buffer</li>
<li>spc-f-f 打开文件 spc-p-f fuzzfind 类似于 ctrlp spc-s-g-p grep 搜索项目  spc-s-a-p ag 搜索项目</li>
</ul>
<p>搜索项目如图 (spc-s-a-p ag 搜索项目）:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-b2ce54f91a91e9d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="按照关键字搜索项目"></p>
<blockquote>
<p>实在是方便至极</p>
</blockquote>
<h3 id="1-2-文件编辑"><a href="#1-2-文件编辑" class="headerlink" title="1.2 文件编辑"></a>1.2 文件编辑</h3><p>文件内容编辑</p>
<ul>
<li>(VIM 流）u 与 c-r d c 等</li>
<li>有趣的是查找替换功能也是自带预览的。比如 :%s/foo/bar/g</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-e37a81a2a399e5f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查找替换预览"></p>
<p>文件本身编辑</p>
<ul>
<li>在 dired mode 下：copy - C , delete - D, new folder - +</li>
<li>也可以 spc-f-t 在 neotree 下进行编辑</li>
</ul>
<blockquote>
<p>除去这些和 Vim 相似的文件编辑功能之外，甚至窗口管理都和 Vim 一致了，使用 c-w+hjkl 直接跳转。<br>强烈建议在读者抽空过一遍基本的 Vimtutor</p>
</blockquote>
<h3 id="1-3-Markdown-Writing"><a href="#1-3-Markdown-Writing" class="headerlink" title="1.3 Markdown Writing"></a>1.3 Markdown Writing</h3><ul>
<li>spc-spc-markdown-generate-to 回车即可生成本文的 Toc(Table Of Content)</li>
<li>spc-b-i 打开 buffer 的 imenu（类似于 Vim 的 Tagbar 插件），enter 跳转</li>
</ul>
<p>搜索项目如图 (spc-b-i 开启 buffer imenu ，enter 跳转）:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-250852ddc15bd7a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IMenu"></p>
<h2 id="0x02-Python-编程"><a href="#0x02-Python-编程" class="headerlink" title="0x02. Python 编程"></a>0x02. Python 编程</h2><h3 id="2-1-代码补全"><a href="#2-1-代码补全" class="headerlink" title="2.1 代码补全"></a>2.1 代码补全</h3><p>当你按照前面的所有配置走一圈下来，基本上就已经可以完美的进行补全了。<br>比如，当我编辑一个 py 文件的时候，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先激活虚拟环境</span></span><br><span class="line">pyenv activate 3.5.2/envs/py3-daily</span><br><span class="line">emacs py.py</span><br></pre></td></tr></table></figure>
<p>如图所示，因为 requests,numpy 这种第三方库都可以完美补全，其他自然不在话下。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-7516130bb7fe70c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码补全"></p>
<p>代码补全还有另一个神器，就是可以内嵌 lisp 的 Snippet 模板 – yasnippet, 由于模板功能基本上和其他编辑器相同，而使用 elisp 语言进行编写动态 Snippet 模板则需要会 elisp, 这以后有机会再学学。</p>
<h3 id="2-2-代码跳转"><a href="#2-2-代码跳转" class="headerlink" title="2.2 代码跳转"></a>2.2 代码跳转</h3><ul>
<li>文件代码跳转 spc-spc-helm-imenu 查看文件结构</li>
<li>文件跳转 在 normal-mode 下，gd 即可跳转到函数定义上，但是不能跨文件跳转。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-4a2b2df1e6be0dfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="单文件使用 helm_imenu 进行浏览"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-3406b060737bffa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用 ag 进行代码搜索"></p>
<h3 id="2-3-pytest-测试"><a href="#2-3-pytest-测试" class="headerlink" title="2.3 pytest 测试"></a>2.3 pytest 测试</h3><ul>
<li>spc-m-s-py3-daily enter 选择 py3-daily 虚拟环境</li>
<li>spc-spc-pytest-all enter 即可运行所有 pytest 测试。</li>
</ul>
<p>测试过程：</p>
<p>运行测试失败，运行测试失败，使用 c-w-j 跳转到下面窗口，对红色标记处 enter, 即可跳转到出错文件行。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-8ef2bac3163f166c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pytest 运行测试失败"></p>
<p>修正运行测试成功，如图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-b90176c2e97df7dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pytest 运行测试成功"></p>
<h2 id="0x03-IPython-Notebook"><a href="#0x03-IPython-Notebook" class="headerlink" title="0x03. IPython Notebook"></a>0x03. IPython Notebook</h2><p>通常情况下我使用 IPython Notebook 都是在 Web 端，因为是 Web 端，实际上大量的 Dom 渲染对浏览器的渲染速度还是有一定的影响的，我还是比较喜欢客户端，因为客户端的快捷键可以定制，而 Web 端的快捷键实在是相当的不方便。</p>
<p>是不是 IPython Notebook 的 web 端没有好处呢？有的，比如我可以借用外部的 JS 可视化图表对 js 进行可视化呀。</p>
<p>比如我发在简书上的这篇技术文 <a href="http://www.jianshu.com/p/609193efee1a">IPython Notebook 引入 ECharts 做可视化</a></p>
<p>但，如果不需要 js 功能的话，还是用客户端舒服一些。</p>
<h3 id="3-1-IPython-Notebook-基本配置"><a href="#3-1-IPython-Notebook-基本配置" class="headerlink" title="3.1 IPython Notebook 基本配置"></a>3.1 IPython Notebook 基本配置</h3><p>spacemacs 貌似只支持密码访问 IPython Notebook, 那么我们就生成密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先激活 py3-daily 环境</span></span><br><span class="line">python -c <span class="string">&quot;from notebook.auth import passwd;print(passwd())&quot;</span> | pbcopy</span><br><span class="line"><span class="comment"># 恩，于是剪切板上就有如下的字符串</span></span><br><span class="line">sha1:9bf4c48a6b83:26bc24a78a1e4aea7baa36874f5e86bafac0dbb9</span><br><span class="line"><span class="comment"># 打开 config 文件取消注释并修改 c.NotebookApp.password</span></span><br><span class="line">vim ~/.jupyter/jupyter_notebook_config.py</span><br><span class="line">c.NotebookApp.password = <span class="string">&#x27;sha1:35543659622f:f9a78f0b20132f3e04aa1d4ed4060f9fd9eb7663&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-Emacs-IPython-Notebook"><a href="#3-2-Emacs-IPython-Notebook" class="headerlink" title="3.2 Emacs IPython Notebook"></a>3.2 Emacs IPython Notebook</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先在终端打开 IPython Notebook</span></span><br><span class="line">ipython notebook</span><br></pre></td></tr></table></figure>
<p>接着打开 emacs, 输入 spc-a-i-n, 默认端口，然后输入密码即可。首次登陆后还需要在输入一次 spc-a-i-n 即可看到 IPython Notebook 的主界面。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-86a9a546e350994c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IPYNB 的主界面"></p>
<p>光标移到 [New Notebook] 键击 enter 新建 IPython Notebook.</p>
<p>输入如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The %... is an iPython thing, and is not part of the Python language.</span></span><br><span class="line"><span class="comment"># In this case we&#x27;re just telling the plotting library to draw things on</span></span><br><span class="line"><span class="comment"># the notebook, instead of on a separate window.</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="comment"># See all the &quot;as ...&quot; contructs? They&#x27;re just aliasing the package names.</span></span><br><span class="line"><span class="comment"># That way we can call methods like plt.plot() instead of matplotlib.pyplot.plot().</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.cm <span class="keyword">as</span> cm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.width&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.notebook_repr_html&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.set_style(<span class="string">&quot;darkgrid&quot;</span>)</span><br><span class="line">sns.set_context(<span class="string">&quot;poster&quot;</span>)</span><br><span class="line">sns.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the example flights dataset and conver to long-form</span></span><br><span class="line">flights_long = sns.load_dataset(<span class="string">&quot;flights&quot;</span>)</span><br><span class="line">flights = flights_long.pivot(<span class="string">&quot;month&quot;</span>, <span class="string">&quot;year&quot;</span>, <span class="string">&quot;passengers&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw a heatmap with the numeric values in each cell</span></span><br><span class="line">sns.heatmap(flights, annot=<span class="literal">True</span>, fmt=<span class="string">&quot;d&quot;</span>, linewidths=<span class="number">.5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>shift+enter , 咣</p>
<p>热力图就出来了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-aec8c9f278f74600.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="热力图"></p>
<h2 id="0x04-扩展"><a href="#0x04-扩展" class="headerlink" title="0x04. 扩展"></a>0x04. 扩展</h2><p>看完上文，就可以深入文档进行探索了。</p>
<ul>
<li>打开 Vim, 输入：help vimtutor 熟悉基本的 Vim 操作。</li>
<li><a href="https://github.com/syl20bnr/spacemacs/tree/master/layers">Spacemacs Layer 文档</a></li>
<li><a href="http://spacemacs.org/doc/DOCUMENTATION.html">Spacemacs 文档</a></li>
<li><a href="https://github.com/twocucao/spacemacs.d">我的 Spacemacs 配置页面</a></li>
<li><a href="https://github.com/emacs-china/Spacemacs-rocks">Spacemacs 达人子龙山人的教程</a></li>
</ul>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-01-15 18:53:45</strong> 重修文字</li>
<li><strong>2017-01-16 12:49:19</strong> 润饰文字，增加可读性，首发简书。</li>
<li><strong>2018-01-01 12:49:19</strong> 最后弃坑并回归 Vim 与 IDE</li>
</ul>
]]></content>
      <categories>
        <category>编程利器</category>
      </categories>
      <tags>
        <tag>效率</tag>
        <tag>IPynb</tag>
        <tag>Linux Shell</tag>
        <tag>沟通交流</tag>
      </tags>
  </entry>
  <entry>
    <title>『把时间当做朋友』读书笔记</title>
    <url>/2017/01/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E4%B8%8E%E6%97%B6%E9%97%B4%E5%81%9A%E6%9C%8B%E5%8F%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我大一的时候看到的这本书的第一版。转眼大四毕业半年了。</p>
<p>这本书对我有很大积极的作用，大一时候很庆幸读到这本书籍，当时一读这本书，就像一个溺水的人抓到了一个水面上的一根稻草，以为『明白一个道理，于是突然间就主角光环加深，从此走向人生巅峰』。当时可能是因为年轻气盛见识少，待我见识稍稍多了那么一点点之后，也就逐渐可以对成功学类的鸡汤脱敏。这里的脱敏指的是可以减少过度情绪化的理解，从句子中逐渐剥离感性的煽情的句子，慢慢的从稍稍理性的一些角度进行理解。</p>
<p>这本书放在公网上，并不需要购买即可免费查看，但，值得一提的是，第三版在排版上下足了功夫。阅读体验很好。推荐购买纸质书。</p>
<p>我是一个认为『术』重于『道』的人。『道』意味着对『术』进行抽象总结，并且艺术化的语言进行诠释，这个过程难保没有信息的损失。</p>
<p>这本书在四年后看的今天，依然读出了很多不一样的味道，这种惊喜恰如第一次读到这本书的时候那般惊奇。</p>
<a id="more"></a>

<blockquote>
<p>四年前，我看了这本书，相信自己的积累终究会有一天有所回报。</p>
</blockquote>
<p>现在想想，很多李老师说的道理也有道理本身的局限性，道理一旦脱离于扎根这些道理的土壤，就显得很没有道理，李笑来提到：</p>
<ul>
<li>速成绝无可能</li>
<li>交换才是硬道理</li>
<li>完美永不存在</li>
<li>未知永远存在</li>
<li>现状永远无法摆脱</li>
</ul>
<p>这些话的正确性在于如何定义速成，如何定义交换，如何定义完美，如何定义未知，如何定义摆脱现状。放在李老师列举的几个例子来说是成立的，但是放在其他的例子里面则是不成立的。</p>
<p>比如说，『速成绝无可能』：</p>
<blockquote>
<p>拿我自己举例子，我本身已经学会了几门编程语言，再学另一门编程语言，那仅仅是多看几天编程手册的事情。几天学会一门编程语言这叫不叫速成呢？一两天学会另一个数据库这叫不叫速成呢？有的人可是要花好几周呢？你会说，这并不见得，你这是主场，你这是在同一个领域里面学习。这种情况不应该叫做速成。那，举个其他的例子，写代码这个过程涉及到大量的推导和不断的修正自己的方法，这让我学一门新的编程类技术或者非编程类技术的过程中有很强的 common sense, 这个过程也是事半功倍的，那这算不算速成呢？</p>
</blockquote>
<p>在本书中，对于『时间管理』, 这个词本来就不是管理时间的流动的，而是管理自己对于时间的开销。可，李老师反倒说：时间本来就不服从于每个人的管理，你只能选择和时间做朋友。</p>
<blockquote>
<p>可，我只想对<strong>我的时间开销</strong>进行合理安排.<strong>我没有控制时间的想法呀</strong>!</p>
</blockquote>
<p>当然，瑕不掩瑜，我认为这本书除了重要的内容是那些『术』而非那些『道』. 没有人不懂道，也没有人不懂道理，只是道理本身具备相当大的局限性罢了。</p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>通常情况下，看一本『自我成长』类书籍，看他的目录就能了解这本书的讲解思路。</p>
<p>困境 - 醒悟 - 现实 - 管理 - 学习 - 思考 - 交流 - 应用 - 积累</p>
<p>几天读下来，私以为最有价值的部分为<strong>管理 - 学习 - 思考 - 交流</strong>这四个章节，这四个章节多看几遍，其他大略看看便好。</p>
<p>以下便是我的一些零散的笔记。</p>
<h3 id="第-0-章：困境"><a href="#第-0-章：困境" class="headerlink" title="第 0 章：困境"></a>第 0 章：困境</h3><p>首先是发现时间不够用（问题）, 接着是尝试改变但却时间压力导致自己即勤奋又懒惰（慌乱）显得『用战术上的勤劳掩盖战略上的懒惰』, 我们尝试去管理时间，但是却无法管理好时间，于是李老师提出『我们无法管理时间，只能管理自己』，怎么管理自己？李老师给出的答案是『必须要看清楚、想明白『问题出在自己身上』, 而解决就只能靠积累』。</p>
<blockquote>
<p>番外：为什么是第 0 章呢？因为程序员从零计数，而李笑来老师是一个 Geek 范十足的人。而且，概述放在第 0 章，我觉得也蛮有意义的。</p>
</blockquote>
<p>从第 0 章可以看出这本书围绕着：运用心智获得解放</p>
<p>其实个人觉得这本书的这个副标题 – 运用心智获得解放倒是非常适合作为本书的标题，因为论概括性比把时间当做朋友显得更加的契合本书的内容。当然，做销售出身的李老师肯定也知道，这个副标题没有多大吸引力，至少没有把时间当做朋友那么有吸引力。</p>
<h3 id="第-1-章：醒悟"><a href="#第-1-章：醒悟" class="headerlink" title="第 1 章：醒悟"></a>第 1 章：醒悟</h3><p>定义了孰主孰仆：不要跟着感觉走，翻身做大脑的主人</p>
<blockquote>
<p>举了『一个锤子不能砸自身，钉子不能砸自身，但人脑可以修正自身的想法（元思考）来说明人脑的高级』的例子。放在一起总觉得怪怪的。举一个不恰当的例子：耳机可以通过不断的播放音乐来使得耳机音质得到大量的提升，这个过程叫做煲耳机，而超过一定使用期限之后，耳机的音质就会有所下降。我觉得耳机也是一个通过不同使用自身进行发声并且使得自己的发出的声音更加美妙的东西呢。</p>
</blockquote>
<p>定义了何为心智：一个人心智就是其过往获得的一切的知识与经验的总和。</p>
<blockquote>
<p>举了一个聪明人办傻事，还振振有词，义正辞严，双目炯炯的例子。我甚至会怀疑是否本来人家能接受意见，反而因为当众揭露出来，因而在内心里抵触别人意见。当然，缺乏具体的场景，我也无从判断。只能假设，这个倒霉的聪明蛋说的是那种很大的自以为振振有词的话了。</p>
</blockquote>
<p>李老师举了自己学了计算机，盲打，统计，做销售，英语的例子来说明一些道理。PS: 不得不说，在 90 年代学到了这些先进的，time saving 的东西真的是让人非常的羡慕。</p>
<blockquote>
<p>然后说了一个和乔布斯学习书法一样的道理，并且加以升华：『因为不知道那东西有什么用而决定去学』和『因为不知道那东西有什么用而决定不去学』, 前者在实践中越发相信技多不压身，后者只能感叹技到用时方恨少。（当然，与此同时，相信技多不压身的人往往也会陷入同时学习多个技能从而导致处处平庸的误区.)</p>
</blockquote>
<h3 id="第-2-章：现实"><a href="#第-2-章：现实" class="headerlink" title="第 2 章：现实"></a>第 2 章：现实</h3><ul>
<li>速成绝无可能</li>
<li>交换才是硬道理</li>
<li>完美永不存在</li>
<li>未知永远存在</li>
<li>现状无法马上摆脱</li>
</ul>
<p>关于速成，李老师这么说：人本质上就容易对那些在<strong>短时间</strong>内能让自己满足的事物产生依赖，并且全然不顾事实上对自己的影响是好是坏，比如：</p>
<ul>
<li>依赖打游戏来满足自己的成就感</li>
<li>『今天那么累了就大吃一顿吧』</li>
</ul>
<p>然而，在很多领域，之所以相信有速成之法，多少因为之前的老师教的太烂。相信速成之法的聪明人，只是寻找一个更好的学习路径而已。相反，很多人看书不去看一下评论，不 Google 一下，不去征求一下该领域的牛人的意见，上来就一阵瞎折腾，这不也是一种『既勤劳又懒惰』的人么？</p>
<p>第二章总结：</p>
<ul>
<li>你得有耐心接受现状有耐心，接受自己的不完美，有耐心接受未知。</li>
<li>你得有所积累才能有资本。</li>
<li>相信我，你并不孤独。</li>
</ul>
<p>其实整本书籍讲的都是不要急，慢慢来。</p>
<h3 id="第-3-章：管理"><a href="#第-3-章：管理" class="headerlink" title="第 3 章：管理"></a>第 3 章：管理</h3><p>第三章叫做管理，一本书终于进入了干货期，特别是打电话这个流程总结的相当不错，不是很清楚打电话这个是不是商务人士的常识，但的的确确让我也注意到了一些细节其实可以处理的更加完美。</p>
<ol>
<li>凭什么确定现在就可以接电话？发条短信问问对方是否方便</li>
<li>想清楚，对照着清单进行沟通。防止漏掉关键信息。</li>
<li>工作电话，对方未接，显示的是工作总机。应该发消息到对方手机。</li>
<li>交代自己是谁！</li>
<li>对方没有纸和笔怎么办？善意提醒对方可以邮件发个备忘。</li>
</ol>
<blockquote>
<p>处处留心皆学问。</p>
</blockquote>
<p>至于记录时间的方法，曾经尝试过一段时间，没有坚持下来，个人觉得并不适用于我。</p>
<p>至于制定计划的注意点，其实李老师说的其实就是 SMART 法则吧：</p>
<ol>
<li>目标是具体的 (Specific)</li>
<li>可以衡量的 (Measurable)</li>
<li>可以达到的 (Attainable)</li>
<li>要与其他目标具有一定的相关性 (Relevant)</li>
<li>具有明确的截止期限 (Time-bound)</li>
</ol>
<h3 id="第-4-章：学习"><a href="#第-4-章：学习" class="headerlink" title="第 4 章：学习"></a>第 4 章：学习</h3><ul>
<li><ol>
<li>效率本质</li>
</ol>
<ul>
<li>1.2. 学习有效率的东西才是王道</li>
</ul>
</li>
<li><ol start="2">
<li>基本途径</li>
</ol>
<ul>
<li>2.1. 体验 / 试错 / 观察 / 阅读</li>
</ul>
</li>
<li><ol start="3">
<li>主要手段</li>
</ol>
<ul>
<li>3.1. 科学方法</li>
</ul>
</li>
<li><ol start="4">
<li>经验局限</li>
</ol>
<ul>
<li>4.1. 个体经验有限</li>
<li>4.2. 群体经验有限</li>
<li>4.3. 与现有知识相悖的知识</li>
</ul>
</li>
<li><ol start="5">
<li>自学能力</li>
</ol>
<ul>
<li>5.1. 基础阅读能力</li>
<li>5.2. 检索能力（基于阅读能力）</li>
<li>5.3. 写作能力（写出简洁，有效，准确，朴素，具体的文字记录自己的只是和经验）</li>
<li>5.4. 实践能力是自学能力最终转化为真正价值的根本。</li>
<li>5.5. 保持开放的心态 记录下不能苟同的言论，定期想想原因</li>
</ul>
</li>
</ul>
<p>学习，就是为了提高效率。这与李老师主张的实用主义非常吻合。从四个基本途径（体验 / 试错 / 观察 / 阅读）入手，并介绍了主要手段即科学方法。接着介绍经验局限如何自学能力。</p>
<p>有趣的东西在于科学方法。</p>
<p>所谓科学方法，用于求索科学问题还是很有意义的，可是用于解决日常生活中的问题，多多少少显得过于书生气。</p>
<blockquote>
<p>对于科学界已经确定的结论，经过严密的科学方法来验证，那些是值得相信的。比如进化论，现代医学，科学结论。</p>
</blockquote>
<p>能不能说科学探索出来的就一定是正确的呢？不见得，但是经过严密推导后或者是严谨的双盲测试的结论则是非常值得去相信的，如果错了，那就只能认了。如果严谨的科学探究都能出错，那也属于”天亡我，我何辞为？”.</p>
<blockquote>
<p>然而，遗憾的是，更多的问题则是没有足够的素材来验证这个道理是否属于真理，我们遵循<strong>科学方法</strong>估计得出的也就是假想。甚至来不及验证，机会就溜走了。</p>
</blockquote>
<h3 id="第-5-章：思考"><a href="#第-5-章：思考" class="headerlink" title="第 5 章：思考"></a>第 5 章：思考</h3><p>第五章是最有意义的一章，这是李老师特别擅长的思考，所以每次读都可以发现有趣的东西，比如，李老师定义的勤于思考 – <strong>只不过是从别人那里知道一个结论的时候，自己动脑重新推演一遍，看看得出的结论的过程有没有漏洞和不合理的地方，衡量一下结论到底有没有道理的过程。</strong></p>
<blockquote>
<p>至于勤于思考的原因却是，我们也处于一个信任成本极高的社会。</p>
</blockquote>
<p>接着李老师举出两个思维陷阱：</p>
<ul>
<li>概念不清</li>
<li>拒绝接受不确定性</li>
</ul>
<p>概念不清的人往往分不清目标与计划、 科学科普与科普作者 \ 历史与历史课 \ 上学与学习</p>
<p>拒绝接受不确定性的人就会往两个方向发展要么选择相信鬼神要么擅长使用二分法强行得出答案。</p>
<p>很多人也分不清相关性和因果性：</p>
<p>其实确立思考的方案也很简单，如果别人给了你一个<strong>因为 A, 所以 B</strong>：</p>
<ul>
<li>A 不一定是 B 的理由</li>
<li>A 不一定是 B 唯一的理由</li>
<li>A 不一定是 B 最重要的理由</li>
<li>A 可能是促进了 B ,B 也反过来促进了 A, 两者相互促进，互为因果。</li>
</ul>
<p>举个例子：</p>
<blockquote>
<p>有个人说：程序员只能去北京才能混得好。</p>
</blockquote>
<p>想清楚这句话有没有道理很简单：</p>
<p>STEP1. 确立他说的因果关系：因为程序员去北京混，所以混得好。<br>STEP2. 想想混的好的原因真的是因为去北京混吗？去上海就一定不行咯？北京的程序员就一定混得好咯？<br>STEP3. 想想混的好的原因的唯一理由是因为去北京混吗？不去北京就一定不行咯？<br>STEP4. 想想混的好的原因的最重要的理由是因为去北京混吗？如果不去北京还想混得好，还有什么方法呢？</p>
<p>命题的四种概念：</p>
<ol>
<li>因为 A, 所以 B</li>
<li>因为<del>A, 所以</del>B</li>
<li>因为<del>B, 所以</del>A</li>
<li>因为 B, 所以 A</li>
</ol>
<blockquote>
<p>很早接触这个概念，虽然至今用的还是不熟，但这四个概念真的是写段子的强行混淆概念的好概念啊。</p>
</blockquote>
<h3 id="第-6-章-交流"><a href="#第-6-章-交流" class="headerlink" title="第 6 章 交流"></a>第 6 章 交流</h3><ul>
<li>学会倾听</li>
<li>说与不说</li>
<li>交流守则</li>
<li>正确复述</li>
<li>勤于反思</li>
</ul>
<p>这一章也值得反复多看几遍，即便不能理解，一本正经的引用牛人的话也是提升谈资，满足自身小虚荣的重要手段。</p>
<p>有趣的是交流守则：</p>
<ul>
<li>对话的目的是寻求真理，不是为了斗争。</li>
<li>不做人身攻击。</li>
<li>保持主题。</li>
<li>辩论时要用证据。</li>
<li>不要坚持错误不改。</li>
<li>要分清对话与只准自己讲话的区别。</li>
<li>对话要有记录。</li>
<li>尽量理解对方。</li>
</ul>
<p>当然，有的时候别人会进行反驳，而注意双方的反驳层次也是很有用的（书中未提）:</p>
<p>Paul Graham《How to Disagree》值得一看 <a href="http://www.zreading.cn/archives/4137.html">http://www.zreading.cn/archives/4137.html</a></p>
<p>引用李老师的话：</p>
<blockquote>
<p>如果我们作为讨论的一方，发现对方已经不再“遵守理性讨论基本原则”，那么就马上停止讨论吧，因为我们已经失去了讨论的对象。就算对方不依不饶，我们也应该回避回避再回避，因为任何接下去的过程都已经不再是“讨论”，而更可能是仅仅为争而争的“争论”了。这种争论的害处很多，比如浪费时间，比如影响情绪，比如把对方变成敌人，比如失去更多朋友……</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>读到这本书之后，确实让我不安宁了好一阵子，因为这让我真真确确的感受到了自己对时间的浪费，对自己精力的浪费。这些东西原本可以使我变得更好。</p>
<p>四年后，重读这本书，依旧让我收获颇深，至于前面部分的挑刺，也仅仅是耍耍小聪明而已，挑刺很容易，建立体系并不那么简单。</p>
<p>遇见有趣的书，就如同遇见一个有趣的人一样。</p>
<p>所有的遇见，都是久别重逢，只叹相见恨晚。</p>
<p>感谢毕业后的第一个春节假期的都让我不断补充新知识不停止学习的步伐的公司，让我在大年初二完成这篇读书笔记。</p>
]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>书评</tag>
      </tags>
  </entry>
  <entry>
    <title>『好好说话』读书笔记</title>
    <url>/2017/01/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E5%A5%BD%E5%A5%BD%E8%AF%B4%E8%AF%9D/</url>
    <content><![CDATA[<p>当时看到奇葩说这个节目就深深的喜欢上了这群打辩论的顶级高手们。</p>
<p>于是，当这些奇葩的辩论王者们出了『好好说话』的语音教程的时候，就非常开心的入手了。现在出了纸质书，像我这种不是特别聪明的人自然是要好好的拿来研究一番，于是诞生了本文。本文是我的公开的笔记，私人的笔记就不分享了。</p>
<p>好好说话有语音版和文字版。建议购买。很多技能都不重要，早一点学迟一点学基本上都没有问题，但是说话是为数不多的，不学就非常可惜的早学可以少走很多麻烦的。</p>
<blockquote>
<p>真心建议买正版，为优秀的知识付费是追求上进的人的基本素质。</p>
</blockquote>
<p>世界上需要交智商税的东西真的特别多，但是说话这种东西一般情况下交的智商税的特别的高：</p>
<a id="more"></a>

<p>就像在书籍第一章开头所说，说话之伤都是暗伤。</p>
<blockquote>
<p>能意识到你问题所在的，通常都不会告诉你。心大点的，察人之过笑而不言，但是私下里知道你这个人不靠谱，以后有重要的事不能指望你，就会疏远你；心稍微小点的，不跟你计较，但是客客气气找个别的由头举了你；等而下之的人的，甚至会一边给你穿小鞋一边装大度，让你死都没有四个明白。</p>
</blockquote>
<p>回想起我前 25 年的很多糟糕的言行，现在想想，当时总归是可以有更优解的。</p>
<p>但仔细一想，似乎寻常人总会去踩这些坑，吃过很多教训，才能明白。</p>
<h3 id="说话是权利的游戏"><a href="#说话是权利的游戏" class="headerlink" title="说话是权利的游戏"></a>说话是权利的游戏</h3><p>五维话术：演讲，沟通，说服，谈判，辩论。</p>
<ul>
<li>演讲 A – 权力的形成（吸引，聚焦，引导）</li>
<li>沟通 B – 权力的流动（避免冲突与协调转向）</li>
<li>说服 C – 权力在对方（无权的一方要改变有权的一方）</li>
<li>谈判 D – 权力在双方（双方要合作，才能解决问题）</li>
<li>辩论 E – 权力在他方（双方无权决定胜负，通常由中立第三方裁决）</li>
</ul>
<p>这里面的纬度，并不是每一个场景下就对应某一纬度的，比如说，当你在沟通的时候，有的时候就也需要说服，有的时候又需要辩论，甚至谈判。</p>
<p>所以，每一场复杂的说话场景实际上是在不断的变化当中，甚至可以用矢量 (A,B,C,D,E,T) 其中 T 表示的是 Times 次数。即以 A 为演讲值，MAX 为 10,MIN 为 0 的情况下，第 T 次演讲的说法应该为 (A,B,C,D,E), 比如 (2,3,4,9,0) 表示此次对话应该着重于谈判.P20 有一个非常有趣的说明叫做色有三原，光分七彩。</p>
<p>温和的的沟通，可能蕴含着辩论的机锋和谈判的策略；<br>娓娓道来的说服可能需要演讲的华彩的沟通的诀窍。</p>
<p>而好好说话的工作流就是</p>
<p>S1. 倾听 For 收集信息<br>S2. 判断 For 权力棍术<br>S3. 思考 For 应对之策 说话策略需要依据权力（大小）, 态度（反对 / 赞同）, 成本（低 / 高）, 方向（单向 / 双向）, 受众（多 / 少）<br>S4. 表达 For 语言输出，然后转 S1</p>
]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>书评</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinking In Python Language</title>
    <url>/2017/03/21/ThinkingInPython/</url>
    <content><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><blockquote>
<p>Python 简略笔记</p>
</blockquote>
<p>本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍这个过程中结合自己的开发常见场景记录下来的一些笔记。</p>
<a id="more"></a>

<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><h3 id="1-为什么是-Python"><a href="#1-为什么是-Python" class="headerlink" title="1. 为什么是 Python"></a>1. 为什么是 Python</h3><p>选 Python, 很大程度上是因为 Python 的快速开发。</p>
<p>当然，快速开发（这里的开发包含部署）这个词也往往会被误解。什么叫做快速？我用一个 CMS 框架快速搭建出一个网站这是否叫做快速？</p>
<ul>
<li>每一次部署的时候，如果使用 Java 或者是 Go, 部署的时候直接 maven 编译打包，接着把 War 包直接上传到 Tomcat 就结束了。而用 Python 则需要各种虚拟环境，各种稀里哗啦的配置。这种情况下是哪一种快速呢？</li>
</ul>
<p>Python 有什么好处呢？</p>
<ul>
<li>写代码效率高</li>
<li>生态圈好</li>
</ul>
<p>写代码效率高，这指的是写 Python 代码，而不是运行时。</p>
<p>生态圈好，Web 开发用 Django/Flask , 数据抓取用 Requests , 数据分析清洗用 Pandas, 机器学习。</p>
<h3 id="2-工具链"><a href="#2-工具链" class="headerlink" title="2. 工具链"></a>2. 工具链</h3><h3 id="4-文档"><a href="#4-文档" class="headerlink" title="4. 文档"></a>4. 文档</h3><h3 id="5-社区"><a href="#5-社区" class="headerlink" title="5. 社区"></a>5. 社区</h3><h3 id="6-书籍"><a href="#6-书籍" class="headerlink" title="6. 书籍"></a>6. 书籍</h3><h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><blockquote>
<p> 程序 = 算法 + 数据结构</p>
</blockquote>
<p>这句话当然是不全面的，但并不影响这句话在计算机世界里面的地位。</p>
<p>依我看来，对我的启发大致是：</p>
<blockquote>
<p>我会把 API 的调用和数据结构以及算法想清楚，然后才动手把代码分解成伪代码。</p>
</blockquote>
<h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h3><p>数据类型按照不同的划分标准可以进行不同的划分：</p>
<p>按照复杂性可以这么划分：</p>
<ul>
<li>简单类型</li>
<li>复杂类型</li>
</ul>
<p>按照复杂性可以这么划分：</p>
<ul>
<li>基本类型</li>
<li>引用类型</li>
</ul>
<p>按照数据结构可以这么划分：</p>
<ul>
<li>集合结构 : 串</li>
<li>线性结构 : 线性表 （单链表，静态链表，循环链表，双向链表，<strong>栈，队列</strong>)</li>
<li>树形结构 : 树（二叉树，B+ 树，红黑树）</li>
<li>图形结构 : 图</li>
</ul>
<h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>对于一些基本的数据类型，操作为 加减乘除取余数位运算等等</p>
<p>对于复杂的一些数据类型，则需要对数据结构多一些了解。</p>
<p>比如，对队列而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对 hash 而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字典而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字符串而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？</p>
<p>那字符串来说，Java 推荐使用 StringBuilder 来合并多个字符串，Python 推荐 join 多个字符串等等。</p>
<h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><h3 id="3-语句"><a href="#3-语句" class="headerlink" title="3. 语句"></a>3. 语句</h3><h2 id="0x02-中级概念"><a href="#0x02-中级概念" class="headerlink" title="0x02 中级概念"></a>0x02 中级概念</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块，这个概念，可大可小，大的时候，把一个程序说成是模块，小的时候，可以把一个文件，甚至你说这一个函数是一个模块，也行。</p>
<p>这里的模块指的是一个包下的函数。</p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象有三大概念：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
<h3 id="错误-调试测试"><a href="#错误-调试测试" class="headerlink" title="错误 / 调试测试"></a>错误 / 调试测试</h3><p>异常处理实际上可以考验一个程序员编写代码的健壮性。</p>
<p>事实上来说，代码写的健壮是一个程序员必备的素养。但其实在开发过程中，出于对项目进行赶工上线，需要对程序的健壮性做出一定的取舍。并且，在编写客户端，服务端，网页前端的时候基本上都会遇到这个问题。什么时候选择健壮的程序，什么时候选择是还可以的程序。需要自己的经验。</p>
<h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><blockquote>
<p>Python 多线程约等于并发。</p>
</blockquote>
<h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><h4 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h4><p>Global Interpreter Lock</p>
<p>并不是所有的解释器语言都有 GIL （尽管 Python 和 Ruby 里面都有）, 也并不是没有尝试过去除 GIL, 但是每次去除都会导致单线程性能的下降。所以暂时保留。</p>
<p>GIL 对程序中的影响：</p>
<blockquote>
<p>一个线程运行 Python , 而其他 N 个睡眠或者等待 I/O - <strong>同一时刻只有一个线程对共享资源进行存取</strong> , Python 线程也可以等待 threading.Lock 或者线程模块中的其他同步对象；</p>
</blockquote>
<h5 id="协同式多任务处理"><a href="#协同式多任务处理" class="headerlink" title="协同式多任务处理"></a>协同式多任务处理</h5><p>如果有两个线程，同时进行 IO 请求，当其中一个线程连接之后，立即会<strong>主动让出 GIL</strong>, 其他线程就可以运行。</p>
<blockquote>
<p>当 N 个线程在网络 I/O 堵塞，或等待重新获取 GIL，而一个线程运行 Python。</p>
</blockquote>
<p>让出之后还要执行代码呀，所以要有个收回 GIL 的动作。</p>
<h5 id="抢占式多任务处理"><a href="#抢占式多任务处理" class="headerlink" title="抢占式多任务处理"></a>抢占式多任务处理</h5><p>Python 2 GIL , 尝试收回 GIL 为 执行 1000 字节码。<br>Python 3 GIL , 尝试收回 GIL 检测间隔为 15ms</p>
<h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>原子操作：sort 之类不需要<br>非原子操作：n=n+2 的字节码分为 加载 n , 加载 2 , 相加，存储 n, 四个步骤，由于不是原子性，很可能被由于 15 ms 而被打断。</p>
<p>当然，懒人一向是 : <strong>优先级不决加括号，线程不决加 lock</strong></p>
<p>对于 Java, 程序员努力在尽可能短的时间内加锁存取共享数据，减轻线程的争夺，实现最大并行。但 Python 中，线程无法并行运行，细粒度的锁就没有了优势。</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h2 id="0x03-高级技巧"><a href="#0x03-高级技巧" class="headerlink" title="0x03 高级技巧"></a>0x03 高级技巧</h2><h2 id="0x04-标准库"><a href="#0x04-标准库" class="headerlink" title="0x04 标准库"></a>0x04 标准库</h2><h3 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h3><h3 id="系统化模块"><a href="#系统化模块" class="headerlink" title="系统化模块"></a>系统化模块</h3><ol>
<li>Introduction</li>
<li>Built-in Functions</li>
<li>Built-in Constants</li>
<li>Built-in Types</li>
<li>Built-in Exceptions</li>
<li>Text Processing Services</li>
<li>Binary Data Services</li>
<li>Data Types</li>
<li>Numeric and Mathematical Modules</li>
<li>Functional Programming Modules</li>
<li>File and Directory Access</li>
<li>Data Persistence</li>
<li>Data Compression and Archiving</li>
<li>File Formats</li>
<li>Cryptographic Services</li>
<li>Generic Operating System Services</li>
<li>Concurrent Execution</li>
<li>Interprocess Communication and Networking</li>
<li>Internet Data Handling</li>
<li>Structured Markup Processing Tools</li>
<li>Internet Protocols and Support</li>
<li>Multimedia Services</li>
<li>Internationalization</li>
<li>Program Frameworks</li>
<li>Graphical User Interfaces with Tk</li>
<li>Development Tools</li>
<li>Debugging and Profiling</li>
<li>Software Packaging and Distribution</li>
<li>Python Runtime Services</li>
<li>Custom Python Interpreters</li>
<li>Importing Modules</li>
<li>Python Language Services</li>
<li>Miscellaneous Services</li>
<li>MS Windows Specific Services</li>
<li>Unix Specific Services</li>
<li>Superseded Modules</li>
<li>Undocumented Modules</li>
</ol>
<h2 id="0x05-第三方库"><a href="#0x05-第三方库" class="headerlink" title="0x05 第三方库"></a>0x05 第三方库</h2><ul>
<li>Requests : API 人性化</li>
</ul>
<h2 id="0x06-代码质量"><a href="#0x06-代码质量" class="headerlink" title="0x06 代码质量"></a>0x06 代码质量</h2><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><ul>
<li>外部<strong>不该</strong>引用 protected member （单下划线）</li>
<li>lambda 为一次使用，最好不要赋值。</li>
<li>不要给 buildin 函数赋值</li>
<li>py3 直接 super()</li>
<li>for in else 如果不内置 break 则出会在最后 for in 为 empty 的时候再执行 else 中的语句</li>
<li>context exit 如果不 catch 掉异常让其自然向上一级抛出错误的话，必须为 (self, exception_type, exception_value, traceback):</li>
<li>不要在 init 里面 return 数据</li>
<li>不要混用 tab 和 space</li>
<li>4 个 space 缩进</li>
<li>staticmethod 直接是 参数，classmethod 第一个参数为 cls</li>
<li>可变的 default value 是不能作为 参数的。（可能是解释器在确定函数的定义的时候完成赋值？)</li>
<li>遵循 exception hierachy <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></li>
<li>defaultdict defaultdict(lambda : 6) , 必须 callable</li>
<li>尽量 unpack 赋值</li>
<li>字典用获取用 get(“myk”,None) , 赋值用 dictionary.setdefault(“list”, []).append(“list_item”)</li>
</ul>
<h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><ul>
<li>避免使用 import * , 我觉得这点值得商榷 , 如果是某个模块下，完全可以先把模块拆分成多个，最后 import 进来，接着使用 all.</li>
<li>getxxx 获取实际值，如果不为实际值，返回 None 显然不如 try catch 来的实在。</li>
<li>避免使用 global</li>
<li>命名要注意</li>
<li>动态创建方法 , 我觉得这点值得商榷。</li>
</ul>
<h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><ul>
<li>不要检查，如果可能有异常，尽量抛出异常来 trycatch 解决。</li>
<li>a is None , if flag</li>
<li>isinstance , not type(r) is types.ListType</li>
<li>“{name}{city}”.format(**info_dict)</li>
<li>for k , v in infodict.items()</li>
<li>使用 poiinfo = namedtuple(“poiinfo”,[“name”,”lng”,”lat”]) 返回 poiinfo[‘上海’,121.00,23] 最后返回值打印 poi.name , poi.lng , poi lat</li>
<li>for numbers_value, letters_value in zip(numbers, letters):</li>
<li>enumerate</li>
<li>如果能用 listcomp 则不使用 map 和 filter</li>
</ul>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ul>
<li>用 set</li>
<li>d.iteritems() 比 items() 省内存</li>
</ul>
<h2 id="0xEE-文章更新"><a href="#0xEE-文章更新" class="headerlink" title="0xEE 文章更新"></a>0xEE 文章更新</h2><ul>
<li><strong>2017-05-11 19:43:00</strong> : 增加代码质量模块</li>
</ul>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>重构技巧</tag>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Pro 15.4 Multi-Touch Bar</title>
    <url>/2017/05/01/OhMyNewMac/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个月前换了这台新电脑 MacBook Pro 15.4 Multi-Touch Bar (Core i7/16GB/512GB)，感觉每天打字都很舒服，也算是实现了一个梦寐以求的小目标吧。</p>
<a id="more"></a>

<p>在此之前，用我的<strong>前任</strong>有下面几款：</p>
<ul>
<li>大一时候从网吧买的 400 块钱的台式机</li>
<li>大一时候从淘宝买的 700 块钱的笔记本</li>
<li>大二上学期买的 1200 块钱的笔记本</li>
<li>大三上学期买的 3200 块钱的笔记本，后来花了 2000 块升级了一下下</li>
<li>大四上学期买的 5000 块的二手 MacBook Pro</li>
</ul>
<p>后来手贱买了降噪耳机，机械键盘，手机，pad , 花的都是自己的钱。</p>
<p>能把一手烂牌打出不错的结果，这才是让人自豪的事情啊！</p>
<p>晚安，以及劳动节快乐。</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>2017-05-01: 初始化本文</p>
]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode CheatSheet</title>
    <url>/2017/05/27/VSCodeCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我使用 VSCode 的一些开发小技巧。</p>
<p>不定期更新。</p>
<a id="more"></a>

<p>VSCode 是一种编辑器，这显然是一句废话。</p>
<p>这个问题应该是，我为什么要使用 VSCode 作为主力编辑器。有人说：微软出品一定是精品。这个理由很软粉，但是不能打动我更换编辑器的欲望。</p>
<p>使用编辑器自然是求其轻量，高效的文字处理，以及编程的相关环境的支持，以及跨平台和可扩展性。</p>
<ul>
<li><strong>轻量</strong>是求其打开速度快，编辑不卡顿。这一点，用 Vim , Emacs , Sublime Text 完全都可以。</li>
<li><strong>高效的文字处理</strong>是因为满足日常编写文字和代码的需求。</li>
<li><strong>编程相关环境的支持</strong>是因为作为一个学习东西很杂乱的人来说，最痛苦的事情就在于 IDE 常常来不及给一些新技术予以足够的支持，比如说 Docker, 比如说 ansible。</li>
<li><strong>跨平台和可扩展性</strong> 跨平台是必须的，可扩展性则是从插件资源和编写插件的难度考虑。</li>
</ul>
<p>本文的目录结构如下：</p>
<ul>
<li>VSCode 常用命令</li>
</ul>
<h2 id="0x01-VSCode-相关配置"><a href="#0x01-VSCode-相关配置" class="headerlink" title="0x01 VSCode 相关配置"></a>0x01 VSCode 相关配置</h2><p>安装完毕之后，cmd-s-p shell command install</p>
<h2 id="0x02-VSCode-常用命令"><a href="#0x02-VSCode-常用命令" class="headerlink" title="0x02 VSCode 常用命令"></a>0x02 VSCode 常用命令</h2><ul>
<li><strong>Command Palette</strong> : cmd-s-p</li>
<li><strong>cmd-p</strong> : cmd-p</li>
<li><strong>显示状态</strong> : cmd-s-m</li>
<li><strong>下一个错误</strong> : F8 / shift-F8</li>
<li>**** : c-s-p</li>
<li>**** : c-s-p</li>
<li>**** : c-s-p</li>
<li>**** : c-s-p</li>
<li>**** : c-s-p</li>
<li>**** : c-s-p</li>
<li>**** : c-s-p<h2 id="0x03-VS-扩展相关"><a href="#0x03-VS-扩展相关" class="headerlink" title="0x03 VS 扩展相关"></a>0x03 VS 扩展相关</h2></li>
</ul>
<h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2>]]></content>
      <categories>
        <category>编程利器</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>一个基于 TensorFlow 的图片分类器</title>
    <url>/2017/05/29/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8ETensorFlow%E7%9A%84%E5%88%86%E7%B1%BB%E5%99%A8/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><blockquote>
<p>备注：本文训练效果太差，所以直接太监了。</p>
</blockquote>
<p>这年头，不会写爬虫不会写网站，那基本上不能算是一个 Python 程序员，但是 2017 年的 Google IO 之后，作为一个 Pythonist 你不会点数据分析和机器学习，也不好见人了。<br>所以，本文教你在什么机器学习概念都不懂的情况下，做出一个基于 TensorFlow 的图片分类功能，入个门。仅此而已。<br>本文的代码和文章内容主要源于我在 Github 上无意间翻到的一个 Repo, 链接地址，我所做的功夫就是在这基础上将代码改为了 Python 3 / TensorFlow 1.1.0 的环境，将这个流程梳理一下，不算是代码的生产者最多搬运工，仅此而已。</p>
<p>本文的目的是：</p>
<blockquote>
<p>通过 TensorFlow 训练一个小型的分类器，用这个分类器通过照片识别出明星的姓名。</p>
</blockquote>
<p>即我们要训练一个小 AI, 这个小 AI 能分辨欢乐颂里面的五美：</p>
<ul>
<li>乔欣</li>
<li>刘涛</li>
<li>王子文</li>
<li>杨紫</li>
<li>蒋欣</li>
</ul>
<a id="more"></a>

<p>注意：本文主要在 MacOS 上进行测试。<br>本文的目录结构如下：</p>
<ul>
<li>准备训练数据和测试数据</li>
<li>TensorFlow 环境配置</li>
<li>开始训练图片</li>
<li>对图片进行分类</li>
<li>文章回顾</li>
<li>参考链接</li>
</ul>
<p>首先克隆我的 Repo,（我的 Repo 在这里）[<a href="https://github.com/twocucao/the-machine]">https://github.com/twocucao/the-machine]</a> .</p>
<p>仓库结构大致如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── compose</span><br><span class="line">│   └── tensorflow</span><br><span class="line">│       ├── Dockerfile</span><br><span class="line">│       └── Dockerfile-dev</span><br><span class="line">├── config</span><br><span class="line">├── doc</span><br><span class="line">├── image_classifier</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── label_dir.py</span><br><span class="line">│   ├── label_image.py</span><br><span class="line">│   ├── retrain.py</span><br><span class="line">│   └── train.sh</span><br><span class="line">└── bootstrap.sh</span><br></pre></td></tr></table></figure>

<h2 id="0x01-准备训练数据和测试数据"><a href="#0x01-准备训练数据和测试数据" class="headerlink" title="0x01 准备训练数据和测试数据"></a>0x01 准备训练数据和测试数据</h2><p>准备训练数据，数据从哪里来呢？从百度来。我们从百度抓取大约 5 组图片，每组图片大约 1000 张图片，并且从每组里面留下 900 组作为训练数据，抽出 100 作为测试数据。</p>
<h3 id="1-1-抓取图片"><a href="#1-1-抓取图片" class="headerlink" title="1.1 抓取图片"></a>1.1 抓取图片</h3><p>抓取代码放在代码仓库中，比较简单，下载即可用。</p>
<p>在 crawl_baidu_images.py 中填入五美的姓名，运行脚本即可。<br>脚本会请求百度图片的图片，然后下载下来，程序跑完会有如下的图片数据。<br>好，抓取图片我们就完成了。</p>
<h3 id="1-2-归类训练数据"><a href="#1-2-归类训练数据" class="headerlink" title="1.2 归类训练数据"></a>1.2 归类训练数据</h3><p>归类训练数据，其实就是把刚刚下载下来的图片，分类为五美，也就是把刘涛的照片放到刘涛文件夹中。看一下现在的文件夹，似乎已经分类完毕了，是不是这样呢？显然不是，因为：</p>
<ul>
<li>下载下来的图片貌似 JPG 结尾的图片，但是文件内容是不是 JPEG 的格式就不好说了，也可 GIF 也可能是 PNG.</li>
<li>当你搜索刘涛的时候，百度图片给出的不仅仅是刘涛。也可能有胡歌《琅琊榜》, 也可能有胡军《天龙八部》</li>
</ul>
<p>所以下面需要做的是：</p>
<ol>
<li>移除非 JPG 的文件格式</li>
<li>人工确 (jian) 定 (huang) 文件夹中的图片。</li>
</ol>
<p>在做上面这两步之前，我们先新建文件夹 image_classifier_train ( 笔者放在 /Users/twocucao/Codes/Repos/image_classifier_train ), 注意，这个文件夹不要放在代码下面，把五美的文件夹放到这个文件夹下面的 data 文件夹下。并且用拼音命名。</p>
<p>如下：</p>
<p><img src="http://oriw7hkjj.bkt.clouddn.com/WX20170529-160220@2x.png"></p>
<p>我们先移除非 JPEG 的图片。如果是 mac 系统需要先安装 jpeginfo , brew install jpeginfo 即可。<br>进入 /Users/twocucao/Codes/Repos/image_classifier_train 执行下面脚本 <strong>去除非 JPG 的图片</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -iname &quot;*.jpg&quot; -exec jpeginfo -c &#123;&#125; \; | grep -E &quot;WARNING|ERROR&quot; &gt; need_delete.sh</span><br><span class="line">cat need_delete.sh | awk &#39;&#123;print $1&#125;&#39; | xargs rm</span><br><span class="line">rm need_delete.sh</span><br></pre></td></tr></table></figure>

<p>好了接下来，我们需要到每一个文件夹下进行人工<del>鉴黄</del>检验图片是不是五美，比如，到 liutao 文件夹下检查，删除图片基本上没有清晰面容的照片。<br>为了速度，我们把图片转成缩略图大致看一下，去除明显不是五美的照片，我们进行下一步的筛选。</p>
<h3 id="1-3-找出对应的头像"><a href="#1-3-找出对应的头像" class="headerlink" title="1.3 找出对应的头像"></a>1.3 找出对应的头像</h3><p>我们需要从图片库中选出五美的头像来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv global system</span><br><span class="line"></span><br><span class="line">brew reinstall boost-python --with-python3 --without-python</span><br><span class="line">conda install -c menpo dlib=19.4</span><br></pre></td></tr></table></figure>

<h2 id="0x02-TensorFlow-环境配置"><a href="#0x02-TensorFlow-环境配置" class="headerlink" title="0x02 TensorFlow 环境配置"></a>0x02 TensorFlow 环境配置</h2><h3 id="2-1-Docker-的安装和镜像加速"><a href="#2-1-Docker-的安装和镜像加速" class="headerlink" title="2.1 Docker 的安装和镜像加速"></a>2.1 Docker 的安装和镜像加速</h3><p>本文需要使用 Docker 作为环境配置，也正是因为如此，我们可以在很快的时间内搭建起来 tensorflow 的运行环境。目测，Docker 也是未来几年内搭建环境分发环境的首选。<br>Docker 下载不必多说，需要补充一句的是，我们可以在阿里云账户上使用一个 registry 对 Docker 镜像进行加速。<br>在阿里云的容器界面获取加速链接填到 docker 里面即可。如图。</p>
<p><img src="http://oriw7hkjj.bkt.clouddn.com/WX20170529-162953@2x.png"></p>
<h3 id="2-2-构建镜像文件并且构建镜像"><a href="#2-2-构建镜像文件并且构建镜像" class="headerlink" title="2.2 构建镜像文件并且构建镜像"></a>2.2 构建镜像文件并且构建镜像</h3><p>建议在执行构建镜像之前，务必先完成本文的第二小节的图片准备。然后执行下面的命令，将镜像文件构建成镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/twocucao/Codes/Repos/the-machine</span><br><span class="line">docker build -f compose/tensorflow/Dockerfile-dev -t twocucao/tensorflow .</span><br></pre></td></tr></table></figure>

<p>该行命令使用 compose/tensorflow/Dockerfile-dev 作为 Dockerfile 文件，构建镜像名称为 twocucao/tensorflow , 传入的 context 为 当前路径。</p>
<h3 id="2-3-测试-Tensorflow-容器"><a href="#2-3-测试-Tensorflow-容器" class="headerlink" title="2.3 测试 Tensorflow 容器"></a>2.3 测试 Tensorflow 容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it twocucao/tensorflow /bin/bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello tensorflow&#x27;</span></span><br></pre></td></tr></table></figure>
<p>如果运行正常，则一切正常。可以进行下一步骤了。</p>
<h2 id="0x03-开始训练"><a href="#0x03-开始训练" class="headerlink" title="0x03 开始训练"></a>0x03 开始训练</h2><p>执行命令开始训练。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./train.sh /Users/twocucao/Codes/Repos/image_classifier_train</span><br></pre></td></tr></table></figure>

<p>我设置的训练次数为 20000, 在我的本子上基本两个小时，可能时间有些长，没有耐心的童鞋可以吧训练次数调整低一些。然后重新构建镜像。</p>
<blockquote>
<p>那么，当 TensorFlow 在训练的时候，我们要谈些什么？</p>
</blockquote>
<p>Google 开源了 Inception 模型，这个模型从 ImageNet 的上千个分类的图片训练而来，而我们所做的工作，便是在此基础上做最后的增量训练。然而，我们只用来区分女明星，似乎这个 Inception 的模型有点大材小用？好，训练结束之后我们查看一下文件夹 /Users/twocucao/Codes/Repos/image_classifier_train 下，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── bottlenecks</span><br><span class="line">│   ├── jiangxin</span><br><span class="line">│   ├── liutao</span><br><span class="line">│   ├── qiaoxin</span><br><span class="line">│   ├── wangziwen</span><br><span class="line">│   └── yangzi</span><br><span class="line">├── data</span><br><span class="line">│   ├── jiangxin</span><br><span class="line">│   ├── liutao</span><br><span class="line">│   ├── qiaoxin</span><br><span class="line">│   ├── wangziwen</span><br><span class="line">│   └── yangzi</span><br><span class="line">├── inception</span><br><span class="line">│   ├── LICENSE</span><br><span class="line">│   ├── classify_image_graph_def.pb</span><br><span class="line">│   ├── cropped_panda.jpg</span><br><span class="line">│   ├── imagenet_2012_challenge_label_map_proto.pbtxt</span><br><span class="line">│   ├── imagenet_synset_to_human_label_map.txt</span><br><span class="line">│   └── inception-2015-12-05.tgz</span><br><span class="line">├── retrained_graph.pb</span><br><span class="line">├── retrained_labels.txt</span><br><span class="line">└── test_data</span><br><span class="line">    ├── src</span><br><span class="line">    └── target</span><br></pre></td></tr></table></figure>

<p>Bottlenecks 文件夹为我们将每一张 JPG 转成矩阵的文本<br>Inception 为 Google 开源的模型文件。<br>retrained_graph.pb 为训练出来的图的模型文件。<br>retrained_labels.txt 为标签。</p>
<p>如下图不断刷出的一坨坨的文字是什么呢？</p>
<ul>
<li>时间 , 无需多说</li>
<li>当前训练次数</li>
<li>Train accuracy = 87.0%</li>
<li>Cross entropy = 0.499145</li>
<li>Validation accuracy = 52.0% (N=100)</li>
</ul>
<p>看到 Train accuracy &gt;&gt; Validation accuracy 估计是模型过度拟合了，嗯，看来这个模型还是有点问题的。</p>
<h2 id="0x04-对图片进行分类"><a href="#0x04-对图片进行分类" class="headerlink" title="0x04 对图片进行分类"></a>0x04 对图片进行分类</h2><h3 id="4-1-开始分类"><a href="#4-1-开始分类" class="headerlink" title="4.1 开始分类"></a>4.1 开始分类</h3><h3 id="4-2-对分类结果进行评估"><a href="#4-2-对分类结果进行评估" class="headerlink" title="4.2 对分类结果进行评估"></a>4.2 对分类结果进行评估</h3><h2 id="0x05-文章回顾"><a href="#0x05-文章回顾" class="headerlink" title="0x05 文章回顾"></a>0x05 文章回顾</h2><h2 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h2><ul>
<li><a href="https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/index.html">https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/index.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas Cheatsheet</title>
    <url>/2017/06/03/PandasCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Pandas 相关语句。</p>
<p>主要包含：</p>
<ul>
<li>Pandas 中 Series 的一些常见操作和技巧</li>
<li>Pandas 中 Dateframe 的一些常见操作和技巧</li>
<li>Python 里的可视化技巧</li>
<li>Pandas 使用过程中的一些细节</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>

<blockquote>
<p>SQL 是一种面向集合的处理工具 / 语言<br>Pandas 是一种面向数组的处理工具</p>
</blockquote>
<blockquote>
<p><strong>而一般处理 pandas 的数据往往以二维表的形式存在。所以，可以类比为更加强大的 SQL 语言。</strong></p>
</blockquote>
<p>而依据 Pandas 的作者之言，牛逼的 Pandas 使用者必须要精通 numpy; 当然，关于 Numpy, 留待之后开一篇文章做笔记好了。</p>
<h2 id="0x01-Series-相关"><a href="#0x01-Series-相关" class="headerlink" title="0x01 Series 相关"></a>0x01 Series 相关</h2><p>Series 接近于 ndarray 的用法，区别仅仅在于会带上 label 而已</p>
<blockquote>
<p>关于 ndarray, 请参考 我的另一篇文章 Numpy Cheatsheet</p>
</blockquote>
<h2 id="0x02-DataFrame-相关"><a href="#0x02-DataFrame-相关" class="headerlink" title="0x02 DataFrame 相关"></a>0x02 DataFrame 相关</h2><h3 id="2-1-对象创建"><a href="#2-1-对象创建" class="headerlink" title="2.1 对象创建"></a>2.1 对象创建</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 1. 内存变量转 Dataframe</span></span><br><span class="line"><span class="comment">## 1.1. 通过二位矩阵 , index , columns</span></span><br><span class="line">dates = pd.date_range(<span class="string">&#x27;20130101&#x27;</span>, periods=<span class="number">6</span>)</span><br><span class="line">pd = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index=dates, columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line"><span class="comment">## 1.2. 通过字典 Key 为 Column , Value 为 list,timestamp,np.array,value</span></span><br><span class="line">df2 = pd.DataFrame(&#123; <span class="string">&#x27;A&#x27;</span> : <span class="number">1.</span>,</span><br><span class="line">                     <span class="string">&#x27;B&#x27;</span> : pd.Timestamp(<span class="string">&#x27;20130102&#x27;</span>),</span><br><span class="line">                     <span class="string">&#x27;C&#x27;</span> : pd.Series(<span class="number">1</span>,index=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>)),dtype=<span class="string">&#x27;float32&#x27;</span>),</span><br><span class="line">                     <span class="string">&#x27;D&#x27;</span> : np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">&#x27;int32&#x27;</span>),</span><br><span class="line">                     <span class="string">&#x27;E&#x27;</span> : pd.Categorical([<span class="string">&quot;test&quot;</span>,<span class="string">&quot;train&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;train&quot;</span>]),</span><br><span class="line">                     <span class="string">&#x27;F&#x27;</span> : <span class="string">&#x27;foo&#x27;</span> &#125;)</span><br><span class="line"><span class="comment"># 长度无需统一，会自动填充</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 从文件中读取</span></span><br><span class="line">pd.read_excel(<span class="string">&quot;./data_set.xlsx&quot;</span>,index_col=<span class="literal">False</span>) <span class="comment"># 关掉 Index</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 合并多个同样的 DataFrame</span></span><br><span class="line">df_items = [df_item1,df_item2,...]</span><br><span class="line">df = pd.concat(df_items).drop_duplicates()</span><br><span class="line">df.merge(data_set_df, left_on=<span class="string">&quot;lno&quot;</span>, right_on=<span class="string">&quot;rno&quot;</span>, how=<span class="string">&quot;outer&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.series to dataframe</span></span><br><span class="line">df = s.to_frame()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>选择数据<br>    Getting<br>    Selection by Label<br>    Selection by Position<br>    Boolean Indexing<br>    Setting<br>缺失数据<br>数据操作<br>    Operations<br>    Stats<br>    Apply<br>    Histogramming<br>    String Methods<br>数据合并<br>    Concat<br>    Join<br>    Append<br>Grouping<br>Reshaping<br>    Stack<br>    Pivot Tables<br>Time Series<br>Categoricals<br>Plotting</p>
<h3 id="2-2-浏览数据"><a href="#2-2-浏览数据" class="headerlink" title="2.2 浏览数据"></a>2.2 浏览数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 查看表结构</span></span><br><span class="line"></span><br><span class="line">df.head()</span><br><span class="line">df.tail(<span class="number">3</span>)</span><br><span class="line">df.index</span><br><span class="line"><span class="comment"># df.index = [&#x27;日期&#x27;,&#x27;小时&#x27;]</span></span><br><span class="line">df.columns</span><br><span class="line">df.columns = <span class="built_in">map</span>(<span class="built_in">str</span>.lower, df.columns)</span><br><span class="line"></span><br><span class="line">df.values</span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;col&#x27;</span>] = df[<span class="string">&#x27;col&#x27;</span>].astype(<span class="built_in">str</span>).convert_objects(convert_numeric=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 删除 col_name</span></span><br><span class="line"></span><br><span class="line">df.drop([<span class="string">&#x27;col_name_1&#x27;</span>,<span class="string">&#x27;col_name_2&#x27;</span>,...,<span class="string">&#x27;col_name_N&#x27;</span>],inplace=<span class="literal">True</span>,axis=<span class="number">1</span>,errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> df[<span class="string">&#x27;cola&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 修改元数据</span></span><br><span class="line">df.rename(columns=<span class="keyword">lambda</span> x: x.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">df.rename(columns=&#123;<span class="string">&#x27;oldName1&#x27;</span>: <span class="string">&#x27;newName1&#x27;</span>, <span class="string">&#x27;oldName2&#x27;</span>: <span class="string">&#x27;newName2&#x27;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line">df.rename(columns = &#123;<span class="number">0</span>: <span class="string">&#x27;cola&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;colb&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;colc&#x27;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.</span></span><br><span class="line"><span class="comment">## 2. 遍历</span></span><br><span class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    <span class="built_in">print</span> row[<span class="string">&quot;c1&quot;</span>], row[<span class="string">&quot;c2&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> df.itertuples(index=<span class="literal">True</span>, name=<span class="string">&#x27;Pandas&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">getattr</span>(row, <span class="string">&quot;c1&quot;</span>), <span class="built_in">getattr</span>(row, <span class="string">&quot;c2&quot;</span>)</span><br><span class="line">= IF([@price] &lt; <span class="number">1</span>, <span class="string">&quot;未知&quot;</span>,IF([@price] &lt; <span class="number">30000</span>, <span class="string">&quot;三万以下&quot;</span>, IF([@price] &lt;= <span class="number">50000</span>, <span class="string">&quot;三万到五万&quot;</span>, IF([@price] &lt;= <span class="number">100000</span>, <span class="string">&quot;五万到十万&quot;</span>, IF([@price] &lt;= <span class="number">10000000</span>, <span class="string">&quot;十万以上&quot;</span>, <span class="string">&quot;其他&quot;</span>)))))</span><br></pre></td></tr></table></figure>

<h3 id="2-3-修改表内容"><a href="#2-3-修改表内容" class="headerlink" title="2.3 修改表内容"></a>2.3 修改表内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.drop_duplicates([<span class="string">&#x27;col_a&#x27;</span>,<span class="string">&#x27;col_b&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h3 id="2-4-查看表内容"><a href="#2-4-查看表内容" class="headerlink" title="2.4 查看表内容"></a>2.4 查看表内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择</span></span><br><span class="line">df[<span class="string">&#x27;A&#x27;</span>] <span class="comment"># 列选</span></span><br><span class="line">df[<span class="number">0</span>:<span class="number">30</span>] <span class="comment"># 行选</span></span><br><span class="line">df[<span class="string">&#x27;20130102&#x27;</span>:<span class="string">&#x27;20130104&#x27;</span>] <span class="comment"># 行选</span></span><br><span class="line">df.loc[<span class="string">&#x27;20130102&#x27;</span>:<span class="string">&#x27;20130104&#x27;</span>,[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]] <span class="comment"># by label</span></span><br><span class="line">df.loc[condition,[<span class="string">&#x27;cola&#x27;</span>,<span class="string">&#x27;colb&#x27;</span>]]</span><br><span class="line">df.loc[[<span class="string">&#x27;ri01&#x27;</span>,<span class="string">&#x27;ri02&#x27;</span>] , [<span class="string">&quot;cola&quot;</span>,<span class="string">&quot;colb&quot;</span>,<span class="string">&quot;colc&quot;</span>]]</span><br><span class="line"></span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">5</span>, <span class="number">2</span>:<span class="number">4</span>] <span class="comment"># by position</span></span><br><span class="line">df.iloc[: , <span class="number">0</span>:<span class="number">7</span>] <span class="comment"># 全部列，0-7 索引</span></span><br><span class="line"></span><br><span class="line">df.ix[[<span class="string">&#x27;ri02&#x27;</span>, <span class="string">&#x27;ri09&#x27;</span>]] <span class="comment"># 选取行</span></span><br><span class="line"></span><br><span class="line">total_rows=<span class="built_in">len</span>(df.axes[<span class="number">0</span>])</span><br><span class="line">total_cols=<span class="built_in">len</span>(df.axes[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">df.sample(<span class="number">3000</span>) <span class="comment"># 随机抽取 3000 行，可以用于快速验证算法</span></span><br><span class="line"></span><br><span class="line">criterion = df2[<span class="string">&#x27;a&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.startswith(<span class="string">&#x27;t&#x27;</span>))</span><br><span class="line">df2[criterion]</span><br><span class="line"></span><br><span class="line">df2[[x.startswith(<span class="string">&#x27;t&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> df2[<span class="string">&#x27;a&#x27;</span>]]]</span><br><span class="line"><span class="comment"># select * from df limit 5</span></span><br><span class="line">df.head()</span><br><span class="line"><span class="comment"># select a,b,c from df</span></span><br><span class="line">df[[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]].head()</span><br><span class="line"><span class="comment"># select a,b,c from df where a = 11 and b = &#x27;xx&#x27;</span></span><br><span class="line">df[ ( df[<span class="string">&#x27;a&#x27;</span>] == <span class="number">11</span>) &amp; ( df[<span class="string">&#x27;b&#x27;</span>] == <span class="string">&#x27;xx&#x27;</span>) ][[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]]</span><br><span class="line">df[<span class="string">&#x27;a&#x27;</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># SELECT * FROM df ORDER BY a DESC LIMIT 10 OFFSET 5;</span></span><br><span class="line">df.nlargest(<span class="number">10</span>+<span class="number">5</span>, columns=<span class="string">&#x27;a&#x27;</span>).tail(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">df.column.<span class="built_in">str</span>[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">df.column_name.<span class="built_in">str</span>.<span class="built_in">len</span>()</span><br><span class="line">two_groups = <span class="string">&#x27;(?P&lt;letter&gt;[a-z])(?P&lt;digit&gt;[0-9])&#x27;</span></span><br><span class="line">s.<span class="built_in">str</span>.extract(two_groups, expand=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line"></span><br><span class="line">df.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">df.sort_values(by=<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">df = df.sort([<span class="string">&#x27;col1&#x27;</span>,<span class="string">&#x27;col2&#x27;</span>,<span class="string">&#x27;col3&#x27;</span>],ascending=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># window function</span></span><br><span class="line"><span class="comment"># SELECT a, b, c, rank() OVER (PARTITION BY a ORDER BY b DESC) as rn FROM df;</span></span><br><span class="line"><span class="comment"># 如果没有这个 window function 的话，可以 groupby 一下，然后生成表和原有表进行 JOIN</span></span><br><span class="line">tips.assign(rn=tips.sort_values([<span class="string">&#x27;b&#x27;</span>], ascending=<span class="literal">False</span>).groupby([<span class="string">&#x27;a&#x27;</span>]).cumcount() + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Top N rows per group</span></span><br><span class="line"><span class="comment"># rank 代表等级 如果两人并列第一名，则不存在第二名，直接是第三名 , row_number 代表排名，即即便两个人分数一样，也无法并列第一名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PostGRESQL&#x27;s ROW_NUMBER() analytic function</span></span><br><span class="line">SELECT * FROM (</span><br><span class="line">  SELECT</span><br><span class="line">    t.*,</span><br><span class="line">    ROW_NUMBER() OVER(PARTITION BY day ORDER BY total_bill DESC) AS rn</span><br><span class="line">  FROM tips t</span><br><span class="line">) tt</span><br><span class="line">WHERE rn &lt; <span class="number">3</span></span><br><span class="line">ORDER BY day, rn;</span><br><span class="line"></span><br><span class="line">(tips.assign(rn=tips.sort_values([<span class="string">&#x27;total_bill&#x27;</span>], ascending=<span class="literal">False</span>)</span><br><span class="line">                    .groupby([<span class="string">&#x27;day&#x27;</span>])</span><br><span class="line">                    .cumcount() + <span class="number">1</span>)</span><br><span class="line">     .query(<span class="string">&#x27;rn &lt; 3&#x27;</span>)</span><br><span class="line">     .sort_values([<span class="string">&#x27;day&#x27;</span>,<span class="string">&#x27;rn&#x27;</span>])</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(tips.assign(rnk=tips.groupby([<span class="string">&#x27;day&#x27;</span>])[<span class="string">&#x27;total_bill&#x27;</span>]</span><br><span class="line">                     .rank(method=<span class="string">&#x27;first&#x27;</span>, ascending=<span class="literal">False</span>))</span><br><span class="line">     .query(<span class="string">&#x27;rnk &lt; 3&#x27;</span>)</span><br><span class="line">     .sort_values([<span class="string">&#x27;day&#x27;</span>,<span class="string">&#x27;rnk&#x27;</span>])</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PostGRESQL&#x27;s RANK() analytic function</span></span><br><span class="line">SELECT * FROM (</span><br><span class="line">  SELECT</span><br><span class="line">    t.*,</span><br><span class="line">    RANK() OVER(PARTITION BY sex ORDER BY tip) AS rnk</span><br><span class="line">  FROM tips t</span><br><span class="line">  WHERE tip &lt; <span class="number">2</span></span><br><span class="line">)</span><br><span class="line">WHERE rnk &lt; <span class="number">3</span></span><br><span class="line">ORDER BY sex, rnk;</span><br><span class="line"></span><br><span class="line">(tips[tips[<span class="string">&#x27;tip&#x27;</span>] &lt; <span class="number">2</span>]</span><br><span class="line">     .assign(rnk_min=tips.groupby([<span class="string">&#x27;sex&#x27;</span>])[<span class="string">&#x27;tip&#x27;</span>]</span><br><span class="line">                         .rank(method=<span class="string">&#x27;min&#x27;</span>))</span><br><span class="line">     .query(<span class="string">&#x27;rnk_min &lt; 3&#x27;</span>)</span><br><span class="line">     .sort_values([<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;rnk_min&#x27;</span>])</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># where 语句</span></span><br><span class="line">df[<span class="string">&#x27;a&#x27;</span>].isnull()</span><br><span class="line">df[<span class="string">&#x27;a&#x27;</span>].isin(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># groupby</span></span><br><span class="line">df.groupby(<span class="string">&#x27;a&#x27;</span>).size() <span class="comment"># 计算 a</span></span><br><span class="line">df.groupby(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;b&#x27;</span>].count() <span class="comment"># 同上计算 a</span></span><br><span class="line">df.groupby(<span class="string">&#x27;a&#x27;</span>).count() <span class="comment"># 计算所有 cols</span></span><br><span class="line">agg_fun_dict = &#123;<span class="string">&#x27;tip&#x27;</span>: np.mean, <span class="string">&#x27;day&#x27;</span>: np.size&#125;</span><br><span class="line">agg_fun_dict_new = &#123;<span class="string">&#x27;tip&#x27;</span>: [np.mean, np.size]&#125;</span><br><span class="line">df.groupby(<span class="string">&#x27;a&#x27;</span>)[[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]].agg(agg_fun_dict)</span><br><span class="line">df.groupby(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;b&#x27;</span>].describe()</span><br><span class="line">df.age.agg([<span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;max&#x27;</span>])</span><br><span class="line">df.applymap(multiply_10_for_every_int) <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">calc_groups = df.groupby([date])</span><br><span class="line">calc_groups[<span class="string">&#x27;id_aa&#x27;</span>].nunique().reset_index().to_excel(<span class="string">&quot;123.xlsx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pivot</span></span><br><span class="line">pd.pivot_table(data=df,values=<span class="string">&#x27;value_col&#x27;</span>, index=<span class="string">&#x27;A_FROM&#x27;</span>, columns=<span class="string">&#x27;B_TO&#x27;</span>, aggfunc=<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x.unique()),margins=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CONCAT</span></span><br><span class="line">append</span><br><span class="line"><span class="comment"># JOIN</span></span><br><span class="line">pd.merge(df1, df2, on=<span class="string">&#x27;key&#x27;</span>, how=<span class="string">&#x27;outer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># UPDATE tips SET tip = tip*2 WHERE tip &lt; 2;</span></span><br><span class="line">tips.loc[tips[<span class="string">&#x27;tip&#x27;</span>] &lt; <span class="number">2</span>, <span class="string">&#x27;tip&#x27;</span>] *= <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span></span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-表变换"><a href="#2-5-表变换" class="headerlink" title="2.5 表变换"></a>2.5 表变换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apply , apply map</span></span><br><span class="line">DataFrame.apply operates on entire rows <span class="keyword">or</span> columns at a time.</span><br><span class="line">DataFrame.applymap, Series.apply, <span class="keyword">and</span> Series.<span class="built_in">map</span> operate on one element at time.</span><br></pre></td></tr></table></figure>

<h3 id="2-6-表遍历"><a href="#2-6-表遍历" class="headerlink" title="2.6 表遍历"></a>2.6 表遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iterrows()</span><br><span class="line">df.itertuples()</span><br></pre></td></tr></table></figure>

<h2 id="数据导入导出"><a href="#数据导入导出" class="headerlink" title="数据导入导出"></a>数据导入导出</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.url <span class="keyword">import</span> URL</span><br><span class="line">DATABASE = &#123;</span><br><span class="line">    <span class="string">&#x27;drivername&#x27;</span>: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>: <span class="string">&#x27;5432&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;yourusername&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;yourpass&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>: <span class="string">&#x27;yourdb&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 这里并不建议直接写数据库连接字符串，而是使用 URL 函数，这样可以避免转义字符带来的坑，比如 @ 在数据库连接字符串是 %40</span></span><br><span class="line">engine = create_engine(URL(**DATABASE))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读一整张表</span></span><br><span class="line"><span class="keyword">with</span> engine.connect() <span class="keyword">as</span> conn, conn.begin():</span><br><span class="line">    data = pd.read_sql_table(<span class="string">&#x27;yourtablehere&#x27;</span>, conn)</span><br><span class="line">    processyourdata(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照 SQL 语句来读</span></span><br><span class="line"><span class="keyword">with</span> engine.connect() <span class="keyword">as</span> conn, conn.begin():</span><br><span class="line">    data = pd.read_sql(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    yoursqlquery</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>, conn)</span><br><span class="line">    processyourdata(data)</span><br></pre></td></tr></table></figure>

<h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><p>日常数据处理用 CSV 的比较多，因为这种格式语法简洁，类二维表，读写速度快，而且配合 gzip 压缩解压。</p>
<p>pandas 在 windows 上好像不能读取中文路径？</p>
<p>而且，pandas 读取的时候要注意指定编码。因为在日常导出 CSV 的时往往使用的是 utf-8, 而 windows 默认打开文本文件时候使用的是 gbk</p>
<p>read_csv 有几十个参数，挑几个说一下：</p>
<ul>
<li>sep 可以指定分隔符，默认为’,’, 但有的人导出的数据以 tab 为空格。</li>
<li>dtype 可以指定某些列的值类型为 int,float 的类型从而减少 object 的创建 , 但是对 str/object 没有什么暖用</li>
<li>parse_dates 可以指定 date 列</li>
<li>header 如果 CSV 没有 Header, 可以指定为 None</li>
<li>usecols 可以指定几列，相当于数据库中的 SELECT a_col,b_col</li>
</ul>
<p>其中还有一些比较有趣的东西，比如说，iterator=True<br>值得注意的是，通过</p>
<h3 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h3><p>Gotchas</p>
<h2 id="0x02-可视化技术"><a href="#0x02-可视化技术" class="headerlink" title="0x02 可视化技术"></a>0x02 可视化技术</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制</span></span><br><span class="line">df.plot(kind=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;xlable&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;ylable&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;title name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;数量&#x27;</span>].plot(kind=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量创建图</span></span><br><span class="line">g = sns.FacetGrid(customers, col=<span class="string">&quot;cola&quot;</span>)</span><br><span class="line">g.<span class="built_in">map</span>(plt.scatter, <span class="string">&quot;数量&quot;</span>, <span class="string">&quot;单位&quot;</span>, alpha=<span class="number">1</span>)</span><br><span class="line">g.add_legend();</span><br><span class="line"></span><br><span class="line">ttbill = sns.distplot(tips[<span class="string">&quot;总价格&quot;</span>]);</span><br><span class="line">ttbill.<span class="built_in">set</span>(xlabel = <span class="string">&#x27;价值&#x27;</span>, ylabel = <span class="string">&#x27;频率&#x27;</span>, title = <span class="string">&quot;标题名&quot;</span>)</span><br><span class="line">sns.despine()</span><br><span class="line"></span><br><span class="line">sns.jointplot(x =<span class="string">&quot;total_bill&quot;</span>, y =<span class="string">&quot;tip&quot;</span>, data = tips)</span><br><span class="line"><span class="comment"># https://github.com/guipsamora/pandas_exercises/blob/master/07_Visualization/Tips/Exercises_with_code_and_solutions.ipynb</span></span><br><span class="line"></span><br><span class="line">plt.pie(</span><br><span class="line">    [<span class="number">100</span>,<span class="number">300</span>],</span><br><span class="line">    labels = [<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>],</span><br><span class="line">    shadow = <span class="literal">False</span>,</span><br><span class="line">    colors = [<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;red&#x27;</span>],</span><br><span class="line">    explode = (<span class="number">0.15</span> , <span class="number">0</span>),</span><br><span class="line">    startangle = <span class="number">90</span>,</span><br><span class="line">    autopct = <span class="string">&#x27;%1.1f%%&#x27;</span></span><br><span class="line">    )</span><br><span class="line">plt.axis(<span class="string">&#x27;equal&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;男女比例&quot;</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="0x03-asd1"><a href="#0x03-asd1" class="headerlink" title="0x03 asd1"></a>0x03 asd1</h2><h2 id="0x07-Performance-Tips"><a href="#0x07-Performance-Tips" class="headerlink" title="0x07 Performance Tips"></a>0x07 Performance Tips</h2><p>最近遇到了数据量比较大的数据处理，数据条数差不多在 3 千万条。加载到内存中大约 1GB.</p>
<h3 id="7-1-精简行列"><a href="#7-1-精简行列" class="headerlink" title="7.1 精简行列"></a>7.1 精简行列</h3><ol>
<li>读入 dataframe 的时候就排除多余的行列。</li>
<li>Merge 时候需要精简行列。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1.merge(df2[<span class="built_in">list</span>(<span class="string">&#x27;xab&#x27;</span>)])</span><br><span class="line">pandas.merge(dataframe1, dataframe2.iloc[:, [<span class="number">0</span>:<span class="number">5</span>]], how=<span class="string">&#x27;left&#x27;</span>, on=<span class="string">&#x27;key&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7-2-大文件的处理"><a href="#7-2-大文件的处理" class="headerlink" title="7.2 大文件的处理"></a>7.2 大文件的处理</h3><blockquote>
<p>参考我的文章 记一次小机器的 Python 大数据分析</p>
</blockquote>
<h2 id="0x-踩坑集合"><a href="#0x-踩坑集合" class="headerlink" title="0x 踩坑集合"></a>0x 踩坑集合</h2><h2 id="0x08-踩坑集合"><a href="#0x08-踩坑集合" class="headerlink" title="0x08 踩坑集合"></a>0x08 踩坑集合</h2><h3 id="8-1-IO-类"><a href="#8-1-IO-类" class="headerlink" title="8.1 IO 类"></a>8.1 IO 类</h3><p>####</p>
<h3 id="8-2-IO-类"><a href="#8-2-IO-类" class="headerlink" title="8.2 IO 类"></a>8.2 IO 类</h3><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-06-03</strong> 初始化本文</li>
<li><strong>2018-02-03</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>Pandas</tag>
        <tag>效率</tag>
        <tag>工作自动化</tag>
        <tag>Cheatsheet</tag>
      </tags>
  </entry>
  <entry>
    <title>Git CheatSheet</title>
    <url>/2017/06/15/GitCheatSheet/</url>
    <content><![CDATA[<h1 id="如何优雅地使用-Git"><a href="#如何优雅地使用-Git" class="headerlink" title="如何优雅地使用 Git"></a>如何优雅地使用 Git</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Git 是一种分布式版本管理工具。</p>
<h2 id="0x01-Git-命令范论"><a href="#0x01-Git-命令范论" class="headerlink" title="0x01 Git 命令范论"></a>0x01 Git 命令范论</h2><ol>
<li>基础命令 （本地修改类）</li>
<li>合作命令 （本地与仓库类）</li>
<li>综合命令</li>
<li>管理命令</li>
</ol>
<p>前两种命令是入门 Git 的程序员都必须要会的。</p>
<p>而队伍里的技术管理人员必须要会前三。</p>
<h3 id="1-1-基础命令"><a href="#1-1-基础命令" class="headerlink" title="1.1 基础命令"></a>1.1 基础命令</h3><ul>
<li>git-init(1) to create a new repository.</li>
<li>git-log(1) to see what happened.</li>
<li>git-checkout(1) and git-branch(1) to switch branches.</li>
<li>git-add(1) to manage the index file.</li>
<li>git-diff(1) and git-status(1) to see what you are in the middle of doing.</li>
<li>git-commit(1) to advance the current branch.</li>
<li>git-reset(1) and git-checkout(1) (with pathname parameters) to undo changes.</li>
<li>git-merge(1) to merge between local branches.</li>
<li>git-rebase(1) to maintain topic branches.</li>
<li>git-tag(1) to mark a known point.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar zxf frotz.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> frotz</span><br><span class="line">$ git init</span><br><span class="line">$ git add . (1)</span><br><span class="line">$ git commit -m <span class="string">&quot;import of frotz source tree.&quot;</span></span><br><span class="line">$ git tag v2.43 (2)</span><br><span class="line"></span><br><span class="line">$ git checkout -b alsa-audio (1)</span><br><span class="line">$ edit/compile/<span class="built_in">test</span></span><br><span class="line">$ git checkout -- curses/ux_audio_oss.c (2) <span class="comment"># 恢复文件</span></span><br><span class="line">$ git add curses/ux_audio_alsa.c (3)</span><br><span class="line">$ edit/compile/<span class="built_in">test</span></span><br><span class="line">$ git diff HEAD (4) <span class="comment"># 查看提交了哪些修改</span></span><br><span class="line">$ git commit -a -s (5) <span class="comment"># 提交所有</span></span><br><span class="line">$ edit/compile/<span class="built_in">test</span></span><br><span class="line">$ git diff HEAD^ (6) <span class="comment"># 查看所有变化，包含之前的 commit</span></span><br><span class="line">$ git commit -a --amend (7) <span class="comment"># 修订前一个 commit, 把所有的新变化提交到</span></span><br><span class="line">$ git checkout master (8)</span><br><span class="line">$ git merge alsa-audio (9)</span><br><span class="line">$ git <span class="built_in">log</span> --since=<span class="string">&#x27;3 days ago&#x27;</span> (10)</span><br><span class="line">$ git <span class="built_in">log</span> v2.43.. curses/ (11)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-合作命令"><a href="#1-2-合作命令" class="headerlink" title="1.2 合作命令"></a>1.2 合作命令</h3><ul>
<li> git-clone(1) from the upstream to prime your local repository.</li>
<li> git-pull(1) and git-fetch(1) from “origin” to keep up-to-date with the upstream.</li>
<li> git-push(1) to shared repository, if you adopt CVS style shared repository workflow.</li>
<li> git-format-patch(1) to prepare e-mail submission, if you adopt Linux kernel-style public forum workflow.</li>
<li> git-send-email(1) to send your e-mail submission without corruption by your MUA.</li>
<li> git-request-pull(1) to create a summary of changes for your upstream to pull.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## clone 修改 提交</span></span><br><span class="line">$ git <span class="built_in">clone</span> git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6</span><br><span class="line">$ <span class="built_in">cd</span> my2.6</span><br><span class="line">$ git checkout -b mine master (1)</span><br><span class="line">$ edit/compile/<span class="built_in">test</span>; git commit -a -s (2)</span><br><span class="line">$ git format-patch master (3)</span><br><span class="line">$ git send-email --to=<span class="string">&quot;person &lt;email@example.com&gt;&quot;</span> 00*.patch (4)</span><br><span class="line">$ git checkout master (5)</span><br><span class="line">$ git pull (6)</span><br><span class="line">$ git <span class="built_in">log</span> -p ORIG_HEAD.. arch/i386 include/asm-i386 (7) <span class="comment"># 查看感兴趣的部分</span></span><br><span class="line">$ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8) <span class="comment"># 查看分支</span></span><br><span class="line">$ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9) <span class="comment"># 从一个特地</span></span><br><span class="line">$ git reset --hard ORIG_HEAD (10) <span class="comment"># 撤销 pull</span></span><br><span class="line">$ git gc (11) <span class="comment"># garbage collect leftover objects from reverted pull</span></span><br><span class="line"><span class="comment"># 推送到其他 repo</span></span><br><span class="line"></span><br><span class="line">satellite$ git <span class="built_in">clone</span> mothership:frotz frotz (1)</span><br><span class="line">satellite$ <span class="built_in">cd</span> frotz</span><br><span class="line">satellite$ git config --get-regexp <span class="string">&#x27;^(remote|branch)\.&#x27;</span> (2)</span><br><span class="line">remote.origin.url mothership:frotz</span><br><span class="line">remote.origin.fetch refs/heads/*:refs/remotes/origin/*</span><br><span class="line">branch.master.remote origin</span><br><span class="line">branch.master.merge refs/heads/master</span><br><span class="line">satellite$ git config remote.origin.push \</span><br><span class="line">            +refs/heads/*:refs/remotes/satellite/* (3)</span><br><span class="line">satellite$ edit/compile/<span class="built_in">test</span>/commit</span><br><span class="line">satellite$ git push origin (4)</span><br><span class="line"></span><br><span class="line">mothership$ <span class="built_in">cd</span> frotz</span><br><span class="line">mothership$ git checkout master</span><br><span class="line">mothership$ git merge satellite/master (5)</span><br><span class="line"></span><br><span class="line">           1. mothership machine has a frotz repository under your home directory; <span class="built_in">clone</span> from it to start a repository on the satellite machine.</span><br><span class="line">           2. <span class="built_in">clone</span> sets these configuration variables by default. It arranges git pull to fetch and store the branches of mothership machine to <span class="built_in">local</span> remotes/origin/* remote-tracking</span><br><span class="line">           branches.</span><br><span class="line">           3. arrange git push to push all <span class="built_in">local</span> branches to their corresponding branch of the mothership machine.</span><br><span class="line">           4. push will stash all our work away on remotes/satellite/* remote-tracking branches on the mothership machine. You could use this as a back-up method. Likewise, you can</span><br><span class="line">           pretend that mothership <span class="string">&quot;fetched&quot;</span> from you (useful when access is one sided).</span><br><span class="line">           5. on mothership machine, merge the work <span class="keyword">done</span> on the satellite machine into the master branch.</span><br><span class="line"></span><br><span class="line">       Branch off of a specific tag.</span><br><span class="line"></span><br><span class="line">               $ git checkout -b private2.6.14 v2.6.14 (1)</span><br><span class="line">               $ edit/compile/<span class="built_in">test</span>; git commit -a</span><br><span class="line">               $ git checkout master</span><br><span class="line">               $ git cherry-pick v2.6.14..private2.6.14 (2)</span><br><span class="line"></span><br><span class="line">           1. create a private branch based on a well known (but somewhat behind) tag.</span><br><span class="line">           2. forward port all changes <span class="keyword">in</span> private2.6.14 branch to master branch without a formal <span class="string">&quot;merging&quot;</span>. Or longhand git format-patch -k -m --stdout v2.6.14..private2.6.14 | git am -3</span><br><span class="line">           -k</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-3-综合个体"><a href="#1-3-综合个体" class="headerlink" title="1.3 综合个体"></a>1.3 综合个体</h3><h3 id="1-4-仓库管理"><a href="#1-4-仓库管理" class="headerlink" title="1.4 仓库管理"></a>1.4 仓库管理</h3><p>安装完毕之后，cmd-s-p shell command install</p>
<h2 id="0x02-Git-Hacks"><a href="#0x02-Git-Hacks" class="headerlink" title="0x02 Git Hacks"></a>0x02 Git Hacks</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索代码的变化</span></span><br><span class="line">git <span class="built_in">log</span> -S<span class="string">&#x27;&lt;a term in the source&gt;&#x27;</span></span><br><span class="line"><span class="comment"># 放弃本地修改，与远程同步</span></span><br><span class="line">git fetch origin &amp;&amp; git reset --hard origin/master &amp;&amp; git clean -f -d</span><br><span class="line"><span class="comment"># 列出所有冲突文件</span></span><br><span class="line">git diff --name-only --diff-filter=U</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手贱错误提交，但是没有 push</span></span><br><span class="line">git commit -m <span class="string">&quot;Something terribly misguided&quot;</span>              (1)</span><br><span class="line">git reset HEAD~                                           (2)</span><br><span class="line"><span class="comment"># edit needing changed files</span></span><br><span class="line">git add needing changed files                             (4)</span><br><span class="line">git commit -c ORIG_HEAD                                   (5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete all changes in the Git repository, but leave unstaged things</span></span><br><span class="line">git checkout .</span><br><span class="line"><span class="comment"># Delete all changes in the Git repository, including untracked files</span></span><br><span class="line">git clean -f</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0x03-Git-和-我的-Workflow"><a href="#0x03-Git-和-我的-Workflow" class="headerlink" title="0x03 Git 和 我的 Workflow"></a>0x03 Git 和 我的 Workflow</h2><p>一切工具都是为思路服务。</p>
<h2 id="0xEE-扩展阅读"><a href="#0xEE-扩展阅读" class="headerlink" title="0xEE 扩展阅读"></a>0xEE 扩展阅读</h2>]]></content>
      <categories>
        <category>编程利器</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim Cheatsheet</title>
    <url>/2017/06/23/VimCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中 Vim 使用场景。</p>
<p>不定期更新。</p>
<a id="more"></a>

<ul>
<li>配置</li>
<li>基本使用技巧</li>
<li>原生 Tips &amp; Hacks</li>
<li>Vim 必备插件</li>
</ul>
<h2 id="0x01-配置"><a href="#0x01-配置" class="headerlink" title="0x01 配置"></a>0x01 配置</h2><p>原先使用 k-vim 进行日常的编辑，然后依据自己的一些需求进行微调为 c-vim 。</p>
<p><a href="https://github.com/twocucao/c-vim">https://github.com/twocucao/c-vim</a></p>
<h2 id="0x02-基本使用技巧"><a href="#0x02-基本使用技巧" class="headerlink" title="0x02 基本使用技巧"></a>0x02 基本使用技巧</h2><h3 id="2-1-Insert-Mode"><a href="#2-1-Insert-Mode" class="headerlink" title="2.1 Insert Mode"></a>2.1 Insert Mode</h3><ul>
<li>c-w 向后删除一个 word</li>
<li>c-h 向后删除一个 char</li>
</ul>
<h3 id="2-2-Normal-Mode"><a href="#2-2-Normal-Mode" class="headerlink" title="2.2 Normal Mode"></a>2.2 Normal Mode</h3><ul>
<li>gi 返回上次修改地点</li>
<li>d% 剪切包含括号的括号内部内容</li>
<li>U 恢复单个句子</li>
<li>在命令状态下按 c-d 可以查看所有命令，相当于 bash 下面的 tabtab</li>
<li>hjkl 左下上右</li>
<li>EasyMotion 使用这个就可以代替乱七八糟的快速移动了。这是一个可以给当前的文字立即用打上 tag, 这样的话在 normal 情况下输入，,w  然后就可以看到很多 tag, 输入其中的 tag 就可以立即跳转到相应的 tag.</li>
<li>insert 状态进行编辑 c-h c-w 删除一个字，删除一个词。</li>
<li>normal 状态下进行删除 x dd  —— 删除一个字，剪切一行。</li>
<li>. ..  —— 重复操作</li>
<li><blockquote>
<p>&lt;   —— 缩进 &gt;G &lt;g <G >g</p>
</blockquote>
</li>
<li>c-b c-f back forth</li>
<li>c-n c-p 代码补全，tips, 建议标点符号全部半角花，这样就会吧每段连起来的汉字当成一个单词，这样就可以减少输入代码。</li>
<li><blockquote>
<p>indent</p>
</blockquote>
</li>
<li>&lt; outdent</li>
<li>do it (&gt;)</li>
<li>repeat (.)</li>
<li>reverse (u)</li>
<li>f{char}</li>
<li>repeat ;</li>
<li>reverse ,</li>
</ul>
<h3 id="2-3-Command-Mode"><a href="#2-3-Command-Mode" class="headerlink" title="2.3 Command Mode"></a>2.3 Command Mode</h3><p>:%s/old/new/gc 可以一行一行查看</p>
<h3 id="2-4-Visual-Mode"><a href="#2-4-Visual-Mode" class="headerlink" title="2.4 Visual Mode"></a>2.4 Visual Mode</h3><p>vib - 选框内<br>vi” - “” 内部<br>vi’ - ‘’ 内部<br>ggVG</p>
<h3 id="2-5-窗口管理"><a href="#2-5-窗口管理" class="headerlink" title="2.5 窗口管理"></a>2.5 窗口管理</h3><p>切换窗口：Ctrl+w+hjkl<br>分割窗口：Ctrl+w+vs<br>关闭窗口：Ctrl+w+q</p>
<h2 id="0x03-原生-Tips-amp-Hacks"><a href="#0x03-原生-Tips-amp-Hacks" class="headerlink" title="0x03 原生 Tips &amp; Hacks"></a>0x03 原生 Tips &amp; Hacks</h2><h3 id="行处理"><a href="#行处理" class="headerlink" title="行处理"></a>行处理</h3><h4 id="行排序"><a href="#行排序" class="headerlink" title="行排序"></a>行排序</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">行排序</span><br><span class="line">sort r &#x2F;【.\+】&#x2F;</span><br><span class="line">sort u</span><br><span class="line">sort n</span><br><span class="line">sort</span><br><span class="line">sort!</span><br><span class="line">g&#x2F;start&#x2F;+1,&#x2F;end&#x2F;-1 sort n</span><br><span class="line"></span><br><span class="line">:%!column -t</span><br><span class="line">:%!sort -k2nr</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="行删除"><a href="#行删除" class="headerlink" title="行删除"></a>行删除</h4><p>删除 html 标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:%s/&lt;\_.\&#123;-1,\&#125;&gt;//g</span><br></pre></td></tr></table></figure>

<h4 id="删除空行"><a href="#删除空行" class="headerlink" title="删除空行"></a>删除空行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">:g&#x2F;^$&#x2F;d</span><br><span class="line">:g&#x2F;^\s*$&#x2F;d</span><br><span class="line">:%s&#x2F;\n\&#123;3,&#125;&#x2F;\r\r&#x2F;e</span><br><span class="line">:g&#x2F;^[ \t\u3000]*$&#x2F;d</span><br><span class="line"></span><br><span class="line">:g&#x2F;pattern&#x2F;d</span><br><span class="line">:g!&#x2F;pattern&#x2F;d</span><br><span class="line"></span><br><span class="line">:g&#x2F;pattern&#x2F;t$</span><br><span class="line">:g&#x2F;pattern&#x2F;m$</span><br><span class="line">:s&#x2F; \&#123;2,&#125;&#x2F; &#x2F;g</span><br></pre></td></tr></table></figure>

<p>Use \r instead of \n</p>
<h2 id="0x04-Vim-必备插件"><a href="#0x04-Vim-必备插件" class="headerlink" title="0x04 Vim 必备插件"></a>0x04 Vim 必备插件</h2>]]></content>
      <categories>
        <category>编程利器</category>
      </categories>
      <tags>
        <tag>效率</tag>
        <tag>工作自动化</tag>
        <tag>Cheatsheet</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>ReThinking In JavaScript</title>
    <url>/2017/07/04/RethinkingInJavaScript/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>JavaScript 这门语言已经不容小觑了，在项目中的前端部分基于 VueJS 和 ElementUI 之后，我也就顺应历史潮流深入了解了一下这门不容小觑的语言。</p>
<a id="more"></a>

<h3 id="1-为什么是-JavaScript"><a href="#1-为什么是-JavaScript" class="headerlink" title="1. 为什么是 JavaScript"></a>1. 为什么是 JavaScript</h3><p>为什么是 JavaScript 呢？</p>
<p>因为太火，不得不认真学习一下。</p>
<p>我本人对 JavaScript 这种语言是有偏见的，这点我不会掩饰，我始终记得在正常的语言 Python / Java / C# 中实现一个休眠的简单功能和在 JS 中实现一个休眠功能的差别。</p>
<p>在 Python 中有很多语法糖，内置数据结构丰富，而 JS 则并不是如此，数据类型相对少，Bool 判断混乱，而今天，这门混乱的语言在流行程度上几乎接近于 Java 这门语言，即便是存在这样或者那样的问题，JavaScript 依然是一种奇葩的王者。</p>
<p>在服务端，有多少功能是 Python 完不成而 JavaScript（即 NodeJS) 可以胜任的呢？而且，NodeJS 写起来的感觉比起 Python 来说，还是差了很多，所以，我比较倾向于把计算类和 IO 类的操作用 Python 来写，至于浏览器端就交给 JavaScript 好了。</p>
<p>那么，对 JS 的这种定位，也使得我对 JS 生态圈的掌握程度不会超过 Vue/React 系。</p>
<h3 id="2-工具链"><a href="#2-工具链" class="headerlink" title="2. 工具链"></a>2. 工具链</h3><h4 id="2-1-浏览器端"><a href="#2-1-浏览器端" class="headerlink" title="2.1. 浏览器端"></a>2.1. 浏览器端</h4><h4 id="2-2-桌面端"><a href="#2-2-桌面端" class="headerlink" title="2.2. 桌面端"></a>2.2. 桌面端</h4><h4 id="2-3-客户端"><a href="#2-3-客户端" class="headerlink" title="2.3. 客户端"></a>2.3. 客户端</h4><h3 id="4-文档"><a href="#4-文档" class="headerlink" title="4. 文档"></a>4. 文档</h3><h3 id="5-社区"><a href="#5-社区" class="headerlink" title="5. 社区"></a>5. 社区</h3><h3 id="6-书籍"><a href="#6-书籍" class="headerlink" title="6. 书籍"></a>6. 书籍</h3><h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h3><ul>
<li>Number （没有 INT 值，只有 double-precision 64-bit format IEEE 754 ）</li>
<li>String</li>
<li>Boolean</li>
<li>Symbol (new in ES2015)</li>
<li>Object<ul>
<li>Function</li>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
</ul>
</li>
<li>null</li>
<li>undefined</li>
</ul>
<h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><h3 id="3-语句"><a href="#3-语句" class="headerlink" title="3. 语句"></a>3. 语句</h3><h2 id="0x02-中级概念"><a href="#0x02-中级概念" class="headerlink" title="0x02 中级概念"></a>0x02 中级概念</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h3 id="错误-调试测试"><a href="#错误-调试测试" class="headerlink" title="错误 / 调试测试"></a>错误 / 调试测试</h3><h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><h4 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h4><h5 id="协同式多任务处理"><a href="#协同式多任务处理" class="headerlink" title="协同式多任务处理"></a>协同式多任务处理</h5><h5 id="抢占式多任务处理"><a href="#抢占式多任务处理" class="headerlink" title="抢占式多任务处理"></a>抢占式多任务处理</h5><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h2 id="0x03-高级技巧"><a href="#0x03-高级技巧" class="headerlink" title="0x03 高级技巧"></a>0x03 高级技巧</h2><h2 id="0x04-标准库"><a href="#0x04-标准库" class="headerlink" title="0x04 标准库"></a>0x04 标准库</h2><h3 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h3><h3 id="系统化模块"><a href="#系统化模块" class="headerlink" title="系统化模块"></a>系统化模块</h3><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><h2 id="0x05-NPM-amp-amp-Yarn"><a href="#0x05-NPM-amp-amp-Yarn" class="headerlink" title="0x05 NPM &amp;&amp; Yarn"></a>0x05 NPM &amp;&amp; Yarn</h2><h2 id="0xEE-文章更新"><a href="#0xEE-文章更新" class="headerlink" title="0xEE 文章更新"></a>0xEE 文章更新</h2><ul>
<li><strong>2017-07-05 19:43:00</strong> : 初始化本文</li>
</ul>
]]></content>
      <categories>
        <category>进击的 JavaScript</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>重构技巧</tag>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Geoprocessing With Python</title>
    <url>/2017/07/11/GeoProcessingWithPython/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>16 年 12 月研究 GIS 相关资料用于处理 GIS 相关问题，完成基本 GIS 功能。<br>最新需要进阶相关内容用于更好的处理相关数据。</p>
<ul>
<li>书籍：<ul>
<li>Geoprocessing With Python</li>
<li>PostGIS In Action 2rd</li>
</ul>
</li>
<li>框架：<ul>
<li>前端 Leaflets D3</li>
<li>后端 GeoDjango</li>
</ul>
</li>
<li>其他零零碎碎的资料</li>
</ul>
<p>特此记录。</p>
<a id="more"></a>

<p>本文目录</p>
<ul>
<li>基本概念</li>
<li>Vertor VS Raster</li>
<li>Vertor 相关类型与坐标系</li>
<li>Raster 相关类型</li>
<li>其他类型</li>
<li>GIS 开发的生态圈以及常用技术栈</li>
<li>Vertor 分析</li>
<li>Raster 分析</li>
<li>Vertor 与 Raster</li>
</ul>
<h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><h3 id="1-1-Vertor-VS-Raster"><a href="#1-1-Vertor-VS-Raster" class="headerlink" title="1.1. Vertor VS Raster"></a>1.1. Vertor VS Raster</h3><ul>
<li>Vector : 基本单元为 Point : points, lines, and polygons 以及其组合，适用于矢量图，地形边界，路线等。</li>
<li>Raster : 基本单元为 Pixel : 2d/3d 包含数值的数组，适用于连续性数据，不仅仅适用于图片。</li>
</ul>
<h3 id="1-2-Vertor-相关类型与坐标系"><a href="#1-2-Vertor-相关类型与坐标系" class="headerlink" title="1.2. Vertor 相关类型与坐标系"></a>1.2. Vertor 相关类型与坐标系</h3><h4 id="1-2-1-国内常见的几种坐标系"><a href="#1-2-1-国内常见的几种坐标系" class="headerlink" title="1.2.1. 国内常见的几种坐标系"></a>1.2.1. 国内常见的几种坐标系</h4><p>国内由于特殊的国情，国际标准也要向国家标准靠齐。比如各个不同的坐标系上坐标的换算。</p>
<p>我们都知道一个坐标 (x,y) 可以表示为经纬度，甚至放在坐标系上，我们可以这么运算两点 (x1,y1) , (x2,y2) 之间的距离</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># z 表示比例系数</span></span><br><span class="line">distance = math.sqrt((x1-x2) ** <span class="number">2</span> + (y1-y2) ** <span class="number">2</span>) * z</span><br></pre></td></tr></table></figure>

<p>在近距离的时候的确是可以这么做的比如计算村里小芳和隔壁老王家的距离。当距离过大的时候，比如计算上海 A 区和 B 区的两个写字楼的距离的时候，则有相当大的误差。</p>
<p>那么问题来了：</p>
<p><del>挖掘技术哪家强</del></p>
<p>啊不是，是<strong>国内有哪些常用坐标标准呢？又是如何计算的呢？</strong></p>
<ul>
<li><ol>
<li>GPS WGS-84 国际标准（原始）</li>
</ol>
</li>
<li><ol start="2">
<li>GCJ-02 国内标准（原始数据混淆）</li>
</ol>
</li>
<li><ol start="3">
<li>其他坐标比如 BD-09（原始数据混淆再混淆）</li>
</ol>
</li>
</ul>
<p>对于小公司而言，我们是没有任何方法来通过 BD-09 以及 GCJ-02 这种坐标系进行运算的：</p>
<p>因为坐标点非线性偏移核心计算方法掌握在 GCJ-02 / BD-09 的公司里面，比如 Google 中国，高德地图，百度地图，腾讯地图。所以，为了研究，则必须要有<strong>能够对坐标进行运算的算法</strong>, 那这个东西有没有呢？答案是肯定的，因为国外使用的 WGS-84 标准，并且，计算坐标的算法早就开源。</p>
<p>那么，我们的思路就确定下来了。</p>
<ol>
<li>各种地图的经纬度坐标比如 BD-09 或 GCJ-02 标转换成 WGS-84 坐标。</li>
<li>使用开源 GIS 软件进行对 WGS-84 进行运算。</li>
</ol>
<p>感谢诸多在 GIS 运算上开源的中国先辈，我们轻而易举的获取到了坐标之间相互转化的方法：</p>
<p><a href="https://github.com/wandergis/coordTransform_py">https://github.com/wandergis/coordTransform_py</a></p>
<h4 id="1-2-2-形状"><a href="#1-2-2-形状" class="headerlink" title="1.2.2. 形状"></a>1.2.2. 形状</h4><p>坐标系，我们可以简单的理解为一个笛卡尔坐标系（虽然这么说很不准确，但已经足够形象了）</p>
<p>于是对于二维的数据，GIS 的分析就可以理解为对于点，线段，多边形自身以及他们之间的关系的分析。</p>
<h3 id="1-3-Raster-相关类型"><a href="#1-3-Raster-相关类型" class="headerlink" title="1.3. Raster 相关类型"></a>1.3. Raster 相关类型</h3><p>raster 的 digital elevation model(DEM), 即每一个像素值包含一个 elevation value</p>
<p>GDAL/OGR</p>
<!-- more -->

<h2 id="0x02-Vertor-分析"><a href="#0x02-Vertor-分析" class="headerlink" title="0x02. Vertor 分析"></a>0x02. Vertor 分析</h2><h2 id="0x03-Raster-分析"><a href="#0x03-Raster-分析" class="headerlink" title="0x03. Raster 分析"></a>0x03. Raster 分析</h2><h3 id="3-1-教程"><a href="#3-1-教程" class="headerlink" title="3.1. 教程"></a>3.1. 教程</h3><h3 id="3-2-教程"><a href="#3-2-教程" class="headerlink" title="3.2. 教程"></a>3.2. 教程</h3><h3 id="3-3-教程笔记"><a href="#3-3-教程笔记" class="headerlink" title="3.3. 教程笔记"></a>3.3. 教程笔记</h3><h2 id="0x04-Vertor-与-Raster"><a href="#0x04-Vertor-与-Raster" class="headerlink" title="0x04. Vertor 与 Raster"></a>0x04. Vertor 与 Raster</h2><h3 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h3><ul>
<li><p>Point</p>
</li>
<li><p>LineString</p>
</li>
<li><p>Polygon</p>
</li>
<li><p>MultiPoint</p>
</li>
<li><p>MultiLineString</p>
</li>
<li><p>MultiPolygon</p>
</li>
</ul>
<h3 id="中级概念"><a href="#中级概念" class="headerlink" title="中级概念"></a>中级概念</h3><ul>
<li>Raster / Tile (Bands 是什么鬼）</li>
</ul>
<h3 id="PostGIS-MetaTable"><a href="#PostGIS-MetaTable" class="headerlink" title="PostGIS MetaTable"></a>PostGIS MetaTable</h3><ul>
<li>spatial_ref_sys</li>
<li>geography_columns</li>
<li>geometry_columns</li>
<li>raster_columns</li>
<li>raster_overviews</li>
</ul>
<h3 id="PostGIS-常用函数"><a href="#PostGIS-常用函数" class="headerlink" title="PostGIS 常用函数"></a>PostGIS 常用函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ST_AsText(geom) 用于查看 WKT</span><br><span class="line">ST_GeometryType(geometry) returns the type of the geometry</span><br><span class="line">ST_NDims(geometry) returns the number of dimensions of the geometry</span><br><span class="line">ST_SRID(geometry) returns the spatial reference identifier number of the geometry</span><br><span class="line">ST_X(geometry) returns the X ordinate , 如果作用在 Point 上，则返回经度</span><br><span class="line">ST_Y(geometry) returns the Y ordinate , 如果作用在 Point 上，则返回纬度</span><br><span class="line"></span><br><span class="line">ST_Length(geometry) returns the length of the linestring</span><br><span class="line">ST_StartPoint(geometry) returns the first coordinate as a point</span><br><span class="line">ST_EndPoint(geometry) returns the last coordinate as a point</span><br><span class="line">ST_NPoints(geometry) returns the number of coordinates in the linestring</span><br><span class="line"></span><br><span class="line">ST_Area(geometry) returns the area of the polygons</span><br><span class="line">ST_NRings(geometry) returns the number of rings (usually 1, more of there are holes)</span><br><span class="line">ST_ExteriorRing(geometry) returns the outer ring as a linestring</span><br><span class="line">ST_InteriorRingN(geometry,n) returns a specified interior ring as a linestring</span><br><span class="line">ST_Perimeter(geometry) returns the length of all the rings</span><br><span class="line"></span><br><span class="line">ST_NumGeometries(geometry) returns the number of parts in the collection</span><br><span class="line">ST_GeometryN(geometry,n) returns the specified part</span><br><span class="line">ST_Area(geometry) returns the total area of all polygonal parts</span><br><span class="line">ST_Length(geometry) returns the total length of all linear parts</span><br></pre></td></tr></table></figure>

<h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 合并多个区域并返回 multipoly</span><br><span class="line">UPDATE areas as A</span><br><span class="line">SET &quot;Boundary&quot; &#x3D; ST_Multi(st_union(ARRAY(SELECT geom FROM county_boundary_region WHERE gid in ( &#39;foo_id&#39;,&#39;bar_id)&#39;)</span><br><span class="line">)))</span><br><span class="line">WHERE A.&quot;ID&quot; &#x3D; &#39;xxxxxx&#39;</span><br></pre></td></tr></table></figure>

<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ol>
<li><a href="http://gis.stackexchange.com/questions/6681/what-are-the-pros-and-cons-of-postgis-geography-and-geometry-types">http://gis.stackexchange.com/questions/6681/what-are-the-pros-and-cons-of-postgis-geography-and-geometry-types</a></li>
<li>Geo Processing with Python</li>
</ol>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-07-11</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>数据可视化</tag>
        <tag>GIS</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>数据科学的常识笔记</title>
    <url>/2017/07/17/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E7%9A%84%E5%B8%B8%E8%AF%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>2017 年 07 月，为了解统计学和机器学习的基本常识，开了这篇文章。</p>
<p>当然，仅仅是为了了解，所以也就写的随性（不严谨）一些，排版什么的也都详细推敲。想到哪里就记录到哪里。</p>
<a id="more"></a>

<h2 id="0x01-数据科学的含义与内容"><a href="#0x01-数据科学的含义与内容" class="headerlink" title="0x01 数据科学的含义与内容"></a>0x01 数据科学的含义与内容</h2><h3 id="0-1-WHAT"><a href="#0-1-WHAT" class="headerlink" title="0.1 WHAT?"></a>0.1 WHAT?</h3><blockquote>
<p>To gain insights into data through computation, statistics , and visualization.</p>
</blockquote>
<p>Josh Blumenstock 认为 数据科学家就是比计算机科学家多点统计技术，比统计学家多点计算机技术。</p>
<p>Shlomo Aragmon 认为 数据科学家 = 统计学家 + 程序员 + 教练 + 讲故事者 + 艺术家</p>
<h4 id="一些准则"><a href="#一些准则" class="headerlink" title="一些准则"></a>一些准则</h4><ul>
<li>多数据源</li>
<li>懂得数据如何被采集</li>
<li>对数据进行权重</li>
<li>使用统计模型</li>
<li>理解相关性</li>
<li>像 Bayesian 一样思考，像 frequentist 一样检验</li>
<li>良好的沟通能力（代表什么，如何可视化，检验，理解结论）</li>
</ul>
<h4 id="一些挑战"><a href="#一些挑战" class="headerlink" title="一些挑战"></a>一些挑战</h4><ul>
<li>数据量大</li>
<li>高维诅咒</li>
<li>数据缺失</li>
<li>需要避免过度拟合 (test data vs. training data)</li>
</ul>
<h4 id="Data-Science-涉及到哪些领域呢？"><a href="#Data-Science-涉及到哪些领域呢？" class="headerlink" title="Data Science 涉及到哪些领域呢？"></a>Data Science 涉及到哪些领域呢？</h4><ul>
<li>Data Management</li>
<li>Data Mining</li>
<li>Machine Learning</li>
<li>Business Intelligence</li>
<li>Statistics</li>
<li>Decision Making Theory</li>
<li>Story Telling</li>
<li>Perception</li>
<li>Human Cognition</li>
</ul>
<h3 id="0-2-WHY"><a href="#0-2-WHY" class="headerlink" title="0.2 WHY?"></a>0.2 WHY?</h3><p>海量数据的时代</p>
<h3 id="0-3-HOW"><a href="#0-3-HOW" class="headerlink" title="0.3 HOW?"></a>0.3 HOW?</h3><ul>
<li><strong>ASK</strong> an interesting question.  目标是什么？如果拿到数据可以预测或者估计什么？</li>
<li><strong>GET</strong> the data. 数据如何抽样？那些数据是相关的？</li>
<li><strong>EXPLORE</strong> the data. 可视化数据，有异常吗？有模式吗？</li>
<li><strong>MODEL</strong> the data. 构建模型，拟合模型，检验模型。</li>
<li><strong>COMMUNICATE</strong> and <strong>VISUALIZE</strong> the results 我们学到了什么？结果有意义吗？</li>
</ul>
<h3 id="0-4-本文目录"><a href="#0-4-本文目录" class="headerlink" title="0.4 本文目录"></a>0.4 本文目录</h3><ul>
<li><p>统计学与数据分析</p>
<ul>
<li>信息可视化</li>
<li>集中趋势的量度</li>
<li>分散性与变异的量度</li>
<li>概率计算</li>
<li>离散概率分布</li>
<li>排列与组合</li>
<li>几何分布、二项分布、泊松分布</li>
<li>正态分布</li>
<li>统计抽样</li>
<li>总体和样本的估计</li>
<li>置信区间</li>
<li>假设检验的运用</li>
<li>x2 分布</li>
<li>相关与回归</li>
</ul>
</li>
<li><p>数据挖掘基本扫盲</p>
<ul>
<li>推荐系统入门</li>
<li>隐式评价和基于物品的过滤算法</li>
<li>分类与分类进阶</li>
<li>朴素贝叶斯</li>
<li>朴素贝叶斯算法和非结构化文本</li>
<li>聚类</li>
</ul>
</li>
<li><p>机器学习</p>
<ul>
<li>分类与回归</li>
<li>交差校验</li>
<li>降维</li>
<li>支持向量机</li>
<li>决策树 &amp; 随机森林</li>
<li>Bagging &amp; Boosting</li>
<li>聚类与文本</li>
<li>贝叶斯思维 &amp; Naive Bayes</li>
<li>文本分析：LDA&amp;Topic Modeling</li>
<li>聚类</li>
</ul>
</li>
<li><p>深度学习</p>
</li>
<li><p>自然语言 NLP</p>
<ul>
<li>中文分词</li>
<li>新词发现</li>
</ul>
</li>
</ul>
<h2 id="0x02-统计学与数据分析"><a href="#0x02-统计学与数据分析" class="headerlink" title="0x02 统计学与数据分析"></a>0x02 统计学与数据分析</h2><h3 id="2-1-信息可视化"><a href="#2-1-信息可视化" class="headerlink" title="2.1 信息可视化"></a>2.1 信息可视化</h3><p>建议直接阅读 AntV 的可视化基础 <a href="https://antv.alipay.com/vis/doc/chart/index.html">https://antv.alipay.com/vis/doc/chart/index.html</a></p>
<h3 id="2-2-集中趋势的量度"><a href="#2-2-集中趋势的量度" class="headerlink" title="2.2 集中趋势的量度"></a>2.2 集中趋势的量度</h3><blockquote>
<p>目的：找出能够反映集中趋势的一个数值</p>
</blockquote>
<p>PS: 可以用分布图看它的均值和平均数是否落在集中趋势，数据向右偏斜，均值位于中位数右侧</p>
<ul>
<li>均值 （均值对于抽样数据更加稳定，但是如果村里一个杨千万九个穷光蛋，则个个都是杨百万）</li>
<li>中位数</li>
<li>众数</li>
</ul>
<h3 id="2-3-分散性与变异的量度"><a href="#2-3-分散性与变异的量度" class="headerlink" title="2.3 分散性与变异的量度"></a>2.3 分散性与变异的量度</h3><blockquote>
<p>目的：仅有均值，中位数，众数是不够的，还需要距和差</p>
</blockquote>
<ul>
<li>全距：MAX（上界） - MIN（下界）</li>
<li>按照四分位书的切分方式： 下界 - 下四分位数目 (Q1) - 中位数 - 上四分位数 - 上界</li>
<li>四分位距：上四分位数 - 下四分位数 （当然，可以使用箱线图进行绘制，从而判断出数据集中的地方）</li>
<li>百分位距：在统计的时候，往往需要避免极值对数据的影响</li>
<li>方差：量度数据分散性</li>
<li>标准差：典型值与均值的距离，体现了数值的变异程度。即加入有一批数据的标准差为 3cm, 代表着平均而言，这些数值与均值的距离为 3cm</li>
</ul>
<h2 id="0x03-数据挖掘"><a href="#0x03-数据挖掘" class="headerlink" title="0x03 数据挖掘"></a>0x03 数据挖掘</h2><p>本节是『面向程序员的挖掘指南』的笔记。</p>
<p>数据挖掘是深一步的分析统计。</p>
<p>本书所讲内容就是一个核心：</p>
<blockquote>
<p>给用户推荐物品</p>
</blockquote>
<p>内容就是：</p>
<ul>
<li>第一章和第二章均为依据用户对物品的评价（显示评价以及隐式评价）来做出相关推荐。</li>
<li>第三章为物品本身的特点进行<strong>分类</strong></li>
<li>第四章直到最后一章则是分类的详细讨论以及聚类分析。</li>
</ul>
<h3 id="基于用户的协同过滤算法"><a href="#基于用户的协同过滤算法" class="headerlink" title="基于用户的协同过滤算法"></a>基于用户的协同过滤算法</h3><p>用户与用户之间相似</p>
<h4 id="基本的距离算法"><a href="#基本的距离算法" class="headerlink" title="基本的距离算法"></a>基本的距离算法</h4><blockquote>
<p>擦擦擦，LaTeX 公式 居然不能用…</p>
</blockquote>
<ul>
<li>曼哈顿距离       如果在 n 维坐标上，即绝对值。</li>
<li>欧几里得距离     就是其实就是 n 维勾股定理。</li>
</ul>
<p>曼哈顿距离和欧几里得距离在判断 同样是 n 维的数据是完全 OK 的。即总量为 m 部电影的情况下，k 个人同样评价了 n 部电影，比较容易算出距离。</p>
<p>但，n 纬和比他更小的纬度算出的距离，似乎并不应该相等。 如何处理这些缺失的数据呢？如果是我的话，会设定一个默认值吧。（半值，均值）</p>
<ul>
<li>闵科夫斯基距离</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TODO: 以后补上公式</span><br></pre></td></tr></table></figure>

<blockquote>
<p>r 值越大，单个维度的差值大小会对整体距离有更大的影响。</p>
</blockquote>
<ul>
<li>皮尔森相关系数</li>
</ul>
<p>用户也分为好几种，比如说：</p>
<p>用户 1: 好的打分 5, 差的打分 3<br>用户 2: 好的打分 5, 差的打分 1<br>用户 3: 要么 5, 要么 1</p>
<ul>
<li>余弦相似度</li>
</ul>
<p>如果数据存在“分数膨胀”问题，就使用皮尔逊相关系数。<br>如果数据比较“密集”，变量之间基本都存在公有值，且这些距离数据是非常重要的，那就使用欧几里得或曼哈顿距离。<br>如果数据是稀疏的，则使用余弦相似度。</p>
<ul>
<li>K 最邻近算法</li>
</ul>
<h3 id="隐式评价和基于物品的过滤算法"><a href="#隐式评价和基于物品的过滤算法" class="headerlink" title="隐式评价和基于物品的过滤算法"></a>隐式评价和基于物品的过滤算法</h3><p>显式评价：豆瓣的五星，用户的评论</p>
<p>显式评价可能存在下面几个问题：</p>
<ol>
<li>懒得评价</li>
<li>会出于面子，合群，偏见撒谎。</li>
<li>懒得追加评价一般数量少，假如买的东西一个月后坏掉了，则不用。</li>
<li>账号共享带来的问题。</li>
<li>买东西就是有问题才调出来判断，其他的情况下懒得评价。</li>
</ol>
<p>隐式评价：通过观察可得。通常需要工程师针对客户端和浏览器端进行埋点。比如，买过，还买过，点击情趣用品多次。</p>
<ol>
<li>网页方面：页面点击、停留时间、重复访问次数、引用率、观看视频的次数； 音乐播放器：播放的曲目、跳过的曲目、播放次数；</li>
</ol>
<blockquote>
<p>然而，越精准的判断越消耗性能。</p>
</blockquote>
<ul>
<li>扩展性：当用户数量大幅度上升的时候，计算量就上来了。千万用户其中一个用户和其他用户进行有一次运算的话，计算量就相当大了。</li>
<li>稀疏性：物品数量远大于用户数量，而千万级用户仅仅对百万本书中几十本评价，</li>
</ul>
<blockquote>
<p>书中说，可以考虑基于物品的协同过滤，其实可以考虑，先给用户和书划分类型，从而使得计算量下来。 计算标签和标签之间的相似度，这样可以使得成本大幅度下降。</p>
</blockquote>
<h3 id="基于物品的协同过滤算法"><a href="#基于物品的协同过滤算法" class="headerlink" title="基于物品的协同过滤算法"></a>基于物品的协同过滤算法</h3><ul>
<li><strong>修正的余弦相似度</strong> 是一种基于模型的协同过滤算法。我们前面提过，这种算法的优势之一是扩展性好，对于大数据量而言，运算速度快、占用内存少。 用户的评价标准是不同的，比如喜欢一个歌手时有些人会打 4 分，有些打 5 分；不喜欢时有人会打 3 分，有些则会只给 1 分。修正的余弦相似度计算时会将用户对物品的评分减去用户所有评分的均值，从而解决这个问题。</li>
<li><strong>Slope One 算法</strong></li>
</ul>
<h3 id="训练集和测试集"><a href="#训练集和测试集" class="headerlink" title="训练集和测试集"></a>训练集和测试集</h3><p>十折交叉验证</p>
<p>将数据集随机分割成十个等份，每次用 9 份数据做训练集，1 份数据做测试集，如此迭代 10 次。</p>
<p>n 折交叉验证</p>
<h3 id="评估分类器"><a href="#评估分类器" class="headerlink" title="评估分类器"></a>评估分类器</h3><ul>
<li><p>混淆矩阵 （其实就是交叉表的统计学说法）</p>
</li>
<li><p>Kappa 指标</p>
</li>
<li><p>优化邻近算法</p>
<ul>
<li>kNN 算法</li>
</ul>
</li>
</ul>
<h3 id="分类方法"><a href="#分类方法" class="headerlink" title="分类方法"></a>分类方法</h3><h2 id="0x03-机器学习"><a href="#0x03-机器学习" class="headerlink" title="0x03 机器学习"></a>0x03 机器学习</h2><h2 id="0x04-深度学习"><a href="#0x04-深度学习" class="headerlink" title="0x04 深度学习"></a>0x04 深度学习</h2><h2 id="0x05-自然语言-NLP"><a href="#0x05-自然语言-NLP" class="headerlink" title="0x05 自然语言 NLP"></a>0x05 自然语言 NLP</h2><h2 id="0xEE-链接"><a href="#0xEE-链接" class="headerlink" title="0xEE 链接"></a>0xEE 链接</h2><ul>
<li><a href="https://dataminingguide.books.yourtion.com/">面向程序员的数据挖掘指南</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-07-17</strong> 重修文字</li>
<li><strong>2017-10-12</strong> 增加数据挖掘模块</li>
</ul>
]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>数学概念</tag>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>自然语言</tag>
      </tags>
  </entry>
  <entry>
    <title>React CheatSheet</title>
    <url>/2017/07/26/ReactCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><blockquote>
<p>备注：由于目前没有上 React 的打算，本文暂时太监</p>
</blockquote>
<p>之前一直使用 VueJS 进行开发，心血来潮想换换口味，于是就借着自己的一个开源的项目尝试一下 ReactJS , 代码分为两部分，如下：</p>
<ul>
<li>前台系统（支持 SSR) <a href="https://github.com/twocucao/YaReactBlog">YaReactBlog</a></li>
<li>后台系统 <a href="https://github.com/twocucao/YaReactAdmin">YaReactAdmin</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">TODO:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>本文目录</p>
<ul>
<li>前端、单页与 React 开发</li>
<li>官网的 Tutorial / Guide 要点</li>
<li>Dva 下使用 React JS 的要点</li>
</ul>
<h2 id="0x00-前端、单页与-React-开发"><a href="#0x00-前端、单页与-React-开发" class="headerlink" title="0x00. 前端、单页与 React 开发"></a>0x00. 前端、单页与 React 开发</h2><h3 id="0-1-前端"><a href="#0-1-前端" class="headerlink" title="0.1. 前端"></a>0.1. 前端</h3><p>前端开发，是最近几年才出现的独立工种。</p>
<p>在我的印象中，以前的人很少会区分前端和后端，现在的前端的职责往往是由后端的人顺手做掉的。当然，这种界面一般情况下都比较丑。</p>
<p>后来，随着浏览器的功能越来越强大，性能越来越好，用户对于界面要求也就越来越高。甚至到后来，对于用户界面的操作的复杂程度要求也越来越高。 传统的后端渲染 Template + 简单的 Ajax 不能满足要求了。</p>
<blockquote>
<p>要界面，要交互，要复杂</p>
</blockquote>
<p>于是便出现了单页应用。</p>
<h3 id="0-2-单页"><a href="#0-2-单页" class="headerlink" title="0.2. 单页"></a>0.2. 单页</h3><p>单页完全可以当做一个性能不是很强的，运行在浏览器中的，使用 HTML CSS JS 来编写的小型客户端。</p>
<p>写单页和写客户端基本一致的情况下，于是在这种情况下，前端开发在使用单页后，直接可以 Mock 数据，接着编写界面，接着调通页面的状态和操作，最后发布。</p>
<h3 id="0-3-ReactJS"><a href="#0-3-ReactJS" class="headerlink" title="0.3. ReactJS"></a>0.3. ReactJS</h3><p>为什么选用 ReactJS 呢？</p>
<p>个人认为，框架是用于改善代码组织的一种约束。</p>
<p>不管是 Web 应用开发的早期的 HTML in PHP OR PHP in HTML, 还是中期的 MVC MTV, 还是后来的 富 AJAX 操作，还是现在的 SPA, 出现的各种框架无非就是为了解决代码组织的问题。</p>
<p>对后端而言，后端 WEB 框架的设计，都是为了单个模块职责过重而出现的一种解决方案：</p>
<ul>
<li>HTML IN PHP 拼接代码简单暴力，可是如果拼接太多，每个文件就很职责重，代码阅读性差，不方便调试，就显得很杂乱。</li>
<li>PHP in HTML 相比上一个解决方案好很多。可是，嵌入过多 PHP 代码，代码阅读性差，不方便调试，则会显得比较混乱。</li>
<li>MVC 与 MTV 把渲染的变量独立出来放到 Controller 中，然后把需要渲染的 HTML 模板放到 Template 中，并且在 Template 中来完成模板的拼接。最后调用 Render 进行渲染。是不是这样问题就解决了呢？不是，如果把业务逻辑放在 Model 层，则 Model 职责过重。那就必须要添加一个 Serivce 层来封装业务逻辑。是不是封装了一个</li>
</ul>
<p>如果业务逻辑简单到令人发指，HTML IN PHP 可以给人最大的灵活性。</p>
<ol>
<li>尝试一下新技术。保持对技术的敏感性。</li>
<li>React 是 FB 出的一套前端框架。大厂支持，不会轻易太监掉。</li>
<li>写了一段时间 VueJS 换换口味。</li>
</ol>
<p>当我们讨论一个框架的时候，除了基本的框架之外还必须要有大量的社区资源，那么对 React 而言，除了 ReactJS 之外，还有什么？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">后台系统</span><br><span class="line"></span><br><span class="line"> - ant.design</span><br><span class="line"></span><br><span class="line">打包构建</span><br><span class="line"></span><br><span class="line"> - webpack</span><br><span class="line"></span><br><span class="line">路由和状态管理</span><br><span class="line"></span><br><span class="line"> - react-router</span><br><span class="line"> - react-router-redux</span><br><span class="line"> - redux</span><br><span class="line"> - redux-saga</span><br><span class="line"></span><br><span class="line">为了更好的管理路由和状态，还是使用 dva 来管理比较好。</span><br><span class="line"></span><br><span class="line"> - [dva](https://github.com/dvajs/dva)</span><br><span class="line"> - [dva-cli](https://github.com/dvajs/dva-cli)</span><br><span class="line"></span><br><span class="line">开发构建工具</span><br><span class="line"></span><br><span class="line"> - [roadhog](https://github.com/sorrycc/roadhog)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0x01-官网的-Tutorial-Guide"><a href="#0x01-官网的-Tutorial-Guide" class="headerlink" title="0x01. 官网的 Tutorial / Guide"></a>0x01. 官网的 Tutorial / Guide</h2><p>官网的要点</p>
<h2 id="0x02-在-dva-下，编写-React-组件的正确姿势"><a href="#0x02-在-dva-下，编写-React-组件的正确姿势" class="headerlink" title="0x02. 在 dva 下，编写 React 组件的正确姿势"></a>0x02. 在 dva 下，编写 React 组件的正确姿势</h2><p>编写 React 的时候，我选用了 dva 框架配合 ReactJS 来编写单页。</p>
<p>参考 FB 的这篇教程后，梳理了我编写组件的步骤 <a href="https://facebook.github.io/react/docs/thinking-in-react.html">https://facebook.github.io/react/docs/thinking-in-react.html</a> :</p>
<ol>
<li>先构思出原型 （或者拿到 UI 图）</li>
<li>Mock 出假数据</li>
<li>分解页面 OR 组件为 组件树</li>
<li>编写静态组件树</li>
<li>确定最小表达 UI （加上满足要求的样式）</li>
<li>确定什么时候需要什么状态（网络请求，键盘输入，位置变化等等）</li>
<li>收尾美化</li>
<li>在发现问题的时候进行优化</li>
</ol>
<h2 id="0x03-在-dva-下，编写-React-组件的正确姿势"><a href="#0x03-在-dva-下，编写-React-组件的正确姿势" class="headerlink" title="0x03. 在 dva 下，编写 React 组件的正确姿势"></a>0x03. 在 dva 下，编写 React 组件的正确姿势</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-07-17</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
        <tag>Ant Design</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS 文档阅读笔记</title>
    <url>/2017/09/15/ReadingVueDocuments/</url>
    <content><![CDATA[<h2 id="0x01-Essential"><a href="#0x01-Essential" class="headerlink" title="0x01 Essential"></a>0x01 Essential</h2><h3 id="1-1-The-Vue-Instance"><a href="#1-1-The-Vue-Instance" class="headerlink" title="1.1 The Vue Instance"></a>1.1 The Vue Instance</h3><p>当 Vue 实例被创建时，添加所有在 Data 对象中的属性到 Reactivity System 中。</p>
<blockquote>
<p>而创建之后添加赋值新属性，则不 Reactive</p>
</blockquote>
<p>而实例被创建之时，会自带前缀为 $ 的一系列属性和方法</p>
<h4 id="1-1-1-内置方法和属性"><a href="#1-1-1-内置方法和属性" class="headerlink" title="1.1.1 内置方法和属性"></a>1.1.1 内置方法和属性</h4><h5 id="Instance-Properties"><a href="#Instance-Properties" class="headerlink" title="Instance Properties"></a>Instance Properties</h5><p>vm.$data<br>vm.$props<br>vm.$el<br>vm.$options<br>vm.$parent<br>vm.$root<br>vm.$children<br>vm.$slots<br>vm.$scopedSlots<br>vm.$refs<br>vm.$isServer<br>vm.$attrs<br>vm.$listeners</p>
<a id="more"></a>

<h5 id="Instance-Methods-Data"><a href="#Instance-Methods-Data" class="headerlink" title="Instance Methods / Data"></a>Instance Methods / Data</h5><p>vm.$watch<br>vm.$set<br>vm.$delete</p>
<h5 id="Instance-Methods-Events"><a href="#Instance-Methods-Events" class="headerlink" title="Instance Methods / Events"></a>Instance Methods / Events</h5><p>vm.$on<br>vm.$once<br>vm.$off<br>vm.$emit</p>
<h5 id="Instance-Methods-Lifecycle"><a href="#Instance-Methods-Lifecycle" class="headerlink" title="Instance Methods / Lifecycle"></a>Instance Methods / Lifecycle</h5><p>vm.$mount<br>vm.$forceUpdate<br>vm.$nextTick<br>vm.$destroy</p>
<h4 id="1-1-2-生命周期"><a href="#1-1-2-生命周期" class="headerlink" title="1.1.2 生命周期"></a>1.1.2 生命周期</h4><p><img src="https://vuejs.org/images/lifecycle.png" alt="生命周期"></p>
<h3 id="1-2-Template-Syntax"><a href="#1-2-Template-Syntax" class="headerlink" title="1.2 Template Syntax"></a>1.2 Template Syntax</h3><p>VueJS 编译 模板为 VirtualDOM render 函数，如果对 VirtualDom 非常熟悉的话，则可以使用</p>
<h4 id="1-2-1-插值"><a href="#1-2-1-插值" class="headerlink" title="1.2.1 插值"></a>1.2.1 插值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># text</span><br><span class="line">&#123;&#123; msg &#125;&#125;</span><br><span class="line">&lt;span v-once&gt; &#123;&#123; msg &#125;&#125; &lt;span&gt;</span><br><span class="line"># raw html</span><br><span class="line">&lt;div v-html&#x3D;&quot;rawHTML&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"># attributes</span><br><span class="line">&lt;div v-bind:id&#x3D;&quot;dynamicID&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"># JS Expressions</span><br><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? &#39;YES&#39; : &#39;NO&#39; &#125;&#125;</span><br><span class="line">&#123;&#123; message.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;</span><br><span class="line">&lt;div v-bind:id&#x3D;&quot;&#39;list-&#39; + id&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-指令"><a href="#1-2-2-指令" class="headerlink" title="1.2.2 指令"></a>1.2.2 指令</h4><ul>
<li>v-bind -&gt; :</li>
<li>v-on   -&gt; @</li>
<li>v-on:submit.prevent=”onSubmit”</li>
</ul>
<h3 id="1-3-Computed-Properties-and-Watchers"><a href="#1-3-Computed-Properties-and-Watchers" class="headerlink" title="1.3 Computed Properties and Watchers"></a>1.3 Computed Properties and Watchers</h3><ul>
<li>当使用 Computed 的时候，一旦其依赖的 reactive 的 data 发生变化之后，则其值发生变化。</li>
<li>其实，可以在模板中调用方法，但只能在项目中。</li>
</ul>
<h3 id="1-4-Class-and-Style-Bindings"><a href="#1-4-Class-and-Style-Bindings" class="headerlink" title="1.4 Class and Style Bindings"></a>1.4 Class and Style Bindings</h3><h4 id="1-4-1-Object-语法"><a href="#1-4-1-Object-语法" class="headerlink" title="1.4.1 Object 语法"></a>1.4.1 Object 语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;static&quot;</span><br><span class="line">     :class&#x3D;&quot;&#123; active: isActive, &#39;text-danger&#39;: hasError &#125;&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="1-4-2-Array-语法"><a href="#1-4-2-Array-语法" class="headerlink" title="1.4.2 Array 语法"></a>1.4.2 Array 语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:class&#x3D;&quot;[isActive ? activeClass : &#39;&#39;, errorClass]&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-3-组件"><a href="#1-4-3-组件" class="headerlink" title="1.4.3 组件"></a>1.4.3 组件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;my-component class&#x3D;&quot;baz boo&quot;&gt;&lt;&#x2F;my-component&gt;</span><br><span class="line"></span><br><span class="line">&lt;p  class&#x3D;&quot;origin baz boo&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-Conditional-Rendering"><a href="#1-5-Conditional-Rendering" class="headerlink" title="1.5 Conditional Rendering"></a>1.5 Conditional Rendering</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-if&#x3D;&quot;ok&quot;&gt;Yes&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 v-if&#x3D;&quot;ok&quot;&gt;Yes&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h1 v-else&gt;No&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;div v-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;A&#39;&quot;&gt;</span><br><span class="line">  A</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;B&#39;&quot;&gt;</span><br><span class="line">  B</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;C&#39;&quot;&gt;</span><br><span class="line">  C</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else&gt;</span><br><span class="line">  Not A&#x2F;B&#x2F;C</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>v-if  是否</li>
<li>v-for 优先级高于 v-if</li>
</ul>
<h3 id="1-6-List-Rendering"><a href="#1-6-List-Rendering" class="headerlink" title="1.6 List Rendering"></a>1.6 List Rendering</h3><p>对于数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul id&#x3D;&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;(item, index) in items&quot;&gt;</span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<p>对于对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul id&#x3D;&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;(item, index) in items&quot;&gt;</span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h4 id="1-6-1-ARRAY-修改检测"><a href="#1-6-1-ARRAY-修改检测" class="headerlink" title="1.6.1 ARRAY 修改检测"></a>1.6.1 ARRAY 修改检测</h4><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<h5 id="取代数组"><a href="#取代数组" class="headerlink" title="取代数组"></a>取代数组</h5><p>filter</p>
<h5 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">直接通过 index 对数组进行修改</span><br><span class="line"></span><br><span class="line">不应该</span><br><span class="line"></span><br><span class="line">vm.items[indexOfItem] = newValue</span><br><span class="line"></span><br><span class="line">应该</span><br><span class="line"></span><br><span class="line">// Vue.set</span><br><span class="line">Vue.set(example1.items, indexOfItem, newValue)</span><br><span class="line"></span><br><span class="line">// Array.prototype.splice</span><br><span class="line">example1.items.splice(indexOfItem, 1, newValue)</span><br><span class="line"></span><br><span class="line">修改 length</span><br><span class="line"></span><br><span class="line">不该 vm.items.length = newLength</span><br><span class="line"></span><br><span class="line">应该 example1.items.splice(newLength)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>猜测背后可能是因为这种方式是无法监测设置</p>
</blockquote>
<h4 id="1-6-2-Object-修改检测警告"><a href="#1-6-2-Object-修改检测警告" class="headerlink" title="1.6.2 Object 修改检测警告"></a>1.6.2 Object 修改检测警告</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">js 无法直接提供对</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$set(<span class="built_in">this</span>.userProfile, <span class="string">&#x27;age&#x27;</span>, <span class="number">27</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-7-Event-Handling"><a href="#1-7-Event-Handling" class="headerlink" title="1.7 Event Handling"></a>1.7 Event Handling</h3><h4 id="1-7-1-Listening-to-Events"><a href="#1-7-1-Listening-to-Events" class="headerlink" title="1.7.1 Listening to Events"></a>1.7.1 Listening to Events</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter += 1&quot;</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PS: 注意，前面 v-on v-bind 所有的绑定可以绑在方法上，也可以直接填单行表达式。可以提高可阅读性</p>
<h4 id="1-7-2-Method-Event-Handlers"><a href="#1-7-2-Method-Event-Handlers" class="headerlink" title="1.7.2 Method Event Handlers"></a>1.7.2 Method Event Handlers</h4><p>可以绑定方法</p>
<h4 id="1-7-3-Methods-in-Inline-Handlers"><a href="#1-7-3-Methods-in-Inline-Handlers" class="headerlink" title="1.7.3 Methods in Inline Handlers"></a>1.7.3 Methods in Inline Handlers</h4><p>可以绑定方法加参数，配合 for / if</p>
<h4 id="1-7-4-Event-Modifiers"><a href="#1-7-4-Event-Modifiers" class="headerlink" title="1.7.4 Event Modifiers"></a>1.7.4 Event Modifiers</h4><p>事件修饰符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.stop</span><br><span class="line">.prevent</span><br><span class="line">.capture</span><br><span class="line">.self</span><br><span class="line">.once</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- the click event&#x27;s propagation will be stopped --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- the submit event will no longer reload the page --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- modifiers can be chained --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- just the modifier --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- use capture mode when adding the event listener --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- i.e. an event targeting an inner element is handled here before being handled by that element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- only trigger handler if event.target is the element itself --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- i.e. not from a child element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-7-5-Key-Modifiers"><a href="#1-7-5-Key-Modifiers" class="headerlink" title="1.7.5 Key Modifiers"></a>1.7.5 Key Modifiers</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (captures both “Delete” and “Backspace” keys)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- same as above --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- also works for shorthand --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-7-6-System-Modifier-Keys"><a href="#1-7-6-System-Modifier-Keys" class="headerlink" title="1.7.6 System Modifier Keys"></a>1.7.6 System Modifier Keys</h4><p>键盘</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.ctrl</span><br><span class="line">.alt</span><br><span class="line">.shift</span><br><span class="line">.meta</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Alt + C --&gt;</span><br><span class="line">&lt;input @keyup.alt.67&#x3D;&quot;clear&quot;&gt;</span><br><span class="line">&lt;!-- Ctrl + Click --&gt;</span><br><span class="line">&lt;div @click.ctrl&#x3D;&quot;doSomething&quot;&gt;Do something&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>鼠标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.left</span><br><span class="line">.right</span><br><span class="line">.middle</span><br></pre></td></tr></table></figure>

<h4 id="1-7-7-Why-Listeners-in-HTML"><a href="#1-7-7-Why-Listeners-in-HTML" class="headerlink" title="1.7.7 Why Listeners in HTML?"></a>1.7.7 Why Listeners in HTML?</h4><p>在以往的开发中，直接写在 html 的 onclick 是很糟糕的方式，因为这违反了局部变量准则。将 onclick 变量提升为整个页面很容易导致，页面内部组织混乱。</p>
<p>而 v-on 则仅执行 viewmodel 的方法，不会绑定到其他方法里。</p>
<h3 id="1-8-Form-Input-Bindings"><a href="#1-8-Form-Input-Bindings" class="headerlink" title="1.8 Form Input Bindings"></a>1.8 Form Input Bindings</h3><p><a href="https://vuejs.org/v2/guide/forms.html">https://vuejs.org/v2/guide/forms.html</a></p>
<p>对于每个 Form 空间，可以进行一定的封装。</p>
<p>比如拖拽上传啦，比如 RadioGroup 啦等等。通过封装，可以进行相关的分析。</p>
<h3 id="1-9-Components"><a href="#1-9-Components" class="headerlink" title="1.9 Components"></a>1.9 Components</h3><p>Using Components<br>Global Registration<br>Local Registration<br>DOM Template Parsing Caveats<br>data Must Be a Function<br>Composing Components<br>Props<br>Passing Data with Props<br>camelCase vs. kebab-case<br>Dynamic Props<br>Literal vs. Dynamic<br>One-Way Data Flow<br>Prop Validation<br>Non-Prop Attributes<br>Replacing/Merging with Existing Attributes<br>Custom Events<br>Using v-on with Custom Events<br>Binding Native Events to Components<br>.sync Modifier<br>Form Input Components using Custom Events<br>Customizing Component v-model<br>Non Parent-Child Communication<br>Content Distribution with Slots<br>Compilation Scope<br>Single Slot<br>Named Slots<br>Scoped Slots<br>Dynamic Components<br>keep-alive<br>Misc<br>Authoring Reusable Components<br>Child Component Refs<br>Async Components<br>Advanced Async Components<br>Component Naming Conventions<br>Recursive Components<br>Circular References Between Components<br>Inline Templates<br>X-Templates<br>Cheap Static Components with v-once</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>组件化是 Vue 模块化组织前端网页的方式。</p>
<p>Vue 的组件化，将模板，JavaScript 与样式放在一起。出于代码的复用性：</p>
<p>组件化可以给组件子组件们组织起来，起一个阅读性更好的名称，从而使得编写 Vue 组件更加语义化。</p>
<ul>
<li>如果模板是常用的组件，比如手风琴控件，Menu 控件，sidebar 控件</li>
</ul>
<p>Vue 通过组件来组织代码，但糟糕的是并不是一切都可以被组件化</p>
<h2 id="0x02-Transitions-amp-Animation"><a href="#0x02-Transitions-amp-Animation" class="headerlink" title="0x02 Transitions &amp; Animation"></a>0x02 Transitions &amp; Animation</h2><h3 id="2-1-Event-Handling"><a href="#2-1-Event-Handling" class="headerlink" title="2.1 Event Handling"></a>2.1 Event Handling</h3><h3 id="2-2-Event-Handling"><a href="#2-2-Event-Handling" class="headerlink" title="2.2 Event Handling"></a>2.2 Event Handling</h3><h2 id="0x03-Reusability-amp-Composition"><a href="#0x03-Reusability-amp-Composition" class="headerlink" title="0x03 Reusability &amp; Composition"></a>0x03 Reusability &amp; Composition</h2><h2 id="0x04-Tooling"><a href="#0x04-Tooling" class="headerlink" title="0x04 Tooling"></a>0x04 Tooling</h2><h2 id="0x05-Scaling-Up"><a href="#0x05-Scaling-Up" class="headerlink" title="0x05 Scaling Up"></a>0x05 Scaling Up</h2><h2 id="0x06-Internals"><a href="#0x06-Internals" class="headerlink" title="0x06 Internals"></a>0x06 Internals</h2><h2 id="0x07-Vue-番外篇"><a href="#0x07-Vue-番外篇" class="headerlink" title="0x07 Vue 番外篇"></a>0x07 Vue 番外篇</h2><p>下面的内容从 Vue 作者的知乎 Live 上取来。</p>
<h3 id="阅读源码的建议"><a href="#阅读源码的建议" class="headerlink" title="阅读源码的建议"></a>阅读源码的建议</h3><p><a href="http://hcysun.me/2017/03/03/Vue">http://hcysun.me/2017/03/03/Vue</a> 源码学习 /</p>
<h3 id="框架背后的要解决的原理"><a href="#框架背后的要解决的原理" class="headerlink" title="框架背后的要解决的原理"></a>框架背后的要解决的原理</h3><p>组件为基本单元</p>
<p>页面 -&gt;应用（模块，组件树（偏展示））</p>
<ul>
<li>接入型 container</li>
<li>展示型</li>
<li>交互型 比如各类加强版的表单组件，通常强调复用</li>
<li>功能型 比如 <code>&lt;router-view&gt;</code>，<code>&lt;transition&gt;</code>，作为一种扩展、抽象机制存在。</li>
</ul>
<p>view = render(state)</p>
<ul>
<li>命令式 (jquery)</li>
<li>声明式</li>
</ul>
<h3 id="Virtual-Dom"><a href="#Virtual-Dom" class="headerlink" title="Virtual Dom"></a>Virtual Dom</h3><h3 id="变化侦测和渲染机制"><a href="#变化侦测和渲染机制" class="headerlink" title="变化侦测和渲染机制"></a>变化侦测和渲染机制</h3><p>push pull</p>
<p>vue 混合式</p>
<h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><h2 id="0xEE-TODO-TO-LIST"><a href="#0xEE-TODO-TO-LIST" class="headerlink" title="0xEE TODO TO LIST"></a>0xEE TODO TO LIST</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-09-15</strong> 初始化本文</li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
        <tag>文档阅读</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中的作用域准则</title>
    <url>/2017/11/20/PythonClosureAndScopes/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>因为最早用的是 Java 和 C#，写 Python 的时候自然也把 Python 作用域的想的和原有的一致。</p>
<p>Python 的作用域变量遵循在大部分情况下是一致的，但也有例外的情况。</p>
<p>本文着通过遇到的一个作用域的小问题来说说 Python 的作用域</p>
<a id="more"></a>

<h2 id="0x01-作用域的几个实例"><a href="#0x01-作用域的几个实例" class="headerlink" title="0x01 作用域的几个实例"></a>0x01 作用域的几个实例</h2><p>Python 的作用域变量遵循在大部分情况下与其他语言一致，但也有例外的情况。比如：</p>
<h3 id="1-1-第一个例子"><a href="#1-1-第一个例子" class="headerlink" title="1.1 第一个例子"></a>1.1 第一个例子</h3><p>作用域第一版代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">print(a, <span class="built_in">id</span>(a)) <span class="comment"># 打印 1 4465620064</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    print(a, <span class="built_in">id</span>(a))</span><br><span class="line">func1()  <span class="comment"># 打印 1 4465620064</span></span><br></pre></td></tr></table></figure>

<p>作用域第一版对应字节码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4           0 LOAD_GLOBAL              0 (print)</span><br><span class="line">            3 LOAD_GLOBAL              1 (a)</span><br><span class="line">            6 LOAD_GLOBAL              2 (id)</span><br><span class="line">            9 LOAD_GLOBAL              1 (a)</span><br><span class="line">           12 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</span><br><span class="line">           15 CALL_FUNCTION            2 (2 positional, 0 keyword pair)</span><br><span class="line">           18 POP_TOP</span><br><span class="line">           19 LOAD_CONST               0 (None)</span><br><span class="line">           22 RETURN_VALUE</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS: 行 4 表示 代码行数 0 / 3 / 9 … 不知道是啥，我就先管他叫做<strong>条</strong>吧 是 load global<br>PPS: 注意条 3/6 LOAD_GLOBAL 为从全局变量中加载</p>
</blockquote>
<p>顺手附上本文需要着重理解的几个指令</p>
<pre><code>LOAD_GLOBA          : Loads the global named co_names[namei] onto the stack.
LOAD_FAST(var_num)  : Pushes a reference to the local co_varnames[var_num] onto the stack.
STORE_FAST(var_num) : Stores TOS into the local co_varnames[var_num].</code></pre>
<p>这点似乎挺符合我们认知的，那么，再深一点呢？既然这个变量是可以 Load 进来的就可以修改咯？</p>
<h3 id="1-2-第二个例子"><a href="#1-2-第二个例子" class="headerlink" title="1.2 第二个例子"></a>1.2 第二个例子</h3><p>然而并不是，我们看作用域第二版对应代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">print(a, <span class="built_in">id</span>(a)) <span class="comment"># 打印 1 4465620064</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    print(a, <span class="built_in">id</span>(a))</span><br><span class="line">func2() <span class="comment"># 打印 2 4465620096</span></span><br></pre></td></tr></table></figure>
<p>一看，WTF, 两个 a 内存值不一样。证明这两个变量是完全两个变量。</p>
<p>作用域第二版对应字节码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4           0 LOAD_CONST               1 (2)</span><br><span class="line">            3 STORE_FAST               0 (a)</span><br><span class="line"></span><br><span class="line">5           6 LOAD_GLOBAL              0 (print)</span><br><span class="line">            9 LOAD_FAST                0 (a)</span><br><span class="line">           12 LOAD_GLOBAL              1 (id)</span><br><span class="line">           15 LOAD_FAST                0 (a)</span><br><span class="line">           18 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</span><br><span class="line">           21 CALL_FUNCTION            2 (2 positional, 0 keyword pair)</span><br><span class="line">           24 POP_TOP</span><br><span class="line">           25 LOAD_CONST               0 (None)</span><br><span class="line">           28 RETURN_VALUE</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意行 4 条 3 (STORE_FAST) 以及行 5 条 9/15 (LOAD_FAST)</p>
</blockquote>
<p>这说明了这里的 a 并不是 LOAD_GLOBAL 而来，而是从该函数的作用域 LOAD_FAST 而来。</p>
<h3 id="1-3-第三个例子"><a href="#1-3-第三个例子" class="headerlink" title="1.3 第三个例子"></a>1.3 第三个例子</h3><p>那我们在函数体重修改一下 a 值看看。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span>():</span></span><br><span class="line">    print(a, <span class="built_in">id</span>(a)) <span class="comment"># 注释掉此行不影响结论</span></span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    print(a, <span class="built_in">id</span>(a))</span><br><span class="line">func3() <span class="comment"># 当调用到这里的时候 local variable &#x27;a&#x27; referenced before assignment</span></span><br><span class="line"><span class="comment"># 即 a += 1 =&gt; a = a + 1 这里的第二个 a 报错鸟</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3           0 LOAD_GLOBAL              0 (print)</span><br><span class="line">            3 LOAD_FAST                0 (a)</span><br><span class="line">            6 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</span><br><span class="line">            9 POP_TOP</span><br><span class="line"></span><br><span class="line">4          10 LOAD_FAST                0 (a)</span><br><span class="line">           13 LOAD_CONST               1 (1)</span><br><span class="line">           16 BINARY_ADD</span><br><span class="line">           17 STORE_FAST               0 (a)</span><br><span class="line"></span><br><span class="line">5          20 LOAD_GLOBAL              0 (print)</span><br><span class="line">           23 LOAD_FAST                0 (a)</span><br><span class="line">           26 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</span><br><span class="line">           29 POP_TOP</span><br><span class="line">           30 LOAD_CONST               0 (None)</span><br><span class="line">           33 RETURN_VALUE</span><br></pre></td></tr></table></figure>

<p>那么，func3 也就自然而言由于没有无法 LOAD_FAST 对应的 a 变量，则报了引用错误。</p>
<p>然后问题来了，a 为基本类型的时候是这样的。如果引用类型呢？我们直接仿照 func3 的实例把 a 改成 list 类型。如下</p>
<h3 id="1-4-第四个例子"><a href="#1-4-第四个例子" class="headerlink" title="1.4 第四个例子"></a>1.4 第四个例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span>():</span></span><br><span class="line">    print(a, <span class="built_in">id</span>(a)) <span class="comment"># 这条注不注释掉都一样</span></span><br><span class="line">    a += <span class="number">1</span> <span class="comment"># 这里我故意写错 按理来说应该是 a.append(1)</span></span><br><span class="line">    print(a, <span class="built_in">id</span>(a))</span><br><span class="line">func4()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当调用到这里的时候 local variable &#x27;a&#x27; referenced before assignment</span></span><br></pre></td></tr></table></figure>

<p>╮(╯▽╰)╭ 看来事情那么简单，结果变量 a 依旧是无法修改。</p>
<p>可按理来说跟应该报下面的错误呀</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;int&#39; object is not iterable</span><br></pre></td></tr></table></figure>

<h3 id="1-5-第五个例子"><a href="#1-5-第五个例子" class="headerlink" title="1.5 第五个例子"></a>1.5 第五个例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func5</span>():</span></span><br><span class="line">    print(a, <span class="built_in">id</span>(a))</span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line">    print(a, <span class="built_in">id</span>(a))</span><br><span class="line">func5()</span><br><span class="line"><span class="comment"># [1] 4500243208</span></span><br><span class="line"><span class="comment"># [1, 1] 4500243208</span></span><br></pre></td></tr></table></figure>

<p>这下可以修改了。看一下字节码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3           0 LOAD_GLOBAL              0 (print)</span><br><span class="line">            3 LOAD_GLOBAL              1 (a)</span><br><span class="line">            6 LOAD_GLOBAL              2 (id)</span><br><span class="line">            9 LOAD_GLOBAL              1 (a)</span><br><span class="line">           12 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</span><br><span class="line">           15 CALL_FUNCTION            2 (2 positional, 0 keyword pair)</span><br><span class="line">           18 POP_TOP</span><br><span class="line"></span><br><span class="line">4          19 LOAD_GLOBAL              1 (a)</span><br><span class="line">           22 LOAD_ATTR                3 (append)</span><br><span class="line">           25 LOAD_CONST               1 (1)</span><br><span class="line">           28 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</span><br><span class="line">           31 POP_TOP</span><br><span class="line"></span><br><span class="line">5          32 LOAD_GLOBAL              0 (print)</span><br><span class="line">           35 LOAD_GLOBAL              1 (a)</span><br><span class="line">           38 LOAD_GLOBAL              2 (id)</span><br><span class="line">           41 LOAD_GLOBAL              1 (a)</span><br><span class="line">           44 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</span><br><span class="line">           47 CALL_FUNCTION            2 (2 positional, 0 keyword pair)</span><br><span class="line">           50 POP_TOP</span><br><span class="line">           51 LOAD_CONST               0 (None)</span><br><span class="line">           54 RETURN_VALUE</span><br></pre></td></tr></table></figure>

<p>从全局拿来 a 变量，执行 append 方法。</p>
<h2 id="0x02-作用域准则以及本地赋值准则"><a href="#0x02-作用域准则以及本地赋值准则" class="headerlink" title="0x02 作用域准则以及本地赋值准则"></a>0x02 作用域准则以及本地赋值准则</h2><h3 id="2-1-作用域准则"><a href="#2-1-作用域准则" class="headerlink" title="2.1 作用域准则"></a>2.1 作用域准则</h3><p>看来这是解释器遵循了某种变量查找的法则，似乎就只能从原理上而不是在 CPython 的实现上解释这个问题了。</p>
<p>查找了一些资料，发现 Python 解释器在依据 基于 LEGB 准则 （顺手吐槽一下不是 LGBT）</p>
<p>LEGB 指的变量查找遵循</p>
<ul>
<li>Local</li>
<li>Enclosing-function locals</li>
<li>Global</li>
<li>Built-In</li>
</ul>
<p>StackOverFlow 上 martineau 提供了一个不错的例子用来说明</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">100</span></span><br><span class="line">print(<span class="string">&quot;1. Global x:&quot;</span>, x)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    y = x</span><br><span class="line">    print(<span class="string">&quot;2. Enclosed y:&quot;</span>, y)</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">    print(<span class="string">&quot;3. Enclosed x:&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;4. Enclosed self.x&quot;</span>, self.x)</span><br><span class="line">        print(<span class="string">&quot;5. Global x&quot;</span>, x)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(y)</span><br><span class="line">        <span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;6.&quot;</span>, e)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method_local_ref</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(x)</span><br><span class="line">        <span class="keyword">except</span> UnboundLocalError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;7.&quot;</span>, e)</span><br><span class="line">        x = <span class="number">200</span> <span class="comment"># causing 7 because has same name</span></span><br><span class="line">        print(<span class="string">&quot;8. Local x&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">inst = Test()</span><br><span class="line">inst.method()</span><br><span class="line">inst.method_local_ref()</span><br></pre></td></tr></table></figure>

<p>我们试着用变量查找准则去解释 <strong>第一个例子</strong> 的时候，是解释的通的。</p>
<p>第二个例子，发现函数体内的 a 变量已经不是那个 a 变量了。要是按照这个查找原则的话，似乎有点说不通了。</p>
<p>但当解释第三个例子的时候，就完全说不通了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span>():</span></span><br><span class="line">    print(a, <span class="built_in">id</span>(a)) <span class="comment"># 注释掉此行不影响结论</span></span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    print(a, <span class="built_in">id</span>(a))</span><br><span class="line">func3() <span class="comment"># 当调用到这里的时候 local variable &#x27;a&#x27; referenced before assignment</span></span><br><span class="line"><span class="comment"># 即 a += 1 =&gt; a = a + 1 这里的第二个 a 报错鸟</span></span><br></pre></td></tr></table></figure>

<p>按照我的猜想，这里的代码执行可能有两种情况：</p>
<ul>
<li>当代码执行到第三行的时候可能是向从 local 找 a, 发现没有，再找 Enclosing-function 发现没有，最后应该在 Global 里面找到才是。注释掉第三行的时候也是同理。</li>
<li>当代码执行到第三行的时候可能是向下从 local 找 a, 发现有，然后代码执行，结束。</li>
</ul>
<p>但如果真的和我的想法接近的话，这两种情况都可以执行，除了变量作用域之外还是有一些其他的考量。我把这个叫做<strong>本地赋值准则</strong> （拍脑袋起的名称）</p>
<p>一般我们管这种考量叫做 <del>Python 作者就是觉得这种编码方式好你爱写不写</del> Python 作者对于变量作用域的权衡。</p>
<p>事实上，当解释器编译函数体为字节码的时候，如果是一个赋值操作 (list.append 之流不是赋值操作），则会被限定这个变量认为是一个 local 变量。如果在 local 中找不到，并不向上查找，就报引用错误。</p>
<pre><code>这不是 BUG
这不是 BUG
这不是 BUG</code></pre>
<p>这是一种设计权衡 Python 认为 虽然不强求强制声明类型，但假定被赋值的变量是一个 Local 变量。这样减少避免动态语言比如 JavaScript 动不动就修改掉了全局变量的坑。</p>
<p>这也就解释了第四个例子中赋值操作报错，以及第五个例子 append 为什么可以正常执行。</p>
<p>如果我偏要勉强呢？ 可以通过 global 和 nonlocal 来 引入模块级变量 or 上一级变量。</p>
<blockquote>
<p>PS: JS 也开始使用 let 进行声明，小箭头函数内部赋值查找变量也是向上查找。</p>
</blockquote>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><a href="https://stackoverflow.com/questions/291978/short-description-of-the-scoping-rules">Martineau 的例子</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-11-20</strong> 从原有笔记中抽取本文整理而成</li>
</ul>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>作用域</tag>
        <tag>语言细节</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 的系统与软件</title>
    <url>/2017/12/23/macOSInDepth/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>折腾了 Windows 很多年，后来出于个人开发需求转投 Mac，使用起来一直很顺手。现在也开始从顺手开始到了解更深一点的东西。</p>
<h2 id="0x01-系统安全架构"><a href="#0x01-系统安全架构" class="headerlink" title="0x01 系统安全架构"></a>0x01 系统安全架构</h2><h3 id="1-1-系统架构概述"><a href="#1-1-系统架构概述" class="headerlink" title="1.1 系统架构概述"></a>1.1 系统架构概述</h3><p>非开发人员分层：</p>
<ul>
<li>User Experience<ul>
<li>Aqua</li>
<li>Dashboard</li>
<li>Spotlight</li>
<li>Dock</li>
<li>输入法</li>
<li>屏保</li>
<li>辅助功能</li>
<li>语音</li>
<li>位置与地图</li>
<li>搜索</li>
<li>etc</li>
</ul>
</li>
<li>Application Framework<ul>
<li>Cocoa</li>
</ul>
</li>
<li>Graphics and Media<ul>
<li>核心框架，OpenAL,Quartz,SceneKit,SpriteKit</li>
</ul>
</li>
<li>Darwin<ul>
<li>系统内核与 Shell 环境</li>
</ul>
</li>
</ul>
<p>开发人员分层：</p>
<ul>
<li>Cocoa Layer: Cocoa 框架层 包括了用于开发界面程序的框架集合。</li>
<li>Foundation Layer: 提供了程序开发室使用到的基础数据类型、数值处理、网络、IO 和 日期等</li>
<li>Media Layer: 提供了图像、声音、视频、动画及游戏开发需要的接口</li>
<li>Core Service Layer: 系统安全、底层内部数据访问以及存储接口。比如 AddressBook,CoreData,QuickLook 用于快速浏览插件开发。CoreFoundation 框架也属于这一层。</li>
<li>Core OS Layer: 加速器，蓝牙，异常处理，网络扩展，系统配置</li>
<li>Kernel &amp; Driver Layer: 内核与驱动层。包括开发设备驱动程序与内核扩展所需的一些框架。</li>
</ul>
<p>应用程序是一个 bundle 文件，一般为 xxx.app 文件夹，</p>
<h3 id="1-1-一些常用软件"><a href="#1-1-一些常用软件" class="headerlink" title="1.1 一些常用软件"></a>1.1 一些常用软件</h3><p>Clang<br>LLVM</p>
<p>HT Editor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install ht</span><br></pre></td></tr></table></figure>

<h2 id="0x02-前言"><a href="#0x02-前言" class="headerlink" title="0x02 前言"></a>0x02 前言</h2><h2 id="0x03-前言"><a href="#0x03-前言" class="headerlink" title="0x03 前言"></a>0x03 前言</h2><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li>macOS 软件安全和逆向分析</li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-12-20</strong> 初始化本文</li>
<li><strong>2018-02-10</strong> 添加笔记</li>
</ul>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>XCode</tag>
        <tag>App Store</tag>
        <tag>Apple Store</tag>
        <tag>iTunes Store</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 CSS 你应该知道的一切</title>
    <url>/2017/12/28/AllStuffAboutCSS/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本笔记诞生于很久前零零散散记录的笔记，拿出来发布一下。</p>
<h2 id="0x01-CSS-是如何工作的？"><a href="#0x01-CSS-是如何工作的？" class="headerlink" title="0x01 CSS 是如何工作的？"></a>0x01 CSS 是如何工作的？</h2><p>HTML 是元素的标记语言。</p>
<p>CSS 被用来 样式和网页布局的。</p>
<p>样式和布局都有哪些呢？</p>
<ul>
<li>字体</li>
<li>颜色</li>
<li>大小</li>
<li>内容间距</li>
<li>多列</li>
<li>动画</li>
</ul>
<p>通过 DOM 树的节点和样式节点结合，生成渲染树，然后交给浏览器进行渲染从而使得外观发生变化。</p>
<h2 id="0x02-CSS-基本语法"><a href="#0x02-CSS-基本语法" class="headerlink" title="0x02 CSS 基本语法"></a>0x02 CSS 基本语法</h2><p>CSS 基本语法有三个组成部分：</p>
<ol>
<li>规则</li>
<li>选择器</li>
<li>属性</li>
</ol>
<h3 id="2-1-CSS-规则"><a href="#2-1-CSS-规则" class="headerlink" title="2.1 CSS 规则"></a>2.1 CSS 规则</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">colour</span>: blue;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// @规则</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span></span><br><span class="line"><span class="keyword">@charset</span></span><br><span class="line"><span class="keyword">@media</span></span><br><span class="line"><span class="keyword">@font-face</span></span><br><span class="line"></span><br><span class="line">/* in shorthand like padding <span class="keyword">and</span> margin, the values are applied</span><br><span class="line">in the order top, right, bottom, left (the same order as an analog clock). There are also other</span><br><span class="line">shorthand types, for example two values, which set for example</span><br><span class="line">the padding for top/bottom, then left/right */</span><br><span class="line"><span class="attribute">padding:</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">5px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-选择器"><a href="#2-2-选择器" class="headerlink" title="2.2 选择器"></a>2.2 选择器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Simple selectors: Match one or more elements based on element type, class, or id.</span><br><span class="line">&#x2F;* All div elements are blue *&#x2F;</span><br><span class="line">div &#123;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1 &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    text-shadow: 1px 1px 1px black;</span><br><span class="line">    background: linear-gradient(to bottom, rgba(0,0,0,0.25), rgba(0,0,0,0.1));</span><br><span class="line">    padding: 3px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    box-shadow: inset 2px 2px 5px rgba(0,0,0,0.5), inset -2px -2px 5px rgba(255,255,255,0.5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Attribute selectors: Match one or more elements based on their attributes&#x2F;attribute values.</span><br><span class="line">&#x2F;* All elements with the attribute &quot;data-vegetable&quot;</span><br><span class="line">are given green text *&#x2F;</span><br><span class="line"></span><br><span class="line">[data-vegetable] &#123;</span><br><span class="line">    color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* All elements with the attribute &quot;data-vegetable&quot;</span><br><span class="line">with the exact value &quot;liquid&quot; are given a golden</span><br><span class="line">background color *&#x2F;</span><br><span class="line"></span><br><span class="line">[data-vegetable&#x3D;&quot;liquid&quot;] &#123;</span><br><span class="line">    background-color: goldenrod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* All elements with the attribute &quot;data-vegetable&quot;,</span><br><span class="line">containing the value &quot;spicy&quot;, even among others,</span><br><span class="line">are given a red text color *&#x2F;</span><br><span class="line"></span><br><span class="line">[data-vegetable~&#x3D;&quot;spicy&quot;] &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Pseudo-classes: Match one or more elements that exist in a certain state, such as an element that is being hovered over by the mouse pointer, or a checkbox that is currently disabled or checked, or an element that is the first child of its parent in the DOM tree.</span><br><span class="line">&#x2F;&#x2F; Pseudo-elements: Match one or more parts of content that are in a certain position in relation to an element, for example the first word of each paragraph, or generated content appearing just before an element.</span><br><span class="line"></span><br><span class="line">:active</span><br><span class="line">:any</span><br><span class="line">:checked</span><br><span class="line">:default</span><br><span class="line">:dir()</span><br><span class="line">:disabled</span><br><span class="line">:empty</span><br><span class="line">:enabled</span><br><span class="line">:first</span><br><span class="line">:first-child</span><br><span class="line">:first-of-type</span><br><span class="line">:fullscreen</span><br><span class="line">:focus</span><br><span class="line">:focus-within</span><br><span class="line">:hover</span><br><span class="line">:indeterminate</span><br><span class="line">:in-range</span><br><span class="line">:invalid</span><br><span class="line">:lang()</span><br><span class="line">:last-child</span><br><span class="line">:last-of-type</span><br><span class="line">:left</span><br><span class="line">:link</span><br><span class="line">:not()</span><br><span class="line">:nth-child()</span><br><span class="line">:nth-last-child()</span><br><span class="line">:nth-last-of-type()</span><br><span class="line">:nth-of-type()</span><br><span class="line">:only-child</span><br><span class="line">:only-of-type</span><br><span class="line">:optional</span><br><span class="line">:out-of-range</span><br><span class="line">:read-only</span><br><span class="line">:read-write</span><br><span class="line">:required</span><br><span class="line">:right</span><br><span class="line">:root</span><br><span class="line">:scope</span><br><span class="line">:target</span><br><span class="line">:valid</span><br><span class="line">:visited</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Combinators: These are not exactly selectors themselves, but ways of combining two or more selectors in useful ways for very specific selections. So for example, you could select only paragraphs that are direct descendants of divs, or paragraphs that come directly after headings.</span><br><span class="line"></span><br><span class="line">A, B	匹配 A 或 B</span><br><span class="line">A B	    匹配 A 里面的 B</span><br><span class="line">A &gt; B	匹配 A 里面的直属 B</span><br><span class="line">A + B	匹配 A 下一个兄弟节点 B</span><br><span class="line">A ~ B	匹配 A 的下一群兄弟节点 B</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Multiple selectors: Again, these are not separate selectors; the idea is that you can put multiple selectors on the same CSS rule, separated by commas, to apply a single set of declarations to all the elements selected by those selectors.</span><br></pre></td></tr></table></figure>

<h3 id="2-3-属性"><a href="#2-3-属性" class="headerlink" title="2.3 属性"></a>2.3 属性</h3><h4 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h4><p><a href="http://cssreference.io/positioning/">http://cssreference.io/positioning/</a></p>
<h4 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h4><h4 id="Box-Model"><a href="#Box-Model" class="headerlink" title="Box Model"></a>Box Model</h4><p>块级元素 (Block)<br>  新开始一行并且尽可能撑满容器，p,form,header,footer,section<br>  设置块级元素的 width 可以防止它从左到右撑满整个容器<br>行内元素 (inline)<br>  包裹一些文字，而不会打乱段落的布局，a,span<br>none<br>  script 默认 display:none,visibility:hidden 是占据空间</p>
<p>盒模型</p>
<p>属性</p>
<p>三，层叠与继承</p>
<p>既然是层叠，就要有层叠的规律</p>
<h2 id="0x03-CSS-新语法"><a href="#0x03-CSS-新语法" class="headerlink" title="0x03 CSS 新语法"></a>0x03 CSS 新语法</h2><h3 id="3-1-Flex-Layout"><a href="#3-1-Flex-Layout" class="headerlink" title="3.1 Flex Layout"></a>3.1 Flex Layout</h3><ul>
<li><a href="https://github.com/philipwalton/solved-by-flexbox">https://github.com/philipwalton/solved-by-flexbox</a></li>
</ul>
<h3 id="3-2-Grid-Layout"><a href="#3-2-Grid-Layout" class="headerlink" title="3.2 Grid Layout"></a>3.2 Grid Layout</h3><h2 id="0x04-SCSS"><a href="#0x04-SCSS" class="headerlink" title="0x04 SCSS"></a>0x04 SCSS</h2><p>这是一种兼容 CSS 语法的新语言。主要用于提升代码的可维护性。</p>
<p>至于其他 less 之类大同小异。只选取了功能最强大的部分进行间接。</p>
<h3 id="4-1-OOCSS-BEM-我的实践"><a href="#4-1-OOCSS-BEM-我的实践" class="headerlink" title="4.1 OOCSS / BEM / 我的实践"></a>4.1 OOCSS / BEM / 我的实践</h3><h3 id="4-1-如何组织-SCSS-代码-—-布局篇"><a href="#4-1-如何组织-SCSS-代码-—-布局篇" class="headerlink" title="4.1 如何组织 SCSS 代码 — 布局篇"></a>4.1 如何组织 SCSS 代码 — 布局篇</h3><h3 id="4-2-如何组织-SCSS-代码-—-组件篇"><a href="#4-2-如何组织-SCSS-代码-—-组件篇" class="headerlink" title="4.2 如何组织 SCSS 代码 — 组件篇"></a>4.2 如何组织 SCSS 代码 — 组件篇</h3><h4 id="4-2-BEM"><a href="#4-2-BEM" class="headerlink" title="4.2 BEM"></a>4.2 BEM</h4><h2 id="0x05-CSS-规范"><a href="#0x05-CSS-规范" class="headerlink" title="0x05 CSS 规范"></a>0x05 CSS 规范</h2><ul>
<li><p><a href="https://github.com/airbnb/css">https://github.com/airbnb/css</a></p>
</li>
<li><p>Use soft tabs (2 spaces) for indentation</p>
</li>
<li><p>Prefer dashes over camelCasing in class names.</p>
<ul>
<li>Underscores and PascalCasing are okay if you are using BEM (see OOCSS and BEM below).</li>
</ul>
</li>
<li><p>Do not use ID selectors</p>
</li>
<li><p>When using multiple selectors in a rule declaration, give each selector its own line.</p>
</li>
<li><p>Put a space before the opening brace { in rule declarations</p>
</li>
<li><p>In properties, put a space after, but not before, the : character.</p>
</li>
<li><p>Put closing braces } of rule declarations on a new line</p>
</li>
<li><p>Put blank lines between rule declarations</p>
</li>
</ul>
<p>OOCSS 与 BEM 混用</p>
<blockquote>
<p>只要是可维护的好代码，并不需要拘泥于用什么风格</p>
</blockquote>
<h3 id="5-1-圣杯"><a href="#5-1-圣杯" class="headerlink" title="5.1 圣杯"></a>5.1 圣杯</h3><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><a href="https://github.com/picturepan2/spectre">https://github.com/picturepan2/spectre</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-12-20</strong> 初始化本文</li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>SASS</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中的数据压缩和存档</title>
    <url>/2018/01/23/PythonCompression/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在一次数据分析过程中，对方扔过来 40GB 的数据 – data.tar.gz .</p>
<p>我想着能不能直接用 pandas 直接读取这个文件呢？查找了一些资料，于是有了本文。</p>
<p>Python 中支持如下：</p>
<ul>
<li>数据压缩算法：zlib, gzip, bzip2 and lzma</li>
<li>存档格式：zip 以及 tar</li>
</ul>
<h2 id="0x01-压缩是怎么回事？"><a href="#0x01-压缩是怎么回事？" class="headerlink" title="0x01 压缩是怎么回事？"></a>0x01 压缩是怎么回事？</h2><h2 id="0x02-zlib-与-gzip"><a href="#0x02-zlib-与-gzip" class="headerlink" title="0x02 zlib 与 gzip"></a>0x02 zlib 与 gzip</h2><p>gzip 依赖于 zlib</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 读取压缩文件</span><br><span class="line">import gzip</span><br><span class="line">with gzip.open(&#39;&#x2F;home&#x2F;joe&#x2F;file.txt.gz&#39;, &#39;rb&#39;) as f:</span><br><span class="line">    file_content &#x3D; f.read()</span><br><span class="line"></span><br><span class="line"># 写入压缩文件</span><br><span class="line">import gzip</span><br><span class="line">content &#x3D; b&quot;Lots of content here&quot;</span><br><span class="line">with gzip.open(&#39;&#x2F;home&#x2F;joe&#x2F;file.txt.gz&#39;, &#39;wb&#39;) as f:</span><br><span class="line">    f.write(content)</span><br><span class="line"></span><br><span class="line"># 拷贝压缩文件</span><br><span class="line">import gzip</span><br><span class="line">import shutil</span><br><span class="line">with open(&#39;&#x2F;home&#x2F;joe&#x2F;file.txt&#39;, &#39;rb&#39;) as f_in:</span><br><span class="line">    with gzip.open(&#39;&#x2F;home&#x2F;joe&#x2F;file.txt.gz&#39;, &#39;wb&#39;) as f_out:</span><br><span class="line">        shutil.copyfileobj(f_in, f_out)</span><br><span class="line"></span><br><span class="line"># 压缩二进制字符串</span><br><span class="line">import gzip</span><br><span class="line">s_in &#x3D; b&quot;Lots of content here&quot;</span><br><span class="line">s_out &#x3D; gzip.compress(s_in)</span><br></pre></td></tr></table></figure>

<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-12-20</strong> 初始化本文</li>
</ul>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>数据压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>用 tmux 与 tmuxinator 打造开发工作流</title>
    <url>/2018/01/28/TmuxWithTmuxinatorWorkflow/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>本文就我最近开发的一个前后端的项目（名字叫做 yavueblog) 来简单介绍两个神器</p>
<ul>
<li>一个是 tmux</li>
<li>一个是 tmuxinator</li>
</ul>
<p>我在开发这个前后端的项目的时候要开启要通过不少的命令来启动服务：</p>
<ul>
<li>（前端开发）运行 npm run dev 进行开发前端页面</li>
<li>（前端开发）运行 npm run dev:theme , 当主题的 SCSS 发生变化的同时，编译 SCSS</li>
<li>（前端开发）运行 npm run dev:iconfont, 当移入了新的 svg 图标的时候，自动构建出新的字体文件与 iconfont.css 。</li>
<li>（后端开发）运行 make dockerup 中开启 Django 应用。启动 Django 服务，PostgreSQL 数据库，Redis 等等，</li>
</ul>
<p>我的需求如下：</p>
<ul>
<li>一键启动这些脚本，前两个任务，放在第一个终端。</li>
<li>后面两个任务放在第二、三个终端里。</li>
</ul>
<p>以前的做法都是新建三个终端选项卡，然后第一个终端分两屏，然后分别到各个终端 cd 或者 autojump 到对应的目录，然后手动运行命令。</p>
<p>加上运行 npm run dev:theme 的时候，我是通过 Python 的 watchdog 来实现对指定目录和指定类型文件的变化进行监听的，所以还要切换 PyEnv 自定义的 Python 的环境中。</p>
<p>这些命令反反复复输入还是挺麻烦的事情，为何不用工具来解决呢？</p>
<h2 id="0x01-tmux-tmuxinator"><a href="#0x01-tmux-tmuxinator" class="headerlink" title="0x01 tmux + tmuxinator"></a>0x01 tmux + tmuxinator</h2><p>先安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install tmux</span><br><span class="line">brew install ruby</span><br><span class="line">gem install tmuxinator</span><br></pre></td></tr></table></figure>

<p>什么是 tmux?  简单而言，就是一个终端复用软件。<br>什么是 tmuxinator? 简单而言，就是为了简化 tmux 操作的软件。只需要编写 yaml 即快速开启一个比较适合你的终端窗口布局。</p>
<p>关于 tmux 的配置，推荐这个 repo</p>
<p><a href="https://github.com/gpakosz/.tmux">https://github.com/gpakosz/.tmux</a></p>
<h2 id="0x02-编写-Tmuxinator-配置文件"><a href="#0x02-编写-Tmuxinator-配置文件" class="headerlink" title="0x02 编写 Tmuxinator 配置文件"></a>0x02 编写 Tmuxinator 配置文件</h2><p>输入 tmuxinator new yavueblog</p>
<p>修改文件如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ~&#x2F;.tmuxinator&#x2F;yavueblog.yml</span><br><span class="line"></span><br><span class="line">name: yavueblog</span><br><span class="line">root: ~&#x2F;Codes&#x2F;PublicRepos&#x2F;YaBlogSystem&#x2F;</span><br><span class="line"></span><br><span class="line"># Optional tmux socket</span><br><span class="line"># socket_name: foo</span><br><span class="line"></span><br><span class="line"># Runs before everything. Use it to start daemons etc.</span><br><span class="line"># pre: sudo &#x2F;etc&#x2F;rc.d&#x2F;mysqld start</span><br><span class="line"></span><br><span class="line"># Runs in each window and pane before window&#x2F;pane specific commands. Useful for setting up interpreter versions.</span><br><span class="line">pre_window: pyenv activate 3.5.2&#x2F;envs&#x2F;py3-daily</span><br><span class="line"></span><br><span class="line">windows:</span><br><span class="line">  - &quot;网站开发&quot;:</span><br><span class="line">      layout: main-vertical</span><br><span class="line">      # Synchronize all panes of this window, can be enabled before or after the pane commands run.</span><br><span class="line">      # &#39;before&#39; represents legacy functionality and will be deprecated in a future release, in favour of &#39;after&#39;</span><br><span class="line">      # synchronize: after</span><br><span class="line">      panes:</span><br><span class="line">        - &quot;cd .&#x2F;YaVueBlog&#x2F; &amp;&amp; npm run dev&quot;</span><br><span class="line">        - &quot;cd .&#x2F;YaVueBlog&#x2F; &amp;&amp; npm run dev:theme&quot;</span><br><span class="line">  - &quot;iconfont 构建&quot;: &quot;cd .&#x2F;YaVueBlog&#x2F; &amp;&amp; npm run dev:iconfont&quot;</span><br><span class="line">  - &quot;DockerizedDjango&quot;: &quot;cd .&#x2F;YaDjangoBlog&#x2F; &amp;&amp; make docker-compose-build-up&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样的话，每次开发就只需要运行 tmuxinator start yavueblog，并且打开 IDE 直接捋起袖子就是干就好了。</p>
<h2 id="0x03-玩-tmux-首先要掌握的三个小技巧"><a href="#0x03-玩-tmux-首先要掌握的三个小技巧" class="headerlink" title="0x03 玩 tmux 首先要掌握的三个小技巧"></a>0x03 玩 tmux 首先要掌握的三个小技巧</h2><p>如果你刚用 tmux 的话，火速掌握下面三个小技巧。要不然会抓狂的。</p>
<ol>
<li>切换终端</li>
</ol>
<ul>
<li>c-b + 数字</li>
<li>c-b + n</li>
</ul>
<ol start="2">
<li>滚屏</li>
</ol>
<p><a href="https://superuser.com/questions/209437/how-do-i-scroll-in-tmux">https://superuser.com/questions/209437/how-do-i-scroll-in-tmux</a></p>
<ol start="3">
<li>复制文字</li>
</ol>
<p><a href="https://superuser.com/questions/196060/selecting-text-in-tmux-copy-mode">https://superuser.com/questions/196060/selecting-text-in-tmux-copy-mode</a></p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><a href="https://github.com/twocucao">我的 Github</a></li>
</ul>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-03-08 09:33:37</strong> 重新润饰文字，弃用 Rails 开发一年。现在主 DjangoRestFrameWork+VueJS</li>
<li><strong>2018-01-28 11:44:00</strong> 重修文字，适配本文</li>
</ul>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>Tmux</tag>
        <tag>Tmuxinator</tag>
        <tag>全栈开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy Cheatsheet</title>
    <url>/2018/02/03/NumpyCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Numpy 相关语句。</p>
<p>主要包含：</p>
<h1 id="Numpy-库"><a href="#Numpy-库" class="headerlink" title="Numpy 库"></a>Numpy 库</h1><h2 id="0x00-前言-1"><a href="#0x00-前言-1" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Numpy 相关语句。</p>
<p>对于数据分析应用而言，最应该关注：</p>
<ul>
<li>用于数据整理和清理、子集构造和过滤、转换等快速的矢量化数组运算。</li>
<li>常用的数组算法，如排序、唯一化、集合运算等。</li>
<li>高效的描述统计和数据聚合 / 摘要运算。</li>
<li>用于异构数据集的合并 / 连接运算的数据对齐和关系型数据运算。</li>
<li>将条件逻辑表述为数组表达式（而不是带有 if-else-if 分支的循环）</li>
<li>数据的分组运算（聚合、转换、函数应用等）。</li>
</ul>
<blockquote>
<p>学习 Numpy 本质上是为了更好的使用 Pandas</p>
</blockquote>
<h2 id="0x01-ndarray"><a href="#0x01-ndarray" class="headerlink" title="0x01 ndarray"></a>0x01 ndarray</h2><h3 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a>1.1 数据类型</h3><h3 id="1-2-创建-ndarray"><a href="#1-2-创建-ndarray" class="headerlink" title="1.2 创建 ndarray"></a>1.2 创建 ndarray</h3><h3 id="1-3-数组和标量之间的运算"><a href="#1-3-数组和标量之间的运算" class="headerlink" title="1.3 数组和标量之间的运算"></a>1.3 数组和标量之间的运算</h3><p>当我们把数组当做矢量的时候。</p>
<ol>
<li>两个大小相同的矢量将运算到元素级</li>
<li>矢量和标量将作用与每一个元素</li>
<li>不同大小的矢量之间的运算叫做广播</li>
</ol>
<h3 id="1-4-索引和切片"><a href="#1-4-索引和切片" class="headerlink" title="1.4 索引和切片"></a>1.4 索引和切片</h3><h3 id="1-4-1-一般索引和一般切片"><a href="#1-4-1-一般索引和一般切片" class="headerlink" title="1.4.1 一般索引和一般切片"></a>1.4.1 一般索引和一般切片</h3><p>对于一维数组的话，如果没有显式 copy 则会修改原来的值。</p>
<p>切片语法与 Python 相近</p>
<h3 id="1-4-2-切片型索引"><a href="#1-4-2-切片型索引" class="headerlink" title="1.4.2 切片型索引"></a>1.4.2 切片型索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[:<span class="number">2</span>,<span class="number">1</span>:]</span><br><span class="line">a[<span class="number">2</span>,<span class="number">1</span>:]</span><br></pre></td></tr></table></figure>

<h3 id="1-4-3-布尔型索引"><a href="#1-4-3-布尔型索引" class="headerlink" title="1.4.3 布尔型索引"></a>1.4.3 布尔型索引</h3><p>参考 pandas 语法</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-06-03</strong> 初始化本文</li>
<li><strong>2018-02-03</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>Pandas</tag>
        <tag>效率</tag>
        <tag>Cheatsheet</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker CheatSheet</title>
    <url>/2018/02/10/DockerCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Docker 相关和命令。</p>
<ul>
<li>Docker 相关概念</li>
<li>Docker 配套工具</li>
<li>Django PostgreSQL RabbitMQ Redis ElasticSearch Sentry 集群 Docker 化</li>
<li>Docker 踩坑记录</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>

<h2 id="0x01-Docker-相关概念"><a href="#0x01-Docker-相关概念" class="headerlink" title="0x01 Docker 相关概念"></a>0x01 Docker 相关概念</h2><h3 id="1-1-Docker-是什么？"><a href="#1-1-Docker-是什么？" class="headerlink" title="1.1 Docker 是什么？"></a>1.1 Docker 是什么？</h3><p>在认知 Docker 这种相对而言比较新概念的时候，只要从以往的经验中拿出一个词语来概括新词汇即可。</p>
<p>于是，我们便可以这么理解：</p>
<blockquote>
<p>Docker 是一种比虚拟机轻量的用来存放职责比较单一的应用的容器。</p>
</blockquote>
<p>也就是三点：</p>
<ul>
<li>比虚拟机轻量</li>
<li>用来存放职责单一的应用</li>
<li>容器</li>
</ul>
<p>显然这是一种理解，而不是一种定义。</p>
<h3 id="1-2-Docker-是用来做什么的？"><a href="#1-2-Docker-是用来做什么的？" class="headerlink" title="1.2 Docker 是用来做什么的？"></a>1.2 Docker 是用来做什么的？</h3><p>新技术本质是什么？工具也。<br>每一个新的技术都是为了提升效率才被创造出来，那么，究竟 Docker 可以从哪些方面提升我们的效率呢？</p>
<p>我们知道开发一个有些规模的网站的话，需要严格遵守如下的开发流程：</p>
<ul>
<li>编码</li>
<li>测试</li>
<li>集成到系统中</li>
<li>部署</li>
</ul>
<p>但如果人员比较多，则会出现问题，有的人喜欢用 MacOS, 有的人喜欢用 Ubuntu, 开发测试环境怎么统一呢？如果开发人员明明使用的是某个版本的 PostgreSQL, 用了最新的功能，但是测试和运维用的就是老版本的功能怎么办？</p>
<p>部署环境也会有问题，比如，开发部突然想使用更高版本的软件，比如突然需要更多的 Django 应用来负担海量请求的怎么办？Hadoop 不够用怎么办？</p>
<p>当然，思路很简单，开发的时候使用虚拟机，拷贝给大家一起用，部署的时候多创建一些机器，然后上 Ansible 远程操控。即可。</p>
<p>并不是不行，但是 Docker 由于更加轻量，操作粒度更加细腻，我可以销毁镜像，上传镜像，定制镜像，很轻松调整镜像包并且安装挂载文件。</p>
<h2 id="0x02-Docker-初始配置"><a href="#0x02-Docker-初始配置" class="headerlink" title="0x02 Docker 初始配置"></a>0x02 Docker 初始配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-machine create --driver&#x3D;virtualbox default</span><br><span class="line">docker-machine ls</span><br><span class="line">eval &quot;$(docker-machine env default)&quot;</span><br></pre></td></tr></table></figure>

<h2 id="0x03-Django-技术栈-Docker-化"><a href="#0x03-Django-技术栈-Docker-化" class="headerlink" title="0x03 Django 技术栈 Docker 化"></a>0x03 Django 技术栈 Docker 化</h2><p>为了理解这个过程，下面我将我 Docker 化 django 应用的流程按照一定步骤演示出来。我将我使用 Django 的部分经验搞出来，做成了一个 django-bpc ，即 django best practice。如果诸位有兴趣研究的话，拿来看看源码倒是倒是非常好。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 演示环境为 MAC, 在此之前，务必安装好 docker for mac 以及 virualbox</span></span><br><span class="line"><span class="comment"># xxxxxx 为 阿里云分配的容器 registry</span></span><br><span class="line">docker-machine create --engine-registry-mirror=https://xxxxxx.mirror.aliyuncs.com -d virtualbox default</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── AUTHORS.md</span><br><span class="line">├── HISTORY.md</span><br><span class="line">├── LICENSE</span><br><span class="line">├── MANIFEST.in</span><br><span class="line">├── Makefile</span><br><span class="line">├── README.md</span><br><span class="line">├── assets</span><br><span class="line">├── compose</span><br><span class="line">│   ├── django</span><br><span class="line">│   ├── elasticsearch</span><br><span class="line">│   ├── nginx</span><br><span class="line">│   ├── postgres</span><br><span class="line">│   ├── rabbitmq</span><br><span class="line">│   └── redis</span><br><span class="line">├── config</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── dev.yml</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── docs</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── exts</span><br><span class="line">│   ├── make.bat</span><br><span class="line">│   ├── make_pdf.sh</span><br><span class="line">│   └── <span class="built_in">source</span></span><br><span class="line">├── manage.py</span><br><span class="line">├── pytest.ini</span><br><span class="line">├── requirements</span><br><span class="line">│   ├── base.txt</span><br><span class="line">│   ├── local.txt</span><br><span class="line">│   ├── production.txt</span><br><span class="line">│   └── test.txt</span><br><span class="line">├── scripts</span><br><span class="line">├── setup.cfg</span><br><span class="line">├── tests</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── conftest.py</span><br><span class="line">│   └── test_basics.py</span><br><span class="line">└── yadjangoblog</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── contrib</span><br><span class="line">    ├── static</span><br><span class="line">    ├── templates</span><br><span class="line">    ├── yaaccounts</span><br><span class="line">    ├── yaadmin</span><br><span class="line">    ├── yaapi</span><br><span class="line">    ├── yablog</span><br><span class="line">    ├── yacommon</span><br><span class="line">    └── yataskapp</span><br></pre></td></tr></table></figure>

<h3 id="3-1-开发时"><a href="#3-1-开发时" class="headerlink" title="3.1 开发时"></a>3.1 开发时</h3><h4 id="1-运行所需组件"><a href="#1-运行所需组件" class="headerlink" title="1. 运行所需组件"></a>1. 运行所需组件</h4><p>在开发时候需要使用几个后台的组件</p>
<ul>
<li>PostgreSQL 用于做数据存储</li>
<li>Redis 用于做缓存 和 Session 等等</li>
<li>RedditMQ 用于消息队列</li>
<li>ElasticSearch 用于做搜索与推荐</li>
</ul>
<p>目录中的组件基本上都在这儿了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── compose</span><br><span class="line">│   ├── django</span><br><span class="line">│   ├── elasticsearch</span><br><span class="line">│   ├── nginx</span><br><span class="line">│   ├── postgres</span><br><span class="line">│   ├── rabbitmq</span><br><span class="line">│   └── redis</span><br></pre></td></tr></table></figure>

<p>进行初步的封装和添加脚本，不直接采用官网的配置需要是因为添加一些的定制版本。</p>
<h4 id="2-Vue-JS-运行环境"><a href="#2-Vue-JS-运行环境" class="headerlink" title="2. Vue.JS 运行环境"></a>2. Vue.JS 运行环境</h4><p>Vue.JS 使用 Vue-Cli 搭建的脚手架还是挺方便的，这个就无需 Docker 化了，需要注意的是，建议配置一下开发时候请求的 API 地址。</p>
<p>我本人用于请求本地地址的 8080 端口，并且 8080 端口映射到 Docker 容器里面的 Django App</p>
<h4 id="3-Django-App"><a href="#3-Django-App" class="headerlink" title="3. Django App"></a>3. Django App</h4><p>配置 Django, 我使用的是 ubuntu 16.04 基础镜像，然后安装必备的依赖。</p>
<p>接着指定 workdir 为当前目录</p>
<p>需要注意的是，Django App 里面需要等待 PostgreSQL 初始化完毕才能进行正常的运行接下来需要运行的命令，比如 runserver 之类的命令。</p>
<p>entrypoint 的左右即是放在命令执行之前，这样的话，重写掉 entrypoint 文件，就可以实现上面的功能了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本段代码来自 cookiecutter Django</span></span><br><span class="line">function postgres_ready()&#123;</span><br><span class="line">python &lt;&lt; END</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = psycopg2.connect(dbname=<span class="string">&quot;$POSTGRES_USER&quot;</span>, user=<span class="string">&quot;$POSTGRES_USER&quot;</span>, password=<span class="string">&quot;$POSTGRES_PASSWORD&quot;</span>, host=<span class="string">&quot;postgres&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> psycopg2.OperationalError:</span><br><span class="line">    sys.exit(-<span class="number">1</span>)</span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line">END</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">until postgres_ready; do</span><br><span class="line">  &gt;&amp;<span class="number">2</span> echo <span class="string">&quot;Postgres is unavailable - sleeping&quot;</span></span><br><span class="line">  sleep <span class="number">1</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>最后封装一些命令到，比如启动 Celery 之类的。</p>
<h4 id="4-Celery-运行环境"><a href="#4-Celery-运行环境" class="headerlink" title="4. Celery 运行环境"></a>4. Celery 运行环境</h4><h4 id="5-其他零散的重要配置"><a href="#5-其他零散的重要配置" class="headerlink" title="5. 其他零散的重要配置"></a>5. 其他零散的重要配置</h4><h3 id="3-2-具体开发"><a href="#3-2-具体开发" class="headerlink" title="3.2 具体开发"></a>3.2 具体开发</h3><p>我编写了一整套 makefile 的命令，我会先进入项目 YaDjangoBlog , 然后执行 make ; 执行 make 之后，显示了我编写的一些便于开发测试的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sep--sep-a           &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 开发时命令 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">django-build-up      build and compose up</span><br><span class="line">force_djnago_build-up django &#x2F; pg &#x2F; es</span><br><span class="line">django-before-up     e.g pg &#x2F; es &#x2F; redis</span><br><span class="line">django-runserver     runserver</span><br><span class="line">django-celerybeat    celerybeat</span><br><span class="line">django-celeryworker  celeryworker</span><br><span class="line">django-just-up       build and up</span><br><span class="line">django-manager       Enter python manage.py</span><br><span class="line">django-console       Enter Django Console</span><br><span class="line">shell                Enter Shell</span><br><span class="line">dbshell              Enter psql as yadjangoweb</span><br><span class="line">sep--sep-b           &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 测试与代码质量 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">lint                 check style with flake8</span><br><span class="line">test                 run tests quickly with the default Python</span><br><span class="line">coverage             check code coverage quickly with the default Python</span><br><span class="line">sep--sep-c           &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 文档生成相关 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">docs                 generate Sphinx HTML documentation, including API docs</span><br><span class="line">servedocs            compile the docs watching for changes</span><br><span class="line">sep--sep-d           &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 程序发布相关 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">release              package and upload a release</span><br><span class="line">dist                 builds source and wheel package</span><br><span class="line">install              install the package to the active Python&#39;s site-packages</span><br><span class="line">sep--sep-e           &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Docker 镜像相关 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">build-postgres       &gt; Postgres</span><br><span class="line">force-build-postgres &gt; Postgres</span><br><span class="line">build-ubuntu         &gt; base ubuntu</span><br><span class="line">force_build-ubuntu   &gt; base ubuntu</span><br><span class="line">build-django         &gt; base django</span><br><span class="line">force_build-django   &gt; base django</span><br><span class="line">sep--sep-f           &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 文件清理相关 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">clean                remove all build, test, coverage and Python artifacts</span><br><span class="line">clean-build          remove build artifacts</span><br><span class="line">clean-pyc            remove Python file artifacts</span><br><span class="line">clean-test           remove test and coverage artifacts</span><br></pre></td></tr></table></figure>

<h4 id="1-构建镜像"><a href="#1-构建镜像" class="headerlink" title="1. 构建镜像"></a>1. 构建镜像</h4><p>执行 build 命令即可。</p>
<h4 id="2-使用-Tmuxinator-批量运行命令"><a href="#2-使用-Tmuxinator-批量运行命令" class="headerlink" title="2. 使用 Tmuxinator 批量运行命令"></a>2. 使用 Tmuxinator 批量运行命令</h4><p>现在，我有这么一个需求，就是在 iterm 中开启如下的终端：</p>
<ul>
<li>第 1 个终端，运行的命令是 Vue.JS 的启动命令 npm run dev。</li>
<li>第 2 个终端，有两个分屏，其一用于构建 iconfont 字体文件的命令，其二用于 Gulp 动态编译 SCSS 文件的命令。</li>
<li>第 3 个终端，运行的命令是 Django 的 runserver 的命令。</li>
<li>第 4 个终端，有两个分屏，一个是 Django 容器的 bash 环境，另一个是 PostgreSQL 的 命令行环境。</li>
<li>第 5 个终端，有两个分屏，一者运行 Celery Beat，另一者则是运行 Celery Worker.</li>
</ul>
<blockquote>
<p>当然，目前没有添加 redis 和 RabbitMQ 的命令行环境</p>
</blockquote>
<h4 id="3-使用-PyCharm-进行开发"><a href="#3-使用-PyCharm-进行开发" class="headerlink" title="3. 使用 PyCharm 进行开发"></a>3. 使用 PyCharm 进行开发</h4><h3 id="3-3-部署时"><a href="#3-3-部署时" class="headerlink" title="3.3 部署时"></a>3.3 部署时</h3><p>Docker 部署需要解决的问题，是裸机部署的 Docker 化。</p>
<blockquote>
<p>TODO: 目前 Docker 部署的脚本还在编写中，这部分的文字可能后期会调整</p>
</blockquote>
<h4 id="0-Django-生产环境和开发环境之间的区别"><a href="#0-Django-生产环境和开发环境之间的区别" class="headerlink" title="0. Django 生产环境和开发环境之间的区别"></a>0. Django 生产环境和开发环境之间的区别</h4><p>生产环境和开发环境除了一些文字配置上的不同，还有一些不同，比如：</p>
<ol>
<li>新增了 uwsgi / gunicorn 作为新的 web 容器</li>
<li>新增了 Ngnix 作为反向代理</li>
<li>Celery Worker 数量的变化</li>
<li>Supervisor 进程守护</li>
</ol>
<p>首先说第一点带来的区别，我们使用 Django 内置的 runserver 的时候，其实这个命令可以用于做生产环境的 Web 服务器。</p>
<p>比如，只需如此 python manage.py runserver 0.0.0.0:8888</p>
<p>可以用，但不推荐用。没什么负载量。这时候就需要 gunicorn 了。你可以理解 Gunicorn 是进阶的 runserver,</p>
<p>可以参考：<a href="https://docs.djangoproject.com/en/2.0/howto/deployment/wsgi/gunicorn/">https://docs.djangoproject.com/en/2.0/howto/deployment/wsgi/gunicorn/</a></p>
<p>同时，Gunicorn 可以进行颗粒度更细致的操作，但负载量不如 uwsgi, 毕竟前者 python 写的，后者是 C 写的。</p>
<p>一般 Gunicorn 也会配上 NGNIX,</p>
<p>简单来说，Nginx 至少可以解决下面的问题：</p>
<ul>
<li>匹配域名</li>
<li>转发请求<ul>
<li>设置请求头</li>
<li>转发本地的静态文件 (static / media）</li>
<li>映射部分请求到 gunicorn , 然后 gunicorn 开启一个线程到 Django</li>
<li>负载均衡</li>
</ul>
</li>
</ul>
<p>需要注意的是 gunicorn 这种关键性的进程，一定要用 Supervisor 进行守护，否则挂掉了就完蛋了，</p>
<h4 id="1-裸机部署-Django-程序"><a href="#1-裸机部署-Django-程序" class="headerlink" title="1. 裸机部署 Django 程序"></a>1. 裸机部署 Django 程序</h4><h4 id="2-Docker-部署"><a href="#2-Docker-部署" class="headerlink" title="2. Docker 部署"></a>2. Docker 部署</h4><h2 id="0x04-Docker-踩坑记录"><a href="#0x04-Docker-踩坑记录" class="headerlink" title="0x04 Docker 踩坑记录"></a>0x04 Docker 踩坑记录</h2><h3 id="4-1-PostgreSQL-的初始化"><a href="#4-1-PostgreSQL-的初始化" class="headerlink" title="4.1 PostgreSQL 的初始化"></a>4.1 PostgreSQL 的初始化</h3><p>当 Docker 化 PostgreSQL 的时候，必须要把一些初始化脚本放在 docker-entrypoint-initdb.d 中，才能初始化，笔者在进行测试的时候多次发现无法进行初始化，究其原因，经过查找，如果没有及时删除 Volume 的话，则无论怎么初始化，或者 Build, 每一次都会挂载原来的文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ADD init_django_db.sh /docker-entrypoint-initdb.d/init_django_db.sh</span><br></pre></td></tr></table></figure>

<h3 id="4-2-清空所有-Image"><a href="#4-2-清空所有-Image" class="headerlink" title="4.2 清空所有 Image"></a>4.2 清空所有 Image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Delete all containers</span></span><br><span class="line">docker rm $(docker ps -a -q)</span><br><span class="line"><span class="comment"># Delete all images</span></span><br><span class="line">docker rmi $(docker images -q)</span><br><span class="line"><span class="comment"># Force delete</span></span><br><span class="line">docker rmi $(docker images -q) -f</span><br><span class="line"><span class="comment"># Delete Unused Volume</span></span><br><span class="line">docker volume prune</span><br></pre></td></tr></table></figure>

<h3 id="4-3-时区"><a href="#4-3-时区" class="headerlink" title="4.3 时区"></a>4.3 时区</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Alpine</span><br><span class="line">RUN apk --no-cache add tzdata &amp;&amp; ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime &amp;&amp; echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br><span class="line"># Ubuntu</span><br><span class="line">RUN echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone &amp;&amp; dpkg-reconfigure -f noninteractive tzdata</span><br><span class="line"># Centos</span><br><span class="line">RUN echo &quot;Asia&#x2F;shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br></pre></td></tr></table></figure>

<h1 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h1><ul>
<li><a href="https://github.com/wsargent/docker-cheat-sheet">https://github.com/wsargent/docker-cheat-sheet</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-01-20</strong> 初始化本文</li>
</ul>
]]></content>
      <categories>
        <category>我的开源项目</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Docker</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery 快速入门指北</title>
    <url>/2018/02/20/CeleryCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文编写于 2018 年初，于 2019 四月进行修订，也是笔者对 Celery 的系统梳理。</p>
<p>在我的文章如何保证 Django 项目的数据一致性中，提到了这么一个解决超卖的方案。</p>
<ol>
<li>在 Redis 里面直接生成 200 个订单号</li>
<li>然后用户来一个取走一个订单号码</li>
<li>通过 Celery 削峰 排队走异步任务</li>
<li>最后通过数据表的 uniq 约束来防止下单超过 200 个。</li>
</ol>
<p><a href="https://zhuanlan.zhihu.com/p/57668068">https://zhuanlan.zhihu.com/p/57668068</a></p>
<p>有朋友和我讲，你这个方法是有问题的，走异步任务容易并发量太大，容易把数据库打爆。</p>
<p>其实是可以的，Celery 可以对 Worker 的 Task 限流 (ratelimit)。</p>
<h2 id="0x01-Celery"><a href="#0x01-Celery" class="headerlink" title="0x01 Celery"></a>0x01 Celery</h2><h3 id="为什么需要-Celery"><a href="#为什么需要-Celery" class="headerlink" title="为什么需要 Celery"></a>为什么需要 Celery</h3><p>在日常开发的时候，常常有一些『任务』需要处理。</p>
<ol>
<li>为了提升系统的响应速度，比如发送短信 / 发送邮箱，这类的『任务』可以走异步。</li>
<li>为了在某个时间执行耗时操作，比如统计用户的文章 / 点赞 / 活跃度。</li>
<li>为了削减峰值，比如秒杀系统的削峰走异步</li>
<li>为了业务代码解耦，比如当我在知乎上更新文章，可能就会触发『推荐系统』,『文章管理系统』,『用户通知系统』</li>
</ol>
<p>不用 Celery 的话，其实上面的业务也是能做的。 比如 1 中，可以直接启一个线程来做。比如 2 完全可以 Crontab 做一个定时任务。</p>
<p>那为什么要用 Celery 呢？</p>
<ol>
<li>把目光聚焦在 Task 的分发上面。而非线程，Deamon 之类细节的处理。</li>
<li>方便，简单，易维护，高可用。</li>
<li>便于监控。</li>
<li>扩展性好。</li>
</ol>
<p>基本上满足了你九成的需求。</p>
<h2 id="0x02-Celery-快速开始"><a href="#0x02-Celery-快速开始" class="headerlink" title="0x02 Celery 快速开始"></a>0x02 Celery 快速开始</h2><p>本文的讨论基于 Broker 为 RabbitMQ, Result Backend 为 Redis,  Django 的 Web 应用，叫做 djoo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rabbitmqctl add_user djoo djoo</span><br><span class="line">sudo rabbitmqctl add_vhost djoo</span><br><span class="line">sudo rabbitmqctl set_user_tags djoo djoo</span><br><span class="line">sudo rabbitmqctl set_permissions -p djoo djoo &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CELERY_BROKER_URL &#x3D; &#39;amqp:&#x2F;&#x2F;djoo:djoo@localhost:5672&#x2F;djoo&#39;</span><br><span class="line"></span><br><span class="line">CELERY_RESULT_BACKEND &#x3D; &quot;redis:&#x2F;&#x2F;&#123;host&#125;:&#123;port&#125;&#x2F;1&quot;.format(</span><br><span class="line">    host&#x3D;os.getenv(&quot;REDIS_HOST&quot;, &quot;localhost&quot;), port&#x3D;os.getenv(&quot;REDIS_PORT&quot;, &quot;6379&quot;)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>泛读文档之后，需要搞清楚几个概念。</p>
<ul>
<li>Broker: 携带 Task 的消息中间件，是发送消息和接收消息的解决方案，比如 RabbitMQ</li>
<li>Result Backend: Task 执行结果。</li>
<li>Application: Celery 的实例</li>
<li>Worker: 执行任务者</li>
<li>Beat: 或叫做 Schedule, 一般用于执行定时任务。</li>
<li>Task: 任务</li>
</ul>
<h2 id="0x03-Celery-Guide"><a href="#0x03-Celery-Guide" class="headerlink" title="0x03 Celery Guide"></a>0x03 Celery Guide</h2><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p>Application 可以针对整个 Celery 实例进行配置，比如配置时区，重写 Application 里的基类</p>
<h3 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h3><p>Task 是一个 Class, 并且可以从任意 Callable 的对象创建。</p>
<p>Task Message 除非被 Acked, 否则不会从队列中移除。</p>
<blockquote>
<p>NOTE: 那什么时候算是 Acked?</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@app.task(name&#x3D;&quot;xsum&quot;)</span><br><span class="line">def xsum(numbers):</span><br><span class="line">    return sum(numbers)</span><br></pre></td></tr></table></figure>

<ul>
<li>Tasks</li>
<li>Calling Tasks</li>
<li>Canvas: Designing Work-flows</li>
<li>Workers Guide</li>
<li>Daemonization</li>
<li>Periodic Tasks</li>
<li>Routing Tasks</li>
<li>Monitoring and Management Guide</li>
<li>Security</li>
<li>Optimizing</li>
<li>Debugging</li>
<li>Concurrency</li>
<li>Signals</li>
<li>Testing with Celery</li>
<li>Extensions and Bootsteps</li>
<li>Configuration and defaults</li>
</ul>
<h3 id="Application-1"><a href="#Application-1" class="headerlink" title="Application"></a>Application</h3><h3 id="Tasks-1"><a href="#Tasks-1" class="headerlink" title="Tasks"></a>Tasks</h3><h3 id="Calling-Tasks"><a href="#Calling-Tasks" class="headerlink" title="Calling Tasks"></a>Calling Tasks</h3><h3 id="Canvas-Designing-Work-flows"><a href="#Canvas-Designing-Work-flows" class="headerlink" title="Canvas: Designing Work-flows"></a>Canvas: Designing Work-flows</h3><h3 id="Workers-Guide"><a href="#Workers-Guide" class="headerlink" title="Workers Guide"></a>Workers Guide</h3><h3 id="Daemonization"><a href="#Daemonization" class="headerlink" title="Daemonization"></a>Daemonization</h3><h3 id="Periodic-Tasks"><a href="#Periodic-Tasks" class="headerlink" title="Periodic Tasks"></a>Periodic Tasks</h3><h3 id="Routing-Tasks"><a href="#Routing-Tasks" class="headerlink" title="Routing Tasks"></a>Routing Tasks</h3><h3 id="Monitoring-and-Management-Guide"><a href="#Monitoring-and-Management-Guide" class="headerlink" title="Monitoring and Management Guide"></a>Monitoring and Management Guide</h3><h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><h3 id="Optimizing"><a href="#Optimizing" class="headerlink" title="Optimizing"></a>Optimizing</h3><h3 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h3><h3 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h3><h3 id="Signals"><a href="#Signals" class="headerlink" title="Signals"></a>Signals</h3><h3 id="Testing-with-Celery"><a href="#Testing-with-Celery" class="headerlink" title="Testing with Celery"></a>Testing with Celery</h3><h3 id="Extensions-and-Bootsteps"><a href="#Extensions-and-Bootsteps" class="headerlink" title="Extensions and Bootsteps"></a>Extensions and Bootsteps</h3><h3 id="Configuration-and-defaults"><a href="#Configuration-and-defaults" class="headerlink" title="Configuration and defaults"></a>Configuration and defaults</h3><h2 id="0x03-RabbitMQ"><a href="#0x03-RabbitMQ" class="headerlink" title="0x03 RabbitMQ"></a>0x03 RabbitMQ</h2><p>发布者的消息经过交换机，分发到不同的队列，最后由接收方进行处理。</p>
<p>那么问题来了，交换机都是用来干嘛的</p>
<ul>
<li>Direct 单播路由：扔一条消息到一个队列中，依照 routingkey 投递</li>
<li>Topic  多播路由：发给某几类队列（通知）.</li>
<li>Fanout 广播路由：发给全部绑定在该路由上面的队列。</li>
<li>Headers</li>
</ul>
<ol>
<li>应用解耦。（平台无关，语言无关）</li>
</ol>
<p>比如说，但项目足够大的时候，更新一个活动，可能需要更新用户的一些状态，可能要更新一波统计数据，可能要记录一批日志。这个时候原来的代码可能这么写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update_activity()</span><br><span class="line">update_user()</span><br><span class="line">update_user_cache()</span><br><span class="line">update_stats()</span><br><span class="line">record_user_log()</span><br></pre></td></tr></table></figure>

<p>现在代码就可能这么写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">send_task_update_activity()</span><br><span class="line">send_task_update_user()</span><br><span class="line">send_task_update_user_cache()</span><br><span class="line">send_task_update_stats()</span><br><span class="line">send_task_record_user_log()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>异步通信。（减轻请求峰值）</li>
</ol>
<p>原本一个 webapp 不做异步的话，也能搞定，但做了异步之后，可以大幅度提升吞吐量和响应时间。</p>
<ol start="3">
<li>数据持久化。（不丢失消息）</li>
<li>送达保证。(ack late)</li>
</ol>
<h3 id="简单步骤"><a href="#简单步骤" class="headerlink" title="简单步骤"></a>简单步骤</h3><ol>
<li>定义 app, 指定 broker 和 backend</li>
<li>定义 tasks</li>
<li>指定 worker</li>
<li>调用 Task , 调用后返回 AsyncResult 实例，</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add.delay(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">add.apply_async((<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">add.apply_async((<span class="number">2</span>, <span class="number">2</span>), queue=<span class="string">&#x27;lopri&#x27;</span>, countdown=<span class="number">10</span>)</span><br><span class="line">add.signature((<span class="number">2</span>, <span class="number">2</span>), countdown=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">res = add.delay(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">res.get(timeout=<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 并行</span><br><span class="line">group(add.s(i, i) for i in xrange(10))().get()</span><br><span class="line"># [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span><br><span class="line"># partial group</span><br><span class="line">g &#x3D; group(add.s(i) for i in xrange(10))</span><br><span class="line">g(10).get()</span><br></pre></td></tr></table></figure>

<h4 id="Chains"><a href="#Chains" class="headerlink" title="Chains"></a>Chains</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chain(add.s(4, 4) | mul.s(8))().get()</span><br><span class="line">(add.s(4, 4) | mul.s(8))().get()</span><br><span class="line"># partial chain</span><br><span class="line">g &#x3D; chain(add.s(4) | mul.s(8))</span><br><span class="line">g(4).get()</span><br></pre></td></tr></table></figure>

<h4 id="Chords"><a href="#Chords" class="headerlink" title="Chords"></a>Chords</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chord((add.s(i, i) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>)), xsum.s())().get()</span><br><span class="line">(group(add.s(i, i) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>)) | xsum.s())().get()</span><br><span class="line"><span class="comment"># eg : upload_document.s(file) | group(apply_filter.s() for filter in filters)</span></span><br></pre></td></tr></table></figure>

<h2 id="0x07-踩坑集"><a href="#0x07-踩坑集" class="headerlink" title="0x07 踩坑集"></a>0x07 踩坑集</h2><ul>
<li>序列问题</li>
</ul>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-20</strong> 初始化</li>
<li><strong>2019-04-04</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后台组件</category>
      </categories>
      <tags>
        <tag>CheatSheet</tag>
        <tag>Redis</tag>
        <tag>RabbitMQ</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>2018 年不容错过的 Django 全栈项目</title>
    <url>/2018/02/21/FullStackDjangoDevOps/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><blockquote>
<p>写在前面的话：不好意思，标题难以免俗，起了个很俗气的名字。</p>
</blockquote>
<p>这是我的一个全栈类型 Django 开源项目的系列讲解教程的目录。</p>
<p>为什么写这系列的文章呢？目的总的来说有两个：</p>
<ol>
<li>一是希望更多的人通过本系列的教程更好的认识 Django 开发技术栈或者说是 Web 开发技术栈，让更多的 Pythonist 更顺畅的进入 Django 开发的世界。</li>
<li>二是希望借由这个持续更新的过程让自己更加深入理解 Django 技术栈 Django / DjangoRestFramework / Docker / Vue.JS / Celery / PostgreSQL / Redis / RabbitMQ</li>
</ol>
<p>为什么说这个项目你不容错过？</p>
<ul>
<li>新！新！新！保持最新的软件开发版本，E.G: Django 2.0 + Vue.JS 2.5 + PostgreSQL 10 + Celery 4.1.0</li>
<li>Django 框架：Django 及其 强大的生态圈</li>
<li>后端组件：PostgreSQL RabbitMQ Redis Ngnix</li>
<li>前端技术：单页应用 前后端分离 (VueJS+Webpack+DjangoRestFramework), 自动化部署</li>
<li>Django 社区最佳实践：从配置 / 开发 / 测试 / 部署 <strong>全干</strong>工程师 (Full Stuff Engineer) 的最新的 DevOps 思考成果。</li>
<li>基本覆盖了进阶 Django 开发所需要的各种组件与操作。</li>
<li>只需要适当的调整，本项目就可以成为你新开项目的最佳脚手架。</li>
</ul>
<p>本系列文章的面向读者：</p>
<ul>
<li>目标是 DevOps 的 Pythonist</li>
<li>爱瞎几把折腾的 Pythonist</li>
<li>前后端分离的实践者</li>
</ul>
<blockquote>
<p>生命苦短，赶快上车</p>
</blockquote>
<blockquote>
<p>Life is Short , I Use Python</p>
</blockquote>
<h2 id="0x01-项目介绍"><a href="#0x01-项目介绍" class="headerlink" title="0x01 项目介绍"></a>0x01 项目介绍</h2><p>YaDjangoBlog 是另一个关于博客的轮子，但是其野心并不在于仅仅多造一个博客系统，还有通过本项目做 Django 全栈开发的最佳实践。</p>
<h3 id="1-1-项目地址"><a href="#1-1-项目地址" class="headerlink" title="1.1 项目地址"></a>1.1 项目地址</h3><ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog">https://github.com/twocucao/YaDjangoBlog</a></li>
</ul>
<h3 id="1-2-项目技术栈"><a href="#1-2-项目技术栈" class="headerlink" title="1.2 项目技术栈"></a>1.2 项目技术栈</h3><ul>
<li>开发与部署环境为 Docker</li>
<li>Python 3.5.2</li>
<li>前端 Vue + Webpack + ES2015 + axios</li>
<li>后端 <a href="https://github.com/django/django">Django 2.0</a> + <a href="https://github.com/tomchristie/django-rest-framework/">DjangoRestFramework</a> + Celery</li>
<li>自动化部署选用工具 Ansible 以及 Docker</li>
<li>后端组件<ul>
<li>ElasticSearch 用于搜索和推荐</li>
<li>PostgreSQL 用于数据持久化</li>
<li>Redis 用于 Session / 和缓存</li>
<li>RabbitMQ 分布式队列 / 定时任务</li>
<li>Nginx 用于反向代理</li>
</ul>
</li>
</ul>
<h3 id="1-3-特别感谢"><a href="#1-3-特别感谢" class="headerlink" title="1.3 特别感谢"></a>1.3 特别感谢</h3><ul>
<li>ansible django stack: <a href="https://github.com/jcalazan/ansible-django-stack">https://github.com/jcalazan/ansible-django-stack</a></li>
<li>cookiecutter-django: <a href="https://github.com/pydanny/cookiecutter-django">https://github.com/pydanny/cookiecutter-django</a></li>
<li>djangopackages: <a href="https://github.com/djangopackages/djangopackages">https://github.com/djangopackages/djangopackages</a></li>
<li>董伟明 关于 ElasticSearch 的几篇文章 <a href="http://www.dongwm.com/archives/%E7%9F%A5%E4%B9%8ELive%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E4%B9%8B%E4%BD%BF%E7%94%A8Elasticsearch%E6%90%9C%E7%B4%A2/">http://www.dongwm.com/archives/%E7%9F%A5%E4%B9%8ELive%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E4%B9%8B%E4%BD%BF%E7%94%A8Elasticsearch%E6%90%9C%E7%B4%A2/</a></li>
<li>各个组件的开发者们<ul>
<li>ElasticSearch</li>
<li>PostgreSQL</li>
<li>Redis</li>
<li>RabbitMQ</li>
<li>Nginx</li>
<li>Docker</li>
</ul>
</li>
</ul>
<h3 id="1-4-项目截图"><a href="#1-4-项目截图" class="headerlink" title="1.4 项目截图"></a>1.4 项目截图</h3><p>好，讲了半天有的没的，还是贴点图吧，毕竟我不是 Markdown 程序员</p>
<blockquote>
<p>我们先看看能看得见的前端页面</p>
</blockquote>
<p>主页</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6ba50ddaa85f?w=3344&h=1822&f=png&s=1504757"></p>
<p>博客详情</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6c3e3a0b8dd4?w=3342&h=1846&f=png&s=1021166"><br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6c31db9c8d5c?w=3350&h=1804&f=png&s=1016132"></p>
<p>这是一个很普通的 Archive 页面</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6bfa8c121ed4?w=3312&h=1818&f=png&s=425859"></p>
<p>这是以 Elasticsearch 为支持的 搜索功能</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6bc0a967a3e1?w=3348&h=1840&f=png&s=1582839"></p>
<p>Django 自带后台</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6c47b50b6827?w=3356&h=1768&f=png&s=365303"></p>
<p>前后端分离怎么能少的了 rest api 的实现与便捷的前端调试？</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6c5522e83368?w=3346&h=1840&f=png&s=486772"><br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6c7ad6641b0a"></p>
<p>Django Debug Tools 帮你迅速调优接口</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6c782bf2a593?w=3348&h=1838&f=png&s=735083"></p>
<blockquote>
<p>我们再先看看能看得见的开发界面</p>
</blockquote>
<p>在终端执行 tmuxinator start yavueblog 就可以自动运行所有任务</p>
<p>前端运行状态</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6d2d904bb3aa?w=3360&h=2054&f=png&s=539522"><br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6d7172d15be3?w=3360&h=2054&f=png&s=2446065"></p>
<p>后端运行状态<br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6d5933c52727?w=3360&h=2054&f=png&s=3296514"><br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6d8ce415395c?w=3360&h=2054&f=png&s=2720324"><br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6d9ff1f2efb1?w=3360&h=2054&f=png&s=3932296"></p>
<p>当然，你可以直接用客户端连接到对应的服务商检查组件的运行状态</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6db1754b4e8b?w=3352&h=1430&f=png&s=640103"><br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6d949bd83c81?w=3352&h=1126&f=png&s=532337"></p>
<h2 id="0x02-系列教程目录"><a href="#0x02-系列教程目录" class="headerlink" title="0x02 系列教程目录"></a>0x02 系列教程目录</h2><h3 id="2-1-教程注意项"><a href="#2-1-教程注意项" class="headerlink" title="2.1 教程注意项"></a>2.1 教程注意项</h3><ol>
<li>本文的开发环境配置仅仅限于 macOS 上，如果读者使用的是 Windows / 可能需要自己搞定环境的配置。不过笔者使用了 Docker 进行环境配置，应该配置环境会省事很多。</li>
<li>在阅读本教程，请读者至少跟着 Django 官方的教程跟着走一遍。不要零基础一通瞎搞。</li>
<li>如果在使用过程中出现问题，请在 ISSUE 提供尽可能多的信息，将问题描述清楚。</li>
</ol>
<p>本系列教程并不按照一步一步增加代码的方式写教程。</p>
<p>我先带着大家搭建好整个项目框架，然后从不同的视角开介绍这个项目，比如：</p>
<ol>
<li>某个模块的 models 是如何设计的？有哪些卧槽居然可以这么用的写代码方式。</li>
<li>Django User 如何做扩展？同样在 Django 的生态圈里面，哪些场景有哪些值得围观的包，比如 guardian</li>
<li>Restful API 应该如何写，Django 里面的 Rest API 应该如何写？会有哪些生产效率 guangguangguang 提升上去的使用方法？权限怎么做？限流怎么搞？</li>
<li>Py.test TDD 测试驱动开发了解一下？</li>
<li>使用 Tmux 等合理工具的优雅的单终端多开。</li>
</ol>
<h3 id="2-2-教程目录"><a href="#2-2-教程目录" class="headerlink" title="2.2 教程目录"></a>2.2 教程目录</h3><ul>
<li>Django 全栈开发教程 - 2018 年不容错过的 Django 全栈项目 – 目录篇</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的开发环境配置</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的后端组件配置</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的前后端初步设计</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的后端初步实现</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的前端实现 YaVueBlog</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的后端组件之 Redis</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的后端组件之 PostgreSQL</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的后端组件之 Elasticsearch</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的后端组件之 RabbitMQ</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的生产环境部署</li>
</ul>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE. 参考链接"></a>0xEE. 参考链接</h2><p>还犹豫啥，快上车吧</p>
<ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog">https://github.com/twocucao/YaDjangoBlog</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-21</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>YaDjangoBlog 开发环境配置</title>
    <url>/2018/02/22/YaDjangoBlog%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文是 Django 全栈开发教程的第一篇，上一篇是第零篇，目录会随时更新，地址在这里 2018 年不容错过的 Django 全栈项目 <a href="https://zhuanlan.zhihu.com/p/33903527">https://zhuanlan.zhihu.com/p/33903527</a></p>
<blockquote>
<p>为什么是第零篇，因为程序员从零计数呀。笑~~</p>
</blockquote>
<p>本文需要完成两件事情：</p>
<ul>
<li>配置基本的开发环境</li>
<li>让代码先运行一下</li>
</ul>
<p>如果你使用的 macOS, 那么可以跟着下文一步一步走。如果是 linux/window 用户，可能稍微需要在配置环境上多花点时间。</p>
<blockquote>
<p>本文默认你至少会在 iTerm2 下面使用基本的 bash 命令与 git , 如果使用的 ohmyzsh 就更好了。 建议先参考请查看我之前的文章里面的配置环境 如何优雅地使用 macOS <a href="https://zhuanlan.zhihu.com/p/29892969">https://zhuanlan.zhihu.com/p/29892969</a></p>
</blockquote>
<h2 id="0x01-Python-开发环境配置"><a href="#0x01-Python-开发环境配置" class="headerlink" title="0x01 Python 开发环境配置"></a>0x01 Python 开发环境配置</h2><p>本小节的目的就是配置好基本的 python 开发环境</p>
<p>使用了神器 pyenv</p>
<blockquote>
<p>BTW: 为什么不直接用 pipenv ? 因为网络不通畅，如若不然，pipenv 比 pyenv 更适合用来做 python 依赖包管理。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新开终端</span></span><br><span class="line">git clone https://github.com/yyuu/pyenv.git ~/.pyenv</span><br><span class="line">git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv</span><br><span class="line">echo <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">echo <span class="string">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">echo <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">echo <span class="string">&#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着另开终端</span></span><br><span class="line"><span class="comment"># 不喜写兼容代码，所有代码均向 3.5+ 靠拢</span></span><br><span class="line">v=<span class="number">3.5</span><span class="number">.2</span>|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v</span><br><span class="line">v=<span class="number">3.6</span><span class="number">.0</span>|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v</span><br><span class="line">v=<span class="number">2.7</span><span class="number">.11</span>|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Global Python 为 2.7.11, 备注：尽量不要把 Py3 设置为全局，否则由于 Homebrew 本身有一些依赖是依赖于 Py2 的，这样容易出现一些奇怪的问题。</span></span><br><span class="line">pyenv <span class="keyword">global</span> <span class="number">2.7</span><span class="number">.11</span></span><br><span class="line">pip install -i https://pypi.doubanio.com/simple requests</span><br><span class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></span><br><span class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">&quot;jedi&gt;=0.9.0&quot;</span> <span class="string">&quot;json-rpc&gt;=1.8.1&quot;</span> <span class="string">&quot;service_factory&gt;=0.1.5&quot;</span> flake8 pytest autoflake hy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建最常用 Py3 虚拟环境</span></span><br><span class="line">pyenv virtualenv <span class="number">3.5</span><span class="number">.2</span> py3-daily</span><br><span class="line">pyenv activate py3-daily</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple requests</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple beatutifulsoup4</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple ipython[notebook]</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple jupyter</span><br><span class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></span><br><span class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">&quot;jedi&gt;=0.9.0&quot;</span> <span class="string">&quot;json-rpc&gt;=1.8.1&quot;</span> <span class="string">&quot;service_factory&gt;=0.1.5&quot;</span> flake8 pytest autoflake hy</span><br></pre></td></tr></table></figure>

<p>好，Python 环境就安装完毕了。</p>
<h2 id="0x02-JavaScript-开发环境配置"><a href="#0x02-JavaScript-开发环境配置" class="headerlink" title="0x02 JavaScript 开发环境配置"></a>0x02 JavaScript 开发环境配置</h2><blockquote>
<p>本小节的目的就是配置好基本的 JS 开发环境，但估计 JSer 看了本小节依旧可以在配置上少一些麻烦。</p>
</blockquote>
<p>JS 可以前后端通吃，社区生态很丰富。ES6 之后从 python 和 ruby 里面借鉴了不少语法糖。现在写起来还是比较愉悦的。</p>
<p>JavaScript 不管开发前端应用还是后端应用，都需要安装 node 环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先安装 nvm</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class="line"><span class="comment"># 新开终端</span></span><br><span class="line">nvm install 8</span><br><span class="line">nvm use 8</span><br><span class="line">nvm <span class="built_in">alias</span> default 8</span><br><span class="line"></span><br><span class="line">npm install cnpm</span><br><span class="line">cnpm install yarn -g</span><br><span class="line"><span class="comment"># 设置镜像</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>编辑 ~/.npmrc 配置文件，输入下文再配置各种奇奇怪怪的镜像地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">registry=https://registry.npm.taobao.org/</span><br><span class="line">chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver</span><br><span class="line">disturl=https://npm.taobao.org/dist</span><br><span class="line">operadriver_cdnurl=http://cdn.npm.taobao.org/dist/operadriver</span><br><span class="line">phantomjs_cdnurl=http://cdn.npm.taobao.org/dist/phantomjs</span><br><span class="line">fse_binary_host_mirror=https://npm.taobao.org/mirrors/fsevents</span><br><span class="line">sass_binary_site=http://cdn.npm.taobao.org/dist/node-sass</span><br><span class="line">electron_mirror=http://cdn.npm.taobao.org/dist/electron/</span><br></pre></td></tr></table></figure>

<p>配置完毕</p>
<h2 id="0x03-Docker-安装与配置"><a href="#0x03-Docker-安装与配置" class="headerlink" title="0x03 Docker 安装与配置"></a>0x03 Docker 安装与配置</h2><blockquote>
<p>本小节主要解决一个最蛋疼的问题，就是网络问题</p>
</blockquote>
<p>下载并安装 docker for mac 地址如下 <a href="https://docs.docker.com/docker-for-mac/install/">https://docs.docker.com/docker-for-mac/install/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装成功后运行命令</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

<p>如果一切正常，则会显示如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">ca4f61b1923c: Pull complete</span><br><span class="line">Digest: sha256:083de497cff944f969d8499ab94f07134c50bcf5e6b9559b27182d3fa80ce3f7</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://cloud.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure>

<p>好，配置到这里。</p>
<p>你以为你已经配置好了，还先别激动，网络问题还没解决呢。小的镜像可以直接从 Docker 上直接拖下来，几百兆的镜像可就没这么容易了。</p>
<p>这里我们使用了阿里云的 Docker 容器镜像。</p>
<p>登录阿里云，到控制台，找到容器镜像服务，镜像加速器，</p>
<p>如下图：</p>
<p>右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Daemon 标签（Docker 17.03 之前版本为 Advanced 标签）下的 Registry mirrors 列表中将 <a href="https://your-url.mirror.aliyuncs.com/">https://your-url.mirror.aliyuncs.com</a> 加到”registry-mirrors”的数组里，点击 Apply &amp; Restart 按钮，等待 Docker 重启并应用配置的镜像加速器。</p>
<p>Docker 配置完毕。</p>
<h2 id="0x04-项目试运行"><a href="#0x04-项目试运行" class="headerlink" title="0x04 项目试运行"></a>0x04 项目试运行</h2><p>运行项目之前，保持你我的工作环境基本一致</p>
<ul>
<li>创建一些必须的目录</li>
<li>clone 项目</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/Codes/YaBlog/DockerVolume/YaDjangoBlog/PostgreSQL/data</span><br><span class="line">mkdir -p ~/Codes/YaBlog/DockerVolume/YaDjangoBlog/Redis/data</span><br><span class="line">mkdir -p ~/Codes/YaBlog/DockerVolume/YaDjangoBlog/Backups</span><br><span class="line"><span class="built_in">cd</span> ~/Codes/YaBlog/</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:twocucao/YaVueBlog.git</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:twocucao/YaDjangoBlog.git</span><br></pre></td></tr></table></figure>

<p>克隆下来项目之后还需要稍微折腾一下（没办法，CURD 开发 = 折腾折腾折腾 + 搬砖搬砖搬砖）</p>
<ul>
<li>运行 Vue 开发环境</li>
<li>运行 Docker 化的 django 环境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新开一个终端 用于运行 Vue 应用</span></span><br><span class="line"><span class="comment"># 前端环境不放在 Docker 环境中。（因为开发环境没必要，生产环境才需要）</span></span><br><span class="line"><span class="built_in">cd</span> ~/Codes/YaBlog/YaVueBlog/ &amp;&amp; yarn &amp;&amp; <span class="built_in">cd</span> -</span><br><span class="line"><span class="built_in">cd</span> ~/Codes/YaBlog/YaVueBlog/packages/theme-future/ &amp;&amp; yarn &amp;&amp; <span class="built_in">cd</span> -</span><br><span class="line"><span class="built_in">cd</span> ~/Codes/YaBlog/YaVueBlog/</span><br><span class="line">npm run build:theme</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新开一个终端</span></span><br><span class="line"><span class="built_in">cd</span> ~/Codes/YaBlog/YaDjangoBlog/</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>看到下图，包含所有的命令。</p>
<p>这是我用 Makefile 编写的一系列命令，方便我在开发过程将主要的精力花在业务逻辑上而不是花时间在强记大量的琐碎的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Codes/YaBlog/YaDjangoBlog/</span><br><span class="line">make build-all</span><br><span class="line"><span class="comment"># 等待运行后端所有组件</span></span><br></pre></td></tr></table></figure>

<p>然后，读者可以先去泡杯咖啡点个外卖吃个饭之类的。等待构建完毕。</p>
<p>需要注意的是，务必配置好 docker 镜像加速地址，否则根据国内情况，你可能需要多去泡几杯咖啡，多吃几顿饭。</p>
<p>好，接下来我们运行后端程序，首次运行需要花费不少时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Codes/YaBlog/YaDjangoBlog/</span><br><span class="line">make django-just-up</span><br></pre></td></tr></table></figure>

<p>运行之后，终端结果如下：</p>
<p>可以发现，服务已经都开始启动了。</p>
<p>但不要冲动，先等等，因为一次开了如下的服务：</p>
<ul>
<li>postgres</li>
<li>redis</li>
<li>elasticsearch</li>
<li>mailhog</li>
<li>django</li>
<li>celerybeat</li>
<li>celeryworker</li>
<li>celeryflower</li>
</ul>
<p>需要多等会儿时间到各个服务运行正常。直到出现下图：</p>
<p>这意味着基本上所有的程序都运行正常了。如果有服务挂掉，欢迎到 github 的 issue 上提一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接着再新开一个终端 用于导入基础数据</span></span><br><span class="line"><span class="built_in">cd</span> ~/Codes/YaBlog/YaDjangoBlog/</span><br><span class="line">make django-import-articles</span><br></pre></td></tr></table></figure>

<p>好，那么，我们来验证一下如下几个地址：</p>
<ul>
<li>接口地址 <a href="http://localhost:8000/api/v1/archive">http://localhost:8000/api/v1/archive</a></li>
<li>Vue 地址 <a href="http://localhost:8080/">http://localhost:8080/</a></li>
<li>在搜索框内输入 elasticsearch 查看接口是否正常返回数据</li>
<li>查看 celery 的 task 是否正确</li>
</ul>
<p>如果一切正常，则所有的截图应该如下</p>
<h2 id="0x05-Tmux-和-Tmuxinator"><a href="#0x05-Tmux-和-Tmuxinator" class="headerlink" title="0x05 Tmux 和 Tmuxinator"></a>0x05 Tmux 和 Tmuxinator</h2><p>我们在上文中可以发现有个极其蛋疼菊紧的问题。</p>
<p>当我们运行 make django-just-up 这个命令的时候，所有服务运行的同时，所有的标准输入都打印到一个终端。</p>
<p>这个和我们日常开发不太相同</p>
<ol>
<li>在 django 开发的时候，我们运行 runserver, 肯定是只想在那个终端里看到 runserver 的运行情况。而不是 Redis,Elasticsearch,PGsql 之类的 log。</li>
<li>并且，django 的热加载会有些小问题，有些错误只能 ctrl+c 关掉 runserver, 然后重启。但当我们想 ctrl+c 关掉 runserver 的时候，却把所有的的服务都关掉了。</li>
</ol>
<p>解决方式也简单：</p>
<p>对于暂时不想在开发时看到日志的服务，干脆直接放后台运行，执行我封装的命令 make django-before-up 把部分服务直接放在后台里，然后再开四个终端，运行下面的命令。</p>
<ul>
<li>make django-runserver # 运行 runserver , 并只把该容器的 log 打印出来。下面三者同上。</li>
<li>make django-celerybeat</li>
<li>make django-celeryworker</li>
<li>make django-celeryflower</li>
</ul>
<p>显然还是很麻烦，我这种懒人可是能少写几行代码就少些几行代码的。</p>
<p>那么我们还可以更省事（懒一些）么？</p>
<p>我之前写了一篇简单的 tmux 与 Tmuxinator 教程 <a href="https://zhuanlan.zhihu.com/p/33369297">https://zhuanlan.zhihu.com/p/33369297</a> , 具体配置步骤参考文中即可。</p>
<p>配置好 Tmuxinator 之后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先软连接一下</span></span><br><span class="line">ln -svf ~/Codes/YaBlog/YaDjangoBlog/yadjangoblog.yml ~/.tmuxinator/yadjangoblog.yml</span><br></pre></td></tr></table></figure>

<p>当我需要运行的所有服务的时候，我只需要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmuxinator start yadjangoblog</span><br></pre></td></tr></table></figure>
<p>就可以开启所有命令。</p>
<p>yadjangoblog.yml 的内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows:</span><br><span class="line">  - &quot;前端-页面开发&quot;:</span><br><span class="line">      root: ~&#x2F;Codes&#x2F;YaBlog&#x2F;YaVueBlog&#x2F;</span><br><span class="line">      layout: main-vertical</span><br><span class="line">      panes:</span><br><span class="line">        - &quot;前端页面 DEV&quot;:</span><br><span class="line">          - &quot;npm run dev&quot;</span><br><span class="line">  - &quot;前端-CSS 与字体文件&quot;:</span><br><span class="line">      root: ~&#x2F;Codes&#x2F;YaBlog&#x2F;YaVueBlog&#x2F;</span><br><span class="line">      layout: main-vertical</span><br><span class="line">      panes:</span><br><span class="line">        - &quot;npm run dev:theme&quot;</span><br><span class="line">        - &quot;npm run dev:iconfont&quot;</span><br><span class="line">  - &quot;后端-Django 及其服务&quot;:</span><br><span class="line">      root: ~&#x2F;Codes&#x2F;YaBlog&#x2F;YaDjangoBlog&#x2F;</span><br><span class="line">      layout: main-vertical</span><br><span class="line">      panes:</span><br><span class="line">        - &quot;make django-before-up &amp;&amp; make django-runserver&quot;</span><br><span class="line">  - &quot;后端-数据库相关&quot;:</span><br><span class="line">      layout: main-vertical</span><br><span class="line">      root: ~&#x2F;Codes&#x2F;YaBlog&#x2F;YaDjangoBlog&#x2F;</span><br><span class="line">      panes:</span><br><span class="line">        - &quot;sleep 20 &amp;&amp; make dbshell&quot;</span><br><span class="line">        - &quot;sleep 20 &amp;&amp; make shell&quot;</span><br><span class="line">  - &quot;后端-Celery&quot;:</span><br><span class="line">      layout: main-vertical</span><br><span class="line">      root: ~&#x2F;Codes&#x2F;YaBlog&#x2F;YaDjangoBlog&#x2F;</span><br><span class="line">      panes:</span><br><span class="line">        - &quot;sleep 20 &amp;&amp; make django-celerybeat&quot;</span><br><span class="line">        - &quot;sleep 20 &amp;&amp; make django-celeryworker&quot;</span><br></pre></td></tr></table></figure>

<h2 id="0x06-PyCharm-基本设置"><a href="#0x06-PyCharm-基本设置" class="headerlink" title="0x06 PyCharm 基本设置"></a>0x06 PyCharm 基本设置</h2><blockquote>
<p>大家应该都用 PyCharm 进行开发了吧。 如果是的话，不看本小节可能会让你栽个跟头</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这步是给 pycharm 打开代码做准备</span></span><br><span class="line">pyenv activate py3-daily</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple -r requirements/local.txt</span><br></pre></td></tr></table></figure>

<p>务必完成下面两个步骤</p>
<ol>
<li>在 Preferences -&gt; project -&gt; interpreter 选择对应的 py3-daily 虚拟环境。</li>
<li>在侧边栏把 yadjangoblog , 注意小写的。右键标记为 sources root</li>
</ol>
<p>这样的标记相当于告诉 PyCharm , 这个项目的 PYTHONPATH 是 yadjangoblog/ , 否则使用 PyCharm 导入 AModel 会自动导入 from yadjangoblog.yaadmin.models from AModel 而不是 from yaadmin.models import AModel , 这会导致程序运行错误。</p>
<blockquote>
<p>PS: 包括后面跑单元测试的时候，均手动设置了 PYTHONPATH 变量。</p>
</blockquote>
<h2 id="0x07-开发流程"><a href="#0x07-开发流程" class="headerlink" title="0x07 开发流程"></a>0x07 开发流程</h2><p>本小节，从笔者开机开始，回顾一下环境配置好之后，笔者是如何进入开发状态的：</p>
<ol>
<li>开机。输入密码进入桌面。</li>
<li>打开 Iterm, 运行 tmuxinator start yadjangoblog 开启项目。打开 PyCharm 和 WebStorm</li>
<li>开发</li>
</ol>
<ul>
<li>在 WebStorm 中写写前端代码，在 <a href="http://localhost:8080/">http://localhost:8080</a> 和 tmux 里的第一个 window 查看状态</li>
<li>在 PyCharm 中写写后端代码，在第三个 window 查看 runserver 状态，在第四个 window 的两个 Panel 运行 python manage.py 相关命令。</li>
<li>在 Chrome Elasticsearch Head 扩展里调试 Elasticsearch 语法</li>
<li>在 <a href="http://localhost:8000/api/your-api-path">http://localhost:8000/api/your-api-path</a> 里调试前后端 API</li>
<li>在 <a href="http://localhost:5555/">http://localhost:5555</a> 通过 flower 查看相关</li>
<li>…..</li>
<li>当然，你也可以新开一个终端里面，执行 make 查看相关还可以执行哪些命令。</li>
</ul>
<p>那么，具体执行这些命令背后究竟发生了什么？</p>
<ul>
<li>数十服务为何突然启动</li>
<li>数百个任务为何半夜消失</li>
<li>正常运行的服务为何屡屡崩溃</li>
<li>这一切的背后！是工程师的人性扭曲还是码畜的道德沦丧？是内存的爆发还是处理器的无奈？</li>
<li>敬请关注本专栏 『MG 的编程小屋』或者 Github 频道，让我们跟随教程走进全干工程师的代码世界。</li>
</ul>
<blockquote>
<p>不好意思，顺手打了个硬广，防止别人把我的文章砍头去尾直接扒过去。</p>
</blockquote>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE. 参考链接"></a>0xEE. 参考链接</h2><p>还犹豫啥，点赞后，快上车吧</p>
<ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog">https://github.com/twocucao/YaDjangoBlog</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-22</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>YaDjangoBlog 之 前端 VueJS 篇</title>
    <url>/2018/02/23/YaDjangoBlog%E4%B9%8B%E5%89%8D%E7%AB%AFVueJS%E7%AF%87/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文是 Django 全栈开发教程的第四篇</p>
<p>目录在这里，已经更新的文章如下</p>
<ul>
<li>Django 全栈开发教程 - 2018 年不容错过的 Django 全栈项目 – 目录篇</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的开发环境配置</li>
</ul>
<p>本文需要完成三件事情：</p>
<ul>
<li>第一件事情，介绍为什么选择 VueJS？</li>
<li>第二件事情，介绍 Vue 项目的一些注意点。</li>
<li>第三件事情，蜻蜓点水搬的带大家过一编，YaDjangoBlog 前端的项目结构，静态资源管理，路由以及组件。</li>
</ul>
<h2 id="0x01-为什么是-VueJS"><a href="#0x01-为什么是-VueJS" class="headerlink" title="0x01 为什么是 VueJS"></a>0x01 为什么是 VueJS</h2><p>国产框架 + 语法简洁是我入坑 VueJS 初衷。</p>
<p>后来却是 Vue 的丰富的生态和简洁的语法吸引了继续用下去。</p>
<p>这里要感谢为 VueJS 持续贡献代码的人，从 Vue 本身，到 VueCLI, 到 Router, 到 VueX, 如果没有那么多人为之贡献代码，可能今天这一小节就变成了，『为什么是 React 了』逃。</p>
<p>Vue 自称为 Vue 渐进式 JavaScript 框架。</p>
<p>什么是渐进式？</p>
<p>就是你可以逐步按照 Vue 的方式逐渐引入一些 Vue 的组件到项目中。没有必要上来就是 Vue 全家桶，依据场景逐步引入。</p>
<p>参考链接 <a href="https://www.zhihu.com/question/51907207">https://www.zhihu.com/question/51907207</a></p>
<p>然而，依据我的经验，vue 全家桶用起来还是很舒服的。这里必须要感谢 Vue 社区。</p>
<p>模板语法，数据驱动，双向绑定。写起代码来简直就是一个字，爽。</p>
<h2 id="0x02-Vue-项目的一些注意点"><a href="#0x02-Vue-项目的一些注意点" class="headerlink" title="0x02 Vue 项目的一些注意点"></a>0x02 Vue 项目的一些注意点</h2><p>从项目角度，我们想想前端项目有哪些地方是需要注意的：</p>
<ol>
<li>开发环境和线上环境区分</li>
<li>前端资源打包</li>
</ol>
<ul>
<li>Vue 项目资源打包</li>
<li>DLL 打包</li>
<li>字体文件打包</li>
</ul>
<ol start="3">
<li>CSS/JS 如何管理</li>
<li>有哪些必要的依赖，如何引入第三方库</li>
<li>有哪些页面级组件，有哪些小组件？应该安排这些组件？组件与组件应该怎么通讯？</li>
<li>路由怎么管理</li>
<li>状态怎么管理</li>
<li>登录，鉴权怎么做</li>
</ol>
<p>限于篇幅，我就不一一讲解了。挑在 YaDjangoBlog 中使用到的技术简单介绍一下。</p>
<p>再次感谢 Vue 社区出品的 VueCLI 以及 Webpack 模板。</p>
<p>下面依次介绍：</p>
<ol>
<li>项目结构</li>
<li>静态资源管理</li>
<li>路由</li>
<li>组件</li>
</ol>
<h2 id="0x03-项目结构"><a href="#0x03-项目结构" class="headerlink" title="0x03 项目结构"></a>0x03 项目结构</h2><p>首先，YaDjangoBlog 文件的前端目录如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── build</span><br><span class="line">│   ├── build.js</span><br><span class="line">│   ├── build_iconfont.js <span class="comment"># 构建 iconfont 脚本</span></span><br><span class="line">│   ├── check-versions.js</span><br><span class="line">│   ├── logo.png</span><br><span class="line">│   ├── utils.js</span><br><span class="line">│   ├── vue-loader.conf.js</span><br><span class="line">│   ├── webpack.base.conf.js</span><br><span class="line">│   ├── webpack.dev.conf.js <span class="comment"># 增加了 AutoDllPlugin 用于自动打包 DLL</span></span><br><span class="line">│   └── webpack.prod.conf.js</span><br><span class="line">├── config</span><br><span class="line">│   ├── dev.env.js <span class="comment"># 可以在这里添加开发环境的环境变脸</span></span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── prod.env.js</span><br><span class="line">│   └── test.env.js</span><br><span class="line">├── extra</span><br><span class="line">│   └── svg-icon <span class="comment"># 这里存放需要生成 iconfont 的字体文件。</span></span><br><span class="line">├── index.html</span><br><span class="line">├── package.json <span class="comment"># 这里添加了一些构建脚本</span></span><br><span class="line">├── packages</span><br><span class="line">│   └── theme-future <span class="comment"># 注意，这里是另一个子项目，使用 Gulp 构建的纯 CSS 子项目。</span></span><br><span class="line">├── src</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── api <span class="comment"># 对 axios 进行初步封装</span></span><br><span class="line">│   ├── assets <span class="comment"># 从使用 Gulp 生成的 CSS 可以放在这里。</span></span><br><span class="line">│   ├── components <span class="comment"># 跨页面的组件放在这里</span></span><br><span class="line">│   ├── directives <span class="comment"># 指令</span></span><br><span class="line">│   ├── filters    <span class="comment"># 过滤器</span></span><br><span class="line">│   ├── main.js    <span class="comment"># 初始化 Vue 实例</span></span><br><span class="line">│   ├── pages      <span class="comment"># 页面</span></span><br><span class="line">│   ├── router     <span class="comment"># 路由</span></span><br><span class="line">│   ├── store      <span class="comment"># vuex</span></span><br><span class="line">│   └── utils      <span class="comment"># 常用工具类</span></span><br><span class="line">├── static</span><br><span class="line">│   ├── hightlight <span class="comment"># hightlight 脚本</span></span><br><span class="line">│   ├── iconfont   <span class="comment"># 本地构建的 iconfont</span></span><br><span class="line">│   ├── images</span><br><span class="line">│   └── js</span><br><span class="line">├── <span class="built_in">test</span>           <span class="comment"># 没写测试，大家开源项目不要学我.... 逃</span></span><br><span class="line">│   ├── e2e</span><br><span class="line">│   └── unit</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure>

<h2 id="0x04-静态资源管理"><a href="#0x04-静态资源管理" class="headerlink" title="0x04 静态资源管理"></a>0x04 静态资源管理</h2><p>静态资源管理，主要涉及到 JS/CSS/ 图片 / 字体</p>
<p>首先，由于使用了 VueCli 的模板，所以大可以按照 VueCli 提供的写法来写。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Footer</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;app&#x27;</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="javascript">    Header: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/commons/Header.vue&#x27;</span>),</span></span><br><span class="line"><span class="javascript">    Footer: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/commons/Footer.vue&#x27;</span>),</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line">  $primary-color: #37b24d;</span><br><span class="line">  $dark-color: #2b5732;</span><br><span class="line">  $body-bg: #f9f9f9;</span><br><span class="line"><span class="css">  <span class="keyword">@import</span> <span class="string">&#x27;~spectre.css/src/spectre-icons.scss&#x27;</span>;</span></span><br><span class="line"><span class="css">  <span class="keyword">@import</span> <span class="string">&#x27;~spectre.css/src/spectre.scss&#x27;</span>;</span></span><br><span class="line"><span class="css">  <span class="keyword">@import</span> <span class="string">&#x27;~spectre.css/src/spectre-exp.scss&#x27;</span>;</span></span><br><span class="line"><span class="css">  <span class="keyword">@import</span> <span class="string">&#x27;./assets/theme-future/index.css&#x27;</span>;</span></span><br><span class="line">  a &#123;</span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">:focus</span>,</span></span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">:hover</span>,</span></span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">:active</span>,</span></span><br><span class="line"><span class="css">    &amp;<span class="selector-class">.active</span> &#123;</span></span><br><span class="line">      text-decoration: none;</span><br><span class="line">      box-shadow: 0 0 0 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-id">#app</span> &#123;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>依据我个人经验，做了一部分的微调：</p>
<p><strong>第一</strong> 在代码中新建一个主题 CSS, 单独用于处理 SCSS 编译 CSS. 即除了 App.vue, 其他地方的 CSS 直接写在同一个地方。</p>
<p><strong>第二</strong> 对于字体文件，不引入 IconFont 在线字体，而是使用 SVG 本地编译字体。这样减少对 iconfont cdn 的依赖，可以以后直接迁移这个字体到其他 CDN 上。</p>
<p><strong>第三</strong> 对于依赖库管理，分为 npm 依赖库和外部 JS 依赖库两种</p>
<p>对于 NPM 依赖库，如果有使用过 ECharts3.0 的 SPA 开发者应该对于万恶的 DLL 非常熟悉了。最早的时候，我们是这样做的：</p>
<ul>
<li>先写一个编译脚本，指定相关依赖包，打包出 dll 和一个 manifest 文件</li>
<li>然后从 index.html 里引入打包好的 dll.</li>
<li>再从 webpack 的配置文件中引入这个文件。</li>
</ul>
<p>这种恶心的配置随着 autodll-webpack-plugin 的出现从而得到缓解，于是现在的你只需要配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> AutoDllPlugin(&#123;</span><br><span class="line">  inject: <span class="literal">true</span>, <span class="comment">// will inject the DLL bundles to index.html</span></span><br><span class="line">  debug: <span class="literal">true</span>,</span><br><span class="line">  filename: <span class="string">&#x27;[name]_[hash].js&#x27;</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: [</span><br><span class="line">      <span class="string">&#x27;@antv/data-set&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;@antv/g2&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;@antv/g6&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;highlight.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;markdown-it&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;markdown-it-abbr&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;markdown-it-deflist&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;markdown-it-emoji&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;markdown-it-footnote&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;markdown-it-ins&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;markdown-it-katex&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;markdown-it-mark&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;markdown-it-sub&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;markdown-it-sup&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;markdown-it-task-lists&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;markdown-it-toc-and-anchor&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;typed.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vue&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vue-router&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> webpack.optimize.UglifyJsPlugin()],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当然，如果你用了 ECharts, 有的时候会出现莫名其妙的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__DEV__ is not defined</span><br></pre></td></tr></table></figure>

<p>解决方法就是在这上面的插件里面加个插件定义一个 Global 的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new webpack.DefinePlugin(&#123;</span><br><span class="line">  __DEV__: false</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS: 去年的版本由于依赖库的一个路径问题导致 autodll-webpack-plugin 不能在 Windows 上使用，今年可以啦。还不快快用起来？</p>
</blockquote>
<p>对于外部的 JS/CSS 依赖库：</p>
<ol>
<li>直接拷贝到 static 下面，然后从 index.html 引入即可。</li>
<li>动态创建 script 标签（比如动态引入高德地图）</li>
</ol>
<h2 id="0x04-路由"><a href="#0x04-路由" class="headerlink" title="0x04 路由"></a>0x04 路由</h2><p>博客项目，实际上路由比较简单。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default new Router(&#123;</span><br><span class="line">  mode: &#39;history&#39;,</span><br><span class="line">  base: &#39;&#x2F;&#39;,</span><br><span class="line">  &#x2F;&#x2F; 注释掉这里是因为和引入的 smooth-scroll 冲突</span><br><span class="line">  &#x2F;&#x2F; scrollBehavior (to, from, savedPosition) &#123;</span><br><span class="line">  &#x2F;&#x2F;   return &#123; x: 0, y: 0 &#125;</span><br><span class="line">  &#x2F;&#x2F; &#125;,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;&#39;,</span><br><span class="line">      name: &#39;home&#39;,</span><br><span class="line">      component: () &#x3D;&gt; import(&#39;..&#x2F;pages&#x2F;Home.vue&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 解决手贱带来的问题</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;index:suffix*&#39;,</span><br><span class="line">      name: &#39;index&#39;,</span><br><span class="line">      component: () &#x3D;&gt; import(&#39;..&#x2F;pages&#x2F;Home.vue&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;blog&#39;,</span><br><span class="line">      name: &#39;blog&#39;,</span><br><span class="line">      component: () &#x3D;&gt; import(&#39;..&#x2F;pages&#x2F;Blog.vue&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;blog&#x2F;post&#x2F;:title&#39;,</span><br><span class="line">      name: &#39;post&#39;,</span><br><span class="line">      component: () &#x3D;&gt; import(&#39;..&#x2F;pages&#x2F;Blog&#x2F;ArticlePost.vue&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;blog&#x2F;:category(category&#x2F;\\d+)?&#x2F;:tags(tags&#x2F;\\d+)?&#x2F;:page(page&#x2F;\\d+)?&#39;,</span><br><span class="line">      name: &#39;blogposts&#39;,</span><br><span class="line">      component: () &#x3D;&gt; import(&#39;..&#x2F;pages&#x2F;Blog.vue&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;archive&#39;,</span><br><span class="line">      name: &#39;archive&#39;,</span><br><span class="line">      component: () &#x3D;&gt; import(&#39;..&#x2F;pages&#x2F;Archive.vue&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;gallery&#39;,</span><br><span class="line">      name: &#39;gallery&#39;,</span><br><span class="line">      component: () &#x3D;&gt; import(&#39;..&#x2F;pages&#x2F;Gallery.vue&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;works&#39;,</span><br><span class="line">      name: &#39;works&#39;,</span><br><span class="line">      component: () &#x3D;&gt; import(&#39;..&#x2F;pages&#x2F;Works.vue&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;about&#39;,</span><br><span class="line">      name: &#39;about&#39;,</span><br><span class="line">      component: () &#x3D;&gt; import(&#39;..&#x2F;pages&#x2F;About.vue&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>除了 import 语法之外，需要注意的就是 ‘/blog/:category(category/\d+)?/:tags(tags/\d+)?/:page(page/\d+)?’ 这个奇怪的表达式。</p>
<p>这个表达式可以用于匹配下面的路由</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/blog/category/1/tags/2/page/3</span><br><span class="line">/blog/category/1/page/3</span><br><span class="line">/blog/tags/3/page/3</span><br><span class="line">/blog/page/3</span><br></pre></td></tr></table></figure>

<p>匹配完毕之后，就可以拿到 categroy tags page 的值然后提交数据库拿数据咯。</p>
<h2 id="0x05-组件"><a href="#0x05-组件" class="headerlink" title="0x05 组件"></a>0x05 组件</h2><p>博客里面需要注意的就三个组件</p>
<ul>
<li>ArticlePost 组件</li>
<li>分页组件</li>
<li>打字终端组件</li>
</ul>
<p>第一个，ArticlePost 组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-article-post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;columns&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-1 hide-xl&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-2 col-xl-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;g-sidebar&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>本文目录<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;articleToc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-xl-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ArticleCard</span> <span class="attr">:article</span>=<span class="string">&quot;article&quot;</span> @<span class="attr">articleTocReady</span>=<span class="string">&quot;initArticleToc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ArticleCard</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-2 col-xl-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;g-sidebar&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>公告<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">              MG 的编程小屋，其实就是我整理笔记，写写文章的地方。</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">              专注 Python / JavaScript , 爱折腾的全干工程师 (Full Stuff Engineer)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">              如果我的文章给您的日常开发带来很大帮助的话</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">              您可以关注我的公众号</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/images/mp_wechat.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">              也可以扫描二维码进行投喂</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/images/tips_wechat.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">              听说关注或者进行投喂的人，技术都越来越牛咯。</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-1 hide-xl&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;fetchBlogPost&#125; <span class="keyword">from</span> <span class="string">&#x27;../../api/blog&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;BlogPage&#x27;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      ArticleCard: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../../components/Common/ArticleCard.vue&#x27;</span>),</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        article: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        articleToc: <span class="literal">undefined</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line"><span class="javascript">      <span class="string">&#x27;$route.params&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.initArticle()</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.initArticle()</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      initArticleToc: <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.articleToc = v;</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      initArticle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> title = <span class="built_in">this</span>.$route.params.title;</span></span><br><span class="line"><span class="javascript">        fetchBlogPost(title).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.article = res;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>嗯，其实就是监听 url, 如果匹配上 url 的话，从 url 中取 title, 然后发送请求，接着取回响应的内容交给子组件处理。子组件处理完毕会 emit 出一个 toc 的值，将这个值赋值给左侧 toc 即可。</p>
<ul>
<li>分页组件</li>
</ul>
<p>见地址吧  <a href="https://github.com/twocucao/YaVueBlog/blob/master/src/components/Common/Pagination.vue">https://github.com/twocucao/YaVueBlog/blob/master/src/components/Common/Pagination.vue</a></p>
<ul>
<li>打字终端组件</li>
</ul>
<p>终端的样式，当然是抄别人的 CSS, 打字效果，来源于 typed.js 依赖库</p>
<h2 id="0x06-扩展"><a href="#0x06-扩展" class="headerlink" title="0x06. 扩展"></a>0x06. 扩展</h2><p>对于其他的实现，自然是要多多看代码咯。</p>
<p>其实前端工程化是一个很广的概念，本文没有提到代码风格、团队开发工作流、CSS 编写规范、组件优化、Webpack 详细配置等等。这都需要在日常开发中多多练习的。</p>
<p>笔者最近换了份工作，以 React 为技术栈。 加上篇幅和精力有限，也就是不在以 Vue 为前端这一块详细展开了。</p>
<p>下面的文章还是聚焦在后端上面。</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE. 参考链接"></a>0xEE. 参考链接</h2><p>还犹豫啥，Django 前后端分离最佳实践，点赞后，快上车吧</p>
<ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog">https://github.com/twocucao/YaDjangoBlog</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-03-18</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>YaDjangoBlog 的前后端设计</title>
    <url>/2018/02/23/YaDjangoBlog%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%9D%E6%AD%A5%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文是 Django 全栈开发教程的第二篇</p>
<p>目录在这里，已经更新的文章如下</p>
<ul>
<li>Django 全栈开发教程 - 2018 年不容错过的 Django 全栈项目 – 目录篇</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的开发环境配置</li>
</ul>
<p>本文需要完成两件事情：</p>
<ul>
<li>第一件事情，回答一个问题：为什么要选择博客系统作为教程而不是别的？</li>
<li>第二件事情，简单说说 YaDjangoBlog 的前后端设计。</li>
</ul>
<h2 id="0x01-为什么是博客系统"><a href="#0x01-为什么是博客系统" class="headerlink" title="0x01 为什么是博客系统"></a>0x01 为什么是博客系统</h2><p>在目录评论区，有个读者问：</p>
<p>为什么选择博客系统？而不是别的系统？</p>
<p>一言以蔽之：因为合适。</p>
<p>为什么说合适？</p>
<ol>
<li>第一点：代码量相对合适，业务逻辑大家都很清楚，博客系统说简单也简单，说复杂也复杂，待会我们就可以谈到。简单的例子反而是入门和深入了解 Django 技术栈（而不是设计一个优秀的程序）的最佳案例。</li>
<li>第二点：言简意赅，知识点覆盖全面，注意，我们要学习的 Django 技术栈，Django 技术栈，Django 技术栈。不是学高可用架构设计，不是超级复杂系统的设计，不是业务逻辑设计。</li>
<li>第三点：日常开发都是见招拆招，依据业务逻辑来，作为开发者，总不能直接把公司的业务代码上传的 Github 上吧？</li>
</ol>
<p>不妨想想，其实写个博客系统压根就不需要这么麻烦的使用各种组件来给自己的博客系统贴金。那么，我为何还是要『为赋新词强说愁』呢？</p>
<p>答案是『醉翁之意不在酒，在乎山水之间』。通过这个简单的博客，来带大家过一遍 Django 技术栈，具体能学的多好，看个人努力。</p>
<p>当然，借此也吐槽一下，有的人认为，博客系统简单，不就是 Blog / Category / Tag / Comment，有啥可练手的？</p>
<p>其实不然，设计一个博客系统完全可以按照复杂系统的高标准来设计，举例来说：</p>
<ol>
<li>ORM 设计：如果我想把 Category/Tags/Comment 变成通用的，即可以对 Blog 进行分类 / 标签 / 评论，对新建的 Product 模型 也可以进行分类 / 标签 / 评论。</li>
<li>数据库设计：Category 可能有三到四级子分类怎么办？ Comment 支持评论区互相回复评论。这里的不但要通用，还要用树形结构实现放在一张表里面。</li>
<li>全文搜索：Blog 的 content 字段是长文对吧？这个总不能每次搜索都是 like 查询吧？Elasticsearch 怎么搞。</li>
<li>缓存和定时任务：PV 和 UV 量总不能每次访问都更新一次数据库吧？为什么不用 Redis 呢？用上了 Redis, 为什么不加上定时任务呢帮忙把 PV/UV 以及点赞数量啥的定期更新到数据库中？</li>
<li>Celery ：定时任务为啥不用神器 Celery 呢？</li>
<li>其他问题：如何对某个接口进行 profile? 如果逻辑比较复杂，是不是要补上单元测试。Django 单实例如何使用多域名？</li>
</ol>
<p>那一套太祖长拳从宋兵甲手里使出来，不过是威力平平；</p>
<blockquote>
<p>如果是从那乔峰手里使出来，那威力如何？</p>
</blockquote>
<h2 id="0x02-前后端分离"><a href="#0x02-前后端分离" class="headerlink" title="0x02 前后端分离"></a>0x02 前后端分离</h2><h3 id="前后端分离的必要性"><a href="#前后端分离的必要性" class="headerlink" title="前后端分离的必要性"></a>前后端分离的必要性</h3><p>为什么前后端分离？</p>
<ul>
<li>一是需求：简简单单的套模板已经不够了，还要富交互，代码量上去了。</li>
<li>二是技术条件成熟：NodeJS 横空出世，使得 JS 成了不仅仅可以在浏览器中运行的语言，成了一门和 Java,Python,Ruby 一样的客户端语言。</li>
<li>三是生态：轮子多，这车轱辘如你所愿。</li>
</ul>
<p>前端的职责变重，代码量则上来了，相应的，模块化工具就自然出来了。</p>
<blockquote>
<p>PS: 前后端分离也不是啥新概念，当年开发客户端的不也是前后端分离？ 当然，这里的前后端分离指的是浏览器与服务器的前后端分离。</p>
</blockquote>
<p>前后端分离之后，依旧是前端发送请求，后端返回对应的数据。</p>
<p>那么，哪里变了？我认为，主要有两点：</p>
<ol>
<li>前后端流程可以并行开发，即前后端可以同时干活。并且责任明确。</li>
<li>JS 可以干客户端语言干的事情。</li>
</ol>
<p>以前，我们都是由美工设计页面，前端开发模板，后端开发 API, 前端再套 API, 再交给后端，后端接过前端的页面套模板。一切看起来是那么的和谐。</p>
<p>但是，就是这么一个看起来一个简单的套模板 / 开发 API，就是一个时间黑洞。</p>
<p>比如说：</p>
<ul>
<li>小美（美工）设计好设计稿，交给小钱（前端）</li>
<li>小钱完成前端页面的设计，</li>
<li>小侯（后端）开发 API,</li>
<li>小钱套 API 后，完成页面设计，并将这个页面交给小侯</li>
<li>小侯要做的事情，把小钱的前端页面切分成模板引擎里面的语法，从数据库里面取数据，交给模板引擎渲染，完成套前端页面流程。</li>
</ul>
<p>接着，产品经理跳出来，指出页面设计中有两个地方需要优化，于是：</p>
<p>大家面临的选择就只有两个：</p>
<ol>
<li>合起伙来，解决掉产品经理</li>
<li>大家在反反复复，迂迂回回的需求变更、BUG 解决、调试中，浪费了一些不应该浪费的时间。</li>
</ol>
<p>那么前后端分离了，前后端的开发就如同客户端开发和服务端开发一样：</p>
<ul>
<li><p>前端 / 客户端 负责路由，负责什么时候请求什么 API, 该去优化性能就去优化性能。</p>
</li>
<li><p>后端 / 服务端 负责折腾后端组件，优化性能。</p>
</li>
<li><p>如果调页面，直接找前端去就好了。</p>
</li>
<li><p>如果是数据或者 API 有问题，直接找后端就好了。</p>
</li>
</ul>
<p>这么一分，其实职责就好界定了很多，由于修改与优化不会引发两个工种的交叉合作（前端改完，后端套模板）,BUG 率就减少了很多。</p>
<blockquote>
<p>PS: 其实职责好界定很多，但不能避免推锅。</p>
</blockquote>
<p>由于本博客只关注 Django 技术栈，而所谓使用 JavaScript 前后端通吃的『大前端』, 则不在我们的讨论范围之内。</p>
<blockquote>
<p>比起使用一门语言前后端通吃，笔者还是比较倾向于『见人说人话，见鬼说鬼话』, 即使用多种语言，去处理合适的问题的。</p>
</blockquote>
<h3 id="前后端分离的成本"><a href="#前后端分离的成本" class="headerlink" title="前后端分离的成本"></a>前后端分离的成本</h3><p>前后端分离并不是没有代价的。</p>
<p>对于前端：</p>
<ul>
<li>首次页面 Loading 速度</li>
<li>JWT 认证请求</li>
<li>在特定场景下，有些看起来在多页面开发过程中比较简单的事情，反而比较复杂。</li>
<li>需要注意内存的使用率。</li>
</ul>
<p>对于后端：</p>
<ul>
<li>JWT 认证响应，以前是 session 认证，而且 Django 都给你实现好了。现在变了，往往大家使用的都是 JWT 作为认证。</li>
</ul>
<p>但这些成本相比与节省的开发时间相比都是微不足道的。</p>
<p>当然，我会在本系列的后面抽出一篇教程来专门讲解 Django 内置用户的扩展和前后端分离的登录认证。</p>
<h2 id="0x03-博客系统设计"><a href="#0x03-博客系统设计" class="headerlink" title="0x03 博客系统设计"></a>0x03 博客系统设计</h2><p>这个博客最初要解决的问题是：</p>
<ol>
<li>hexo 用腻了，想自己写一个简单的博客系统。</li>
<li>这个博客要可以导入文章，我不需要编辑器功能，在本地编辑完毕之后，导入数据库就好。</li>
</ol>
<h3 id="页面构成"><a href="#页面构成" class="headerlink" title="页面构成"></a>页面构成</h3><ol>
<li>首页</li>
<li>博客列表页</li>
<li>博客存档页</li>
<li>博客历史页</li>
<li>博客详情页</li>
<li>关于我页面</li>
</ol>
<h3 id="模型构成"><a href="#模型构成" class="headerlink" title="模型构成"></a>模型构成</h3><p>首先 M 模型层</p>
<ol>
<li>PostgreSQL : 博文 / 博文类型 / 博文标签</li>
<li>Elasticsearch : 博文</li>
<li>Redis : 每篇博文的阅读量，点赞量</li>
</ol>
<p>这里需要注意的是：</p>
<ul>
<li>第一：博文类型-博文：1 对多，博文标签-博文：多对多</li>
<li>第二：博文中的 content 为文章内容，即可以在 Elasticsearch 中作为全文搜索的字段。具体降到 Elasticsearch 的时候我们会详细说明。</li>
<li>第三：博文中的 阅读量和点赞量放在 Redis 里面，由 Celery 的定时任务定期刷到内存中。</li>
</ul>
<p>再考虑 VT 视图模板层，VT 层，会根据情况 DjangorestFramework 来进行序列化和反序列化。</p>
<p>在设计模型的时候，尽量将涉及到模型的操作放在模型内。</p>
<p>关于如何设计更好的模型，在以后的文章将会讲解，先挖个坑。</p>
<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p>理想环境中，我们的架构图如下：</p>
<p>哦，不好意思，放错图了，是这样的。</p>
<p>但这样的架构应该有专门的人来维护。</p>
<p>于是在人力有限的情况下，本项目的架构图是这样的。</p>
<p>哦，不好意思，放错图了，是这样的。</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE. 参考链接"></a>0xEE. 参考链接</h2><p>还犹豫啥，Django 前后端分离最佳实践，点赞后，快上车吧</p>
<ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog">https://github.com/twocucao/YaDjangoBlog</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-22</strong> 开启本文</li>
<li><strong>2018-02-27</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask 文档阅读笔记</title>
    <url>/2018/03/09/Flask%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>因为最近需要新增一个 Flask 技术栈，所以准备趁这休息的时候更新关于 Flask 的两篇文章。</p>
<p>前者是文档阅读笔记，后者是源码初步解析。</p>
<blockquote>
<p>嗯，其实这篇就是做了一些搬运的活。</p>
</blockquote>
<h2 id="0x01-文档"><a href="#0x01-文档" class="headerlink" title="0x01 文档"></a>0x01 文档</h2><p>由于 Flask 还依赖 Jinja2 与 Werkzeug, 并且往往大家在使用 Flask 的时候还是会使用 itsdangerous. 所以，当大家说 Flask 代码少的时候，我还是不服的。但如果你说，Flask 本身实现确实是简洁，扩展性强，我还是服气的。</p>
<p>Flask 的文档有三种类型（其他框架类文档也是如此）：</p>
<ul>
<li>Tutorial 类，即教程类</li>
<li>Guide 类，即指南类</li>
<li>API 类，即接口级别的文档</li>
</ul>
<p>当你是一个老手，还想快速上手一个框架的时候，认真读一读前两者，然后挑选一个项目多看几遍即可。</p>
<p>但是当你深入到框架里面的设计与实现的时候，则必须要多读读 API Document , 由于通常情况下 API Document 的内容往往是代码中的注释，加上 Flask 代码量本来就不多。所以，有的时候阅读 Flask 代码代码也会比 API 好很多。</p>
<h2 id="0x02-Guide"><a href="#0x02-Guide" class="headerlink" title="0x02 Guide"></a>0x02 Guide</h2><h3 id="2-1-Templates"><a href="#2-1-Templates" class="headerlink" title="2.1 Templates"></a>2.1 Templates</h3><p>快速 Get 模板语言无非就是掌握：</p>
<ol>
<li>上下文变量</li>
<li>条件语法</li>
<li>列表语法</li>
<li>模板的继承 (extend 语法）与组合 (include)</li>
<li>额外的一些语法糖，比如 filter 的使用 / 组成</li>
</ol>
<h3 id="2-2-Testing-Flask-Applications"><a href="#2-2-Testing-Flask-Applications" class="headerlink" title="2.2 Testing Flask Applications"></a>2.2 Testing Flask Applications</h3><blockquote>
<p>Something that is untested is broken.</p>
</blockquote>
<p>这里的测试，有哪些测试呢？</p>
<ol>
<li>非 flask 相关逻辑的测试。比如，我对一小段无关于 View 层的纯粹的逻辑进行测试，我比较喜欢使用 pytest 进行测试。</li>
<li>Flask 相关</li>
</ol>
<ul>
<li>Setup</li>
<li>TearDown</li>
<li>登录前 / 登陆后</li>
</ul>
<h3 id="2-3-Application-Errors"><a href="#2-3-Application-Errors" class="headerlink" title="2.3 Application Errors"></a>2.3 Application Errors</h3><p>比如测试请求与响应结果。比如测试路由。测试某个与 View 层绑定的数据操作是否执行成功。</p>
<p>首先，大致扫一眼 tutorial ，知道了 Flask 的教程讲了如下的东西：</p>
<ol>
<li>路由</li>
<li>静态文件</li>
<li>模板渲染</li>
<li>接触请求数据</li>
<li>重定向和错误</li>
<li>响应</li>
<li>Session</li>
<li>Message Flash</li>
<li>日志</li>
<li>扩展</li>
</ol>
<p>当然，我们都是老手了，肯定是挑重点来看了。</p>
<p>Routing, 发现现在的问题在于</p>
<p>Flask 有两个主要依赖：</p>
<ul>
<li>路由、调试、WSGI</li>
<li>模板</li>
</ul>
<h2 id="0x02-社区支持"><a href="#0x02-社区支持" class="headerlink" title="0x02 社区支持"></a>0x02 社区支持</h2><h2 id="0x04-读文档产生的疑问"><a href="#0x04-读文档产生的疑问" class="headerlink" title="0x04 读文档产生的疑问"></a>0x04 读文档产生的疑问</h2><p>1.</p>
<p>For web applications it’s crucial to react to the data a client sends to the server. In Flask this information is provided by the global request object. If you have some experience with Python you might be wondering how that object can be global and how Flask manages to still be threadsafe. The answer is context locals:</p>
<p>Context Locals<br>Insider Information<br>If you want to understand how that works and how you can implement tests with context locals, read this section, otherwise just skip it.</p>
<p>Certain objects in Flask are global objects, but not of the usual kind. These objects are actually proxies to objects that are local to a specific context. What a mouthful. But that is actually quite easy to understand.</p>
<p>Imagine the context being the handling thread. A request comes in and the web server decides to spawn a new thread (or something else, the underlying object is capable of dealing with concurrency systems other than threads). When Flask starts its internal request handling it figures out that the current thread is the active context and binds the current application and the WSGI environments to that context (thread). It does that in an intelligent way so that one application can invoke another application without breaking.</p>
<p>So what does this mean to you? Basically you can completely ignore that this is the case unless you are doing something like unit testing. You will notice that code which depends on a request object will suddenly break because there is no request object. The solution is creating a request object yourself and binding it to the context. The easiest solution for unit testing is to use the test_request_context() context manager. In combination with the with statement it will bind a test request so that you can interact with it. Here is an example:</p>
<h3 id="Thread-Local"><a href="#Thread-Local" class="headerlink" title="Thread Local"></a>Thread Local</h3><p>One of the design decisions in Flask was that simple tasks should be simple; they should not take a lot of code and yet they should not limit you. Because of that, Flask has a few design choices that some people might find surprising or unorthodox. For example, Flask uses thread-local objects internally so that you don’t have to pass objects around from function to function within a request in order to stay threadsafe. This approach is convenient, but requires a valid request context for dependency injection or when attempting to reuse code which uses a value pegged to the request. The Flask project is honest about thread-locals, does not hide them, and calls out in the code and documentation where they are used.</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask 源码初步解读</title>
    <url>/2018/03/09/Flask%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>系列文章先暂时停更一下。今天换换口味。</p>
<p>久闻 Flask 是众多 Pythonist 喜欢的框架。这次借着换工作的机会熟悉一下 Flask</p>
<ol>
<li>本文先分享我阅读代码的一些小经验</li>
<li>接着通过最简单的一个 WSGI APP 开始，带着<strong>如何设计一个 Web 框架</strong>这个问题，先头脑风暴，从而脑补（而不是实现）出一个 Web 框架的基本要素。</li>
<li>从源码角度理解，Flask 从启动到接受第一个请求、返回第一个响应期间都发生了什么。</li>
<li>最后交代一些自己在这个过程中的一些突发的想法。</li>
</ol>
<blockquote>
<p>将解读 Flask 的源码放在一篇文章里，势必会造成广度有余而深度不足。所以本想定位于 Flask 源码初步解读。</p>
</blockquote>
<h2 id="0x01-阅读-Flask-代码的一种较好的姿势"><a href="#0x01-阅读-Flask-代码的一种较好的姿势" class="headerlink" title="0x01 阅读 Flask 代码的一种较好的姿势"></a>0x01 阅读 Flask 代码的一种较好的姿势</h2><p>之前在 <a href="https://www.zhihu.com/question/28509408/answer/299763091">https://www.zhihu.com/question/28509408/answer/299763091</a> 分享过自己一点阅读代码的粗浅的经验，是以阅读一个 Django 的应用为案例的。这里借着读 Flask 本身分享一下我的看法。</p>
<p>读源码，是一个技术活。一是忌讳要想读懂全部，另一个忌讳是以为自己能一下子毫无障碍的读懂全部代码。</p>
<ol start="0">
<li>建议 0 : 看源码的时候，<strong>务必务必带着问题去读</strong>。每一次阅读其实都是在尝试回答或小或大的问题（当然，读书看文章莫不如是）。</li>
<li>建议 1 : 先读现成的文档，不要上来就对着代码一通瞎看。</li>
<li>建议 2 : 所谓『横看成岭侧成峰，远近高低都不同』 你需要从不同的角度来读源码。</li>
<li>建议 3 : 抓大放小，该略读就略读（比如知道 Nginx 的大致作用就好，做优化请求响应的时候再翻看文档），该精读则精读（具体一个关键的功能）。</li>
</ol>
<blockquote>
<p>好，坐好，预备，开车。</p>
</blockquote>
<h2 id="0x02-问题-1-如何设计一个-Web-框架"><a href="#0x02-问题-1-如何设计一个-Web-框架" class="headerlink" title="0x02 问题 1: 如何设计一个 Web 框架"></a>0x02 问题 1: 如何设计一个 Web 框架</h2><h3 id="头脑风暴"><a href="#头脑风暴" class="headerlink" title="头脑风暴"></a>头脑风暴</h3><p>Flask 是一个微 Web 框架，换而言之，代码量少的 Web 框架。当然，其实 Flask 框架是一个微框架，但『常规的 Flask 应用』本身的代码加起来一点都不比『Django 应用』少。这个地方我们后面会讲到。</p>
<p>在阅读 Flask 相关代码的之前，先头脑风暴一下：</p>
<blockquote>
<p>如何设计一个 Web 框架？</p>
</blockquote>
<p>当心中对这个问题有一定的了解之后，读 Flask 代码会更好。</p>
<p>首先，Web 框架是为了提升 Web 开发的。(XX 框架是为了提升 XX 开发的）, 这种提升可能会是 开发体验 / 性能。</p>
<p>我们来看看那个 Python 世界最基础的 wsgi app 相关代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span>(<span class="params">environ, start_response</span>):</span></span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)])</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;Hello World!&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>在之前的文章，我也借 Django 的 DRF 提到过这个极简的代码。</p>
<p>但这个简单的 webapp，显然是啥玩意都不够用的。比如说：</p>
<ul>
<li>没有路由，我访问啥玩意都是 hello world。</li>
<li>单线程 IO 阻塞模型基本上啥都不能干。你比如说，启动这个 webapp 的时候在 return 数据之前直接 sleep 十秒，然后请求都进不来。</li>
<li>没有数据存取，连个数据库链接 CURDE 啥玩意都没有</li>
<li>environ 太过于底层，如果是判断 headers 啥的太麻烦，要是像 django 里面一样能拿到一个 request 对象返回一个 response 对象就好了。</li>
<li>没有模板语言</li>
<li>还有其他能够提升开发体验的东西，比如自带 http server 代码热加载之类。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span>(<span class="params">environ, start_response</span>):</span></span><br><span class="line">    <span class="comment"># 直接 thread local 支持多个请求。</span></span><br><span class="line">    <span class="comment"># 依据 environ 判断路由</span></span><br><span class="line">    <span class="comment"># 依据 路由 执行相关 view 层方法</span></span><br><span class="line">    <span class="comment"># 在相关 view 层方法内执行相关逻辑</span></span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)])</span><br><span class="line">    <span class="comment"># 返回对应响应</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>当然，思路是这么个思路，这个思路也确实非常的命令式，非常的面向过程。</p>
<p>至于我们如何把这个面向过程的思路变成面向对象的设计与实现，则需要更加细致的思考这些问题。</p>
<ol>
<li>能不能把 request 和 response 封装一下？方便在 view 里面处理？</li>
<li>能不能有个 URLDisparch 之类的东西，帮你解决 url 和 view 的 mapping 问题。或者路由能不能直接搞成 装饰器类型的比如 @router(“/“) 直接放在 view 层的 function 上。</li>
<li>能不能有个方便对数据库进行 CURDE 的东西？比如 ORM/ODM</li>
<li>这玩意会不会线程不安全，假如我想每一个请求都有单独的变量集合的话，线程怎么管理？</li>
<li>……</li>
</ol>
<h3 id="设计-Web-框架"><a href="#设计-Web-框架" class="headerlink" title="设计 Web 框架"></a>设计 Web 框架</h3><p>利用 Flask 作者的另一个库 werkzeug 的案例中有这么一个东西。</p>
<p><a href="https://github.com/pallets/werkzeug/blob/master/examples/shortly/shortly.py">https://github.com/pallets/werkzeug/blob/master/examples/shortly/shortly.py</a></p>
<p>几百行代码就不贴在这里了。仔细看看还是挺有趣的。 这个可以算作另一个超简的 Webapp 了。</p>
<p>Flask 算作在这个基础上进行一定的扩展而成。</p>
<p>看完上面这个就可以出去吹牛逼可以自己写一个极简 Web 框架了。</p>
<p>那么，你可能有疑问，为何有了 Flask 之后，是否需要看这个更底层的 Werkzeug 的库，当然，有必要咯，Python 世界除了老牌的比较流行的 Django/Flask, 还有一个新星，叫做 APIStar</p>
<p><a href="https://github.com/encode/apistar">https://github.com/encode/apistar</a></p>
<h2 id="0x02-问题-2-请求流程是怎么样的"><a href="#0x02-问题-2-请求流程是怎么样的" class="headerlink" title="0x02 问题 2: 请求流程是怎么样的"></a>0x02 问题 2: 请求流程是怎么样的</h2><p>我们就拿这个 flask 的极简案例，进行<strong>首次</strong>阅读 Flask 代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"></span><br><span class="line">$ FLASK_APP=hello.py flask run</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从请求到响应的整个流程，Flask 的是怎么处理请求的？</p>
</blockquote>
<h3 id="2-1-服务器是怎么起来的"><a href="#2-1-服务器是怎么起来的" class="headerlink" title="2.1 服务器是怎么起来的"></a>2.1 服务器是怎么起来的</h3><p>首先 flask run 之后，发生了什么？</p>
<p>先初始化环境变量，然后导入 dotenv 文件，然后执行 run_command 方法，找到 hello.py 然后导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cli.py#run_command 方法</span></span><br><span class="line">app = DispatchingApp(info.load_app, use_eager_loading=eager_loading)</span><br><span class="line"><span class="comment"># 上一行代表着其实我们每次在本地 flask run 的时候，起的服务并不是 flask_app, 而是被 DispatchingApp 包装了一层的 flask app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line">run_simple(host, port, app, use_reloader=reload, use_debugger=debugger,</span><br><span class="line">            threaded=with_threads, ssl_context=cert)</span><br></pre></td></tr></table></figure>

<p>进行这层包装之后，就可以显示 WERKZEUG 的所谓在浏览器中的 报错信息了。</p>
<p>通常开发时这里的 run_simple 最后会调用 run_with_reloader , 每当程序退出的时候，reloader 就依照策略重新跑一次 reload 一次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_with_reloader</span>(<span class="params">main_func, extra_files=<span class="literal">None</span>, interval=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                      reloader_type=<span class="string">&#x27;auto&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run the given function in an independent python interpreter.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> signal</span><br><span class="line">    reloader = reloader_loops[reloader_type](extra_files, interval)</span><br><span class="line">    signal.signal(signal.SIGTERM, <span class="keyword">lambda</span> *args: sys.exit(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> os.environ.get(<span class="string">&#x27;WERKZEUG_RUN_MAIN&#x27;</span>) == <span class="string">&#x27;true&#x27;</span>:</span><br><span class="line">            t = threading.Thread(target=main_func, args=())</span><br><span class="line">            t.setDaemon(<span class="literal">True</span>)</span><br><span class="line">            t.start()</span><br><span class="line">            reloader.run()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sys.exit(reloader.restart_with_reloader())</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>好，服务起来了。</p>
<h3 id="2-2-请求-响应的流程"><a href="#2-2-请求-响应的流程" class="headerlink" title="2.2 请求-响应的流程"></a>2.2 请求-响应的流程</h3><p>我们先看 Flask 类里面的比较关键的两个方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span>(<span class="params">_PackageBoundObject</span>):</span></span><br><span class="line">    <span class="comment"># 一些方法 ......</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">full_dispatch_request</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 主要是执行一些方法，最后返回响应</span></span><br><span class="line">        self.try_trigger_before_first_request_functions()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            request_started.send(self)</span><br><span class="line">            rv = self.preprocess_request()</span><br><span class="line">            <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                rv = self.dispatch_request()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            rv = self.handle_user_exception(e)</span><br><span class="line">        <span class="comment"># ??? TODO</span></span><br><span class="line">        <span class="keyword">return</span> self.finalize_request(rv)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里是我们熟悉的 environ, 和 start_response</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span>(<span class="params">self, environ, start_response</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param environ: a WSGI environment</span></span><br><span class="line"><span class="string">        :param start_response: a callable accepting a status code,</span></span><br><span class="line"><span class="string">                               a list of headers and an optional</span></span><br><span class="line"><span class="string">                               exception context to start the response</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 在这里对 environ 进行封装，创建请求上下文</span></span><br><span class="line">        ctx = self.request_context(environ)</span><br><span class="line">        error = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 这里将请求上下文压入 _request_ctx_stack</span></span><br><span class="line">                ctx.push()</span><br><span class="line">                response = self.full_dispatch_request()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                error = e</span><br><span class="line">                response = self.handle_exception(e)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> self.should_ignore_error(error):</span><br><span class="line">                error = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 这里将创建的请求上下文从中 _request_ctx_stack pop 出来</span></span><br><span class="line">            ctx.auto_pop(error)</span><br></pre></td></tr></table></figure>

<p>从 wsgi_app 泪看，就可以看到我们之前在当时在开脑洞时候看到的。</p>
<ol>
<li>把 request 和 response 封装一下？方便在 view 里面处理？</li>
<li>有个 URLDisparch 之类的东西，帮你解决 url 和 view 的 mapping 问题。</li>
</ol>
<p>话说回来？</p>
<blockquote>
<p>这个 ctx 是啥？<br>当然，flask 不带 ORM, 这我们也就不研究了。</p>
</blockquote>
<p>– TODO: 在这里需要重构一下</p>
<p>不过话说回来 请求上下文的容器 request_ctx_stack 到底是啥？</p>
<blockquote>
<p>另一种本地数据存储方式。</p>
</blockquote>
<p>在多线程的情况下，每一个请求都会创建一个线程，从这个请求被发起到销毁，我想拥有单独的变量（修改这个变量不会影响到其他变量），比如 sessions 之类。</p>
<p>显然，在多线程的情况下，以上的需求完全可以通过 threadlocal 来实现。</p>
<p>翻了 werkzeug 的文档，找到了原因：</p>
<blockquote>
<p>因为 python 里面的并发模型并不只有多线程一种。比如 greenlets, 每一个请求，都在一个线程里面。</p>
</blockquote>
<h2 id="0x02-问题-2-Flask-中-Context-机制"><a href="#0x02-问题-2-Flask-中-Context-机制" class="headerlink" title="0x02 问题 2: Flask 中 Context 机制"></a>0x02 问题 2: Flask 中 Context 机制</h2><p>在 Django 完成一个 View 层的逻辑是这样的，Django 封装好了请求，请求经过 middleware 的处理，最后调用 login 函数，并且传入 request 方便 view 函数进行处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        error = someerror</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br></pre></td></tr></table></figure>

<p>在 Flask 完成一个 View 层的逻辑是这样的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        error = someerror</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br></pre></td></tr></table></figure>

<p>假如我是一个爱问问题的年轻人，这里肯定会有疑惑：</p>
<blockquote>
<p>从外部 import 过来，那就是利用了 python 自带的 import 单例模式。 那么线程和线程之间拿到的肯定是同一个 request 呀。但 Django 里面每个 request 都是不一样的，否则一些很基础功能的比如已经认证的用户就无法拿到了。</p>
</blockquote>
<p>我已经不是那个爱问问题的年轻人，因为年纪已经不小了。逃…</p>
<p>显然，每一次在 view 层引用的 request 肯定不是同一个 request , 那么，这是如何做到的呢？比如用 ThreadLocal , ThreadLocal 通过每个线程不同的 ID 拿到的本地变量，于是我们查看一下对应的实现。 这个 request 来自于 global.py , 使用了一个 werkzeug.local 里面的 LocalProxy</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">from</span> werkzeug.local <span class="keyword">import</span> LocalStack, LocalProxy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span>(<span class="params">name</span>):</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getattr</span>(top, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_app_object</span>(<span class="params">name</span>):</span></span><br><span class="line">    top = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getattr</span>(top, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_find_app</span>():</span></span><br><span class="line">    top = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> top.app</span><br><span class="line"></span><br><span class="line"><span class="comment"># context locals</span></span><br><span class="line">_request_ctx_stack = LocalStack()</span><br><span class="line">_app_ctx_stack = LocalStack()</span><br><span class="line">current_app = LocalProxy(_find_app)</span><br><span class="line"><span class="comment"># 这就是我们需要的注意的地方，LocalProxy</span></span><br><span class="line">request = LocalProxy(partial(_lookup_req_object, <span class="string">&#x27;request&#x27;</span>))</span><br><span class="line">session = LocalProxy(partial(_lookup_req_object, <span class="string">&#x27;session&#x27;</span>))</span><br><span class="line">g = LocalProxy(partial(_lookup_app_object, <span class="string">&#x27;g&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>看到这里一阵蛋疼，貌似没有 threadlocal ？再次查看相关实现最后还是定位到了如何区分不同的 request 的核心代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># since each thread has its own greenlet we can just use those as identifiers</span></span><br><span class="line"><span class="comment"># for the context.  If greenlets are not available we fall back to the</span></span><br><span class="line"><span class="comment"># current thread ident depending on where it is.</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> greenlet <span class="keyword">import</span> getcurrent <span class="keyword">as</span> get_ident</span><br><span class="line">    <span class="comment"># greenlet 的代码是 C, 时间长没看 C 代码了，看了半天没看明白</span></span><br><span class="line">    <span class="comment"># 翻了文档返回当前的 greenlet, 也就是返回调用此函数的 greenlet</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> thread <span class="keyword">import</span> get_ident</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">from</span> _thread <span class="keyword">import</span> get_ident</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;__storage__&#x27;</span>, <span class="string">&#x27;__ident_func__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">object</span>.__setattr__(self, <span class="string">&#x27;__storage__&#x27;</span>, &#123;&#125;)</span><br><span class="line">        <span class="comment"># 这里传递的 ident 就可以直接</span></span><br><span class="line">        <span class="built_in">object</span>.__setattr__(self, <span class="string">&#x27;__ident_func__&#x27;</span>, get_ident)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span>:</span></span><br><span class="line">    <span class="comment"># 用 local 实现的栈</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalProxy</span>:</span></span><br><span class="line">    <span class="comment"># 一个 local 的代理器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;__members__&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dir</span>(self._get_current_object())</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getattr</span>(self._get_current_object(), name)</span><br></pre></td></tr></table></figure>

<p>即：</p>
<ol>
<li>当 Flask 以多线程模型运行的时候，则使用的是 threadlocal 方式</li>
<li>当 Flask 以 greenlet 的模型运行的时候，则使用的是 greenlet 区分不同</li>
</ol>
<p>接下来回头看一下处理 request 的逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="comment"># 这个 request 哪里来？</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        error = someerror</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br></pre></td></tr></table></figure>

<p>于是，我们就知道了，当引用 request 这个 LocalProxy 的时候，引用的确实是同一个名称为 request 变量，并且这个变量也确实是 LocalProxy 的实例</p>
<blockquote>
<p>但是当使用 request.method 的时候，LocalProxy 重载了 取到的则是另一个『请求对象』的 method.</p>
</blockquote>
<p>于是拿到当前请求的信息。</p>
<p>当然，其实我们也可以依据利用这个技巧写一个 currentuser 的 ProxyLocal, 然后在每个 view 层里面使用 user.has_something 进行操作。</p>
<h2 id="0x03-问题-3-Flask-中官方的机制"><a href="#0x03-问题-3-Flask-中官方的机制" class="headerlink" title="0x03 问题 3: Flask 中官方的机制"></a>0x03 问题 3: Flask 中官方的机制</h2><h2 id="0x04-问题-3-Flask-中是如何做到优雅扩展的"><a href="#0x04-问题-3-Flask-中是如何做到优雅扩展的" class="headerlink" title="0x04 问题 3: Flask 中是如何做到优雅扩展的"></a>0x04 问题 3: Flask 中是如何做到优雅扩展的</h2><h2 id="0x05-其他问题"><a href="#0x05-其他问题" class="headerlink" title="0x05 其他问题"></a>0x05 其他问题</h2><h3 id="Flask-应用"><a href="#Flask-应用" class="headerlink" title="Flask 应用"></a>Flask 应用</h3><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-03-09</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>DjangoORMCheatSheet</title>
    <url>/2018/04/28/DjangoORMCheatSheet/</url>
    <content><![CDATA[<p>本文是《Python ORM 三部曲的第二部 - Django ORM 的用法 / 原理 / 优化》</p>
<p>上一部的地址为《Python ORM 三部曲的第一部 - Python ORM 的三种实现模式》</p>
<p>本文基于最新 Django 版本</p>
<ol>
<li>模型定义</li>
<li>Create/Update/Delete</li>
<li>各种查询 / 链式调用 / F 表达式 / Window 函数 /Lazy Loading / Eager Loading</li>
<li>Join</li>
<li>DEBUG 和 Profile 技巧</li>
</ol>
<p>本文是《Python ORM 三部曲的第一部 - Python 的三种数据源架构模式》</p>
<p>本文适用于：</p>
<ol>
<li>好奇 or 喜欢折腾的程序员</li>
<li>想深入了解 ORM 的程序员</li>
</ol>
<p>本文将解决你以下的疑惑：</p>
<ol>
<li>能不能不用 ORM?</li>
<li>ORM 为什么在某些场景下会胜于写 SQL</li>
<li>不同的 ORM 实现机制会带来什么差异？</li>
</ol>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>新工作的技术栈是以 Flask 为主，SQLAlchemy 是 许多玩 Flask 的人的标配。好，文档读起来，笔记搞起来。</p>
<blockquote>
<p>所以，本文记录的是 Django ORM</p>
</blockquote>
<p>逃。</p>
<p>这篇文章也是我对比 SqlAlchemy 以及 DjangoORM 的产物</p>
<h2 id="0x01-如何快速上手"><a href="#0x01-如何快速上手" class="headerlink" title="0x01 如何快速上手"></a>0x01 如何快速上手</h2><p>Django 世界里面，Django 的文档每次刷都会有新的发现。</p>
<h2 id="0x02-DjangoORM-的基本功能"><a href="#0x02-DjangoORM-的基本功能" class="headerlink" title="0x02 DjangoORM 的基本功能"></a>0x02 DjangoORM 的基本功能</h2><h3 id="2-1-模型定义-Model"><a href="#2-1-模型定义-Model" class="headerlink" title="2.1 模型定义 Model"></a>2.1 模型定义 Model</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Musician(models.Model):</span><br><span class="line">    first_name &#x3D; models.CharField(max_length&#x3D;50) # Field</span><br><span class="line">    last_name &#x3D; models.CharField(max_length&#x3D;50)</span><br><span class="line">    instrument &#x3D; models.CharField(max_length&#x3D;100)</span><br><span class="line"></span><br><span class="line">class Album(models.Model):</span><br><span class="line">    artist &#x3D; models.ForeignKey(Musician, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;100)</span><br><span class="line">    release_date &#x3D; models.DateField()</span><br><span class="line">    num_stars &#x3D; models.IntegerField()</span><br><span class="line"></span><br><span class="line">    class Meta: # Model Meta</span><br><span class="line">        order_with_respect_to &#x3D; &#39;question&#39;</span><br></pre></td></tr></table></figure>

<p>可以看出，包含如下的部分：</p>
<ol>
<li>Model 与 Model 内部的 Meta</li>
<li>Field 与 Field 内部的 Options</li>
<li>Model 与 Model 之间的关系</li>
<li>其他，比如索引</li>
</ol>
<h4 id="Models-与-Meta"><a href="#Models-与-Meta" class="headerlink" title="Models 与 Meta"></a>Models 与 Meta</h4><blockquote>
<p>DjangoORM 是 ActivityRecord 模式的一种实现，在该模式下，Model 与 session 耦合。</p>
</blockquote>
<h4 id="Field-与-Field-Options"><a href="#Field-与-Field-Options" class="headerlink" title="Field 与 Field Options"></a>Field 与 Field Options</h4><h5 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h5><ul>
<li>AutoField</li>
<li>BigAutoField</li>
<li>BigIntegerField</li>
<li>BinaryField</li>
<li>BooleanField</li>
<li>CharField</li>
<li>DateField</li>
<li>DateTimeField</li>
<li>DecimalField</li>
<li>DurationField</li>
<li>EmailField</li>
<li>FileField</li>
<li>FileField and FieldFile</li>
<li>FilePathField</li>
<li>FloatField</li>
<li>ImageField</li>
<li>IntegerField</li>
<li>GenericIPAddressField</li>
<li>NullBooleanField</li>
<li>PositiveIntegerField</li>
<li>PositiveSmallIntegerField</li>
<li>SlugField</li>
<li>SmallIntegerField</li>
<li>TextField</li>
<li>TimeField</li>
<li>URLField</li>
<li>UUIDField</li>
</ul>
<p>虽然有这么多东东，其实常用的如下</p>
<ul>
<li>BigIntegerField</li>
<li>BooleanField</li>
<li>CharField</li>
<li>DateField</li>
<li>DateTimeField</li>
<li>DecimalField</li>
<li>IntegerField</li>
<li>TextField</li>
<li>TimeField</li>
</ul>
<p>有的字段属于那种，有也可以，没有也可以的。</p>
<p>FileField 之类的 往往现在都被 CDN 取代</p>
<h5 id="Field-Options"><a href="#Field-Options" class="headerlink" title="Field Options"></a>Field Options</h5><ul>
<li>null</li>
<li>blank</li>
<li>choices<ul>
<li>p.shirt_size</li>
<li>p.get_shirt_size_display()</li>
</ul>
</li>
<li>db_column</li>
<li>db_index</li>
<li>db_tablespace</li>
<li>default</li>
<li>editable</li>
<li>error_messages</li>
<li>help_text</li>
<li>primary_key</li>
<li>unique</li>
<li>unique_for_date</li>
<li>unique_for_month</li>
<li>unique_for_year</li>
<li>verbose_name</li>
<li>validators</li>
</ul>
<p>如此可见，Django 的 ORM 比起 SQLAlchemy 做了不少应用层的校验，一些 help_text</p>
<h4 id="Relationship"><a href="#Relationship" class="headerlink" title="Relationship"></a>Relationship</h4><p>表和表之间的关系</p>
<ol>
<li>A 表和 B 表 一对多 / 多对一</li>
<li>A 表和 B 表 一对一 （特殊的一对多）</li>
<li>A 表和 B 表 简单多对多 （借助中间的 Mapping 表进行映射）</li>
<li>A 表和 B 表 复杂多对多</li>
<li>A 表和 B 表 一对多</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Manufacturer(models.Model):</span><br><span class="line">    # ...</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Car(models.Model):</span><br><span class="line">    manufacturer &#x3D; models.ForeignKey(Manufacturer, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    # ...</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Topping(models.Model):</span><br><span class="line">    # ...</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Pizza(models.Model):</span><br><span class="line">    # ...</span><br><span class="line">    toppings &#x3D; models.ManyToManyField(Topping)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Person(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;128)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">class Group(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;128)</span><br><span class="line">    members &#x3D; models.ManyToManyField(Person, through&#x3D;&#39;Membership&#39;)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">class Membership(models.Model):</span><br><span class="line">    person &#x3D; models.ForeignKey(Person, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    group &#x3D; models.ForeignKey(Group, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    date_joined &#x3D; models.DateField()</span><br><span class="line">    invite_reason &#x3D; models.CharField(max_length&#x3D;64)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Models across files</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">objects</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Models 重写方法</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Models 继承</span><br><span class="line">https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;en&#x2F;2.0&#x2F;topics&#x2F;db&#x2F;models&#x2F;#model-inheritance</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组织代码 - 以及应对循环引用</span><br></pre></td></tr></table></figure>

<h3 id="2-2-QuerySet"><a href="#2-2-QuerySet" class="headerlink" title="2.2 QuerySet"></a>2.2 QuerySet</h3><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c &#x3D; Child(name&#x3D;&quot;苏轼&quot;)</span><br><span class="line">c.save()</span><br><span class="line">p &#x3D; Parent(name&#x3D;&quot;苏辙&quot;)</span><br><span class="line">p.best_child &#x3D; c</span><br><span class="line">p.children.add([c,c2,c3,c4])</span><br><span class="line">p.save()</span><br></pre></td></tr></table></figure>

<h4 id="Retrieve"><a href="#Retrieve" class="headerlink" title="Retrieve"></a>Retrieve</h4><p>过滤</p>
<p>filter(**kwargs)<br>exclude(**kwargs)<br>.all()</p>
<h5 id="跨关系（跨表）查询"><a href="#跨关系（跨表）查询" class="headerlink" title="跨关系（跨表）查询"></a>跨关系（跨表）查询</h5><p>Blog.objects.filter(entry__headline__contains=’Lennon’)</p>
<p><a href="https://docs.djangoproject.com/en/2.0/topics/db/queries/#lookups-that-span-relationships">https://docs.djangoproject.com/en/2.0/topics/db/queries/#lookups-that-span-relationships</a></p>
<p><a href="https://docs.djangoproject.com/en/2.0/topics/db/queries/#spanning-multi-valued-relationships">https://docs.djangoproject.com/en/2.0/topics/db/queries/#spanning-multi-valued-relationships</a></p>
<h5 id="prefetch-related-amp-amp-select-related"><a href="#prefetch-related-amp-amp-select-related" class="headerlink" title="prefetch_related &amp;&amp; select_related"></a>prefetch_related &amp;&amp; select_related</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select_related</span><br><span class="line"></span><br><span class="line">生成 join 的 SQL, 可以用来减少 N+1 , 不过仅仅支持一对多，和一对一</span><br><span class="line"></span><br><span class="line">prefetch_related</span><br></pre></td></tr></table></figure>

<h5 id="Limit-Offset-分页"><a href="#Limit-Offset-分页" class="headerlink" title="Limit / Offset / 分页"></a>Limit / Offset / 分页</h5><p>Blog.objects.filter(entry__headline__contains=’Lennon’)[30:20]</p>
<h5 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h5><p>query = query.filter(**kwargs)<br>query = query.exclude(**kwargs)</p>
<h5 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h5><p>Django 里面最强大的就是其 Q 表达式了</p>
<p>Q(question__startswith=’Who’) | Q(question__startswith=’What’)</p>
<p>Poll.objects.get(<br>    Q(question__startswith=’Who’),<br>    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))<br>)</p>
<p>这个表达式甚至可以嵌套超级深从而完成一个比较深的跨表查询。</p>
<blockquote>
<p>并且，这种 API 查询反而在写前端 API 的时候，可以传入 question__startswith 这类参数，从而直接完成一组搜索。</p>
</blockquote>
<p>Q / F</p>
<h5 id="执行查询"><a href="#执行查询" class="headerlink" title="执行查询"></a>执行查询</h5><p>需要注意的的是，SQLAlchemy 必须显式执行查询，而 Django 不一定。</p>
<p><a href="https://docs.djangoproject.com/en/2.0/ref/models/querysets/#when-querysets-are-evaluated">https://docs.djangoproject.com/en/2.0/ref/models/querysets/#when-querysets-are-evaluated</a></p>
<p>在 Django 内部实现的时候，一个 queryset 创建 / 过滤 / 切片 / 传送，<strong>除非这个 queryset 被 evaluated 了</strong>, 否则不会做数据库的操作。</p>
<ul>
<li>iteration</li>
<li>Slicing</li>
<li>Pickling/Caching</li>
<li>repr</li>
<li>len</li>
<li>list</li>
<li>bool</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all()</span><br><span class="line">first()</span><br><span class="line">last()</span><br><span class="line">exist()</span><br></pre></td></tr></table></figure>

<h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><ul>
<li>pk</li>
<li>model</li>
</ul>
<h5 id="复制-实例"><a href="#复制-实例" class="headerlink" title="复制 实例"></a>复制 实例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blog &#x3D; Blog(name&#x3D;&#39;My blog&#39;, tagline&#x3D;&#39;Blogging is easy&#39;)</span><br><span class="line">blog.save() # blog.pk &#x3D;&#x3D; 1</span><br><span class="line"></span><br><span class="line">blog.pk &#x3D; None</span><br><span class="line">blog.save() # blog.pk &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line"># 但这个并不拷贝外键？???</span><br><span class="line">https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;en&#x2F;2.0&#x2F;topics&#x2F;db&#x2F;queries&#x2F;#copying-model-instances</span><br></pre></td></tr></table></figure>

<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认查询的是所有字段，但我希望查询部分字段</span><br><span class="line"># TODO: 阿萨德</span><br><span class="line"># Distinct</span><br><span class="line"># OrderBy</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h5><p><a href="https://docs.djangoproject.com/en/2.0/topics/db/queries/#caching-and-querysets">https://docs.djangoproject.com/en/2.0/topics/db/queries/#caching-and-querysets</a></p>
<h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><p>单个 object 更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blog.title &#x3D; &quot;大宝天天见&quot;</span><br><span class="line">blog.save()</span><br></pre></td></tr></table></figure>

<p>批量更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query.update(headline&#x3D;F(&#39;blog__name&#39;))</span><br></pre></td></tr></table></figure>

<p>一对多的更新（类似于 Set 操作）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add(obj1, obj2, ...)</span><br><span class="line">create(**kwargs)</span><br><span class="line">remove(obj1, obj2, ...)</span><br><span class="line">clear()</span><br><span class="line">set(objs)</span><br></pre></td></tr></table></figure>

<h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><h5 id="ForeignKey"><a href="#ForeignKey" class="headerlink" title="ForeignKey"></a>ForeignKey</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Car(models.Model):</span><br><span class="line">    manufacturer &#x3D; models.ForeignKey(</span><br><span class="line">        &#39;production.Manufacturer&#39;, # 用来解决循环 circular import</span><br><span class="line">        on_delete&#x3D;models.CASCADE,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>on_delete 的情况</p>
<ul>
<li>PROTECT 阻止</li>
<li>CASCADE 应用层的级联删除</li>
<li>SET_NULL 应用层的级联 SET_NULL</li>
<li>SET_DEFAULT</li>
<li>DO_NOTHING</li>
<li>SET() 一个 callback</li>
</ul>
<h4 id="聚集查询"><a href="#聚集查询" class="headerlink" title="聚集查询"></a>聚集查询</h4><p><a href="https://docs.djangoproject.com/en/2.0/topics/db/aggregation/">https://docs.djangoproject.com/en/2.0/topics/db/aggregation/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Book.objects.all().aggregate(Max(&#39;price&#39;))</span><br><span class="line">Book.objects.aggregate(price_diff&#x3D;Max(&#39;price&#39;, output_field&#x3D;FloatField()) - Avg(&#39;price&#39;))</span><br><span class="line">Book.objects.annotate(num_authors&#x3D;Count(&#39;authors&#39;))</span><br><span class="line">Book.objects.annotate(num_authors&#x3D;Count(&#39;authors&#39;)).aggregate(Avg(&#39;num_authors&#39;)) # &#123;&#39;num_authors__avg&#39;: 1.66&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h4><p><a href="https://docs.djangoproject.com/en/2.0/topics/db/search/">https://docs.djangoproject.com/en/2.0/topics/db/search/</a></p>
<h4 id="Window-Function"><a href="#Window-Function" class="headerlink" title="Window Function"></a>Window Function</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Option.objects.annotate(</span><br><span class="line">		rank_num&#x3D;Window(</span><br><span class="line">				expression&#x3D;Rank(),</span><br><span class="line">				partition_by&#x3D;F(&quot;vote_id&quot;),</span><br><span class="line">				order_by&#x3D;[F(&quot;current_vote_count&quot;).desc(), F(&quot;id&quot;).desc()],</span><br><span class="line">		),</span><br><span class="line">		lag_vote_num&#x3D;Window(</span><br><span class="line">				expression&#x3D;Lag(&quot;current_vote_count&quot;),</span><br><span class="line">				partition_by&#x3D;F(&quot;vote_id&quot;),</span><br><span class="line">				order_by&#x3D;[F(&quot;current_vote_count&quot;).desc(), F(&quot;id&quot;).desc()],</span><br><span class="line">		),</span><br><span class="line">)</span><br><span class="line">.filter(vote&#x3D;obj.vote)</span><br><span class="line">.order_by(&quot;-current_vote_count&quot;, &quot;id&quot;)</span><br><span class="line">.values(&quot;id&quot;, &quot;rank_num&quot;, &quot;current_vote_count&quot;, &quot;lag_vote_num&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-Model-Instances"><a href="#2-2-Model-Instances" class="headerlink" title="2.2 Model Instances"></a>2.2 Model Instances</h3><p><a href="https://docs.djangoproject.com/en/2.0/ref/models/instances/">https://docs.djangoproject.com/en/2.0/ref/models/instances/</a></p>
<h3 id="2-3-模型实例"><a href="#2-3-模型实例" class="headerlink" title="2.3 模型实例"></a>2.3 模型实例</h3><h3 id="2-4-迁移机制"><a href="#2-4-迁移机制" class="headerlink" title="2.4 迁移机制"></a>2.4 迁移机制</h3><ol>
<li>加 INSTALLED_APPS</li>
</ol>
<h2 id="0x03-Django-ORM-的高级功能"><a href="#0x03-Django-ORM-的高级功能" class="headerlink" title="0x03 Django ORM 的高级功能"></a>0x03 Django ORM 的高级功能</h2><h3 id="maneger"><a href="#maneger" class="headerlink" title="maneger"></a>maneger</h3><p><a href="https://docs.djangoproject.com/en/2.0/topics/db/managers/">https://docs.djangoproject.com/en/2.0/topics/db/managers/</a></p>
<h3 id="raw-sql"><a href="#raw-sql" class="headerlink" title="raw sql"></a>raw sql</h3><p><a href="https://docs.djangoproject.com/en/2.0/topics/db/sql/">https://docs.djangoproject.com/en/2.0/topics/db/sql/</a></p>
<h4 id="database-fuction"><a href="#database-fuction" class="headerlink" title="database-fuction"></a>database-fuction</h4><p><a href="https://docs.djangoproject.com/en/2.0/ref/models/database-functions/">https://docs.djangoproject.com/en/2.0/ref/models/database-functions/</a></p>
<h2 id="0x04-Database-Access-Optimization"><a href="#0x04-Database-Access-Optimization" class="headerlink" title="0x04 Database Access Optimization"></a>0x04 Database Access Optimization</h2><h3 id="4-1-使用连接池"><a href="#4-1-使用连接池" class="headerlink" title="4.1 使用连接池"></a>4.1 使用连接池</h3><p>连接池是一种永远在线模型的实现</p>
<p>连接池：驱动程序类型</p>
<p>连接池：代理类型</p>
<h3 id="4-2-减少对-MySQL-的访问"><a href="#4-2-减少对-MySQL-的访问" class="headerlink" title="4.2 减少对 MySQL 的访问"></a>4.2 减少对 MySQL 的访问</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from pg_stat_activity where pid &lt;&gt; pg_backend_pid() and usename &#x3D; current_user;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from pg_stat_activity where pid &lt;&gt; pg_backend_pid() and usename &#x3D; current_user;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Profile-First"><a href="#Profile-First" class="headerlink" title="Profile First"></a>Profile First</h3><ol>
<li>django-extentions</li>
<li>django-debug-toolbar</li>
</ol>
<p>手动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">queryset.explain</span><br><span class="line"></span><br><span class="line">from django.db import connection</span><br><span class="line">connection.queries</span><br><span class="line"></span><br><span class="line">from django.db import reset_queries</span><br><span class="line">reset_queries()</span><br></pre></td></tr></table></figure>

<h2 id="0x05-Django-ORM-Under-The-Hood"><a href="#0x05-Django-ORM-Under-The-Hood" class="headerlink" title="0x05 Django ORM Under The Hood"></a>0x05 Django ORM Under The Hood</h2><h3 id="理解-QuerySet"><a href="#理解-QuerySet" class="headerlink" title="理解 QuerySet"></a>理解 QuerySet</h3><ul>
<li>querysets-are-lazy when-querysets-are-evaluated<ul>
<li>Iteration</li>
<li>Slicing</li>
<li>Pickling/Caching</li>
<li>len</li>
<li>repr</li>
<li>list</li>
<li>bool</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj &#x3D;&#x3D; nobj # obj.id &#x3D;&#x3D; nobj.id</span><br></pre></td></tr></table></figure>

<ul>
<li>caching-and-querysets</li>
</ul>
<h3 id="理解-cached-attributes"><a href="#理解-cached-attributes" class="headerlink" title="理解 cached attributes"></a>理解 cached attributes</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; entry &#x3D; Entry.objects.get(id&#x3D;1)</span><br><span class="line">&gt;&gt;&gt; entry.blog   # Blog object is retrieved at this point</span><br><span class="line">&gt;&gt;&gt; entry.blog   # cached version, no DB access</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; entry &#x3D; Entry.objects.get(id&#x3D;1)</span><br><span class="line">&gt;&gt;&gt; entry.authors.all()   # query performed</span><br><span class="line">&gt;&gt;&gt; entry.authors.all()   # query performed again</span><br></pre></td></tr></table></figure>

<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-03-09</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCon 2018 之 Django 专题与 未来的包管理工具 pipenv</title>
    <url>/2018/05/16/PyConDjango/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>PyCon 2018 有很多精彩的演讲，今天的文章里，挑出 Django 的几篇演讲大致讲讲。</p>
<blockquote>
<p>注意：为什么是大致讲讲呢？因为即便是你看了我的这篇文章，依然需要多下点功夫自己去看演讲，自己去查资料，自己去消化。我的这篇文章只不过是我看演讲查资料慢慢消化过程中的产物而已。</p>
</blockquote>
<h2 id="0x01-演讲-1-Taking-Django-Async"><a href="#0x01-演讲-1-Taking-Django-Async" class="headerlink" title="0x01 演讲 1 - Taking Django Async"></a>0x01 演讲 1 - Taking Django Async</h2><p>本演讲其实就是为了推广 Django 的新库。django-channels</p>
<p>这个库从 2015 年首发，现在已经经过了三年的进程。应该算是相对成熟了。</p>
<p>这个库有什么不走寻常路的地方吗？答案是有的：</p>
<ol>
<li>使得 Django 增加了异步协议，比如说 WebSocket 协议</li>
<li>使得 Django 可运行后台任务。</li>
</ol>
<p>作为 v2 版本的核心开发，作者必然是要吐槽一下 v1 版本，然后推荐一下 v2 版本。</p>
<p>v1 版本的架构设计是这样的。</p>
<p>核心开发给出了这样的评价：</p>
<ol>
<li>在 Python2.7 的时候，就只能这么搞了。</li>
<li>需要维护的东西太多</li>
<li>没有 asyncio support</li>
<li>搬砖时候一不小心容易砸到脚</li>
</ol>
<blockquote>
<p>TODO : 补充一些其他的缺点</p>
</blockquote>
<p>异步与同步接口耦合</p>
<p>作者认为此并非长久之计。</p>
<p>v2 时候，</p>
<p>重写 75% 的代码</p>
<p>异步与同步接口分离</p>
<p>这么设计的话，需要解决接下来的一个问题，同步转异步，异步转同步。</p>
<p>比如，我访问 view, 实际上是 async 转 sync, 然后才能调用 django 相关的方法，接着返回响应内容的时候，我还需要 sync 转 async.<br>再比如，我使用 websocket, 访问一条数据，但 ORM 是 sync 的方法，我还是要 async 转 sync 再转 async</p>
<p>这个 async 和 sync 的相互转换应该怎么做呢？</p>
<p>于是，两个适配方法就诞生了：</p>
<ul>
<li>sync_to_async : 接收一个 async 的 function, 使之 awaitable, 然后使之在后台线程里运行。</li>
<li>async_to_sync : 接收一个 awaitable 的 coroutine , 使之转化成一个同步的 function, 该 function 暂停你调用的当前的线程，跳转到包含 eventloop 的主线程执行完毕，然后跳转回来。</li>
</ul>
<p><a href="https://www.aeracode.org/2018/02/19/python-async-simplified/">https://www.aeracode.org/2018/02/19/python-async-simplified/</a></p>
<h3 id="WSGI-如何运行-async"><a href="#WSGI-如何运行-async" class="headerlink" title="WSGI 如何运行 async"></a>WSGI 如何运行 async</h3><h3 id="ASGI-如何运行-A"><a href="#ASGI-如何运行-A" class="headerlink" title="ASGI 如何运行 A"></a>ASGI 如何运行 A</h3><h3 id="这对-Django-意味着什么？"><a href="#这对-Django-意味着什么？" class="headerlink" title="这对 Django 意味着什么？"></a>这对 Django 意味着什么？</h3><h3 id="如何保持兼容性"><a href="#如何保持兼容性" class="headerlink" title="如何保持兼容性"></a>如何保持兼容性</h3><h2 id="0x02-演讲-2-Beyond-Django-Basic"><a href="#0x02-演讲-2-Beyond-Django-Basic" class="headerlink" title="0x02 演讲 2 - Beyond Django Basic"></a>0x02 演讲 2 - Beyond Django Basic</h2><p>作为一名有一定经验的 Django 开发者，用快进的方式看完了这个演讲。毕竟，我已经不是 Django 新手了。</p>
<blockquote>
<p>毕竟这篇演讲只是给那些学完 tutorial 的人</p>
</blockquote>
<p>想深入了解 Django, 多刷几遍文档比什么都好。</p>
<p>嗯，就不介绍了。</p>
<h2 id="0x03-演讲-3-Introduction-to-TDD-with-Django-amp-amp-Intermediate-testing-with-Django"><a href="#0x03-演讲-3-Introduction-to-TDD-with-Django-amp-amp-Intermediate-testing-with-Django" class="headerlink" title="0x03 演讲 3 - Introduction to TDD with Django &amp;&amp; Intermediate testing with Django"></a>0x03 演讲 3 - Introduction to TDD with Django &amp;&amp; Intermediate testing with Django</h2><p>本演讲主要内容是 TDD 测试和 Mock 的技巧。</p>
<p>建议熟手直接看演讲者的书吧，本视频本人仅仅匆匆倍速看了一遍，估计并没有超出他的书的范围。</p>
<p>简单介绍了以下内容</p>
<ul>
<li>单元测试和功能性测试</li>
<li>通过 Selenium browser 进行自动化测试</li>
<li>unittest 标准库</li>
<li>Django models, views and templates</li>
<li>测试前后端代码</li>
<li>基于测试的重构</li>
<li>TDD workflow</li>
</ul>
<p>地址如下</p>
<p><a href="https://www.obeythetestinggoat.com/book/praise.harry.html">https://www.obeythetestinggoat.com/book/praise.harry.html</a></p>
<p>说说个人对测试和 TDD 测试的基本态度，我觉得测试是好事，适当的测试是可以提升代码质量和程序稳定性的。</p>
<p>说测试会降低开发速度的，八成是没有善用测试。如果测试拖慢了你的开发速度，只能说明没有进行合适的测试，比如对一些无关紧要的功能进行测试。</p>
<p>但，这篇演讲和配套资料很好，不过有些美中不足。 这里基本上都还在用 Django 的 MTV 这一套。</p>
<blockquote>
<p>我反正是不用这一套了。这个年头流行 SPA 呀。</p>
</blockquote>
<p>所以，我们这篇演讲指的关注的内容就变成如下内容了。</p>
<ul>
<li>单元测试和功能性测试</li>
<li>unittest 标准库</li>
<li>Django models</li>
<li>基于测试的重构</li>
<li>TDD workflow</li>
</ul>
<p>而且，对于 API 的测试，现在基本上流行 POSTMAN</p>
<p>用 POSTMAN 的优点就在于可以把参数缓存下来下次接着用。有个小技巧就是从 chrome 拷贝一下 curl 到 postman 中。非常好用。</p>
<p>既然流行 SPA, 那么本次有没有介绍开 API 的利器呢？</p>
<h2 id="0x04-演讲-4-API-Driven-Django"><a href="#0x04-演讲-4-API-Driven-Django" class="headerlink" title="0x04 演讲 4 - API-Driven Django"></a>0x04 演讲 4 - API-Driven Django</h2><p>嗯，Django + django-rest-framework 实在是开 WebAPI 的神器。</p>
<p>这篇演讲，算是普及了一下常识。并没有想象当中的深入。</p>
<p>想用 Django 和 DjangoRestFramework 搞事情的，可以过来看我这篇文章。</p>
<p><a href="https://zhuanlan.zhihu.com/p/33903527">https://zhuanlan.zhihu.com/p/33903527</a></p>
<blockquote>
<p>需要注意的是，本次 PyCon 中有很多人已经用上了 pipenv 了。</p>
</blockquote>
<h2 id="0x05-演讲-5-pipenv-未来的-Python-包管理工具"><a href="#0x05-演讲-5-pipenv-未来的-Python-包管理工具" class="headerlink" title="0x05 演讲 5 - pipenv 未来的 Python 包管理工具"></a>0x05 演讲 5 - pipenv 未来的 Python 包管理工具</h2><p>Kenneth Reitz 出品，必属精品。</p>
<h3 id="Python-打包历史"><a href="#Python-打包历史" class="headerlink" title="Python 打包历史"></a>Python 打包历史</h3><p>刚开始，我们是这样安装包的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;pypi.python.org&#x2F;packages&#x2F;alsdasdl&#x2F;requests.tar.gz | tar zxf</span><br><span class="line">cd requests&#x2F;</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<p>这个问题初看起来不是问题，但是随着你安装程序的增多就知道有多么痛苦了。</p>
<ol>
<li>有的依赖库依赖别的库你怎么解决？比如 pandas 需要安装 numpy</li>
<li>有的依赖库依赖 c 库怎么办？比如 LXML</li>
<li>在 python2.6.5 下，如果我需要安装两个不同版本的 Django 开发不同的软件怎么办？难道只能动态复制文件到 site-packages 里面？</li>
</ol>
<p>后来，我们是这样安装包的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easy_install requests</span><br></pre></td></tr></table></figure>

<p>我们可以直接从 pypi 进行安装了。但尼玛，为什么 easy_install 安装很 easy, 但是没有 easy_uninstall?</p>
<p>好，2010 年后，我们继续前进：</p>
<ul>
<li>可以通过 pip 替代 easy_install 了。</li>
<li>可以通过 virtualenv 管理项目的依赖库了。虽然说，还是不能像 ruby gem 一样同时把多个版本的的软件装在同一个系统里。</li>
<li>可以通过 requirements 锁依赖了。</li>
</ul>
<p>但，其他编程语言社区分别出现了如下的包管理工具：</p>
<ul>
<li>node -&gt; yarn &amp;&amp; npm , 有 lockfile</li>
<li>php -&gt; composer , 有 lockfile</li>
<li>rust -&gt; cargo , 有 lockfile</li>
<li>ruby -&gt; bundler , 有 lockfile</li>
</ul>
<p>而生命苦短一方居然</p>
<ul>
<li>python -&gt; pip &amp;&amp; virtualenv/venv , 无 lockfile</li>
</ul>
<blockquote>
<p>PS: Python3.3 之后，默认可以直接使用 venv 模块，不需要再安装 virtualenv 了。但还是需要手动，并且用起来比较反直觉。</p>
</blockquote>
<p>关于 requirements.txt</p>
<ul>
<li>如果你使用 pip freeze 来形成这个文件，则不直观，完全看不出来哪个依赖库依赖哪个依赖。</li>
<li>如果你直接手动指定你所需要的库，比如 flask 的话，似乎又有些太直观了。</li>
</ul>
<p>如果能有一个东西，既可以表示 freeze 的结果 (what you want)，又可以表示你需要的库 (what you need). 就好了。</p>
<blockquote>
<p>这当然可以考虑用两份 requirements 来解决。先安装 what you need 用来开发，然后 freeze 为 what you want 去部署。</p>
</blockquote>
<p>当然，铺垫了这么多 K 神肯定是来介绍他的 pipenv 的。</p>
<p>比如说，我想查看，本项目的依赖库，直接 pipenv graph</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">coverage&#x3D;&#x3D;4.5.1</span><br><span class="line">fabric&#x3D;&#x3D;2.0.1</span><br><span class="line">  - cryptography [required: &gt;&#x3D;1.1, installed: 2.2.2]</span><br><span class="line">    - asn1crypto [required: &gt;&#x3D;0.21.0, installed: 0.24.0]</span><br><span class="line">    - cffi [required: &gt;&#x3D;1.7, installed: 1.11.5]</span><br><span class="line">      - pycparser [required: Any, installed: 2.18]</span><br><span class="line">    - idna [required: &gt;&#x3D;2.1, installed: 2.6]</span><br><span class="line">    - six [required: &gt;&#x3D;1.4.1, installed: 1.11.0]</span><br><span class="line">  - invoke [required: &lt;2.0,&gt;&#x3D;1.0, installed: 1.0.0]</span><br><span class="line">  - paramiko [required: &gt;&#x3D;2.4, installed: 2.4.1]</span><br><span class="line">    - bcrypt [required: &gt;&#x3D;3.1.3, installed: 3.1.4]</span><br><span class="line">      - cffi [required: &gt;&#x3D;1.1, installed: 1.11.5]</span><br><span class="line">        - pycparser [required: Any, installed: 2.18]</span><br><span class="line">      - six [required: &gt;&#x3D;1.4.1, installed: 1.11.0]</span><br><span class="line">    - cryptography [required: &gt;&#x3D;1.5, installed: 2.2.2]</span><br><span class="line">      - asn1crypto [required: &gt;&#x3D;0.21.0, installed: 0.24.0]</span><br><span class="line">      - cffi [required: &gt;&#x3D;1.7, installed: 1.11.5]</span><br><span class="line">        - pycparser [required: Any, installed: 2.18]</span><br><span class="line">      - idna [required: &gt;&#x3D;2.1, installed: 2.6]</span><br><span class="line">      - six [required: &gt;&#x3D;1.4.1, installed: 1.11.0]</span><br><span class="line">    - pyasn1 [required: &gt;&#x3D;0.1.7, installed: 0.4.2]</span><br><span class="line">    - pynacl [required: &gt;&#x3D;1.0.1, installed: 1.2.1]</span><br><span class="line">      - cffi [required: &gt;&#x3D;1.4.1, installed: 1.11.5]</span><br><span class="line">        - pycparser [required: Any, installed: 2.18]</span><br><span class="line">      - six [required: Any, installed: 1.11.0]</span><br><span class="line">flake8&#x3D;&#x3D;3.5.0</span><br><span class="line">  - mccabe [required: &gt;&#x3D;0.6.0,&lt;0.7.0, installed: 0.6.1]</span><br><span class="line">  - pycodestyle [required: &lt;2.4.0,&gt;&#x3D;2.0.0, installed: 2.3.1]</span><br><span class="line">  - pyflakes [required: &gt;&#x3D;1.5.0,&lt;1.7.0, installed: 1.6.0]</span><br><span class="line"># 其他省略</span><br></pre></td></tr></table></figure>

<p>如何尝鲜？我最近更新到了之前写的一个库（代码写的惨不忍赌，最近准备重构）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:twocucao&#x2F;YaPyLib.git</span><br><span class="line">cd YaPyLib&#x2F;</span><br><span class="line">brew install pipenv</span><br><span class="line">pipenv --three</span><br><span class="line">pipenv install --dev</span><br><span class="line">pipenv shell</span><br></pre></td></tr></table></figure>

<p>至于其他的功能，参考官网自己摸索吧。</p>
<blockquote>
<p>在用 npm 和 yarn 的时候，我有这么一个想法，希望 python 圈子里面能出一个类似于包管理工具。今年 2 月份的时候把自己的项目迁移过来，发现 pipenv 用起来很挺舒服的。</p>
</blockquote>
<blockquote>
<p>pipenv 是未来。火速用上吧。</p>
</blockquote>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-03-09</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 自动化工具 Fabric 支持 Python3 了</title>
    <url>/2018/05/22/Fabric2/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>当大家还在纠结 Python2 与 Python3 的时候，我其实早就入了 python3 的门了。</p>
<p>后来</p>
<ul>
<li><del>我总算学会了如何去爱。<del></li>
<li>我喜欢的工具陆陆续续支持了 Python3</li>
<li>Scrapy 支持了 Python3</li>
<li>Ansible 支持了 Python3</li>
</ul>
<p>只有 Fabric 这个工具，死撑着没有支持 Python3 的的迹象。</p>
<p>2018-05-08 的时候，Fabric 悄悄升级了 2.0 版本。</p>
<p>而就在前两天，我升级网站的时候，突然发现 fabric (1.14 版本） 不能用了。</p>
<p>查了一下版本，发现 fabric 更新到了 2.0 版本，支持了 python3.4</p>
<p>在发现这个问题之后，火速刷了一波官方文档，把手头 Fabric 1.14 版本的脚本做了一些升级。</p>
<h3 id="从-V1-到-V2"><a href="#从-V1-到-V2" class="headerlink" title="从 V1 到 V2"></a>从 V1 到 V2</h3><p>Fabric v2 基于 invoke 和 paramiko 两个库构建而成。</p>
<ul>
<li>invoke 库提供了 subprocess command execution 和 command-line</li>
<li>paramiko 提供了 ssh 协议实现</li>
</ul>
<p>在这两者的基础上，做了一些扩展。</p>
<p>甚至，如果你只用其中的本地功能，你都完全不需要使用 fabric, 直接用 invoke 即可。没错，我已经打算把我的本地脚本全部使用 invoke Python3 化了。</p>
<p>v1 版本和 v2 版本初步用起来，个人觉得 v1 用起来 API 更加符合直觉一些。</p>
<p>这东西怎么用呢？</p>
<p>我们先定义 fabfile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># fabfile.py</span><br><span class="line">from invoke import task</span><br><span class="line"></span><br><span class="line">def expand_path(c, path):</span><br><span class="line">    return &#39;&quot;$(echo %s)&quot;&#39; % path</span><br><span class="line"></span><br><span class="line">def exists(c, path):</span><br><span class="line">    cmd &#x3D; &#39;stat %s&#39; % expand_path(c, path)</span><br><span class="line">    return c.run(cmd, warn&#x3D;True, hide&#x3D;True).ok</span><br><span class="line"></span><br><span class="line">@task</span><br><span class="line">def deploy(c):</span><br><span class="line">    c.local(&quot;youcmd&quot;)</span><br><span class="line">    c.put()</span><br><span class="line">    c.get()</span><br><span class="line">    c.run()</span><br><span class="line">    c.run(&quot;sudo youcmd&quot;)</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">@task</span><br><span class="line">def other_stuff(c):</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<p>需要注意的是，invoke 里面默认的 replace_env 设置为了 False ,fabric 里面给 runner 设置了 replace_env 为 True , 这也就意味着默认情况下，执行 c.local 的时候会找不到自定义的环境变量，这意味着：</p>
<ol>
<li>你的 PATH 被重置了，这意味着你用 brew 安装的软件可能已经完全找不到了。</li>
<li>你的环境变量 LANG 并不一定是 en_US.UTF-8 了</li>
</ol>
<p>于是设置一下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ~&#x2F;.fabric.py</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line">run &#x3D; &#123;</span><br><span class="line">    &quot;replace_env&quot;: False</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我要部署的时候直接执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fab -H webserver01,webserver02,webserver03,webserver04 deploy</span><br></pre></td></tr></table></figure>

<p>到这里大家基本上看出来了，我并没有在文件中 import fabric 只是简单了配置了一个配置文件和执行一下 fab 命令。</p>
<p>这个 v2 版本的 fabric 相当于 invoke 的包装。但我们也可以显式的 import fabric 里面的东西进行更加进阶的操作。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCon 2018 之 pipenv -- 未来的 Python 依赖管理工具</title>
    <url>/2018/05/22/PipEnv/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>PyCon 2018 有很多精彩的演讲，今天的文章里，介绍一下 K 神的演讲 『Python 未来的包管理工具 pipenv』</p>
<p>Kenneth Reitz 出品，必属精品。</p>
<h3 id="Python-打包历史"><a href="#Python-打包历史" class="headerlink" title="Python 打包历史"></a>Python 打包历史</h3><p>刚开始的时候，我们是这样安装包的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;pypi.python.org&#x2F;packages&#x2F;alsdasdl&#x2F;requests.tar.gz | tar zxf</span><br><span class="line">cd requests&#x2F;</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<p>这个问题初看起来不是问题，但是随着你安装程序的增多就知道有多么痛苦了。</p>
<ol>
<li>有的依赖库依赖别的库你怎么解决？比如 pandas 需要安装 numpy</li>
<li>有的依赖库依赖 c 库怎么办？比如 LXML</li>
<li>在 python2.6.5 下，如果我需要安装两个不同版本的 Django 开发不同的软件怎么办？难道只能动态复制文件到 site-packages 里面？</li>
</ol>
<p>后来，我们是这样安装包的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easy_install requests</span><br></pre></td></tr></table></figure>

<p>我们可以直接从 pypi 进行安装了。但尼玛，为什么 easy_install 安装很 easy, 但是没有 easy_uninstall?</p>
<p>好，2010 年后，我们继续前进：</p>
<ul>
<li>可以通过 pip 替代 easy_install 了。</li>
<li>可以通过 virtualenv 管理项目的依赖库了。虽然说，还是不能像 ruby gem 一样同时把多个版本的的软件装在同一个系统里。</li>
<li>可以通过 requirements 锁依赖了。</li>
</ul>
<p>但，同期的其他编程语言社区分别出现了如下的包管理工具：</p>
<ul>
<li>node -&gt; yarn &amp;&amp; npm , 有 lockfile</li>
<li>php -&gt; composer , 有 lockfile</li>
<li>rust -&gt; cargo , 有 lockfile</li>
<li>ruby -&gt; bundler , 有 lockfile</li>
</ul>
<p>而我大 Python 居然没跟上潮流</p>
<ul>
<li>python -&gt; pip &amp;&amp; virtualenv/venv , 无 lockfile</li>
</ul>
<blockquote>
<p>PS: Python3.3 之后，默认可以直接使用 venv 模块，不需要再安装 virtualenv 了。但还是需要手动，并且用起来比较反直觉。</p>
</blockquote>
<p>关于 requirements.txt</p>
<ul>
<li>如果你使用 pip freeze 来形成这个文件，则不直观，完全看不出来哪个依赖库依赖哪个依赖。</li>
<li>如果你直接手动指定你所需要的库，比如 flask 的话，似乎又有些太直观了。</li>
</ul>
<p>如果能有一个东西，既可以表示 freeze 的结果 (what you want)，又可以表示你需要的库 (what you need). 就好了。</p>
<blockquote>
<p>这当然可以考虑用两份 requirements 来解决。先安装 what you need 用来开发，然后 freeze 为 what you want 去部署。</p>
</blockquote>
<p>当然，铺垫了这么多 K 神肯定是来介绍他的 pipenv 的。</p>
<p>比如说，我想查看，本项目的依赖库，直接 pipenv graph</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">coverage&#x3D;&#x3D;4.5.1</span><br><span class="line">fabric&#x3D;&#x3D;2.0.1</span><br><span class="line">  - cryptography [required: &gt;&#x3D;1.1, installed: 2.2.2]</span><br><span class="line">    - asn1crypto [required: &gt;&#x3D;0.21.0, installed: 0.24.0]</span><br><span class="line">    - cffi [required: &gt;&#x3D;1.7, installed: 1.11.5]</span><br><span class="line">      - pycparser [required: Any, installed: 2.18]</span><br><span class="line">    - idna [required: &gt;&#x3D;2.1, installed: 2.6]</span><br><span class="line">    - six [required: &gt;&#x3D;1.4.1, installed: 1.11.0]</span><br><span class="line">  - invoke [required: &lt;2.0,&gt;&#x3D;1.0, installed: 1.0.0]</span><br><span class="line">  - paramiko [required: &gt;&#x3D;2.4, installed: 2.4.1]</span><br><span class="line">    - bcrypt [required: &gt;&#x3D;3.1.3, installed: 3.1.4]</span><br><span class="line">      - cffi [required: &gt;&#x3D;1.1, installed: 1.11.5]</span><br><span class="line">        - pycparser [required: Any, installed: 2.18]</span><br><span class="line">      - six [required: &gt;&#x3D;1.4.1, installed: 1.11.0]</span><br><span class="line">    - cryptography [required: &gt;&#x3D;1.5, installed: 2.2.2]</span><br><span class="line">      - asn1crypto [required: &gt;&#x3D;0.21.0, installed: 0.24.0]</span><br><span class="line">      - cffi [required: &gt;&#x3D;1.7, installed: 1.11.5]</span><br><span class="line">        - pycparser [required: Any, installed: 2.18]</span><br><span class="line">      - idna [required: &gt;&#x3D;2.1, installed: 2.6]</span><br><span class="line">      - six [required: &gt;&#x3D;1.4.1, installed: 1.11.0]</span><br><span class="line">    - pyasn1 [required: &gt;&#x3D;0.1.7, installed: 0.4.2]</span><br><span class="line">    - pynacl [required: &gt;&#x3D;1.0.1, installed: 1.2.1]</span><br><span class="line">      - cffi [required: &gt;&#x3D;1.4.1, installed: 1.11.5]</span><br><span class="line">        - pycparser [required: Any, installed: 2.18]</span><br><span class="line">      - six [required: Any, installed: 1.11.0]</span><br><span class="line">flake8&#x3D;&#x3D;3.5.0</span><br><span class="line">  - mccabe [required: &gt;&#x3D;0.6.0,&lt;0.7.0, installed: 0.6.1]</span><br><span class="line">  - pycodestyle [required: &lt;2.4.0,&gt;&#x3D;2.0.0, installed: 2.3.1]</span><br><span class="line">  - pyflakes [required: &gt;&#x3D;1.5.0,&lt;1.7.0, installed: 1.6.0]</span><br><span class="line"># 其他省略</span><br></pre></td></tr></table></figure>

<p>如何尝鲜？我最近更新到了之前写的一个库（代码写的惨不忍赌，最近准备重构，勿喷）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:twocucao&#x2F;YaPyLib.git</span><br><span class="line">cd YaPyLib&#x2F;</span><br><span class="line">brew install pipenv</span><br><span class="line">pipenv --three</span><br><span class="line">pipenv install --dev</span><br><span class="line">pipenv shell</span><br></pre></td></tr></table></figure>

<p>记住几个命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pipenv --venv # 查看 venv 位置</span><br><span class="line">pipenv --python 3.6.5</span><br><span class="line">exit 退出 pipenv shell</span><br></pre></td></tr></table></figure>

<p>至于其他的功能，参考官网自己摸索吧。</p>
<h3 id="FAQ-环节"><a href="#FAQ-环节" class="headerlink" title="FAQ 环节"></a>FAQ 环节</h3><p>FAQ 环节有一个问题非常有趣，应该把 lockfile 放在 git 仓库里面吗？</p>
<p>k 神是这么回答的 yes。 这个问题很久之前就在 issue 上回答过了</p>
<p><a href="https://github.com/pypa/pipenv/issues/598">https://github.com/pypa/pipenv/issues/598</a></p>
<p>我刚开始觉得不提交会好一些，后来觉得 track 一下也无妨。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote>
<p>在用 npm 和 yarn 的时候，我有这么一个想法，希望 python 圈子里面能出一个类似于包管理工具。今年 2 月份的时候把自己的项目迁移过来，发现 pipenv 用起来很挺舒服的。</p>
</blockquote>
<blockquote>
<p>pipenv 是未来。火速用上吧。</p>
</blockquote>
<blockquote>
<p>觉得有趣就点个赞或者关注下呗。</p>
</blockquote>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>CPython 源码初步阅读笔记</title>
    <url>/2018/06/06/CPython/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>先挖坑，以后有机会填</p>
<p>├── Grammar # 语法<br>├── Include # C 语言头文件，如果需要自定义模块扩展 Python, 也需要这块。<br>├── Modules # C 语言编写的模块，对速度要求高，比如 random<br>├── Objects # 内建对象 包含整数，list,dict 等。<br>├── Parser # Scanner 和 parser<br>├── Python # 各种 Python 共享库<br>├── Lib # Python 自带的所有标准库<br>├── Doc # 文档<br>├── Tools # 一些 Python 程序，方便扩展 Python<br>├── Misc # 不清楚放哪，就放这里好了<br>├── PC # Windows 编译姿势<br>├── PCbuild # Windows 编译姿势<br>├── Mac # Mac 上编译姿势<br>├── Programs<br>├── README.rst<br>├── aclocal.m4<br>├── config.guess<br>├── config.sub<br>├── configure<br>├── configure.ac<br>├── install-sh<br>├── m4<br>├── pyconfig.h.in<br>├── setup.py<br>├── LICENSE<br>├── Makefile.pre.in</p>
<h2 id="Ch01-Python-对象初探"><a href="#Ch01-Python-对象初探" class="headerlink" title="Ch01 Python 对象初探"></a>Ch01 Python 对象初探</h2><p>一切都是对象</p>
<p>类型对象</p>
<ul>
<li>内置对象：int / string / dict</li>
<li>自定义对象：class A</li>
</ul>
<p>实例对象</p>
<h3 id="1-1-Python-内的对象"><a href="#1-1-Python-内的对象" class="headerlink" title="1.1 Python 内的对象"></a>1.1 Python 内的对象</h3><p>Python 里的对象就是 C 中结构体在堆上申请的一块内存。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>CPython</tag>
      </tags>
  </entry>
  <entry>
    <title>Synology 群晖 NAS 入门指北</title>
    <url>/2018/06/10/SynologyNas/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>百度云的人工智障总是误删我的文件，于是开始寻找其他存储方案。决定入手一台 NAS.</p>
<h3 id="组装机-品牌机"><a href="#组装机-品牌机" class="headerlink" title="组装机 / 品牌机"></a>组装机 / 品牌机</h3><p>视具体情况，笔者缺乏足够的精力去折腾，如果精力足够，我还是很倾向于自己组装一台 nas 的。不过，现在年纪大了，还是老老实实买个品牌的 NAS 好了，折腾大抵是年轻人的事情。</p>
<p>为啥买群晖？因为看到很多喜欢折腾的人都安装黑群晖，所以直接买了个白群晖。</p>
<h3 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▼ 0x00 前言 : section</span><br><span class="line">    组装机 &#x2F; 品牌机 : section</span><br><span class="line">  ▼ 0x01 安装 &#x2F; 配置 : section</span><br><span class="line">      STEP-0 设备 : section</span><br><span class="line">      STEP-1 组装 : section</span><br><span class="line">      STEP-2 组网 : section</span><br><span class="line">      STEP-3 安装系统 : section</span><br><span class="line">  ▼ 0x02 一些私人化的需求 : section</span><br><span class="line">      2.1 内网 NAS 使用 : section</span><br><span class="line">      2.2 外网 NAS 使用 : section</span><br><span class="line">    ▼ 2.3 与百度云结合 : section</span><br><span class="line">        如何同步数据 : section</span><br><span class="line">      2.3 Time Machine : section</span><br><span class="line">    0xEE 结论 : section</span><br></pre></td></tr></table></figure>

<h2 id="0x01-安装-配置"><a href="#0x01-安装-配置" class="headerlink" title="0x01 安装 / 配置"></a>0x01 安装 / 配置</h2><h3 id="STEP-0-设备"><a href="#STEP-0-设备" class="headerlink" title="STEP-0 设备"></a>STEP-0 设备</h3><ul>
<li>路由器一台</li>
<li>网线一根</li>
<li>Synology 一台，笔者使用的是 DS218j 2 盘位 NAS （这款家用基本上够用了）</li>
<li>硬盘两个，推荐 WD 的红盘或者希捷的狼盘。</li>
</ul>
<h3 id="STEP-1-组装"><a href="#STEP-1-组装" class="headerlink" title="STEP-1 组装"></a>STEP-1 组装</h3><p>把硬盘安装在 nas 里需要三个步骤</p>
<ol>
<li>打开 nas 外壳</li>
<li>把硬盘塞进去</li>
<li>把盒子盖上</li>
</ol>
<h3 id="STEP-2-组网"><a href="#STEP-2-组网" class="headerlink" title="STEP-2 组网"></a>STEP-2 组网</h3><ol>
<li>如果你的路由器可以直连宽带接口的话，则直接连接。</li>
<li>如果你的路由器上一级有个路由器的话，可以使用桥接模式，把这台路由器连到上一台路由器上。</li>
</ol>
<p>nas 建议直接用网线连接到路由器上。</p>
<p>那么，现在你的手机 / 笔记本 / 平板等等放到该局域网中。</p>
<blockquote>
<p>PS: 为什么需要这么做？因为所有环境放在一个局域网内的话，安全性和速度较好。</p>
</blockquote>
<h3 id="STEP-3-安装系统"><a href="#STEP-3-安装系统" class="headerlink" title="STEP-3 安装系统"></a>STEP-3 安装系统</h3><p>打开群晖机器开关，在同一局域网内的访问</p>
<p><a href="http://find.synology.com/">http://find.synology.com/</a></p>
<p>然后按照要求进行注册登陆</p>
<p>期间需要注册群晖的账号，以及本台机器的用户名和密码。</p>
<h2 id="0x02-一些私人化的需求"><a href="#0x02-一些私人化的需求" class="headerlink" title="0x02 一些私人化的需求"></a>0x02 一些私人化的需求</h2><h3 id="2-1-内网-NAS-使用"><a href="#2-1-内网-NAS-使用" class="headerlink" title="2.1 内网 NAS 使用"></a>2.1 内网 NAS 使用</h3><p>笔者使用的是 Mac 电脑，在 Finder 中直接链接服务器，输入 smb://mynas 即可访问。剩下的操作基本上和本地磁盘使用起来没有什么大的差别。</p>
<p>对于手机和平板，安装群晖对应的 Drive 即可。</p>
<h3 id="2-2-外网-NAS-使用"><a href="#2-2-外网-NAS-使用" class="headerlink" title="2.2 外网 NAS 使用"></a>2.2 外网 NAS 使用</h3><p>外网可以直接使用群晖的账号登录群晖的官网，接着控制这台群晖的机器进行下载。但速度不够。</p>
<p>使用下来感觉效果并不好。建议阅读下一章和百度云配合使用。</p>
<h3 id="2-3-与百度云结合"><a href="#2-3-与百度云结合" class="headerlink" title="2.3 与百度云结合"></a>2.3 与百度云结合</h3><p>百度云这个东西让人又爱又恨。</p>
<ul>
<li>爱的是，容量不错，部分热门资源的下载速度也可。</li>
<li>恨的是，老是莫名其妙删掉我的文件。冷门资源那下载速度真的是….</li>
</ul>
<p>而现在，现在我的文件就分为两种：</p>
<ul>
<li>一种是合规的不可丢失的文件</li>
<li>一种是合规的可丢失的文件</li>
</ul>
<p>像我这样贯彻社会主义核心价值观的人，所有文件都是合法合规的。接受文件的审查倒也能接受，但人工智障老是误删我的合法文件这尼玛给我工作生活带来困扰啊。</p>
<p>所以，</p>
<ul>
<li>对于丢失零容忍的文件可以考虑放在 Nas 中。</li>
<li>对于丢失可容忍的文件可以考虑放在百度云中。</li>
<li>对于日常使用的文档可以放在百度云中。</li>
</ul>
<h4 id="如何同步数据"><a href="#如何同步数据" class="headerlink" title="如何同步数据"></a>如何同步数据</h4><p>鉴于百度云开放了应用接口，群晖的 Nas 也可以实现百度云同步数据到 Nas 上。</p>
<p>安装 CloudSync 选择第三方供应商。百度云，完成授权。</p>
<p>设置双向同步到 DMS 的某个文件夹下。比如，笔者同步百度云的文件到本地 DSM /CloudDrive/BaiduPan/ 即完成最基本的设置了。</p>
<p><strong>如何同步本地数据到云端呢？</strong></p>
<p>然后随便复制一个文件到该文件夹下，然后在百度云的 Web 端的『我的应用数据 /Cloud Sync 』 文件夹下就可以看到资源了。</p>
<p><strong>那么，如何同步云端的数据到本地呢？</strong></p>
<p>把云端的数据（文件 / 文件夹）拖动到 『我的应用数据 /Cloud Sync 』里即可。</p>
<p>像一些非私密性的文件，扔百度云就好了。</p>
<p>这个 Nas 就相当于一个远程的拥有高容量的弱鸡服务器，可以用来跑跑一些下载任务之类。</p>
<h3 id="2-3-Time-Machine"><a href="#2-3-Time-Machine" class="headerlink" title="2.3 Time Machine"></a>2.3 Time Machine</h3><p>Nas 另一个吸引我的地方就是可以 Time Machine 进行备份了。步骤大致如下。</p>
<ol>
<li>『共享文件夹』里面新建文件夹 Time Machine</li>
<li>『文件服务』中开启 SMB/AFP 服务，在高级设置中启用 Bonjour , 启用 SMB/AFP 的 TimeMachine 播送，指定为 Time Machine 文件夹</li>
<li>『用户管理』里新建用户 TimeMachine, 容量限制一下，建议 1TB 即可。</li>
<li>打开 Mac 电脑，选择磁盘，然后开始备份。</li>
</ol>
<p>PS: 但我这边初次备份 TM 的时候，需要备份 300+GB 的文件，速度确实堪忧。和直接外接接口连接硬盘完全没法比。但慢慢备份下来，其实速度也能接受。</p>
<h2 id="0xEE-结论"><a href="#0xEE-结论" class="headerlink" title="0xEE 结论"></a>0xEE 结论</h2><p>NAS 解决了我的几个痛点。</p>
<ul>
<li>跨平台共享文件</li>
<li>文件集中化管理</li>
<li>硬盘容量大</li>
<li>私密性较好</li>
<li>不会有人工智障来删我东西</li>
<li>速度在可接受范围内。我在用 LR 修图的时候只是稍微比本地的慢一点。</li>
</ul>
<p>不过似乎还有一些其他的功能可以继续发掘一下。以后有机会再分享一下。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Nas</tag>
      </tags>
  </entry>
  <entry>
    <title>记一个有趣的 Python ZipInfo 的副作用</title>
    <url>/2018/06/29/PythonBugWithZipfile/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>昨天修了一个有趣的 BUG，顺手分享出来。</p>
<h3 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▼ 0x00 前言 : section</span><br><span class="line">    本文目录 : section</span><br><span class="line">▼ 0x01 场景 1 - 空文件打包问题 : section</span><br><span class="line">▼ 0x02 场景 2 - zipinfo 带来的一个副作用 : section</span><br><span class="line">▼ 0x03 处理 BUG 的一种姿势 : section</span><br><span class="line">▼ 0xEE 结论 : section</span><br></pre></td></tr></table></figure>

<h2 id="0x01-场景-1-空文件打包问题"><a href="#0x01-场景-1-空文件打包问题" class="headerlink" title="0x01 场景 1 - 空文件打包问题"></a>0x01 场景 1 - 空文件打包问题</h2><p>原始场景是这样的，在打包文件夹的时候，一切正常，但如果打包空文件夹的时候，就出问题了。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/6/29/164492147450b039?w=756&h=256&f=png&s=37953"></p>
<p>精简了这一段代码，当打包空文件夹的时候，大致逻辑如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">zfile &#x3D; zipfile.ZipFile(&quot;tmp.zip&quot;,&#39;w&#39;)</span><br><span class="line"># 递归打包所有子文件</span><br><span class="line">zfile.close()</span><br></pre></td></tr></table></figure>

<p>这段代码很明显是造了一个空 zip 文件。</p>
<p>这个和我要的效果还不太一样。我要的是这个 zip 文件包含空目录 tmp/ 好，调整了一下代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">zfile &#x3D; zipfile.ZipFile(&quot;tmp.zip&quot;,&#39;w&#39;)</span><br><span class="line">zif &#x3D; zipfile.ZipInfo(&quot;tmp&#x2F;&quot;)</span><br><span class="line">zfile.writestr(zif,&quot;&quot;)</span><br><span class="line"># 递归打包所有子文件</span><br><span class="line">zfile.close()</span><br></pre></td></tr></table></figure>

<p>嗯，现在下载成功了。解压缩也正常。</p>
<h2 id="0x02-场景-2-zipinfo-带来的一个副作用"><a href="#0x02-场景-2-zipinfo-带来的一个副作用" class="headerlink" title="0x02 场景 2 - zipinfo 带来的一个副作用"></a>0x02 场景 2 - zipinfo 带来的一个副作用</h2><p>显然，如果上面的东西皆大欢喜的结束了，我就没必要写这篇文章了。</p>
<p>问题来了，当我递归打包子文件的时候，文件会莫名其妙多了一个文件夹出来。</p>
<p>比如我打包文件夹 tmp，tmp 的内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ tree tmp</span><br><span class="line">tmp</span><br><span class="line">├── test.md</span><br><span class="line"></span><br><span class="line">1 file</span><br></pre></td></tr></table></figure>

<p>打包完毕多出了一个 tmp 文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ tree tmp</span><br><span class="line">tmp</span><br><span class="line">├── test.md</span><br><span class="line">└── tmp</span><br><span class="line"></span><br><span class="line">1 directory, 1 file</span><br></pre></td></tr></table></figure>

<p>这种多出一个 tmp 的文件夹就是按照我这种方式使用 zipinfo 副作用。</p>
<p>WTF，怀着老鹿蹒跚的内心，打开了《伤心太平洋》：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一波还未平息</span><br><span class="line">一波又来侵袭</span><br><span class="line">茫茫人海 狂风暴雨</span><br></pre></td></tr></table></figure>

<p>用代码复现一波场景</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 先造一个测试文件夹</span><br><span class="line">mkdir &#x2F;tmp&#x2F;test_folder&#x2F;</span><br><span class="line">touch &#x2F;tmp&#x2F;test_folder&#x2F;test.md</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import zipfile</span><br><span class="line">file_path &#x3D; &quot;&#x2F;tmp&#x2F;test_folder&#x2F;test.md&quot;</span><br><span class="line">rel_name &#x3D; &quot;test.md&quot;</span><br><span class="line">zfile &#x3D; zipfile.ZipFile(&quot;tmp.zip&quot;,&#39;w&#39;)</span><br><span class="line">zif &#x3D; zipfile.ZipInfo(&quot;tmp&#x2F;&quot;)</span><br><span class="line">zfile.writestr(zif,&quot;&quot;)</span><br><span class="line">zfile.write(file_path, rel_name)</span><br><span class="line">zfile.close()</span><br></pre></td></tr></table></figure>

<h2 id="0x03-处理-BUG-的一种姿势"><a href="#0x03-处理-BUG-的一种姿势" class="headerlink" title="0x03 处理 BUG 的一种姿势"></a>0x03 处理 BUG 的一种姿势</h2><ol>
<li>场景能否描述出来 - 描述不出来的就没法准确定位问题</li>
<li>能否复现 - 复现不出来的 BUG 最难调试</li>
<li>业务问题还是技术问题 - 业务问题可能要和别人打交道，技术问题可能要多翻翻文档之类的。</li>
<li>时间是否来得及 - 如果时间来的及，就想办法弄懂，填坑；时间来不及就想办法规避，绕坑。</li>
</ol>
<p>前三点自然不用说了，直接第四点，时间上还算充裕，</p>
<ol>
<li>我翻了半天 zipfile 模块，并没有理解这个 BUG 的出现原因。</li>
<li>好，退后一步是人生，用代码规避掉这个问题。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">if 是空文件夹：</span><br><span class="line">    zfile &#x3D; zipfile.ZipFile(&quot;tmp.zip&quot;,&#39;w&#39;)</span><br><span class="line">    zif &#x3D; zipfile.ZipInfo(&quot;tmp&#x2F;&quot;)</span><br><span class="line">else 不是空文件夹：</span><br><span class="line">    zfile.writestr(zif,&quot;&quot;)</span><br><span class="line">    zfile.write(file_path, rel_name)</span><br><span class="line">zfile.close()</span><br></pre></td></tr></table></figure>

<h2 id="0xEE-结论"><a href="#0xEE-结论" class="headerlink" title="0xEE 结论"></a>0xEE 结论</h2><p>其实处理大部分的 BUG 基本上就是这么个思路：</p>
<ul>
<li>往前一步是黄昏：打破沙锅问到底的去探究，填坑</li>
<li>退后一步是人生：没那么多时间搞明白细枝末节，用代码规避掉这个神奇 BUG，先让业务可以跑通，绕坑。</li>
</ul>
<p>最后，欢迎关注我的知乎专栏，咱们聊聊我所知道的 Python / NodeJS/ Mac / DevOps 全栈（干）工程师的一些有趣的技术</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/twocucao">MG 的编程小屋</a></li>
<li><a href="https://github.com/twocucao">MG 的 Github</a></li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Nas</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影入门指北</title>
    <url>/2018/07/10/PhotographyDevice/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><h3 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h3><h2 id="0x01-硬件选择"><a href="#0x01-硬件选择" class="headerlink" title="0x01 硬件选择"></a>0x01 硬件选择</h2><h3 id="机身"><a href="#机身" class="headerlink" title="机身"></a>机身</h3><p>a6000 是笔者的第一款相机，a6500 是第二款相机。</p>
<p>之所以这么选择，其实原因很简单 — 因为贫穷限制了我的设备。</p>
<p>如果觉得花在机身和镜头的钱可以在 3W-4W 左右，出门右转索尼 A7RM3 + 中高端镜头配置。</p>
<p>在预算不足的情况下，为什么是 A6000 和 A6500？</p>
<blockquote>
<p>A6000 基本上入门微单的性价比之王。</p>
</blockquote>
<p>所以，我刚入门的时候，选择的是 A6000，当然，如果站在现在的需求角度来说的话，肯定应该是一步到位，直接 A6500 合适（因为现在舍得花这个钱了，当时不舍得）。</p>
<p>当时选择 a6000</p>
<ol>
<li>具备足够使用的基本功能</li>
<li>对焦速度快</li>
<li>性价比高</li>
<li>WIFI/NFC 导图，Sony Play Memory 还是很实用的。</li>
</ol>
<p>当然，其实这些特点往往都会有个前提，即：</p>
<p>比如说对焦速度快，我实际想说的是，在这个价位下，对焦速度快。</p>
<p>机身往往代表的是机身性能和操作体验上的不同。也就是说，如果只是基本的拍照，比如说只拍人物小清新，A6500 和 A6000 都可以胜任。</p>
<p>我觉得有什么是 A6500 做得到但是 A6000 做不到的呢</p>
<p>但比如说，你拍运动场景或者是拍视频，A6000 的对焦速度明显就跟不上了。究其原因，无非是对焦点位数量少，机器处理性能也不足。究其本质经济原因，无非就是一个字 – 穷。<br>但比如说，你拍完照片相机需要写照片到 SD 卡中。这个过程对于 A6000 是同步的，也就是等待写入完毕才可以进行操作。但是对于 A6500 几乎算是异步的（我猜应该是图片渲染是同步，写入是异步，但由于渲染速度比较快，写入速度比较慢，所以将写入做成了异步）</p>
<p>我觉得有什么是 A6500 改善了我的拍照工作流，但是 A6000 没有改善我的工作流呢？</p>
<ul>
<li>更加流畅：机身性能摆在那</li>
<li>无脑的对焦：触屏对焦 + 加上更加强悍的追焦系统</li>
<li>更好的防抖：在不带三脚架的情况下，五轴防抖的功能可以减少我拍糊掉的几率，特别是光线不够好的情况下。可以让我在一些场景里不需要动用三脚架，轻装上阵。拥有更好的防抖时候可以在 M 档选择更慢的快门，弥补光线上的不足。</li>
</ul>
<p>笔者比较倾向于抓拍，这两点可以让笔者显著提升抓拍数量和质量，从而选出高质量照片。</p>
<p>摄影是一个综合性的技能，如果你的目的是拍出好看的照片，而不是尝试各种风格 / 场景。 笔者认为选一个超出预算的器材会让你的工作流更加顺畅一些，但并不是必须要换个。</p>
<ol>
<li>机身性能不足，防抖功能不足的情况下，可以通过预先在心里构思好拍摄。心里多做些推演工作，就好了。</li>
<li>光线亮度不够，一来可以通过提升周围环境的亮度来解决（打光，闪光灯加柔光罩之类），二来可以提升光圈大小，带上三脚架来提升曝光。三来比如你在夜景下，可以找选择一个比较好场景来拍。比如借助商场的灯完全可以拍个人像大片出来。天时地利人和就没得调整么？非要选个乌漆麻黑的伸手不见五指的拍夜景？</li>
</ol>
<p>虽然说，一般是越贵的机身越好。</p>
<p>但机身真的那么万能嘛：</p>
<ul>
<li>能解决烂手骚操作么？</li>
<li>能解决烂场景强行拍好片么？</li>
<li>能解决审美问题么？</li>
<li>能引导模特的摆姿么？</li>
<li>能解决外部光线么？</li>
<li>能解决构图么？</li>
<li>能解决后期不会调整么？</li>
</ul>
<p>帮助真的很有限。</p>
<h3 id="镜头"><a href="#镜头" class="headerlink" title="镜头"></a>镜头</h3><p>我入手了几款镜头，用下来觉得还行的镜头如下：</p>
<h4 id="适马-E-16"><a href="#适马-E-16" class="headerlink" title="适马 E 16"></a>适马 E 16</h4><ul>
<li>根本目标：夜拍</li>
<li>优点：画质好，光学防抖，夜景强行压 ISO</li>
</ul>
<h4 id="索尼-E-18135"><a href="#索尼-E-18135" class="headerlink" title="索尼 E 18135"></a>索尼 E 18135</h4><ul>
<li>根本目标：用于覆盖焦距</li>
<li>优点：画质好，光学防抖</li>
<li>使用状况： 带出</li>
</ul>
<h4 id="索尼-E-50-1-8"><a href="#索尼-E-50-1-8" class="headerlink" title="索尼 E 50 1.8"></a>索尼 E 50 1.8</h4><ul>
<li>根本目标：人像室外专用</li>
<li>优点：近中距离拍妹子好看拍妹子好看拍妹子好看</li>
<li>缺点：小室内拍摄距离比较不好控制。</li>
<li>使用状况： 带出</li>
</ul>
<h4 id="适马-E-30-1-4"><a href="#适马-E-30-1-4" class="headerlink" title="适马 E 30 1.4"></a>适马 E 30 1.4</h4><ul>
<li>根本目标：室内人像、室外人像纪实</li>
<li>优点：近距拍妹子好看拍妹子好看拍妹子好看</li>
<li>缺点：近中距内拍摄容易乱入路人甲。</li>
<li>使用状况： 带出</li>
</ul>
<h4 id="七巧匠-E-12-2-8"><a href="#七巧匠-E-12-2-8" class="headerlink" title="七巧匠 E 12 2.8"></a>七巧匠 E 12 2.8</h4><ul>
<li>根本目标：覆盖广角</li>
<li>优点：经济</li>
<li>使用状况： 带出</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 自带头 E 16-50	相对而言一般般	闲置（不过录像效果还是不错滴）</span><br><span class="line"># 索尼 E 55-210	远距离拍摄 &#x2F; 小动物	看情况（不过拍出来的画面比较肉）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="灯光"><a href="#灯光" class="headerlink" title="灯光"></a>灯光</h3><p>布光是摄影师必备技能之一</p>
<p>我入手了一款闪光灯 + 柔光罩，用于弥补某些暗场景下的光线不足的问题。毕竟笔者是业余爱好者，也懒得动用专业的设备了，太折腾。</p>
<p>光线过强的时候，也不是无解，比如阴凉地，透光物体遮挡（透光白色伞 / 镂空的帽子）</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>摄影包</li>
<li>充电器</li>
<li>存储卡</li>
<li>其他牌子的电池</li>
</ul>
<h2 id="0x02-摄影参数"><a href="#0x02-摄影参数" class="headerlink" title="0x02 摄影参数"></a>0x02 摄影参数</h2><p>曝光正常的参数</p>
<h3 id="曝光三要素"><a href="#曝光三要素" class="headerlink" title="曝光三要素"></a>曝光三要素</h3><h4 id="光圈"><a href="#光圈" class="headerlink" title="光圈"></a>光圈</h4><h5 id="如何影响照片"><a href="#如何影响照片" class="headerlink" title="如何影响照片"></a>如何影响照片</h5><p>通关孔的大小影响：<br>        - 进光量</p>
<h5 id="影响照片参数"><a href="#影响照片参数" class="headerlink" title="影响照片参数"></a>影响照片参数</h5><p>亮度<br>景深</p>
<h5 id="使用基本方法"><a href="#使用基本方法" class="headerlink" title="使用基本方法"></a>使用基本方法</h5><ol>
<li>大光圈</li>
</ol>
<ul>
<li>背景虚化</li>
<li>提升快门速度</li>
</ul>
<ol start="2">
<li>小光圈</li>
</ol>
<ul>
<li>整体清晰</li>
<li>降低快门速度</li>
</ul>
<h4 id="快门"><a href="#快门" class="headerlink" title="快门"></a>快门</h4><h5 id="如何影响照片-1"><a href="#如何影响照片-1" class="headerlink" title="如何影响照片"></a>如何影响照片</h5><p>进光时间</p>
<h5 id="影响照片参数-1"><a href="#影响照片参数-1" class="headerlink" title="影响照片参数"></a>影响照片参数</h5><h5 id="使用基本方法-1"><a href="#使用基本方法-1" class="headerlink" title="使用基本方法"></a>使用基本方法</h5><h4 id="感光度"><a href="#感光度" class="headerlink" title="感光度"></a>感光度</h4><h5 id="如何影响照片-2"><a href="#如何影响照片-2" class="headerlink" title="如何影响照片"></a>如何影响照片</h5><pre><code>CCD 感光敏感度</code></pre>
<h5 id="影响照片参数-2"><a href="#影响照片参数-2" class="headerlink" title="影响照片参数"></a>影响照片参数</h5><pre><code>1. 亮度
2. 噪点</code></pre>
<h5 id="使用基本方法-2"><a href="#使用基本方法-2" class="headerlink" title="使用基本方法"></a>使用基本方法</h5><pre><code>1. 通常情况下设置比较低
2. 除非是光圈和快门被限制</code></pre>
<h4 id="曝光三要素综合应用"><a href="#曝光三要素综合应用" class="headerlink" title="曝光三要素综合应用"></a>曝光三要素综合应用</h4><pre><code>1. 大光圈
2. 大长焦
3. 镜头离主体要近
4. 主体离背景要远</code></pre>
<h3 id="曝光模式"><a href="#曝光模式" class="headerlink" title="曝光模式"></a>曝光模式</h3><p>自动 / 手动控制曝光</p>
<ol>
<li>智能自动</li>
<li>P 档：光圈和快门由相机设置，但是 ISO/ 对焦区域 / 测光模式 （比如夜景，当然，可能需要三脚架）</li>
<li>A 档：快门由相机设置，光圈和 ISO 可以自己调节 （比如大光圈的人像，小光圈的风景）</li>
<li>S 档：快门和 ISO 由相机设置，快门 /ISO 由自己调节。（比如快速移动的物品 / 慢速快门拍尾灯拉丝）</li>
<li>M 档：手动档位，可以用于更加细腻的操作。</li>
</ol>
<h3 id="测光模式"><a href="#测光模式" class="headerlink" title="测光模式"></a>测光模式</h3><ol>
<li>多重测光 （多重测光的弊病在于如果整体较亮，而主体较暗，就容易拍不亮主体）</li>
<li>点测光 （适用于拍摄夕阳 / 逆光人像，缺点就是 ISO 的值会比较高）</li>
</ol>
<h3 id="曝光补偿"><a href="#曝光补偿" class="headerlink" title="曝光补偿"></a>曝光补偿</h3><p>笔者一般会用 LR 做一个简单的后期，所以用 RAW 作为图片格式。</p>
<p>RAW 格式要设好曝光参数，一定要曝光相对准确，因为 raw 里面的曝光参数受相机设置直接影响。曝光不准确，特别是曝光过度，希望通过 raw 里面调整，是很难做到曝光准确的画面层次的。</p>
<h2 id="0x03-拍清照片"><a href="#0x03-拍清照片" class="headerlink" title="0x03 拍清照片"></a>0x03 拍清照片</h2><h3 id="对焦错误"><a href="#对焦错误" class="headerlink" title="对焦错误"></a>对焦错误</h3><pre><code>1. 半按快门对焦
2. 对焦对偏了
    a. 拍人对焦不准 : 笑脸 / 人脸检测
    b. 拍静物 / 风景时对焦不准 : 自由点对焦
    c. 给自己打光
3. 对焦模式不对
    a. AF-S 单次自动对焦 - 静物
    b. AF-C 连续自动对焦 - 动物
    c. AF-A 智能自动对焦 - 对方可能动 / 可能不动</code></pre>
<h3 id="手抖了"><a href="#手抖了" class="headerlink" title="手抖了"></a>手抖了</h3><pre><code>1. 拍照姿势不对
2. 安全快门时间 = 1 / （焦距 * 1.5)
3. 光线比较暗导致快门低于 1/30 s</code></pre>
<h2 id="0x04-布光"><a href="#0x04-布光" class="headerlink" title="0x04 布光"></a>0x04 布光</h2><h2 id="0xEE-结论"><a href="#0xEE-结论" class="headerlink" title="0xEE 结论"></a>0xEE 结论</h2>]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>人像摄影指北</title>
    <url>/2018/07/17/Portrait/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><h3 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h3><h2 id="0x01-风格特点"><a href="#0x01-风格特点" class="headerlink" title="0x01 风格特点"></a>0x01 风格特点</h2><h3 id="小清新"><a href="#小清新" class="headerlink" title="小清新"></a>小清新</h3><ul>
<li>安静</li>
<li>温暖</li>
<li>舒适</li>
<li>平缓</li>
<li>清新</li>
<li>淡雅</li>
<li>自然</li>
<li>干净</li>
<li>随意</li>
<li>青春的小故事，小情绪</li>
</ul>
<h3 id="色调"><a href="#色调" class="headerlink" title="色调"></a>色调</h3><p>冷色系</p>
<p>蓝天<br>大海<br>白色窗纱</p>
<p>青色 / 蓝色 / 绿色</p>
<p>衣服：白衬衫<br>背景：白色窗纱<br>曝光补偿</p>
<h2 id="0x02-拍摄场景和服装搭配"><a href="#0x02-拍摄场景和服装搭配" class="headerlink" title="0x02 拍摄场景和服装搭配"></a>0x02 拍摄场景和服装搭配</h2><h2 id="0x03-器材与参数设置"><a href="#0x03-器材与参数设置" class="headerlink" title="0x03 器材与参数设置"></a>0x03 器材与参数设置</h2><h2 id="0x04-学会用光"><a href="#0x04-学会用光" class="headerlink" title="0x04 学会用光"></a>0x04 学会用光</h2><p>最佳时间：日出日落前后两小时。</p>
<h3 id="直射光"><a href="#直射光" class="headerlink" title="直射光"></a>直射光</h3><h4 id="顺光角度"><a href="#顺光角度" class="headerlink" title="顺光角度"></a>顺光角度</h4><p>优点：面部充分受光，皮肤细腻，光滑，水嫩。背景细节丰富，颜色亮丽。<br>缺点：面部扁平</p>
<h4 id="侧光角度"><a href="#侧光角度" class="headerlink" title="侧光角度"></a>侧光角度</h4><p>优点：五官非常有立体感<br>缺点：容易造成阴阳脸</p>
<p>PS: 白种人五官立体，高鼻梁，高眉骨，眼神深邃，立体感强，而黄种人一般面部比较平，一般需要借助侧面打光的的效果。</p>
<p>一般选择 30 度左右即可，看模特身材，要么拍摄对象偏向光源或者摄影师移动。</p>
<h4 id="逆光角度"><a href="#逆光角度" class="headerlink" title="逆光角度"></a>逆光角度</h4><p>优点：主体的轮廓光，以及画面中的光晕。</p>
<p>注意点：</p>
<ul>
<li>避免选择比较明亮的天空作为背景</li>
<li>如果正逆光太过明亮，则选择侧逆光，或者主体部分遮挡光晕</li>
<li>大黑脸的问题：设置相机曝光补偿 / 点测光。闪光灯，反光板，白色的墙面，书籍。</li>
</ul>
<h3 id="散射光"><a href="#散射光" class="headerlink" title="散射光"></a>散射光</h3><p>阴天，树荫</p>
<p>画面比较单调，人物缺乏立体感，可以通过增加主体的颜色鲜艳度或者加上背景的一些对比（但不要喧宾夺主）</p>
<h3 id="夜晚人造灯"><a href="#夜晚人造灯" class="headerlink" title="夜晚人造灯"></a>夜晚人造灯</h3><p>商店的微侧面灯光，加上后面的光斑</p>
<h3 id="室内光"><a href="#室内光" class="headerlink" title="室内光"></a>室内光</h3><ol>
<li>避免直射光。选择散射光。</li>
<li>跳闪，反光板</li>
</ol>
<h3 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h3><ol>
<li>让模特走动，然后观察光线，可以先拍一下，查看照片情况</li>
<li>偏色可以考虑调整白平衡</li>
<li>杂色过多可以调整</li>
<li>单光源的，可以考虑墙面 / 闪光灯塑造人瘦脸胖，或者直接暴力点，拿手或者其他东西遮挡。</li>
</ol>
<h2 id="0x05-摆姿技巧"><a href="#0x05-摆姿技巧" class="headerlink" title="0x05 摆姿技巧"></a>0x05 摆姿技巧</h2><h2 id="0x06-取景技巧"><a href="#0x06-取景技巧" class="headerlink" title="0x06 取景技巧"></a>0x06 取景技巧</h2><h3 id="跟着光线走"><a href="#跟着光线走" class="headerlink" title="跟着光线走"></a>跟着光线走</h3><p>逆光<br>局部光</p>
<h3 id="跟着背景走"><a href="#跟着背景走" class="headerlink" title="跟着背景走"></a>跟着背景走</h3><p>颜色单一的背景，墙面 / 卷帘门 / 复古色墙壁 / 橙色墙壁 / 蓝天 / 草坪<br>颜色单一 + 基本点缀的背景，在单一背景的基础上加上另一个单一颜色，对比强烈，但是又不喧宾夺主</p>
<h3 id="跟着线条走"><a href="#跟着线条走" class="headerlink" title="跟着线条走"></a>跟着线条走</h3><ul>
<li>栏杆 / 护栏<ul>
<li>模特坐 / 靠 / 趴</li>
</ul>
</li>
<li>台阶 / 窗台</li>
<li>两排树 / 过道 / 走廊</li>
</ul>
<h3 id="巧用前景遮挡物"><a href="#巧用前景遮挡物" class="headerlink" title="巧用前景遮挡物"></a>巧用前景遮挡物</h3><ul>
<li>虚化掉墙 / 栏杆 / 护栏之类的遮挡物可以引导视线</li>
</ul>
<h3 id="花卉绿植"><a href="#花卉绿植" class="headerlink" title="花卉绿植"></a>花卉绿植</h3><p>上下结构，也包括了构图<br>单簇，也包括了构图</p>
<h2 id="0x08-人像后期"><a href="#0x08-人像后期" class="headerlink" title="0x08 人像后期"></a>0x08 人像后期</h2><h3 id="磨皮"><a href="#磨皮" class="headerlink" title="磨皮"></a>磨皮</h3><p>磨皮包含：</p>
<p>去污<br>明度<br>饱和度<br>色相</p>
<h4 id="简易磨皮-HSL-清晰度"><a href="#简易磨皮-HSL-清晰度" class="headerlink" title="简易磨皮 HSL + 清晰度"></a>简易磨皮 HSL + 清晰度</h4><p>使用场景</p>
<p>具体操作</p>
<ol>
<li>降低清晰度 = 磨皮</li>
<li>提升 HSL 橙色 明度 = 提亮皮肤</li>
<li>降低 HSL 橙色 饱和度 = 皮肤更白</li>
<li>微调 HSL 橙色 色相 = 皮肤更粉或者黄一些</li>
<li>提亮 相机校准-蓝色-饱和度 = 让皮肤更加粉嫩通透</li>
</ol>
<h4 id="插件磨皮"><a href="#插件磨皮" class="headerlink" title="插件磨皮"></a>插件磨皮</h4><p>Portraiture</p>
<h4 id="高反差保留磨皮"><a href="#高反差保留磨皮" class="headerlink" title="高反差保留磨皮"></a>高反差保留磨皮</h4><p>高反差保留磨皮，通过通道计算，选出皮肤中脏点污点，然后曲线提亮。</p>
<h4 id="高低频磨皮"><a href="#高低频磨皮" class="headerlink" title="高低频磨皮"></a>高低频磨皮</h4><p>高底频 = 图层分为高频图层与低频图层，高频就是所谓的质感（头发，纹理，细节等）, 低频就是光影，也就是皮肤的明暗。在低频图层用插件磨皮或者污点修复，图层工具随意涂抹，也不会影响皮肤的纹路。</p>
<p>复制两个图层，命名为高频和低频。</p>
<ul>
<li>低频启用滤镜-模糊-高斯模糊，值 =6</li>
<li>高频启用图像-应用图像，图层 = 低频，混合 = 相加，缩放 =2</li>
<li>高频混合模式改为线性光，然后污点去除。</li>
</ul>
<h4 id="中性灰磨皮"><a href="#中性灰磨皮" class="headerlink" title="中性灰磨皮"></a>中性灰磨皮</h4><h4 id="双曲线磨皮"><a href="#双曲线磨皮" class="headerlink" title="双曲线磨皮"></a>双曲线磨皮</h4><h3 id="胶片风格-VSCO"><a href="#胶片风格-VSCO" class="headerlink" title="胶片风格 VSCO"></a>胶片风格 VSCO</h3><h4 id="Modern-Films"><a href="#Modern-Films" class="headerlink" title="Modern Films"></a>Modern Films</h4><p>Modern Films is an excellent all-around pack, emulating the look of contemporary, popular film stocks. Classic, clean, and universal, this collection is well-balanced and ideal for an array of settings, from wedding photography to editorial, and everything in between.</p>
<h4 id="Classic-Films"><a href="#Classic-Films" class="headerlink" title="Classic Films"></a>Classic Films</h4><p>Classic Films is a diverse pack of film emulations that recreates the look of many discontinued and expired film stocks. With a vintage-inspired and slightly gritty aesthetic, this collection is perfect for lifestyle, wedding, and portrait photography.</p>
<h4 id="Instant-Films"><a href="#Instant-Films" class="headerlink" title="Instant Films"></a>Instant Films</h4><p>Instant Films features digital emulations of beautiful tones and magical tints. Classic and nostalgic, this highly-stylized collection recreates the looks of traditional instant films.</p>
<h4 id="Slide-Films"><a href="#Slide-Films" class="headerlink" title="Slide Films"></a>Slide Films</h4><p>Slide Films features digital emulations of positive film — a slide film that produces a positive image when developed. With high contrasts and bold colors, this collection is ideal for travel, landscape, street, and fashion photography.</p>
<h4 id="Archetype-Films"><a href="#Archetype-Films" class="headerlink" title="Archetype Films"></a>Archetype Films</h4><p>Archetype Films is a collection of mass market, consumer film emulations from the golden era of analog. With familiar fade and grit aesthetics, VSCO Film 05 captures the nostalgia of old childhood photos, and is great for portraits, weddings, and lifestyle photography.</p>
<h4 id="Alternative-Process-Films"><a href="#Alternative-Process-Films" class="headerlink" title="Alternative Process Films"></a>Alternative Process Films</h4><p>Alternative Process Films is a well-balanced pack that includes a wide range of push and pull processed looks, which alter grain, contrast, and richness. It also includes cross processed looks, which are best suited for dramatic color effects and vibrancy. From subtle enhancements to bold stylistic editing, this collection is ideal for outdoor and lifestyle photography, modern portraiture, and sunwashed settings.</p>
<h4 id="Eclectic-Films"><a href="#Eclectic-Films" class="headerlink" title="Eclectic Films"></a>Eclectic Films</h4><p>Eclectic Films features a wide range of looks in our largest release to date, with 18 films and over 100 presets in total. The spectrum of this collection translates to versatility in use and includes muted, vivid, tungsten-balanced, and black and white films — all of which embody an elegant and modern aesthetic. This pack is ideal for most settings and subjects, particularly portraits, night photography, and architecture.</p>
<h3 id="小清新日系"><a href="#小清新日系" class="headerlink" title="小清新日系"></a>小清新日系</h3><h3 id="港系风格"><a href="#港系风格" class="headerlink" title="港系风格"></a>港系风格</h3><p>高对比，欠曝光，部分过曝光</p>
<p>图层 1 高斯模糊 screen 25% 复制一层 soften light 50%</p>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-07-17</strong> 初始化本文</li>
<li><strong>2018-09-17</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphQL CheetSheet</title>
    <url>/2018/02/10/GraphqlCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>不定期更新。</p>
<a id="more"></a>

<h2 id="0x01-开接口这件小事情"><a href="#0x01-开接口这件小事情" class="headerlink" title="0x01 开接口这件小事情"></a>0x01 开接口这件小事情</h2><p>开接口，究竟什么样的接口才是一个好接口？</p>
<ol>
<li>刚开始的时候，后台开接口都是比较随便，本着方便，快速的方式一个一个接口的开。</li>
<li>后来呢？觉得接口开出来没有最佳实践，所以有人提出 Restful 的开接口姿势。 Swagger, DjangorestFramework, 以及 Apistar 便是这种最佳实践的代表性项目</li>
<li>再后来呢？Facebook 又搞了套自己的开接口姿势叫做 GraphQL, graphene-python , graphene-js , apollo-client , apollo-server 便是这种最佳实践的代表性项目</li>
</ol>
<h3 id="开接口注意点"><a href="#开接口注意点" class="headerlink" title="开接口注意点"></a>开接口注意点</h3><ol>
<li>尽量做到代码即文档。</li>
<li>便于前端调试。</li>
<li>分页处理。</li>
<li>API 版本管理。</li>
<li>额外的语义。</li>
<li>校验。</li>
<li>权限。</li>
</ol>
<p>不管是 Restful 的实现，还是 GraphQL 的实现，在 1/2/5 上面做的非常优秀了。</p>
<p>拿 Restful 的实现 DjangoRestframework 来说，直接可以在 ApiView 的注释里面写 Markdown 语法，兼容 payload 和 form 表单调试。内置 Serializer 进行序列化和校验。</p>
<p>DRF 还是一个功能非常全面的框架。 PS: 如果你是不折腾的 Django 用户，DRF 绝对让你欲罢不能。</p>
<h3 id="开接口不能解决的问题"><a href="#开接口不能解决的问题" class="headerlink" title="开接口不能解决的问题"></a>开接口不能解决的问题</h3><blockquote>
<p>业务逻辑的沟通问题</p>
</blockquote>
<p>抛开前后端分离所带来的优点，前后端分离的一大问题就是，前后端人员的分离。</p>
<p>如果你的公司规模不是很大，开发的项目需要一定的背景知识，团队开发比较（经常）敏（调整）捷（需求）, 沟通上就会有些问题，</p>
<p>具体表现为，后端理解了需求，还需要和前端讲清楚，而刚讲清楚没几天，产品又跑过来说，这个业务我们需要调整一下。几次折腾下来，就会出现一个尴尬的局面。</p>
<p>前后端有的时候对业务理解出现来偏差。在以前不区分前后端的时候，一个东西到实现基本上一个人就可以 Cover 掉，只要这个人理解了业务逻辑，就行了。现在前后端分离，就要求前后端对需求的理解</p>
<p>如果需求不明确，就会出现如下情况，前端一脸懵逼的问后端与产品『眼前的黑不是黑，你说的白是什么白』</p>
<p>当然，这个不属于技术问题，只是提一下。</p>
<h2 id="0x02-GraphQL-相关概念"><a href="#0x02-GraphQL-相关概念" class="headerlink" title="0x02 GraphQL 相关概念"></a>0x02 GraphQL 相关概念</h2><h3 id="GraphQL-是什么？"><a href="#GraphQL-是什么？" class="headerlink" title="GraphQL 是什么？"></a>GraphQL 是什么？</h3><p>GraphQL 也不是什么革命性的产品，不过是一种新的开 Web 接口的方式罢了。</p>
<p>而请求接口提交的参数也变成了包含参数的一种查询语言。</p>
<p>官方宣传的 GraphQL 搞好了，只需如此：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Step1. 描述你的数据</span><br><span class="line"></span><br><span class="line">type Project &#123;</span><br><span class="line">  name: String</span><br><span class="line">  tagline: String</span><br><span class="line">  contributors: [User]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Step2. 请求所需数据。</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  project(name: &quot;GraphQL&quot;) &#123;</span><br><span class="line">    tagline</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Step3. 拿到所需数据。</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;project&quot;: &#123;</span><br><span class="line">    &quot;tagline&quot;: &quot;A query language for APIs&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>嗯，是不是和 SQL 看起来有点像？当然咯，都是查询语言 (QL) 嘛。</p>
<h3 id="GraphQL-好处"><a href="#GraphQL-好处" class="headerlink" title="GraphQL 好处"></a>GraphQL 好处</h3><p>GraphQL 的好处，自然是前端写起来就是一个字，爽。</p>
<p>比如我们使用 Github 的 API 做一个简单的查询</p>
<p>地址如下 <a href="https://developer.github.com/v4/explorer/">https://developer.github.com/v4/explorer/</a></p>
<p>查询如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  viewer &#123;</span><br><span class="line">    login</span><br><span class="line">    bio</span><br><span class="line">    repositories(first:10, orderBy : &#123; field: STARGAZERS, direction: DESC&#125;   ) &#123;</span><br><span class="line">      nodes &#123;</span><br><span class="line">        nameWithOwner</span><br><span class="line">        viewerHasStarred</span><br><span class="line">        watchers &#123;</span><br><span class="line">          totalCount</span><br><span class="line">        &#125;</span><br><span class="line">        stargazers &#123;</span><br><span class="line">          totalCount</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      totalCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;viewer&quot;: &#123;</span><br><span class="line">      &quot;login&quot;: &quot;twocucao&quot;,</span><br><span class="line">      &quot;bio&quot;: &quot;Pythonist In Shanghai.&quot;,</span><br><span class="line">      &quot;repositories&quot;: &#123;</span><br><span class="line">        &quot;nodes&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;nameWithOwner&quot;: &quot;twocucao&#x2F;danmu.fm&quot;,</span><br><span class="line">            &quot;viewerHasStarred&quot;: true,</span><br><span class="line">            &quot;watchers&quot;: &#123;</span><br><span class="line">              &quot;totalCount&quot;: 22</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;stargazers&quot;: &#123;</span><br><span class="line">              &quot;totalCount&quot;: 282</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;nameWithOwner&quot;: &quot;twocucao&#x2F;YaDjangoBlog&quot;,</span><br><span class="line">            &quot;viewerHasStarred&quot;: true,</span><br><span class="line">            &quot;watchers&quot;: &#123;</span><br><span class="line">              &quot;totalCount&quot;: 9</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;stargazers&quot;: &#123;</span><br><span class="line">              &quot;totalCount&quot;: 120</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;nameWithOwner&quot;: &quot;twocucao&#x2F;danmu&quot;,</span><br><span class="line">            &quot;viewerHasStarred&quot;: true,</span><br><span class="line">            &quot;watchers&quot;: &#123;</span><br><span class="line">              &quot;totalCount&quot;: 5</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;stargazers&quot;: &#123;</span><br><span class="line">              &quot;totalCount&quot;: 64</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;totalCount&quot;: 33</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你说，我还要看看这个 repo 的主要语言，那么增加一行查询即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  viewer &#123;</span><br><span class="line">    login</span><br><span class="line">    bio</span><br><span class="line">    repositories(first:3, orderBy : &#123; field: STARGAZERS, direction: DESC&#125;   ) &#123;</span><br><span class="line">      nodes &#123;</span><br><span class="line">        nameWithOwner</span><br><span class="line">        viewerHasStarred</span><br><span class="line">        languages(first: 3) &#123; # 在这里增加查询编程语言</span><br><span class="line">          nodes &#123;</span><br><span class="line">            name</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        watchers &#123;</span><br><span class="line">          totalCount</span><br><span class="line">        &#125;</span><br><span class="line">        stargazers &#123;</span><br><span class="line">          totalCount</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      totalCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>依照这个简单的查询，可以看出 GraphQL 的便捷之处。后端编写完毕之后，前端基本上就可以对着 Schemas 里面的 query 查询完毕了。</p>
<p>查询这么搞可以，增删改查之类的操作呢？GraphQL 里面还有 Mutation 可以帮你解决这个问题，在后端定义完 Mutation , 前端在 Mutation 里面可以直接传参。</p>
<p>就像这样。</p>
<h2 id="0x03-GraphQL-客户端怎么做？"><a href="#0x03-GraphQL-客户端怎么做？" class="headerlink" title="0x03 GraphQL 客户端怎么做？"></a>0x03 GraphQL 客户端怎么做？</h2><h2 id="0x04-GraphQL-Python-服务端怎么做？"><a href="#0x04-GraphQL-Python-服务端怎么做？" class="headerlink" title="0x04 GraphQL Python 服务端怎么做？"></a>0x04 GraphQL Python 服务端怎么做？</h2><h2 id="0x05-GraphQL-解决的痛点与坑"><a href="#0x05-GraphQL-解决的痛点与坑" class="headerlink" title="0x05 GraphQL 解决的痛点与坑"></a>0x05 GraphQL 解决的痛点与坑</h2><h2 id="0x06-其他思考点"><a href="#0x06-其他思考点" class="headerlink" title="0x06 其他思考点"></a>0x06 其他思考点</h2><ul>
<li>埋点</li>
</ul>
<h1 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h1><ul>
<li><a href="https://github.com/wsargent/docker-cheat-sheet">https://github.com/wsargent/docker-cheat-sheet</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-01-20</strong> 初始化本文</li>
</ul>
]]></content>
      <categories>
        <category>我的开源项目</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Docker</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Tone Color</title>
    <url>/2018/07/27/ToneColor/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>不定期更新。</p>
<a id="more"></a>

<h2 id="0x01-摄影与录像"><a href="#0x01-摄影与录像" class="headerlink" title="0x01 摄影与录像"></a>0x01 摄影与录像</h2><h2 id="0x02-接口"><a href="#0x02-接口" class="headerlink" title="0x02 接口"></a>0x02 接口</h2><h2 id="0x03-Sony-录像-Picture-Profile"><a href="#0x03-Sony-录像-Picture-Profile" class="headerlink" title="0x03 Sony 录像 Picture Profile"></a>0x03 Sony 录像 Picture Profile</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PP1: &quot;Movie&quot;</span><br><span class="line">PP2: &quot;Still&quot;</span><br><span class="line">PP3: &quot;Natural&quot;</span><br><span class="line">PP4: &quot;Faithful&quot;</span><br><span class="line">PP5: &quot;Cine1&quot;</span><br><span class="line">PP6: &quot;Cine2&quot;</span><br><span class="line">PP7: &quot;S-Log2&quot;</span><br><span class="line">PP8: &quot;S-Log3&quot; [S-Gamut3.Cine]</span><br><span class="line">PP9: &quot;S-Log3&quot; [S-Gamut3]</span><br></pre></td></tr></table></figure>

<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-07-27</strong> 初始化本文</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>Vlog</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目漫谈 2018 版</title>
    <url>/2018/08/01/VueProjectTalking/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前草草整理过一些 Vue 的小技巧，最近温习了一遍文档，重聊一遍。</p>
<p>鉴于 VueCLI 越做越臃肿，我最后还是选择了自己搭架子。</p>
<p><a href="https://github.com/twocucao/vue-starter-kit">https://github.com/twocucao/vue-starter-kit</a></p>
<h2 id="0x01-项目结构"><a href="#0x01-项目结构" class="headerlink" title="0x01 项目结构"></a>0x01 项目结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根文件</span></span><br><span class="line">public/ <span class="comment"># 部署文件</span></span><br><span class="line">src/ <span class="comment"># 源码</span></span><br><span class="line">.babelrc</span><br><span class="line">.editorconfig</span><br><span class="line">.eslintignore</span><br><span class="line">.eslintrc</span><br><span class="line">.gitignore</span><br><span class="line">.postcssrc.js</span><br><span class="line">LICENSE</span><br><span class="line">README.md</span><br><span class="line">jsconfig.json</span><br><span class="line">package-lock.json</span><br><span class="line">package.json</span><br><span class="line">webpack.common.js</span><br><span class="line">webpack.dev.js</span><br><span class="line">webpack.dll.js</span><br><span class="line">webpack.prod.js</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 src 文件夹下面</span></span><br><span class="line"></span><br><span class="line">api <span class="comment"># 相关的 Web API 定义</span></span><br><span class="line">assets <span class="comment"># 静态资源，对于已经压缩的，还是直接放在 Static 下面</span></span><br><span class="line">components <span class="comment"># 公用组件</span></span><br><span class="line">mixins <span class="comment"># mixin</span></span><br><span class="line">directives <span class="comment"># 定义指令，比如 v-loading</span></span><br><span class="line">pages <span class="comment"># 页面</span></span><br><span class="line">store <span class="comment"># Store</span></span><br><span class="line">App.vue <span class="comment"># CORE 组件</span></span><br><span class="line">consts.js <span class="comment">#定义常量名称</span></span><br><span class="line">index.js <span class="comment"># 用于初始化项目，注册组件等等</span></span><br><span class="line">routes.js <span class="comment"># 路由</span></span><br><span class="line">utils <span class="comment"># 工具方法</span></span><br></pre></td></tr></table></figure>

<p>值得一提的就是 index.js 应该要做的事情</p>
<ul>
<li>注册全局组件和过滤器</li>
<li>给 Vue 实例加戏，哦，说错了，给实例加一些全局性的方法，比如 $comfirm 等对话框 $verbose $warning 等日志</li>
<li>完成刷新界面之后的从 localStorage 的重新赋值</li>
<li>注册路由切换的时候的调用的各类方法</li>
</ul>
<h2 id="0x02-开发技巧"><a href="#0x02-开发技巧" class="headerlink" title="0x02 开发技巧"></a>0x02 开发技巧</h2><h3 id="1-登录，登录校验以及权限"><a href="#1-登录，登录校验以及权限" class="headerlink" title="1. 登录，登录校验以及权限"></a>1. 登录，登录校验以及权限</h3><p>通过路由的 meta 属性来区分</p>
<h3 id="8-日志管理"><a href="#8-日志管理" class="headerlink" title="8. 日志管理"></a>8. 日志管理</h3><p>我觉得日志管理也应该是比较重要的部分，不管是调试程序，还是用于检查用户浏览器这块的错误日志，甚至是埋点。</p>
<p>依据具体技术栈可以考虑上个 sentry 或者 ELK</p>
<h3 id="7-首屏-Loading"><a href="#7-首屏-Loading" class="headerlink" title="7. 首屏 Loading"></a>7. 首屏 Loading</h3><p>这个可以放在 index.html 里面</p>
<h3 id="4-路由管理与嵌套路由"><a href="#4-路由管理与嵌套路由" class="headerlink" title="4. 路由管理与嵌套路由"></a>4. 路由管理与嵌套路由</h3><p>路由管理</p>
<p>嵌套路由有什么优点？</p>
<ol>
<li>使得子路由里的页面可以复用父级路由的页面的组件</li>
<li>减少手动硬编码 meta 和 props 的代码量</li>
<li>便于定制面包屑组件</li>
<li>其他</li>
</ol>
<h2 id="0x03-构建技巧"><a href="#0x03-构建技巧" class="headerlink" title="0x03 构建技巧"></a>0x03 构建技巧</h2><h3 id="3-1-离线-IconFont"><a href="#3-1-离线-IconFont" class="headerlink" title="3.1 离线 IconFont"></a>3.1 离线 IconFont</h3><p>经常需要离线调试网页，顺手写了这个脚本。</p>
<p>之前在研究某个网站的反爬机制的时候发现时动态生成 iconfont, 然后通过 unicode 码来实现数字的显示，从而让爬虫小白无法爬取。研究了一下他们的 iconfont, 知道了 font-carrier, 然后调用 node 脚本打包字体文件，并在这个过程中自动生成对应的 iconfont.css</p>
<p>最后的结果就是，当我放一个文件到 svg 文件夹下面的时候，比如 bank.svg , 我执行一下脚本，生成对应的字体文件，在 html 里面编写脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;iconfont iconfont-bank&quot; &gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<p>然后对应图标就呈现出来了。</p>
<h3 id="3-2-Webpack-构建工具"><a href="#3-2-Webpack-构建工具" class="headerlink" title="3.2 Webpack 构建工具"></a>3.2 Webpack 构建工具</h3><p>日常开发用的是 VueCli, 配置还是非常人性化的。开箱即用。</p>
<h4 id="开发环境与部署环境"><a href="#开发环境与部署环境" class="headerlink" title="开发环境与部署环境"></a>开发环境与部署环境</h4><p>VueCLI 内置了变量的管理，你可以定义 config/dev.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">&#x27;&quot;development&quot;&#x27;</span>,</span><br><span class="line">  API_ROOT: <span class="string">&#x27;&quot;http://dev-data.twocucao.xyz&quot;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>其实，开发的环境用一组变量是不行的。比如，开发的人分为纯前端，纯后端，我这样的前后都会一些的人，每个对于环境的配置都是不太一样的。</p>
<ul>
<li>对于前端 Windowser 直接执行 npm run dev 对接到局域网服务器</li>
<li>对于单个人同时调试后端和前端的时候，一般要把 Web API 对应到本地的机器上。可是使用环境便来配置不同的 DEBUG_MODE=True npm run dev</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### DLL 打包</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">大约在半年前，开发过程中突然在使用 ECharts 后，仅仅不到 10M 大小的项目居然开发 build 的时间需要 5MIN, 打包出来的文件超级大。居然接近了 100 多 M</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">震惊之余，差点准备写一篇骗点击量的文章：**看完震惊了！！前端和后端男程序员都无法忍受的大小！**, 然后文章内就介绍 Webpack 打包文件居然没有避免重复引入依赖库导致打包文件太大提出抗议。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">回到主题，使用 npm run analyze 发现问题出现在 ECharts 上， 每一个图表组件都是依赖于 ECharts, 而每一个组件都包含了一个完整的 ECharts 库的大小。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">于是，我一边吐槽 webpack 考虑不周，另一方面寻找解决方案。最后找到了 DLL 方案</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这个方案的原理大致是：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 编写独立的脚本，把几个需要复用的库一个配置文件 (manifest.json), 以及打包库到一个 JS 文件中。</span></span><br><span class="line"><span class="string">- 然后从 index.html 引入这个 JS 文件。</span></span><br><span class="line"><span class="string">- 接着在 webpack 配置中使之每次引入一个库的时候，避免重复引入。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; 但这不应该是 Webpack 本身就应该做的吗？为嘛还要配置，还要不伦不类的生成一个配置文件和一个 JS 文件，再从 index.html 里面导入？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当然，Webpack 生态还是很丰富的，后来出来了一个 https://github.com/asfktz/autodll-webpack-plugin 尝试了之后。感觉很赞。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br></pre></td></tr></table></figure>
<p>可惜在 mac 上一切安好，Windows 上晴天霹雳，debug 了一下，发现是这个库的一个依赖库对 windows 的路径处理好像还有点小问题。而公司的前端小伙伴是 Windowser, 只好作罢。</p>
<p>Macer 可以先用试试，至于 Windowser, 那就去这个 ISSUE 下面催催作者吧… 哈哈哈</p>
<blockquote>
<p>update: 现在 windows 已经可以用了。</p>
</blockquote>
<h2 id="0x03-代码质量工程管理"><a href="#0x03-代码质量工程管理" class="headerlink" title="0x03 代码质量工程管理"></a>0x03 代码质量工程管理</h2><h3 id="1-语义化与可读性"><a href="#1-语义化与可读性" class="headerlink" title="1. 语义化与可读性"></a>1. 语义化与可读性</h3><h3 id="2-提取公共逻辑（通过-Service-Mixin-来）"><a href="#2-提取公共逻辑（通过-Service-Mixin-来）" class="headerlink" title="2. 提取公共逻辑（通过 Service, Mixin 来）"></a>2. 提取公共逻辑（通过 Service, Mixin 来）</h3><h3 id="3-CSS-管理"><a href="#3-CSS-管理" class="headerlink" title="3. CSS 管理"></a>3. CSS 管理</h3><p>在项目中，我采用 SCSS 来管理 CSS 代码，</p>
<p>过去的时候有两种 css 的代码命名方法</p>
<p>第一种，我管他叫做<strong>配置式写法</strong>，通过将 CSS 语法的几个片段转化成名称，从而实现快速配置出效果的的 CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fl</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fr</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mr10</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pb10</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>这种写法对于简单页面来说确实也是可以使用的。缺点就是当页面变得复杂一些的时候，则比较难控制这种短小精捍（不直观）的变量。比如</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tmd01</span>&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span></span><br><span class="line">  font-size: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2d3c48</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>请脑补一下我的黄人问号脸</p>
</blockquote>
<p>当然，如果用得好的话，自然是 OK, 如果用不好的话，</p>
<p>后来进入了嵌套写法时代（感谢伟大的 Rails 社区出的 SASS）, 下面的语法都是 SCSS.</p>
<p>第二种写法就变成了这样</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.actions</span> &#123;</span><br><span class="line">  <span class="selector-class">.card_wrapper</span> &#123;</span><br><span class="line">    <span class="selector-class">.card</span> &#123;</span><br><span class="line">      <span class="selector-class">.title</span> &#123;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.content</span> &#123;</span><br><span class="line">        <span class="selector-class">.list</span> &#123;</span><br><span class="line">          <span class="selector-class">.fa</span> &#123;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>外加变量和 mixin 以及函数的话，基本上就可以完成代码的组织了。</p>
<p>这种写法倒是比原来不知道高到哪里去了，但问题依旧存在，比如 title,content 这些玩意太多，完完全全的看不懂。更加糟糕的事情是，有的小伙伴直接是乱用嵌套，也不用伪类和伪选择器，从而达到单页面调出来小伙比较快，但因为代码不能重用，调多个页面的时候速度巨慢无比。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.apage &#123;</span><br><span class="line">  bbizlogic &#123;</span><br><span class="line">    .actions &#123;</span><br><span class="line">      .card_wrapper &#123;</span><br><span class="line">        .card &#123;</span><br><span class="line">          .title &#123;</span><br><span class="line">          &#125;</span><br><span class="line">          .content &#123;</span><br><span class="line">            .list &#123;</span><br><span class="line">              .fa &#123;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我本人推荐（其实我是写 Python Web 后端的，逃… ) 代码风格比较倾向于 BEM 命名，关于 BEM 的介绍，请参考简单心理团队的教程。</p>
<ul>
<li><a href="https://jiandanxinli.github.io/2016-08-11.html">https://jiandanxinli.github.io/2016-08-11.html</a></li>
<li><a href="https://juejin.im/post/58d0e5caa22b9d00643e8b51">https://juejin.im/post/58d0e5caa22b9d00643e8b51</a></li>
</ul>
<p>然而，最好的方式，就是读一个非常使用 SCSS 来组织项目的 CSS 代码的成熟项目。</p>
<p>我推荐两个：</p>
<ul>
<li>BOOTSTRAP V4: Bootstrap V4 使用 SCSS 来写</li>
<li>ELEMENT UI: 饿了么的团队出的，前段时间从 v1 版本升级到 v2 版本，发现网站大部分样式都没有出现大变动，在这里给个赞。</li>
</ul>
<h4 id="0-先从整体上设计好骨架"><a href="#0-先从整体上设计好骨架" class="headerlink" title="0. 先从整体上设计好骨架"></a>0. 先从整体上设计好骨架</h4><p>接着才是 HTML, 然后才是 CSS</p>
<p>现在前端入行的人越来越多，很多的新手前端 er 会用比较快的思维来编写，这就导致代码质量奇差无比。</p>
<ul>
<li>哎，我看看，面粉加多了，我加点水，水加多了，我再加点面粉。</li>
<li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li>
<li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li>
<li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li>
<li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li>
</ul>
<p>当设计出来的网页本身的 HTML 写的就很混乱，CSS 能写的好在哪里呢？</p>
<p>命名都很混乱，遑论代码可维护性？</p>
<p>可以多去参考一些成熟的项目的 CSS 是怎么命名的呀，HTML 是怎么设计的呀</p>
<h4 id="1-Scoped-的滥用"><a href="#1-Scoped-的滥用" class="headerlink" title="1. Scoped 的滥用"></a>1. Scoped 的滥用</h4><p>我印象中，有个小伙伴把一个比较大的 CSS 库多次 import 到被 Scoped 的组件中，于是开发时猛然发现 head 处多了大量的 style 标签，除了 css 选择器后面随机的属性 hash, 文件内容都一样。</p>
<blockquote>
<p>公共组件往往可以通过嵌套和加前缀的方式来防止污染。如果 scoped 的属性里面有成吨的 style, 慎用 import.</p>
</blockquote>
<p>还有小伙伴喜欢在很多七七八八的组件各种 import scss. 其实对于中小型项目，完全可以直接全局一个文件 style 即可。</p>
<p>我现在的做法，是直接在 src 的上方直接用 gulp 搭建一个只用来编译 SCSS 到 CSS 的项目，每次编译后输出到页面里面。</p>
<p>如果项目是小项目，建议直接在 app.vue 里面 import pages</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── common</span><br><span class="line">├── fonts</span><br><span class="line">├── global.scss</span><br><span class="line">├── index.scss</span><br><span class="line">├── mixins</span><br><span class="line">├── pages.scss</span><br><span class="line">└── reset.scss</span><br></pre></td></tr></table></figure>

<h4 id="2-保持代码的通用性"><a href="#2-保持代码的通用性" class="headerlink" title="2. 保持代码的通用性"></a>2. 保持代码的通用性</h4><p>一般，当同一段逻辑出现三次的时候，是要停下来重构一下的，这样的话，就可以节省很多时间。</p>
<p>套用在 CSS 的样式上也是如此。</p>
<h2 id="0x04-Tmux-和-Tmuxnator-打造工作流"><a href="#0x04-Tmux-和-Tmuxnator-打造工作流" class="headerlink" title="0x04 Tmux 和 Tmuxnator 打造工作流"></a>0x04 Tmux 和 Tmuxnator 打造工作流</h2><p>具体参考我的文章 <a href="l">用 Tmux 和 Tmuxnator 打造工作流</a></p>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-09-25</strong> 初始化本文</li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>项目经验</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinking In Web Developing</title>
    <url>/2018/09/04/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><h2 id="0x02-前端"><a href="#0x02-前端" class="headerlink" title="0x02 前端"></a>0x02 前端</h2><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>代理服务器分布式网络，它从靠近用户的位置提供内容</p>
<h4 id="更新方式"><a href="#更新方式" class="headerlink" title="更新方式"></a>更新方式</h4><p>推送 PUSH</p>
<p>当服务器内容发生变动，推送 CDN 接受新的内容。</p>
<ul>
<li>更新最快</li>
<li>流量最小化</li>
<li>存储最大化</li>
</ul>
<p>拉取 PULL</p>
<p>当用户请求该资源的时候，从服务器拉取资源。</p>
<ul>
<li>更新有延迟</li>
<li>存储最小化</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>CDN 成本可能会很高</li>
<li>TTL 过期之前更新内容，CDN 缓存内容可能会过时</li>
</ol>
<h2 id="0x02-后端组件"><a href="#0x02-后端组件" class="headerlink" title="0x02 后端组件"></a>0x02 后端组件</h2><h3 id="负载均衡器"><a href="#负载均衡器" class="headerlink" title="负载均衡器"></a>负载均衡器</h3><p>负载均衡起到了一个均衡负载的作用</p>
<ol>
<li>防止请求进入运行情况糟糕的服务器。</li>
<li>防止资源过载。</li>
<li>帮助消除单一故障点。</li>
</ol>
<p>额外的功能：</p>
<ol>
<li>SSL 终结：解密传入的请求，并加密服务器响应。</li>
</ol>
<p>工作-备用 / 双工作</p>
<h4 id="选-Worker"><a href="#选-Worker" class="headerlink" title="选 Worker"></a>选 Worker</h4><ul>
<li>Random</li>
<li>Round Robin</li>
<li>Least Busy</li>
<li>Sticky session / Cookie</li>
<li>By request paramters</li>
</ul>
<h4 id="路由流量"><a href="#路由流量" class="headerlink" title="路由流量"></a>路由流量</h4><ul>
<li>随机</li>
<li>最少负载</li>
<li>Session/Cookie</li>
<li>轮询调度或加权轮询调度</li>
<li>四层负载均衡</li>
<li>七层负载均衡</li>
</ul>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><ul>
<li>安全性：隐藏后端服务器信息</li>
<li>可扩展性和灵活性：客户端只能看到服务器，服务端</li>
<li>本地终结 SSL 会话：</li>
<li>压缩：</li>
<li>缓存：</li>
<li>静态内容：</li>
</ul>
<h2 id="0x08-Http-Server-Model"><a href="#0x08-Http-Server-Model" class="headerlink" title="0x08 Http Server Model"></a>0x08 Http Server Model</h2><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>主进程监听不同的进程信号，并且作出反馈。</p>
<ul>
<li>TTIN TTOU 告诉 master 升高或者降低运行的 worker</li>
<li>CHLD 子进程已结束</li>
</ul>
<h3 id="四种-Worker"><a href="#四种-Worker" class="headerlink" title="四种 Worker"></a>四种 Worker</h3><h4 id="同步-Workers"><a href="#同步-Workers" class="headerlink" title="同步 Workers"></a>同步 Workers</h4><p>单请求单 worker, 并且不支持 persistent connections</p>
<p>在 CPU 和网络贷款上资源有限。（啥意思，,,,)</p>
<p>即请求时间不定的情况应该是要避免的。</p>
<h4 id="异步-Workers"><a href="#异步-Workers" class="headerlink" title="异步 Workers"></a>异步 Workers</h4><p>异步场景</p>
<ul>
<li>Applications making long blocking calls (Ie, external web services)</li>
<li>Serving requests directly to the internet</li>
<li>Streaming requests and responses</li>
<li>Long polling</li>
<li>Web sockets</li>
<li>Comet （其实就是推送）</li>
</ul>
<p>通过 eventlet / gevent 使用 Greenlets</p>
<h4 id="Tornado-Workers"><a href="#Tornado-Workers" class="headerlink" title="Tornado Workers"></a>Tornado Workers</h4><p>tornado</p>
<h4 id="AsyncIO-Workers"><a href="#AsyncIO-Workers" class="headerlink" title="AsyncIO Workers"></a>AsyncIO Workers</h4><ul>
<li>gthread</li>
<li>gaiohttp</li>
</ul>
<h3 id="Pre-fork-Web-Server"><a href="#Pre-fork-Web-Server" class="headerlink" title="Pre-fork Web Server"></a>Pre-fork Web Server</h3><p><a href="https://stackoverflow.com/questions/25834333/what-exactly-is-a-pre-fork-web-server-model">https://stackoverflow.com/questions/25834333/what-exactly-is-a-pre-fork-web-server-model</a></p>
<p>pre-forking 意味着 一个 master 创建了多个 fork 来处理请求。每一个分叉意味着一个独立的 *nix 进程（不一定吧，异步 worker 怎么算？)。</p>
<p>The pre in pre-fork means that these processes are forked before a request comes in. They can however usually be increased or decreased as the load goes up and down.</p>
<p>libev / libuv</p>
<p>epoll or kqueue, it is always indispensable to the asynchronous topic.</p>
<p>asyncio</p>
<p>sanic<br>libuv<br>uvloop</p>
<h2 id="0xEE-结论"><a href="#0xEE-结论" class="headerlink" title="0xEE 结论"></a>0xEE 结论</h2>]]></content>
      <categories>
        <category>编程思索</category>
      </categories>
      <tags>
        <tag>后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>写给 Pythonista 的 Golang 入门指北</title>
    <url>/2019/05/15/GoLang/</url>
    <content><![CDATA[<p>原计划是去年 8 月份入 Golang 大法的，然后开一篇帖子进行写个入门指北来着。这一拖就拖到了今年。</p>
<p>同样是快速上手教程，这篇文章和其他的文章的不同点在于，完全假设你是 Pythonista 的入门。</p>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><h2 id="0x01-安装"><a href="#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h2><p>Golang 安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果你是在 mac 上，建议先安装下面的 SDK 以防不测</span><br><span class="line">open &#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F;Packages&#x2F;macOS_SDK_headers_for_macOS_10.14.pkg</span><br><span class="line"># 安装 golang</span><br><span class="line">brew install golang</span><br><span class="line"># 配置环境变量</span><br><span class="line">echo $GOPATH # &#x2F;Users&#x2F;twocucao&#x2F;Codes&#x2F;ReposGo</span><br><span class="line"></span><br><span class="line">cd &#x2F;Users&#x2F;twocucao&#x2F;Codes&#x2F;ReposPublic&#x2F;</span><br><span class="line"></span><br><span class="line">mkcd thanos # mkdir &amp;&amp; cd</span><br><span class="line">go mod init github.com&#x2F;twocucao&#x2F;thanos</span><br><span class="line">git remote add origin git@github.com:twocucao&#x2F;thanos.git</span><br></pre></td></tr></table></figure>

<p>接下来，需要解决卡 golang.org 的网络问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.io</span><br><span class="line">go get -v -u github.com&#x2F;hqpko&#x2F;go-mod-tidy</span><br><span class="line">go mod tidy</span><br></pre></td></tr></table></figure>

<p>接下来就是随便找一些带有依赖库的代码。放到该文件夹下面。</p>
<p>你也可以直接从这里 <a href="https://github.com/twocucao/thanos.git">https://github.com/twocucao/thanos.git</a> 拉取代码</p>
<h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><h3 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h3><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><h3 id="内置简单类型"><a href="#内置简单类型" class="headerlink" title="内置简单类型"></a>内置简单类型</h3><p>对于一些基本的数据类型，操作为 加减乘除取余数位运算等等</p>
<ul>
<li>数字类型</li>
<li>布尔类型</li>
<li>字符串类型</li>
<li>数组 / 列表</li>
<li>字典</li>
</ul>
<h3 id="内置复杂类型"><a href="#内置复杂类型" class="headerlink" title="内置复杂类型"></a>内置复杂类型</h3><ul>
<li>集合结构 : 串</li>
<li>线性结构 : 线性表 （单链表，静态链表，循环链表，双向链表，<strong>栈，队列</strong>)</li>
<li>树形结构 : 树（二叉树，B+ 树，红黑树）</li>
<li>图形结构 : 图</li>
</ul>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h2 id="0x02-中级概念"><a href="#0x02-中级概念" class="headerlink" title="0x02 中级概念"></a>0x02 中级概念</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块，这个概念，可大可小，大的时候，把一个程序说成是模块，小的时候，可以把一个文件，甚至你说这一个函数是一个模块，也行。</p>
<p>这里的模块指的是一个包下的函数。</p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象有三大概念：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
<h3 id="错误-调试测试"><a href="#错误-调试测试" class="headerlink" title="错误 / 调试测试"></a>错误 / 调试测试</h3><p>异常处理实际上可以考验一个程序员编写代码的健壮性。</p>
<p>事实上来说，代码写的健壮是一个程序员必备的素养。但其实在开发过程中，出于对项目进行赶工上线，需要对程序的健壮性做出一定的取舍。并且，在编写客户端，服务端，网页前端的时候基本上都会遇到这个问题。什么时候选择健壮的程序，什么时候选择是还可以的程序。需要自己的经验。</p>
<h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><blockquote>
<p>Go 多线程约等于并发。</p>
</blockquote>
<h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><h5 id="协同式多任务处理"><a href="#协同式多任务处理" class="headerlink" title="协同式多任务处理"></a>协同式多任务处理</h5><p>如果有两个线程，同时进行 IO 请求，当其中一个线程连接之后，立即会<strong>主动让出 GIL</strong>, 其他线程就可以运行。</p>
<blockquote>
<p>当 N 个线程在网络 I/O 堵塞，或等待重新获取 GIL，而一个线程运行 Python。</p>
</blockquote>
<p>让出之后还要执行代码呀，所以要有个收回 GIL 的动作。</p>
<h5 id="抢占式多任务处理"><a href="#抢占式多任务处理" class="headerlink" title="抢占式多任务处理"></a>抢占式多任务处理</h5><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>原子操作：sort 之类不需要<br>非原子操作：n=n+2 的字节码分为 加载 n , 加载 2 , 相加，存储 n, 四个步骤，由于不是原子性，很可能被由于 15 ms 而被打断。</p>
<p>当然，懒人一向是 : <strong>优先级不决加括号，线程不决加 lock</strong></p>
<p>对于 Java, 程序员努力在尽可能短的时间内加锁存取共享数据，减轻线程的争夺，实现最大并行。但 Python 中，线程无法并行运行，细粒度的锁就没有了优势。</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h2 id="0x03-高级技巧"><a href="#0x03-高级技巧" class="headerlink" title="0x03 高级技巧"></a>0x03 高级技巧</h2><h2 id="0x04-标准库"><a href="#0x04-标准库" class="headerlink" title="0x04 标准库"></a>0x04 标准库</h2><h3 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h3><h3 id="系统化模块"><a href="#系统化模块" class="headerlink" title="系统化模块"></a>系统化模块</h3><h2 id="0x05-第三方库"><a href="#0x05-第三方库" class="headerlink" title="0x05 第三方库"></a>0x05 第三方库</h2><ul>
<li>Requests : API 人性化</li>
</ul>
<h2 id="0x06-代码质量"><a href="#0x06-代码质量" class="headerlink" title="0x06 代码质量"></a>0x06 代码质量</h2><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><h2 id="0x07-常用命令"><a href="#0x07-常用命令" class="headerlink" title="0x07 常用命令"></a>0x07 常用命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go build</span><br><span class="line">go install -v</span><br><span class="line">go clean</span><br><span class="line">go fmt</span><br><span class="line">go get</span><br><span class="line">go test</span><br><span class="line">go tool fix . # 修复老代码到新版本</span><br><span class="line">go tool vet directory|files</span><br><span class="line">go tool yacc -o gopher.go -p parser gopher.y</span><br><span class="line">godoc -http&#x3D;:8080</span><br><span class="line">go version 查看 go 当前的版本</span><br><span class="line">go env 查看当前 go 的环境变量</span><br><span class="line">go list 列出当前全部安装的 package</span><br><span class="line">go run 编译并运行 Go 程序</span><br></pre></td></tr></table></figure>

<h2 id="0xEE-文章更新"><a href="#0xEE-文章更新" class="headerlink" title="0xEE 文章更新"></a>0xEE 文章更新</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果你是在 mac 上，建议先安装下面的 SDK 以防不测</span><br><span class="line">open &#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F;Packages&#x2F;macOS_SDK_headers_for_macOS_10.14.pkg</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-08-22</strong> 初始化接口</li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinking In Programming Language</title>
    <url>/2018/09/17/ThinkingInProgrammingLanguage/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>笔者对于涉猎的语言都是草草了解，深入不敢谈。能用罢了。</p>
<p>即便是用过几种语言，得出的经验依然是片面的。</p>
<p>很多人得出一些结论，往往是样本就一个。比如说一个只用过 PHP 的人叫嚣 PHP 是最好的语言。</p>
<p>所以，我得出的结论，不过是一家之言罢了。</p>
<p>本文文章就是总结一下，我使用的一些语言的经验，我整理出一个大致的框架，方便我以后切换到其他编程语言可以更顺滑一些。</p>
<h2 id="0x01-语言胡论"><a href="#0x01-语言胡论" class="headerlink" title="0x01 语言胡论"></a>0x01 语言胡论</h2><p>在我看来，一个人说他会且只精通一门编程语言是很让我不能理解的事情，在我看来，什么编程语言框架上手两三天就能去写，但是这严格意义上应该叫做能用，和精通相差甚远。那是不是说写的时间长的人经验就老道了呢？也不见得。下棋下了一辈子是烂棋篓子的人比比皆是。</p>
<p>那我认为什么样子的人才是懂写代码的人。</p>
<pre><code>拥有良好的组织代码的能力的人。</code></pre>
<p>恩，组织代码的能力，一个文件排布混乱的人，不太可能写出整齐严谨的代码，当然，人也可能是复杂的，比如，这个人写的代码挺好，但是生活住处一团糟。</p>
<p>当然这是题外话了，依个人经验而言，学习任何一个复杂的系统，也需要像组织一个东西一样，系统性的学习。</p>
<p>系统化的东西往往像《如何阅读一本书》里面描述一本书的复杂架构那样。</p>
<pre><code>没有一种物质或产品是绝对简单的。所有的东西都是复杂的组合体。当你看一个整体组成复杂的东西的时候，如果只看它如何呈现一体的面貌，那是还没有掌握精髓，你还必须要明白它怎样呈现多个的面貌，但不是各自为政、互不相干的多个面貌，而是互相融合成有机体的多个面貌。如果组成的各个部分没有有机的关联，仅仅是一个集合体罢了。

这就像是一堆砖头跟一栋又砖头建造起来的房子是有区别的。而单一的房子与建造的房子也不相同。一本书就像是一栋单一的房子。一栋大厦，拥有许多房间，每层楼都有房间，有不同的尺寸和形状，不同的外观，不同的用途，这些房间是独立的，分离的，每个房间都有自己的架构和装潢设计，但却不是完全独立与分离的，这些房间使用普通门 / 拱门 / 走廊 / 楼梯串联起来的，即建筑师错位的动线架构，因为这些架构师彼此联结的，因此每一个部分在整体的使用功能上要贡献出自己的力量。否则这栋房子便是不适合居住的。</code></pre>
<h3 id="独一无二"><a href="#独一无二" class="headerlink" title="独一无二"></a>独一无二</h3><p>有的人认为所有的编程语言都是一样的。</p>
<p>依我看，所有的编程语言都是有特点的，也是有优缺点的。</p>
<p>举一个我朋友的爱说的很粗俗的例子：</p>
<pre><code>虽然说关了灯全都一个样，但是每一个女孩子都有是独一无二的存在。</code></pre>
<p>编程语言也是一样。</p>
<ul>
<li>有的偏向于运行效率，有的偏向于开发效率。</li>
<li>有的据说是让人编程时候感到快乐 (ruby)，有的说你生命苦短，为什么不用 Python。</li>
<li>有的偏向于 Web 开发 (PHP)，有的偏向于并发操作</li>
<li>有的是 Windows 上面自动化的小白工具 (Autohotkey)</li>
<li>有的是据说是一次编译，到处运行 (Java)</li>
<li>有的是亲妈平台万金油 (C#), 当然，最近也在亲妈的带领下往其他方向前进了。</li>
</ul>
<p>编程语言往往是上面这些因素的取舍。</p>
<ul>
<li>你要运行效率，往往开发效率就会打折。</li>
<li>你要开发效率，往往就需要堆更多的机器来提升性能。</li>
<li>你要充分利用某个平台，往往就没有极高兼容性。</li>
<li>你要编程语言帮你处理掉不需要考虑的问题，有的程序员就站出来了，你是不相信我控制<br>  内存的能力么？</li>
</ul>
<p>有的语言生态好，比如 对于我定位于全栈工程师（其实是全干工程师）的程序员来说：</p>
<p>  文能写虫爬数据<br>  武能后端写网站<br>  进能数据搞 AI<br>  退能机器跑运维</p>
<p>十八般武艺武艺样样稀疏的 API 搬运工，那，那就 Python 好了。你还要啥自行车？</p>
<h2 id="0x02-语言的工具链"><a href="#0x02-语言的工具链" class="headerlink" title="0x02 语言的工具链"></a>0x02 语言的工具链</h2><p>工欲善其事必先利其器</p>
<h3 id="编辑器-amp-amp-IDE"><a href="#编辑器-amp-amp-IDE" class="headerlink" title="编辑器 &amp;&amp; IDE"></a>编辑器 &amp;&amp; IDE</h3><p>大学里有个老师喜欢用 Notepad 手撸 Pascal 代码，然后拖到 IDE 里面运行。</p>
<p>集成开发环境 (IDE) = 编辑器 + 编译器 + 构建系统 + 调试 + 其他编辑提升（补全，重构，格式化）</p>
<p>到底是 IDE 好，还是 Editor 好。其实你看到这里就差不多明白了。一般情况下，选择<br>JetBrain 的 IDE 总是没问题的。</p>
<p>那么什么情况下，会选择编辑器呢？</p>
<p>多个</p>
<p>对于，这个经典的问题，可以这么回答：抓到好猫的猫，你管他是黑猫还是白猫。</p>
<p>那么，这个问题就变成了另一个问题。编辑器或者 IDE 可以满足我当前的开发工作流么？</p>
<h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><p>那么，我们从编辑器 + 集成环境</p>
<ul>
<li>Mac Homebrew</li>
<li>开发环境里面的 shell</li>
<li>cmake</li>
</ul>
<h2 id="0x03-语言的学习资源"><a href="#0x03-语言的学习资源" class="headerlink" title="0x03 语言的学习资源"></a>0x03 语言的学习资源</h2><p>官网的文档是最应该反复查看的东西，这是我现在依然喜欢强调的。</p>
<p>而官网的文档也分为四种</p>
<ul>
<li>一种是 tutorial      – 用于<strong>上手</strong>对应的软件 / 编程语言</li>
<li>一种是 guide         – 用于** Topic Reading **</li>
<li>一种是 api document  – 用于<strong>查看细节</strong></li>
<li>一种是 RTFSC ( Read The Fucking Source Code ) 阅读源码</li>
</ul>
<blockquote>
<p>注：把 StackOverFlow 中某个标签的 Most Votes 的答案，是除了大略看看 tutorial 之外的另一种快速熟悉入门时候的痛点的手段。</p>
</blockquote>
<p>当然，其实代码写的足够好的话本身就是一种注释。</p>
<h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><p>社区一般情况下都会有的，但有几个网站特别值得提出来</p>
<ul>
<li>官网上一般都会放一些比较出色的社区</li>
<li>Github</li>
<li>reddit</li>
<li>某个技术对应的 Weekly 订阅</li>
</ul>
<h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><p>特别值得一提的是有一个持续不断阅读到有趣的文章的方法：</p>
<ol>
<li>Google 出对应的 书 / Weekly 周报 / 博客，比如 Python Weekly 然后订阅</li>
<li>接着不断的查看列入优质文章的作者的文章，Github 地址啦，他关注的 Repo 啦等等等等。</li>
<li>然后去阅读他的代码 / 博客。</li>
</ol>
<h2 id="0x04-基础概念"><a href="#0x04-基础概念" class="headerlink" title="0x04 基础概念"></a>0x04 基础概念</h2><blockquote>
<p> 程序 = 算法 + 数据结构</p>
</blockquote>
<p>这句话当然是不全面的，这句话经典就经典在高度概括了程序中算法和数据结构的重要性，但并不影响这句话在计算机世界里面的地位。</p>
<p>依我看来，对我的启发是：</p>
<blockquote>
<p>我会把 API 的调用和数据结构以及算法想清楚，然后才动手把代码分解成伪代码。最后写成代码。</p>
</blockquote>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>按照复杂性可划分为：</p>
<ul>
<li>简单类型</li>
<li>复杂类型</li>
</ul>
<p>按照复杂性可划分为：</p>
<ul>
<li>基本类型</li>
<li>引用类型</li>
</ul>
<p>按照数据结构可划分为：</p>
<ul>
<li>集合结构 : 串</li>
<li>线性结构 : 线性表 （单链表，静态链表，循环链表，双向链表，<strong>栈，队列</strong>)</li>
<li>树形结构 : 树（二叉树，B+ 树，红黑树）</li>
<li>图形结构 : 图</li>
</ul>
<p>对于一些基本的数据类型，操作为 加减乘除取余数位运算等等</p>
<p>对于复杂的一些数据类型，则需要对数据结构多一些了解。</p>
<p>比如，对队列而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对 hash 而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字典而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字符串而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？</p>
<p>那字符串来说，Java 推荐使用 StringBuilder 来合并多个字符串，Python 推荐 join 多个字符串等等。</p>
<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ul>
<li><p>声明语句</p>
</li>
<li><p>赋值语句</p>
</li>
<li><p>条件语句</p>
<ol>
<li>判断的时候不确定操作符优先级的时候，加括号</li>
<li>尽量显式判断，不要用隐式判断。</li>
</ol>
</li>
<li><p>循环语句</p>
<ol>
<li>Break 和 Continue</li>
</ol>
</li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol>
<li>传值还是传引用</li>
<li>参数</li>
</ol>
<p>函数或者叫做方法，叫法不同。</p>
<p>函数，我有个很私人的称呼，称它为最小操作模块。</p>
<p>实际上，在编程的过程中，程序员用面向对象的思想进行编码的人可能真的不是很多。把一段长程序按照自己的需求进行切分成若干个函数的倒是比比皆是。</p>
<p>不过按照什么样子的标准来切分一段程序为多个函数，仁者见仁智者见智。</p>
<p>这里面需要注意的事情是：</p>
<ul>
<li><ol>
<li>注意传值（基本类型）和传引用（引用类型）</li>
</ol>
</li>
<li><ol start="2">
<li>函数重载</li>
</ol>
</li>
</ul>
<p>对于不同的编程语言，传值（基本类型）和传引用（引用类型）基本上达成了共识。<br>但在实现函数重载的时候则是有所不同，</p>
<p>比如，Java 里面选择了多写几个函数，Python 则没有这个机制，不过，通过默认参数却可以曲线救国，实现这个机制。</p>
<p>递归<br>函数式编程<br>高阶函数 mapreduce/ filter / sorted / 返回函数 / 匿名函数 / 装饰器 / 偏函数</p>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">    print(a)</span><br><span class="line">    inner()</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    a = [<span class="number">1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        a.append(<span class="number">2</span>)</span><br><span class="line">    print(a)</span><br><span class="line">    inner()</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># [1]</span></span><br><span class="line"><span class="comment"># [1, 2]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> outer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    inner();</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">outer()</span><br><span class="line"># 1</span><br><span class="line"># 2</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> outer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    inner();</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">outer()</span><br><span class="line"># 1</span><br><span class="line"># 1</span><br></pre></td></tr></table></figure>

<h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><ul>
<li>map</li>
<li>reduce</li>
<li>filter</li>
</ul>
<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><h2 id="0x05-中级概念"><a href="#0x05-中级概念" class="headerlink" title="0x05 中级概念"></a>0x05 中级概念</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>面向对象有三大概念：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
<h3 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h3><p>模块，这个概念，可大可小，大的时候，把一个程序说成是模块，小的时候，可以把一个文件，甚至你说这一个函数是一个模块，也行。</p>
<p>这里的模块指的是一个包下的函数。</p>
<h3 id="错误-调试测试"><a href="#错误-调试测试" class="headerlink" title="错误 / 调试测试"></a>错误 / 调试测试</h3><p>异常处理实际上可以考验一个程序员编写代码的健壮性。</p>
<p>事实上来说，代码写的健壮是一个程序员必备的素养。但其实在开发过程中，出于对项目进行赶工上线，需要对程序的健壮性做出一定的取舍。并且，在编写客户端，服务端，网页前端的时候基本上都会遇到这个问题。什么时候选择健壮的程序，什么时候选择是还可以的程序。需要自己的经验。</p>
<h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h2 id="0x06-高级概念"><a href="#0x06-高级概念" class="headerlink" title="0x06 高级概念"></a>0x06 高级概念</h2><h3 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h3><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>Spawn - 产卵，为什么叫做产卵呢，因为生出大量的 child process<br>Spawn = fork + exec</p>
<h3 id="并发-并行"><a href="#并发-并行" class="headerlink" title="并发 / 并行"></a>并发 / 并行</h3><h4 id="并行架构"><a href="#并行架构" class="headerlink" title="并行架构"></a>并行架构</h4><p>并行并不完全等同与多核并行</p>
<ol>
<li>bit-level 并行 : 即 8bit 与 32bit 的区别</li>
<li>instrction-level 并行：CPU 的并行度：流水线，乱序执行，猜测执行</li>
<li>data-level 并行：比如 GPU 在调整图像亮度的时候。</li>
<li>task-level 并行：即多处理器，按照内存模型氛围共享内存模型与分布式内存模型</li>
</ol>
<h4 id="七个并发-并行模型"><a href="#七个并发-并行模型" class="headerlink" title="七个并发 / 并行模型"></a>七个并发 / 并行模型</h4><ol>
<li>线程与锁</li>
<li>函数式编程</li>
<li>分离标志与状态</li>
<li>Actor</li>
<li>通信顺序进程 (CSP)</li>
<li>数据级并行</li>
<li>Lambda 架构</li>
</ol>
<h4 id="模型-1-线程与锁"><a href="#模型-1-线程与锁" class="headerlink" title="模型 1. 线程与锁"></a>模型 1. 线程与锁</h4><p>互斥<br>竞态条件<br>死锁</p>
<h5 id="内置锁"><a href="#内置锁" class="headerlink" title="内置锁"></a>内置锁</h5><p>当若干个线程进行对某个变量进行一个非原子性的操作的时候，比如<br>(read-modify-write), 就吹出现竞态条件。解决方式就是进行对某个变量使用同步访问 (java 中的 synchronized)。</p>
<p>内存可见性</p>
<p>当一个线程使用了多把锁的时候，就可能出现死锁。简单避开死锁的方式就是总是按照一个<br>全局的固定思路获取多把锁</p>
<p>哲学家进餐：五个哲学家围绕着桌子，两边五双筷子，如果饿了，就拿起两边的筷子吃饭。则迟早会出现一个情<br>况，所有的哲学家在同一时刻决定吃饭。于是两边都拿不到筷子。</p>
<p>最终的解决方案就是按照全局的顺序来获取多把锁。</p>
<h5 id="可重入锁-Reentrant-Lock"><a href="#可重入锁-Reentrant-Lock" class="headerlink" title="可重入锁 Reentrant Lock"></a>可重入锁 Reentrant Lock</h5><p>可以用 try lock 来和超时时间来避免无尽死锁。</p>
<p>交替锁，避免锁整个链表，而是锁上下结点。</p>
<h4 id="模型-2-函数式编程"><a href="#模型-2-函数式编程" class="headerlink" title="模型 2. 函数式编程"></a>模型 2. 函数式编程</h4><h4 id="模型-3-分离标志与状态"><a href="#模型-3-分离标志与状态" class="headerlink" title="模型 3. 分离标志与状态"></a>模型 3. 分离标志与状态</h4><h4 id="模型-4-Actor"><a href="#模型-4-Actor" class="headerlink" title="模型 4. Actor"></a>模型 4. Actor</h4><h4 id="模型-5-通信顺序进程-CSP"><a href="#模型-5-通信顺序进程-CSP" class="headerlink" title="模型 5. 通信顺序进程 (CSP)"></a>模型 5. 通信顺序进程 (CSP)</h4><h4 id="模型-6-数据级并行"><a href="#模型-6-数据级并行" class="headerlink" title="模型 6. 数据级并行"></a>模型 6. 数据级并行</h4><h4 id="模型-7-Lambda-架构"><a href="#模型-7-Lambda-架构" class="headerlink" title="模型 7. Lambda 架构"></a>模型 7. Lambda 架构</h4><h2 id="0x05-标准库"><a href="#0x05-标准库" class="headerlink" title="0x05 标准库"></a>0x05 标准库</h2><h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><h3 id="字符串与文本"><a href="#字符串与文本" class="headerlink" title="字符串与文本"></a>字符串与文本</h3><h3 id="数字日期与时间"><a href="#数字日期与时间" class="headerlink" title="数字日期与时间"></a>数字日期与时间</h3><h3 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h3><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><h2 id="0x07-番外篇"><a href="#0x07-番外篇" class="headerlink" title="0x07 番外篇"></a>0x07 番外篇</h2><h2 id="0x08-调试和-Profile"><a href="#0x08-调试和-Profile" class="headerlink" title="0x08 调试和 Profile"></a>0x08 调试和 Profile</h2><h3 id="8-1-测试"><a href="#8-1-测试" class="headerlink" title="8.1 测试"></a>8.1 测试</h3><p>hash 算法</p>
<p>rehash | redis 渐进式 rehash</p>
<h2 id="0xEE-参考"><a href="#0xEE-参考" class="headerlink" title="0xEE 参考"></a>0xEE 参考</h2><ul>
<li><a href="http://www.yinwang.org/blog-cn/2017/07/06/master-pl">http://www.yinwang.org/blog-cn/2017/07/06/master-pl</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-03-21</strong> 初始化本文</li>
<li><strong>2017-05-11</strong> 增加代码质量模块</li>
<li><strong>2018-08-29</strong> 重修文字</li>
<li><strong>2018-09-08</strong> 阅读七周七并发之后，针对并发章节做了补充</li>
</ul>
]]></content>
      <categories>
        <category>编程思索</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>重构技巧</tag>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Final Cut Pro X CheatSheet</title>
    <url>/2018/11/25/FinalCutProX/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文诞生于用 Final Cut Pro X 剪了几次视频之后的复盘总结</p>
<p>部分内容来自于</p>
<ul>
<li>Final Cut Pro X 10.1 非线性编辑高级教程</li>
<li>Final Cut Pro X 影视包装剪辑完全自学教程</li>
</ul>
<h2 id="0x01-剪辑流程"><a href="#0x01-剪辑流程" class="headerlink" title="0x01 剪辑流程"></a>0x01 剪辑流程</h2><p>所有的剪辑流程都是想法的具体实现，这意味着在剪辑之前，需要做好前期准备</p>
<pre><code>1. 确定大致思路
2. 调好参数摄影</code></pre>
<p>然后</p>
<ol>
<li>素材导入</li>
<li>片段整理</li>
<li>前期剪辑</li>
<li>精剪</li>
<li>分享</li>
</ol>
<h2 id="0x01-前期准备"><a href="#0x01-前期准备" class="headerlink" title="0x01 前期准备"></a>0x01 前期准备</h2><p>本文复盘的是古墓丽影暗影假预告片剪辑。</p>
<p>热血的预告片通常具有如下的特征：</p>
<ol>
<li>有一条主线，但不剧透，通常这个主线往往是有人在说话，引出了整个故事</li>
<li>霸气磅礴的背景音乐</li>
<li>频繁而不冗余的镜头切换</li>
<li>踩节奏踩的非常精准</li>
</ol>
<h2 id="0x02-素材导入"><a href="#0x02-素材导入" class="headerlink" title="0x02 素材导入"></a>0x02 素材导入</h2><ol>
<li>建立 Library 游戏</li>
<li>建立 Event 古墓丽影暗影，导入游戏视频</li>
<li>建立 Project 古墓丽影暗影盗梦空间预告片</li>
</ol>
<p>素材导入没什么好说的，因为 PS4 里录制成什么样子，就是什么样子。</p>
<p>开启转码和分析的话，可以分析出更多的片段类型。</p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li>建议开启『创建优化的媒体』</li>
<li>看存储情况如果存储不是很足的话，开启『创建优化的代理文件』</li>
</ul>
<p>尽量将素材管理的任务交给 FCPX 来做，所以，如果可能的话，直接拷贝进资料库最好。</p>
<p>对于个人剪辑的话，比较适合两个 Library, 即一个常用 Library, 另一个是本项目的 Library 当然，其实也可以</p>
<h2 id="0x03-片段整理"><a href="#0x03-片段整理" class="headerlink" title="0x03 片段整理"></a>0x03 片段整理</h2><p>对于不同类型的影片，需要不同类型的整理方式</p>
<ol>
<li>对于预告片来说，两三秒的镜头可以带出大量的信息，引人遐想。</li>
<li>而对于普通综艺 / 电视剧 / 电影来说，如果遵循着预告片的节奏的话，则会交代不清楚事情。</li>
</ol>
<p>对于预告片来说，就仅仅剩下挑选中上片段这一个选项了。</p>
<ol>
<li>快速浏览片段内容</li>
<li>挑选片段里面的片段打上关键字</li>
<li>进入了某个关键字的视频列表，对它进行评价 (f/u/del)</li>
</ol>
<p>快速浏览</p>
<ol>
<li>FCPX 提供了缩略图模式，可以按 1s/5s/10s 的间隔显示视频内容，合理使用的话，可<br>以达到事半功倍的效果。</li>
<li>善用 jkl 快速浏览视频</li>
</ol>
<p>打关键字</p>
<ol>
<li>调出关键词管理器，然后设置关键词的快捷键，FCPX 可以快速选中一个片段中的片段（也可以通过 i/o 快捷键进行选择），选择 ctrl + num 打一个关键字。</li>
<li>这里也不需要把关键词的片段弄的特别的精准。因为其实放到视频里面还是可以前后拖拽的。（这只是个浅拷贝）</li>
</ol>
<p>评价系统</p>
<p>嗯？上了关键字的都是不错的镜头，似乎评价体系就没那么重要了</p>
<p>经过这些操作，之后，可以快捷的进行搜索。筛选出自己需要的片段。</p>
<p>嗯，由于项目本身并不算复杂。就关键字一波流搞定好了。</p>
<p>当然，题外话，如果我后期会基于这些素材做很多其他的事情的话，我就会认真的重新给片段<br>划分精细的关键字。</p>
<h2 id="0x04-前期剪辑"><a href="#0x04-前期剪辑" class="headerlink" title="0x04 前期剪辑"></a>0x04 前期剪辑</h2><p>笔者遇到的剪辑基本分为两种：</p>
<ol>
<li><p>踩情节类型</p>
</li>
<li><p>踩节奏类型</p>
</li>
<li><p>踩情节类型的剪辑只需要往上怼素材，然后依据磁力线调整即可。比如采访类，比如综艺。</p>
</li>
<li><p>踩节奏类型的剪辑这比较繁琐，因为要不断的增加，修改，删除片段。</p>
</li>
</ol>
<p>本次的剪辑就遇到了这个偏移问题，对于音乐的几个转节奏的地方，把视频 / 字幕放在磁力线上，删掉调整节奏前的片段，则导致后面的片段发生偏移。</p>
<p>为了解决偏移带来的踩节奏问题：</p>
<ol>
<li>设定一个标尺，奈何 FCPX 没有这个概念。于是，我采用了通过字幕来进行项目骨架的构建和注释。在音频的关键的地方，Marker 来注释.（经过仔细思考后，我认为可以弃用字幕的方式了，直接加一个调整层，在调整层上做 marker 来注释就好了）</li>
<li>当我要先空着预告片的前面，直接到后面编辑需要踩节奏的点位，则先 Q 放一个片段到这个踩节奏的点，然后创建故事线。在故事线里调整完毕之后，合并到主线上。</li>
<li>当我现在转到前面进行编辑的时候，Q 放一个片段到这个踩节奏的点，然后创建故事线，同上。</li>
<li>当我需要修改的时候把多个视频片段提出来，在视频上方调整好片段，合并到主线上。</li>
</ol>
<p>于是，骨架搭好，进入精细剪辑阶段吧。</p>
<h2 id="0x05-精细剪辑"><a href="#0x05-精细剪辑" class="headerlink" title="0x05 精细剪辑"></a>0x05 精细剪辑</h2><p>在精细剪辑的时候，记得先复制当前项目的一个快照。给快照名称升级个版本。</p>
<h3 id="5-1-调整片段"><a href="#5-1-调整片段" class="headerlink" title="5.1 调整片段"></a>5.1 调整片段</h3><ol>
<li>视频长度太长可以剪掉 (B)</li>
<li>速度过快过慢可以调整速度 (cmd+r)</li>
<li>滑动编辑 (Trim)</li>
<li>1 时间范围对了，似乎需要该片段的更前或者更后的部分.(T trim 一下） PS: 可以搭配 Marker 在细节上踩节奏。</li>
<li>2 片段和片段之间需要前面少点，后面多点 (T trim 一下）</li>
<li>移动故事线的片段而不发生位移 (postion 拖动 / lift + select 拖动）</li>
</ol>
<p>PS: 调整速度上 blade speed 是个利器</p>
<h3 id="5-2-调整效果"><a href="#5-2-调整效果" class="headerlink" title="5.2 调整效果"></a>5.2 调整效果</h3><h4 id="色彩改变-调色"><a href="#色彩改变-调色" class="headerlink" title="色彩改变 - 调色"></a>色彩改变 - 调色</h4><ol>
<li>苹果自带了平衡颜色。</li>
<li>手动调整</li>
</ol>
<h4 id="画面聚焦-晕影"><a href="#画面聚焦-晕影" class="headerlink" title="画面聚焦 - 晕影"></a>画面聚焦 - 晕影</h4><h4 id="关键帧动画"><a href="#关键帧动画" class="headerlink" title="关键帧动画"></a>关键帧动画</h4><h3 id="5-3-调整转场"><a href="#5-3-调整转场" class="headerlink" title="5.3 调整转场"></a>5.3 调整转场</h3><p>少用转场，尽量保持转场的一致性。</p>
<h3 id="5-5-调音"><a href="#5-5-调音" class="headerlink" title="5.5 调音"></a>5.5 调音</h3><h2 id="0x06-分享文件"><a href="#0x06-分享文件" class="headerlink" title="0x06 分享文件"></a>0x06 分享文件</h2><ol>
<li>直接输出 cmd + e</li>
<li>调用 Compressor 制定更多的输出规则</li>
</ol>
<h3 id="分享技巧"><a href="#分享技巧" class="headerlink" title="分享技巧"></a>分享技巧</h3><ol>
<li>素材很重要 – 『保留 Library』</li>
<li>作品已定型 – 『输出模板文件』</li>
<li>Compressor – 输出多格式的文件</li>
</ol>
<h2 id="0x07-其他"><a href="#0x07-其他" class="headerlink" title="0x07 其他"></a>0x07 其他</h2><h3 id="7-1-插入的四种方式"><a href="#7-1-插入的四种方式" class="headerlink" title="7.1 插入的四种方式"></a>7.1 插入的四种方式</h3><ol>
<li>连接：放置在磁力线上方，磁力线上方可以使用 N 进行片段之间的吸附</li>
<li>插入</li>
<li>追加</li>
<li>覆盖</li>
</ol>
<p>当 range 选中在主故事线选中时间范围内的话，可以插入某个时间段的视频</p>
<h3 id="7-2-提升格调"><a href="#7-2-提升格调" class="headerlink" title="7.2 提升格调"></a>7.2 提升格调</h3><p>提升格调的两种方法：</p>
<ol>
<li>镜头感</li>
<li>电影感</li>
</ol>
<h2 id="0xEE-参考"><a href="#0xEE-参考" class="headerlink" title="0xEE 参考"></a>0xEE 参考</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-11-25</strong> 初始化本文</li>
</ul>
]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Type Anotation 提升你的 Python 代码健壮性</title>
    <url>/2018/12/10/PythonTypeAnotation/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文是《提升你的 Python 项目代码健壮性和性能》系列的第一篇文章。</p>
<p>本系列仅仅从笔者的项目经历来讲解一些提升代码健壮性的姿势和小技巧。</p>
<p>本文目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▼ 0x00 前言 : section</span><br><span class="line">▼ 0x01 Gradual Typing : section</span><br><span class="line">		静态类型 VS 动态类型 : section</span><br><span class="line">		Gradual Typing &#x3D; 静态类型 + 动态类型 : section</span><br><span class="line">▼ 0x02 Python Typing 实战 - MyPY : section</span><br><span class="line">		MyPy : section</span><br><span class="line">		快速入门 : section</span><br><span class="line">▼ 0x03 常见问题 : section</span><br><span class="line">		如何忽略 mypy 警告 : section</span><br><span class="line">		循环导入 : section</span><br><span class="line">	0x04 Typing Anotation 项目最佳实践 : section</span><br><span class="line">▼ 0xEE 参考 : section</span><br><span class="line">		PEP : section</span><br><span class="line">		扩展文章 : section</span><br></pre></td></tr></table></figure>

<p>当我刚知道 Python 要添加类型的时候，我的内心是拒绝的。</p>
<p>但是，尝试了俩个疗程之后，腰也不疼了，腿也不疼了，走起路来都有劲了，嗯，真香。</p>
<p>为啥需要 Type Anotation?</p>
<p>因为软件开发需要协作，动态类型给人极大的灵活性，写的时候很爽，但如果解放了双手，撸起袖子一通写，自己写起来爽了，自己重构的时候或者其他人来看代码的时候，头发就会加速掉落。</p>
<p>加了 Typing 能解决这个问题嘛？不能，但适当的使用可以极大的提升代码的健壮性。</p>
<p>在如下的场景中，Typing 可以发挥作用</p>
<ol>
<li>在程序运行前进行类型检查</li>
<li>提供 typing 信息，当然，这带来的另一个巨大的优点就是让 IDE 可以分析出函数的参数类型以及返回值</li>
</ol>
<p>这样大大提升了代码量上来之后的类型检查不足带来的返工问题。</p>
<h2 id="0x01-Gradual-Typing"><a href="#0x01-Gradual-Typing" class="headerlink" title="0x01 Gradual Typing"></a>0x01 Gradual Typing</h2><p>在你刚入门一门编程语言的时候，我们常常说，Java 是强类型（静态类型）语言，Python 是弱类型（动态类型）语言</p>
<p>从这两位诞生开始，静态类型和动态类型就一直进行旷日持久的圣战。</p>
<p>然而，而现在的发展趋势是：</p>
<ul>
<li>静态类型的语言觉得自己太过静态，以至于写起来很啰嗦。于是引入了很多类型推断。 Java / Go</li>
<li>动态类型的语言觉得自己太过动态，以至于协作的过程中总是出现低级错误。于是引入了 Gradual Typing , Typescript / Flow / Python Type Annotation</li>
</ul>
<p>什么是 Gradual Typing?</p>
<p>Gradual typing 允许开发者仅在程序的部分地区使用 Annotate/Type. 即，既不是黑猫（静态）, 也不是白猫（动态），从而诞生了熊猫（动静结合）。</p>
<p>话说回来，要知道为什么这么搞，首先要知道动态类型和静态类型会给程序带来什么。</p>
<h3 id="静态类型-VS-动态类型"><a href="#静态类型-VS-动态类型" class="headerlink" title="静态类型 VS 动态类型"></a>静态类型 VS 动态类型</h3><p>静态类型的语言，比如在写 Java 的时候，如果你把一个 int 赋值给了 string 的变量，IDE 会通过<strong>类型检查器</strong>立即报错并告诉你，你这个值赋值错啦。这个就是 Java 程序的检查阶段。<br>动态类型的语言，比如在写 Python 的时候，如果不用一些额外的手段，这种低级的错误，并不会在检查时爆出来，只会在运行时爆出来。如果线上还是出这个问题，就蛋疼了。</p>
<p>为了进行友好的讨论，本人将精分成 Javaer 和 Pythonist, 通过两人对话的方式，来讨论类型。</p>
<ul>
<li><p>Javaer: 我先喝杯咖啡</p>
</li>
<li><p>Pythonist: 生命苦短，我用 Python。</p>
</li>
<li><p>Javaer: P 哥，请（为什么叫 P 哥？Python 1989 年出生，Java 1995 年）</p>
</li>
<li><p>Pythonist: J 弟，请</p>
</li>
<li><p>Javaer: 静态类型可以较低成本的提早捕获 BUG, 比如：</p>
<ol>
<li>你在写 Python 的时候，如果不用一些额外的手段，这种低级的错误，并不会在检查时爆出来，只会在运行时爆出来。</li>
<li>如果线上还是出这个问题，就蛋疼了。我这个类型检查可以在<strong>使用 IDE 的时候给我分析出方法参数的类型和返回值</strong>。所谓『上医治未病，中医治已病，下医治大病』, 防范于未然，善之善者也。</li>
</ol>
</li>
<li><p>Python: 等等，你小子还广征博引了还，首先，提早捕获 Bug, 我这里也有呀，比如我这里可以通过 flake8 来检查出有些没有定义的变量，<strong>仅仅是类型没有检查而已</strong>。其次，IDE 给我的补全又不是完全无法补全。弱一点罢了。你说的类型检查的问题：</p>
<ol>
<li>可以通过<strong>提升程序员的素质</strong>来解决这个问题，或者让他们长点脑子，别特么在这种低级错误上犯错误。</li>
<li>写测试来<strong>提升测试代码的代码覆盖率</strong>（这个我会在本系列的第二篇文章里深入讲解）来解决这个问题</li>
<li>看看写的代码检查时出现问题，我完全可以<strong>把代码拖到 IPython 里面跑一遍</strong>。这可不仅仅能解决类型不正确带来的问题，还能快速解决代码的逻辑问题</li>
</ol>
</li>
<li><p>Java: 关于你说的第三点，我完全可以提升测试代码的覆盖率。哎？似乎我这个开发测试成本也上来了。看来<strong>类型检查也不能解决这个问题</strong></p>
</li>
<li><p>Javaer: 来 P 哥</p>
<ol>
<li>静态类型确实以<strong>较低的成本</strong>解决了这种类型的问题，不是么？</li>
<li>并且，如果我其中一小块功能进行了修改，我总不能每次都跑 IPython 吧？我也不能因为想检查一下类型这种小操作就写测试代码覆盖一下？</li>
</ol>
</li>
<li><p>Python: 你每次修改，都要加类型，加类型，改类型，直到类型检查器完全接受。不麻烦嘛？面向类型检查器编程？</p>
</li>
<li><p>Javaer: 来，</p>
<ol>
<li>每次改代码的时候，又不是改一大推，你是小部分改的，能有多少项目是海量海量改？高内聚，低耦合，模块化开发。</li>
<li>好的代码是重构出来的，修改你的类型来让类型检查器通过。你的代码会被更好的组织起来。</li>
<li>我大 Java 就是面向重构的语言！我有 Jetbrain 的 IDE, 重构代码我怕谁</li>
</ol>
</li>
<li><p>Python: 来，你说的没错，</p>
<ol>
<li><strong>每次改代码的时候，又不是改一大推，你是小部分改的</strong>。这话你说的没错，我也能用啊，因为代码总是一小部分一小部分改的，所以，改完了跑一下 IPython 就结了。</li>
<li>好的代码是重构出来的，修改你的类型来让类型检查器通过。你的代码会被更好的组织起来。这话你说的也没错，可<strong>我重构的时候没有写测试就重构</strong>，是不是有点莽撞？写了测试了，我还要花时间在类型检查器上，不啰嗦么？</li>
<li>我也有 Jetbrain 的 IDE, 重构代码我又不是不能重构。</li>
</ol>
</li>
<li><p>Python: 再来，</p>
<ol>
<li>需求变更上来了，结果往往会出现，你本来是想专注于业务逻辑的更改的，但最后变成了大型<strong>为了让类型检查器通过类型检查而艰苦奋斗的现场</strong>, 我这个场景直接传 int/str/ 字典 / 传对象就很方便，你非要让我写四个函数来 override 方法。</li>
<li>虽然说，好代码确实可以通过重构出来，但动态语言表达能力强呀，你 Java HashMap 啰啰嗦嗦 put 写了半天，我 Python 一个 Dict 一把梭，看起来，清晰，改起来方便。</li>
</ol>
</li>
</ul>
<p>再比如说，</p>
<p>LeetCode 上面有一道题目，叫做最长连续 1</p>
<p>Input 是 [1,1,0,1,1,1] Output 是 3</p>
<p>我们尝试用 Python 来看下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_max_consecutive_ones</span>(<span class="params">num</span>):</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x), <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> nums]).split(<span class="string">&#x27;0&#x27;</span>)))</span><br></pre></td></tr></table></figure>

<p>我们尝试用 Java 来看下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (nums[i] == <span class="number">0</span>)</span><br><span class="line">				tmp = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				tmp += <span class="number">1</span>;</span><br><span class="line">				result = Math.max(tmp, result);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Javaer: 啊咧？P 哥你确实有点短啊！</li>
<li>Pythonist: 你敢说我短？你看看 java 的创始人的头发！</li>
</ul>
<p>『贴图』</p>
<ul>
<li><p>Javaer: 我不是那个意思，浓缩就是精华嘛，表达能力弱又怎么样，我 Javaer 可以直接封装好这个功能当成工具类用，从外部使用上用起来差不多好吧，从项目角度表达力并不是决定性因素，静态类型检查可以提早在编译阶段做字节码优化。你的 GIL…</p>
</li>
<li><p>Pythonist: 好了，咱就不要提 GIL 了</p>
</li>
<li><p>Pythonist: 动态类型不需要花时间写 type annotation, 写起来速度杠杠的。</p>
</li>
<li><p>Javaer: 静态语言一时爽，动态类型火葬场好伐？举个例子，太动态的东西，就是不好做类型推断，比如贵圈的著名的 sqlalchemy 做的那么动态，query.get() 结合 flask 来用，YouModel.query.get() 出来的 YouModel 你还要点进去查看一下具体属性，你要用 title 还是 name, 拼错了，怎么办？都不报错的。</p>
</li>
<li><p>Javaer: 静态类型迫使你思考程序的时候更加严谨认真，这将会提升你的代码质量。</p>
</li>
<li><p>Pythonist: 这点我是不服的，你只是花费了大量的时间在类型检查上，写的认不认真不完全取决于你编程的水平和态度好伐？假如你的观点成立，语言只是武器，峨眉师太拿一把倚天剑，不还是被张三丰空手取来？</p>
</li>
<li><p>Javaer: 但你不能否认，峨眉师太拿着倚天剑确实可以秒杀很多人。</p>
</li>
</ul>
<blockquote>
<p>旁白君：有道是，梅须逊雪三分白，雪却输梅一段香。</p>
</blockquote>
<ul>
<li>Guido van Rossum: 好了，我觉得类型不错，我在 dropbox 带领团队实现了 python 的 typing，python 3.7 内置哦。</li>
<li>Pythonist: 我自己打脸一下，动态类型花点时间写 type annotation 代码健壮性杠杠的。</li>
<li>Javaer: 你走开… 你怎么不去解决 GIL 的问题。</li>
</ul>
<h3 id="Gradual-Typing-静态类型-动态类型"><a href="#Gradual-Typing-静态类型-动态类型" class="headerlink" title="Gradual Typing = 静态类型 + 动态类型"></a>Gradual Typing = 静态类型 + 动态类型</h3><p>Gradual Typing 就是在动态语言的基础上，增加了可选的类型声明 (Type Annotation)</p>
<p>这对于我这种人是福音，</p>
<p>对于我个人而言，我是希望 Python 是有类型的</p>
<ol>
<li>作为某段程序的开发者和维护者，我可以提升我重构的速度。</li>
<li>作为某段程序的调用方，可以快速的知道我调用后得到的东西究竟是什么。</li>
</ol>
<p>但我又不希望这个声明不是强制性的</p>
<ol>
<li>我在构思程序的时候，想专注于接口的设计。在落实编码并且把代码写的足够的 dry 之后，在被调用的一些地方加上类型声明，这样可以提升我写代码的速度。</li>
</ol>
<h2 id="0x02-Python-Typing-实战-MyPY"><a href="#0x02-Python-Typing-实战-MyPY" class="headerlink" title="0x02 Python Typing 实战 - MyPY"></a>0x02 Python Typing 实战 - MyPY</h2><h3 id="MyPy"><a href="#MyPy" class="headerlink" title="MyPy"></a>MyPy</h3><p>mypy 是一个可选的静态分析器，官网介绍上说，mypy 将使你的程序更加易懂，调试和维护。</p>
<p>这个程序</p>
<ul>
<li>对于 PHP 有 Hack , 对 JavaScript 有 Flow 和 TypeScript, 对于 Python 有 MyPy</li>
<li>对于 Python, 则有 MyPy , MyPy 彼时还不是很成熟 (2016 年 10 之前）。</li>
</ul>
<p>Dropbox 的团队开发，Guido van Rossum 领导开发</p>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>本小节部分摘录 Type hints cheat sheet</p>
<p>建议读者收藏原网址 <a href="https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html">https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内置类型</span></span><br><span class="line">x: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">x: <span class="built_in">float</span> = <span class="number">1.0</span></span><br><span class="line">x: <span class="built_in">bool</span> = <span class="literal">True</span></span><br><span class="line">x: <span class="built_in">str</span> = <span class="string">&quot;test&quot;</span></span><br><span class="line">x: <span class="built_in">bytes</span> = <span class="string">b&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line">child: <span class="built_in">bool</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    child = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    child = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stringify</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; str:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; Iterable[int]:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>直接看起来似乎，加不加 typing 对现在的代码改善并不是很明显嘛。</p>
<p>我们可以给复杂类型起别名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如：</span><br><span class="line">def f() -&gt; Union[List[Dict[Tuple[int, str], Set[int]]], Tuple[str, List[str]]]:</span><br><span class="line">def b() -&gt; Union[List[Dict[Tuple[int, str], Set[int]]], Tuple[str, List[str]]]:</span><br><span class="line"></span><br><span class="line">AliasType &#x3D; Union[List[Dict[Tuple[int, str], Set[int]]], Tuple[str, List[str]]]</span><br><span class="line">def f() -&gt; AliasType:</span><br><span class="line">    ...</span><br><span class="line">def b() -&gt; AliasType:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>看起来还行，但还是没有感觉到很明显的代码质量改善。</p>
<p>好，再看一例，使用 ClassVar 禁止属性无法在实例上设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from typing import ClassVar</span><br><span class="line"></span><br><span class="line">class A:</span><br><span class="line">    x: ClassVar[int] &#x3D; 0  # Class variable only</span><br><span class="line"></span><br><span class="line">A.x +&#x3D; 1  # OK</span><br><span class="line"></span><br><span class="line">a &#x3D; A()</span><br><span class="line">a.x &#x3D; 1  # Error: Cannot assign to class variable &quot;x&quot; via instance</span><br><span class="line">print(a.x)  # OK -- can be read through an instance</span><br></pre></td></tr></table></figure>

<p>举个例子，flask-sqlalchemy, 可以通过 YouModel.query.get(id) 来拿到 YouModel 的实例，但 IDE 不能推断出这个实例是什么。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 方法一，Cast</span><br><span class="line">you_model_ins: YouModel &#x3D; YouModel.query.get(id)</span><br><span class="line"># 方法二，包装一下 get 方法</span><br><span class="line"></span><br><span class="line">class YouModel(base):</span><br><span class="line">	def get(id) -&gt; &quot;YouModel&quot;: # 注意这里的字符串</span><br><span class="line">		pass</span><br><span class="line">you_model_ins &#x3D; YouModel.get(id)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>细心的读者可能看到这里的 YouModel 的返回值类型居然使用了 YouModel 的字符串，如果是 Java 的话，是可以直接写 YouModel 的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 加上类型延迟求值</span><br><span class="line">from __future__ import annotations</span><br><span class="line"></span><br><span class="line">class YouModel(base):</span><br><span class="line">	def get(id) -&gt; YouModel:</span><br><span class="line">		pass</span><br><span class="line">you_model_ins &#x3D; YouModel.get(id)</span><br></pre></td></tr></table></figure>

<p>还有其他的用法，请参考 MyPY 的官方文档</p>
<h2 id="0x03-常见问题"><a href="#0x03-常见问题" class="headerlink" title="0x03 常见问题"></a>0x03 常见问题</h2><h3 id="如何忽略-mypy-警告"><a href="#如何忽略-mypy-警告" class="headerlink" title="如何忽略 mypy 警告"></a>如何忽略 mypy 警告</h3><p>有的地方的代码不进行检查的话会方便很多。</p>
<p>与 flake8 类似，在注释后面写上标志就可以忽略了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">youcode  # type: igonre</span><br></pre></td></tr></table></figure>

<h3 id="循环导入"><a href="#循环导入" class="headerlink" title="循环导入"></a>循环导入</h3><p>我现在有两个文件，一个是 user.py 另一个是 order.py</p>
<p>在 user 里面有个方法需要返回 order 里面的 Order 列表，order 里面有个 order.owner 需要返回 User 实例。</p>
<p>如果不用类型声明的话，在 user 需要 order 的时候 import 进来即可规避循环导入。</p>
<p>在使用类型声明之后，建议在 user 里面这么写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if TYPE_CHECKING:</span><br><span class="line">    from project.models.order import Order # noqa</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0x04-Typing-Anotation-项目最佳实践"><a href="#0x04-Typing-Anotation-项目最佳实践" class="headerlink" title="0x04 Typing Anotation 项目最佳实践"></a>0x04 Typing Anotation 项目最佳实践</h2><p>通过本文了解了基本的 Typing Anotation 的用法，其实效果还不够，本着对爱学习的读者老爷的负责的态度。</p>
<p>所谓『纸上得来终觉浅，绝知此事要宫刑』, 哦不『躬行』</p>
<p>推荐一个超级牛的大项目来让大家了解一下 typing annotation 的最佳实践。</p>
<p><a href="https://github.com/zulip/zulip/">https://github.com/zulip/zulip/</a></p>
<p>当然，从这个项目里面不仅仅能学到 typing annotation, 还能学到大项目下，牛 X 的公司的做法</p>
<ol>
<li>如何组织和划分模块</li>
<li>如何帮助开发者快速启用开发环境。</li>
<li>如何做测试，如何做 CI</li>
<li>如何优化自己的 Workflow</li>
</ol>
<p>有机会的话，我会挑其中的一小部分讲解一下。</p>
<h2 id="0xEE-参考"><a href="#0xEE-参考" class="headerlink" title="0xEE 参考"></a>0xEE 参考</h2><h3 id="PEP"><a href="#PEP" class="headerlink" title="PEP"></a>PEP</h3><ul>
<li>PEP 3107</li>
<li>PEP 483</li>
</ul>
<h3 id="扩展文章"><a href="#扩展文章" class="headerlink" title="扩展文章"></a>扩展文章</h3><ul>
<li><a href="http://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/">关于 gradual typing</a></li>
<li><a href="https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html">https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html</a></li>
<li><a href="https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/">https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/</a></li>
<li><a href="https://www.zhihu.com/question/21017354/answer/589574939">https://www.zhihu.com/question/21017354/answer/589574939</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-11-25</strong> 初始化本文</li>
<li><strong>2019-02-16</strong> 重新整理文章</li>
</ul>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>旅拍 Vlog CheatSheet</title>
    <url>/2018/12/23/VlogCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近剪辑了几个 Vlog, 借着这个机会复盘一下几次从拍摄到出片的流程。</p>
<h2 id="0x01-拍摄准备"><a href="#0x01-拍摄准备" class="headerlink" title="0x01 拍摄准备"></a>0x01 拍摄准备</h2><p>目前笔者的拍摄装备如下：</p>
<p>主力拍摄器材：</p>
<ol>
<li>Sony A6500</li>
</ol>
<p>辅助拍摄器材：</p>
<ol>
<li>GoPro Hero 7 Black</li>
</ol>
<p>相机的设备还氛围 + 三块电池 + 充电宝</p>
<ol>
<li>辅助 IPhone 8P</li>
<li>充电宝</li>
</ol>
<h2 id="0x02-工作流"><a href="#0x02-工作流" class="headerlink" title="0x02 工作流"></a>0x02 工作流</h2><p>可以找司机询问最佳的视角</p>
<h2 id="0xEE-参考"><a href="#0xEE-参考" class="headerlink" title="0xEE 参考"></a>0xEE 参考</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-11-25</strong> 初始化本文</li>
</ul>
]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>秒杀系统的一些注意点</title>
    <url>/2019/02/10/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><h2 id="秒杀常见问题"><a href="#秒杀常见问题" class="headerlink" title="秒杀常见问题"></a>秒杀常见问题</h2><h3 id="01-卖超问题"><a href="#01-卖超问题" class="headerlink" title="01 卖超问题"></a>01 卖超问题</h3><p>假设有 20 个商品要卖，1W 个请求打过来。</p>
<ol>
<li>SQL 加上数量判断，防止数量超掉</li>
</ol>
<p>应用层的检查，并发量上来，肯定要加行级锁，开销比较大。</p>
<ol start="2">
<li>redis 集合预先缓存好相关的数量，然后从 redis 上进行应用层的数量检查。</li>
</ol>
<p>然后走异步队列。</p>
<p>因为对于数据库来说，我只要 20 个请求即可，redis 起到了一个阻挡多余的请求穿透到 DB 中的作用。</p>
<p>即便如此，redis 依然可能会出现一些意外的情况，比如为负数，这个时候多打进去几个请求，变成 24 个，这个时候 MQ 的作用就出来了。排好队伍。</p>
<ol start="3">
<li>唯一索引</li>
</ol>
<p>数据库层的检查，可以从根本上防止问题</p>
<h3 id="02-缓存问题"><a href="#02-缓存问题" class="headerlink" title="02 缓存问题"></a>02 缓存问题</h3><ol>
<li>page 级别的缓存，由于 wsgi 协议本身在 flask 中返回的就是文本，所以，当作文本处理即可</li>
<li>obj 级别的缓存</li>
</ol>
<p>能走内存的走内存，能走 redis 就走 redis, 能通过 mq 削减峰值的就走 mq, 能走 mongodb 的走 mongodb, 最后是数据库。</p>
<h3 id="03-安全"><a href="#03-安全" class="headerlink" title="03 安全"></a>03 安全</h3><ol>
<li>验证码</li>
<li>接口防刷限流</li>
<li>秒杀接口隐藏</li>
</ol>
<h3 id="04-分布式锁"><a href="#04-分布式锁" class="headerlink" title="04 分布式锁"></a>04 分布式锁</h3><ol>
<li>不加锁，并发起来资源浪费</li>
<li>加锁，然而，线路抖动会导致不能及时释放锁</li>
<li>加过期锁，或者加带有时间的锁，然后重新获取锁。</li>
<li>redisson 封装好的方法</li>
</ol>
<h3 id="06-减少数据库访问时间"><a href="#06-减少数据库访问时间" class="headerlink" title="06 减少数据库访问时间"></a>06 减少数据库访问时间</h3><ol>
<li>首先考虑在 where 和 order by 设计的列上建立索引</li>
<li>索引越多，插入越慢，这个要做好平衡</li>
<li>避免过长的事务级操作，提高并发能力</li>
</ol>
<p>其他的可以参考 MySQL 的一些优化原则，油管上很多。</p>
<h3 id="07-分布式事务"><a href="#07-分布式事务" class="headerlink" title="07 分布式事务"></a>07 分布式事务</h3><p>分布式事务，准确来说，是分布式</p>
<h2 id="0xEE-参考"><a href="#0xEE-参考" class="headerlink" title="0xEE 参考"></a>0xEE 参考</h2><h3 id="PEP"><a href="#PEP" class="headerlink" title="PEP"></a>PEP</h3><ul>
<li><p>PEP 3107</p>
</li>
<li><p>PEP 483</p>
</li>
<li><p>PEP 3107</p>
</li>
<li><p>PEP 3107</p>
</li>
<li><p><a href="http://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/">关于 gradual typing</a></p>
</li>
</ul>
<p><a href="https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html">https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html</a></p>
<p><a href="https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/">https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/</a></p>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-11-25</strong> 初始化本文</li>
</ul>
]]></content>
      <categories>
        <category>系统设计</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅的使用 Windows 10</title>
    <url>/2019/04/13/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8Windows10/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近入手了 SP6, 于是把 2015 年写的这篇文章修订为 2019 版</p>
<blockquote>
<p>笔者已过了爱折腾的年纪，仅从提升工作效率方面来说。</p>
</blockquote>
<p>背景：</p>
<ol start="0">
<li>Pythonista &amp;&amp; Nodejs</li>
<li>工作机 MBP 2017 款机器</li>
<li>生活机 Surface Pro 6, 轻办公，有时也用来调试 Windows 上的程序。</li>
</ol>
<p>本文目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▼ 0x00 前言 : section</span><br><span class="line">	0x01 文件整理 : section</span><br><span class="line">▼ 0x02 自带功能 : section</span><br><span class="line">		2.1 快捷键 : section</span><br><span class="line">		2.2 触摸板 : section</span><br><span class="line">		2.3 Win+R -- 运行 : section</span><br><span class="line">▼ 0x03 必备软件 : section</span><br><span class="line">		3.1 文件管理 : section</span><br><span class="line">		3.2 资讯浏览 : section</span><br><span class="line">		3.3 学习软件 : section</span><br><span class="line">		3.4 播放器 : section</span><br><span class="line">	0x04 Autohotkey : section</span><br><span class="line">▼ 0x05 编程配置 : section</span><br><span class="line">		5.1 Windows Subsystem Linux : section</span><br><span class="line">		5.2 终端 : section</span><br><span class="line">		5.3 Python : section</span><br><span class="line">		5.4 Node : section</span><br><span class="line">		5.5 其他 : section</span><br><span class="line">	0x06 实用主义的工具论 : section</span><br><span class="line">	0xEE 后续 : section</span><br></pre></td></tr></table></figure>

<h2 id="0x01-文件整理"><a href="#0x01-文件整理" class="headerlink" title="0x01 文件整理"></a>0x01 文件整理</h2><p>文件整理一般从类型上进行划分子文件夹。</p>
<p>贴上我的几张图来看一下我的文件夹命名：</p>
<p>一级文件夹如下：<br><img src="http://upload-images.jianshu.io/upload_images/52890-b6a5322beca48d2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>二级文件夹如下：<br><img src="http://upload-images.jianshu.io/upload_images/52890-656d90e16abaff66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>三级或者三级以上文件夹</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-bdf7349fccedda52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>文件命名规范（因为涉及到后面使用 Everything，所以我们的命名尽量追求便于搜索）</p>
<p>举个例子，对于读书笔记 ：读书笔记、_设计模式、_20150303_v2.1.xmind</p>
<p>对于照片这种文件比较多的，优先命名文件夹，其次按照地址人物日期命名，比如：大明湖胖、_夏雨荷、_20150101</p>
<blockquote>
<p>无需刻意追求命名，方便搜索，方便管理就好。</p>
</blockquote>
<p>不妨参考下面文章：</p>
<p><a href="http://www.zhihu.com/question/21537488">电脑上的文件夹该如何命名（整理）才能做到很久都不用重新整理的那种？ - 文件整理</a></p>
<p>由于 Windows 的文件没有标签系统。则可以从命名上强行打上标签，比如加上年份。</p>
<p>嗯这样你在搜索笔记的时候在 Everything 里面只需要键入 2015 笔记就可以查看 2015 笔记文件。</p>
<p>是不是很方便？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-f4a815755900d627.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-1fb3ac3766e59044.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>当然桌面上尽量少放或者不放文件夹，我的桌面上仅仅有一个链接到 OneDrive 里面的 TEMP 文件夹的快捷方式，用于存放临时没有整理的文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-be22e9252b149d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h2 id="0x02-自带功能"><a href="#0x02-自带功能" class="headerlink" title="0x02 自带功能"></a>0x02 自带功能</h2><h3 id="2-1-快捷键"><a href="#2-1-快捷键" class="headerlink" title="2.1 快捷键"></a>2.1 快捷键</h3><p>能看到本文的读者应该都可以搜索到这些东西。就不赘述了。</p>
<p>仅仅说一些重点快捷键。Win+ 数字键 把常用的软件附在任务栏上。</p>
<p>建议四个以内，方便单手操作。Win+X Alt+tab 切换窗口 Win+R 运行</p>
<h3 id="2-2-触摸板"><a href="#2-2-触摸板" class="headerlink" title="2.2 触摸板"></a>2.2 触摸板</h3><p>嗯，没有苹果的触摸板好用。但 Windows 的快捷键好用多了。</p>
<h3 id="2-3-Win-R-–-运行"><a href="#2-3-Win-R-–-运行" class="headerlink" title="2.3 Win+R – 运行"></a>2.3 Win+R – 运行</h3><p>主要用于启动一些程序或者一些 DOS 小命令。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-d39ea3f078f1d800.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>我将所有的便携与非便携软件的快捷方式放在这里并且配置环境变量。</p>
<p>比如，我需要启动为知笔记，我就仅仅需要闭上眼睛输入 Win+R + wz +<Enter></p>
<p>PS: 景观</p>
<p>其他软件同理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sublime text 打开需要输入 </span></span><br><span class="line">Win+R + st +&lt;Enter&gt;</span><br><span class="line"><span class="comment"># 欧路词典 打开需要输入 </span></span><br><span class="line">Win+R + ol +&lt;Enter&gt;</span><br><span class="line"><span class="comment"># 这里省去若干软件打开方式。</span></span><br></pre></td></tr></table></figure>

<p>关于 Win+R 你可以参考善用佳软 <a href="http://xbeta.info/win-run.htm">最绿色最高效，用 win+r 启动常用程序和文档</a> 的介绍。</p>
<h2 id="0x03-必备软件"><a href="#0x03-必备软件" class="headerlink" title="0x03 必备软件"></a>0x03 必备软件</h2><h3 id="3-1-文件管理"><a href="#3-1-文件管理" class="headerlink" title="3.1 文件管理"></a>3.1 文件管理</h3><ul>
<li><p>图片方面，如果不是 RAW 格式，可以考虑使用 Eagle 这个神器</p>
</li>
<li><p>文字方面，如果是简单的图文素材，可以直接丢到印象笔记 / 有道云笔记里。</p>
</li>
<li><p>文档管理，如果是比较 Geek 一些的话，可以考虑用 TotalCMD 管理文档，Everything 快速搜索</p>
</li>
<li><p>PS: 没有足够的需求，不要搞 TC.</p>
</li>
<li><p>PS2: 无坚不摧，为快不破。 everything 是搜索效率最快的软件。没有之一。</p>
</li>
</ul>
<h3 id="3-2-资讯浏览"><a href="#3-2-资讯浏览" class="headerlink" title="3.2 资讯浏览"></a>3.2 资讯浏览</h3><ul>
<li>浏览器 Chrome / 新版 Edge 浏览器</li>
<li>欧陆词典：可以外挂其他的开源词库，查词速度超级快。</li>
</ul>
<h3 id="3-3-学习软件"><a href="#3-3-学习软件" class="headerlink" title="3.3 学习软件"></a>3.3 学习软件</h3><ul>
<li>Xmind</li>
<li>OneNote</li>
<li>Office</li>
</ul>
<h3 id="3-4-播放器"><a href="#3-4-播放器" class="headerlink" title="3.4 播放器"></a>3.4 播放器</h3><ul>
<li>PotPlayer</li>
<li>foobar2000 – 逼格提升必备</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-1d8bc57d69948d60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<ul>
<li>网易云音乐 – 这货真的不错。</li>
</ul>
<h2 id="0x04-Autohotkey"><a href="#0x04-Autohotkey" class="headerlink" title="0x04 Autohotkey"></a>0x04 Autohotkey</h2><p>早年刚接触这个软件的时候，是为了在魔兽争霸里面快速输入文本….</p>
<p>但这个软件可以帮你少装很多软件，</p>
<p>比如：</p>
<ol>
<li>可以针对快捷键进行编程，</li>
<li>节省大量的时间，比如一大段文字中有一个网址，你需要访问它，我的解决方法就是选中那些文字，然后一个 Win+b，直接打开 chrome 进行搜索，如果文字中没有网址，那么对选中文字进行百度。同理可以推淘宝，京东 github 等等。</li>
<li>你需要大量的文本编辑，但是上下左右离自己的工作区比较远，你可以小拇指按住大写锁定按键，然后使用 HJKL 进行移动。</li>
</ol>
<p>而且，作为曾经的 Geek , 不写点代码定制一下使用流程，你都不好意思说优雅。</p>
<p>教程参考 <a href="http://zhuanlan.zhihu.com/autohotkey">AutoHotkey 之美 - 知乎专栏</a></p>
<p>新手可以先拿我搜刮整理的 AHK 代码看看。<a href="https://github.com/twocucao/ChortHotKey">twocucao/ChortHotKey · GitHub</a></p>
<p>PS：AHK/TotalCMD 神级软件，都是入门容易精通难的深坑，想调教好也不是想象中呢么简单的，但，书到用时方恨少，你可以先挑一些使用。如果你以后有不少的文件需要管理，在未来，你一定会用到。</p>
<blockquote>
<p>PS: 站在 2019 年回头看，其实 AHK 的语法还是蛮糟糕的。相比于顺手打出很多快捷键。倒不如先优化自己的工作流程。甚至，很多 AHK 的场景完全可以用 Python 之类的语言来写。当我在 Windows 上的时候一味追求 APM, 即高效的操作，但其实最高效的还是自己的思路清晰，想好了再动手。</p>
</blockquote>
<p>毕竟，AHK 作为脚本语言，确实语法不美，数据结构也少，没有主流编程语言的社区支持。</p>
<p>嗯，其实还是推荐学 Python</p>
<h2 id="0x05-编程配置"><a href="#0x05-编程配置" class="headerlink" title="0x05 编程配置"></a>0x05 编程配置</h2><h3 id="5-1-Windows-Subsystem-Linux"><a href="#5-1-Windows-Subsystem-Linux" class="headerlink" title="5.1 Windows Subsystem Linux"></a>5.1 Windows Subsystem Linux</h3><p>如何配置 WSL （我死了？哈哈哈哈好逗的缩写）</p>
<p><a href="https://zhuanlan.zhihu.com/p/49227132">https://zhuanlan.zhihu.com/p/49227132</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/47733615">https://zhuanlan.zhihu.com/p/47733615</a></p>
<h3 id="5-2-终端"><a href="#5-2-终端" class="headerlink" title="5.2 终端"></a>5.2 终端</h3><p>cmder 相当于 windows 上的 iterm</p>
<p><a href="https://github.com/cmderdev/cmder">https://github.com/cmderdev/cmder</a></p>
<h3 id="5-3-Python"><a href="#5-3-Python" class="headerlink" title="5.3 Python"></a>5.3 Python</h3><p><a href="https://www.anaconda.com/distribution/#download-section">https://www.anaconda.com/distribution/#download-section</a></p>
<p>由于笔者要调试 Win32 程序，而大部分这些 dll 文件都是在 32 位的情况下编译出来的。</p>
<h3 id="5-4-Node"><a href="#5-4-Node" class="headerlink" title="5.4 Node"></a>5.4 Node</h3><p><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
<h3 id="5-5-其他"><a href="#5-5-其他" class="headerlink" title="5.5 其他"></a>5.5 其他</h3><ul>
<li>beyond compare 代码比对</li>
<li>jetbrain</li>
<li>vscode</li>
</ul>
<h2 id="0x06-实用主义的工具论"><a href="#0x06-实用主义的工具论" class="headerlink" title="0x06 实用主义的工具论"></a>0x06 实用主义的工具论</h2><p>当你选择用一个工具的时候，务必把精力放在解决问题上。</p>
<p>能满足你的要求，就是好工具，须知『梅须逊雪三分白，雪却输梅一段香』</p>
<p>孰高孰下取决于使用者。</p>
<blockquote>
<p>你是张三丰，你就能徒手夺来灭绝师太的倚天剑。</p>
</blockquote>
<p>并不是说用了一个操作系统，用了某个软件，就会显得自己多么高明，如果不能给日常工作生活提高效率，让自己节省时间，再好的工具，那又有什么意义呢？</p>
<blockquote>
<p>抓到老鼠的猫才是好猫呀！</p>
</blockquote>
<h2 id="0xEE-后续"><a href="#0xEE-后续" class="headerlink" title="0xEE 后续"></a>0xEE 后续</h2><blockquote>
<p>2016-01-04 已换 Macbook Pro, 依然挂念 Windows.<br>2017-05-01 已换 2016 年 Macbook Pro With Multi-Touchbar.<br>2019-04-13 新增 SP6 作为生活机。</p>
</blockquote>
<p>ChangeLog:</p>
<ul>
<li>2017-03-08 09:32:15 整理知乎回答，搬运到博客上。</li>
<li>2017-05-01 09:32:15 补充现在使用的电脑信息</li>
<li>2017-06-10 09:32:15 重新排版，增加后续章节。</li>
<li>2019-04-13 13:57:02 重新排版</li>
</ul>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>如何写出整洁的 Python 代码 中</title>
    <url>/2018/08/29/2019-clean-code-part02/</url>
    <content><![CDATA[<p>本文是《提升你的 Python 项目代码健壮性和性能》系列的第七篇文章。</p>
<p>第一篇，讲的是如何 用 Type Annotation 提升你的 Python 代码健壮性<br>第二篇，讲的是 如何通过测试提升 Python 代码的健壮性<br>第三篇，讲的是在一定并发量的情况下，如何保证 Django 项目的数据一致性<br>第四篇，讲的是如何定位性能问题 这几招，让你快速提升 Python 项目的性能<br>第五篇，讲的是 为你的项目快速搭建 ELKFA 日志系统<br>第六篇，《如何写出整洁的代码 上》 从变量命名 / 函数 / 注释整洁 / 格式整洁上写出干净的代码</p>
<p>目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▼ 如何写出整洁的 Python 代码 中 : section</span><br><span class="line">    0x00 前言 : section</span><br><span class="line">    0x01 避免过深的缩进 : section</span><br><span class="line">    0x02 使用异常 : section</span><br><span class="line">    0x03 类与 OOP : section</span><br><span class="line">  ▼ 0x04 SOLID 设计原则 : section</span><br><span class="line">      单一职责 : section</span><br><span class="line">      开闭原则 : section</span><br><span class="line">      里氏替换原则 : section</span><br><span class="line">      接口隔离原则 : section</span><br><span class="line">      依赖反转原则 : section</span><br><span class="line">    0x05 边界和第三方库的挑选 : section</span><br><span class="line">    0xDD 结论 : section</span><br><span class="line">    0xEE 参考 : section</span><br></pre></td></tr></table></figure>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>上篇地址在这里 <a href="https://zhuanlan.zhihu.com/p/59510165">https://zhuanlan.zhihu.com/p/59510165</a></p>
<p>还是通过代码上的一些小技巧和一些原则来让代码更加整齐。</p>
<h2 id="0x01-避免过深的缩进"><a href="#0x01-避免过深的缩进" class="headerlink" title="0x01 避免过深的缩进"></a>0x01 避免过深的缩进</h2><p>场景，你在做一个 B2B2C 的商城系统。商家的活动需要在某些比较严格的条件下才能参与（假设有五个字段吧）。</p>
<p>如果不动手捋一捋判断的路径，上来就动手写代码，则很容易写出如下的代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if cond1:</span><br><span class="line">	dosomething()</span><br><span class="line">	if cond2:</span><br><span class="line">		dosomething()</span><br><span class="line">		if cond3 and cond4:</span><br><span class="line">			dosomething()</span><br><span class="line">			else:</span><br><span class="line">				dosomething()</span><br><span class="line">			if condx:</span><br><span class="line">			dosomething()</span><br><span class="line">else:</span><br><span class="line">	if cond2:</span><br><span class="line">		dosomething()</span><br><span class="line">		if cond3 and cond4:</span><br><span class="line">			dosomething()</span><br><span class="line">			if condx:</span><br><span class="line">			dosomething()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>想想你这个时候才判断了 5 个字段… 如果想都不想就开始写这种代码的话，就做好修改的时候崩溃吧。</p>
<p>当你写出 if 超过两层缩进的时候，代码的复杂度就值得注意了。</p>
<p>这个时候，应该火速的拿出纸和笔出来，快速的捋一捋所有的变量和情况，</p>
<p>『以减少缩进为目标』</p>
<p>能提前判断掉的就提前判断掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 能提前判断掉的就提前判断掉</span><br><span class="line">if cond2:</span><br><span class="line">	raise AlreadPaid():</span><br><span class="line">if cond3:</span><br><span class="line">	raise ActivityExhaused():</span><br><span class="line">if cond4:</span><br><span class="line">	raise ActivityCancel():</span><br></pre></td></tr></table></figure>

<p>代码的缩进越浅，代表着代码越容易维护，用学长的话说，老手才知道『九浅一深』的奥妙……</p>
<h2 id="0x02-使用异常"><a href="#0x02-使用异常" class="headerlink" title="0x02 使用异常"></a>0x02 使用异常</h2><p>使用异常而不是状态码，这点重点点名一下 Go 语言的状态码….</p>
<p>遇到异常返回状态码写业务的话，很容易抓狂。如果你在深层抛出一个错误，使用状态码的话，必须一层一层的返回状态码。</p>
<ol>
<li>遇到问题，抛出异常，raise ApiException 。就可以在上层捕获错误进行处理。这样的<br>  话，就没有必要每次都在函数签名上返回状态码了。</li>
<li>让代码更佳清晰的是 try except finally 机制。try 块定义了一个范围，try 中的结果可以看执行中有没有遇到一些奇奇怪怪的情况，然后把 try 块里面的东西取消掉。甚至抛出一个错误，丢到 catch 里面执行。这种接近于事务的做法是状态码机制没法比的。</li>
</ol>
<p>拿第一小节的代码来说，可以在最深层抛出异常，然后在最外面统一处理异常，有些异常可能只是报 apiexception, 有的异常可能还要针对情况打日志，或者有的情况是你在写代码的时候没有考虑到的情况，都可以进行各种灵活的处理。</p>
<p>这样的话，代码就非常的清晰了。</p>
<h2 id="0x03-类与-OOP"><a href="#0x03-类与-OOP" class="headerlink" title="0x03 类与 OOP"></a>0x03 类与 OOP</h2><p>注意！</p>
<ol>
<li>OOP 语言让封装 / 继承 / 多态更佳方便快捷安全。</li>
<li>封装 / 多态 / 继承 并不是 OOP 对象的专利，实际上利用指针 C 也可以写出来具备封装 / 继承 / 多态的程序。只是相对危险一些罢了。</li>
</ol>
<p>比如，你有这么个场景，计算购物车里面东西的价格：</p>
<ol>
<li>面向过程思考方式，用户我选了一些商品，然后把商品放到购物车里，然后我算一下物品价格。</li>
<li>OOP 思考方式，用户我需要一个购物车，帮我把这些物品放到购物车里面，购物车告诉我价格。这个时候，你封装一个购物车类会比较合适。</li>
</ol>
<p>你这个时候就问了，这不就是一个 calcPrice(cart) 和 cart.calcPrice 的区别么？</p>
<p>区别在哪？</p>
<ol>
<li>『真实世界建模』购物车的是一个对真实世界的建模。</li>
<li>『职责转移』。计算价格这件事情就是『购物车』这个 Object 的事情了。</li>
<li>封装性：我不需要维护一个物品集合。都交给购物车来做这件事情。</li>
</ol>
<p>什么情况下需要类，用 OOP 的方式思考是合理的，明显的，清晰的，就可以了。</p>
<p>当然，采用了 OOP, 可以更快的结合继承 / 多态来完成『依赖反转』。</p>
<p>这个名词听起来不明觉厉，但其实很简单。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># base.py</span><br><span class="line">class Human:</span><br><span class="line">	def perform(self):</span><br><span class="line">		pass</span><br><span class="line"></span><br><span class="line"># foo&#x2F;man.py</span><br><span class="line">class Man(Human):</span><br><span class="line">	def perform(self):</span><br><span class="line">		print(&quot;大哥，真不会唱歌&quot;)</span><br><span class="line"></span><br><span class="line"># bar&#x2F;woman.py</span><br><span class="line">class Woman(Human):</span><br><span class="line">	def perform(self):</span><br><span class="line">		print(&quot;大哥，真不会跳舞&quot;)</span><br></pre></td></tr></table></figure>

<p>如果老大哥让你跳舞，就必须要把你的代码给 import 到老大哥的源代码里面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bar&#x2F;bigbother.py</span><br><span class="line">from foo.man import man_instance</span><br><span class="line">from bar.woman import woman_instance</span><br><span class="line"></span><br><span class="line">man_instance.perform()</span><br><span class="line">woman_instance.perform()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样会带来一个问题，产生了源代码上面的依赖。这样带来结果是老大哥依赖于几个具体 man 和 woman, 这是不合理的，应该是铁打的老大哥，流水的 man 和 woman</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 源码不依赖 bigbother.py</span><br><span class="line"></span><br><span class="line">def order_perform(h):</span><br><span class="line">	h.perform()</span><br><span class="line"></span><br><span class="line">humans &#x3D; scan_humans()</span><br><span class="line"></span><br><span class="line">for human in humans:</span><br><span class="line">	order_perform(human)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用多态，则将这个问题完美的解决了。当然，考虑到动态语言，本身就可以很『多态』…. 你甚至<br>都不需要继承了…</p>
<p>策略层与实现完美分离。甚至可以分开进行独立部署。</p>
<p>结论：</p>
<ol>
<li>对真实世界的建模</li>
<li>代码清晰为主，如果能用简单函数解决的事情，就不要封装成类。</li>
<li>以多态为手段对源代码中的依赖关系进行控制的能力。借此，可以构建<br>  出插件式架构，让高层策略性组件和底层实现性组件分离。底层实现可以编译成插件，实<br>  现独立于高层组件的开发和部署。</li>
</ol>
<h2 id="0x04-SOLID-设计原则"><a href="#0x04-SOLID-设计原则" class="headerlink" title="0x04 SOLID 设计原则"></a>0x04 SOLID 设计原则</h2><ul>
<li>SRP 单一职责 原则</li>
<li>OCP 开闭原则</li>
<li>LSP 里式替换原则</li>
<li>ISP 接口隔离原则</li>
<li>DIP 依赖反转原则</li>
</ul>
<p>原则是原则，是追求，是启迪思路的思想，但也要随机应变。</p>
<ol>
<li>假如你不了解业务，强行用依赖反转原则写了抽象层，后面 PM 过来说，我有这么一个思路。那么，你的代码写起来就很痛苦了。</li>
<li>假如你不了解场景，在使用单一职责的时候，往往就会业务区分不明确。</li>
</ol>
<p>在现实场景中，往往是先保持足够的清晰简单的代码，随着代码的演进，用上面的原则再次思<br>考一下可不可以做的更好。</p>
<h3 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h3><p>比如说，单一职责原则听起来很简单，一个函数只完成一个功能（事情）。</p>
<p>但现实情况是这种往往只是一个追求，站在不同的角度有不同的看法：</p>
<p>比如说，</p>
<ol>
<li>你说，你今天想学习。这是一件事情。</li>
<li>你说，你今天上午想学习数学。这是一件事情。</li>
<li>你说，你今天上午想学习高数第三章，接着做完笔记，回头抽卡默背一遍公式。这是三<br>  件事情，并且也可以是一件事情。</li>
</ol>
<p>你的拆分粒度决定了一件事情的指代范围。</p>
<h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>开闭原则强调的事情是计算机系统应该在不需要修改的前提下被扩展。将系统划分为一系列组件，并且将这些组件的依赖关系按照层次结构进行组织，使得高阶组件不会因为低阶组件被修改而受到影响</p>
<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>在不改变软件行为的基础上，衍生类可以替换掉基类</p>
<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>任何层次的软件设计如果依赖了它并不需要的东西的时候，就会带来意料之外的麻烦。</p>
<h3 id="依赖反转原则"><a href="#依赖反转原则" class="headerlink" title="依赖反转原则"></a>依赖反转原则</h3><p>什么叫做依赖反转？</p>
<p>依赖反转就是设计软件的时候设计稳定的抽象层。针对抽象的东西编程。</p>
<h2 id="0x05-边界和第三方库的挑选"><a href="#0x05-边界和第三方库的挑选" class="headerlink" title="0x05 边界和第三方库的挑选"></a>0x05 边界和第三方库的挑选</h2><p>在软件包膨胀的今天，应该如何挑选第三方库呢？</p>
<p>我给出几个挑选的原则。</p>
<ol>
<li>靠谱依赖原则：如果 flask 是靠谱的，那么，flask 依赖的 click 包，werkzeuk 包一定是靠谱的。</li>
<li>浓缩精华原则：如果一个库依赖少，代码清晰简单，那么可以采用。</li>
<li>活跃维护原则：如果维护很活跃，证明前景相对较好。</li>
<li>多人维护原则：如果是多人维护，则不会因一个人的喜好和个人状态而断了维护。别问我怎么知道的，都是泪</li>
</ol>
<p>挑选有这个原则，那么，使用有什么原则么？</p>
<p>就一条，尽量减少依赖库对你现有代码的侵入性。</p>
<p>比如，你用了 cryptography 之后，应该封装一个接口用来调用 cryptography 防止以后这个项目挂了，这样你可以只修改该接口，和 pycrypto 对接。</p>
<p>这和里氏替换的思路也是比较类似的</p>
<h2 id="0xDD-结论"><a href="#0xDD-结论" class="headerlink" title="0xDD 结论"></a>0xDD 结论</h2><blockquote>
<p>所谓『不能谋万世者不能谋一时，不能谋全局者不能谋一隅』</p>
</blockquote>
<p>在软件开发中，其实最重要的过程是梳理流程，流程梳理的足够清楚，代码就足够简单。</p>
<p>不管是避免深缩进，还是使用异常，还是 Solid 原则。都是建立在全局观足够高，对当前的流程非常熟悉的基础上的。</p>
<p>当然，考虑到需求变更的不确定性，代码还是足够简单清晰为上策。</p>
<h2 id="0xEE-参考"><a href="#0xEE-参考" class="headerlink" title="0xEE 参考"></a>0xEE 参考</h2><ul>
<li>《架构整洁之道》</li>
<li>《代码整洁之道》</li>
<li>Photo by Joseph Kellner on Unsplash</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>『如何阅读一本书』读书笔记</title>
    <url>/2017/02/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>选择了这本书进行精读是有原因的：</p>
<blockquote>
<p>在一个需要大量阅读的时代里，读东西更加有策略。</p>
</blockquote>
<p>记得大约是初三的考试比赛，监考老师发了卷子，我们这些人拿到卷子捋起袖子就是写，而监考老师说了一句话：</p>
<blockquote>
<p>先看看卷子，然后再写，不要上来就做题。</p>
</blockquote>
<p>虽然那次考试并不算理想，最大的收获应该就是这句话。</p>
<blockquote>
<p>通过’先预估，然后再做’的意识，我应该是少走了一些弯路的。至少工作效率稍微提升了一些。</p>
</blockquote>
<p>但，有了这个先预估一下，然后再做的意识可以减少很多问题，然而并不能更好解决的问题。因为意识这玩意，不是方法，不是策略。知道考虑火候，不懂得把握火候照样做不出好菜。</p>
<a id="more"></a>

<p>对应到我看这本书的目的，即是，当需要我能在捋起袖子干之前，找到一个更好的策略，对读书，有一个更好的方法。而不是仅仅是埋下头一通看。</p>
<p>也是为了给自己更好的啃源码，看文档激发一些更好的灵感。</p>
<p>这是从非专业领域里面找灵感的一种方式，即所谓：汝果欲学诗，工夫在诗外。</p>
<h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again -->
<p><strong>Table of Contents</strong></p>
<ul>
<li><a href="#-">-</a></li>
<li><a href="#%E6%9C%AC%E6%96%87%E7%9B%AE%E5%BD%95">本文目录</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E7%9B%AE%E5%BD%95%E7%AE%80%E8%AF%84">《如何阅读一本书》目录简评</a></li>
<li><a href="#%E9%97%AE%E4%B8%8E%E7%AD%94">问与答</a><ul>
<li>[CQ1: 本书整体讲了什么？](#cq1- 本书整体讲了什么)</li>
<li>[SQ1: 较好的阅读一本书的步骤](#sq1- 较好的阅读一本书的步骤)<ul>
<li>[确定要补充那些知识 / 技能体系](#确定要补充那些知识 – 技能体系)</li>
<li>[筛选书籍阶段 : 过滤不适合的书](#筛选书籍阶段 – 过滤不适合的书)</li>
<li>[检视阅读阶段 : 判断一本书的质量](#检视阅读阶段 – 判断一本书的质量)<ul>
<li>[检视阅读阶段 STEP1 : 大体定位这本书。](#检视阅读阶段 -step1– 大体定位这本书)</li>
<li>[检视阅读阶段 STEP2 :](#检视阅读阶段 -step2-)</li>
<li><a href="#%E6%A3%80%E8%A7%86%E9%98%85%E8%AF%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AF%E5%8C%BA%EF%BC%9A">检视阅读的一些误区：</a></li>
<li>[分析阅读阶段 : 全方位吃透这本书](#分析阅读阶段 – 全方位吃透这本书)<ul>
<li><a href="#%E5%88%86%E6%9E%90%E9%98%85%E8%AF%BB%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%89%BE%E5%87%BA%E4%B8%80%E6%9C%AC%E4%B9%A6%E5%9C%A8%E8%B0%88%E5%86%99%E4%BB%80%E4%B9%88%E7%9A%84%E8%A7%84%E5%88%99">分析阅读第一阶段：找出一本书在谈写什么的规则</a></li>
<li><a href="#%E5%88%86%E6%9E%90%E9%98%85%E8%AF%BB%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%EF%BC%9A%E8%AF%A0%E9%87%8A%E4%B8%80%E6%9C%AC%E4%B9%A6%E7%9A%84%E5%86%85%E5%AE%B9%E7%9A%84%E8%A7%84%E5%88%99">分析阅读第二阶段：诠释一本书的内容的规则。</a></li>
<li><a href="#%E5%88%86%E6%9E%90%E9%98%85%E8%AF%BB%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%EF%BC%9A%E8%AF%84%E8%AE%BA%E4%B8%80%E6%9C%AC%E4%B9%A6%E7%9A%84%E8%A7%84%E5%88%99">分析阅读第三阶段：评论一本书的规则</a></li>
</ul>
</li>
<li>[主题阅读阶段 : 纳入自己的知识体系](#主题阅读阶段 – 纳入自己的知识体系)</li>
</ul>
</li>
</ul>
</li>
<li>[SQ2: 上面关于阅读一本书的步骤是适用于所有书，即使通用的步骤吗？](#sq2- 上面关于阅读一本书的步骤是适用于所有书即使通用的步骤吗)<ul>
<li><a href="#%E5%88%86%E6%9E%90%E9%98%85%E8%AF%BB%E4%B9%8B%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E5%AE%9E%E7%94%A8%E5%9E%8B%E7%9A%84%E4%B9%A6">分析阅读之如何阅读实用型的书</a></li>
<li><a href="#%E5%88%86%E6%9E%90%E9%98%85%E8%AF%BB%E4%B9%8B%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E5%8E%86%E5%8F%B2%E4%B9%A6">分析阅读之如何阅读历史书</a></li>
</ul>
</li>
<li>[SQ3: 关于读书的有哪些误区](#sq3- 关于读书的有哪些误区)<ul>
<li><a href="#%E9%80%9F%E8%AF%BB">速读</a></li>
<li><a href="#%E9%9A%8F%E4%BE%BF%E7%BF%BB%E7%BF%BB">随便翻翻</a></li>
<li><a href="#%E9%99%B7%E5%85%A5%E7%BB%86%E6%9E%9D%E6%9C%AB%E8%8A%82">陷入细枝末节</a></li>
</ul>
</li>
<li>[EQ1: 为什么要**重新学习**如何阅读书籍的策略与方法](#eq1- 为什么要重新学习如何阅读书籍的策略与方法)</li>
</ul>
</li>
<li><a href="#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5">相关链接</a></li>
</ul>
<!-- markdown-toc end -->

<h2 id="《如何阅读一本书》目录简评"><a href="#《如何阅读一本书》目录简评" class="headerlink" title="《如何阅读一本书》目录简评"></a>《如何阅读一本书》目录简评</h2><p>本书的翻译版书籍的目录如下：</p>
<ul>
<li>第一篇：阅读的层次<ul>
<li>ch01: 阅读的活力与艺术</li>
<li>ch02: 阅读的层次</li>
<li>ch03: 阅读的第一个层次：基础阅读</li>
<li>ch04: 阅读的第二个层次：检视阅读</li>
<li>ch05: 如何做一个自我要求的读者</li>
</ul>
</li>
<li>第二篇：阅读的第三个层次：分析阅读<ul>
<li>ch06: 一本书的分类</li>
<li>ch07: 透视一本书</li>
<li>ch08: 与作者找出共通的词义</li>
<li>ch09: 判断作者的主旨</li>
<li>ch10: 公正的评断一本书</li>
<li>ch11: 赞同或反对作者</li>
<li>ch12: 辅助阅读</li>
</ul>
</li>
<li>第三篇：阅读不同读物的方法<ul>
<li>ch13: 如何阅读实用型的书</li>
<li>ch14: 如何阅读想象文学</li>
<li>ch15: 阅读故事，戏剧，诗的一些建议</li>
<li>ch16: 如何阅读历史书</li>
<li>ch17: 如何阅读科学和数学</li>
<li>ch18: 如何阅读哲学书</li>
<li>ch19: 如何阅读社会科学</li>
</ul>
</li>
<li>第四篇：阅读的最终目标<ul>
<li>ch20: 阅读的第四个层次：主题阅读</li>
<li>ch21: 阅读与心智的成长</li>
</ul>
</li>
</ul>
<p>这本书的目录看起来比较奇怪，分为四个部分，但是第一篇和第二篇分类比较混乱，ch03,ch04, 第二篇，ch20 不是应该是同一级嘛？</p>
<p>以为找英文原版的目录拿来对照，译者还是严格的遵守了原文目录的排布。</p>
<p>译者把<strong>Part</strong>翻译为<strong>篇</strong>, 我觉得就直接翻译为<strong>部分</strong>比较好。整理目录，补充一部分 Part,Chapter,Section 的标题。</p>
<p>于是做了点体力活，把英文书籍的目录部分搬运过来。</p>
<ul>
<li>第一篇：阅读的层次 <The Dimensions of Reading><ul>
<li>ch01: 阅读的活力与艺术 <The Activity and Art of Reading><ol>
<li>Active Reading</li>
<li>The Goals of Reading: Reading for Information and Reading for Understanding</li>
<li>Reading as Learning: The Difference Betweenn Learning By Instruction and Learning by Instruction and Learning by Discovery</li>
<li>Present and Absent Teachers</li>
</ol>
</li>
<li>ch02: 阅读的层次 <The Levels of Reading></li>
<li>ch03: 阅读的第一个层次：基础阅读 <The First Level of Reading: Elementary Reading><ol>
<li>Stages Of Learning to Read</li>
<li>Stages and Levels</li>
<li>Higher Levels of Reading and Higher Education</li>
<li>Reading and the Democratic Ideal of Education</li>
</ol>
</li>
<li>ch04: 阅读的第二个层次：检视阅读 <The Second Level of Reading: Inspectional Reading><ol>
<li>Inspectional Reading I: Systemmatic Skimming or Pre-reading</li>
<li>Inspectional Reading II: Superficial Reading</li>
<li>On Reading Speeds</li>
<li>Fixations and Regressions</li>
<li>The Problem of Comprehension</li>
<li>Summary of Inspectional Reading</li>
</ol>
</li>
<li>ch05: 如何做一个自我要求的读者 <How to Be a Demanding Reader><ol>
<li>The Essence of Active Reading: The Four Basic Questions a Reader Asks</li>
<li>How to Make a Book Your Own</li>
<li>The Three Kinds of Note-making</li>
<li>Forming the Habit of Reading</li>
<li>From Many Rules to One Habit</li>
</ol>
</li>
</ul>
</li>
<li>第二篇：阅读的第三个层次：分析阅读 <The Third Level Of Reading: Analytical Reading><ul>
<li>ch06: 分类一本书 <Pigeonholing a Book><ol>
<li>The Importance of Classifying Books</li>
<li>What You Can Learn from the Title of a Book</li>
<li>Practical vs. Theoretical Books</li>
<li>Kinds of Theoretical Books</li>
</ol>
</li>
<li>ch07: 透视一本书 <X-raying a Book><ol>
<li>Of Plots and Plans: Stating the Unity of a Book</li>
<li>Mastering the Multiplicity: The Art of Outlining a Book</li>
<li>The Reciprocal Arts of Reading and Writing</li>
<li>Discovering the Author’s Intentions</li>
<li>The First Stage of Analytical Reading</li>
</ol>
</li>
<li>ch08: 与作者找出共通的词义 <Coming to Terms with and Author><ol>
<li>Words vs. Terms</li>
<li>Finding the Key Words</li>
<li>Technical Words and Special Vocabularies</li>
<li>Finding the Meanings</li>
</ol>
</li>
<li>ch09: 判断作者的主旨 &lt;Determing an Author’s Message&gt;<ol>
<li>Sentences vs. Propositions</li>
<li>Finding the Key Sentences</li>
<li>Finding the Arguments</li>
<li>Finding the Solutions</li>
<li>The Second Stage of Analytical Reading</li>
</ol>
</li>
<li>ch10: 公正的评断一本书 <Critizing a Book Fairly><ol>
<li>Teachability as a Virtue</li>
<li>The Role of Rhetoric</li>
<li>The importance of Suspending Judgement</li>
<li>The Importance of Avoiding Contentiousness</li>
<li>On the Resolution of Disagreements</li>
</ol>
</li>
<li>ch11: 赞同或反对作者 <Agreeing or Disagreeing with an Author><ol>
<li>Prejudice and Judgment</li>
<li>Judging the Author’s Soundness</li>
<li>Judging the Author’s Completeness</li>
<li>The Third Stage of Analytical Reading</li>
</ol>
</li>
<li>ch12: 辅助阅读 <Aids to Reading><ol>
<li>The Role Of Relevant Experience</li>
<li>Other Books as Extrinsic Aids to Reading</li>
<li>How to Use Commentaries and Abstracts</li>
<li>How to Reference Books</li>
<li>How to Use a Dictionary</li>
<li>How to Use an Encyclopedia</li>
</ol>
</li>
</ul>
</li>
<li>第三篇：阅读不同读物的方法 <Approaches To Different Kinds of Reading Matter><ul>
<li>ch13: 如何阅读实用型的书 <How to Read Practical Books><ol>
<li>The Two Kinds of Practical Books</li>
<li>The Role of Persuation</li>
<li>What Does Agreement Entail in the Case of a Practical Book?</li>
</ol>
</li>
<li>ch14: 如何阅读想象文学 <How to Read Imaginative Literature><ol>
<li>How Not to Read Imageinative Literature</li>
<li>Genaral Rules for Reading Imaginative Literature</li>
</ol>
</li>
<li>ch15: 阅读故事，戏剧，诗的一些建议 &lt;Suggestion for Reading Stories , Plays and Poems&gt;<ol>
<li>How to Read Stories</li>
<li>A Note About Epics</li>
<li>How to Read Plays</li>
<li>A Note About Tragedy</li>
<li>How to Read Lyric Poetry</li>
</ol>
</li>
<li>ch16: 如何阅读历史书 <How to Read History><ol>
<li>The Elusiveness of Historial Facts</li>
<li>Theories of History</li>
<li>Questions to Ask of Historical Book</li>
<li>How to Reading Biography and Autobiography</li>
<li>How to Read About Current Events</li>
<li>A Note on Digests</li>
</ol>
</li>
<li>ch17: 如何阅读科学和数学 <How to Read Science and Mathematics><ol>
<li>Understanding the Scientific Enterprise</li>
<li>Suggestions for Reading Classical Scientific Books</li>
<li>Facing the Problem of Mathematics</li>
<li>Handlding the Mathematics in Scientific Books</li>
<li>A Note on Popular Science</li>
</ol>
</li>
<li>ch18: 如何阅读哲学书 <How to Read Philosophy><ol>
<li>The Questions Philosophers Ask</li>
<li>Modern Philosophy and the Great Tradition</li>
<li>On Philosophical Method</li>
<li>On Philosophical Styles</li>
<li>Hints for Reading Philosophy</li>
<li>On Making Up Your Own Mind</li>
<li>A Note on Theology</li>
<li>How to Read “Canoncial”</li>
</ol>
</li>
<li>ch19: 如何阅读社会科学 <How to Read Social Science><ol>
<li>What Is Social Science?</li>
<li>The Apparent Ease of Reading Social Science</li>
<li>Didfficulties of Reading Social Science</li>
<li>Reading Social Science Literature</li>
</ol>
<ul>
<li>第四篇：阅读的最终目标 <The Ultimate Goals Of Reading></li>
</ul>
</li>
<li>ch20: 阅读的第四个层次：主题阅读 <The Fourth Level of Reading: Syntopical Reading><ol>
<li>The Role of Inspection in Syntopical Reading</li>
<li>The Five Steps in Syntopical Reading</li>
<li>The Need for Objectivity</li>
<li>An Example of an Exercise in Syntopical Reading: The Idea of Progress</li>
<li>The Syntopicon and How to Use It</li>
<li>On the Principles That Underlie Syntopical Reading</li>
<li>Summary of Syntopical Reading</li>
</ol>
</li>
<li>ch21: 阅读与心智的成长 <Reading and the Growth of the Mind><ol>
<li>What Good Books Can Do For Us</li>
<li>The Pyramid of Books</li>
<li>The Life and Growth of the Mind</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="问与答"><a href="#问与答" class="headerlink" title="问与答"></a>问与答</h2><p>如何阅读一本书里面有很多技巧，其中有个就是通过<strong>提问</strong>的方式来使得读书效率更高。</p>
<p>下文是我在读这本书之前和读这本书之后提出的部分问题，挑选一部分写出来作为自己的读书笔记。</p>
<p>我把提问类型标记为如下：</p>
<ul>
<li>CQ  Common Question   : 所有书提问。</li>
<li>SQ  Specific Question : 本类书提问。</li>
<li>EQ  Extended Question : 脑洞类提问。</li>
</ul>
<h3 id="CQ1-本书整体讲了什么？"><a href="#CQ1-本书整体讲了什么？" class="headerlink" title="CQ1: 本书整体讲了什么？"></a>CQ1: 本书整体讲了什么？</h3><blockquote>
<p>You see, but you do not observe. The distinction is clear.</p>
<ul>
<li><pre><code>    Sherlock Holmes/Arthur Conan Doyle, A Scandal in Bohemia (1891)</code></pre>
</li>
</ul>
</blockquote>
<p>一句话概括：</p>
<blockquote>
<p>本书讲的是读书的策略与技巧 (HOW).</p>
</blockquote>
<p>再详细一些：</p>
<blockquote>
<p>本书讲的是，当面对不同层次的书，不同种类的书，同一本书的不同部分，挑书，看书，读书，吃透书的策略与技巧。</p>
</blockquote>
<p>作者从阅读的活力与艺术入手，介绍了阅读的必要性，然后介绍了阅读的四种层次，接着点出了阅读层次的进入一些阅读层次的要求，方法，技巧。着重介绍了分析阅读，以及面对各种各样的读物的阅读技巧。</p>
<p>第一部分 花了一章简单的介绍了基础阅读。花了一章介绍了检视阅读，附加另一章介绍做一个自我要求的读者。</p>
<p>接着是第二部分重点介绍阅读的第三个层次，分析阅读：</p>
<p>这个层次需要</p>
<ul>
<li>『分类这本书』</li>
<li>『透视这本书』</li>
<li>『判断作者主旨』</li>
<li>『评断一本书』</li>
<li>『赞同或者反对』</li>
</ul>
<p>PS: 译者把 Pigeonholing a Book 翻译为一本书的分类，这个放在标题上和分类一本书意思相差大了。</p>
<p>也介绍了辅助阅读的通用的一些方法和手段。</p>
<p>接着进入第三部分，作者用自己的经验来分享对于每一种不同类型（阅读使用类书籍，想象文学，故事 / 戏剧 / 诗篇，历史，科学与数学，哲学，社科）的书籍，有哪些注意点（抓重点）, 有哪些技巧。</p>
<p>第四个部分则是介绍了阅读的终极目的：</p>
<p>其实每一个人的读书都是主题阅读</p>
<p>挑选《沟通的艺术》基本上都是为了提升沟通上的技巧。换而言之，其实我们都是为了丰富自己在沟通上面的知识体系从而选择了看这本书。</p>
<p>当然，作者并不是新造一个概念，然后一本正经的说没有干货的道理，作者还举了一个例子用于如何在主题之间作取舍，更加有条理的去看某些类别的书。</p>
<h3 id="SQ1-较好的阅读一本书的步骤"><a href="#SQ1-较好的阅读一本书的步骤" class="headerlink" title="SQ1: 较好的阅读一本书的步骤"></a>SQ1: 较好的阅读一本书的步骤</h3><h4 id="确定要补充那些知识-技能体系"><a href="#确定要补充那些知识-技能体系" class="headerlink" title="确定要补充那些知识 / 技能体系"></a>确定要补充那些知识 / 技能体系</h4><blockquote>
<p>“Some books are to be tasted, others to be swallowed, and some few to be chewed and digested” - Francis Bacon</p>
</blockquote>
<p>有的书适合浅尝，有的书适合吞咽，只有少部分适合咀嚼和消化到变为身体的一部分。 培根对书归类的这句话相当形象。</p>
<p>看书除非是热爱读书，否则随便拿起一本书，实在是难以激发自己探索这本书的冲动。</p>
<p>而，这里面有一个隐藏的问题，就是<strong>要补充哪些知识 / 技能体系</strong>, 首先是要知道有哪些知识体系。</p>
<ul>
<li>维护健康</li>
<li>高效自学</li>
<li>逻辑思考</li>
<li>规划管理</li>
<li>沟通表达</li>
<li>团队协作</li>
<li>……</li>
</ul>
<h4 id="筛选书籍阶段-过滤不适合的书"><a href="#筛选书籍阶段-过滤不适合的书" class="headerlink" title="筛选书籍阶段 : 过滤不适合的书"></a>筛选书籍阶段 : 过滤不适合的书</h4><blockquote>
<p>目的：用一些比较通用的技巧筛选出书籍。然后进入下一阶段</p>
</blockquote>
<p>技巧：</p>
<ul>
<li>泛读书衣：书衣和封面是重要的宣传点，书衣没有亮点。基本上这本书也不会有太大亮点。</li>
<li>泛读封面：<ul>
<li>出版社不行，基本上这本书也不行，出版社的可能在某个领域特别牛，比如图灵 / 机械在计算机方面特别牛，我就特别青睐于选这两家的新出来的技术书籍。但不管外面怎么说，反正我自从不考试了之后，我就拒绝看清华大学出版社的所有计算机相关的书籍。清华大学出版社的计算机类作者就几乎进入了我的计算机不读书籍作者的黑名单。</li>
<li>作者的其他书不行，新书八成也不怎么样。作者有一本书写的巨牛无比，他的其他书籍也不会差到哪里去。假如《母猪的产后护理》质量很高甚至连高科技养猪的网易老总都专门给这本书作序，那作者的《世界如此残酷，你一定要内心强大》一定是另一本仙风道骨的自传。</li>
<li>一本精心构造的书的内容，插画都是有一定的寓意的。很少有作家出一本书是忍心让自己的书封面长的巨丑。</li>
<li>这也需要注意的是：有的烂作品也会在封面下一番功夫，这就需要进入下一阶段的的探索了。</li>
<li>版次越高，则越好。</li>
<li>印次越高，则越好。</li>
<li>首印数量很少，则出版社对这本书没有多大信心。</li>
<li>编著，著是原创，编则是整合。</li>
<li>如果可以的话，优先阅读英文书。</li>
<li>豆瓣和亚马逊的书评。</li>
</ul>
</li>
<li>泛读目录：好的书籍的目录一定是（注意是一定是）逻辑清晰，结构层次分明，足以概括该章节的，甚至对如果稍微懂一点点的人，仅仅凭着目录就可以脑补出整本书的结构。</li>
<li>其他技巧：比如，直接买某个社群推荐的书单。我在不懂编程的时候就是这么做的。当然，后来稍微入了编程的大门才发现当初买了很多烂书。当然，用别人的书单也会逐渐让自己挑选书的能力退化。</li>
</ul>
<p>如果不适合口味，比如你想看《面向对象编程思想》过程中的翻到了一本《找对象，就这么做》的书，果断换一本；或者这书质量实在是太差，比如你翻到了《公猪在母猪的产后护理过程中不得不做的 138 件小事》, 书总共就 350 页，居然讲什么是母猪花了 147.6 页，果断换一本书。这样你就节约了看一本不合适的书的时间。</p>
<h4 id="检视阅读阶段-判断一本书的质量"><a href="#检视阅读阶段-判断一本书的质量" class="headerlink" title="检视阅读阶段 : 判断一本书的质量"></a>检视阅读阶段 : 判断一本书的质量</h4><blockquote>
<p>目的：判断一本书的质量，以及评估当前的书本是否值得进入下一阶段。然后进入下一阶段。</p>
</blockquote>
<blockquote>
<p>适用场景：不知道这本书适不适合进行更高质量的阅读。或者时间有限并且急于挖掘书中的知识。</p>
</blockquote>
<p>经过上个阶段的过滤，不合适的书基本上也就差不了多少了，这时候就需要对这本书进行检视阅读了：</p>
<h5 id="检视阅读阶段-STEP1-大体定位这本书。"><a href="#检视阅读阶段-STEP1-大体定位这本书。" class="headerlink" title="检视阅读阶段 STEP1 : 大体定位这本书。"></a>检视阅读阶段 STEP1 : 大体定位这本书。</h5><ol>
<li>看书名页 / 序 : 了解这本书的主题，归类这本书的类型。</li>
<li>研究目录页  : 对这本书的基本架构做概括性的理解。</li>
<li>查看索引</li>
<li>出版者的介绍</li>
<li>挑选几个和主题相关的篇章，着重看篇章的开头或结尾。</li>
<li>把书打开，随意翻，有时候连续看几页，但不要太多。</li>
</ol>
<p>定位这本书的用途：</p>
<ol>
<li>弃而不看。</li>
<li>放着做参考书。</li>
<li>进行检视阅读的第二阶段</li>
</ol>
<h5 id="检视阅读阶段-STEP2"><a href="#检视阅读阶段-STEP2" class="headerlink" title="检视阅读阶段 STEP2 :"></a>检视阅读阶段 STEP2 :</h5><p>这篇作者 / 译者使用了一个很容易被误会词，粗读。</p>
<p>即：</p>
<blockquote>
<p>头一次面对一本难读的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或者思索。</p>
</blockquote>
<p>那什么标准的读才叫粗读呢？</p>
<blockquote>
<p>把握主干，不拘泥于细枝末节，把握大原则，不拘泥于细微的重点，而不是那种随便翻翻的”粗读”.</p>
</blockquote>
<h5 id="检视阅读的一些误区："><a href="#检视阅读的一些误区：" class="headerlink" title="检视阅读的一些误区："></a>检视阅读的一些误区：</h5><blockquote>
<p>速读也只能回答出”这是在说什么的”的问题。对深入理解，回答更深层次的问题没有大帮助。</p>
</blockquote>
<h4 id="分析阅读阶段-全方位吃透这本书"><a href="#分析阅读阶段-全方位吃透这本书" class="headerlink" title="分析阅读阶段 : 全方位吃透这本书"></a>分析阅读阶段 : 全方位吃透这本书</h4><p>经过筛选与检视，剩下的书则是很有价值的书。</p>
<blockquote>
<p>而，读一本书的阅读技巧，明显是高于比书本长度少，比书本难度易的读物。即 <strong>这些阅读技巧也同样适用于非书籍的读物上</strong></p>
</blockquote>
<h5 id="分析阅读第一阶段：找出一本书在谈写什么的规则"><a href="#分析阅读第一阶段：找出一本书在谈写什么的规则" class="headerlink" title="分析阅读第一阶段：找出一本书在谈写什么的规则"></a>分析阅读第一阶段：找出一本书在谈写什么的规则</h5><p>步骤：</p>
<ol>
<li>依照书的种类与主题来分类</li>
<li>使用最简短的文字说明整本书在谈些什么</li>
<li>将主要部分按顺序和关联性列举出来。将全书的大纲列举出来，并将各个部分的大纲也列出来。</li>
<li>确定作者想要解决的问题。</li>
</ol>
<blockquote>
<p>如果心中没有一个分类的标准，再清楚的书名也没有用。</p>
</blockquote>
<blockquote>
<p>每一本书都有一个骨架，作为一个合格的读者，目的就是找出这个骨架。</p>
</blockquote>
<ol>
<li>掌握一本书的架构</li>
<li>使用单一的句子，或者最多几句话来叙述整本书的内容。</li>
<li>将书中的重要篇章列举出来，说明他们如何按照顺序组成一个整体的架构。</li>
</ol>
<blockquote>
<p>PS: 建筑架构与书本架构的那个比方真的是精彩。</p>
</blockquote>
<p>第三点可以用列提纲来解决：</p>
<ul>
<li>作者将全数分为五个部分，第 1/2/3/4/5 部分讲的是什么</li>
<li>第一部分的第一节（注：Section, 译者翻译为段落）, 有 X/Y/Z 节 /</li>
<li>X 节作者做出四个观点 (Point),I/II/III</li>
</ul>
<blockquote>
<p>由于纸笔速度跟不上大脑运转速度，对每一本书这样读并且列提纲的话相当耗费精力，但是具备这样的意识还是很重要的。</p>
</blockquote>
<h5 id="分析阅读第二阶段：诠释一本书的内容的规则。"><a href="#分析阅读第二阶段：诠释一本书的内容的规则。" class="headerlink" title="分析阅读第二阶段：诠释一本书的内容的规则。"></a>分析阅读第二阶段：诠释一本书的内容的规则。</h5><p>步骤：</p>
<ol>
<li>诠释作者的关键字，与他达成共识。</li>
<li>由最重要的句子中，抓住作者的重要主旨。</li>
<li>知道作者的论述是什么，从内容中找出相关的句子，再重新架构出来。</li>
<li>确定作者已经解决了哪些问题，还有哪些问题是没有解决的，在判断那些是作者知道他没有解决的问题。</li>
</ol>
<blockquote>
<ol>
<li>作者的主旨如果没有理论的支持，只是在书法个人想法罢了。2. 为什么他认为我们应该被说服，以接受这样的观点。</li>
</ol>
</blockquote>
<ol>
<li>找出关键句</li>
<li>找出主旨</li>
<li>找出论述</li>
<li>找出解答</li>
</ol>
<p>他沟通的主要核心是他所辖的肯定与否定的判断，以及他为什么会这么做的立构。</p>
<blockquote>
<p>不能用他们自己的话，重述你的观点。则是代表不理解。</p>
</blockquote>
<h5 id="分析阅读第三阶段：评论一本书的规则"><a href="#分析阅读第三阶段：评论一本书的规则" class="headerlink" title="分析阅读第三阶段：评论一本书的规则"></a>分析阅读第三阶段：评论一本书的规则</h5><p>规则：</p>
<p>A. 智慧礼节的一般规则</p>
<ol>
<li>除非你已经完成了大纲架构，也能诠释整本书了，否则不要轻易评断。</li>
<li>不要争强好胜，非辩到底不可。</li>
<li>在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同。<br>B. 批评观点的特别标准</li>
<li>证明作者的知识不足。</li>
<li>证明作者的知识错误。</li>
<li>证明作者不合逻辑。</li>
<li>证明作者的分析与理由是不完整的。</li>
</ol>
<p>甚至，可以用于其他的类型的学习。</p>
<h4 id="主题阅读阶段-纳入自己的知识体系"><a href="#主题阅读阶段-纳入自己的知识体系" class="headerlink" title="主题阅读阶段 : 纳入自己的知识体系"></a>主题阅读阶段 : 纳入自己的知识体系</h4><p>主题阅读其实就是对同一个主题挑选几本书进行查看。</p>
<p>多问问自己：这本书谈的内容对我研究的主题内容道理有没有帮助？</p>
<p>主题阅读 STEP1. 找到与主题相关的章节。只看与该章节相关的内容。<br>主题阅读 STEP2. 带领作者与你达成共识。与检视阅读的第二步骤相反。<br>主题阅读 STEP3. 理清问题。<br>主题阅读 STEP4. 界定议题。<br>主题阅读 STEP5. 分析讨论。</p>
<h3 id="SQ2-上面关于阅读一本书的步骤是适用于所有书，即是通用的步骤吗？"><a href="#SQ2-上面关于阅读一本书的步骤是适用于所有书，即是通用的步骤吗？" class="headerlink" title="SQ2: 上面关于阅读一本书的步骤是适用于所有书，即是通用的步骤吗？"></a>SQ2: 上面关于阅读一本书的步骤是适用于所有书，即是通用的步骤吗？</h3><blockquote>
<p>不是</p>
</blockquote>
<p>作者在书中介绍了四个问题，用来帮助读者进行更好的阅读，这些问题除了不适合小说类的书籍，基本上可以适用于绝大部分的书籍。</p>
<ul>
<li>CQ1 : <strong>本书整体讲了什么？</strong> （主题，作者如何依次发展主题，如何逐步从核心主题分解出从属的关键议题来）</li>
<li>CQ2 : <strong>作者细说了什么？怎么说的？</strong> （找出主要的 ideas,assertions,arguments, 汗，译者翻译为了 想法，声明，论点，实际上应该翻译为想法，主张，论据……)</li>
<li>CQ3 : <strong>这本书说的有道理吗？是全部有道理，还是部分有道理？</strong></li>
<li>CQ4 : <strong>这本书跟我有什么关系？</strong> 如果是资讯，则询问是否有意义。是否值得有更深入的了解。这本书可以补充我哪些知识体系</li>
</ul>
<p>作者在书中已经介绍完分析阅读，按理来说应该进入的是下一部分，即主题阅读。</p>
<p>但是第三部分<strong>莫名其妙</strong>硬塞了一部分内容叫做<strong>阅读不同读物的方法</strong></p>
<p>内容是如何阅读下面的读物：</p>
<ul>
<li>实用型的书</li>
<li>想象文学</li>
<li>故事，戏剧，诗</li>
<li>历史书</li>
<li>科学与数学</li>
<li>哲学书</li>
<li>社会科学</li>
</ul>
<p>而这么做的答案在第十三章的开头（不是应该在第三部分的开头嘛？).</p>
<blockquote>
<p>在任何艺术或实务领域，规则太通用是一件令人扫兴的事情。少量的通用性规则是优势。越通用的规则也就意味着越易懂，而与此同时当遇到真实案例的时候，往往通用规则太宽泛而难以应用。</p>
</blockquote>
<blockquote>
<p>即，尽管作者做了抽象的总结的经验，但还是要具体落实到具体的案例上。</p>
</blockquote>
<h5 id="分析阅读之如何阅读实用型的书"><a href="#分析阅读之如何阅读实用型的书" class="headerlink" title="分析阅读之如何阅读实用型的书"></a>分析阅读之如何阅读实用型的书</h5><blockquote>
<p>注：由于时间有限，仅仅对阅读实用类和历史书籍做了笔记，以后补上。</p>
</blockquote>
<blockquote>
<p>注意：<strong>任何一本实用性的书不能解决该书所关心的实际问题.</strong></p>
</blockquote>
<p>就像学会<strong>如何阅读一本书</strong>, 看完做好笔记并不意味着<strong>你不会阅读一本书</strong>这个问题<strong>消失了</strong>, 只有行动才能解决问题。</p>
<blockquote>
<p><strong>听过那么多道理，却不行动，不能过好这一生</strong>也没有那必要怪道理。</p>
</blockquote>
<blockquote>
<p><strong>Just Do It</strong></p>
</blockquote>
<ul>
<li>如果是阅读数学类的书，可能了解作者本人是没有任何必要的。</li>
<li>如果是阅读道德论述，经济论文和经济论著，则非常有必要了解作者的人格，生活所处的时代背景。</li>
</ul>
<p>第一个问题：这本书是在谈些什么。<br>第二个问题：这本书的意义或内容，共识，主旨，论述。<br>第三个问题：内容真实吗？<br>第四个问题：这本书与我何干？</p>
<h5 id="分析阅读之如何阅读历史书"><a href="#分析阅读之如何阅读历史书" class="headerlink" title="分析阅读之如何阅读历史书"></a>分析阅读之如何阅读历史书</h5><p>这部分刚开始就通过法庭陪审团的车祸事件来说明，在严格规范的证据之下，加上详细检验之后，身为陪审员都很难百分之百的确定一件事情的真相。</p>
<p>而，一个人连一件单纯的事都难以确知真相，遑论历史？</p>
<p>由于历史的理论不同，历史学家对历史事件的描述则不同。</p>
<p>阅读历史的两个要点：</p>
<ol>
<li>对你感兴趣的时间或者时期，尽量阅读一种以上的历史书</li>
<li>不要只关心在过去某个时间地点真正发生了什么事情，还要读懂在任何时空中，尤其是现在，人们为什么会有这般行动的原因。</li>
</ol>
<h3 id="SQ3-关于读书的有哪些误区"><a href="#SQ3-关于读书的有哪些误区" class="headerlink" title="SQ3: 关于读书的有哪些误区"></a>SQ3: 关于读书的有哪些误区</h3><h4 id="速读"><a href="#速读" class="headerlink" title="速读"></a>速读</h4><ol>
<li>许多书连略读都是不值得的，另外一些书只需要快速读过就行了。有少数的书需要用某种速度，通常是相当慢的速度，才能完全理解。</li>
<li>一本只需要快速阅读的书，却用很慢的速度来读，就是在浪费时间，这时速读的技巧就能帮你解决问题。</li>
</ol>
<p>PS: 无论是多么难读的书，在无关精要的间隙部分都可以读快一些。而那些比较困难的部分，应该慢慢阅读。</p>
<blockquote>
<p>核心的注意点应该放在：理解了多少。<br>恰似沟通需要注意的：不是你说了多少，说的多快，而是对方理解了多少。</p>
</blockquote>
<h4 id="随便翻翻"><a href="#随便翻翻" class="headerlink" title="随便翻翻"></a>随便翻翻</h4><p>读书如果不是为了娱乐消遣，切忌进行在很松散的状态下随便拿一本书看看。</p>
<blockquote>
<p>为了解决很随便的看一本书，我的技巧就是带着问题去看。</p>
</blockquote>
<h4 id="陷入细枝末节"><a href="#陷入细枝末节" class="headerlink" title="陷入细枝末节"></a>陷入细枝末节</h4><blockquote>
<p>头一次面对一本难读的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或者思索。</p>
</blockquote>
<p>不停的停下来查一些陌生的知识会不断的破坏兴趣。并且会忽略掉一些大的原则性的东西。<br>比如：当你努力的去了解那些细微的重点时，就会错过大原则：关于成本中包含的薪水，租金，利润与利息种种因素，市场在定价中的角色，垄断专卖的害处，自由贸易的理由等等。</p>
<blockquote>
<p>作者的意思其实就是从枝干再到树叶。不要上来就陷入一些细小的琐碎事物中。</p>
</blockquote>
<h3 id="EQ1-为什么要重新学习如何阅读书籍的策略与方法"><a href="#EQ1-为什么要重新学习如何阅读书籍的策略与方法" class="headerlink" title="EQ1: 为什么要重新学习如何阅读书籍的策略与方法"></a>EQ1: 为什么要<strong>重新学习</strong>如何阅读书籍的策略与方法</h3><blockquote>
<p>初学者的无知在于未学，而学者的无知在于学后</p>
</blockquote>
<p>以上。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://en.wikipedia.org/wiki/How_to_Read_A_Book">https://en.wikipedia.org/wiki/How_to_Read_A_Book</a><br><a href="https://en.wikipedia.org/wiki/How_to_Read_Literature_Like_a_Professor">https://en.wikipedia.org/wiki/How_to_Read_Literature_Like_a_Professor</a><br><a href="https://www.amazon.com/How-Read-Book-Intelligent-Touchstone/dp/0671212095/ref=pd_bxgy_14_2?_encoding=UTF8&psc=1&refRID=MMHSVKSVYBBGSMZRWDQE">亚马逊地址《如何阅读一本书》</a></p>
<p>UPDATE:</p>
<table>
<thead>
<tr>
<th>日期</th>
<th>类型</th>
<th>详细操作</th>
</tr>
</thead>
<tbody><tr>
<td><strong>2017-02-13</strong></td>
<td>创建</td>
<td>初始化本文</td>
</tr>
<tr>
<td><strong>2017-02-17</strong></td>
<td>重构</td>
<td>删除零散笔记，重新组织本文结构</td>
</tr>
<tr>
<td><strong>2017-02-26</strong></td>
<td>重构</td>
<td>调整部分内容</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>写在人生的边上</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>书评</tag>
      </tags>
  </entry>
  <entry>
    <title>『Fluent Python』读书笔记</title>
    <url>/2017/04/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_FluentPython/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Fluent Python 适用于中级 Pythoner。</p>
<blockquote>
<p>以 Python 作为主力编程语言已经 1 年多了，读这本书，希望写的代码可以更加的 Pythonic。</p>
</blockquote>
<a id="more"></a>

<h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><h2 id="本书结构"><a href="#本书结构" class="headerlink" title="本书结构"></a>本书结构</h2><ul>
<li>P1. Prologue<ul>
<li>C01. The Python Data Model</li>
</ul>
</li>
<li>P2. Data Structure<ul>
<li>C02. An Array of Sequences<ul>
<li>Overview of Built-in Sequences</li>
<li>List Comprehensions and Generator Expressions</li>
<li>Tuples Are Not Just Immutable Lists</li>
<li>Slicing</li>
<li>Using plus and star with Sequences</li>
<li>Augmented Assignment with Sequences</li>
<li>list.sort and the sorted Built-In Function</li>
<li>Managing Ordered Sequences with bisect</li>
<li>When a List Is Not the Answer</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C03. Dictionaries and Sets<ul>
<li>Generic Mapping Types</li>
<li>Dict Comprehensions</li>
<li>Common Mapping Methods</li>
<li>Mappings with Flexiable Key Lookup</li>
<li>Variations of Dict</li>
<li>Subclassing UserDict</li>
<li>Immutable Mappings</li>
<li>Set Theory</li>
<li>Dict and Set Under the Hood</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C04. Text VS Bytes<ul>
<li>Character Issues</li>
<li>Byte Essentials</li>
<li>Basic Encoders/Decoders</li>
<li>Understanding Encode/Decode Problems</li>
<li>Handling Text Files</li>
<li>Normalizng Unicode for Saner Comparisons</li>
<li>Sorting Unicode Text</li>
<li>The Unicode Database</li>
<li>Dual-Mode str and bytes APIs</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P3. Function as Objects<ul>
<li>C05. First-Class Function<ul>
<li>Treating a Function Like an Object</li>
<li>Higher-Order Functions</li>
<li>Anonymous Functions</li>
<li>The Seven Flavors of Callable Objects</li>
<li>User-Defined Callable Types</li>
<li>Function Introspection</li>
<li>From Positional to Keyword-Only Parameters</li>
<li>Function Annotations</li>
<li>Packages for Functional Programming</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C06. Design Patterns with First-Class Functions<ul>
<li>Refactoring Strategy</li>
<li>Command</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C07. Function Decorators and Closures<ul>
<li>Decorators 101</li>
<li>When Python Executes Decorators</li>
<li>Decorator-Enhanced Strategy Pattern</li>
<li>Variable Scope Rules</li>
<li>Closures</li>
<li>The nonlocal Declaration</li>
<li>Implementing a Simple Decorator</li>
<li>Decorators In the Standard Library</li>
<li>Stacked Decorators</li>
<li>Parameterized Decorators</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P4. Object-Oriented Idioms<ul>
<li>C08. Object References, Mutability, and Recycling<ul>
<li>Variables Are Not Boxes</li>
<li>Identity, Equality , and Aliases</li>
<li>Copies Are Shallow by Default</li>
<li>Function Parameters as References</li>
<li>del and Garbage Collection</li>
<li>Weak References</li>
<li>Tricts Python Plays with Immutables</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C09. A Pythonic Object<ul>
<li>Object Representations</li>
<li>Vector Class Redux</li>
<li>An Alternative Constructor</li>
<li>classmethod VS staticmethod</li>
<li>Formatted Displays</li>
<li>A Hashable Vector2d</li>
<li>Private and “Protected” Attributes in Python</li>
<li>Saving Space with the slots Class Attribute</li>
<li>Overriding Class Attributes</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C10. Sequence Hacking , Hashing , and Slicing<ul>
<li>Vector: A User-Defined Sequence Type</li>
<li>Vector Take #1: Vector2d Compatible</li>
<li>Protocols and Duck Typing</li>
<li>Vector Take #2: A Sliceable Sequence</li>
<li>Vector Take #3: Dynamic Attribute Access</li>
<li>Vector Take #4: Hashing and a Faster ==</li>
<li>Vector Take #5: Formatting</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C11. Interfaces: From Protocols to ABCs<ul>
<li>Interfaces and Protocols in Python Culture</li>
<li>Python Digs Sequences</li>
<li>Monkey-Patching to Implement a Protocol at Runtime</li>
<li>Alex Martelli’s Waterfowl</li>
<li>Subclassing an ABC</li>
<li>ABCs in the Standard Library</li>
<li>Defining and Using an ABC</li>
<li>How the Tombola Subclasses Were Tested</li>
<li>Usage of register in Practice</li>
<li>Geese Can Behave as Ducks</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C12. Inheritance: For Good or For Worse<ul>
<li>Subclassing Built-In Types Is Tricty</li>
<li>Multiple Inheritance and Method Resolution Order</li>
<li>Multiple Inheritance in the Real World</li>
<li>Coping with Multiple Inheritance</li>
<li>A Modern Example: Mixins in Django Generic Views</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C13. Operator Overloading: Doing It Right<ul>
<li>Operator Overloading 101</li>
<li>Unary Operators</li>
<li>Overloading plus for Verctor Addtion</li>
<li>Overloading star for Scalar Multiplication</li>
<li>Rich Comparison Operators</li>
<li>Augmented Assignment Operator</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P5. Control Flow<ul>
<li>C14. Iterables, Iterators , and Generators<ul>
<li>Sentence Take #1 : A Sequence of Words Iterables VS Iterators</li>
<li>Iterables Versus Itertors</li>
<li>Sentence Take #2 : A Classic Iterator</li>
<li>Sentence Take #3 : A Generator Function</li>
<li>Sentence Take #4 : A Lazy Implementation</li>
<li>Sentence Take #5 : A Generator Expression</li>
<li>Generator Expressions : When to Use Them</li>
<li>Another Example : Arithmetic Progression Generator</li>
<li>Generator Functions in the Standard Library</li>
<li>New Syntax In Python 3.3 : yield from</li>
<li>Iterable Reducing Functions</li>
<li>A Closer Look at the iter Function</li>
<li>Case Study : Generators in a Databse Conversion Utility</li>
<li>Generators as Coroutines</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C15. Context Managers and else Blocks<ul>
<li>Do This , Then That: else Blocks Beyond if</li>
<li>Context Managers and with Blocks</li>
<li>The contextlib Utilities</li>
<li>Using @contextmanager</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C16. Coroutines<ul>
<li>How Coroutines Evolved from Generators</li>
<li>Basic Behavior of a Generator Used as a Coroutine</li>
<li>Example: Coroutine to Compute a Running Average</li>
<li>Decorators for Conroutine Priming</li>
<li>Coroutine Termination and Exception Handing</li>
<li>Returning a Value from a Coroutine</li>
<li>Using Yield from</li>
<li>The Meaning of yield from</li>
<li>Use Case: Coroutines for Discrete Event Simulation</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C17. Concurrency with Futures<ul>
<li>e.g. Web Downloads in Three Styles</li>
<li>Blocking I/O and the GIL</li>
<li>Launching Processes with concurrent.futures</li>
<li>Experimenting with Executor.map</li>
<li>Downloads with Progress Display and Error Handling</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C18. Concurrency with asyncio<ul>
<li>Thread VS Coroutine : A Comparison</li>
<li>Downloading with asyncio and aiohttp</li>
<li>Running Circling Around Blocking Calls</li>
<li>Enhancing the asyncio downloader Script</li>
<li>From Callbacks to Futures and Coroutines</li>
<li>Writing asyncio Servers</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P6. Metaprogramming<ul>
<li>C19. Dynamic Attributes and Properties<ul>
<li>Data Wrangling with Dynamic Attributes</li>
<li>Using a Property for Attribute Validation</li>
<li>A Proper Look at Properties</li>
<li>Coding a Property Factory</li>
<li>Handling Attribute Deletion</li>
<li>Essential Attributes and Functions For Attribute Handling</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C20. Attribute Descriptors<ul>
<li>Desciptor Example: Attribute Validation</li>
<li>Overriding VS Nonoverriding Descriptors</li>
<li>Methods Are Descriptors</li>
<li>Descriptor Usage Tips</li>
<li>Descriptor docstring and Overriding Deletion</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C21. Class Metaprogramming<ul>
<li>A Class Factory</li>
<li>A Class Decorator for Customizing Descriptors</li>
<li>What Happens When: Import Time VS Runtime</li>
<li>Metaclasses 101</li>
<li>A Metaclass for Customizing Descriptors</li>
<li>The Metaclass prepare Special Method</li>
<li>Classes as Objects</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="P1-Prologue"><a href="#P1-Prologue" class="headerlink" title="P1. Prologue"></a>P1. Prologue</h2><p>序言部分讲了很重要的一点，Python 最优秀的地方就是其统一性。</p>
<p>Pythonic 体现在使用的 Python Data Model 来表述，其途径主要编写<strong>特殊方法 (Special/Magic Method)</strong></p>
<ul>
<li>Iteration</li>
<li>Collections</li>
<li>Attribute access</li>
<li>Operator overloading</li>
<li>Function and method invocation</li>
<li>Object creation and destruction</li>
<li>String representation and formatting</li>
<li>Managed contexts (i.e., with blocks)</li>
</ul>
<h3 id="C01-The-Python-Data-Model"><a href="#C01-The-Python-Data-Model" class="headerlink" title="C01. The Python Data Model"></a>C01. The Python Data Model</h3><p>扩展阅读：<a href="http://zopeinterface.readthedocs.io/en/latest/">http://zopeinterface.readthedocs.io/en/latest/</a></p>
<h4 id="A-Pythonic-Card-Deck"><a href="#A-Pythonic-Card-Deck" class="headerlink" title="A Pythonic Card Deck"></a>A Pythonic Card Deck</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 1. 案例一：纸牌 nametuple</span></span><br><span class="line">Card = collections.namedtuple(<span class="string">&#x27;Card&#x27;</span>, [<span class="string">&#x27;rank&#x27;</span>, <span class="string">&#x27;suit&#x27;</span>])</span><br><span class="line"><span class="comment"># Card 是一个类</span></span><br><span class="line"><span class="comment"># 重载到 Cards(object) 的 __init__ , __len__ , __getitem__</span></span><br><span class="line"><span class="comment"># 重载可以之后可以使用 [] 语法 ( [0] [-1] random.choice(cards) [:3] [12::13] for in sorted reversed,sorted(cards, key=calc_score) card in cards ),</span></span><br><span class="line"><span class="comment"># 还可以重载 __setitem__, 之后就可以 shuffle</span></span><br><span class="line"><span class="comment"># 重载 __repr__ , __abs__ , __bool__ , __add__ , __mul__ 可以 repr() abs() bool() + *</span></span><br></pre></td></tr></table></figure>

<h4 id="How-Special-Methods-Are-Used"><a href="#How-Special-Methods-Are-Used" class="headerlink" title="How Special Methods Are Used"></a>How Special Methods Are Used</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj.__len__()</span><br><span class="line"><span class="built_in">len</span>()</span><br><span class="line"></span><br><span class="line">obj.__</span><br></pre></td></tr></table></figure>
<h4 id="Overview-of-Special-Methods"><a href="#Overview-of-Special-Methods" class="headerlink" title="Overview of Special Methods"></a>Overview of Special Methods</h4><p>对于内置类型 (list, str , bytearray) 解释器在调用特殊方法的时候调用 C 库，比如 CPython 实现的 len 方法一般直接会调用 PyVarObject C Struct ob_size</p>
<p>特殊方法往往并不是显示调用，而是被隐式调用。比如 init 在 new 中的作用，比如 for item in items 世界上会调用 iter(items), 这也会隐式调用 items.<strong>iter</strong>() .</p>
<p>一般当大量使用特殊方法的时候，都是在进行元编程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>(x) 先调用 x.__bool__() , 如果 x.__bool__() 没有实现，则调用 x.__len__(), 如果为 <span class="number">0</span> 则返回 <span class="literal">False</span></span><br><span class="line"><span class="built_in">sorted</span>(arr) 可以直接返回 arr，arr.sort() 是排序内部。</span><br></pre></td></tr></table></figure>

<p>特殊方法名 （有操作符）</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>方法名</th>
</tr>
</thead>
<tbody><tr>
<td>String/Bytes</td>
<td>repr , str , format , bytes</td>
</tr>
<tr>
<td>Conversion to number</td>
<td>abs , bool , complex , init , float , hash , index</td>
</tr>
<tr>
<td>Emulating collections</td>
<td>len , getitem , setitem , delitem , contains</td>
</tr>
<tr>
<td>Iteration</td>
<td>iter, reversed , next</td>
</tr>
<tr>
<td>Emulating callables</td>
<td>call</td>
</tr>
<tr>
<td>Context management</td>
<td>enter, exit</td>
</tr>
<tr>
<td>Instance creation &amp; destruction</td>
<td>new , init , del</td>
</tr>
<tr>
<td>Attribute management</td>
<td>getattr , getattribute , setattr , delattr, dir</td>
</tr>
<tr>
<td>Attribute descriptors</td>
<td>get , set ,delete</td>
</tr>
<tr>
<td>Class service</td>
<td>prepare , instancecheck , subclasscheck</td>
</tr>
</tbody></table>
<p>特殊方法名 （无操作符）</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>方法名</th>
</tr>
</thead>
<tbody><tr>
<td>Unary numeric operators</td>
<td>neg  , pos  , abs</td>
</tr>
<tr>
<td>Rich comparison operators</td>
<td>lt  , le  , eq  , ne  , gt  , ge</td>
</tr>
<tr>
<td>Arithmetic operators</td>
<td>add  ,sub  , mul  ,truediv  ,floordiv  ,mod , divmod , pow , round round</td>
</tr>
<tr>
<td>Reversed arithmetic operators</td>
<td>radd , rsub , rmul , rtruediv, rfloordiv , rmod , rdivmod, rpow</td>
</tr>
<tr>
<td>Augmented assignment mathmatic</td>
<td>iadd , isub , imul , itruediv, ifloordiv</td>
</tr>
<tr>
<td>Bitwise operators</td>
<td>invert  , lshift  , rshift  , and  , or</td>
</tr>
<tr>
<td>Reversed bitwise operators</td>
<td>rlshift , rrshift , rand , rxor , ror</td>
</tr>
<tr>
<td>Augmented assignment bitwise</td>
<td>ilshift , irshift , iand , ixor , ior</td>
</tr>
</tbody></table>
<h4 id="Why-len-Is-Not-a-Method"><a href="#Why-len-Is-Not-a-Method" class="headerlink" title="Why len Is Not a Method"></a>Why len Is Not a Method</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">因为对 不同类型并不是一定调用 __len__ , 对于基本类型查看 c struct 中长度，对于其他类型直接调用 __len__ , 这种区分对待</span><br></pre></td></tr></table></figure>

<h2 id="P2-Data-Structure"><a href="#P2-Data-Structure" class="headerlink" title="P2. Data Structure"></a>P2. Data Structure</h2><h3 id="C02-An-Array-of-Sequences"><a href="#C02-An-Array-of-Sequences" class="headerlink" title="C02. An Array of Sequences"></a>C02. An Array of Sequences</h3><p>Strings, lists, byte sequences, arrays, XML elements, and database results share a rich set of common operations including iteration, slicing, sorting, and concatenation.</p>
<h4 id="Overview-of-Built-in-Sequences"><a href="#Overview-of-Built-in-Sequences" class="headerlink" title="Overview of Built-in Sequences"></a>Overview of Built-in Sequences</h4><p>C 实现的按照 item 是否为同一类型分为：</p>
<ul>
<li><strong>Container sequences</strong>:  list, tuple, and collections.deque can hold items of different types.</li>
<li><strong>Flat sequences</strong>: str, bytes, bytearray, memoryview, and array.array hold items of one type.</li>
</ul>
<p>C 实现按照 item 是否可修改分为：</p>
<ul>
<li><strong>Mutable sequences</strong>: list, bytearray, array.array, collections.deque, and memoryview</li>
<li><strong>Immutable sequences</strong>: tuple, str, and bytes</li>
</ul>
<h4 id="List-Comprehensions-and-Generator-Expressions"><a href="#List-Comprehensions-and-Generator-Expressions" class="headerlink" title="List Comprehensions and Generator Expressions"></a>List Comprehensions and Generator Expressions</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_items = [func(a) <span class="keyword">for</span> item <span class="keyword">in</span> items]</span><br><span class="line">new_items = [ <span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">new_items = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> , <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100</span>))))))</span><br><span class="line"><span class="comment"># 可写成</span></span><br><span class="line">new_items = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> , <span class="built_in">range</span>(<span class="number">100</span>))))</span><br></pre></td></tr></table></figure>
<p>list 往往和 map filter 以及 listcomp 用于创建简单的序列</p>
<h4 id="Tuples-Are-Not-Just-Immutable-Lists"><a href="#Tuples-Are-Not-Just-Immutable-Lists" class="headerlink" title="Tuples Are Not Just Immutable Lists"></a>Tuples Are Not Just Immutable Lists</h4><ul>
<li><p>解包赋值</p>
</li>
<li><p>不要手贱加逗号</p>
</li>
<li><p>下划线可以用作临时变量 （但是 django 中下划线用于中英文）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, *rest = <span class="built_in">range</span>(<span class="number">5</span>) <span class="comment"># (0, 1, [2, 3, 4])</span></span><br><span class="line">a, b, *rest = <span class="built_in">range</span>(<span class="number">3</span>) <span class="comment"># (0, 1, [2])</span></span><br><span class="line">a, b, *rest = <span class="built_in">range</span>(<span class="number">2</span>) <span class="comment"># (0, 1, [])</span></span><br><span class="line"></span><br><span class="line">a, *body, c, d = <span class="built_in">range</span>(<span class="number">5</span>) <span class="comment"># (0, [1, 2], 3, 4)</span></span><br><span class="line">*head, b, c, d = <span class="built_in">range</span>(<span class="number">5</span>) <span class="comment"># ([0, 1], 2, 3, 4)</span></span><br></pre></td></tr></table></figure></li>
<li><p>namedtuple</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">City = namedtuple(<span class="string">&#x27;City&#x27;</span>, <span class="string">&#x27;name country population coordinates&#x27;</span>)</span><br><span class="line">tokyo = City(<span class="string">&#x27;Tokyo&#x27;</span>, <span class="string">&#x27;JP&#x27;</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>))</span><br><span class="line">tokyo.population</span><br><span class="line">tokyo.coordinates</span><br><span class="line">tokyo[<span class="number">1</span>]</span><br><span class="line">City._fields <span class="comment"># tuple</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="Slicing"><a href="#Slicing" class="headerlink" title="Slicing"></a>Slicing</h4><p>为何 Slice 和 Range 会排除 最后一个 Item?</p>
<p>书中讲的太复杂，其实这个和尺子是一个作用，尺子从 0 刻度开始，这样方便丈量。</p>
<p>比如说：</p>
<ul>
<li>items[0:10] 为 10 厘米</li>
<li>items[10] 为 10 刻度后一个单位，即 items[10:11]</li>
<li>items[2:] 为 2 刻度后面若干个单位</li>
<li>items[::3] 以三为单位，从 0 刻度开始，最后为结尾，每三个</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[i, j] # 调用 a.__getitem__((i, j))</span><br></pre></td></tr></table></figure>

<h4 id="Augmented-Assignment-with-Sequences"><a href="#Augmented-Assignment-with-Sequences" class="headerlink" title="Augmented Assignment with Sequences"></a>Augmented Assignment with Sequences</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对于不可变类型 赋值 l *= <span class="number">2</span> 在内存中则是创建了新的两个长度的元祖，然后赋值</span><br><span class="line">而由于字符串则需要注意，str_a += <span class="string">&quot;str b&quot;</span> , 虽然为不可变变量，但并不需要拷贝整个字符串（特殊情况）, 但字符串的拼接建议还是<span class="string">&quot;&quot;</span>.join()</span><br><span class="line"></span><br><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line">t[<span class="number">2</span>] += [<span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line"><span class="comment"># 结果为既赋值成功，又报错</span></span><br><span class="line"><span class="comment"># 但 t[2].extend([50, 60]) 可以赋值成功</span></span><br><span class="line"><span class="keyword">import</span> dis</span><br><span class="line">dis.dis(<span class="string">&#x27;s[a] += b&#x27;</span>) <span class="comment"># 可以查看字节码</span></span><br></pre></td></tr></table></figure>

<ol>
<li>尽量不要在不可变变量内保存可变变量</li>
<li>t[2] += [50,60] 并不是原子操作，因为，当做了一半的时候，抛出的错误。</li>
</ol>
<h4 id="list-sort-and-the-sorted-Built-In-Function"><a href="#list-sort-and-the-sorted-Built-In-Function" class="headerlink" title="list.sort and the sorted Built-In Function"></a>list.sort and the sorted Built-In Function</h4><p>对于 sort 和 sorted 来说，reverse 代表 desc,key 为单参数用于计算每一个值的结果的函数。<br>list.sort 直接针对列表排序，并且返回 None（出于编程习惯的问题，直接返回 None 的函数大多是对程序有一定的修改）</p>
<h4 id="Managing-Ordered-Sequences-with-bisect"><a href="#Managing-Ordered-Sequences-with-bisect" class="headerlink" title="Managing Ordered Sequences with bisect"></a>Managing Ordered Sequences with bisect</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line">bisect -&gt; bisect_right</span><br><span class="line">bisect_left</span><br><span class="line">insort -&gt; insort_left</span><br><span class="line">insort_right</span><br><span class="line"><span class="comment"># 搜索可以用来划分档次</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grade</span>(<span class="params">score, breakpoints=[<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>], grades=<span class="string">&#x27;FDCBA&#x27;</span></span>):</span></span><br><span class="line">    i = bisect.bisect(breakpoints, score)</span><br><span class="line">    <span class="keyword">return</span> grades[i]</span><br><span class="line"></span><br><span class="line">[grade(score) <span class="keyword">for</span> score <span class="keyword">in</span> [<span class="number">33</span>, <span class="number">99</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">100</span>]] <span class="comment"># [&#x27;F&#x27;, &#x27;A&#x27;, &#x27;C&#x27;, &#x27;C&#x27;, &#x27;B&#x27;, &#x27;A&#x27;, &#x27;A&#x27;]</span></span><br></pre></td></tr></table></figure>
<h4 id="When-a-List-Is-Not-the-Answer"><a href="#When-a-List-Is-Not-the-Answer" class="headerlink" title="When a List Is Not the Answer"></a>When a List Is Not the Answer</h4><p>list 是一种 mix-typed 的数据结构，即可以存放不同种类型的数据结构，由此带来的问题自然是性能问题：</p>
<ul>
<li>list 第一是 mix-typed 的数据结构</li>
<li>动态数组，并非数组</li>
</ul>
<p>当考虑性能的时候，则需要考虑是不是要换一个更好的数据结构：</p>
<ul>
<li>适用于类型单一的 array</li>
<li>增删比较多，或者需要使用 FIFO,LIFO, 则使用 deque (double-ended queue)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Arrays</span></span><br><span class="line">floats = array(<span class="string">&#x27;d&#x27;</span>, (random() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>**<span class="number">7</span>)))</span><br><span class="line"><span class="comment"># NumPy and SciPy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deques and Other Queue</span></span><br></pre></td></tr></table></figure>
<h4 id="Deques-and-Other-Queue"><a href="#Deques-and-Other-Queue" class="headerlink" title="Deques and Other Queue"></a>Deques and Other Queue</h4><ul>
<li>Deque</li>
<li>queue 线程安全 Queue, LifoQueue, and PriorityQueue</li>
<li>multiprocessing Queue 和 JoinableQueue</li>
<li>asyncio Queue, LifoQueue, PriorityQueue, and JoinableQueue</li>
</ul>
<h3 id="C03-Dictionaries-and-Sets"><a href="#C03-Dictionaries-and-Sets" class="headerlink" title="C03. Dictionaries and Sets"></a>C03. Dictionaries and Sets</h3><p>本章内容：</p>
<ul>
<li>Common dictionary methods</li>
<li>Special handling for missing keys</li>
<li>Variations of dict in the standard library</li>
<li>The set and frozenset types</li>
<li>How hash tables work</li>
<li>Implications of hash tables (key type limitations, unpredictable ordering, etc.)</li>
</ul>
<h5 id="Generic-Mapping-Types"><a href="#Generic-Mapping-Types" class="headerlink" title="Generic Mapping Types"></a>Generic Mapping Types</h5><p>Hashable ?  一个 obj 的 hash value 在他生命周期内 hash value 是不变的。一个 frozen set 也是 hashable 的（包括每个子元素）.</p>
<blockquote>
<p>All of Python’s immutable built-in objects are hashable , except that tuple<br>如果一个 tuple 是每个子元素都是 hashable 的话，则该 tuple 也是 hashable 的。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接在 dict 上面进行操作</span></span><br><span class="line">index.setdefault(word, []).append(location)</span><br></pre></td></tr></table></figure>
<h5 id="missing-方法"><a href="#missing-方法" class="headerlink" title="missing 方法"></a>missing 方法</h5><p>keyerror 会触发 missing 方法</p>
<h5 id="Variations-of-Dict"><a href="#Variations-of-Dict" class="headerlink" title="Variations of Dict"></a>Variations of Dict</h5><p>OrderedDict - 有序字典<br>ChainMap - 组装多个字典，按照次序搜索<br>Counter - COUNTER</p>
<h5 id="Immutable-Mappings"><a href="#Immutable-Mappings" class="headerlink" title="Immutable Mappings"></a>Immutable Mappings</h5><h5 id="Set-Theory"><a href="#Set-Theory" class="headerlink" title="Set Theory"></a>Set Theory</h5><p>交差并补</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 交集</span></span><br><span class="line">s &amp; z</span><br><span class="line">z &amp; s</span><br><span class="line">s &amp;= z</span><br><span class="line"><span class="comment"># 2. 差集</span></span><br><span class="line">s - z</span><br><span class="line">z - s</span><br><span class="line">s -= z</span><br><span class="line"><span class="comment"># 3. 并集</span></span><br><span class="line">s | z</span><br><span class="line">z | s</span><br><span class="line">s |= z</span><br><span class="line"><span class="comment"># 4. 补集</span></span><br><span class="line">s ^ z</span><br><span class="line">z ^ s</span><br><span class="line">s ^= z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被包含</span></span><br><span class="line">e <span class="keyword">in</span> z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子集</span></span><br><span class="line">s &lt;= z</span><br><span class="line">s =&gt; z</span><br></pre></td></tr></table></figure>

<h5 id="Dict-and-Set-Under-the-Hood"><a href="#Dict-and-Set-Under-the-Hood" class="headerlink" title="Dict and Set Under the Hood"></a>Dict and Set Under the Hood</h5><h3 id="C04-Text-VS-Bytes"><a href="#C04-Text-VS-Bytes" class="headerlink" title="C04. Text VS Bytes"></a>C04. Text VS Bytes</h3><pre><code> - Character Issues
 - Byte Essentials
 - Basic Encoders/Decoders
 - Understanding Encode/Decode Problems
 - Handling Text Files
 - Normalizng Unicode for Saner Comparisons
 - Sorting Unicode Text
 - The Unicode Database
 - Dual-Mode str and bytes APIs
 - Summary
 - Further Reading</code></pre>
<h2 id="P3-Function-as-Objects"><a href="#P3-Function-as-Objects" class="headerlink" title="P3. Function as Objects"></a>P3. Function as Objects</h2><p>function is the first-class object</p>
<p>Higher-Order Functions</p>
<ul>
<li><p>设计模式</p>
</li>
<li><p>装饰器</p>
</li>
<li><p>callables</p>
</li>
<li><p>function attributes</p>
</li>
<li><p>introspection</p>
</li>
<li><p>parameter annotations</p>
</li>
<li><p>nonlocal declaration</p>
</li>
<li><p> references, mutability, 实例生命周期，定制自己集合类 collections and ABCs, 多继承，重载操作符。</p>
</li>
<li><p>生成器</p>
</li>
<li><p>上下文管理器</p>
</li>
<li><p>协程 （包括 Yield)</p>
</li>
<li><p>concurrency</p>
</li>
<li><p>event-oriented IO asyncio</p>
</li>
<li><p>动态创建类</p>
</li>
<li><p>descriptors</p>
</li>
<li><p>class decorators</p>
</li>
<li><p>metaclasses</p>
</li>
</ul>
<h3 id="C05-First-Class-Function"><a href="#C05-First-Class-Function" class="headerlink" title="C05. First-Class Function"></a>C05. First-Class Function</h3><pre><code> - Treating a Function Like an Object
 - Higher-Order Functions
 - Anonymous Functions
 - The Seven Flavors of Callable Objects
 - User-Defined Callable Types
 - Function Introspection
 - From Positional to Keyword-Only Parameters
 - Function Annotations
 - Packages for Functional Programming
 - Summary
 - Further Reading</code></pre>
<h3 id="C06-Design-Patterns-with-First-Class-Functions"><a href="#C06-Design-Patterns-with-First-Class-Functions" class="headerlink" title="C06. Design Patterns with First-Class Functions"></a>C06. Design Patterns with First-Class Functions</h3><pre><code> - Refactoring Strategy
 - Command
 - Summary
 - Further Reading</code></pre>
<h3 id="C07-Function-Decorators-and-Closures"><a href="#C07-Function-Decorators-and-Closures" class="headerlink" title="C07. Function Decorators and Closures"></a>C07. Function Decorators and Closures</h3><pre><code> - Decorators 101
 - When Python Executes Decorators
 - Decorator-Enhanced Strategy Pattern
 - Variable Scope Rules
 - Closures
 - The nonlocal Declaration
 - Implementing a Simple Decorator
 - Decorators In the Standard Library
 - Stacked Decorators
 - Parameterized Decorators
 - Summary
 - Further Reading</code></pre>
<h2 id="P4-Object-Oriented-Idioms"><a href="#P4-Object-Oriented-Idioms" class="headerlink" title="P4. Object-Oriented Idioms"></a>P4. Object-Oriented Idioms</h2><h3 id="C08-Object-References-Mutability-and-Recycling"><a href="#C08-Object-References-Mutability-and-Recycling" class="headerlink" title="C08. Object References, Mutability, and Recycling"></a>C08. Object References, Mutability, and Recycling</h3><p>reference variable : variable 不是盒子，贴在盒子上的标签。</p>
<p>赋值并非创建 Copy<br>赋值给一个值并非改变之前绑定的值，而仅仅是重新绑定 rebinding<br>函数由于参数为 reference, 所以可以修改 mutable 的变量<br>函数参数不应当初始化为可修改的值。</p>
<p>id 与 == : 内存值 和 值相等<br>copy 默认是浅拷贝<br>函数参数是引用<br>GC 使用的引用计数，通过 weakref.finalize 可以增加 obj 被回收的回调函数<br>强引用和弱引用，weakref 具体使用场景？ <a href="https://pymotw.com/3/weakref/">https://pymotw.com/3/weakref/</a><br>One example is a class that wants to keep track of all its current instances. This can be done with weak references, a low-level mechanism underlying the more useful collections WeakValueDictionary, WeakKey Dictionary, WeakSet, and the finalize function from the weakref module.<br>公用字符串字面量和小的数的技巧叫做 interning</p>
<p>PS:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 IPython 中 _ 为某个表达式返回的值</span><br></pre></td></tr></table></figure>

<pre><code> - Weak References
 - Tricts Python Plays with Immutables
 - Summary
 - Further Reading</code></pre>
<h3 id="C09-A-Pythonic-Object"><a href="#C09-A-Pythonic-Object" class="headerlink" title="C09. A Pythonic Object"></a>C09. A Pythonic Object</h3><pre><code> - Object Representations
 - Vector Class Redux
 - An Alternative Constructor
 - classmethod VS staticmethod
 - Formatted Displays
 - A Hashable Vector2d
 - Private and &quot;Protected&quot; Attributes in Python
 - Saving Space with the slots Class Attribute
 - Overriding Class Attributes
 - Summary
 - Further Reading</code></pre>
<h3 id="C10-Sequence-Hacking-Hashing-and-Slicing"><a href="#C10-Sequence-Hacking-Hashing-and-Slicing" class="headerlink" title="C10. Sequence Hacking , Hashing , and Slicing"></a>C10. Sequence Hacking , Hashing , and Slicing</h3><pre><code> - Vector: A User-Defined Sequence Type
 - Vector Take #1: Vector2d Compatible
 - Protocols and Duck Typing
 - Vector Take #2: A Sliceable Sequence
 - Vector Take #3: Dynamic Attribute Access
 - Vector Take #4: Hashing and a Faster ==
 - Vector Take #5: Formatting
 - Summary
 - Further Reading</code></pre>
<h3 id="C11-Interfaces-From-Protocols-to-ABCs"><a href="#C11-Interfaces-From-Protocols-to-ABCs" class="headerlink" title="C11. Interfaces: From Protocols to ABCs"></a>C11. Interfaces: From Protocols to ABCs</h3><pre><code> - Interfaces and Protocols in Python Culture
 - Python Digs Sequences
 - Monkey-Patching to Implement a Protocol at Runtime
 - Alex Martelli&#39;s Waterfowl
 - Subclassing an ABC
 - ABCs in the Standard Library
 - Defining and Using an ABC
 - How the Tombola Subclasses Were Tested
 - Usage of register in Practice
 - Geese Can Behave as Ducks
 - Chapter Summary
 - Further Reading</code></pre>
<h3 id="C12-Inheritance-For-Good-or-For-Worse"><a href="#C12-Inheritance-For-Good-or-For-Worse" class="headerlink" title="C12. Inheritance: For Good or For Worse"></a>C12. Inheritance: For Good or For Worse</h3><pre><code> - Subclassing Built-In Types Is Tricty
 - Multiple Inheritance and Method Resolution Order
 - Multiple Inheritance in the Real World
 - Coping with Multiple Inheritance
 - A Modern Example: Mixins in Django Generic Views
 - Chapter Summary
 - Further Reading</code></pre>
<h3 id="C13-Operator-Overloading-Doing-It-Right"><a href="#C13-Operator-Overloading-Doing-It-Right" class="headerlink" title="C13. Operator Overloading: Doing It Right"></a>C13. Operator Overloading: Doing It Right</h3><blockquote>
<p>依据我的经验。除非特别适合，比如说矩阵相加，否则不要进行操作符重载。 因为 加减乘除之类的操作符本身就容易有二义性。</p>
</blockquote>
<h2 id="P5-Control-Flow"><a href="#P5-Control-Flow" class="headerlink" title="P5. Control Flow"></a>P5. Control Flow</h2><h3 id="C14-Iterables-Iterators-and-Generators"><a href="#C14-Iterables-Iterators-and-Generators" class="headerlink" title="C14. Iterables, Iterators , and Generators"></a>C14. Iterables, Iterators , and Generators</h3><pre><code> - Sentence Take #1 : A Sequence of Words Iterables VS Iterators
 - Iterables Versus Itertors
 - Sentence Take #2 : A Classic Iterator
 - Sentence Take #3 : A Generator Function
 - Sentence Take #4 : A Lazy Implementation
 - Sentence Take #5 : A Generator Expression
 - Generator Expressions : When to Use Them
 - Another Example : Arithmetic Progression Generator
 - Generator Functions in the Standard Library
 - New Syntax In Python 3.3 : yield from
 - Iterable Reducing Functions
 - A Closer Look at the iter Function
 - Case Study : Generators in a Databse Conversion Utility
 - Generators as Coroutines
 - Chapter Summary
 - Further Reading</code></pre>
<h3 id="C15-Context-Managers-and-else-Blocks"><a href="#C15-Context-Managers-and-else-Blocks" class="headerlink" title="C15. Context Managers and else Blocks"></a>C15. Context Managers and else Blocks</h3><pre><code> - Do This , Then That: else Blocks Beyond if
 - Context Managers and with Blocks
 - The contextlib Utilities
 - Using @contextmanager
 - Chapter Summary
 - Further Reading</code></pre>
<h3 id="C16-Coroutines"><a href="#C16-Coroutines" class="headerlink" title="C16. Coroutines"></a>C16. Coroutines</h3><pre><code> - How Coroutines Evolved from Generators
 - Basic Behavior of a Generator Used as a Coroutine
 - Example: Coroutine to Compute a Running Average
 - Decorators for Conroutine Priming
 - Coroutine Termination and Exception Handing
 - Returning a Value from a Coroutine
 - Using Yield from
 - The Meaning of yield from
 - Use Case: Coroutines for Discrete Event Simulation
 - Chapter Summary
 - Further Reading</code></pre>
<h3 id="C17-Concurrency-with-Futures"><a href="#C17-Concurrency-with-Futures" class="headerlink" title="C17. Concurrency with Futures"></a>C17. Concurrency with Futures</h3><pre><code> - e.g. Web Downloads in Three Styles
 - Blocking I/O and the GIL
 - Launching Processes with concurrent.futures
 - Experimenting with Executor.map
 - Downloads with Progress Display and Error Handling
 - Chapter Summary
 - Further Reading</code></pre>
<h3 id="C18-Concurrency-with-asyncio"><a href="#C18-Concurrency-with-asyncio" class="headerlink" title="C18. Concurrency with asyncio"></a>C18. Concurrency with asyncio</h3><pre><code> - Thread VS Coroutine : A Comparison
 - Downloading with asyncio and aiohttp
 - Running Circling Around Blocking Calls
 - Enhancing the asyncio downloader Script
 - From Callbacks to Futures and Coroutines
 - Writing asyncio Servers
 - Chapter Summary
 - Further Reading</code></pre>
<h2 id="P6-Metaprogramming"><a href="#P6-Metaprogramming" class="headerlink" title="P6. Metaprogramming"></a>P6. Metaprogramming</h2><h3 id="C19-Dynamic-Attributes-and-Properties"><a href="#C19-Dynamic-Attributes-and-Properties" class="headerlink" title="C19. Dynamic Attributes and Properties"></a>C19. Dynamic Attributes and Properties</h3><pre><code> - Data Wrangling with Dynamic Attributes
 - Using a Property for Attribute Validation
 - A Proper Look at Properties
 - Coding a Property Factory
 - Handling Attribute Deletion
 - Essential Attributes and Functions For Attribute Handling
 - Chapter Summary
 - Further Reading</code></pre>
<h3 id="C20-Attribute-Descriptors"><a href="#C20-Attribute-Descriptors" class="headerlink" title="C20. Attribute Descriptors"></a>C20. Attribute Descriptors</h3><pre><code> - Desciptor Example: Attribute Validation
 - Overriding VS Nonoverriding Descriptors
 - Methods Are Descriptors
 - Descriptor Usage Tips
 - Descriptor docstring and Overriding Deletion
 - Chapter Summary
 - Further Reading</code></pre>
<h3 id="C21-Class-Metaprogramming"><a href="#C21-Class-Metaprogramming" class="headerlink" title="C21. Class Metaprogramming"></a>C21. Class Metaprogramming</h3><pre><code> - A Class Factory
 - A Class Decorator for Customizing Descriptors
 - What Happens When: Import Time VS Runtime
 - Metaclasses 101
 - A Metaclass for Customizing Descriptors
 - The Metaclass prepare Special Method
 - Classes as Objects
 - Chapter Summary
 - Further Reading</code></pre>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="https://docs.python.org/3/reference/datamodel.html">https://docs.python.org/3/reference/datamodel.html</a></li>
<li>Python Cookbook</li>
<li>Python Essential Reference, 4th Edition</li>
<li>The Art of the Metaobject Protocol</li>
</ul>
<p>UPDATE:</p>
<table>
<thead>
<tr>
<th>日期</th>
<th>类型</th>
<th>详细操作</th>
</tr>
</thead>
<tbody><tr>
<td><strong>2017-04-18</strong></td>
<td>动笔</td>
<td>初始化本文结构</td>
</tr>
<tr>
<td><strong>2017-04-26</strong></td>
<td>重构</td>
<td>添加目录和阅读笔记</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>碎碎念</tag>
        <tag>书单与简评</tag>
      </tags>
  </entry>
  <entry>
    <title>ReThinking In Python</title>
    <url>/2017/07/04/RethinkingInPython/</url>
    <content><![CDATA[<h1 id="ReThinking-In-Python"><a href="#ReThinking-In-Python" class="headerlink" title="ReThinking In Python"></a>ReThinking In Python</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍这个过程中结合自己的开发常见场景记录下来的一些笔记。</p>
<h2 id="0x01-Python-胡论"><a href="#0x01-Python-胡论" class="headerlink" title="0x01 Python 胡论"></a>0x01 Python 胡论</h2><h3 id="Why-Python"><a href="#Why-Python" class="headerlink" title="Why Python"></a>Why Python</h3><p>是要用一门编程语言无非是两种原因：</p>
<ul>
<li>这门技术很火，能挣钱</li>
<li>写起来很舒服，开发效率高</li>
</ul>
<p>这也是我在涉猎了很多编程语言为什么选择了 Python 和 TypeScript 作为自己的主要技能树。</p>
<p>Python 具备这两点，TS （更加准确的说是 JavaScript）具备前一点。</p>
<p>Python 写起来真的特别舒服，语法简洁，第三方库丰富，而且也比较火。</p>
<p>有什么东西比，写代码效率高、生态圈好还重要了。</p>
<p>生态圈好，比如</p>
<ul>
<li>Web 开发用 Django/Flask</li>
<li>数据抓取用 Requests</li>
<li>数据分析清洗用 Pandas</li>
<li>机器学习 Tensorflow SCIPY</li>
</ul>
<a id="more"></a>

<h3 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h3><p><a href="./ch04/s03_Pythonista_%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86.md">Pythonista 的工具集</a></p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><h2 id="0x02-基础概念"><a href="#0x02-基础概念" class="headerlink" title="0x02 基础概念"></a>0x02 基础概念</h2><h3 id="2-1-数据类型"><a href="#2-1-数据类型" class="headerlink" title="2.1 数据类型"></a>2.1 数据类型</h3><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">False</span><br><span class="line">True</span><br><span class="line">None</span><br><span class="line">NotImplemented</span><br><span class="line">Elilipsis ...</span><br></pre></td></tr></table></figure>
<h5 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h5><p>布尔常量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">None</span><br><span class="line">False</span><br><span class="line">0 0.0 0j</span><br><span class="line">&#39;&#39; () []</span><br><span class="line">&#123;&#125;</span><br><span class="line">一个对象 __bool__() &#x3D; False , 如果上一个为 True 则__len__()</span><br></pre></td></tr></table></figure>

<p>布尔运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x or y</span><br><span class="line">x and y</span><br><span class="line">not x</span><br></pre></td></tr></table></figure>

<p>布尔比较值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 可以定制</span><br><span class="line">&lt; &lt;&#x3D; &gt;&#x3D; &gt; &#x3D;&#x3D; !&#x3D;</span><br><span class="line"># 无法定制</span><br><span class="line">is &#x2F; is not</span><br></pre></td></tr></table></figure>

<h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>五种 format 方式</p>
<ol>
<li>古代 %</li>
<li>近代 format</li>
<li>现代 f 字符串</li>
<li>内置的 template</li>
<li>jinja2 的模板</li>
</ol>
<h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><ul>
<li>int</li>
<li>float</li>
<li>complex</li>
</ul>
<h5 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ - * &#x2F; &#x2F;&#x2F; % -n +n abs() int() float()</span><br><span class="line">complex(re,im)</span><br><span class="line">c.conjugate()</span><br><span class="line">divmod(x,y)</span><br><span class="line">pow(x,y) x ** y</span><br><span class="line">math.trunc(x)</span><br><span class="line">math.round(x[,n])</span><br><span class="line">math.floor(x) &lt;&#x3D;x</span><br><span class="line">math.ceil(x)  &gt;&#x3D;x</span><br><span class="line">| ^ &amp; &lt;&lt; &gt;&gt; ~x</span><br></pre></td></tr></table></figure>

<p>注意</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(-1) &#x2F; 2 # -1</span><br><span class="line">1 &#x2F; (-2) # -1</span><br></pre></td></tr></table></figure>

<h5 id="数值哈希"><a href="#数值哈希" class="headerlink" title="数值哈希"></a>数值哈希</h5><p>// TODO : 麻蛋居然没看懂 4.4.4. Hashing of numeric types</p>
<h4 id="迭代器类型"><a href="#迭代器类型" class="headerlink" title="迭代器类型"></a>迭代器类型</h4><p>迭代器类型</p>
<h4 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h4><p>C 实现的按照 item 是否为同一类型分为：</p>
<ul>
<li><strong>Container sequences</strong>:  list, tuple, and collections.deque can hold items of different types.</li>
<li><strong>Flat sequences</strong>: str, bytes, bytearray, memoryview, and array.array hold items of one type.</li>
</ul>
<p>C 实现按照 item 是否可修改分为：</p>
<ul>
<li><strong>Mutable sequences</strong>: list, bytearray, array.array, collections.deque, and memoryview</li>
<li><strong>Immutable sequences</strong>: tuple, str, and bytes</li>
</ul>
<h5 id="通用序列操作"><a href="#通用序列操作" class="headerlink" title="通用序列操作"></a>通用序列操作</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x <span class="keyword">in</span> s</span><br><span class="line">x not <span class="keyword">in</span> s</span><br><span class="line">s + t</span><br><span class="line">s * n 或者 n * s</span><br><span class="line">s[i]</span><br><span class="line">s[i:j]</span><br><span class="line">s[i:j:s]</span><br><span class="line">len(s)</span><br><span class="line">min(s)</span><br><span class="line">max(s)</span><br><span class="line">s.index(x,i,j)</span><br><span class="line">s.count(x)</span><br><span class="line">// TODO 封装 deepEqual</span><br></pre></td></tr></table></figure>

<p>切片</p>
<p>为何 Slice 和 Range 会排除 最后一个 Item?</p>
<p>书中讲的太复杂，其实这个和尺子是一个作用，尺子从 0 刻度开始，这样方便丈量。</p>
<p>比如说：</p>
<ul>
<li>items[0:10] 为 10 厘米</li>
<li>items[10] 为 10 刻度后一个单位，即 items[10:11]</li>
<li>items[2:] 为 2 刻度后面若干个单位</li>
<li>items[::3] 以三为单位，从 0 刻度开始，最后为结尾，每三个</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[i, j] <span class="comment"># 调用 a.__getitem__((i, j))</span></span><br></pre></td></tr></table></figure>

<h5 id="不可变序列"><a href="#不可变序列" class="headerlink" title="不可变序列"></a>不可变序列</h5><ul>
<li><p>解包赋值</p>
</li>
<li><p>不要手贱加逗号</p>
</li>
<li><p>下划线可以用作临时变量 （但是 django 中下划线用于中英文）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, *rest = <span class="built_in">range</span>(<span class="number">5</span>) <span class="comment"># (0, 1, [2, 3, 4])</span></span><br><span class="line">a, b, *rest = <span class="built_in">range</span>(<span class="number">3</span>) <span class="comment"># (0, 1, [2])</span></span><br><span class="line">a, b, *rest = <span class="built_in">range</span>(<span class="number">2</span>) <span class="comment"># (0, 1, [])</span></span><br><span class="line"></span><br><span class="line">a, *body, c, d = <span class="built_in">range</span>(<span class="number">5</span>) <span class="comment"># (0, [1, 2], 3, 4)</span></span><br><span class="line">*head, b, c, d = <span class="built_in">range</span>(<span class="number">5</span>) <span class="comment"># ([0, 1], 2, 3, 4)</span></span><br></pre></td></tr></table></figure></li>
<li><p>namedtuple</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">City = namedtuple(<span class="string">&#x27;City&#x27;</span>, <span class="string">&#x27;name country population coordinates&#x27;</span>)</span><br><span class="line">tokyo = City(<span class="string">&#x27;Tokyo&#x27;</span>, <span class="string">&#x27;JP&#x27;</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>))</span><br><span class="line">tokyo.population</span><br><span class="line">tokyo.coordinates</span><br><span class="line">tokyo[<span class="number">1</span>]</span><br><span class="line">City._fields <span class="comment"># tuple</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="可变序列"><a href="#可变序列" class="headerlink" title="可变序列"></a>可变序列</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s[i] &#x3D; x</span><br><span class="line">s[i:j] &#x3D; t</span><br><span class="line">del s[i:j]</span><br><span class="line">s[i:j:k] &#x3D; t</span><br><span class="line">del s[i:j:k]</span><br><span class="line">s.append(x)</span><br><span class="line">s.clear()</span><br><span class="line">s.copy()</span><br><span class="line">s.extend(t) 或者 s +&#x3D; t</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="List-Comprehensions-and-Generator-Expressions"><a href="#List-Comprehensions-and-Generator-Expressions" class="headerlink" title="List Comprehensions and Generator Expressions"></a>List Comprehensions and Generator Expressions</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_items = [func(a) <span class="keyword">for</span> item <span class="keyword">in</span> items]</span><br><span class="line">new_items = [ <span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">new_items = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> , <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100</span>))))))</span><br><span class="line"><span class="comment"># 可写成</span></span><br><span class="line">new_items = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> , <span class="built_in">range</span>(<span class="number">100</span>))))</span><br></pre></td></tr></table></figure>
<p>list 往往和 map filter 以及 listcomp 用于创建简单的序列</p>
<h5 id="序列赋值"><a href="#序列赋值" class="headerlink" title="序列赋值"></a>序列赋值</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对于不可变类型 赋值 l *= <span class="number">2</span> 在内存中则是创建了新的两个长度的元祖，然后赋值</span><br><span class="line">而由于字符串则需要注意，str_a += <span class="string">&quot;str b&quot;</span> , 虽然为不可变变量，但并不需要拷贝整个字符串（特殊情况）, 但字符串的拼接建议还是<span class="string">&quot;&quot;</span>.join()</span><br><span class="line"></span><br><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line">t[<span class="number">2</span>] += [<span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line"><span class="comment"># 结果为既赋值成功，又报错</span></span><br><span class="line"><span class="comment"># 但 t[2].extend([50, 60]) 可以赋值成功</span></span><br><span class="line"><span class="keyword">import</span> dis</span><br><span class="line">dis.dis(<span class="string">&#x27;s[a] += b&#x27;</span>) <span class="comment"># 可以查看字节码</span></span><br></pre></td></tr></table></figure>

<ol>
<li>尽量不要在不可变变量内保存可变变量</li>
<li>t[2] += [50,60] 并不是原子操作，因为，当做了一半的时候，抛出的错误。</li>
</ol>
<h5 id="objs-sort-与-sorted"><a href="#objs-sort-与-sorted" class="headerlink" title="objs.sort 与 sorted()"></a>objs.sort 与 sorted()</h5><p>对于 sort 和 sorted 来说，reverse 代表 desc,key 为单参数用于计算每一个值的结果的函数。<br>list.sort 直接针对列表排序，并且返回 None（出于编程习惯的问题，直接返回 None 的函数大多是对程序有一定的修改）</p>
<h5 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line">bisect -&gt; bisect_right</span><br><span class="line">bisect_left</span><br><span class="line">insort -&gt; insort_left</span><br><span class="line">insort_right</span><br><span class="line"><span class="comment"># 搜索可以用来划分档次</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grade</span>(<span class="params">score, breakpoints=[<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>], grades=<span class="string">&#x27;FDCBA&#x27;</span></span>):</span></span><br><span class="line">    i = bisect.bisect(breakpoints, score)</span><br><span class="line">    <span class="keyword">return</span> grades[i]</span><br><span class="line"></span><br><span class="line">[grade(score) <span class="keyword">for</span> score <span class="keyword">in</span> [<span class="number">33</span>, <span class="number">99</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">100</span>]] <span class="comment"># [&#x27;F&#x27;, &#x27;A&#x27;, &#x27;C&#x27;, &#x27;C&#x27;, &#x27;B&#x27;, &#x27;A&#x27;, &#x27;A&#x27;]</span></span><br></pre></td></tr></table></figure>
<h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><p>list 是一种 mix-typed 的数据结构，即可以存放不同种类型的数据结构，由此带来的问题自然是性能问题：</p>
<ul>
<li>list 第一是 mix-typed 的数据结构</li>
<li>动态数组，并非数组</li>
</ul>
<p>当考虑性能的时候，则需要考虑是不是要换一个更好的数据结构：</p>
<ul>
<li>适用于类型单一的 array</li>
<li>增删比较多，或者需要使用 FIFO,LIFO, 则使用 deque (double-ended queue)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Arrays</span></span><br><span class="line">floats = array(<span class="string">&#x27;d&#x27;</span>, (random() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>**<span class="number">7</span>)))</span><br><span class="line"><span class="comment"># NumPy and SciPy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deques and Other Queue</span></span><br></pre></td></tr></table></figure>
<h5 id="Queue-与-Deque"><a href="#Queue-与-Deque" class="headerlink" title="Queue 与 Deque"></a>Queue 与 Deque</h5><ul>
<li>Deque</li>
<li>queue 线程安全 Queue, LifoQueue, and PriorityQueue</li>
<li>multiprocessing Queue 和 JoinableQueue</li>
<li>asyncio Queue, LifoQueue, PriorityQueue, and JoinableQueue</li>
</ul>
<h3 id="2-2-语句"><a href="#2-2-语句" class="headerlink" title="2.2 语句"></a>2.2 语句</h3><p>语句</p>
<h3 id="2-3-函数"><a href="#2-3-函数" class="headerlink" title="2.3 函数"></a>2.3 函数</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><h4 id="闭包与作用域"><a href="#闭包与作用域" class="headerlink" title="闭包与作用域"></a>闭包与作用域</h4><p>本部分具备一定文字量，故单独抽取出来到文章，请参考 Python 中的闭包和作用域。</p>
<h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><ul>
<li>map</li>
<li>reduce</li>
<li>filter</li>
</ul>
<h4 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj.__len__()</span><br><span class="line"><span class="built_in">len</span>()</span><br><span class="line"></span><br><span class="line">obj.__</span><br></pre></td></tr></table></figure>

<p>对于内置类型 (list, str , bytearray) 解释器在调用特殊方法的时候调用 C 库，比如 CPython 实现的 len 方法一般直接会调用 PyVarObject C Struct ob_size</p>
<p>特殊方法往往并不是显示调用，而是被隐式调用。比如 init 在 new 中的作用，比如 for item in items 世界上会调用 iter(items), 这也会隐式调用 items.<strong>iter</strong>() .</p>
<p>一般当大量使用特殊方法的时候，都是在进行元编程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>(x) 先调用 x.__bool__() , 如果 x.__bool__() 没有实现，则调用 x.__len__(), 如果为 <span class="number">0</span> 则返回 <span class="literal">False</span></span><br><span class="line"><span class="built_in">sorted</span>(arr) 可以直接返回 arr，arr.sort() 是排序内部。</span><br></pre></td></tr></table></figure>

<p>特殊方法名 （有操作符）</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>方法名</th>
</tr>
</thead>
<tbody><tr>
<td>String/Bytes</td>
<td>repr , str , format , bytes</td>
</tr>
<tr>
<td>Conversion to number</td>
<td>abs , bool , complex , init , float , hash , index</td>
</tr>
<tr>
<td>Emulating collections</td>
<td>len , getitem , setitem , delitem , contains</td>
</tr>
<tr>
<td>Iteration</td>
<td>iter, reversed , next</td>
</tr>
<tr>
<td>Emulating callables</td>
<td>call</td>
</tr>
<tr>
<td>Context management</td>
<td>enter, exit</td>
</tr>
<tr>
<td>Instance creation &amp; destruction</td>
<td>new , init , del</td>
</tr>
<tr>
<td>Attribute management</td>
<td>getattr , getattribute , setattr , delattr, dir</td>
</tr>
<tr>
<td>Attribute descriptors</td>
<td>get , set ,delete</td>
</tr>
<tr>
<td>Class service</td>
<td>prepare , instancecheck , subclasscheck</td>
</tr>
</tbody></table>
<p>特殊方法名 （无操作符）</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>方法名</th>
</tr>
</thead>
<tbody><tr>
<td>Unary numeric operators</td>
<td>neg  , pos  , abs</td>
</tr>
<tr>
<td>Rich comparison operators</td>
<td>lt  , le  , eq  , ne  , gt  , ge</td>
</tr>
<tr>
<td>Arithmetic operators</td>
<td>add  ,sub  , mul  ,truediv  ,floordiv  ,mod , divmod , pow , round round</td>
</tr>
<tr>
<td>Reversed arithmetic operators</td>
<td>radd , rsub , rmul , rtruediv, rfloordiv , rmod , rdivmod, rpow</td>
</tr>
<tr>
<td>Augmented assignment mathmatic</td>
<td>iadd , isub , imul , itruediv, ifloordiv</td>
</tr>
<tr>
<td>Bitwise operators</td>
<td>invert  , lshift  , rshift  , and  , or</td>
</tr>
<tr>
<td>Reversed bitwise operators</td>
<td>rlshift , rrshift , rand , rxor , ror</td>
</tr>
<tr>
<td>Augmented assignment bitwise</td>
<td>ilshift , irshift , iand , ixor , ior</td>
</tr>
</tbody></table>
<p>Why len Is Not a Method</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">因为对 不同类型并不是一定调用 __len__ , 对于基本类型查看 c struct 中长度，对于其他类型直接调用 __len__ , 这种区分对待</span><br></pre></td></tr></table></figure>

<h3 id="2-4-生成器"><a href="#2-4-生成器" class="headerlink" title="2.4 生成器"></a>2.4 生成器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="comment"># 这里为了省事，标记 123, 但是一般会有个循环，或者多个循环</span></span><br><span class="line"></span><br><span class="line">gen <span class="comment"># &lt;function __main__.gen&gt;</span></span><br><span class="line"><span class="comment"># 显式调用，返回方法对象</span></span><br><span class="line">g = gen() <span class="comment"># &lt;generator object gen at 0x10ec23dc0&gt;</span></span><br><span class="line"><span class="built_in">next</span>(g)</span><br><span class="line"><span class="built_in">next</span>(g)</span><br><span class="line"><span class="built_in">next</span>(g)</span><br><span class="line"><span class="built_in">next</span>(g) <span class="comment"># 执行到结尾部分或者其他报错 StopIteration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gen():</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>生成器的作用就在于将遍历 lazy 化。嗯？其实编写代码的时候完全不中写生成器也可以 lazy 化很多操作。</p>
<p>需要注意的是，generator 后面支持了一个方法叫做 send(), 是 next() 的升级版本。将原来的数据的单向流通变成了双向流通。</p>
<p>见 <a href="#423-%E5%8D%8F%E7%A8%8B">协程</a></p>
<h2 id="0x03-中级概念"><a href="#0x03-中级概念" class="headerlink" title="0x03 中级概念"></a>0x03 中级概念</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>包含元编程</p>
<h3 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h3><h4 id="单下划线与双下划线"><a href="#单下划线与双下划线" class="headerlink" title="单下划线与双下划线"></a>单下划线与双下划线</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前缀单下划线 _var # 在类中被认为是私有变量，在模块中可以通过 amodule._func() 来使用，但是没有办法 from xx.amodule import * 然后调用。</span><br><span class="line">后缀单下划线 var_ # 一般用于表示被占用的关键字 比如 default_ int_ class_ object_</span><br><span class="line">前缀双下划线 __var # 放在类中的话，实例化的时候会被转成&#39;_A__size&#39;, 这个解释器进行的操作叫做 name mangling</span><br><span class="line"></span><br><span class="line">In [13]: class A:</span><br><span class="line">    ...:     def __init__(self):</span><br><span class="line">    ...:         self.__eq__ &#x3D; 2</span><br><span class="line">    ...:         self.__size &#x3D; 34</span><br><span class="line">    ...:         self.__size__ &#x3D; 44</span><br><span class="line"></span><br><span class="line">前后双下划线 __var__</span><br><span class="line">单下划线 _</span><br></pre></td></tr></table></figure>

<h3 id="错误-调试测试"><a href="#错误-调试测试" class="headerlink" title="错误 / 调试测试"></a>错误 / 调试测试</h3><h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">. ^ $ * + ? &#123; &#125; [ ] \ | ( )</span><br><span class="line"></span><br><span class="line">Regular String</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;ab*&quot;</span></span><br><span class="line"><span class="string">&quot;\\\\section&quot;</span></span><br><span class="line"><span class="string">&quot;\\w+\\s+\\1&quot;</span></span><br><span class="line"></span><br><span class="line">Raw string</span><br><span class="line"></span><br><span class="line"><span class="string">r&quot;ab*&quot;</span></span><br><span class="line"><span class="string">r&quot;\\section&quot;</span></span><br><span class="line"><span class="string">r&quot;\w+\s+\1&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="0x04-高级概念"><a href="#0x04-高级概念" class="headerlink" title="0x04 高级概念"></a>0x04 高级概念</h2><h3 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h3><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enforcing access control and authentication</span><br><span class="line">instrumentation and timing functions</span><br><span class="line">rate-limiting</span><br><span class="line">caching, and more”</span><br></pre></td></tr></table></figure>

<h4 id="Dynamic-Attributes-and-Properties"><a href="#Dynamic-Attributes-and-Properties" class="headerlink" title="Dynamic Attributes and Properties"></a>Dynamic Attributes and Properties</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj.attr</span><br><span class="line"></span><br><span class="line">重写__getattr__</span><br><span class="line"></span><br><span class="line">// TODO: 什么时候完成 python 的 DICT 以及 JSON 的相等？</span><br><span class="line"></span><br><span class="line">accessor?</span><br><span class="line">__new__ 是一个 class method, 但是并没有 xxx</span><br><span class="line"></span><br><span class="line">x = Foo(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">object_maker</span>(<span class="params">the_class, some_arg</span>):</span></span><br><span class="line">    new_object = the_class.__new__(some_arg)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(new_object, the_class):</span><br><span class="line">        the_class.__init__(new_object, some_arg)</span><br><span class="line">    <span class="keyword">return</span> new_object</span><br><span class="line"></span><br><span class="line">x = object_maker(Foo,<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Attributes-Descriptors"><a href="#Attributes-Descriptors" class="headerlink" title="Attributes Descriptors"></a>Attributes Descriptors</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"></span><br><span class="line">__class__ <span class="comment"># 接近 type()</span></span><br><span class="line">__dict__</span><br><span class="line">__slot__</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span>(obj) <span class="comment"># 与__dict__接近</span></span><br><span class="line"><span class="built_in">getattr</span></span><br><span class="line"><span class="built_in">setattr</span></span><br><span class="line"><span class="built_in">hasattr</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Class-MetaProgramming"><a href="#Class-MetaProgramming" class="headerlink" title="Class MetaProgramming"></a>Class MetaProgramming</h4><h3 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h3><h4 id="GIL-Global-Interpreter-Lock"><a href="#GIL-Global-Interpreter-Lock" class="headerlink" title="GIL - Global Interpreter Lock"></a>GIL - Global Interpreter Lock</h4><p>并不是所有的解释器语言都有 GIL （尽管 Python 和 Ruby 里面都有）, 也并不是没有尝试过去除 GIL, 但是每次去除都会导致单线程性能的下降。所以暂时保留。</p>
<p>GIL 对程序中的影响：</p>
<blockquote>
<p>一个线程运行 Python , 而其他 N 个睡眠或者等待 I/O - <strong>同一时刻只有一个线程对共享资源进行存取</strong> , Python 线程也可以等待 threading.Lock 或者线程模块中的其他同步对象；</p>
</blockquote>
<h5 id="协同式多任务处理"><a href="#协同式多任务处理" class="headerlink" title="协同式多任务处理"></a>协同式多任务处理</h5><p>如果有两个线程，同时进行 IO 请求，当其中一个线程连接之后，立即会<strong>主动让出 GIL</strong>, 其他线程就可以运行。</p>
<blockquote>
<p>当 N 个线程在网络 I/O 堵塞，或等待重新获取 GIL，而一个线程运行 Python。</p>
</blockquote>
<p>让出之后还要执行代码呀，所以要有个收回 GIL 的动作。</p>
<h5 id="抢占式多任务处理"><a href="#抢占式多任务处理" class="headerlink" title="抢占式多任务处理"></a>抢占式多任务处理</h5><p>Python 2 GIL , 尝试收回 GIL 为 执行 1000 字节码。<br>Python 3 GIL , 尝试收回 GIL 检测间隔为 15ms</p>
<h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>原子操作：sort 之类不需要<br>非原子操作：n=n+2 的字节码分为 加载 n , 加载 2 , 相加，存储 n, 四个步骤，由于不是原子性，很可能被由于 15 ms 而被打断。</p>
<p>当然，懒人一向是 : <strong>优先级不决加括号，线程不决加 lock</strong></p>
<p>对于 Java, 程序员努力在尽可能短的时间内加锁存取共享数据，减轻线程的争夺，实现最大并行。但 Python 中，线程无法并行运行，细粒度的锁就没有了优势。</p>
<h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><blockquote>
<p>Python 多线程约等于并发。</p>
</blockquote>
<h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><p>Python 中，协程在语法上接近于生成器（函数内包含 yield 关键字）.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> a</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 协程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span>():</span></span><br><span class="line">    <span class="comment"># b = yield a</span></span><br><span class="line">    b = <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>协程在</p>
<h2 id="0x05-标准库与第三方库"><a href="#0x05-标准库与第三方库" class="headerlink" title="0x05 标准库与第三方库"></a>0x05 标准库与第三方库</h2><h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><h3 id="字符串与文本"><a href="#字符串与文本" class="headerlink" title="字符串与文本"></a>字符串与文本</h3><h3 id="数字日期与时间"><a href="#数字日期与时间" class="headerlink" title="数字日期与时间"></a>数字日期与时间</h3><h3 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h3><ol>
<li>Introduction</li>
<li>Built-in Functions</li>
<li>Built-in Constants</li>
<li>Built-in Types</li>
<li>Built-in Exceptions</li>
<li>Text Processing Services</li>
<li>Binary Data Services</li>
<li>Data Types</li>
<li>Numeric and Mathematical Modules</li>
<li>Functional Programming Modules</li>
<li>File and Directory Access</li>
<li>Data Persistence</li>
<li>Data Compression and Archiving</li>
<li>File Formats</li>
<li>Cryptographic Services</li>
<li>Generic Operating System Services</li>
<li>Concurrent Execution</li>
<li>Interprocess Communication and Networking</li>
<li>Internet Data Handling</li>
<li>Structured Markup Processing Tools</li>
<li>Internet Protocols and Support</li>
<li>Multimedia Services</li>
<li>Internationalization</li>
<li>Program Frameworks</li>
<li>Graphical User Interfaces with Tk</li>
<li>Development Tools</li>
<li>Debugging and Profiling</li>
<li>Software Packaging and Distribution</li>
<li>Python Runtime Services</li>
<li>Custom Python Interpreters</li>
<li>Importing Modules</li>
<li>Python Language Services</li>
<li>Miscellaneous Services</li>
<li>MS Windows Specific Services</li>
<li>Unix Specific Services</li>
<li>Superseded Modules</li>
<li>Undocumented Modules</li>
</ol>
<h2 id="0xAA-测试"><a href="#0xAA-测试" class="headerlink" title="0xAA 测试"></a>0xAA 测试</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>单元测试我只用 pytest</p>
<ol>
<li>给对象打补丁</li>
<li>测试异常情况</li>
<li>测试输出到日志文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pytest --pdb</span><br><span class="line">pytest --tb&#x3D;long    # exhaustive, informative traceback formatting</span><br></pre></td></tr></table></figure>

<h2 id="0xBB-调试技巧"><a href="#0xBB-调试技巧" class="headerlink" title="0xBB 调试技巧"></a>0xBB 调试技巧</h2><h3 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h3><h3 id="IPdb"><a href="#IPdb" class="headerlink" title="IPdb"></a>IPdb</h3><h2 id="0xCC-优化技巧"><a href="#0xCC-优化技巧" class="headerlink" title="0xCC 优化技巧"></a>0xCC 优化技巧</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cProfile</span><br></pre></td></tr></table></figure>

<h3 id="统计型优化"><a href="#统计型优化" class="headerlink" title="统计型优化"></a>统计型优化</h3><p><a href="https://github.com/what-studio/profiling">https://github.com/what-studio/profiling</a></p>
<h2 id="0xDD-代码质量"><a href="#0xDD-代码质量" class="headerlink" title="0xDD 代码质量"></a>0xDD 代码质量</h2><h3 id="社区推崇的代码风格-Pythonic"><a href="#社区推崇的代码风格-Pythonic" class="headerlink" title="社区推崇的代码风格 Pythonic"></a>社区推崇的代码风格 Pythonic</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful is better than ugly.</span><br><span class="line">Explicit is better than implicit.</span><br><span class="line">Simple is better than complex.</span><br><span class="line">Complex is better than complicated.</span><br><span class="line">Flat is better than nested.</span><br><span class="line">Sparse is better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren&#39;t special enough to break the rules.</span><br><span class="line">Although practicality beats purity.</span><br><span class="line">Errors should never pass silently.</span><br><span class="line">Unless explicitly silenced.</span><br><span class="line">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="line">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="line">Although that way may not be obvious at first unless you&#39;re Dutch.</span><br><span class="line">Now is better than never.</span><br><span class="line">Although never is often better than *right* now.</span><br><span class="line">If the implementation is hard to explain, it&#39;s a bad idea.</span><br><span class="line">If the implementation is easy to explain, it may be a good idea.</span><br><span class="line">Namespaces are one honking great idea -- let&#39;s do more of those!</span><br></pre></td></tr></table></figure>

<h3 id="Python-代码质量"><a href="#Python-代码质量" class="headerlink" title="Python 代码质量"></a>Python 代码质量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;ambv&#x2F;black</span><br></pre></td></tr></table></figure>

<h4 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h4><ul>
<li>外部<strong>不该</strong>引用 protected member （单下划线）</li>
<li>lambda 为一次使用，最好不要赋值。</li>
<li>不要给 buildin 函数赋值</li>
<li>py3 直接 super()</li>
<li>for in else 如果不内置 break 则出会在最后 for in 为 empty 的时候再执行 else 中的语句</li>
<li>context exit 如果不 catch 掉异常让其自然向上一级抛出错误的话，必须为 (self, exception_type, exception_value, traceback):</li>
<li>不要在 init 里面 return 数据</li>
<li>不要混用 tab 和 space</li>
<li>4 个 space 缩进</li>
<li>staticmethod 直接是 参数，classmethod 第一个参数为 cls</li>
<li>可变的 default value 是不能作为 参数的。（可能是解释器在确定函数的定义的时候完成赋值？)</li>
<li>遵循 exception hierachy <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></li>
<li>defaultdict defaultdict(lambda : 6) , 必须 callable</li>
<li>尽量 unpack 赋值</li>
<li>字典用获取用 get(“myk”,None) , 赋值用 dictionary.setdefault(“list”, []).append(“list_item”)</li>
</ul>
<h4 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h4><ul>
<li>避免使用 import * , 我觉得这点值得商榷 , 如果是某个模块下，完全可以先把模块拆分成多个，最后 import 进来，接着使用 all.</li>
<li>getxxx 获取实际值，如果不为实际值，返回 None 显然不如 try catch 来的实在。</li>
<li>避免使用 global</li>
<li>命名要注意</li>
<li>动态创建方法 , 我觉得这点值得商榷。</li>
</ul>
<h4 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h4><ul>
<li>不要检查，如果可能有异常，尽量抛出异常来 trycatch 解决。</li>
<li>a is None , if flag</li>
<li>isinstance , not type(r) is types.ListType</li>
<li>“{name}{city}”.format(**info_dict)</li>
<li>for k , v in infodict.items()</li>
<li>使用 poiinfo = namedtuple(“poiinfo”,[“name”,”lng”,”lat”]) 返回 poiinfo[‘上海’,121.00,23] 最后返回值打印 poi.name , poi.lng , poi lat</li>
<li>for numbers_value, letters_value in zip(numbers, letters):</li>
<li>enumerate</li>
<li>如果能用 listcomp 则不使用 map 和 filter</li>
</ul>
<h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><ul>
<li>用 set</li>
<li>d.iteritems() 比 items() 省内存</li>
</ul>
<h2 id="0xEE-文章更新"><a href="#0xEE-文章更新" class="headerlink" title="0xEE 文章更新"></a>0xEE 文章更新</h2><ul>
<li><strong>2017-05-11 19:43:00</strong> : 增加代码质量模块</li>
<li><strong>2017-08-04 19:43:00</strong> : 增加部分 Fluent Python 的笔记</li>
</ul>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>重构技巧</tag>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅地使用 macOS</title>
    <url>/2017/10/05/ElegantMac/</url>
    <content><![CDATA[<p>当时写这篇文章的时候才接触 mac 没多久，在使用的第二年的时候，修订了这篇文章，今年<br>是第三年，再次修订了本文。</p>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>谈及 macOS , 很多人喜欢和 Win 比个高下。在我看来， Win 虽在非编程类（除了.NET) 生态和易用性比 Mac 要好很多，可专业人士之所以专业是因为他能挑选适合的武器发挥最大的效用，不是吗？</p>
<blockquote>
<p>适合自己的，能让自己用最大效率生产或者是娱乐的，才是更好的工具。</p>
</blockquote>
<a id="more"></a>

<blockquote>
<p>由于笔者已经更换了苹果全家桶 (RMBP/IPAD/IPHONE/IWATCH)，所以本文中很多工具的挑选和调教都是为了让我全家桶用的更舒服。</p>
</blockquote>
<h2 id="0x01-系统快捷键"><a href="#0x01-系统快捷键" class="headerlink" title="0x01 系统快捷键"></a>0x01 系统快捷键</h2><h3 id="快捷键与触摸板"><a href="#快捷键与触摸板" class="headerlink" title="快捷键与触摸板"></a>快捷键与触摸板</h3><ul>
<li><p>cmd 为 command 按键，通常情况下为所有桌面程序通用性的快捷键。</p>
</li>
<li><p>ctrl ，通常情况下是针对程序的功能进行加强，并且此功能往往是非 cmd 类（窗口操作，选择，复制粘贴等等）操作。</p>
</li>
<li><p>shift 按键通常用于加强操作。一般会让操作更进一步 or 相反操作。</p>
</li>
<li><p>cmd+tab =~ alt+tab 程序之间的切换</p>
</li>
<li><p>cmd+` 应用内窗口切换</p>
</li>
<li><p>cmd+h 窗口 hide</p>
</li>
<li><p>cmd+m 窗口 minimize</p>
</li>
<li><p>cmd+n 新建窗口</p>
</li>
<li><p>cmd+o 打开</p>
</li>
<li><p>cmd+s 保存</p>
</li>
<li><p>cmd+shift+s 另存为</p>
</li>
<li><p>cmd+p 打印 print</p>
</li>
<li><p>cmd+w 关闭</p>
</li>
<li><p>cmd+q quit</p>
</li>
<li><p>cmd+a select all</p>
</li>
<li><p>cmd+i show info</p>
</li>
<li><p>cmd+n create a new folder</p>
</li>
<li><p>cmd+f search</p>
</li>
<li><p>cmd+c copy</p>
</li>
<li><p>cmd+v paste</p>
</li>
<li><p>cmd+delete  删除选中文件</p>
</li>
<li><p>cmd+shift+delete 清空回收站</p>
</li>
<li><p>cmd+= 放大</p>
</li>
<li><p>cmd+- 缩小</p>
</li>
<li><p>cmd+t 新建选项卡</p>
</li>
<li><p>cmd+r 刷新</p>
</li>
<li><p>cmd+shift+3 截取整个屏幕</p>
</li>
<li><p>cmd+shift+4 截取选择区域</p>
</li>
<li><p>cmd+shift+4+SPACE 截取选择窗口</p>
</li>
<li><p>cmd+ 鼠标点击 -&gt; 选中不连续文件</p>
</li>
<li><p>control+ 鼠标点击 -&gt; 相当于 win 中右键点击</p>
</li>
<li><p>fn+left home</p>
</li>
<li><p>fn+right end</p>
</li>
<li><p>fn+up pageup</p>
</li>
<li><p>fn+down pagedown</p>
</li>
</ul>
<p>触摸板手势：</p>
<ul>
<li><p>点击</p>
<ul>
<li>单指点击 - 单击</li>
<li>单指滑动 - 滑动鼠标光标</li>
<li>双指点击 - 相当于 Windows 的鼠标右键</li>
<li>三指点击 - 划词查找</li>
</ul>
</li>
<li><p>滑动与缩放</p>
<ul>
<li>双指上下滑动 - 滚动</li>
<li>双指缩放 - 与 Android 上图片缩放一致</li>
<li>双指双击 - 只能缩放</li>
<li>双指旋转 - 旋转</li>
<li>双指左右滑动 - 应用内切换网页</li>
<li>双指头从右往左</li>
<li>三指头左右滑动 - 全屏幕 App 切换</li>
<li>大拇指和食中无名缩放 - launchpad</li>
</ul>
</li>
</ul>
<h2 id="0x02-必备软件"><a href="#0x02-必备软件" class="headerlink" title="0x02 必备软件"></a>0x02 必备软件</h2><h3 id="2-1-必备软件-之-日常必备"><a href="#2-1-必备软件-之-日常必备" class="headerlink" title="2.1 必备软件 之 日常必备"></a>2.1 必备软件 之 日常必备</h3><ul>
<li><p>iTunes</p>
</li>
<li><p>iPhoto</p>
</li>
<li><p>iMessage</p>
</li>
<li><p>SpotLight -&gt; Alfred 3</p>
</li>
<li><p>Google Chrome</p>
</li>
<li><p>Safari</p>
</li>
<li><p>启动器</p>
<ul>
<li>Alfred 3</li>
</ul>
</li>
<li><p>网络工具</p>
<ul>
<li>Chrome</li>
</ul>
</li>
<li><p>社交通讯</p>
<ul>
<li>QQ</li>
<li>WeXin</li>
</ul>
</li>
<li><p>图形图像</p>
<ul>
<li>Adobe PhotoShop CC</li>
<li>Adobe PhotoShop LightRoom</li>
<li>Adobe After Effect</li>
<li>Final Cut Pro</li>
<li>Sketch</li>
<li>Annotate</li>
<li>Camtasia 2</li>
<li>Snagit</li>
<li>ScreenFlow</li>
<li>MPlayerX</li>
<li>QuickTime</li>
<li>iQiyi</li>
<li>NeteaseMusic</li>
<li>IINA</li>
</ul>
</li>
<li><p>办公软件</p>
<ul>
<li>欧陆词典</li>
<li>Calibre</li>
<li>Wiznote</li>
<li>PDF Reader</li>
<li>iBook</li>
<li>Microsoft Office</li>
<li>Work 套件：包括 pages, numbers, keynote</li>
<li>XMind</li>
<li>Spark</li>
<li>TeamViewer - 远程管理</li>
<li>OmniFocus</li>
<li>OmniGraffle</li>
<li>OmniOutline</li>
<li>OmniPlan</li>
</ul>
</li>
<li><p>系统软件</p>
<ul>
<li>搜狗输入法</li>
<li>AppCleaner</li>
<li>CleanMyMac</li>
<li>VMWare</li>
<li>BetterZip</li>
<li>Caffeine /  Amphetamine</li>
<li>PopClip</li>
</ul>
</li>
</ul>
<h3 id="2-2-必备软件-之-开发必备"><a href="#2-2-必备软件-之-开发必备" class="headerlink" title="2.2 必备软件 之 开发必备"></a>2.2 必备软件 之 开发必备</h3><ul>
<li><p>终端用户</p>
<ul>
<li>iTerm2</li>
</ul>
</li>
<li><p>IDE</p>
<ul>
<li>PyCharm</li>
<li>IntellijIDEA</li>
<li>WebStorm</li>
</ul>
</li>
<li><p>编辑器</p>
<ul>
<li>MacVim 配合 <a href="https://github.com/twocucao/c-vim">C-VIM</a></li>
<li>Sublime Text 3</li>
</ul>
</li>
<li><p>后台组件</p>
<ul>
<li>MySQL</li>
<li>PostgreSQL</li>
<li>Redis</li>
<li>MongoDB</li>
</ul>
</li>
<li><p>数据库管理软件</p>
<ul>
<li>Navicat</li>
<li>Datagrip</li>
<li>RoboMongo</li>
<li>RDM</li>
<li>Dash</li>
</ul>
</li>
<li><p>网络工具</p>
<ul>
<li>SS QT</li>
<li>Charles</li>
<li>Wireshark</li>
</ul>
</li>
<li><p>Chrome</p>
<ul>
<li>Exporter : 百度云，需要离线安装</li>
<li>AdBlock : 广告拦截</li>
<li>AutoPatchWork : 链接下一页</li>
<li>Axure RP Extension : Axure</li>
<li>CSSViewer</li>
<li>Dream Afar New Tab</li>
<li>JSON Editor</li>
<li>JSON View</li>
<li>Octotree</li>
<li>One-Click Extensions Manager</li>
<li>Proxy SwitchyOmega</li>
<li>React Developer Tools</li>
<li>Redux DevTools</li>
<li>Vue.js devtools</li>
<li>Vimium</li>
</ul>
</li>
<li><p>代码仓库</p>
<ul>
<li>Github Desktop</li>
<li>SourceTree</li>
</ul>
</li>
<li><p>GIS 相关</p>
<ul>
<li>ArcGIS</li>
<li>QGIS</li>
<li>PostgreSQL + PostGIS</li>
</ul>
</li>
</ul>
<h4 id="CMD-命令"><a href="#CMD-命令" class="headerlink" title="CMD 命令"></a>CMD 命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> ! $(<span class="built_in">which</span> brew); <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Installing homebrew...&quot;</span></span><br><span class="line">    ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure we’re using the latest Homebrew.</span></span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Upgrade any already-installed formulae.</span></span><br><span class="line">brew upgrade --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install GNU core utilities (those that come with OS X are outdated).</span></span><br><span class="line"><span class="comment"># Don’t forget to add `$(brew --prefix coreutils)/libexec/gnubin` to `$PATH`.</span></span><br><span class="line">brew install coreutils</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/gsha256sum /usr/<span class="built_in">local</span>/bin/sha256sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install some other useful utilities like `sponge`.</span></span><br><span class="line">brew install moreutils</span><br><span class="line"><span class="comment"># Install GNU `find`, `locate`, `updatedb`, and `xargs`, `g`-prefixed.</span></span><br><span class="line">brew install findutils</span><br><span class="line"><span class="comment"># Install GNU `sed`, overwriting the built-in `sed`.</span></span><br><span class="line">brew install gnu-sed --with-default-names</span><br><span class="line"><span class="comment"># Install Bash 4.</span></span><br><span class="line">brew install bash</span><br><span class="line">brew tap homebrew/versions</span><br><span class="line">brew install bash-completion2</span><br><span class="line"><span class="comment"># We installed the new shell, now we have to activate it</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Adding the newly installed shell to the list of allowed shells&quot;</span></span><br><span class="line"><span class="comment"># Prompts for password</span></span><br><span class="line">sudo bash -c <span class="string">&#x27;echo /usr/local/bin/bash &gt;&gt; /etc/shells&#x27;</span></span><br><span class="line"><span class="comment"># Change to the new shell, prompts for password</span></span><br><span class="line">chsh -s /usr/<span class="built_in">local</span>/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install `wget` with IRI support.</span></span><br><span class="line">brew install wget --with-iri</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install RingoJS and Narwhal.</span></span><br><span class="line"><span class="comment"># Note that the order in which these are installed is important;</span></span><br><span class="line"><span class="comment"># see http://git.io/brew-narwhal-ringo.</span></span><br><span class="line">brew install ringojs</span><br><span class="line">brew install narwhal</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Python</span></span><br><span class="line">brew install python</span><br><span class="line">brew install python3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install ruby-build and rbenv</span></span><br><span class="line">brew install ruby-build</span><br><span class="line">brew install rbenv</span><br><span class="line">LINE=<span class="string">&#x27;eval &quot;$(rbenv init -)&quot;&#x27;</span></span><br><span class="line">grep -q <span class="string">&quot;<span class="variable">$LINE</span>&quot;</span> ~/.extra || <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$LINE</span>&quot;</span> &gt;&gt; ~/.extra</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install more recent versions of some OS X tools.</span></span><br><span class="line">brew install vim --override-system-vi</span><br><span class="line">brew install homebrew/dupes/grep</span><br><span class="line">brew install homebrew/dupes/openssh</span><br><span class="line">brew install homebrew/dupes/screen</span><br><span class="line">brew install homebrew/php/php55 --with-gmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install font tools.</span></span><br><span class="line">brew tap bramstein/webfonttools</span><br><span class="line">brew install sfnt2woff</span><br><span class="line">brew install sfnt2woff-zopfli</span><br><span class="line">brew install woff2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install some CTF tools; see https://github.com/ctfs/write-ups.</span></span><br><span class="line">brew install aircrack-ng</span><br><span class="line">brew install bfg</span><br><span class="line">brew install binutils --with-default-names</span><br><span class="line">brew install binwalk</span><br><span class="line">brew install cifer</span><br><span class="line">brew install dex2jar</span><br><span class="line">brew install diffutils</span><br><span class="line">brew install dns2tcp</span><br><span class="line">brew install ed --with-default-names</span><br><span class="line">brew install fcrackzip</span><br><span class="line">brew install findutils --with-default-names</span><br><span class="line">brew install foremost</span><br><span class="line">brew install gawk</span><br><span class="line">brew install gnu-indent --with-default-names</span><br><span class="line">brew install gnu-sed --with-default-names</span><br><span class="line">brew install gnu-tar --with-default-names</span><br><span class="line">brew install gnu-which --with-default-names</span><br><span class="line">brew install gnutls</span><br><span class="line">brew install grep --with-default-names</span><br><span class="line">brew install gzip</span><br><span class="line">brew install hashpump</span><br><span class="line">brew install homebrew/x11/xpdf</span><br><span class="line">brew install hydra</span><br><span class="line">brew install john</span><br><span class="line">brew install knock</span><br><span class="line">brew install netpbm</span><br><span class="line">brew install nmap</span><br><span class="line">brew install pngcheck</span><br><span class="line">brew install screen</span><br><span class="line">brew install socat</span><br><span class="line">brew install sqlmap</span><br><span class="line">brew install tcpflow</span><br><span class="line">brew install tcpreplay</span><br><span class="line">brew install tcptrace</span><br><span class="line">brew install tmux</span><br><span class="line">brew install ucspi-tcp <span class="comment"># `tcpserver` etc.</span></span><br><span class="line">brew install watch</span><br><span class="line">brew install wdiff --with-gettext</span><br><span class="line">brew install wget</span><br><span class="line">brew install xz</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install other useful binaries.</span></span><br><span class="line">brew install ack</span><br><span class="line">brew install dark-mode</span><br><span class="line"><span class="comment">#brew install exiv2</span></span><br><span class="line">brew install git</span><br><span class="line">brew install git-lfs</span><br><span class="line">brew install git-flow</span><br><span class="line">brew install git-extras</span><br><span class="line">brew install hub</span><br><span class="line">brew install imagemagick --with-webp</span><br><span class="line">brew install lua</span><br><span class="line">brew install lynx</span><br><span class="line">brew install p7zip</span><br><span class="line">brew install pigz</span><br><span class="line">brew install pv</span><br><span class="line">brew install rename</span><br><span class="line">brew install rhino</span><br><span class="line">brew install speedtest_cli</span><br><span class="line">brew install ssh-copy-id</span><br><span class="line">brew install tree</span><br><span class="line">brew install webkit2png</span><br><span class="line">brew install zopfli</span><br><span class="line">brew install pkg-config libffi</span><br><span class="line">brew install pandoc</span><br><span class="line">brew install gtk-doc</span><br><span class="line">brew install swig</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lxml and Libxslt</span></span><br><span class="line">brew install libxml2</span><br><span class="line">brew install libxslt</span><br><span class="line">brew link libxml2 --force</span><br><span class="line">brew link libxslt --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitbook autocover</span></span><br><span class="line">brew install pkg-config cairo pango libpng jpeg giflib</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Cask</span></span><br><span class="line">brew install caskroom/cask/brew-cask</span><br><span class="line">brew tap caskroom/versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># aerial 屏保</span></span><br><span class="line"><span class="comment"># https://github.com/JohnCoates/Aerial</span></span><br><span class="line">brew cask install aerial</span><br><span class="line"><span class="comment"># https://github.com/sindresorhus/quick-look-plugins</span></span><br><span class="line">brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzipql qlimagesize webpquicklook suspicious-package quicklookase qlvideo</span><br><span class="line"></span><br><span class="line">brew update &amp;&amp; brew upgrade --all &amp;&amp; brew cleanup &amp;&amp; brew prune</span><br></pre></td></tr></table></figure>

<h3 id="2-3-必备软件-之-编程语言"><a href="#2-3-必备软件-之-编程语言" class="headerlink" title="2.3 必备软件 之 编程语言"></a>2.3 必备软件 之 编程语言</h3><h4 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h4><p>MAC 使用的大多命令行工具来自于 FreeBSD , 并不是来自 GNU , 所以很多命令会与常规的 linux 命令大同小异。</p>
<p>而本人喜欢 GNU 系软件。</p>
<p>Shell 脚本可参考我的笔记。 <code>第九节如何优雅的使用 Shell</code>_</p>
<p>说到 shell, 除了要使用 bash 的 shell 之外，zsh 的 shell 也值得一试。（不过大神 kennethreitz 最喜欢 fish shell )</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>笔者虽然也接触过很多语言，都是粗浅一过，但无一精通，唯一可以稍微谈谈的就是 Python 语言。</p>
<p>当然，安装完毕自然是可以参考一下我的 <code>第三节 Pythonista 的工具集</code>_</p>
<p>国内外网络环境不通畅，安装与配置环境这件小事也就成了一个大事情。</p>
<p>我对于 Python 版本的安装 和 Python 依赖包管理有三个阶段：</p>
<ul>
<li>入门级</li>
<li>新手级</li>
<li>熟手级</li>
</ul>
<p>最初是入门级，我配置环境和大部分的 Pythonista 一样，最初版：</p>
<ul>
<li><p>面对 Python 版本的管理，干脆就是不管理，brew 安装一个 Python2 用于开发 Python2 的代码，brew install 一个 Python3 用于 Python3 的代码开发。</p>
</li>
<li><p>面对 Python 依赖包管理，干脆就是直接使用 virualenv 或者他的 wrapper 直接 venv 一个环境，然后 active 一下，接着 PIP install -r req.txt</p>
</li>
<li><p>面对 Python 版本的管理，使用 pyenv</p>
</li>
<li><p>面对 Python 依赖包管理，使用 pyenv virtualenv 出多个环境，然后切换环境就好了。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">brew install pipenv</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv.git ~/.pyenv</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着另开终端</span></span><br><span class="line"><span class="comment"># 不喜写兼容代码，所有代码均向 3.5+ 靠拢</span></span><br><span class="line">v=3.5.2;wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></span><br><span class="line">v=3.6.0;wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></span><br><span class="line">v=2.7.11;wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></span><br><span class="line"><span class="comment"># 可以先用迅雷把 官网的 Anaconda3-4.4.0-MacOSX-x86_64.sh 下载下来，然后</span></span><br><span class="line">mv Anaconda3-4.4.0-MacOSX-x86_64.sh ~/.pyenv/cache/ &amp;&amp; pyenv install anaconda3-4.4.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Global Python 为 2.7.11, 备注：尽量不要把 Py3 设置为全局，否则由于 Homebrew 本身有一些依赖是依赖于 Py2 的，这样容易出现一些奇怪的问题。</span></span><br><span class="line">pyenv global 2.7.11</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple requests</span><br><span class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></span><br><span class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">&quot;jedi&gt;=0.9.0&quot;</span> <span class="string">&quot;json-rpc&gt;=1.8.1&quot;</span> <span class="string">&quot;service_factory&gt;=0.1.5&quot;</span> flake8 pytest autoflake hy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建最常用 Py3 虚拟环境</span></span><br><span class="line">pyenv virtualenv 3.5.2 py3-daily</span><br><span class="line">pyenv activate py3-daily</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple requests</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple beatutifulsoup4</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple ipython[notebook]</span><br><span class="line">pip install -i https://pypi.doubanio.com/simple jupyter</span><br><span class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></span><br><span class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">&quot;jedi&gt;=0.9.0&quot;</span> <span class="string">&quot;json-rpc&gt;=1.8.1&quot;</span> <span class="string">&quot;service_factory&gt;=0.1.5&quot;</span> flake8 pytest autoflake hy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Anaconda 的数据科学 AI 环境</span></span><br><span class="line">pyenv virtualenv anaconda3-4.4.0 py3-ai</span><br><span class="line">pyenv activate anaconda3-4.4.0/envs/py3-ai</span><br><span class="line">pyenv deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入一个项目之后</span></span><br><span class="line">pyenv activate py3-proj</span><br><span class="line">pip install -r requirements/local.txt</span><br><span class="line">pip install -r requirements/prod.txt</span><br><span class="line"><span class="comment"># requirements/local.txt 与 requirements/prod.txt 依赖于 requirements/base.txt</span></span><br></pre></td></tr></table></figure>

<p>其实，第一种入门级管理方式弊病在于，python 版本太粗糙，之前遇到一个 python3.3 的问题，python3.4 就解决了。而为了避免这种奇葩的版本差异带来的潜在风险，开发与部署一般要锁死 Python 版本。</p>
<p>即便是解决了入门级管理方式带来的版本管理粗糙的问题，同样的，依赖也要锁死。<strong>一个项目对应一种环境该多好</strong> 通过 PIP 的确可以用 freeze 输出为 txt 达到锁死的目的。但个人认为，这个还不够，至少要知道依赖树之类的吧？还要知道哪些东西是可以更新的吧？</p>
<p>而且，就应该像 node 项目里面的 package.json 一样，把依赖什么乱七八糟的东西都放进去才好。</p>
<ul>
<li>面对 Python 版本和依赖包管理，使用 pipenv</li>
</ul>
<blockquote>
<p>这代表着，只要一个就行了。</p>
</blockquote>
<h4 id="JavaScript-与-Node-环境"><a href="#JavaScript-与-Node-环境" class="headerlink" title="JavaScript 与 Node 环境"></a>JavaScript 与 Node 环境</h4><h5 id="Nvm-amp-amp-Npm-amp-amp-Yarn"><a href="#Nvm-amp-amp-Npm-amp-amp-Yarn" class="headerlink" title="Nvm &amp;&amp; Npm &amp;&amp; Yarn"></a>Nvm &amp;&amp; Npm &amp;&amp; Yarn</h5><p>nvm 主要用户管理 node 的版本，linux / mac only ,windower 最好下载 node 版本安装，记得配置环境变量。</p>
<p>npm 主要用户管理包，国内人喜欢使用 cnpm, 但是 cnpm 包管理比较渣，所以一般情况下选择 Yarn 配合管理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm install cnpm</span><br><span class="line">cnpm install yarn -g</span><br><span class="line"><span class="comment"># 查看下载源</span></span><br><span class="line"><span class="comment"># yarn config get registry</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat ~/.npmrc</span><br><span class="line">registry=https://registry.npm.taobao.org/</span><br><span class="line">chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver</span><br><span class="line">disturl=https://npm.taobao.org/dist</span><br><span class="line">operadriver_cdnurl=http://cdn.npm.taobao.org/dist/operadriver</span><br><span class="line">phantomjs_cdnurl=http://cdn.npm.taobao.org/dist/phantomjs</span><br><span class="line">fse_binary_host_mirror=https://npm.taobao.org/mirrors/fsevents</span><br><span class="line">sass_binary_site=http://cdn.npm.taobao.org/dist/node-sass</span><br><span class="line">electron_mirror=http://cdn.npm.taobao.org/dist/electron/</span><br></pre></td></tr></table></figure>
<p>yarn 在使用包管理的时候会分析依赖，这对总是 BUG 不断的 node_module 简直是福音。</p>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>Java 环境安装稍微有一丢丢蛋疼。特别是多版本管理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TODO: 以后补充 JAVA 环境安装</span><br></pre></td></tr></table></figure>

<h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><p>两年前写过几个月的 Ruby, 现在安装 Ruby 环境更多是因为 Ruby 还有一些 Gem 质量挺高的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -sSL https:&#x2F;&#x2F;get.rvm.io | bash -s stable</span><br><span class="line">rvm install 2.3.0</span><br><span class="line">gem install tmuxinator</span><br></pre></td></tr></table></figure>

<h3 id="2-4-必备配置-之-dotfiles"><a href="#2-4-必备配置-之-dotfiles" class="headerlink" title="2.4 必备配置 之 dotfiles"></a>2.4 必备配置 之 dotfiles</h3><p>详细内容请见 <a href="https://github.com/twocucao/yadotfiles">yadotfiles</a></p>
<ul>
<li>依照我个人的习惯，在 OhMyZsh 基础上增加了个人习惯的环境变量的配置，一些函数的封装。</li>
</ul>
<p>比如，当我在写本文的目录中输入 todos, 就可以查看该我在写文章的时候里面挖了多少个还没有填上去的 TODO（坑）。如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3e383c54 (Micheal Gardner 2017-11-18 12:40:38 +0800 422) ## 0xEE TODO TO LIST</span><br><span class="line">ae86b7cb (Micheal Gardner 2017-11-19 21:39:49 +0800 245) ### 5. TODO</span><br><span class="line">c0d51990 (Micheal Gardner 2017-11-22 16:42:08 +0800 552) TODO: 以后补充 JAVA 环境安装</span><br><span class="line">c0d51990 (Micheal Gardner 2017-11-22 16:42:08 +0800 561) 比如，当我在写本文的目录中输入 todos, 就可以查看该我在写文章的时候里面挖了多少个还没有填上去的 TODO（坑）。</span><br></pre></td></tr></table></figure>

<p>详细请参考 <a href="https://github.com/twocucao/yadotfiles">yadotfiles</a></p>
<h2 id="0x08-踩坑史"><a href="#0x08-踩坑史" class="headerlink" title="0x08 踩坑史"></a>0x08 踩坑史</h2><h3 id="8-1-日常类"><a href="#8-1-日常类" class="headerlink" title="8.1 日常类"></a>8.1 日常类</h3><h4 id="01-时间机器无法完成备份"><a href="#01-时间机器无法完成备份" class="headerlink" title="01. 时间机器无法完成备份"></a>01. 时间机器无法完成备份</h4><p>我有定期备份的习惯，在一次备份中，意外的发现怎么备份都无法备份完毕，经过几次测试：</p>
<ol>
<li>我首先猜测是硬盘问题，换了一块硬盘，问题依旧。</li>
<li>复制了几个大文件，感觉也不太像是接口接触不良的问题。</li>
<li>我认为可能是文件数量过多导致的问题。于是删除掉 node_module 后再次备份，备份成功。当然，这也有一定概率是误打误撞。毕竟从概率学上讲，坏掉的钟还能一天有两次时间是对的呢。</li>
</ol>
<blockquote>
<p>外接硬盘的时候，将网络关闭即可。</p>
</blockquote>
<h4 id="02-下载站的软件包显示损坏"><a href="#02-下载站的软件包显示损坏" class="headerlink" title="02. 下载站的软件包显示损坏"></a>02. 下载站的软件包显示损坏</h4><p>有的时候并不是软件损坏，而是 macOS 的安全配置中配置关掉了未识别出的 App</p>
<p>在终端中开启这个选项，并在安全与隐私处点上 anywhere 即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>

<h3 id="8-2-编程类"><a href="#8-2-编程类" class="headerlink" title="8.2 编程类"></a>8.2 编程类</h3><h4 id="01-homebrew-的与-Python-的问题"><a href="#01-homebrew-的与-Python-的问题" class="headerlink" title="01. homebrew 的与 Python 的问题"></a>01. homebrew 的与 Python 的问题</h4><p>在 Python 中执行下面的代码的时候总是报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip = socket.gethostbyname(socket.gethostname())</span><br><span class="line"><span class="comment"># socket.gaierror: [Errno 8] nodename nor servname provided, or not known</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后发现是因为设置主机名没有设置好</span></span><br><span class="line">sudo scutil --<span class="built_in">set</span> ComputerName <span class="string">&quot;newname&quot;</span></span><br><span class="line">sudo scutil --<span class="built_in">set</span> LocalHostName <span class="string">&quot;newname&quot;</span></span><br><span class="line">sudo scutil --<span class="built_in">set</span> HostName <span class="string">&quot;newname&quot;</span></span><br><span class="line">dscacheutil -flushcache</span><br><span class="line"><span class="comment"># 然后重启电脑即可</span></span><br></pre></td></tr></table></figure>

<p>如果本机安装了 Homebrew 如果后面使用 PyEnv 或者 Anaconda 并且设置当前环境为默认 Python 为 Python3（不建议这么搞）, 但是如果偏偏要把默认的 Python 版本换成 Python3, 会弹出一些 pythonpath<br>的问题，执行下面命令即可暂时屏蔽这个问题，但是没有隐患则不清楚。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /usr/<span class="built_in">local</span>/lib/python2.7/site-packages/sitecustomize.py /usr/<span class="built_in">local</span>/lib/python2.7/site-packages/sitecustomize.py.back</span><br></pre></td></tr></table></figure>

<h4 id="02-Homebrew-安装过去的文件"><a href="#02-Homebrew-安装过去的文件" class="headerlink" title="02. Homebrew 安装过去的文件"></a>02. Homebrew 安装过去的文件</h4><h3 id="8-3-存储与文件系统"><a href="#8-3-存储与文件系统" class="headerlink" title="8.3 存储与文件系统"></a>8.3 存储与文件系统</h3><p>笔者在自己的电脑上使用的是 APFS, 毕竟苹果官方出的，多多少少在系统上做很多优化的工作。</p>
<p>一般的存储设备（移动硬盘或者是 USB 存储）的话，我们常常会在下面几个里面纠结</p>
<ul>
<li>FAT32</li>
<li>NTFS</li>
<li>HFS</li>
<li>exFAT</li>
</ul>
<p>一般原则是</p>
<ol>
<li>存放东西用 exFAT</li>
<li>Win 上的启动盘 FAT32</li>
</ol>
<p>但也要注意的是，exFat 不能很自由的 resize 或者分区合并。</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li>本文部分命令行安装借鉴了 <a href="https://github.com/donnemartin/dev-setup">dev-setup</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2016-02</strong> 确定大致内容</li>
<li><strong>2017-06-28</strong> 重修文字，调整文章结构，Python 环境 和 Homebrew 安装环境</li>
<li><strong>2017-10-05</strong> 再次重修文字，不定期更新</li>
<li><strong>2018-09-20</strong> 重新修订文字</li>
</ul>
]]></content>
      <categories>
        <category>善用佳软</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次小机器的 Python 大数据分析</title>
    <url>/2017/12/07/ANoteWithSmallMachineAndBigData/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>机缘巧合，最近公司突然要搞一波大量数据的分析。属于客流类的分析。</p>
<p>数据量级也还算不错，经过 gzip 压缩，接近 400 个 点位的 SQL 文件 (MySQL innoDB)，大小接近 100GB 左右，原始记录数据估测在 180 亿左右。</p>
<p>解压后…… 差不多一个 T 吧。</p>
<p>如果是人民币玩家，自然是直接购置几十台高配置机器，做个 mysql shard 或者直接上大数据全家桶比如 hadoop 和 hive 之类，让程序员去往死里折腾吧。</p>
<blockquote>
<p>嗯，然而对于我这种非人民币玩家，就要用单机硬扛。</p>
</blockquote>
<p>那就硬扛呗。</p>
<p>我手上的机器配置如下：</p>
<ul>
<li><p>局域网服务器 （ Ubuntu 16.04 LTS ）</p>
<ul>
<li>Xeon(R) CPU E3-1225 v5 @ 3.30GHz</li>
<li>16G 内存</li>
<li>1T 硬盘</li>
</ul>
</li>
<li><p>苹果电脑 2016 年 15 寸 最高配</p>
<ul>
<li>1T 硬盘</li>
<li>i7 四核</li>
</ul>
</li>
</ul>
<h2 id="0x01-准备数据阶段"><a href="#0x01-准备数据阶段" class="headerlink" title="0x01 准备数据阶段"></a>0x01 准备数据阶段</h2><p>用低配机器分析大数据的<strong>首要原则</strong>，就是<strong>不要分析大数据</strong>。</p>
<p>何也？</p>
<blockquote>
<p>就是<strong>尽可能的抽取所得结论所需分析数据的最小超集</strong></p>
</blockquote>
<p>小机器是无法完成海量计算的，但通过一定的过滤和筛选可以将数据筛选出到一台机器能扛得住的计算量。从而达到可以可以分析海量数据的目的。</p>
<h3 id="1-1-将数据导入-MySQL-中"><a href="#1-1-将数据导入-MySQL-中" class="headerlink" title="1.1 将数据导入 MySQL 中"></a>1.1 将数据导入 MySQL 中</h3><p>我们先不管三七二十一，既然给了 SQL 文件，肯定要入库的，那么问题来了：</p>
<blockquote>
<p><del>将大象关进冰箱要几个步骤</del></p>
</blockquote>
<p>将数据导入数据库中需要几个步骤</p>
<p>或者说，如何更快的导入 400 张不同表的数据。</p>
<p>大致步骤如下：</p>
<ul>
<li>新增硬盘，并初始化</li>
<li>配置 MySQL 的 datadir 到新增硬盘上</li>
<li>导入数据 (PV &amp; MySQL)</li>
</ul>
<h4 id="新增硬盘，并初始化"><a href="#新增硬盘，并初始化" class="headerlink" title="新增硬盘，并初始化"></a>新增硬盘，并初始化</h4><p>首先，<strong>购买并插入硬盘</strong></p>
<p>使用 lshw 查看硬盘信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># lshw -C disk</span></span><br><span class="line">  *-disk</span><br><span class="line">       description: SCSI Disk</span><br><span class="line">       product: My Passport 25E2</span><br><span class="line">       vendor: WD</span><br><span class="line">       physical id: 0.0.0</span><br><span class="line">       bus info: scsi@7:0.0.0</span><br><span class="line">       logical name: /dev/sdb</span><br><span class="line">       version: 4004</span><br><span class="line">       serial: WX888888HALK</span><br><span class="line">       size: 3725GiB (4TB)</span><br><span class="line">       capabilities: gpt-1.00 partitioned partitioned:gpt</span><br><span class="line">       configuration: ansiversion=6 guid=88e88888-422d-49f0-9ba9-221db75fe4b4 logicalsectorsize=512 sectorsize=4096</span><br><span class="line">  *-disk</span><br><span class="line">       description: ATA Disk</span><br><span class="line">       product: WDC WD10EZEX-08W</span><br><span class="line">       vendor: Western Digital</span><br><span class="line">       physical id: 0.0.0</span><br><span class="line">       bus info: scsi@0:0.0.0</span><br><span class="line">       logical name: /dev/sda</span><br><span class="line">       version: 1A01</span><br><span class="line">       serial: WD-WC888888888U</span><br><span class="line">       size: 931GiB (1TB)</span><br><span class="line">       capabilities: partitioned partitioned:dos</span><br><span class="line">       configuration: ansiversion=5 logicalsectorsize=512 sectorsize=4096 signature=f1b42036</span><br><span class="line">  *-cdrom</span><br><span class="line">       description: DVD reader</span><br><span class="line">       product: DVDROM DH1XXX8SH</span><br><span class="line">       vendor: PLDS</span><br><span class="line">       physical id: 0.0.0</span><br><span class="line">       bus info: scsi@5:0.0.0</span><br><span class="line">       logical name: /dev/cdrom</span><br><span class="line">       logical name: /dev/dvd</span><br><span class="line">       logical name: /dev/sr0</span><br><span class="line">       version: ML31</span><br><span class="line">       capabilities: removable audio dvd</span><br><span class="line">       configuration: ansiversion=5 status=nodisc</span><br></pre></td></tr></table></figure>

<p>使用 fdisk 格式化硬盘，并且分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br><span class="line"><span class="comment">#输入 n</span></span><br><span class="line"><span class="comment">#输入 p</span></span><br><span class="line"><span class="comment">#输入 1</span></span><br><span class="line"><span class="comment">#输入 w</span></span><br><span class="line">sudo mkfs -t ext4 /dev/sdb1</span><br><span class="line">mkdir -p /media/mynewdrive</span><br><span class="line">vim /etc/fstab</span><br><span class="line"><span class="comment"># /dev/sdb1    /media/mynewdrive   ext4    defaults     0        2</span></span><br><span class="line"><span class="comment"># 直接挂载所有，或者 reboot</span></span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure>

<p>至此为止，硬盘就格式化完成了。</p>
<blockquote>
<p>关于安装硬盘，可以参考 <a href="https://help.ubuntu.com/community/InstallingANewHardDrive">https://help.ubuntu.com/community/InstallingANewHardDrive</a></p>
</blockquote>
<h4 id="配置-MySQL"><a href="#配置-MySQL" class="headerlink" title="配置 MySQL"></a>配置 MySQL</h4><p>篇幅有限，只简介具体在 Ubuntu 16.04 上面 配置 MySQL 的 DataDIR ，省去安装和基本登录认证的配置。</p>
<p>mysql 在 ubuntu 下面默认的路径如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/lib/mysql/</span><br></pre></td></tr></table></figure>

<p>我们开始配置 DataDIR</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop mysql</span><br><span class="line">rsync -av /var/lib/mysql /mnt/volume-nyc1-01</span><br><span class="line">mv /var/lib/mysql /var/lib/mysql.bak</span><br><span class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="comment"># 修改至 datadir=/mnt/volume-nyc1-01/mysql</span></span><br><span class="line">vim /etc/apparmor.d/tunables/<span class="built_in">alias</span></span><br><span class="line"><span class="comment"># alias /var/lib/mysql/ -&gt; /mnt/volume-nyc1-01/mysql/</span></span><br><span class="line">sudo systemctl restart apparmor</span><br><span class="line">vim /usr/share/mysql/mysql-systemd-start</span><br><span class="line"><span class="comment"># 修改成</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /var/lib/mysql ] &amp;&amp; [ ! -L /var/lib/mysql ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;MySQL data dir not found at /var/lib/mysql. Please create one.&quot;</span></span><br><span class="line"> <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d /var/lib/mysql/mysql ] &amp;&amp; [ ! -L /var/lib/mysql/mysql ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;MySQL system database not found. Please run mysql_install_db tool.&quot;</span></span><br><span class="line"> <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来</span></span><br><span class="line">sudo mkdir /var/lib/mysql/mysql -p</span><br><span class="line">sudo systemctl restart mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后 my.conf 修改相关文件路径</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>详细请参考这篇文章 <a href="https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-16-04">https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-16-04</a></p>
</blockquote>
<p>将 DataDIR 配置完成之后，就可以导入数据了。嗯，经过这么麻烦的事情之后，我决定下次遇到这种情况首选 Docker 而不是在 Ubuntu Server 上面搞这个。</p>
<blockquote>
<p>站在现在看，如果重来的话，我肯定会用 Docker 然后把数据盘挂载到新硬盘到。</p>
</blockquote>
<p>比如直接 Docker 命令执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure>

<h4 id="导入数据-之-MySQL-PV"><a href="#导入数据-之-MySQL-PV" class="headerlink" title="导入数据 之 MySQL + PV"></a>导入数据 之 MySQL + PV</h4><p>我们使用 mysql 导入脚本的时候，有几种导入方式</p>
<ul>
<li>source 命令，然而这个命令容易在数据量很大的时候直接卡掉。（印象中是直接把 sql 文件加载到内存中，然后执行，然而，只要涉及到大量文本打印出来并且执行，速度一定会变慢很多）</li>
<li>mysql 命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql 命令的典型导入场景就是这样</span></span><br><span class="line">mysql -uadmin -p123456 some_db &lt; tb.sql</span><br></pre></td></tr></table></figure>

<p>加上 PV 命令的话，比较神奇了。有进度条了！!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 附加进度条的导入场景</span></span><br><span class="line">pv -i 1 -p -t -e ./xxxx_probe.sql | mysql -uadmin -p123456 some_db</span><br></pre></td></tr></table></figure>

<p>然后，可以查看一下磁盘 CPU 内存的占用情况。如果负载（着重注意 IO，内存）还不够满，使用 tmux 多开几个进程导入数据。</p>
<p>因为每个 SQL 文件对应的表不一样，所以多开几个进程批量 insert 的话并不会锁表，这样可以显著提升导入速度。</p>
<h3 id="1-2-导出数据"><a href="#1-2-导出数据" class="headerlink" title="1.2 导出数据"></a>1.2 导出数据</h3><p>既然已经导入了数据，为什么需要导出数据呢？</p>
<p>因为数据量比较大，需要进行初步清洗。而我们最后肯定使用 Pandas 进行分析，从局域网数据库中读取大量的数据的时候，pandas 速度会非常的慢（具体是因为网络传输速度？)。所以，为了后面分析省事，我批量导出了数据，然后按照我的习惯进行了归类。</p>
<p>在这个过程中，我还进行了一小部分的数据过滤，比如：</p>
<ul>
<li>只选取对自己有用的行与列。</li>
<li>化整为零，拆分数据为最小单元的 CSV 文件</li>
</ul>
<h4 id="只选取对自己有用的行与列"><a href="#只选取对自己有用的行与列" class="headerlink" title="只选取对自己有用的行与列"></a>只选取对自己有用的行与列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> col_a , col_b <span class="keyword">from</span> some_table <span class="keyword">where</span> Acondition <span class="keyword">and</span> bcondition <span class="keyword">and</span> col_c <span class="keyword">in</span> (<span class="string">&#x27;xx&#x27;</span>,<span class="string">&#x27;yy&#x27;</span>,<span class="string">&#x27;zz&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>这里面有一些值得注意的地方</p>
<ul>
<li>尽量把简单的判断写在左边。</li>
<li>如果不是反复查询，则没有必要建立索引。直接走全表，筛选出必要的数据存 CSV 即可。</li>
</ul>
<h4 id="尽量拆分数据为最小单元的-CSV-文件"><a href="#尽量拆分数据为最小单元的-CSV-文件" class="headerlink" title="尽量拆分数据为最小单元的 CSV 文件"></a>尽量拆分数据为最小单元的 CSV 文件</h4><p>如果按照某类，某段时间进行拆分可以在分析的时候随时取随时分析那就进行拆分。</p>
<p>比如，某个大的 CSV 包含琼瑶里面各种人物情节地点的位置就可以拆分为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">201712_大明湖畔_夏雨荷_还珠格格_你还记得吗.csv</span><br><span class="line">201711_老街_可云_情深深雨蒙蒙_谁来救我.csv</span><br><span class="line">201710_屋子里_云帆_又见一帘幽梦_你的腿不及紫菱的爱情.csv</span><br></pre></td></tr></table></figure>

<p>当我们需要取这坨数据的时候，可以直接 glob 一下，然后 sort, 接着二分查找。就可以快速读取这块数据了。</p>
<h3 id="1-3-校验数据完备性"><a href="#1-3-校验数据完备性" class="headerlink" title="1.3 校验数据完备性"></a>1.3 校验数据完备性</h3><p>第三方给的数据多多少少会有这些或者那些的问题，一般情况下，可以通过检查数据完备性来尽可能的减少数据的不靠谱性。</p>
<p>我习惯性在这样的表里面详细记录数据完备性的各种参数与进度。</p>
<p>比如：</p>
<ul>
<li>数据的提供情况和实际情况</li>
<li>阶段性的记录条数和点位的统计值</li>
<li>max，min，mean，median 用来避免异常值</li>
<li>如果是分年份，则必须要统计每一天的情况，否则也不知道数据的缺失程度。</li>
</ul>
<h2 id="0x02-分析阶段"><a href="#0x02-分析阶段" class="headerlink" title="0x02 分析阶段"></a>0x02 分析阶段</h2><p>经过上一步处理，数据的文件总大小大约从 1000GB (uncompressed) -&gt; 30GB 左右 （拆分成若干个文件 compressed) 。每个文件大约是几百兆。</p>
<h3 id="2-1-性能要点-1：文件系统"><a href="#2-1-性能要点-1：文件系统" class="headerlink" title="2.1 性能要点 1：文件系统"></a>2.1 性能要点 1：文件系统</h3><p>如果统计逻辑很简单，但是数量多，首选使用读取文件。读取文件进行统计速度是非常快的。（人民币玩家走开）</p>
<p>像 linux 里面的 wc,grep,sort,uniq 在这种场景有时候也能用到。</p>
<blockquote>
<p>注意，如果文件特别大，一定要迭代器一个一个读取。</p>
</blockquote>
<p>对于超大文件，比如说，上百 G 文件，可以先分成小片的文件，然后多进程批量读取并且处理。</p>
<h3 id="2-2-性能要点-2：化整为零，map-reduce-filter"><a href="#2-2-性能要点-2：化整为零，map-reduce-filter" class="headerlink" title="2.2 性能要点 2：化整为零，map reduce filter"></a>2.2 性能要点 2：化整为零，map reduce filter</h3><p>化整为零这个已经在上面的 1.2 节讲过了。</p>
<p>map/reduce/filter 可以极大的减少代码。</p>
<blockquote>
<p>collection 中有个 Counter , 在进行简单代码统计的时候用起来可以极大的减少代码。</p>
</blockquote>
<h3 id="2-3-性能要点-3：进程池的两种作用"><a href="#2-3-性能要点-3：进程池的两种作用" class="headerlink" title="2.3 性能要点 3：进程池的两种作用"></a>2.3 性能要点 3：进程池的两种作用</h3><p>我们都知道，当 用 Python 执行计算密集的任务时，可以考虑使用多进程来加速：</p>
<p>即<strong>为了加速计算</strong>，此为作用一。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_item_calc</span>(<span class="params">item</span>):</span></span><br><span class="line">    df = pd.read.....</span><br><span class="line">    <span class="comment"># complex calc</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> ProcessPoolExecutor(<span class="number">3</span>) <span class="keyword">as</span> pool:</span><br><span class="line">    result_items = pool.<span class="built_in">map</span>(per_item_calc,all_tobe_calc_items)</span><br><span class="line"></span><br><span class="line">reduce_results = ....</span><br></pre></td></tr></table></figure>

<p>其实进程的销毁本身就可以给我带来第二个作用<strong>管理内存</strong>。</p>
<p>具体会在 2.6 中的 DataFrame 里面解释。</p>
<h3 id="2-4-性能要点-4：List-和-Set-itertools"><a href="#2-4-性能要点-4：List-和-Set-itertools" class="headerlink" title="2.4 性能要点 4：List 和 Set , itertools"></a>2.4 性能要点 4：List 和 Set , itertools</h3><p>有 400 组 UUID 集合，每个列表数量在 1000000 左右，列表和列表之间重复部分并不是很大。我想拿到去重之后的所有 UUID，应该怎么处理</p>
<p>在去重的时候，自然而然想到了使用集合来处理。</p>
<p>最初的做法是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_of_uuid_set = [ set1 , set2 ... set400 ]</span><br><span class="line">all_uuid_set = reduce(<span class="keyword">lambda</span> x: x | y, list_of_uuid_set)</span><br></pre></td></tr></table></figure>

<p>1 小时过去了。 突然之间，四下里万籁无声。公司内外聚集数百之众，竟不约而同的谁都没有出声，便有人想说话的，也为这寂静的气氛所慑，话到嘴边都缩了回去。似乎硬盘的指示灯也熄灭了，发出轻柔异常的声音。我心中忽想：</p>
<blockquote>
<p><del>小师妹这时候不知在干甚么？</del> 卧槽，程序是不是又卡死了？</p>
</blockquote>
<p>SSH 上去 htop 一下机器。发现实存和内存都满了。直觉告诉我，CPython 的集合运算应该是挺耗内存的。</p>
<p>嗯，这怎么行，试试用列表吧。列表占用内存应该是比较小的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">list1,list2</span>):</span></span><br><span class="line">    list1.append(list2)</span><br><span class="line">    <span class="keyword">return</span> list1</span><br><span class="line"></span><br><span class="line">list_of_uuid_list = [ list1 , list2 ... list400 ]</span><br><span class="line">all_uuid_set = <span class="built_in">set</span>(reduce(merge, list_of_uuid_list))</span><br></pre></td></tr></table></figure>

<p>1 小时过去了。 我一拍大腿，道：</p>
<blockquote>
<p><del>小师妹这时候不知在干甚么？</del> 卧槽，程序是不是又卡死了？</p>
</blockquote>
<p>最后在 StackOverFlow 上找到了更好的解决方案。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_of_uuid_list = [ list1 , list2 ... list400 ]</span><br><span class="line">all_uuid_set = <span class="built_in">set</span>(<span class="built_in">list</span>(itertools.chain(*list_of_uuid_list)))</span><br></pre></td></tr></table></figure>

<p>运行一下，5s 不到出了结果（注意，包含了 Set 去重）。</p>
<p>itertools 里还有很多有趣的函数可以使用。</p>
<p><a href="https://docs.python.org/3/library/itertools.html">https://docs.python.org/3/library/itertools.html</a></p>
<h3 id="2-5-性能要点-5：IPython-给性能带来的影响"><a href="#2-5-性能要点-5：IPython-给性能带来的影响" class="headerlink" title="2.5 性能要点 5：IPython 给性能带来的影响"></a>2.5 性能要点 5：IPython 给性能带来的影响</h3><p>当我们在分析数据的时候，往往使用的是 IPython, 或者 Jupyter Notebook</p>
<p>但是，方便的同时，如果不加以注意的话，就会带来一点点小问题。</p>
<p>比如下划线和双下划线分别存储上一个 CELL 的返回值，和上上个 CELL 的返回值。</p>
<h3 id="2-6-性能要点-6：DataFrame-带来的-GC-问题"><a href="#2-6-性能要点-6：DataFrame-带来的-GC-问题" class="headerlink" title="2.6 性能要点 6：DataFrame 带来的 GC 问题"></a>2.6 性能要点 6：DataFrame 带来的 GC 问题</h3><p>DataFrame 是我用 Pandas 的原因，在这次使用 DataFrame 的过程中，还是出现一些头疼的问题的。比如莫名的内存泄露。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_item_calc</span>(<span class="params">item</span>):</span></span><br><span class="line">    df = pd.read.....</span><br><span class="line">    <span class="comment"># complex calc</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">result_items = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> all_tobe_calc_items:</span><br><span class="line">    result_items.append(per_item_calc(item))</span><br><span class="line"></span><br><span class="line">reduce_results = ....</span><br></pre></td></tr></table></figure>

<p>我在 For 循环中读取 DataFrame 赋值给 df, 然后统计出一个结果。按理来说，每次只要一个简单的 result, 每次读取的文件大小一致，同样的会占用接近 2G 内存，而，当我赋值 df 的时候，<strong>按理来说，应该是把原先 df 的引用数应该为 0, 会被 gc 掉，又释放了 2G 内存</strong>，所以，是不太可能出现内存不够用的。</p>
<p>运行程序，内存 biubiubiubiu 的增长，当进行到约第 1000 次的循坏的时候，直到 16G 内存占满。</p>
<p>那么显式的 del 一下会不会好一点呢？代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_item_calc</span>(<span class="params">item</span>):</span></span><br><span class="line">    df = pd.read.....</span><br><span class="line">    <span class="comment"># complex calc</span></span><br><span class="line">    <span class="keyword">del</span> df</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>似乎好了一点点，但是其实并没有好到哪里去。</p>
<p>然而，和前一次一样，内存 biubiubiubiu 的增长，当进行到约第 1000 次的循坏的时候，直到 16G 内存占满。</p>
<p>只是在读取文件的时候，预先减少了上次循环没有 del 掉的 df. 和上一个想法没有太大区别。除了比上一个方法每次读取文件的提前减少了一个多 G 的内存。</p>
<p>查找相关资料，涉及到 Python 里面的 Pandas GC 的资料并不多，稍微整理一下，如下：</p>
<blockquote>
<p>Python 程序 在 Linux 或者 Mac 中，哪怕是 del 这个对象，Python 依旧 <del>站着茅坑不拉屎</del> 就是不把内存还给系统，自己先占着，<del>有本事你打死我啊</del> 直到进程销毁。</p>
</blockquote>
<p>嗯？这个和我要的东西不一样嘛？具体怎么管理 pandas 里面的 object 的，到底是哪里 GC 不到位呢？还是没有说呀。</p>
<p>参考：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/23183958/python-memory-management-dictionary">https://stackoverflow.com/questions/23183958/python-memory-management-dictionary</a></li>
<li><a href="http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm">http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm</a></li>
</ul>
<p>不过有一点启示了我。</p>
<blockquote>
<p>直到进程销毁。</p>
</blockquote>
<p>Python 里面不是有个 ProcessPoolExecutor 模块么。</p>
<p>那么问题来了，ProcessPoolExecutor 是动态创建进程并且分配任务的呢，为每一个 item 分配一个进程来运算？还是创建完三个进程之后把 item 分配给空闲进程的进行运算呢？</p>
<ul>
<li>如果是前者，则是正经的进程池。似乎 map 过去，除非任务执行完毕或者异常退出，否则进程不销毁。并不能给我们解决 内存泄露 的问题。</li>
<li>如果是后者，则是并不是线程池。</li>
</ul>
<p>你说，进程池肯定是前者咯。可是你在验证之前，这是进程池只是你的从其他语言带来的想法，这是不是一个线程池，是一个什么样子的进程池，如果进程执行过程中挂掉了，这个时候就少了一个线程，会不会再补充一个进程呢？？</p>
<p>怎么看验证呢？</p>
<ol>
<li>运行程序，进入 Htop 看进程 PID</li>
<li>看源码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/python/cpython/blob/3.6/Lib/concurrent/futures/process.py#L440</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_adjust_process_count</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self._processes), self._max_workers):</span><br><span class="line">        p = multiprocessing.Process(</span><br><span class="line">                target=_process_worker,</span><br><span class="line">                args=(self._call_queue,</span><br><span class="line">                        self._result_queue))</span><br><span class="line">        p.start()</span><br><span class="line">        self._processes[p.pid] = p</span><br></pre></td></tr></table></figure>

<p>从源码得出在主线程创建了管理进程的线程，管理进程的线程创建了 max_workers 个进程（在我的例子里面就只有 3 个 worker).</p>
<blockquote>
<p>是个进程池。</p>
</blockquote>
<p>好，如果是进程池，似乎 map 过去，除非任务执行完毕或者异常退出，否则进程不销毁。并不能给我们解决 内存泄露 的问题。</p>
<blockquote>
<p>等等，如果用多进程池不就好咯？</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_item_calc</span>(<span class="params">item</span>):</span></span><br><span class="line">    df = pd.read.....</span><br><span class="line">    <span class="comment"># complex calc</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">result_items = []</span><br><span class="line">step = <span class="number">300</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(all_tobe_calc_items),step):</span><br><span class="line">    pieces_tobe_calc_items = all_tobe_calc_items[idx:idx+step]</span><br><span class="line">    <span class="keyword">with</span> ProcessPoolExecutor(<span class="number">3</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        pieces_result_items = pool.<span class="built_in">map</span>(per_item_calc,pieces_tobe_calc_items)</span><br><span class="line">        result_items.append(pieces_result_items)</span><br><span class="line"></span><br><span class="line">reduce_results = <span class="built_in">list</span>(itertools.chain(*result_items))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当然，这是一种让操作系统帮我 GC 的方法。<strong>即 Python 不能帮我 GC 的，操作系统帮我 GC</strong></p>
</blockquote>
<blockquote>
<p>PS: 其实用 multiprocessing 模块也行，只是线程池可以稍微控制一下进程创建的数量。</p>
</blockquote>
<p>总结一下，对于大量的 DataFrame 处理：</p>
<ol>
<li>多个进程池是一种处理的方式。</li>
<li>尽量减少 DataFrame 的数量</li>
<li>尽量减少赋值导致的 COPY, 修改时带上 inplace=True</li>
<li>读取 CSV 的时候指定相关列的类型 {‘col_a’: np.float64, ‘col_b’: np.int32}，否则 pandas 会产生大量的 object</li>
</ol>
<h2 id="0xDD-番外篇"><a href="#0xDD-番外篇" class="headerlink" title="0xDD 番外篇"></a>0xDD 番外篇</h2><p>在分析这次的数据过程中，自己的 Mac 主板也坏掉了，幸好还在保修期，送到苹果店维修了一下。给苹果的售后点个赞。</p>
<h2 id="0xEE-更新"><a href="#0xEE-更新" class="headerlink" title="0xEE 更新"></a>0xEE 更新</h2><ul>
<li><strong>2017-12-07</strong> 初始化本文</li>
<li><strong>2017-12-16</strong> 增加分析阶段的文字</li>
<li><strong>2017-12-26</strong> 去掉一些 TODO, 发布到我的小站</li>
<li><strong>2017-12-31</strong> 正式发布</li>
</ul>
]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>性能优化</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch CheatSheet</title>
    <url>/2018/02/10/ElasticSearchCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 ElasticSearch 相关和命令。</p>
<blockquote>
<p>最早使用 ElasticSearch 是两年前了。最近准备用 Django 写一个全栈式的应用，借用强大的 ES 来做搜索。</p>
</blockquote>
<p>这是我在写程序之余写这篇笔记的原因。最近因为换工作的事情耽误了教程更新，就把这篇笔记放出来吧。不定期更新。</p>
<p>官网介绍 ElasticSearch 不仅仅是全文搜索，也可以结构化搜索（这里用结构化查询会更准确一些），处理人类语言，地理位置，以及关系。</p>
<p>然而，我在项目使用过程中还是主要用到了全文搜索以及推荐。</p>
<p>不用其他的主要原因是因为 ES 尺有所短寸有所长：</p>
<ol>
<li>geo 处理方面 postgis 完全就是神一般的存在。为什么还要用 ES 呢？</li>
<li>关系型数据库的核心不就是处理关系？复杂的关系肯定还是放在关系数据库里面。</li>
</ol>
<ul>
<li>highlighted search</li>
<li>search-as-you-type</li>
<li>did-you-mean suggestions</li>
</ul>
<p>我对 ElasticSearch 在后台组件里的作用在于搜索与推荐：</p>
<ol>
<li>整站的搜索功能</li>
</ol>
<ul>
<li>全文搜索</li>
</ul>
<ol start="2">
<li>推荐</li>
</ol>
<ul>
<li>依据某几个维度的数据进行排序</li>
</ul>
<p>知乎的文章居然不支持 toc, 实在是太蛋疼了。</p>
<p>文章目录如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▼ 0x00 前言 : section</span><br><span class="line">▼ 0x01 安装，配置，基本 shell 命令 : section</span><br><span class="line">    1. 安装 : section</span><br><span class="line">    2. 配置 : section</span><br><span class="line">    3. 插件 : section</span><br><span class="line">  0x02 ElasticSearch 配套工具 : section</span><br><span class="line">▼ 0x03 ElasticSearch 基础概念 : section</span><br><span class="line">  ▼ 3.1 Elasticsearch CRUDE 以及基本操作 : section</span><br><span class="line">      CURDE : section</span><br><span class="line">      普通搜索 : section</span><br><span class="line">      聚集搜索 : section</span><br><span class="line">▼ 0x04 全文搜索的基本概念 : section</span><br><span class="line">    4.1 全文搜索遇到的挑战 : section</span><br><span class="line">  ▼ 4.2 全文搜索的索引时与查询时 : section</span><br><span class="line">      1. 索引时 ES 做了什么？ : section</span><br><span class="line">      2. 查询时 ES 做了什么？ : section</span><br><span class="line">      3. 全文搜索调优之中文分词 : section</span><br><span class="line">      4. 全文搜索调优之停止词 : section</span><br><span class="line">      5. 全文搜索调优之同义词 : section</span><br><span class="line">      6. 全文搜索调优之拼写错误 : section</span><br><span class="line">    ▼ 7. 全文搜索调优之相关性 : section</span><br><span class="line">        索引时三因素 : section</span><br><span class="line">        查询时 : section</span><br><span class="line">        计算公式 : section</span><br><span class="line">  0x05 搜索语法 : section</span><br><span class="line">  0x06 Python SDK : section</span><br><span class="line">  0x07 踩坑集 : section</span><br><span class="line">  0xEE 参考链接 : section</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="0x01-安装，配置，基本-shell-命令"><a href="#0x01-安装，配置，基本-shell-命令" class="headerlink" title="0x01 安装，配置，基本 shell 命令"></a>0x01 安装，配置，基本 shell 命令</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>具体在项目中的配置建议看一下我写的配置文章 <a href="https://zhuanlan.zhihu.com/p/33920401">https://zhuanlan.zhihu.com/p/33920401</a> 和并且参考现有代码 <a href="https://github.com/twocucao/YaDjangoBlog">https://github.com/twocucao/YaDjangoBlog</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 执行如下的命令</span><br><span class="line">curl &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;?pretty&#39;</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;XOGvo8a&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;fAwp341bQzalzBxRFyD1YA&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;6.2.1&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;7299dc3&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2018-02-07T19:34:26.990113Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;7.2.1&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><p>配置略</p>
<h3 id="3-插件"><a href="#3-插件" class="headerlink" title="3. 插件"></a>3. 插件</h3><p>ES 的插件有很多，截止笔者写这篇文章的时候，ES 最新的版本是 6.2.1 版本。</p>
<blockquote>
<p>PS: 两年前我用的还是 2.3.3 版本。新版本有很多插件配置起来已经有所不同了。比如说 head 现在已经被独立出来作为一个单纯的网页，chrome 商店可以直接下载。</p>
</blockquote>
<p>需要配 ik-analyser. 如果你在 YaDjangoBlog 中起了这个命令，则已经配置完毕。</p>
<h2 id="0x02-ElasticSearch-配套工具"><a href="#0x02-ElasticSearch-配套工具" class="headerlink" title="0x02 ElasticSearch 配套工具"></a>0x02 ElasticSearch 配套工具</h2><p>建议使用 Head 插件来进行简单的查询与调试。</p>
<h2 id="0x03-ElasticSearch-基础概念"><a href="#0x03-ElasticSearch-基础概念" class="headerlink" title="0x03 ElasticSearch 基础概念"></a>0x03 ElasticSearch 基础概念</h2><h3 id="3-1-Elasticsearch-CRUDE-以及基本操作"><a href="#3-1-Elasticsearch-CRUDE-以及基本操作" class="headerlink" title="3.1 Elasticsearch CRUDE 以及基本操作"></a>3.1 Elasticsearch CRUDE 以及基本操作</h3><p>详细的搜索见 Python SDK</p>
<h4 id="CURDE"><a href="#CURDE" class="headerlink" title="CURDE"></a>CURDE</h4><p>ES 使用的是 RESTFUL API 接口</p>
<p>这也就意味着：</p>
<ul>
<li>PUT 创建记录</li>
<li>GET 获取记录</li>
<li>POST 更新记录</li>
<li>DELETE 删除记录</li>
<li>HEAD 是否存在</li>
</ul>
<h4 id="结构化搜索"><a href="#结构化搜索" class="headerlink" title="结构化搜索"></a>结构化搜索</h4><p>ES 写复杂查询的时候，语法乱，这个过程需要多翻看 guide 和手册。</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/structured-search.html">https://www.elastic.co/guide/en/elasticsearch/guide/current/structured-search.html</a></p>
<h4 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h4><p>全文搜索包含两个重要方面：</p>
<ul>
<li>相关性：通过 TF/IDF , 距离 , 模糊相似度，以及其他算法</li>
<li>分析：大文本 token 化，用于形成倒排索引。这个过程见 4.2</li>
</ul>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/full-text-search.html">https://www.elastic.co/guide/en/elasticsearch/guide/current/full-text-search.html</a></p>
<h4 id="聚集搜索"><a href="#聚集搜索" class="headerlink" title="聚集搜索"></a>聚集搜索</h4><p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/aggregations.html">https://www.elastic.co/guide/en/elasticsearch/guide/current/aggregations.html</a></p>
<h2 id="0x04-全文搜索的基本概念"><a href="#0x04-全文搜索的基本概念" class="headerlink" title="0x04 全文搜索的基本概念"></a>0x04 全文搜索的基本概念</h2><h3 id="4-1-全文搜索遇到的挑战"><a href="#4-1-全文搜索遇到的挑战" class="headerlink" title="4.1 全文搜索遇到的挑战"></a>4.1 全文搜索遇到的挑战</h3><p>在最初开源搜索引擎技术还不是很成熟的时候，我们一般都会使用 RDBMS 进行简单搜索。</p>
<p>简单搜索，也就是我们常常使用的 like 查询（当然，有的数据库可以使用正则表达式）</p>
<p>这种方式是简单暴力的查询方式，优点是实现起来简单暴力。缺点是在这个场景下性能和准确度很差。</p>
<p>举例：</p>
<ul>
<li>假如站点里文章数量比较大，并且文章内容比较长，则进行一次全表查询，效率可想而知。当然，做好分库分表读写分离也是能用的。</li>
<li>如果我要对搜索到的词语进行高亮，则实现方式就只能是把查询到的文章放在应用层里面进行批量替换。</li>
<li>RDBMS 似乎完全不懂语言与语言之间的区别。比如说：<ul>
<li>『停止词 / 常用词』有的字我是不需要的，比如南京的狗，其实我想搜的是南京狗，这里的『的』就不是我需要的。</li>
<li>『同义词』有的字我需要的是他的同义词，比如日本黄狗，其实我想搜的是柴犬。</li>
<li>『附加符号』假如说我们搜索一个声调 [nǐ], 总不能让用户打出 [nǐ] 进行搜索吧？总归要转为 ni 才能方便搜索</li>
<li>『词根形式』对于一个单词，假如是动词可能有时态上的区分，如果是名词，可能有单复数的区分。假如我搜 mice, 其实同样的 mouse 也应该被搜索出来。但有事用这种方式也会矫枉过正，比如 organizations 的 原型其实并不是 organization 而是，organ. （当然，overstemming 和 understemming 也是两个不可忽视的问题）<ul>
<li>Number: fox, foxes</li>
<li>Tense: pay, paid, paying</li>
<li>Gender: waiter, waitress</li>
<li>Person: hear, hears</li>
<li>Case: I, me, my</li>
<li>Aspect: ate, eaten</li>
<li>Mood: so be it, were it so</li>
<li>PS: 万幸的是，中文处理中木词根这个概念。我也就不深入这块了。</li>
</ul>
</li>
<li>『拼写问题』 周杰棍与周杰伦</li>
<li>『分词 / 识别词』中文不像英文，词和词之间是完全没有空格的，也就是说，中文天然要比英文多一个关于分词的步骤。</li>
</ul>
</li>
</ul>
<p>是的，我们需要一种新的姿势，来进行搜索。也就是本文所说的全文搜索。</p>
<h3 id="4-2-全文搜索的索引时与查询时"><a href="#4-2-全文搜索的索引时与查询时" class="headerlink" title="4.2 全文搜索的索引时与查询时"></a>4.2 全文搜索的索引时与查询时</h3><p>本小节先搞清楚两个点，</p>
<ol>
<li>索引时 ES 做了什么？</li>
<li>查询时 ES 做了什么？</li>
</ol>
<ul>
<li>索引时，指的是 ElasticSearch 在存储文档的阶段。</li>
<li>查询时，指的是 ElasticSearch 在查询文档的阶段。</li>
</ul>
<h4 id="1-索引时-ES-做了什么？"><a href="#1-索引时-ES-做了什么？" class="headerlink" title="1. 索引时 ES 做了什么？"></a>1. 索引时 ES 做了什么？</h4><blockquote>
<p>这里我们略过定义 index,type,document 仅仅指某个 field 被赋值 document 被保存的时候针对这个被赋值的 text 类型 field 的处理。</p>
</blockquote>
<ul>
<li>第一步：<strong>文本经过 analyzer 处理</strong></li>
<li>第二步：<strong>形成倒排索引</strong></li>
</ul>
<p>先看第一步：</p>
<p>通常在定义 field 的时候显式指定 analyzer（分析器）.</p>
<p>这个 analyzer 一般的作用如下：</p>
<ul>
<li>STEP 1: 令牌化文本为独立的词</li>
<li>STEP 2: 词语转小写</li>
<li>STEP 3: 去除常见的停止词</li>
<li>STEP 4: 获取词的词根的原型</li>
</ul>
<p>不同的 analyzer 作用大同小异，拿我们常用的 <a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a> 的话，则也是类似的步骤（下面步骤是我猜测的，没看源码）</p>
<ol>
<li>令牌化文本为独立的词语 - 分词，并且令牌化文本为独立的词汇</li>
<li>除去常见的停止词</li>
<li>匹配同义词</li>
<li>….</li>
</ol>
<p>可以定义字段的时候可以指定 analyzer（索引时） 与 search_analyzer（查询时）</p>
<p>先看经过第一步之后，就可以进入第二步形成倒排索引了，此时，倒排索引之于 ElasticSearch 可以类比于 btree 之于 MySQL 或者 Gist 之于 PostgreSQL.</p>
<p>那么，倒排索引包含哪些东西呢？</p>
<ul>
<li><strong>Terms dictionary</strong><ul>
<li>已排序完毕的 terms, 以及包含这些 terms 的 documents 的数量。</li>
</ul>
</li>
<li><strong>Postings List</strong><ul>
<li>哪些 document 包含这些词</li>
</ul>
</li>
<li><strong>Terms frequency</strong><ul>
<li>每个 term 在这些文章的频率</li>
</ul>
</li>
<li><strong>Position</strong><ul>
<li>每个 term 在每个 document 的位置，这是为了便于 phrase query 和 proximity query</li>
<li>高频词的 phrase query 可能导致 上 G 的数据被读取。虽然有 cache, 但是远远不够。</li>
</ul>
</li>
<li><strong>Offsets</strong><ul>
<li>每个 term 在每个 document 的开始和结束，便于高亮</li>
</ul>
</li>
<li><strong>Norms</strong><ul>
<li>用于给短 field 更多权重的因素.(TODO: 啥玩意）</li>
</ul>
</li>
</ul>
<p>减少停止词仅仅可以减少少部分 terms dictionary 和 postings list , 但是 positions 和 offsets data 对 index 的影响则是非常大的。</p>
<h4 id="2-查询时-ES-做了什么？"><a href="#2-查询时-ES-做了什么？" class="headerlink" title="2. 查询时 ES 做了什么？"></a>2. 查询时 ES 做了什么？</h4><ul>
<li>第一步：<strong>文本经过 analyzer 处理</strong></li>
<li>第二步：<strong>查询倒排索引</strong></li>
</ul>
<p>其实搜索的就是这个玩意。</p>
<ul>
<li><strong>Terms dictionary</strong></li>
<li><strong>Postings List</strong></li>
<li><strong>Terms frequency</strong></li>
<li><strong>Position</strong></li>
<li><strong>Offsets</strong></li>
<li><strong>Norms</strong></li>
</ul>
<p>于是，我们就必须关注如何更好的查询文档了。下面几个小节，你就知道全文搜索是比较难调优的了。好，一个一个来。</p>
<h4 id="3-全文搜索调优之中文分词"><a href="#3-全文搜索调优之中文分词" class="headerlink" title="3. 全文搜索调优之中文分词"></a>3. 全文搜索调优之中文分词</h4><p>中文分词以前是个难点，现在基本有成熟的解决方案，在没有更加牛逼的分词技术解决方案之前，现在分词效果主要是拼词典。</p>
<blockquote>
<p>TODO: 这个话题可能比较大，先挖坑，以后填</p>
</blockquote>
<h4 id="4-全文搜索调优之停止词"><a href="#4-全文搜索调优之停止词" class="headerlink" title="4. 全文搜索调优之停止词"></a>4. 全文搜索调优之停止词</h4><p>使用停止词是减少索引大小的一种方式（减小索引效果不明显），那么，哪些词语可以呗当做停止词呢？</p>
<ul>
<li>低频词语：低频词语具备高权重</li>
<li>高频词语：高频词语具备低权重</li>
</ul>
<p>当然，是否是高频词语依据个人经验主要依据两点来判断：</p>
<ul>
<li>具体场景：比如在英文中，and/the 之类的会比较多，但是中文会比较少。同样的，中文里面其他语言的东西会少一些。正文八经的文章出现不正经的词汇的概率会低。在技术问里面，『数据库』属于高频词汇，但是在比如简书之类的，可能梦想 / 鸡汤 / 超级 / 震惊会多一些。掘金的『前端』两个字绝壁是高频词。</li>
<li>抽样跑新词发现的程序。社区里多的是新词发现的脚本。对文章内容或者从搜索框记录下来的搜索词跑一下新词发现的程序，然后人工筛选，应该可以发现更多的高频和低频的词汇。</li>
</ul>
<p>是不是用上停止词就好了呢？并不是。</p>
<p>比如：</p>
<ul>
<li>假如停止词里面包含了 not , 那么 happy 和 not happy 搜索出来的结果则一致。</li>
<li>假如停止词里面包含了或，那么，如果有个乐队名字叫做『或或』, 则搜索不出来。</li>
<li>假如停止词里面包含了 to / be / not / or , 则莎士比亚的名言 『To be, or not to be』 则搜索不出来。</li>
</ul>
<h4 id="5-全文搜索调优之同义词"><a href="#5-全文搜索调优之同义词" class="headerlink" title="5. 全文搜索调优之同义词"></a>5. 全文搜索调优之同义词</h4><p>同义词也有很多种：</p>
<ol>
<li>平级关系：插、戳、刺、扎</li>
<li>包含关系：成人包含男人和女人</li>
<li>不容易分清楚关系：</li>
</ol>
<ul>
<li>炒，煎，贴，烹，炸，溜<br>　- 汆，涮，煮，炖，煨，焐<br>　- 蒸，鲊<br>　- 卤，酱，熏，烤，炝，腌，拌，焗</li>
</ul>
<p>随着场景的不同，上面有些同义词也是不能轻而易举同义的。</p>
<table>
<thead>
<tr>
<th>-</th>
<th>索引时</th>
<th>查询时</th>
</tr>
</thead>
<tbody><tr>
<td>索引大小</td>
<td>耗时变多，同义词被索引，大小更大</td>
<td>耗时几乎不变</td>
</tr>
<tr>
<td>相关性</td>
<td>准确度下降，所有同义词相同 IDF, 则在所有文档的索引记录中，常用词和冷门词权重相同</td>
<td>准确度提升，每个同义词的 IDF 将被校正</td>
</tr>
<tr>
<td>性能</td>
<td>性能下降，查询需要涨到</td>
<td>性能下降，查询被重写，用于查找同义词</td>
</tr>
<tr>
<td>灵活性</td>
<td>变差，同义词法则不改变已存在记录，需重新索引</td>
<td>不变，同义词法则可被更新，无需重新索引</td>
</tr>
</tbody></table>
<p>由此可见，大部分场景下的索引时如果没有特别的需求，<strong>谨慎使用同义词</strong>。</p>
<blockquote>
<p>同义词使用自定义 filter , 并且在新建 analyzer 并指定 filter 即可。</p>
</blockquote>
<h4 id="6-全文搜索调优之拼写错误"><a href="#6-全文搜索调优之拼写错误" class="headerlink" title="6. 全文搜索调优之拼写错误"></a>6. 全文搜索调优之拼写错误</h4><p>有的时候，用户也会输入错误：</p>
<ul>
<li>手误，把『周杰伦』拼成『周杰棍』</li>
</ul>
<p>这个时候，搜索引擎应该提示一下，您搜索的是不是『周杰伦』呢？</p>
<p>这里面就遇到了一个问题，我们显然知道周杰棍和周杰伦是是相似的，为什么呢？或者说，直观上感知的详细，能用数学方式表达出来吗？</p>
<p>有人说，正则匹配 / 通配符匹配呗。这是一个思路。</p>
<p>Vladimir Levenshtein 和 frederic damerau 给出了一种相似度算法 <a href="https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance">https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance</a></p>
<p>一个词组通过转换到另一个词的步数就是其距离：</p>
<ul>
<li>替换：『周杰伦』到『周杰棍』</li>
<li>插入：『周杰』到『周杰棍』</li>
<li>删除：『周杰伦』到『周杰』</li>
<li>相邻字符转换：『周伦杰』和『周杰伦』 , 但是『周杰棍的双节伦』到『周杰伦的双节棍』 并不是相邻字符转换</li>
</ul>
<p>用法：</p>
<blockquote>
<p>指定 “fuzziness”: step 即可</p>
</blockquote>
<p>当 step &gt;=2 的时候，ES 进行查询的时候，每次查询都会遍历 terms 字典，所以，如果 fuzziness 大于 2 的时候遍历 terms 的数量则非常惊人了。</p>
<ul>
<li>方法一：设置 prefix_length, 单词的前面一定长度不进行 fuzzy 匹配。一般设置为 3 （估计这是属于英文的匹配，中文环境做不了参考）;</li>
<li>方法二：设置 max_expansins, 类似于 RDBMS 的 limit, 查询到一定记录之后停止查询。</li>
</ul>
<p>fuzzy match query 也是支持的，比如说，假如你指定 “fuzziness” 为 1, 搜索周杰棍，则将周杰伦，周杰全搜索出来了。似乎搜索的很全面呀，但是问题来了：</p>
<blockquote>
<p>依据 TF/IDF 的高频低权重，低频高权重的计算方式，<strong>周杰棍由于出现次数极少，反而获得了极高的权重。</strong></p>
</blockquote>
<p>跑个题，这种因为『出现次数少，查询的时候反而显得权重较高』的情况。并不仅仅出现在 TF/IDF 算法上。</p>
<p>这方面搜索引擎和人是一样一样的</p>
<ul>
<li>小孩子听腻了家长们所说的『带着脑子去学习』, 反而觉得以前没出现的新词叫『刻意学习』牛逼到爆。</li>
<li>美女听腻了直男癌说的『漂亮』, 反而觉得夸她『品质 / 品味』的话语词词入心。</li>
</ul>
<p>回到正题</p>
<p>所以，一般情况下还是建议拼写错误主要还是用于：</p>
<ul>
<li>Search as you type : completion suggester</li>
<li>Did you mean : phrase suggester</li>
</ul>
<h4 id="7-全文搜索调优之相关性"><a href="#7-全文搜索调优之相关性" class="headerlink" title="7. 全文搜索调优之相关性"></a>7. 全文搜索调优之相关性</h4><p>我们在接触 RDBMS 的时候系统是没有相关性的说法的，比如说，2017 年 12 月份 xxx 用户的订单，就是直接 select 出来这些订单。因为 where 语句后面包含了界限明确的条件，而全文搜索则不然。</p>
<p>这个时候一个人拍着桌子站起来，说：不对呀，我要搜索包含周杰伦的所有文章。这咋没有条件边界。</p>
<p>嗯，稍等，『选出所有包含周杰伦的文章』条件很清晰。但问题是，排序怎么做？按照日期排？按照点击率排？这篇文章上周已经在在搜索靠前了，已经『长江后浪推前浪了』上了，这周是不是该差不多『前浪死在沙滩上』了？</p>
<p>Elasticsearch 中使用的计算 score 的公式叫做 practical scoring function, 这个公式借鉴于 TF/TDF 以及 矢量空间模型，但有更多的特征比如，条件因素，字段长度正态化，term / query clause boosting</p>
<p>全文搜索不仅仅找到匹配的 documents, 并且按照相关性进行排序（其实就是打分 score)。</p>
<p>为什么需要打分呢？从相亲角度来说，上海内环有房肯定是个超级大加分项。同样是录入信息，在上海内环有房的权重值可是设置的高一些。</p>
<p>嗯，其实相关性的调优是最难的部分。</p>
<h5 id="索引时三因素"><a href="#索引时三因素" class="headerlink" title="索引时三因素"></a>索引时三因素</h5><p>先看前两个因素 TF/IDF</p>
<ul>
<li>tf(t in d) = sqrt(frequency)</li>
<li>idf(t) = 1 + log (numDocs / (docFreq + 1))</li>
</ul>
<p>再看后一个因素 Field-Length norm</p>
<p>标题越短，这个词对这个 field 的代表性越强</p>
<ul>
<li>norm(d) = 1 / sqrt(numTerms)</li>
</ul>
<h5 id="查询时"><a href="#查询时" class="headerlink" title="查询时"></a>查询时</h5><p>几个词 -&gt; 几维度 -&gt; 寻求最佳匹配以及近似匹配</p>
<ul>
<li>最佳匹配应该是通过计算长度（应该是，但不确定）</li>
<li>近似匹配，计算距离最近的 cos 值。</li>
</ul>
<h5 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h5><p>这个公式调优的时候需要用到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">score(q,d)  = queryNorm(q)</span><br><span class="line">                ·coord(q,d)</span><br><span class="line">                ·∑(tf(t <span class="keyword">in</span> d)·idf(t)²·t.getBoost()·norm(t,d)) (t <span class="keyword">in</span> q)</span><br></pre></td></tr></table></figure>

<h2 id="0x05-搜索语法"><a href="#0x05-搜索语法" class="headerlink" title="0x05 搜索语法"></a>0x05 搜索语法</h2><p>Single document APIs</p>
<ul>
<li>Index API</li>
<li>Get API</li>
<li>Delete API</li>
<li>Update API</li>
<li>Multi-document APIs</li>
</ul>
<p>Multi Get API</p>
<ul>
<li>Bulk API</li>
<li>Delete By Query API</li>
<li>Update By Query API</li>
<li>Reindex API</li>
</ul>
<h2 id="0x06-Python-SDK"><a href="#0x06-Python-SDK" class="headerlink" title="0x06 Python SDK"></a>0x06 Python SDK</h2><p>官方提供了两个 SDK 方便我们进行日常的开发：</p>
<ul>
<li>elasticsearch</li>
<li>elasticsearch_dsl</li>
</ul>
<p>我更喜欢 elasticsearch , 而不是 elasticsearch_dsl, 因为写起来更容易结合 elasticsearch-head 进行 profile</p>
<p>前者偏底层一些，后者偏高层一些，高底层关系的有点类似于 sql 和 sqlalchemy core 之间的关系。</p>
<h2 id="0x07-踩坑集"><a href="#0x07-踩坑集" class="headerlink" title="0x07 踩坑集"></a>0x07 踩坑集</h2><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><a href="https://www.zhihu.com/question/19645541">https://www.zhihu.com/question/19645541</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-15</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后台组件</category>
      </categories>
      <tags>
        <tag>CheatSheet</tag>
        <tag>ElasticSearch</tag>
        <tag>搜索排序</tag>
        <tag>搜索引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>Unknown Cheatsheet</title>
    <url>/2016/02/21/UnKnownCheatSheet/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><blockquote>
<p>写在前面的话：不好意思，标题难以免俗，起了个很俗气的名字。</p>
</blockquote>
<p>这是我的一个全栈类型 Django 开源项目的系列讲解教程的目录。目的总的来说有两个：</p>
<ol>
<li>一是希望更多的人通过本系列的教程更好的认识 Django 开发技术栈或者说是 Web 开发技术栈，让更多的 Pythonist 更顺畅的进入 Django 开发的世界。</li>
<li>二是希望借由这个持续更新的过程让自己更加深入理解 Django 技术栈 Django / DjangoRestFramework / Docker / Vue.JS / Celery / PostgreSQL / Redis / RabbitMQ</li>
</ol>
<blockquote>
<p>生命苦短，我用 Python</p>
</blockquote>
<p>为什么说这个项目你不容错过？</p>
<ul>
<li>新！新！新！保持最新的软件开发版本，E.G: Django 2.0 + Vue.JS 2.5 + PostgreSQL 10 + Celery 4.1.0</li>
<li>Django 框架：Django 及其 强大的生态圈</li>
<li>后端组件：PostgreSQL RabbitMQ Redis Ngnix</li>
<li>前端技术：单页应用 前后端分离 (VueJS+Webpack+DjangoRestFramework), 自动化部署</li>
<li>Django 社区最佳实践：从配置 / 开发 / 测试 / 部署 <strong>全干</strong>工程师 (Full Stuff Engineer) 的最新的 DevOps 思考成果。</li>
<li>基本覆盖了进阶 Django 开发所需要的各种组件与操作。</li>
<li>只需要适当的调整，本项目就可以成为你新开项目的最佳脚手架。</li>
</ul>
<p>本系列文章的面向读者：</p>
<ul>
<li>目标是 DevOps 的 Pythonist</li>
<li>爱瞎几把折腾的 Pythonist</li>
<li>前后端分离的实践者</li>
</ul>
<blockquote>
<p>生命苦短，赶快上车</p>
</blockquote>
<h2 id="0x01-项目介绍"><a href="#0x01-项目介绍" class="headerlink" title="0x01 项目介绍"></a>0x01 项目介绍</h2><p>YaDjangoBlog 是另一个关于博客的轮子，但是其野心并不在于仅仅多造一个博客系统，还有通过本项目做 Django 全栈开发的最佳实践。</p>
<h3 id="1-1-项目地址"><a href="#1-1-项目地址" class="headerlink" title="1.1 项目地址"></a>1.1 项目地址</h3><ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog">https://github.com/twocucao/YaDjangoBlog</a></li>
</ul>
<h3 id="1-2-项目技术栈"><a href="#1-2-项目技术栈" class="headerlink" title="1.2 项目技术栈"></a>1.2 项目技术栈</h3><ul>
<li>开发与部署环境为 Docker</li>
<li>Python 3.5.2</li>
<li>前端 Vue + Webpack + ES2015 + axios</li>
<li>后端 <a href="https://github.com/django/django">Django 2.0</a> + <a href="https://github.com/tomchristie/django-rest-framework/">DjangoRestFramework</a> + Celery</li>
<li>自动化部署选用工具 Ansible 以及 Docker</li>
<li>后端组件<ul>
<li>ElasticSearch 用于搜索和推荐</li>
<li>PostgreSQL 用于数据持久化</li>
<li>Redis 用于 Session / 和缓存</li>
<li>RabbitMQ 分布式队列 / 定时任务</li>
<li>Nginx 用于反向代理</li>
</ul>
</li>
</ul>
<h3 id="1-3-特别感谢"><a href="#1-3-特别感谢" class="headerlink" title="1.3 特别感谢"></a>1.3 特别感谢</h3><ul>
<li>ansible django stack: <a href="https://github.com/jcalazan/ansible-django-stack">https://github.com/jcalazan/ansible-django-stack</a></li>
<li>cookiecutter-django: <a href="https://github.com/pydanny/cookiecutter-django">https://github.com/pydanny/cookiecutter-django</a></li>
<li>djangopackages: <a href="https://github.com/djangopackages/djangopackages">https://github.com/djangopackages/djangopackages</a></li>
<li>董伟明 关于 ElasticSearch 的几篇文章 <a href="http://www.dongwm.com/archives/%E7%9F%A5%E4%B9%8ELive%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E4%B9%8B%E4%BD%BF%E7%94%A8Elasticsearch%E6%90%9C%E7%B4%A2/">http://www.dongwm.com/archives/%E7%9F%A5%E4%B9%8ELive%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E4%B9%8B%E4%BD%BF%E7%94%A8Elasticsearch%E6%90%9C%E7%B4%A2/</a></li>
<li>各个组件的开发者们<ul>
<li>ElasticSearch</li>
<li>PostgreSQL</li>
<li>Redis</li>
<li>RabbitMQ</li>
<li>Nginx</li>
<li>Docker</li>
</ul>
</li>
</ul>
<h2 id="0x02-系列教程目录"><a href="#0x02-系列教程目录" class="headerlink" title="0x02 系列教程目录"></a>0x02 系列教程目录</h2><h3 id="2-1-教程注意项"><a href="#2-1-教程注意项" class="headerlink" title="2.1 教程注意项"></a>2.1 教程注意项</h3><ol>
<li>本文的开发环境配置仅仅限于 macOS 上，如果读者使用的是 Windows / 可能需要自己搞定环境的配置。不过笔者使用了 Docker 进行环境配置，应该配置环境会省事很多。</li>
<li>在阅读本教程，请读者至少跟着 Django 官方的教程跟着走一遍。不要零基础一通瞎搞。</li>
<li>如果在使用过程中出现问题，请在 ISSUE 提供尽可能多的信息，将问题描述清楚。</li>
</ol>
<blockquote>
<p>本系列教程并不按照一步一步增加代码的方式写教程。我先带着大家搭建好整个项目框架，然后从不同的视角开介绍这个项目，比如：</p>
</blockquote>
<ol>
<li>某个模块的 models 是如何设计的？有哪些卧槽居然可以这么用的方式。</li>
<li>Django User 如何做扩展？同样在 Django 的生态圈里面，哪些场景有哪些值得围观的包，比如 guardian</li>
<li>Rest API 应该如何写，Django 里面的 Rest API 应该如何写？会有哪些生产效率 guangguangguang 提升上去的使用方法？权限怎么做？限流怎么搞？</li>
<li>Py.test TDD 测试驱动开发了解一下？</li>
</ol>
<h3 id="2-2-教程目录"><a href="#2-2-教程目录" class="headerlink" title="2.2 教程目录"></a>2.2 教程目录</h3><ul>
<li>Django 全栈开发教程 - Python 和 Docker 环境配置</li>
<li>Django 全栈开发教程 - YaDjangoBlog 博客的后端组件配置</li>
<li>Django 全栈开发教程 - YaDjangoBlog 博客的前后端初步设计</li>
<li>Django 全栈开发教程 - YaDjangoBlog 博客的后端初步实现</li>
<li>Django 全栈开发教程 - YaDjangoBlog 博客的前端实现 YaVueBlog</li>
<li>Django 全栈开发教程 - YaDjangoBlog 博客的后端组件之 Redis</li>
<li>Django 全栈开发教程 - YaDjangoBlog 博客的后端组件之 PostgreSQL</li>
<li>Django 全栈开发教程 - YaDjangoBlog 博客的后端组件之 Elasticsearch</li>
<li>Django 全栈开发教程 - YaDjangoBlog 博客的后端组件之 RabbitMQ</li>
<li>Django 全栈开发教程 - YaDjangoBlog 博客的部署</li>
</ul>
<p>于是，本文的内容就如下：</p>
<ul>
<li>前后端分离</li>
<li>自动化部署</li>
<li>数据库相关</li>
<li>其他踩坑经历</li>
</ul>
<a id="more"></a>

<h2 id="0x01-前后端分离"><a href="#0x01-前后端分离" class="headerlink" title="0x01 前后端分离"></a>0x01 前后端分离</h2><p>前后端分离是提高团队开发的一个重要的开发策略，前后端分离之后，后端和前端交流好 JSON 格式，并行开发，局域网中放置一台服务器，后端写好一个功能，推送代码，由 gitlab 触发 Runner 自动交付到局域网的服务器上。这样的话，前后端可以并行开发，从而摆脱每一次开发过程不可避免，前端编写模板，然后由后端套用模板，出了问题，前端修改模板，后端接着修改模板… 循环往复，不曾更改的问题，在这种职责分明的情况下也不会出现背锅侠的问题。</p>
<p>在往常的开发过程中，而如果 Ajax 比较多或者前端写的代码质量稍微低一些，那么倒霉的事情就发生了，后端和前端的沟通成本那是相当的高。推锅的事情也会发生。</p>
<p>而新的开发过程中，如果上级有界面上的需求，基本上只需要前端更新一下代码，推送，就可以立即看到效果。<br>同样的，后端也是如此。</p>
<blockquote>
<p>这就是我选择前后端分离的初衷 – 将主要的精力放在开发上面。而不是套用模板和编辑 Ajax 过程中带来的沟通问题。</p>
</blockquote>
<p>在前后端配合上：</p>
<ul>
<li>后端选择 Django,Restful 框架选择了 DjangoRestFramework, DRF 的优点在于可以自动生成 API 界面，让前端对照着表单进行请求接口的测试。于是局域网的那一台可以配置为 Debug 模式，生产机器就可以关闭 DEBUG 模式。</li>
<li>前端选择 VueJS, 选择这个小而精美的框架一方面是基于团队的开发水平考虑，如果使用太激进的框架 React, 可能遇到问题无法在短时间内解决。由于选用了 VueJS, 也就选用了 Vue 全家桶，通过 Webpack2 进行配置完成基本的打包任务，通过 config 读取环境变量进行生产环境和发布环境的 apiurl 的分离</li>
<li>代码提交选择 Coding.NET 用于提交代码，在局域网中选择 Gitlab 用于提交代码，配上 Gitlab CI 进行持续集成，每次提交代码直接直接构建本地发布。前后端合作亲密无间。</li>
</ul>
<p>前后端分离有什么缺点呢？</p>
<ol>
<li>必须强行升级 Https</li>
<li>开发时候需要关掉 Django 的同源策略</li>
<li>IE8– 不兼容</li>
</ol>
<h3 id="1-1-Django-和-他的小伙伴们"><a href="#1-1-Django-和-他的小伙伴们" class="headerlink" title="1.1 Django 和 他的小伙伴们"></a>1.1 Django 和 他的小伙伴们</h3><p>Django 适用于快速开发，对于创业公司来说，是不错的快速开发语言。</p>
<p>不仅仅是因为 Python 表达力比较强，更重要的是 Django 有很多高质量的包可以使用。</p>
<ul>
<li>Django Debug Toolbar</li>
<li>DjangoRestFramework</li>
<li>Django Extensions</li>
</ul>
<h3 id="1-4-Django-的奇技淫巧"><a href="#1-4-Django-的奇技淫巧" class="headerlink" title="1.4 Django 的奇技淫巧"></a>1.4 Django 的奇技淫巧</h3><h4 id="Django-Model"><a href="#Django-Model" class="headerlink" title="Django Model"></a>Django Model</h4><ul>
<li><a href="http://stackoverflow.com/questions/1355150/django-when-saving-how-can-you-check-if-a-field-has-changed">Save If Changed</a></li>
</ul>
<h2 id="0x02-自动化部署"><a href="#0x02-自动化部署" class="headerlink" title="0x02 自动化部署"></a>0x02 自动化部署</h2><p>写程序 一般就是开发测试部署。</p>
<p>话虽然这么时候，但是在具体的实践过程中，还是有很多很多坑需要注意的。</p>
<p>比如，仅仅就开发环节来说，团队协作怎么搞？你说可以用 GIT 作为版本管理工具，代码托管。那我问你，这个 Web 开发过程中前端开发模板，后端套用模板怎么搞？你说，前后端分离，那前后端分离后 Http 请求被劫持怎么办，跨站攻击怎么搞……<br>甚至如果是一个人开发的话，直接拉一台服务器做做部署，定期更新到网站上就行了。但如果是团队协作呢？前端提交了代码，产品经理过来说，你更新一下服务器，后端提交了代码，前端过来说，你更新一下服务器，过程琐碎而耗时。大量的时间就浪费在了这种枯燥的事情上了。两个后端，一个前端的情况下，每天本地发布（交付）的次数就已经是相当惊人（大概是前后端每天提交 5 次左右），如果以后是 3 个后端，三个前端，那我作为主程，每天就写不了代码了，这种情况是断不能忍的。</p>
<p>这个时候，就需要想着把团队协作开发流程优化好：</p>
<p>在我刚开始进行开发的时候，使用 bash 配合 Ansible 在本地和上线的 Ubuntu 16.04 上面自动化能够自动化的大部分工作，程序员在本地开发的时候，只需要进行开发，然后推送代码到 repo, 剩下的诸如自动化测试集成到系统中，则全部自动化。</p>
<h3 id="2-1-使用场景"><a href="#2-1-使用场景" class="headerlink" title="2.1 使用场景"></a>2.1 使用场景</h3><p>经过研究，我确定了理想中的使用场景：</p>
<blockquote>
<p>前端与后端提交代码到代码托管上面的时候，直接集成，构建，Stage 到服务器。</p>
</blockquote>
<blockquote>
<p>到上线的时候，由我执行 Ansible 进行上线。</p>
</blockquote>
<h3 id="2-2-实施方案"><a href="#2-2-实施方案" class="headerlink" title="2.2 实施方案"></a>2.2 实施方案</h3><p>在这个流程中，我需要安装如下的软件：</p>
<ul>
<li>Gitlab Gitlab-CI-Runner : 用于解决代码托管，项目的基本成长，以及持续化集成</li>
<li>PostgreSQL</li>
<li>MongoDB</li>
<li>Redis</li>
<li>RabbitMQ</li>
<li>Nginx</li>
<li>Python 以及 Python 扩展的依赖包</li>
<li>其他</li>
</ul>
<p>配置文件为 3 类：</p>
<ul>
<li>test</li>
<li>stage</li>
<li>production</li>
</ul>
<p>硬件设备 3 台：</p>
<ol>
<li>第一台为 Gitlab 部署的软件</li>
<li>第二台为 Stage 环境 （本地局域网持续交付）的机器</li>
<li>第三台为 Server （阿里云） 机器</li>
</ol>
<blockquote>
<p>注：最初使用 Ubuntu 机器，最终确定使用 Docker 镜像进行构建</p>
</blockquote>
<h3 id="2-3-持续交付"><a href="#2-3-持续交付" class="headerlink" title="2.3. 持续交付"></a>2.3. 持续交付</h3><p>当前端工程师 Push Master 分支到 Repo 上的时候，执行 Job 更新网站<br>当后端工程师 Push Master 分支到 Repo 上的时候，执行 Job 更新网站</p>
<p>Push Master 分支，这个自然无需多说，问题是怎么执行 Job 呢？</p>
<blockquote>
<p><strong>Gitlab CI Multi Runner</strong></p>
</blockquote>
<p>在一台 stage 的机器上安装 gitlab ci multi runner , 并且在该机器上注册 runner 为 shell , 这意味着 runner 会以 gitlab-runner 用户的权限进行测试 , 你需要 uninstall<br>然后 install –user=root 一下，然后重启，即可在 gitlab-ci.yml 上。</p>
<p>修改文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">gitlab-runner register <span class="comment"># 然后填入相关信息</span></span><br><span class="line">vim /etc/gitlab-runner/config.toml <span class="comment"># 接着进行修改</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">concurrent = 1</span><br><span class="line">check_interval = 0</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = <span class="string">&quot;yadjangoweb&quot;</span></span><br><span class="line">  url = <span class="string">&quot;http://192.168.1.139/ci&quot;</span></span><br><span class="line">  token = <span class="string">&quot;325asd65f4e7xa9faasda8da&quot;</span></span><br><span class="line">  executor = <span class="string">&quot;shell&quot;</span></span><br><span class="line">  [runners.cache]</span><br></pre></td></tr></table></figure>

<h3 id="2-4-Dockerize-Application"><a href="#2-4-Dockerize-Application" class="headerlink" title="2.4. Dockerize Application"></a>2.4. Dockerize Application</h3><p>Docker 以其轻量级和类似于版本管理的软件方式吸引了我。于是，准备将所有的 Service 都 Docker 化。</p>
<p>拿 Django 程序来说，首先 Django 程序依赖三个组件 redis / postgresql / rabbitmq , 完成这些组件的安装之后才能进行下一步的操作。</p>
<h2 id="0x03-数据库相关"><a href="#0x03-数据库相关" class="headerlink" title="0x03 数据库相关"></a>0x03 数据库相关</h2><h3 id="1-数据库设计"><a href="#1-数据库设计" class="headerlink" title="1. 数据库设计"></a>1. 数据库设计</h3><p>PostgreSQL Array 在爬虫方面可以用来标记一个 Record 的处理状态<br>PostgreSQL Range 用来判断范围也是一个比较高效的选择（用空间 gist 索引取代两个索引）</p>
<p>GeoDjango 和 PostGIS 非常配</p>
<h3 id="2-数据迁移"><a href="#2-数据迁移" class="headerlink" title="2. 数据迁移"></a>2. 数据迁移</h3><h4 id="1-1-第一次数据迁移之-MySQL-转-PostgreSQL"><a href="#1-1-第一次数据迁移之-MySQL-转-PostgreSQL" class="headerlink" title="1.1. 第一次数据迁移之 MySQL 转 PostgreSQL"></a>1.1. 第一次数据迁移之 MySQL 转 PostgreSQL</h4><p>第一次数据迁移的时候基于 PostgreSQL 社区里面有个大杀器，叫做 PostGIS, 通过 PostGIS, 可以很方便的拥有和国内一些地图公司匹敌的算法。抛开算法实现的效率问题，基本上可以满足日常的开发需求，当时数据量不算大，使用 mysqldump 下来也就 500M 左右，而且行数大约 700W 条，于是使用了一个很笨的方法，就是将数据库使用 Django 命令 dump 成 json, 接着修改配置重新导入新数据库。</p>
<p>这种方式的缺点就是效率低而且太吃内存了，当时 16G 的服务器满内存，满交换内存地搞了一个上午。</p>
<h4 id="1-2-第二次数据迁移之重新-makemigrations"><a href="#1-2-第二次数据迁移之重新-makemigrations" class="headerlink" title="1.2. 第二次数据迁移之重新 makemigrations"></a>1.2. 第二次数据迁移之重新 makemigrations</h4><p>为什么要重新 makemigrations 呢，因为糟糕的事情发生了。</p>
<p>有个需求，需要重新定制用户登录认证系统。用户登录认证系统是最最应该在项目开始的时候编写的，这就是项目的基石，这个需求就恰似在房子盖到第三层的时候突然要把地基给加固。</p>
<p>Django 中如果使用了 auth 模块，则 auth.user 是最先被迁移到数据库中的，而如果你经过权衡继承 AbstractUser 并且 makemigrations 生成个迁移文件 0001_initial.py 后，在正常的情况下不容易将 migration 修改应用到数据库中。</p>
<blockquote>
<p>如果我偏要勉强呢？</p>
</blockquote>
<p>当然是可以勉强的，删掉数据库中已经记录下来的 auth.user migration 的相关记录即可。</p>
<p>那我为什么还是需要重新编写 migration 呢？</p>
<ol>
<li>因为之前对数据库的结构调整比较频繁，多达 138 次，而在 138 次调整数据结构之后，再去撤销第一次数据表的迁移操作的时候，则无异于厨子做菜要把牛排做 8 分熟，但是厨子做到 7 分熟的时候，突然顾客说，我要 5 分熟的牛排。那只能重新来了。</li>
<li>顺手精简掉 138 个文件。</li>
</ol>
<p>如何做呢？</p>
<ol>
<li>数据的迁移在没有表与表之间的关联的时候是很好办的，CSV, 标准 SQL 文件。</li>
<li>有表关联的情况下则需要权衡数据量来进行迁移，假如数据量在 10 来个 G 的时候，读到内存中，按照数据表的依赖关系，自下而上逐层迁移即可。</li>
<li>数据量大的时候，则需要去约束，去索引，然后转 CSV/SQL, 迁移到数据表中。如果表依赖不复杂的话，直接 psql 命令重定向数据也可以。</li>
</ol>
<p>但是呢，由于使用了 Django, 在数据量不大的时候，完全可以使用 Django 的 ORM 来做迁移。</p>
<p>我在 Google 了一下，发现下面一个脚本，于是设置数据库为新数据库 default 和 depressed</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_migrate</span>(<span class="params">model</span>):</span></span><br><span class="line">    <span class="comment"># remove data from destination db before copying</span></span><br><span class="line">    <span class="comment"># to avoid primary key conflicts or mismatches</span></span><br><span class="line">    <span class="keyword">if</span> model.objects.using(<span class="string">&#x27;default&#x27;</span>).exists():</span><br><span class="line">        model.objects.using(<span class="string">&#x27;default&#x27;</span>).<span class="built_in">all</span>().delete()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get data form the source database</span></span><br><span class="line">    items = model.objects.using(<span class="string">&#x27;depressed&#x27;</span>).order_by(<span class="string">&quot;pk&quot;</span>).<span class="built_in">all</span>()</span><br><span class="line">    count = <span class="built_in">len</span>(items)</span><br><span class="line">    <span class="comment"># process in chunks, to handle models with lots of data</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, count, <span class="number">10000</span>):</span><br><span class="line">        chunk_items = items[i:i + <span class="number">10000</span>]</span><br><span class="line">        print(<span class="string">&quot;已经迁移数据&quot;</span>, i)</span><br><span class="line">        model.objects.using(<span class="string">&#x27;default&#x27;</span>).bulk_create(chunk_items)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># many-to-many fields are NOT handled by bulk create; check for</span></span><br><span class="line">    <span class="comment"># them and use the existing implicit through models to copy them</span></span><br><span class="line">    <span class="keyword">for</span> m2mfield <span class="keyword">in</span> model._meta.many_to_many:</span><br><span class="line">        m2m_model = <span class="built_in">getattr</span>(model, m2mfield.name).through</span><br><span class="line">        batch_migrate(m2m_model)</span><br></pre></td></tr></table></figure>

<p>按照表与表之间的依赖关系，逐个迁移到数据库中搞定。</p>
<h3 id="1-3-sequence-问题"><a href="#1-3-sequence-问题" class="headerlink" title="1.3 sequence 问题"></a>1.3 sequence 问题</h3><p>在写 Django 的时候发现的时候无论如何都无法保存新的 item.</p>
<p>原来的代码为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">item = Item.objects.get_or_create()</span><br><span class="line">item.foo = <span class="number">1</span></span><br><span class="line">item.save()</span><br></pre></td></tr></table></figure>
<p>报错信息是 Integrety, 报 duplicated 错误（下面的代码当然是打了马赛克了）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django.db.utils.IntegrityError: duplicate key value violates unique constraint <span class="string">&quot;foo_item_pkey&quot;</span></span><br><span class="line">DETAIL:  Key (<span class="built_in">id</span>)=(<span class="number">111111</span>) already exists.</span><br></pre></td></tr></table></figure>

<p>那么，问题来了：</p>
<blockquote>
<p><del>挖掘技术哪家强？</del></p>
</blockquote>
<p>啊，不是</p>
<blockquote>
<p>How To Solve This?</p>
</blockquote>
<p>经过猜测，而 get 到已有的 item 设置并且保存的话，并不会出现这个问题。问题主要出在 create 上面。</p>
<p>于是编写代码验证一下是不是猜想正确</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    item = Item.objects.get()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    item = Item.objects.create()</span><br><span class="line"></span><br><span class="line"><span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line">item.save()</span><br></pre></td></tr></table></figure>

<p>duplicate 的问题肯定是多次存同样的不能重复的字段。</p>
<p><strong>但尼玛，我之前做测试的时候考虑过这个逻辑呀？</strong>换而言之，这种问题不应该出现，如果出现了问题，八成是 ORM 用的不对。</p>
<p>印象中这种问题 Google 一下 Integrety Duplicate Django PostgreSQL 一般就能出来了。</p>
<p>最后找到解决方案：<a href="http://centoshowtos.org/web-services/django-and-postgres-duplicate-key/">http://centoshowtos.org/web-services/django-and-postgres-duplicate-key/</a></p>
<p>在终端进入 psql 查询 sequence 最新值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> start_value, <span class="keyword">last_value</span>, max_value <span class="keyword">from</span> dt_crawler_item_item_id_seq;</span><br><span class="line"></span><br><span class="line"> start_value | last_value |      max_value</span><br><span class="line"><span class="comment">-------------|------------|---------------------</span></span><br><span class="line">           1 |    111110 | 9223372036854775807</span><br></pre></td></tr></table></figure>

<p>而我们查看一下 item_id 的最大值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select max(item_id) from app_model_item;</span><br><span class="line"></span><br><span class="line">   max</span><br><span class="line">---------</span><br><span class="line"> 111111</span><br></pre></td></tr></table></figure>

<p>重置 sequence last_value 值到最新即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter sequence app_model_item_item_id_seq restart with 111111;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当数据库每次插入一条非指定主键的记录，则获取 last_value(111110), 加 1 得到当前的主键接着插入。但这个过程无异于数据库中已经有了一个 pk 为 111111 的记录，再插入一条。于是报错。</p>
</blockquote>
<p>回顾这个问题，该问题是由于 PostGres 的 sequence 造成 pkey 相等，换而言之，postgres 应该在有一个 pk 值为 111111 的时候，插入一个无主键的记录，PostgreSQL 获取 sequence+1(111110 + 1) 得到它认为当前的主键值，接着再一次插入了主键为 111111 的这个值。</p>
<p>这个过程相当于依次插入两个条 ID 相同的记录。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>(<span class="keyword">id</span>, column2, …) <span class="keyword">VALUES</span> (<span class="number">111111</span>, value2, …);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>(<span class="keyword">id</span>, column2, …) <span class="keyword">VALUES</span> (<span class="number">111111</span>, value2, …);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>sequence 避免了每一次 max 查找带来的性能损失，一方面带来了方便，也带来了隐藏的坑。</p>
</blockquote>
<p>如果以后这个问题比较多的话，参考下面的源码对文本进行修改。</p>
<p><a href="https://github.com/ASKBOT/django-postgresql-fix-sequences/blob/master/postgresql_sequence_utils/utils.py">https://github.com/ASKBOT/django-postgresql-fix-sequences/blob/master/postgresql_sequence_utils/utils.py</a></p>
<h2 id="0x04-WebServer"><a href="#0x04-WebServer" class="headerlink" title="0x04 WebServer"></a>0x04 WebServer</h2><p>目前使用的 WebServer 是用 Nginx 做反向代理，将请求通过 unix socket 转发到 gunicorn，gunicorn 作为 django 实际上的 webserver。</p>
<h3 id="unix-socket-和-gunicorn-的-REMOTE-ADDR-问题"><a href="#unix-socket-和-gunicorn-的-REMOTE-ADDR-问题" class="headerlink" title="unix socket 和 gunicorn 的 REMOTE_ADDR 问题"></a>unix socket 和 gunicorn 的 REMOTE_ADDR 问题</h3><p>Django Admin 模块在访问 某个页面的时候特别特别慢，而在我的机器上一切正常，我怀疑的是数据库的问题，于是，那么首先要知道数据库的查询语句，于是想借用 django debug toolbar 来 profiling, 于是问题来了，我在局域网模拟真机环境，结果无论如何都无法呈现 Django Debug Toolbar,</p>
<p>问题八成出现在 Django 配置环境 或者 Nginx 上面（当然，最后发现是 Gunicorn 的锅）. 在</p>
<p>经过一段时间的排查，认为是 Nginx 的问题，在相关配置添加下面设置 Header,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxy_set_header X-Forwarded-For $remote_addr;</span><br></pre></td></tr></table></figure>

<p>结果依旧无法获取 request.Meta[“REMOTE-ADDR”]</p>
<p>经过搜索发现不止我一个人的问题：<a href="https://github.com/benoitc/gunicorn/issues/797">https://github.com/benoitc/gunicorn/issues/797</a></p>
<p>最后发现是 Http 请求从 nginx 这儿经过 unix socket 转发到 gunicorn.sock 下默认是没有赋值 REMOTE-ADDR 的，</p>
<p>那么，这个在 HTTP Header 层次的东西，没有在 gunicorn 层次解决，那就只能在 django 层次解决。</p>
<p>给 Django 添加中间件如下，放在 djangodebugtools 的前面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XForwardedForMiddleware</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.META.get(<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>, <span class="literal">False</span>):</span><br><span class="line">            request.META[<span class="string">&quot;HTTP_X_PROXY_REMOTE_ADDR&quot;</span>] = request.META[<span class="string">&quot;REMOTE_ADDR&quot;</span>]</span><br><span class="line">            parts = request.META[<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>].split(<span class="string">&quot;,&quot;</span>, <span class="number">1</span>)</span><br><span class="line">            request.META[<span class="string">&quot;REMOTE_ADDR&quot;</span>] = parts[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>解决。</p>
<h3 id="Nginx-Gzip-压缩"><a href="#Nginx-Gzip-压缩" class="headerlink" title="Nginx Gzip 压缩"></a>Nginx Gzip 压缩</h3><p>当 json 数据量比较大的时候，则必须要考虑开启压缩。一般情况下，虽然这个可以在 Django 层次完成，但是这么做还不如在 nginx 层次完成。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_disable <span class="string">&quot;msie6&quot;</span>;</span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_proxied <span class="built_in">any</span>;</span><br><span class="line">gzip_comp_level <span class="number">6</span>;</span><br><span class="line">gzip_buffers <span class="number">16</span> 8k;</span><br><span class="line">gzip_http_version <span class="number">1.1</span>;</span><br><span class="line">gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br></pre></td></tr></table></figure>

<p>开启之后，我这边的 一个 220k 的数据缩减到 54k</p>
<h2 id="0x04-其他踩坑相关"><a href="#0x04-其他踩坑相关" class="headerlink" title="0x04. 其他踩坑相关"></a>0x04. 其他踩坑相关</h2><h3 id="4-1-奇怪的文件问题"><a href="#4-1-奇怪的文件问题" class="headerlink" title="4.1 奇怪的文件问题"></a>4.1 奇怪的文件问题</h3><p>在某一天遇到了一个问题 往常的时候，当文件上传到 Django 中的时候，都可以正常的解析，但是这两天居然不能用了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 问题代码出现在</span></span><br><span class="line">df = pd.read_excel(file_obj)</span><br><span class="line"><span class="comment"># 报这个问题 google 几乎没有什么解决方案</span></span><br><span class="line">Invalid file path <span class="keyword">or</span> buffer <span class="built_in">object</span> <span class="built_in">type</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">django</span>.<span class="title">core</span>.<span class="title">files</span>.<span class="title">uploadedfile</span>.<span class="title">InMemoryUploadedFile</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>更加糟糕的问题出现了，我本人的开发环境和服务器的开发环境基本一致，但，但，但为什么不能用呢？</p>
<p>分别回滚代码，Nginx 设置，在线上打 Log, 最终确定了是 Pandas 从 0.19 升级到了 0.20 之后出现的一个小问题。最终还原线上 python 安装环境，搞定。</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE. 参考链接"></a>0xEE. 参考链接</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-21</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>YaDjangoBlog 之前后端分离篇</title>
    <url>/2018/03/04/YaDjangoBlog%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%AF%87/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文是 Django 全栈开发教程的第三篇 YaDjangoBlog 之前后端分离</p>
<p>目录在这里，已经更新的文章如下</p>
<ul>
<li>Django 全栈开发教程 - 2018 年不容错过的 Django 全栈项目 – 目录篇</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的开发环境配置</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的前后端设计</li>
</ul>
<p><strong>本文需要成四件事情：</strong></p>
<ul>
<li>第一件事情，解读 DjangoRestFramework, 通过简单的例子来引入用 DRF 的必要性，并且简单介绍 DRF 的 CBV 实现。</li>
<li>第二件事情，简单介绍 DRF 在本项目 YaDjangoBlog 中的使用</li>
<li>第三件事情，简单聊聊 RESTFULAPI 规范，并给出最佳实践参考。</li>
<li>第四件事情，简单解读一下 Django 处理请求流程代码。</li>
</ul>
<p>PS: 为了打字方便，下面的：</p>
<ul>
<li>DRF 指的是 DjangoRestFramework</li>
<li>CBV 指的是 Class Based View</li>
<li>FBV 指的是 Function Based View</li>
</ul>
<blockquote>
<p>坐稳了，开车了。</p>
</blockquote>
<h2 id="0x01-DjangorestFramework-解读"><a href="#0x01-DjangorestFramework-解读" class="headerlink" title="0x01 DjangorestFramework 解读"></a>0x01 DjangorestFramework 解读</h2><h3 id="为什么要用-DRF-呢？"><a href="#为什么要用-DRF-呢？" class="headerlink" title="为什么要用 DRF 呢？"></a>为什么要用 DRF 呢？</h3><p>使用一个库的原因，无非就是为了：</p>
<ol>
<li>节省开发者自己造轮子的时间。</li>
<li>有利于代码的可维护性 / 或者程序的健壮性。</li>
</ol>
<p>具体落实到 DRF, 有哪些具体的优点呢？</p>
<ol>
<li>可直接浏览调试的界面。让前端调试起来欲罢不能的功能。</li>
<li>用 DRF 的方式快速批量开接口</li>
<li>分页、序列化、校验、登录、权限、Web 附加文档、限流，高度的可扩展性。哪里不爽扩展哪里，so easy</li>
<li>算的上是 Django 社区最好的 RESTFUL 框架的轮子了。</li>
<li>完善的社区支持，比如 guardian/django-filter 等等结合。</li>
</ol>
<h3 id="不使用-DRF-应该如何写-WebAPI-做呢？"><a href="#不使用-DRF-应该如何写-WebAPI-做呢？" class="headerlink" title="不使用 DRF 应该如何写 WebAPI 做呢？"></a>不使用 DRF 应该如何写 WebAPI 做呢？</h3><p>我们先看看，不使用 DRF 的时代，API 是如何编写的。</p>
<p>这里我们用 function based view 来简单说明。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最简单版本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_hello</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line">        <span class="string">&quot;这就是 key&quot;</span>: <span class="string">&quot;这就是 value&quot;</span>,</span><br><span class="line">        <span class="string">&quot;时间&quot;</span>: time.time()</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>刚开始学 DRF 的时候，我也有这种疑惑，这有必要需要一个 RESTFULAPI 的框架嘛？捋起袖子，JSON API 甩起来开咯。</p>
<p>之所以得出这个结论，是因为这个例子实在是过于简单。</p>
<p>当涉及到一定复杂程度的 API 的时候，问题就来了：</p>
<ol>
<li>权限是否需要区分？</li>
<li>分页需不需要做？</li>
<li>前端人员提交 Form 表单时，只能通过命令行或者是 POSTMAN 之类的工具提交参数，这会不会带来不便？后端人员写这些表单的各个字段，也是很手酸的事情。</li>
<li>拼接字典或者是字符串倒也还好，能不能有个序列器帮我直接序列化这模型，并且如果模型和模型之间有联系，最好也可以帮我完成模型和模型之间的关联。</li>
<li>Profile API 应该如何做？</li>
</ol>
<p>这都是我们需要考虑的。</p>
<p>如果不用 DRF, 而是由后端程序员直接写这些代码的话，也不是不行。</p>
<ol>
<li>对于第一点，可以直接在 fbv 上面加装饰器。</li>
<li>对于第二点，分页的时候可以直接将逻辑写在 fbv 里面。</li>
<li>前端 er 直接使用 PostMan 之类的工具就好了。</li>
<li>序列化，可以借助内置的序列化方法。</li>
<li>Profile 可以在提交参数的时候，附加一个参数比如 debug, 渲染的时候，将使用 HTML 里面内置一个 JSON 字符串的方式渲染出来。这样的话，就可以使用 Django Debug Tools 进行 Profile 了。</li>
</ol>
<p>很显然，这是个系统性的活。 假如接下来还要考虑限流、RESTFULAPI 的设计，这就相当蛋疼了。</p>
<p>显然，我们的 FBV 就会是这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@a_authority</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex_hello</span>(<span class="params">request</span>):</span></span><br><span class="line">    params = getParams(request)</span><br><span class="line">    .....</span><br><span class="line">    query_results = SomeModels.some_query()</span><br><span class="line">    .....</span><br><span class="line">    results = SomeModelsSerial(query_results)</span><br><span class="line">    .....</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(results)</span><br></pre></td></tr></table></figure>

<p>看起来似乎是有规律可循的，既然有规律可循，就能封装一下，减轻负担。FBV 已经这样了，显然只能每次都要硬编码这些取参数，查询，序列化。当然，如果用生成器也能简化一部分函数代码。yield 实现方法太丑还是弃用吧。</p>
<p>我们试试 CBV 看看如何。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 继承并重写方法</span></span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> View</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        query_results = SomeModels.some_query()</span><br><span class="line">        .....</span><br><span class="line">        results = SomeModelsSerial(query_results)</span><br><span class="line">        .....</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        query_results = SomeModels.some_query()</span><br><span class="line">        .....</span><br><span class="line">        results = SomeModelsSerial(query_results)</span><br><span class="line">        .....</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里相当于 view 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 这里处理正式处理之前的逻辑，比如权限判断。</span></span><br><span class="line">        <span class="comment"># 如果是 GET 方法，则调用</span></span><br><span class="line">        results = self.get(request, *args, **kwargs):</span><br><span class="line">        <span class="comment"># 这里处理正式处理之后的逻辑，比如统计 list 的 total 值，加上时间戳</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(results)</span><br></pre></td></tr></table></figure>

<p>于是，除了使用 FBV 进行硬编码之外，还可以使用 CBV 的基类 进行扩展定制。</p>
<p>我们思考一下：</p>
<ol>
<li>假如我想渲染某个模型的 JSON 列表，就可以定制一个 ListViewAPI 出来。如果需要一个 DetailViewAPI, 就定制一个 DetailViewAPI 出来。</li>
<li>我们再声明一些 Permission 类，序列化类，模型，然后在 dispatch 中直接使用这些东西的话，就只需要在 get 和 post 里面编写一些最核心的逻辑了。</li>
<li>甚至，指定了分页器和查询，都完全不需要再 get 和 post 里面写代码。</li>
</ol>
<p>恭喜你，读到这里，你已经可以写一个极简的 DRF 出来了。</p>
<p>但写成 DRF 这种量级的程序，还需要做很多很多事情。</p>
<h3 id="DRF-处理请求的流程"><a href="#DRF-处理请求的流程" class="headerlink" title="DRF 处理请求的流程"></a>DRF 处理请求的流程</h3><p>要知道 DRF 的处理请求的流程，就要先知道 Django 的处理请求流程。</p>
<p>宏观来看</p>
<ol>
<li>请求先经过 MiddleWare , 接着判断 urlconf （默认为 ROOT_URLCONF),</li>
<li>匹配 URL, 将请求上下文 dispatch 到具体的 view.</li>
<li>处理完毕，经过 MiddleWare</li>
</ol>
<p><a href="https://docs.djangoproject.com/en/2.0/topics/http/urls/">https://docs.djangoproject.com/en/2.0/topics/http/urls/</a></p>
<p>在本文的结尾的时候，我也将带大家从源码角度过一下，涉及到这个流程的相关的源码。这里先跳过。</p>
<p>那么，DRF 是如何处理一个请求的呢？我们忽略路由之类的东西，直接看对应的 CBV 的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES</span><br><span class="line">    parser_classes = api_settings.DEFAULT_PARSER_CLASSES</span><br><span class="line">    authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES</span><br><span class="line">    throttle_classes = api_settings.DEFAULT_THROTTLE_CLASSES</span><br><span class="line">    permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES</span><br><span class="line">    content_negotiation_class = api_settings.DEFAULT_CONTENT_NEGOTIATION_CLASS</span><br><span class="line">    metadata_class = api_settings.DEFAULT_METADATA_CLASS</span><br><span class="line">    versioning_class = api_settings.DEFAULT_VERSIONING_CLASS</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...... 其他方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Dispatch methods</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the initial request object.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Request(</span><br><span class="line">            request,</span><br><span class="line">            parsers=self.get_parsers(),</span><br><span class="line">            authenticators=self.get_authenticators(),</span><br><span class="line">            negotiator=self.get_content_negotiator(),</span><br><span class="line">            parser_context=parser_context</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initial</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Runs anything that needs to occur prior to calling the method handler.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.format_kwarg = self.get_format_suffix(**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Perform content negotiation and store the accepted info on the request</span></span><br><span class="line">        neg = self.perform_content_negotiation(request)</span><br><span class="line">        request.accepted_renderer, request.accepted_media_type = neg</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Determine the API version, if versioning is in use.</span></span><br><span class="line">        version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">        request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Ensure that the incoming request is permitted</span></span><br><span class="line">        self.perform_authentication(request)</span><br><span class="line">        self.check_permissions(request)</span><br><span class="line">        self.check_throttles(request)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Note: Views are made CSRF exempt from within `as_view` as to prevent</span></span><br><span class="line">    <span class="comment"># accidental removal of this exemption in cases where `dispatch` needs to</span></span><br><span class="line">    <span class="comment"># be overridden.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        `.dispatch()` is pretty much the same as Django&#x27;s regular dispatch,</span></span><br><span class="line"><span class="string">        but with extra hooks for startup, finalize, and exception handling.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        <span class="comment"># 这里需要注意</span></span><br><span class="line">        request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line">        self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 这里需要注意</span></span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">            <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">                handler = <span class="built_in">getattr</span>(self, request.method.lower(),</span><br><span class="line">                                  self.http_method_not_allowed)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">            response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            response = self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">        self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.response</span><br></pre></td></tr></table></figure>

<p>可以看出，当请求到达 dispatch 的时候，DRF 添加了一些钩子函数，用于开始 / 结束 / 错误控制。</p>
<ol>
<li>在 initialize_request 的时候，对 request 进行封装，添加上 parser / auth / negoriator / parser context</li>
<li>接着在 initial 方法里面校验了版本，进行了认证和鉴权，检查了限流</li>
</ol>
<p>一看，其实与我们之前想封装 APIView 的想法不谋而合，而我们只是想想，DRF 是详细实现。</p>
<h2 id="0x02-DjangorestFramework-的使用案例"><a href="#0x02-DjangorestFramework-的使用案例" class="headerlink" title="0x02 DjangorestFramework 的使用案例"></a>0x02 DjangorestFramework 的使用案例</h2><h3 id="如何开-WebAPI-接口"><a href="#如何开-WebAPI-接口" class="headerlink" title="如何开 WebAPI 接口"></a>如何开 WebAPI 接口</h3><p>回到我们的 yadjangoblog 上面来。这个时候我们想开一个博文列表 API:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 定义序列器，用于序列化查询的每一条。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostListSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    category = BlogCategorySerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    tags = BlogTagSerializer(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    title = serializers.CharField()</span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BlogPost</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;char_num&#x27;</span>, <span class="string">&#x27;vote_num&#x27;</span>, <span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;publish_date&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 定义过滤器，可以通过过滤器进行查询</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostFilter</span>(<span class="params">filters.FilterSet</span>):</span></span><br><span class="line">    title = filters.CharFilter(lookup_expr=<span class="string">&#x27;contains&#x27;</span>)</span><br><span class="line">    having_tags = filters.Filter(name=<span class="string">&quot;tags&quot;</span>, lookup_expr=<span class="string">&#x27;in&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BlogPost</span><br><span class="line">        fields = (<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;char_num&#x27;</span>, <span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;tags&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 指定其他设置，具体大家看源码就好了。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostListAPIView</span>(<span class="params">generics.ListAPIView</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    依照 category , tags , 时间 （年 / 月 / 日  年 / 月 年）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = BlogPost.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BlogPostListSerializer</span><br><span class="line">    filter_backends = (filters.DjangoFilterBackend, OrderingFilter,)</span><br><span class="line">    filter_class = BlogPostFilter</span><br><span class="line">    ordering_fields = (<span class="string">&#x27;publish_date&#x27;</span>,)</span><br><span class="line">    ordering = (<span class="string">&#x27;publish_date&#x27;</span>,)</span><br><span class="line">    permission_classes = (permissions.AllowAny,)</span><br><span class="line">    pagination_class = SmallResultsSetPagination</span><br></pre></td></tr></table></figure>

<p>在指定上面的操作之后，一个接口就快速的开出来了。</p>
<p>: TODO 插入一张图</p>
<p>当然，DRF 认认真真通读一遍的话，还是可以给自己节省不少时间的。</p>
<p>这是开接口，似乎，还少了什么，比如 Restful API.</p>
<h3 id="前端如何使用-WebAPI-接口"><a href="#前端如何使用-WebAPI-接口" class="headerlink" title="前端如何使用 WebAPI 接口"></a>前端如何使用 WebAPI 接口</h3><p>什么是 CORS 可以参考阮一峰的文章 <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
<p>在调试的时候，我们肯定是使用 ajax / fetch 方式请求。这就会遇到一个问题：</p>
<ul>
<li>跨域</li>
</ul>
<p>解决方式也很简单，服务端只要服务器实现了 CORS 接口，就可以跨源通信。</p>
<p>安装 django-cors-headers, 并在 settings 中开启 CORS_ORIGIN_ALLOW_ALL = True 即可。</p>
<p>这里参考了临书的解决方案，要感谢 @临书 , 附上参考地址 <a href="https://zhuanlan.zhihu.com/p/24893786">https://zhuanlan.zhihu.com/p/24893786</a></p>
<p>对于本项目而言，使用了 axios 请求库，直接 get 即可。详细看前端代码即可。</p>
<h2 id="0x03-RESTFUL-API-设计"><a href="#0x03-RESTFUL-API-设计" class="headerlink" title="0x03 RESTFUL API 设计"></a>0x03 RESTFUL API 设计</h2><p>开发过程中，尽量靠近 RESTFUL API 的设计，而不是照搬。</p>
<p>举个其他领域的例子，有的人表述美就只有：</p>
<ul>
<li>已撸</li>
</ul>
<p>但是不同的美各有各的模样：</p>
<ul>
<li>手如柔荑，肤如凝脂，领如蝤蛴，齿如瓠犀，螓首蛾眉，巧笑倩兮，美目盼兮。</li>
</ul>
<p>同样，放在 RESFUL 的时候确实也出现了这种情况：</p>
<p>几乎所有的业务逻辑最后会落实到数据表的 CURDE, 但是所有业务逻辑并不能完全使用 CRUDE 描述。</p>
<p>我们看下面的例子</p>
<h3 id="关于请求"><a href="#关于请求" class="headerlink" title="关于请求"></a>关于请求</h3><p>举个例子，RESTFUL 适合纯粹 CURDE 的设计风格。</p>
<p>比如，新增博客，更新博客，查询博客，删除博客，查看是否含有博客</p>
<p>但语义在某些场景下表述不足， 比如，设计订单的时候，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">URL: /api/v1/user/some_user/orders</span><br><span class="line">你查看订单集合，这个好理解。get 方法</span><br><span class="line">你新增订单，这个好理解。put 方法</span><br><span class="line">URL: /api/v1/user/some_user/order/xxxxxxx</span><br><span class="line">你删除订单，这个好理解。delete 方法</span><br><span class="line">你获取订单，这个好理解。get 方法</span><br><span class="line">你修改订单，这个好理解。post 方法</span><br><span class="line"></span><br><span class="line">但修改订单，有的时候可能会比较复杂，有可能是取消订单，有可能是评价订单，有可能是其他。而 RESTFUL 表达这种情况就有些语义不足了。</span><br></pre></td></tr></table></figure>

<p>当然，个人经验是，字段越多，越难靠近 RESTFUL 规范</p>
<p>这个时候，就需要设计者做好 RESTFULAPI 的设计与语义化的平衡了。</p>
<h3 id="关于响应"><a href="#关于响应" class="headerlink" title="关于响应"></a>关于响应</h3><p>关于响应设计，主要有两点需要注意：</p>
<ul>
<li>状态码 (HTTP 状态码，也业务逻辑通用状态码）</li>
<li>响应内容 包含 业务逻辑通用状态码，剩下的视具体情况而定。</li>
</ul>
<p>HTTP 状态码用于标记资源情况，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200 表示获取资源</span><br><span class="line">404 表示 NOT FOUND</span><br></pre></td></tr></table></figure>

<p>但有时候也存在语义表达不足问题，一般前后端也会约定一个通用的状态码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用状态码 错误信息 含义 HTTP 状态码</span><br><span class="line">999	    unknow_v2_error	未知错误	400</span><br><span class="line">1000	need_permission	需要权限	403</span><br><span class="line">1001	uri_not_found	资源不存在	404</span><br><span class="line">1002	missing_args	参数不全	400</span><br><span class="line">1003	image_too_large	上传的图片太大	400</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>至于响应内容，一般都是见招拆招的。建议查看文章末尾的 Douban 的相关 API 规范来提升姿势。</p>
<h2 id="0x04-Django-的处理请求流程代码解读"><a href="#0x04-Django-的处理请求流程代码解读" class="headerlink" title="0x04 Django 的处理请求流程代码解读"></a>0x04 Django 的处理请求流程代码解读</h2><p>这小节属于一时兴起写的番外篇。和本文主体内容没啥必要的关联。不感兴趣的可以直接跳转到文章末尾点赞哈。</p>
<p>WSGI 全称叫做 web 服务器网关接口，通常情况下，gunicorn 或者 uwsgi 接收来自 nginx 转发来的请求之后，向 web app 提供了环境信息（叫请求上下文会不会好些）以及一个 callback. 这样的话，web app 就可以接收这个环境信息，处理完毕，通过回调函数处理请求，并返回响应。一个极简的 webapp 如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app</span>(<span class="params">environ, start_response</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simplest possible application object&quot;&quot;&quot;</span></span><br><span class="line">    data = <span class="string">&#x27;Hello, World!\n&#x27;</span></span><br><span class="line">    status = <span class="string">&#x27;200 OK&#x27;</span></span><br><span class="line">    response_headers = [</span><br><span class="line">        (<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;text/plain&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;Content-Length&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(data)))</span><br><span class="line">    ]</span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>([data])</span><br></pre></td></tr></table></figure>

<p>现在我们看看 django 中是如何处理请求的。首先查看相关的 wsgi.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wsgi.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> django.core.wsgi <span class="keyword">import</span> get_wsgi_application</span><br><span class="line">os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;config.settings&quot;</span>)</span><br><span class="line">application = get_wsgi_application()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着查看 get_wsgi_application</span></span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line"><span class="keyword">from</span> django.core.handlers.wsgi <span class="keyword">import</span> WSGIHandler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_wsgi_application</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The public interface to Django&#x27;s WSGI support. Return a WSGI callable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Avoids making django.core.handlers.WSGIHandler a public API, in case the</span></span><br><span class="line"><span class="string">    internal WSGI implementation changes or moves in the future.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    django.setup(set_prefix=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> WSGIHandler()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 于是自然而言的看到了 WSGIHandler</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span>(<span class="params">base.BaseHandler</span>):</span></span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        self.load_middleware()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, environ, start_response</span>):</span></span><br><span class="line">        <span class="comment"># 有木有看到 environ 和 start_response ?? 这就是极简 web app 中的 webapp 核心方法。</span></span><br><span class="line">        set_script_prefix(get_script_name(environ))</span><br><span class="line">        signals.request_started.send(sender=self.__class__, environ=environ)</span><br><span class="line">        request = self.request_class(environ)</span><br><span class="line">        <span class="comment"># 注意这一行，有请求处理逻辑 具体要见下面代码</span></span><br><span class="line">        response = self.get_response(request)</span><br><span class="line">        <span class="comment"># ......</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>嗯，看到了子类，就要看看基类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseHandler</span>:</span></span><br><span class="line">    _request_middleware = <span class="literal">None</span></span><br><span class="line">    _view_middleware = <span class="literal">None</span></span><br><span class="line">    _template_response_middleware = <span class="literal">None</span></span><br><span class="line">    _response_middleware = <span class="literal">None</span></span><br><span class="line">    _exception_middleware = <span class="literal">None</span></span><br><span class="line">    _middleware_chain = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_middleware</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        注册 MiddleWare, 并赋值 _middleware_chain 方法，使之调用的时候可以先按照顺序从 setting 的 middleware 里面处理 requests</span></span><br><span class="line"><span class="string">        并在处理 request 的最后调用 私有方法 _get_response</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._request_middleware = []</span><br><span class="line">        self._view_middleware = []</span><br><span class="line">        self._template_response_middleware = []</span><br><span class="line">        self._response_middleware = []</span><br><span class="line">        self._exception_middleware = []</span><br><span class="line"></span><br><span class="line">        handler = convert_exception_to_response(self._get_response)</span><br><span class="line">        <span class="comment"># 注意，这里面是倒着来的 代码中越在前面，实际运行的时候处理就越在后面</span></span><br><span class="line">        <span class="keyword">for</span> middleware_path <span class="keyword">in</span> <span class="built_in">reversed</span>(settings.MIDDLEWARE):</span><br><span class="line">            <span class="comment"># 依次添加 view middleware / template middleware / exception middleware</span></span><br><span class="line">            middleware = import_string(middleware_path)</span><br><span class="line">            mw_instance = middleware(handler)</span><br><span class="line">            handler = convert_exception_to_response(mw_instance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># We only assign to this when initialization is complete as it is used</span></span><br><span class="line">        <span class="comment"># as a flag for initialization being complete.</span></span><br><span class="line">        self._middleware_chain = handler</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_response</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return an HttpResponse object for the given HttpRequest.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># Setup default url resolver for this thread</span></span><br><span class="line">        set_urlconf(settings.ROOT_URLCONF)</span><br><span class="line"></span><br><span class="line">        response = self._middleware_chain(request)</span><br><span class="line">        <span class="comment"># ......</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_response</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Resolve and call the view, then apply view, exception, and</span></span><br><span class="line"><span class="string">        template_response middleware. This method is everything that happens</span></span><br><span class="line"><span class="string">        inside the request/response middleware.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 接着判断 urlconf （默认为 ROOT_URLCONF), 可以通过 middleware 进行设置</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(request, <span class="string">&#x27;urlconf&#x27;</span>):</span><br><span class="line">            urlconf = request.urlconf</span><br><span class="line">            set_urlconf(urlconf)</span><br><span class="line">            resolver = get_resolver(urlconf)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            resolver = get_resolver()</span><br><span class="line"></span><br><span class="line">        resolver_match = resolver.resolve(request.path_info)</span><br><span class="line">        callback, callback_args, callback_kwargs = resolver_match</span><br><span class="line">        request.resolver_match = resolver_match</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Apply view middleware....</span></span><br><span class="line">        <span class="comment"># 注意，这个就是 view 函数</span></span><br><span class="line">        wrapped_callback = self.make_view_atomic(callback)</span><br><span class="line">        response = wrapped_callback(request, *callback_args, **callback_kwargs)</span><br><span class="line">        <span class="comment"># Complain if the view returned None (a common error).</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception_by_middleware</span>(<span class="params">self, exception, request</span>):</span></span><br><span class="line">        <span class="comment"># ......</span></span><br></pre></td></tr></table></figure>

<p>上面代码比较表达的意思比较简单，值得注意的地方我都加了注释。</p>
<p>需要特别注意的就是 middleware_chain 这个属性（实际上是一个方法）, 正是这个方法使得注册的 middleware （在 load_middleware 方法里）可以在 fbv 或者 cbv 处理 request 之前，通过对 request 进行处理。</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE. 参考链接"></a>0xEE. 参考链接</h2><p>还犹豫啥，Django 前后端分离最佳实践，点赞后，快上车吧</p>
<ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog">https://github.com/twocucao/YaDjangoBlog</a></li>
<li>扩展阅读之 douban restful api 设计  <a href="https://developers.douban.com/wiki/?title=api_v2">https://developers.douban.com/wiki/?title=api_v2</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-22</strong> 开启本文</li>
<li><strong>2018-03-04</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLAlchemyCheatSheet</title>
    <url>/2018/03/31/SQLAlchemyCheatSheet/</url>
    <content><![CDATA[<p>SQLAlchemy 入门，看本文就好了</p>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>大约一年前，工作从 Django 开发切到 Flask 开发，ORM 选用的是 SQLAlchemy, 用了大半年后，借着这个机会重新回顾一下 SQLAchemy 和 Django ORM, 补充一下文档。</p>
<p>这篇文章算是笔记吧</p>
<p>Python 圈内有两大 ORM 框架</p>
<ul>
<li>SQLAlchemy</li>
<li>Django ORM</li>
</ul>
<p>当然，也有 peewee 之类的其他 ORM。</p>
<h2 id="0x01-ORM-解决了什么问题？"><a href="#0x01-ORM-解决了什么问题？" class="headerlink" title="0x01 ORM 解决了什么问题？"></a>0x01 ORM 解决了什么问题？</h2><p>了解一个框架，最好是从下面几处入手：</p>
<ul>
<li>官方 Tuorial</li>
<li>官方 Example</li>
<li>官方 Guide</li>
<li>官方 APIDocument</li>
<li>源码</li>
</ul>
<p>对框架掌握越深，就越需要使用者多多从上开始逐渐向下了解。</p>
<p>其实还有一些途径：</p>
<ul>
<li>Github 上面的 issue</li>
<li>Stack Overflow 的高 vote 常见问题</li>
<li><strong>如果作者有一些活跃的社区的话，可以火速前往</strong></li>
</ul>
<p>鉴于我们的目标在于入手，所以可以火速过一下：</p>
<ul>
<li>官方 Tuorial</li>
<li>官方 Example</li>
<li>官方 Guide</li>
<li>Github 上面的 issue</li>
<li>Stack Overflow 的高 vote 常见问题</li>
<li><strong>如果作者有一些活跃的社区的话，可以火速前往</strong></li>
</ul>
<h2 id="0x02-SQLAlchemy-的基本功能"><a href="#0x02-SQLAlchemy-的基本功能" class="headerlink" title="0x02 SQLAlchemy 的基本功能"></a>0x02 SQLAlchemy 的基本功能</h2><h3 id="2-0-SQLAlchemy-VS-DjangoORM"><a href="#2-0-SQLAlchemy-VS-DjangoORM" class="headerlink" title="2.0 SQLAlchemy VS DjangoORM"></a>2.0 SQLAlchemy VS DjangoORM</h3><p>ORM 通常有 DataMapper 实现和 ActiveRecord 实现两种。</p>
<p>依照我的经验，ActiveRecord 使用起来的更接近对象 (Object) 的操作，DataMapper 使用起来更接近 (Table) 的操作。</p>
<blockquote>
<p>SQLAlchemy 是 DataMapper 模式的实现，在该模式下，session 会暴露出来，即 Model 与 session 并不耦合。</p>
</blockquote>
<blockquote>
<p>DjangoORM 是 ActivityRecord 模式的一种实现，在该模式下，session 并不暴露出来，即 Model 与 session 耦合。</p>
</blockquote>
<p>使用 Django ORM 的时候，往往是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; Blog(**data)</span><br><span class="line">b.save()</span><br></pre></td></tr></table></figure>

<p>使用 SQLAlchemy 的时候，往往是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; Blog(**data)</span><br><span class="line">session.add(b)</span><br><span class="line">session.session(b)</span><br></pre></td></tr></table></figure>

<p>由于 Django 帮你屏蔽了 session 的操作。</p>
<p>在通常情况下，</p>
<ol>
<li>DjangoORM 使用起来更加接近 Object 的操作。</li>
<li>SQLAlchemy 使用起来更加接近 Table 的操作。</li>
</ol>
<p>举个例子，</p>
<p>一对多，Father 添加两个小孩（其中一个小孩是已经存在的）</p>
<p>在 DjangoORM 里面， 这里更像是一个 Set 的 add 操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">father.children.add(new_child,exsit_child)</span><br></pre></td></tr></table></figure>

<p>在 SQLAlchemy 里面，这里更像是一个 table 的 insert 操作。（麻蛋，你要说是一个 list 的 append 操作也行）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for child in (new_child,exsit_child):</span><br><span class="line">    if child in father.children:</span><br><span class="line">        father.children.append(child)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>写 SQLAlchemy 更接近操作放在数据库里面的数据记录，而 DjangoORM 更接近操作一批放在数据库里面的对象。</p>
</blockquote>
<p>由于 session 的使用姿势不同，所以往往会有很多使用上面的区别。</p>
<p>至于孰优孰劣，难以评判。</p>
<ul>
<li><p>技术老大 (Flask 和 React 大神）倾向于使用 SQLAlchemy, 他认为</p>
<ul>
<li>对于一个技术『知其然，知其所以然』</li>
<li>对于 ORM<ul>
<li>操作数据库，操作最好要落实在成 SQL</li>
<li>如果有可能的话，每一个 SQL 语句都要经过推敲，而且写这个 SQL 和 ORM 过程要反复练习</li>
</ul>
</li>
<li>对于 Migration 机制<ul>
<li>Alembic 这个迁移工具是为了省事用的，甚至在某些情况下没必要用。完全可以写 SQL 代替</li>
</ul>
</li>
</ul>
</li>
<li><p>我 (Django 和 Vue 弱鸡）倾向于使用 DjangoORM, 我认为</p>
<ul>
<li>对于一个技术『先知其大致然，需要深入的时候知其所以然』</li>
<li>对于 ORM<ul>
<li>操作数据，最好抽象为对对象的操作。</li>
<li>测试到位的情况下，快糙狠先出东西。到需要优化的时候该怎么 Profile 怎么 Profile</li>
</ul>
</li>
<li>对于 Migration 机制<ul>
<li>用起来啊，能操作对象为什么还要强行到数据库操作？</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-1-模型定义"><a href="#2-1-模型定义" class="headerlink" title="2.1 模型定义"></a>2.1 模型定义</h3><p>先看一组模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line">Base = declarative_base() <span class="comment"># 模型基类</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>) <span class="comment"># 主键</span></span><br><span class="line">    name = Column(String)</span><br><span class="line">    fullname = Column(String)</span><br><span class="line">    password = Column(String)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;&lt;User(name=&#x27;%s&#x27;, fullname=&#x27;%s&#x27;, password=&#x27;%s&#x27;)&gt;&quot;</span> % (</span><br><span class="line">                            self.name, self.fullname, self.password)</span><br><span class="line">Base.metadata.create_all(engine)</span><br></pre></td></tr></table></figure>

<p>可以看出，包含如下的部分：</p>
<ol>
<li>Model 与 Model 内部的 Meta</li>
<li>Field 与 Field 内部的 Options</li>
<li>Model 与 Model 之间的关系</li>
<li>其他，比如索引</li>
</ol>
<h4 id="Models-与-Meta"><a href="#Models-与-Meta" class="headerlink" title="Models 与 Meta"></a>Models 与 Meta</h4><p><a href="https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/sql/schema.py#L3685">https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/sql/schema.py#L3685</a></p>
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><h5 id="One-To-Many"><a href="#One-To-Many" class="headerlink" title="One To Many"></a>One To Many</h5><p>母亲有若干个孩子，外键在孩子上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Parent(Base):</span><br><span class="line">    #...</span><br><span class="line">    children &#x3D; relationship(&quot;Child&quot;, backref&#x3D;&quot;parent&quot;)</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    #...</span><br><span class="line">    parent_id &#x3D; Column(Integer, ForeignKey(&#39;parent.id&#39;))</span><br></pre></td></tr></table></figure>

<h5 id="Many-To-One"><a href="#Many-To-One" class="headerlink" title="Many To One"></a>Many To One</h5><p>多个母亲共享一个孩子，外键在母亲上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Parent(Base):</span><br><span class="line">    child_id &#x3D; Column(Integer, ForeignKey(&#39;child.id&#39;))</span><br><span class="line">    child &#x3D; relationship(&quot;Child&quot;)</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    # ...</span><br></pre></td></tr></table></figure>

<h5 id="One-To-One"><a href="#One-To-One" class="headerlink" title="One To One"></a>One To One</h5><p>One to One 是 One to Many 或者是 Many to One 的简化版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Many To One</span><br><span class="line">class Parent(Base):</span><br><span class="line">    # ...</span><br><span class="line">    child_id &#x3D; Column(Integer, ForeignKey(&#39;child.id&#39;))</span><br><span class="line">    child &#x3D; relationship(&quot;Child&quot;, backref&#x3D;backref(&quot;parent&quot;, uselist&#x3D;False))</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    # ...</span><br><span class="line"></span><br><span class="line"># One To Many 改 One To One</span><br><span class="line">class Parent(Base):</span><br><span class="line">    # ...</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    # ...</span><br><span class="line">    parent_id &#x3D; Column(Integer, ForeignKey(&#39;parent.id&#39;))</span><br><span class="line">    parent &#x3D; relationship(&quot;Parent&quot;, backref&#x3D;backref(&quot;child&quot;, uselist&#x3D;False))</span><br></pre></td></tr></table></figure>

<h5 id="Many-To-Many"><a href="#Many-To-Many" class="headerlink" title="Many To Many"></a>Many To Many</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">association_table &#x3D; Table(&#39;association&#39;, Base.metadata,</span><br><span class="line">    Column(&#39;left_id&#39;, Integer, ForeignKey(&#39;left.id&#39;)),</span><br><span class="line">    Column(&#39;right_id&#39;, Integer, ForeignKey(&#39;right.id&#39;))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">class Parent(Base):</span><br><span class="line">    # ...</span><br><span class="line">    children &#x3D; relationship(&quot;Child&quot;,</span><br><span class="line">                    secondary&#x3D;association_table,</span><br><span class="line">                    backref&#x3D;&quot;parents&quot;)</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    # ...</span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<p>执行删除 mapping 表的时候尽量这样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myparent.children.remove(somechild)</span><br></pre></td></tr></table></figure>

<p>当你想干掉 somechild 的时候，会执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.delete(somechild)</span><br></pre></td></tr></table></figure>

<ol>
<li>假如 Child 没有 ref Parent 的话，Secondary Table 无删除，则无法删除。</li>
<li>假如 ref 了的话，则删除 secondary 里面的记录。</li>
<li>TODO</li>
</ol>
<h5 id="邻接列表关系"><a href="#邻接列表关系" class="headerlink" title="邻接列表关系"></a>邻接列表关系</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Node(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;node&#39;</span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    parent_id &#x3D; Column(Integer, ForeignKey(&#39;node.id&#39;))</span><br><span class="line">    data &#x3D; Column(String(50))</span><br><span class="line">    children &#x3D; relationship(&quot;Node&quot;,</span><br><span class="line">                backref&#x3D;backref(&#39;parent&#39;, remote_side&#x3D;[id])</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>

<h5 id="relationship-详解"><a href="#relationship-详解" class="headerlink" title="relationship 详解"></a>relationship 详解</h5><h3 id="2-1-Query"><a href="#2-1-Query" class="headerlink" title="2.1 Query"></a>2.1 Query</h3><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c1 &#x3D; Child(name&#x3D;&quot;苏轼&quot;)</span><br><span class="line">session.add(c1)</span><br><span class="line">session.flush()</span><br><span class="line">p &#x3D; Parent(name&#x3D;&quot;苏辙&quot;)</span><br><span class="line">p.best_child &#x3D; c1</span><br><span class="line">for c in [c1,c2,c3,c4]:</span><br><span class="line">    p.children.append(c)</span><br><span class="line">session.add(c1)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<h4 id="Retrieve"><a href="#Retrieve" class="headerlink" title="Retrieve"></a>Retrieve</h4><p>过滤</p>
<p>filter(**kwargs)<br>filter(Singer.name == “周杰伦”)<br>filter(Singer.name =! “周杰棍”)</p>
<h5 id="跨关系（跨表）查询"><a href="#跨关系（跨表）查询" class="headerlink" title="跨关系（跨表）查询"></a>跨关系（跨表）查询</h5><p>session.query(Entry).join(Blog,Blog.entry_id == Entry.id).filter(Blog.name = “SqlAlchemy CheatSheet”)</p>
<h5 id="Limit-Offset-分页"><a href="#Limit-Offset-分页" class="headerlink" title="Limit / Offset / 分页"></a>Limit / Offset / 分页</h5><ul>
<li>limit()</li>
<li>offset()</li>
</ul>
<h5 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query &#x3D; session.query(Order) # query &#x3D; session.query(Order)</span><br><span class="line">query &#x3D; query.filter(Order.name.like(f&quot;%name%&quot;))</span><br></pre></td></tr></table></figure>

<h5 id="二进制表达式"><a href="#二进制表达式" class="headerlink" title="二进制表达式"></a>二进制表达式</h5><p>我们先 type 一下表达式，找到 eq 的类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(model.column_name == <span class="string">&#x27;asdf&#x27;</span>) → sqlalchemy.sql.elements.BinaryExpression</span><br></pre></td></tr></table></figure>

<p>是一个二进制表达式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等于</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name == <span class="string">&#x27;ed&#x27;</span>)</span><br><span class="line"><span class="comment"># 不等于</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name != <span class="string">&#x27;ed&#x27;</span>)</span><br><span class="line"><span class="comment"># Like（有的数据库不区分大小写）</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.like(<span class="string">&#x27;%ed%&#x27;</span>))</span><br><span class="line"><span class="comment"># ILIKE (case-insensitive LIKE)</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.ilike(<span class="string">&#x27;%ed%&#x27;</span>))</span><br><span class="line"><span class="comment"># IN</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.in_([<span class="string">&#x27;ed&#x27;</span>, <span class="string">&#x27;wendy&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]))</span><br><span class="line"><span class="comment"># Not in</span></span><br><span class="line">query.<span class="built_in">filter</span>(~User.name.in_([<span class="string">&#x27;ed&#x27;</span>, <span class="string">&#x27;wendy&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]))</span><br><span class="line"><span class="comment"># IS NULL</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name == <span class="literal">None</span>)</span><br><span class="line"><span class="comment">## 如果你用了 pep8/linter 的话</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.is_(<span class="literal">None</span>))</span><br><span class="line"><span class="comment"># IS NOT NULL:</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name != <span class="literal">None</span>)</span><br><span class="line"><span class="comment">## 如果你用了 pep8/linter 的话</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.isnot(<span class="literal">None</span>))</span><br><span class="line"><span class="comment"># AND</span></span><br><span class="line"><span class="comment">## use and_()</span></span><br><span class="line">query.<span class="built_in">filter</span>(and_(User.name == <span class="string">&#x27;ed&#x27;</span>, User.fullname == <span class="string">&#x27;Ed Jones&#x27;</span>))</span><br><span class="line"><span class="comment">## or send multiple expressions to .filter()</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name == <span class="string">&#x27;ed&#x27;</span>, User.fullname == <span class="string">&#x27;Ed Jones&#x27;</span>)</span><br><span class="line"><span class="comment">## or chain multiple filter()/filter_by() calls</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name == <span class="string">&#x27;ed&#x27;</span>).<span class="built_in">filter</span>(User.fullname == <span class="string">&#x27;Ed Jones&#x27;</span>)</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">query.<span class="built_in">filter</span>(or_(User.name == <span class="string">&#x27;ed&#x27;</span>, User.name == <span class="string">&#x27;wendy&#x27;</span>))</span><br><span class="line"><span class="comment"># MATCH</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.match(<span class="string">&#x27;wendy&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h5 id="执行查询"><a href="#执行查询" class="headerlink" title="执行查询"></a>执行查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all()</span><br><span class="line">first()</span><br><span class="line">one()</span><br><span class="line">one_or_none()</span><br><span class="line">scalar()</span><br></pre></td></tr></table></figure>

<p>YourModel.query.get((pk1, pk2))</p>
<h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><blockquote>
<p>同一个 Session 下面，取到的某一条数据对应的 objects 应该是一样的？</p>
</blockquote>
<h5 id="复制-实例"><a href="#复制-实例" class="headerlink" title="复制 实例"></a>复制 实例</h5><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询的是 SomeModel 里面所有的字段 即 select *</span><br><span class="line">query &#x3D; session.query(SomeModel)</span><br><span class="line"># 查询的是 SomeModel 里面部分的字段 即 select acol, bcol</span><br><span class="line">query &#x3D; session.query(SomeModel.acol,SomeModel.bcol)</span><br><span class="line"># 即 select acol , bcol</span><br><span class="line"># alias</span><br><span class="line">user_alias &#x3D; aliased(User, name&#x3D;&#39;user_alias&#39;)</span><br><span class="line">for row in session.query(user_alias, user_alias.name).all():</span><br><span class="line">    # 即相当于 select name as name_label</span><br><span class="line">    print(row.user_alias)</span><br><span class="line"></span><br><span class="line"># limit 和 offset</span><br><span class="line">for u in session.query(User).order_by(User.id)[1:3]:</span><br><span class="line">    print(u)</span><br><span class="line"></span><br><span class="line"># distinct</span><br><span class="line">session.query(model.Name).distinct(model.Name.value).order_by(model.Name.value)</span><br><span class="line"># order_by</span><br><span class="line">User.query.order_by(User.popularity.desc(),User.date_created.desc()).limit(10).all()</span><br></pre></td></tr></table></figure>

<h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><p>单个 object 更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blog.title &#x3D; &quot;大宝天天见&quot;</span><br><span class="line">session.add(blog)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<p>批量更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.query.filter(Blog.content.like(&quot;% 敏感词 %&quot;)).update(&#123;</span><br><span class="line">    Blog.content: &quot;依照相关 XX 无法查看&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>一对多的更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">append</span><br></pre></td></tr></table></figure>

<h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><p>query.delete()</p>
<h4 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h4><p><a href="https://stackoverflow.com/questions/6044309/sqlalchemy-how-to-join-several-tables-by-one-query">https://stackoverflow.com/questions/6044309/sqlalchemy-how-to-join-several-tables-by-one-query</a></p>
<h5 id="两表-InnerJoin"><a href="#两表-InnerJoin" class="headerlink" title="两表 InnerJoin"></a>两表 InnerJoin</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> u, a <span class="keyword">in</span> session.query(User, Address).\</span><br><span class="line">                    <span class="built_in">filter</span>(User.<span class="built_in">id</span>==Address.user_id).\</span><br><span class="line">                    <span class="built_in">filter</span>(Address.email_address==<span class="string">&#x27;jack@google.com&#x27;</span>).\</span><br><span class="line">                    <span class="built_in">all</span>():</span><br><span class="line">    print(u)</span><br><span class="line">    print(a)</span><br><span class="line"><span class="comment"># &lt;User(name=&#x27;jack&#x27;, fullname=&#x27;Jack Bean&#x27;, password=&#x27;gjffdd&#x27;)&gt;</span></span><br><span class="line"><span class="comment"># &lt;Address(email_address=&#x27;jack@google.com&#x27;)&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="多表-InnerJoin-LeftJoin"><a href="#多表-InnerJoin-LeftJoin" class="headerlink" title="多表 InnerJoin + LeftJoin"></a>多表 InnerJoin + LeftJoin</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query.outerjoin(User.addresses)   # LEFT OUTER JOIN</span><br></pre></td></tr></table></figure>

<h4 id="聚集查询"><a href="#聚集查询" class="headerlink" title="聚集查询"></a>聚集查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.query(User).filter(User.name.like(&#39;%ed&#39;)).count()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sqlalchemy import func</span><br><span class="line">session.query(Table.column, func.count(Table.column)).group_by(Table.column).all()</span><br><span class="line"></span><br><span class="line">self.session.query(func.count(Table.column1),Table.column1, Table.column2).group_by(Table.column1, Table.column2).all()</span><br><span class="line"></span><br><span class="line">from sqlalchemy.sql import func</span><br><span class="line">session.query(func.avg(Rating.field2).label(&#39;average&#39;)).filter(Rating.url&#x3D;&#x3D;url_string.netloc)</span><br></pre></td></tr></table></figure>

<h4 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h4><p>Query 对象，下文中，我会聊到这个 Query 对象。这里先跳过。</p>
<h3 id="2-2-原生查询"><a href="#2-2-原生查询" class="headerlink" title="2.2 原生查询"></a>2.2 原生查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sqlalchemy import text</span><br><span class="line"></span><br><span class="line">sql &#x3D; text(&#39;select name from penguins&#39;)</span><br><span class="line">result &#x3D; db.engine.execute(sql)</span><br><span class="line">names &#x3D; []</span><br><span class="line">for row in result:</span><br><span class="line">    names.append(row[0])</span><br><span class="line"></span><br><span class="line">print names</span><br><span class="line"></span><br><span class="line">from collections import namedtuple</span><br><span class="line"></span><br><span class="line">Record &#x3D; namedtuple(&#39;Record&#39;, result.keys())</span><br><span class="line">records &#x3D; [Record(*r) for r in result.fetchall()]</span><br><span class="line">for r in records:</span><br><span class="line">    print(r)</span><br><span class="line"></span><br><span class="line">from sqlalchemy.sql import text</span><br><span class="line"></span><br><span class="line">connection &#x3D; engine.connect()</span><br><span class="line"></span><br><span class="line"># recommended</span><br><span class="line">cmd &#x3D; &#39;select * from Employees where EmployeeGroup &#x3D;&#x3D; :group&#39;</span><br><span class="line">employeeGroup &#x3D; &#39;Staff&#39;</span><br><span class="line">employees &#x3D; connection.execute(text(cmd), group &#x3D; employeeGroup)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>get_or_create</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_or_create(session, model, defaults&#x3D;None, **kwargs):</span><br><span class="line">    instance &#x3D; session.query(model).filter_by(**kwargs).first()</span><br><span class="line">    if instance:</span><br><span class="line">        return instance, False</span><br><span class="line">    else:</span><br><span class="line">        params &#x3D; dict((k, v) for k, v in kwargs.iteritems() if not isinstance(v, ClauseElement))</span><br><span class="line">        params.update(defaults or &#123;&#125;)</span><br><span class="line">        instance &#x3D; model(**params)</span><br><span class="line">        session.add(instance)</span><br><span class="line">        return instance, True</span><br></pre></td></tr></table></figure>

<h3 id="2-3-更新查询"><a href="#2-3-更新查询" class="headerlink" title="2.3 更新查询"></a>2.3 更新查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.query(Stuff).update(&#123;Stuff.foo: Stuff.foo + 1&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) for c in session.query(Stuff).all():</span><br><span class="line">       c.foo +&#x3D; 1</span><br><span class="line">   session.commit()</span><br><span class="line"></span><br><span class="line">2) session.query().\</span><br><span class="line">       update(&#123;&quot;foo&quot;: (Stuff.foo + 1)&#125;)</span><br><span class="line">   session.commit()</span><br><span class="line"></span><br><span class="line">3) conn &#x3D; engine.connect()</span><br><span class="line">   stmt &#x3D; Stuff.update().\</span><br><span class="line">       values(Stuff.foo &#x3D; (Stuff.foo + 1))</span><br><span class="line">   conn.execute(stmt)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) user.no_of_logins +&#x3D; 1</span><br><span class="line">   session.commit()</span><br><span class="line"></span><br><span class="line">2) session.query().\</span><br><span class="line">       filter(User.username &#x3D;&#x3D; form.username.data).\</span><br><span class="line">       update(&#123;&quot;no_of_logins&quot;: (User.no_of_logins +1)&#125;)</span><br><span class="line">   session.commit()</span><br><span class="line"></span><br><span class="line">3) conn &#x3D; engine.connect()</span><br><span class="line">   stmt &#x3D; User.update().\</span><br><span class="line">       values(no_of_logins&#x3D;(User.no_of_logins + 1)).\</span><br><span class="line">       where(User.username &#x3D;&#x3D; form.username.data)</span><br><span class="line">   conn.execute(stmt)</span><br><span class="line"></span><br><span class="line">4) setattr(user, &#39;no_of_logins&#39;, user.no_of_logins+1)</span><br><span class="line">   session.commit()</span><br></pre></td></tr></table></figure>

<h3 id="2-4-删除"><a href="#2-4-删除" class="headerlink" title="2.4 删除"></a>2.4 删除</h3><p><a href="https://stackoverflow.com/questions/5033547/sqlalchemy-cascade-delete">https://stackoverflow.com/questions/5033547/sqlalchemy-cascade-delete</a></p>
<h4 id="OnDelete"><a href="#OnDelete" class="headerlink" title="OnDelete"></a>OnDelete</h4><p>ondelete=’CASCADE’))</p>
<h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><p>models.User.query.delete()</p>
<h3 id="如何从-Object-到一个-ORM"><a href="#如何从-Object-到一个-ORM" class="headerlink" title="如何从 Object 到一个 ORM"></a>如何从 Object 到一个 ORM</h3><p>如何追踪 Object 的变化？</p>
<h2 id="0x03-SQLAlchemy-的高级特性"><a href="#0x03-SQLAlchemy-的高级特性" class="headerlink" title="0x03 SQLAlchemy 的高级特性"></a>0x03 SQLAlchemy 的高级特性</h2><h3 id="表继承"><a href="#表继承" class="headerlink" title="表继承"></a>表继承</h3><p><a href="https://stackoverflow.com/questions/1337095/sqlalchemy-inheritance">https://stackoverflow.com/questions/1337095/sqlalchemy-inheritance</a></p>
<h3 id="啥玩意"><a href="#啥玩意" class="headerlink" title="啥玩意"></a>啥玩意</h3><p>Flush 和 commit</p>
<p><a href="https://stackoverflow.com/questions/4201455/sqlalchemy-whats-the-difference-between-flush-and-commit">https://stackoverflow.com/questions/4201455/sqlalchemy-whats-the-difference-between-flush-and-commit</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; Foo(bar&#x3D;1)</span><br><span class="line">print x.id</span><br><span class="line"># None</span><br><span class="line">session.add(x)</span><br><span class="line">session.flush()</span><br><span class="line"># BEGIN</span><br><span class="line"># INSERT INTO foo (bar) VALUES(1)</span><br><span class="line"># COMMIT</span><br><span class="line">print x.id</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qry &#x3D; DBSession.query(User).filter(</span><br><span class="line">        and_(User.birthday &lt;&#x3D; &#39;1988-01-17&#39;, User.birthday &gt;&#x3D; &#39;1985-01-17&#39;))</span><br></pre></td></tr></table></figure>

<h2 id="0x04-SQLAlchemy-的基础特性-Under-The-Hood"><a href="#0x04-SQLAlchemy-的基础特性-Under-The-Hood" class="headerlink" title="0x04 SQLAlchemy 的基础特性 Under The Hood"></a>0x04 SQLAlchemy 的基础特性 Under The Hood</h2><h3 id="Loading-策略"><a href="#Loading-策略" class="headerlink" title="Loading 策略"></a>Loading 策略</h3><h4 id="Lazy-Loading"><a href="#Lazy-Loading" class="headerlink" title="Lazy Loading"></a>Lazy Loading</h4><h4 id="Eager-Loading"><a href="#Eager-Loading" class="headerlink" title="Eager Loading"></a>Eager Loading</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from sqlalchemy.dialects import postgresql</span><br><span class="line">&gt;&gt;&gt; print str(q.statement.compile(dialect&#x3D;postgresql.dialect()))</span><br><span class="line">Where q is defined as:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0x05-SQLAlchemy-的高级特性-Under-The-Hood"><a href="#0x05-SQLAlchemy-的高级特性-Under-The-Hood" class="headerlink" title="0x05 SQLAlchemy 的高级特性 Under The Hood"></a>0x05 SQLAlchemy 的高级特性 Under The Hood</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p><a href="https://stackoverflow.com/questions/6297404/multi-threaded-use-of-sqlalchemy">https://stackoverflow.com/questions/6297404/multi-threaded-use-of-sqlalchemy</a><br><a href="https://stackoverflow.com/questions/9619789/sqlalchemy-proper-session-handling-in-multi-thread-applications">https://stackoverflow.com/questions/9619789/sqlalchemy-proper-session-handling-in-multi-thread-applications</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;34322471&#x2F;sqlalchemy-engine-connection-and-session-difference</span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;11769366&#x2F;why-is-sqlalchemy-insert-with-sqlite-25-times-slower-than-using-sqlite3-directly</span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;12223335&#x2F;sqlalchemy-creating-vs-reusing-a-session</span><br><span class="line">session 是个容器</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;18199053&#x2F;example-of-what-sqlalchemy-can-do-and-django-orm-cannot</span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;7389759&#x2F;memory-efficient-built-in-sqlalchemy-iterator-generator</span><br><span class="line"></span><br><span class="line"># 日志</span><br><span class="line">import logging</span><br><span class="line">logging.basicConfig()</span><br><span class="line">logging.getLogger(&#39;sqlalchemy.engine&#39;).setLevel(logging.INFO)</span><br></pre></td></tr></table></figure>

<h2 id="0x06-DEBUG-和-Profile-技巧"><a href="#0x06-DEBUG-和-Profile-技巧" class="headerlink" title="0x06 DEBUG 和 Profile 技巧"></a>0x06 DEBUG 和 Profile 技巧</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS &#x3D; False</span><br></pre></td></tr></table></figure>

<h3 id="6-1-查看技巧"><a href="#6-1-查看技巧" class="headerlink" title="6.1 查看技巧"></a>6.1 查看技巧</h3><p>dict(u)<br>u.<strong>dict</strong></p>
<p><a href="https://stackoverflow.com/questions/1171166/how-can-i-profile-a-sqlalchemy-powered-application">https://stackoverflow.com/questions/1171166/how-can-i-profile-a-sqlalchemy-powered-application</a></p>
<p>如果用上 Flask+SQLAlchemy 一般也要带上，Flask-Migration 与 Flask-SQLAlchemy, 这两个库也是对 Alembic 和 SQLAlchemy 的浅封装。</p>
<p>那么，对于这个 ORM 库还有那些通用性的知识需要了解？</p>
<p>嗯，是时候了解本质了。</p>
<p><a href="http://derrickgilland.com/posts/demystifying-flask-sqlalchemy/">http://derrickgilland.com/posts/demystifying-flask-sqlalchemy/</a></p>
<h2 id="0x07-ORM-的本质"><a href="#0x07-ORM-的本质" class="headerlink" title="0x07 ORM 的本质"></a>0x07 ORM 的本质</h2><p>ORM 的本质是 Data Access Layer 上的一层封装。如果你写原生 SQL, 即手写 DAL 的话，开发效率可能会大打折扣。</p>
<h3 id="ORM-的两种类型-Active-Record-与-Data-Mappers"><a href="#ORM-的两种类型-Active-Record-与-Data-Mappers" class="headerlink" title="ORM 的两种类型 Active Record 与 Data Mappers"></a>ORM 的两种类型 Active Record 与 Data Mappers</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ActiveRecord 风格写起来类似于 Django ORM, 大致是这样的</span><br><span class="line"></span><br><span class="line">## AR 的模型定义</span><br><span class="line"></span><br><span class="line">class User(db.models):</span><br><span class="line">    name &#x3D; db.StringField(verbose&#x3D;&quot;xyz&quot;)</span><br><span class="line"></span><br><span class="line">## AR 的新增</span><br><span class="line">user &#x3D; User()</span><br><span class="line">user.name &#x3D; &quot;123456&quot;</span><br><span class="line">user.save() ## 正好对应数据库中的一行</span><br><span class="line"></span><br><span class="line">## AR 的查询</span><br><span class="line"></span><br><span class="line">users &#x3D; User.objects.filter(Q(name&#x3D;&quot;黄老板的小姨子&quot;)).all()</span><br><span class="line"></span><br><span class="line"># Data Mappers 风格写起来类似于 SQLAlchemy ORM, 大致是这样的</span><br><span class="line"></span><br><span class="line">## SA 的定义</span><br><span class="line"></span><br><span class="line">from sqlalchemy.ext.declarative import declarative_base</span><br><span class="line"></span><br><span class="line">Base &#x3D; declarative_base()</span><br><span class="line"></span><br><span class="line">from sqlalchemy import Column, Integer, String</span><br><span class="line">class User(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;users&#39;</span><br><span class="line"></span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String)</span><br><span class="line"></span><br><span class="line">Base.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line">## SA 的新增</span><br><span class="line"></span><br><span class="line">user &#x3D; User()</span><br><span class="line">user.name &#x3D; &quot;123456&quot;</span><br><span class="line">session.add(user)</span><br><span class="line">sessoon.commit() ## 嗯？其实也是对应数据库中的一行。</span><br><span class="line"></span><br><span class="line">## SA 的查询</span><br><span class="line"></span><br><span class="line">session.query(User).filter(User.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>问题来了，这两者到底是什么，看起来似乎相差不大。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person:</span><br><span class="line"></span><br><span class="line">    lastname</span><br><span class="line">    firstname</span><br><span class="line">    children</span><br><span class="line"></span><br><span class="line">    # 数据操作</span><br><span class="line">    def findone(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def insert(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def update(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def delete(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # 业务逻辑</span><br><span class="line">    def getChildrenTax(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>lastName firstName numberOfDependents</p>
<p>insert update delete</p>
<p>getExemption isFlaggedForAudit getTaxableEarnings</p>
<p>An object that wraps a row in a database table or view, encapsulates the database access, and adds domain logic on that data.</p>
<p>The essence of an Active Record is a Domain Model (116) in which the classes match very closely the record structure of an underlying database. Each Active Record is responsible for saving and loading to the database and also for any domain logic that acts on the data. This may be all the domain logic in the application, or you may ﬁnd that some domain logic is held in Transaction Scripts (110) with common and data-oriented code in the Active Record.</p>
<p>The data structure of the Active Record should exactly match that of the database: one ﬁeld in the class for each column in the table. Type the ﬁelds the way the SQL interface gives you the data—don’t do any conversion at this stage. You may consider Foreign Key Mapping (236), but you may also leave the foreign keys as they are. You can use views or tables with Active Record, although updates through views are obviously harder. Views are particularly useful for reporting purposes.</p>
<p>objects correspond directly to the database tables: an isomorphic schema. If your business logic is complex, you’ll soon want to use your object’s direct relationships, collections, inheritance, and so forth. These don’t map easily onto Active Record, and adding them piecemeal gets very messy. That’s what will lead you to use Data Mapper (165) instead.</p>
<p>Another argument against Active Record is the fact that it couples the object design to the database design. This makes it more difﬁcult to refactor either design as a project goes forward.</p>
<p>Active Record is a good pattern to consider if you’re using Transaction Script (110) and are beginning to feel the pain of code duplication and the difﬁculty in updating scripts and tables that Transaction Script (110) often brings. In this case you can gradually start creating Active Records and then slowly refactor behavior into them. It often helps to wrap the tables as a Gateway (466) ﬁrst, and then start moving behavior so that the tables evolve to a Active Record.</p>
<p>其实为什么不选择设计成 ActiveRecord , 而是选择设计成 Data Mapper, 其实就可以回答这个问题：</p>
<blockquote>
<p>虽然要设计成 ORM, 考虑到数量和性能因素，SQL 数据库（多个表）并不应该是表现像 Object 集合那样（换言之，也就是 AR 表现的像 Object 的集合一样）。<br>同时，出于更好的抽象，object 集合也应该表现的像表以及行</p>
</blockquote>
<p>于是我们可以得出结论，可以在 SQLAlchemy 上面进行一定的封装，使得最后用起来非常的 Django ORM like，其实 SQLAlchemy 稍加定制还是可以很 Django ORM-like 的。</p>
<p>:TODO: 有机会看看那本书再修改一下本小节</p>
<p>这不，果然有人就这么搞了 <a href="https://github.com/absent1706/sqlalchemy-mixins">https://github.com/absent1706/sqlalchemy-mixins</a></p>
<h2 id="0x09-踩坑集"><a href="#0x09-踩坑集" class="headerlink" title="0x09 踩坑集"></a>0x09 踩坑集</h2><h3 id="关系持久化坑"><a href="#关系持久化坑" class="headerlink" title="关系持久化坑"></a>关系持久化坑</h3><ol>
<li>Rows that point to themselves : 比如一个 insert 一个推荐自己的用户，则需要保存 id / ref_id , 但是在这个 user 插入之前，并不存在 id. 所以，一般情况下是先 insert, 然后保存 ref_id</li>
<li>Mutually Dependent Rows</li>
</ol>
<h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><p>session.query(MyClass).filter(“foo={}”.format(getArgs[‘val’]))</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><p><a href="https://www.eversql.com/django-vs-sqlalchemy-which-python-orm-is-better/">https://www.eversql.com/django-vs-sqlalchemy-which-python-orm-is-better/</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/2546207/does-sqlalchemy-have-an-equivalent-of-djangos-get-or-create">https://stackoverflow.com/questions/2546207/does-sqlalchemy-have-an-equivalent-of-djangos-get-or-create</a></p>
</li>
<li><p>除了文档本身，作者在 Stack Overflow 上的回答都是非常值得阅读的。<a href="https://stackoverflow.com/users/34549/zzzeek">https://stackoverflow.com/users/34549/zzzeek</a></p>
</li>
<li><p>Patterns of Enterprise Application Architecture - Martin Fowler</p>
</li>
<li><p><a href="http://aosabook.org/en/sqlalchemy.html">http://aosabook.org/en/sqlalchemy.html</a></p>
<p>  <a href="http://techspot.zzzeek.org/">http://techspot.zzzeek.org/</a></p>
</li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-03-09</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>一文解决你的 Python ORM 选择困难症</title>
    <url>/2019/04/12/Mapping/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Python 圈内三大 ORM SQLAlchemy VS Django ORM VS Peewee</p>
<ol>
<li>SQLAlchemy 复杂程度最高，同时，这也意味着 SQLAlchemy 可以做更多的事情。使用 DataMapper 方式实现</li>
<li>Django ORM 个人最喜欢，使用 ActiveRecord 实现 如果不是因为现在 Flask 项目已经是用了 SQLAlchemy , 否则的话我甚至会考虑将 Django ORM 配置到 Flask 项目中。当然，也有蛋疼的 SqlAlchemy 使用者已经移植给 django 配置了 SQLAlchemy 的库。</li>
<li>Peewee 没用过，不好评论。以后有机会试试。</li>
</ol>
<h2 id="0x01-如何访问数据库"><a href="#0x01-如何访问数据库" class="headerlink" title="0x01 如何访问数据库"></a>0x01 如何访问数据库</h2><p>那，既然已经可以访问数据库，本着『如无必要，勿增实体』的原则，为什么要不辞劳苦的用个库呢？</p>
<h2 id="0x02-数据库抽象的两种理论"><a href="#0x02-数据库抽象的两种理论" class="headerlink" title="0x02 数据库抽象的两种理论"></a>0x02 数据库抽象的两种理论</h2><h3 id="理论一：Active-Record"><a href="#理论一：Active-Record" class="headerlink" title="理论一：Active Record"></a>理论一：Active Record</h3><h3 id="理论二：Data-Mapper"><a href="#理论二：Data-Mapper" class="headerlink" title="理论二：Data Mapper"></a>理论二：Data Mapper</h3><h2 id="0x03-数据库抽象的两种实现"><a href="#0x03-数据库抽象的两种实现" class="headerlink" title="0x03 数据库抽象的两种实现"></a>0x03 数据库抽象的两种实现</h2><h3 id="实现一：Django-ORM"><a href="#实现一：Django-ORM" class="headerlink" title="实现一：Django ORM"></a>实现一：Django ORM</h3><h3 id="实现二：Sqlalchemy"><a href="#实现二：Sqlalchemy" class="headerlink" title="实现二：Sqlalchemy"></a>实现二：Sqlalchemy</h3><h2 id="0x04-工具的强弱"><a href="#0x04-工具的强弱" class="headerlink" title="0x04 工具的强弱"></a>0x04 工具的强弱</h2><p><a href="https://www.thoughtfulcode.com/orm-active-record-vs-data-mapper/">https://www.thoughtfulcode.com/orm-active-record-vs-data-mapper/</a></p>
<h3 id="2-0-SQLAlchemy-VS-DjangoORM"><a href="#2-0-SQLAlchemy-VS-DjangoORM" class="headerlink" title="2.0 SQLAlchemy VS DjangoORM"></a>2.0 SQLAlchemy VS DjangoORM</h3><p>ORM 通常有 DataMapper 实现和 ActiveRecord 实现两种。</p>
<p>依照我的经验，ActiveRecord 使用起来的更接近对象 (Object) 的操作，DataMapper 使用起来更接近 (Table) 的操作。</p>
<blockquote>
<p>SQLAlchemy 是 DataMapper 模式的实现，在该模式下，session 会暴露出来，即 Model 与 session 并不耦合。</p>
</blockquote>
<blockquote>
<p>DjangoORM 是 ActivityRecord 模式的一种实现，在该模式下，session 并不暴露出来，即 Model 与 session 耦合。</p>
</blockquote>
<p>使用 Django ORM 的时候，往往是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; Blog(**data)</span><br><span class="line">b.save()</span><br></pre></td></tr></table></figure>

<p>使用 SQLAlchemy 的时候，往往是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; Blog(**data)</span><br><span class="line">session.add(b)</span><br><span class="line">session.session(b)</span><br></pre></td></tr></table></figure>

<p>由于 Django 帮你屏蔽了 session 的操作。</p>
<p>在通常情况下，</p>
<ol>
<li>DjangoORM 使用起来更加接近 Object 的操作。</li>
<li>SQLAlchemy 使用起来更加接近 Table 的操作。</li>
</ol>
<p>举个例子，</p>
<p>一对多，Father 添加两个小孩（其中一个小孩是已经存在的）</p>
<p>在 DjangoORM 里面， 这里更像是一个 Set 的 add 操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">father.children.add(new_child,exsit_child)</span><br></pre></td></tr></table></figure>

<p>在 SQLAlchemy 里面，这里更像是一个 table 的 insert 操作。（麻蛋，你要说是一个 list 的 append 操作也行）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for child in (new_child,exsit_child):</span><br><span class="line">    if child in father.children:</span><br><span class="line">        father.children.append(child)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>写 SQLAlchemy 更接近操作放在数据库里面的数据记录，而 DjangoORM 更接近操作一批放在数据库里面的对象。</p>
</blockquote>
<p>由于 session 的使用姿势不同，所以往往会有很多使用上面的区别。</p>
<p>至于孰优孰劣，难以评判。</p>
<ul>
<li><p>技术老大 (Flask 和 React 大神）倾向于使用 SQLAlchemy, 他认为</p>
<ul>
<li>对于一个技术『知其然，知其所以然』</li>
<li>对于 ORM<ul>
<li>操作数据库，操作最好要落实在成 SQL</li>
<li>如果有可能的话，每一个 SQL 语句都要经过推敲，而且写这个 SQL 和 ORM 过程要反复练习</li>
</ul>
</li>
<li>对于 Migration 机制<ul>
<li>Alembic 这个迁移工具是为了省事用的，甚至在某些情况下没必要用。完全可以写 SQL 代替</li>
</ul>
</li>
</ul>
</li>
<li><p>我 (Django 和 Vue 弱鸡）倾向于使用 DjangoORM, 我认为</p>
<ul>
<li>对于一个技术『先知其大致然，需要深入的时候知其所以然』</li>
<li>对于 ORM<ul>
<li>操作数据，最好抽象为对对象的操作。</li>
<li>测试到位的情况下，快糙狠先出东西。到需要优化的时候该怎么 Profile 怎么 Profile</li>
</ul>
</li>
<li>对于 Migration 机制<ul>
<li>用起来啊，能操作对象为什么还要强行到数据库操作？</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Active Record, properly defined, is a design pattern where an object is represented as a record on a table in a relational database.</span><br></pre></td></tr></table></figure>

<h3 id="2-1-模型定义"><a href="#2-1-模型定义" class="headerlink" title="2.1 模型定义"></a>2.1 模型定义</h3><p>先看一组模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line">Base = declarative_base() <span class="comment"># 模型基类</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>) <span class="comment"># 主键</span></span><br><span class="line">    name = Column(String)</span><br><span class="line">    fullname = Column(String)</span><br><span class="line">    password = Column(String)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;&lt;User(name=&#x27;%s&#x27;, fullname=&#x27;%s&#x27;, password=&#x27;%s&#x27;)&gt;&quot;</span> % (</span><br><span class="line">                            self.name, self.fullname, self.password)</span><br><span class="line">Base.metadata.create_all(engine)</span><br></pre></td></tr></table></figure>

<p>可以看出，包含如下的部分：</p>
<ol>
<li>Model 与 Model 内部的 Meta</li>
<li>Field 与 Field 内部的 Options</li>
<li>Model 与 Model 之间的关系</li>
<li>其他，比如索引</li>
</ol>
<h4 id="Models-与-Meta"><a href="#Models-与-Meta" class="headerlink" title="Models 与 Meta"></a>Models 与 Meta</h4><p><a href="https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/sql/schema.py#L3685">https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/sql/schema.py#L3685</a></p>
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><h5 id="One-To-Many"><a href="#One-To-Many" class="headerlink" title="One To Many"></a>One To Many</h5><p>母亲有若干个孩子，外键在孩子上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Parent(Base):</span><br><span class="line">    #...</span><br><span class="line">    children &#x3D; relationship(&quot;Child&quot;, backref&#x3D;&quot;parent&quot;)</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    #...</span><br><span class="line">    parent_id &#x3D; Column(Integer, ForeignKey(&#39;parent.id&#39;))</span><br></pre></td></tr></table></figure>

<h5 id="Many-To-One"><a href="#Many-To-One" class="headerlink" title="Many To One"></a>Many To One</h5><p>多个母亲共享一个孩子，外键在母亲上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Parent(Base):</span><br><span class="line">    child_id &#x3D; Column(Integer, ForeignKey(&#39;child.id&#39;))</span><br><span class="line">    child &#x3D; relationship(&quot;Child&quot;)</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    # ...</span><br></pre></td></tr></table></figure>

<h5 id="One-To-One"><a href="#One-To-One" class="headerlink" title="One To One"></a>One To One</h5><p>One to One 是 One to Many 或者是 Many to One 的简化版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Many To One</span><br><span class="line">class Parent(Base):</span><br><span class="line">    # ...</span><br><span class="line">    child_id &#x3D; Column(Integer, ForeignKey(&#39;child.id&#39;))</span><br><span class="line">    child &#x3D; relationship(&quot;Child&quot;, backref&#x3D;backref(&quot;parent&quot;, uselist&#x3D;False))</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    # ...</span><br><span class="line"></span><br><span class="line"># One To Many 改 One To One</span><br><span class="line">class Parent(Base):</span><br><span class="line">    # ...</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    # ...</span><br><span class="line">    parent_id &#x3D; Column(Integer, ForeignKey(&#39;parent.id&#39;))</span><br><span class="line">    parent &#x3D; relationship(&quot;Parent&quot;, backref&#x3D;backref(&quot;child&quot;, uselist&#x3D;False))</span><br></pre></td></tr></table></figure>

<h5 id="Many-To-Many"><a href="#Many-To-Many" class="headerlink" title="Many To Many"></a>Many To Many</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">association_table &#x3D; Table(&#39;association&#39;, Base.metadata,</span><br><span class="line">    Column(&#39;left_id&#39;, Integer, ForeignKey(&#39;left.id&#39;)),</span><br><span class="line">    Column(&#39;right_id&#39;, Integer, ForeignKey(&#39;right.id&#39;))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">class Parent(Base):</span><br><span class="line">    # ...</span><br><span class="line">    children &#x3D; relationship(&quot;Child&quot;,</span><br><span class="line">                    secondary&#x3D;association_table,</span><br><span class="line">                    backref&#x3D;&quot;parents&quot;)</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    # ...</span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<p>执行删除 mapping 表的时候尽量这样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myparent.children.remove(somechild)</span><br></pre></td></tr></table></figure>

<p>当你想干掉 somechild 的时候，会执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.delete(somechild)</span><br></pre></td></tr></table></figure>

<ol>
<li>假如 Child 没有 ref Parent 的话，Secondary Table 无删除，则无法删除。</li>
<li>假如 ref 了的话，则删除 secondary 里面的记录。</li>
<li>TODO</li>
</ol>
<h5 id="邻接列表关系"><a href="#邻接列表关系" class="headerlink" title="邻接列表关系"></a>邻接列表关系</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Node(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;node&#39;</span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    parent_id &#x3D; Column(Integer, ForeignKey(&#39;node.id&#39;))</span><br><span class="line">    data &#x3D; Column(String(50))</span><br><span class="line">    children &#x3D; relationship(&quot;Node&quot;,</span><br><span class="line">                backref&#x3D;backref(&#39;parent&#39;, remote_side&#x3D;[id])</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>

<h5 id="relationship-详解"><a href="#relationship-详解" class="headerlink" title="relationship 详解"></a>relationship 详解</h5><h3 id="2-1-Query"><a href="#2-1-Query" class="headerlink" title="2.1 Query"></a>2.1 Query</h3><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c1 &#x3D; Child(name&#x3D;&quot;苏轼&quot;)</span><br><span class="line">session.add(c1)</span><br><span class="line">session.flush()</span><br><span class="line">p &#x3D; Parent(name&#x3D;&quot;苏辙&quot;)</span><br><span class="line">p.best_child &#x3D; c1</span><br><span class="line">for c in [c1,c2,c3,c4]:</span><br><span class="line">    p.children.append(c)</span><br><span class="line">session.add(c1)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<h4 id="Retrieve"><a href="#Retrieve" class="headerlink" title="Retrieve"></a>Retrieve</h4><p>过滤</p>
<p>filter(**kwargs)<br>filter(Singer.name == “周杰伦”)<br>filter(Singer.name =! “周杰棍”)</p>
<h5 id="跨关系（跨表）查询"><a href="#跨关系（跨表）查询" class="headerlink" title="跨关系（跨表）查询"></a>跨关系（跨表）查询</h5><p>session.query(Entry).join(Blog,Blog.entry_id == Entry.id).filter(Blog.name = “SqlAlchemy CheatSheet”)</p>
<h5 id="Limit-Offset-分页"><a href="#Limit-Offset-分页" class="headerlink" title="Limit / Offset / 分页"></a>Limit / Offset / 分页</h5><ul>
<li>limit()</li>
<li>offset()</li>
</ul>
<h5 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query &#x3D; session.query(Order) # query &#x3D; session.query(Order)</span><br><span class="line">query &#x3D; query.filter(Order.name.like(f&quot;%name%&quot;))</span><br></pre></td></tr></table></figure>

<h5 id="二进制表达式"><a href="#二进制表达式" class="headerlink" title="二进制表达式"></a>二进制表达式</h5><p>我们先 type 一下表达式，找到 eq 的类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(model.column_name == <span class="string">&#x27;asdf&#x27;</span>) → sqlalchemy.sql.elements.BinaryExpression</span><br></pre></td></tr></table></figure>

<p>是一个二进制表达式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等于</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name == <span class="string">&#x27;ed&#x27;</span>)</span><br><span class="line"><span class="comment"># 不等于</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name != <span class="string">&#x27;ed&#x27;</span>)</span><br><span class="line"><span class="comment"># Like（有的数据库不区分大小写）</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.like(<span class="string">&#x27;%ed%&#x27;</span>))</span><br><span class="line"><span class="comment"># ILIKE (case-insensitive LIKE)</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.ilike(<span class="string">&#x27;%ed%&#x27;</span>))</span><br><span class="line"><span class="comment"># IN</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.in_([<span class="string">&#x27;ed&#x27;</span>, <span class="string">&#x27;wendy&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]))</span><br><span class="line"><span class="comment"># Not in</span></span><br><span class="line">query.<span class="built_in">filter</span>(~User.name.in_([<span class="string">&#x27;ed&#x27;</span>, <span class="string">&#x27;wendy&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]))</span><br><span class="line"><span class="comment"># IS NULL</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name == <span class="literal">None</span>)</span><br><span class="line"><span class="comment">## 如果你用了 pep8/linter 的话</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.is_(<span class="literal">None</span>))</span><br><span class="line"><span class="comment"># IS NOT NULL:</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name != <span class="literal">None</span>)</span><br><span class="line"><span class="comment">## 如果你用了 pep8/linter 的话</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.isnot(<span class="literal">None</span>))</span><br><span class="line"><span class="comment"># AND</span></span><br><span class="line"><span class="comment">## use and_()</span></span><br><span class="line">query.<span class="built_in">filter</span>(and_(User.name == <span class="string">&#x27;ed&#x27;</span>, User.fullname == <span class="string">&#x27;Ed Jones&#x27;</span>))</span><br><span class="line"><span class="comment">## or send multiple expressions to .filter()</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name == <span class="string">&#x27;ed&#x27;</span>, User.fullname == <span class="string">&#x27;Ed Jones&#x27;</span>)</span><br><span class="line"><span class="comment">## or chain multiple filter()/filter_by() calls</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name == <span class="string">&#x27;ed&#x27;</span>).<span class="built_in">filter</span>(User.fullname == <span class="string">&#x27;Ed Jones&#x27;</span>)</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">query.<span class="built_in">filter</span>(or_(User.name == <span class="string">&#x27;ed&#x27;</span>, User.name == <span class="string">&#x27;wendy&#x27;</span>))</span><br><span class="line"><span class="comment"># MATCH</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.match(<span class="string">&#x27;wendy&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h5 id="执行查询"><a href="#执行查询" class="headerlink" title="执行查询"></a>执行查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all()</span><br><span class="line">first()</span><br><span class="line">one()</span><br><span class="line">one_or_none()</span><br><span class="line">scalar()</span><br></pre></td></tr></table></figure>

<p>YourModel.query.get((pk1, pk2))</p>
<h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><blockquote>
<p>同一个 Session 下面，取到的某一条数据对应的 objects 应该是一样的？</p>
</blockquote>
<h5 id="复制-实例"><a href="#复制-实例" class="headerlink" title="复制 实例"></a>复制 实例</h5><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询的是 SomeModel 里面所有的字段 即 select *</span><br><span class="line">query &#x3D; session.query(SomeModel)</span><br><span class="line"># 查询的是 SomeModel 里面部分的字段 即 select acol, bcol</span><br><span class="line">query &#x3D; session.query(SomeModel.acol,SomeModel.bcol)</span><br><span class="line"># 即 select acol , bcol</span><br><span class="line"># alias</span><br><span class="line">user_alias &#x3D; aliased(User, name&#x3D;&#39;user_alias&#39;)</span><br><span class="line">for row in session.query(user_alias, user_alias.name).all():</span><br><span class="line">    # 即相当于 select name as name_label</span><br><span class="line">    print(row.user_alias)</span><br><span class="line"></span><br><span class="line"># limit 和 offset</span><br><span class="line">for u in session.query(User).order_by(User.id)[1:3]:</span><br><span class="line">    print(u)</span><br><span class="line"></span><br><span class="line"># distinct</span><br><span class="line">session.query(model.Name).distinct(model.Name.value).order_by(model.Name.value)</span><br><span class="line"># order_by</span><br><span class="line">User.query.order_by(User.popularity.desc(),User.date_created.desc()).limit(10).all()</span><br></pre></td></tr></table></figure>

<h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><p>单个 object 更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blog.title &#x3D; &quot;大宝天天见&quot;</span><br><span class="line">session.add(blog)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<p>批量更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.query.filter(Blog.content.like(&quot;% 敏感词 %&quot;)).update(&#123;</span><br><span class="line">    Blog.content: &quot;依照相关 XX 无法查看&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>一对多的更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">append</span><br></pre></td></tr></table></figure>

<h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><p>query.delete()</p>
<h4 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h4><p><a href="https://stackoverflow.com/questions/6044309/sqlalchemy-how-to-join-several-tables-by-one-query">https://stackoverflow.com/questions/6044309/sqlalchemy-how-to-join-several-tables-by-one-query</a></p>
<h5 id="两表-InnerJoin"><a href="#两表-InnerJoin" class="headerlink" title="两表 InnerJoin"></a>两表 InnerJoin</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> u, a <span class="keyword">in</span> session.query(User, Address).\</span><br><span class="line">                    <span class="built_in">filter</span>(User.<span class="built_in">id</span>==Address.user_id).\</span><br><span class="line">                    <span class="built_in">filter</span>(Address.email_address==<span class="string">&#x27;jack@google.com&#x27;</span>).\</span><br><span class="line">                    <span class="built_in">all</span>():</span><br><span class="line">    print(u)</span><br><span class="line">    print(a)</span><br><span class="line"><span class="comment"># &lt;User(name=&#x27;jack&#x27;, fullname=&#x27;Jack Bean&#x27;, password=&#x27;gjffdd&#x27;)&gt;</span></span><br><span class="line"><span class="comment"># &lt;Address(email_address=&#x27;jack@google.com&#x27;)&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="多表-InnerJoin-LeftJoin"><a href="#多表-InnerJoin-LeftJoin" class="headerlink" title="多表 InnerJoin + LeftJoin"></a>多表 InnerJoin + LeftJoin</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query.outerjoin(User.addresses)   # LEFT OUTER JOIN</span><br></pre></td></tr></table></figure>

<h4 id="聚集查询"><a href="#聚集查询" class="headerlink" title="聚集查询"></a>聚集查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.query(User).filter(User.name.like(&#39;%ed&#39;)).count()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sqlalchemy import func</span><br><span class="line">session.query(Table.column, func.count(Table.column)).group_by(Table.column).all()</span><br><span class="line"></span><br><span class="line">self.session.query(func.count(Table.column1),Table.column1, Table.column2).group_by(Table.column1, Table.column2).all()</span><br><span class="line"></span><br><span class="line">from sqlalchemy.sql import func</span><br><span class="line">session.query(func.avg(Rating.field2).label(&#39;average&#39;)).filter(Rating.url&#x3D;&#x3D;url_string.netloc)</span><br></pre></td></tr></table></figure>

<h4 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h4><p>Query 对象，下文中，我会聊到这个 Query 对象。这里先跳过。</p>
<h3 id="2-2-原生查询"><a href="#2-2-原生查询" class="headerlink" title="2.2 原生查询"></a>2.2 原生查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sqlalchemy import text</span><br><span class="line"></span><br><span class="line">sql &#x3D; text(&#39;select name from penguins&#39;)</span><br><span class="line">result &#x3D; db.engine.execute(sql)</span><br><span class="line">names &#x3D; []</span><br><span class="line">for row in result:</span><br><span class="line">    names.append(row[0])</span><br><span class="line"></span><br><span class="line">print names</span><br><span class="line"></span><br><span class="line">from collections import namedtuple</span><br><span class="line"></span><br><span class="line">Record &#x3D; namedtuple(&#39;Record&#39;, result.keys())</span><br><span class="line">records &#x3D; [Record(*r) for r in result.fetchall()]</span><br><span class="line">for r in records:</span><br><span class="line">    print(r)</span><br><span class="line"></span><br><span class="line">from sqlalchemy.sql import text</span><br><span class="line"></span><br><span class="line">connection &#x3D; engine.connect()</span><br><span class="line"></span><br><span class="line"># recommended</span><br><span class="line">cmd &#x3D; &#39;select * from Employees where EmployeeGroup &#x3D;&#x3D; :group&#39;</span><br><span class="line">employeeGroup &#x3D; &#39;Staff&#39;</span><br><span class="line">employees &#x3D; connection.execute(text(cmd), group &#x3D; employeeGroup)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>get_or_create</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_or_create(session, model, defaults&#x3D;None, **kwargs):</span><br><span class="line">    instance &#x3D; session.query(model).filter_by(**kwargs).first()</span><br><span class="line">    if instance:</span><br><span class="line">        return instance, False</span><br><span class="line">    else:</span><br><span class="line">        params &#x3D; dict((k, v) for k, v in kwargs.iteritems() if not isinstance(v, ClauseElement))</span><br><span class="line">        params.update(defaults or &#123;&#125;)</span><br><span class="line">        instance &#x3D; model(**params)</span><br><span class="line">        session.add(instance)</span><br><span class="line">        return instance, True</span><br></pre></td></tr></table></figure>

<h3 id="2-3-更新查询"><a href="#2-3-更新查询" class="headerlink" title="2.3 更新查询"></a>2.3 更新查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.query(Stuff).update(&#123;Stuff.foo: Stuff.foo + 1&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) for c in session.query(Stuff).all():</span><br><span class="line">       c.foo +&#x3D; 1</span><br><span class="line">   session.commit()</span><br><span class="line"></span><br><span class="line">2) session.query().\</span><br><span class="line">       update(&#123;&quot;foo&quot;: (Stuff.foo + 1)&#125;)</span><br><span class="line">   session.commit()</span><br><span class="line"></span><br><span class="line">3) conn &#x3D; engine.connect()</span><br><span class="line">   stmt &#x3D; Stuff.update().\</span><br><span class="line">       values(Stuff.foo &#x3D; (Stuff.foo + 1))</span><br><span class="line">   conn.execute(stmt)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) user.no_of_logins +&#x3D; 1</span><br><span class="line">   session.commit()</span><br><span class="line"></span><br><span class="line">2) session.query().\</span><br><span class="line">       filter(User.username &#x3D;&#x3D; form.username.data).\</span><br><span class="line">       update(&#123;&quot;no_of_logins&quot;: (User.no_of_logins +1)&#125;)</span><br><span class="line">   session.commit()</span><br><span class="line"></span><br><span class="line">3) conn &#x3D; engine.connect()</span><br><span class="line">   stmt &#x3D; User.update().\</span><br><span class="line">       values(no_of_logins&#x3D;(User.no_of_logins + 1)).\</span><br><span class="line">       where(User.username &#x3D;&#x3D; form.username.data)</span><br><span class="line">   conn.execute(stmt)</span><br><span class="line"></span><br><span class="line">4) setattr(user, &#39;no_of_logins&#39;, user.no_of_logins+1)</span><br><span class="line">   session.commit()</span><br></pre></td></tr></table></figure>

<h3 id="2-4-删除"><a href="#2-4-删除" class="headerlink" title="2.4 删除"></a>2.4 删除</h3><p><a href="https://stackoverflow.com/questions/5033547/sqlalchemy-cascade-delete">https://stackoverflow.com/questions/5033547/sqlalchemy-cascade-delete</a></p>
<h4 id="OnDelete"><a href="#OnDelete" class="headerlink" title="OnDelete"></a>OnDelete</h4><p>ondelete=’CASCADE’))</p>
<h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><p>models.User.query.delete()</p>
<h3 id="如何从-Object-到一个-ORM"><a href="#如何从-Object-到一个-ORM" class="headerlink" title="如何从 Object 到一个 ORM"></a>如何从 Object 到一个 ORM</h3><p>如何追踪 Object 的变化？</p>
<h2 id="0x03-SQLAlchemy-的高级特性"><a href="#0x03-SQLAlchemy-的高级特性" class="headerlink" title="0x03 SQLAlchemy 的高级特性"></a>0x03 SQLAlchemy 的高级特性</h2><h3 id="表继承"><a href="#表继承" class="headerlink" title="表继承"></a>表继承</h3><p><a href="https://stackoverflow.com/questions/1337095/sqlalchemy-inheritance">https://stackoverflow.com/questions/1337095/sqlalchemy-inheritance</a></p>
<h3 id="啥玩意"><a href="#啥玩意" class="headerlink" title="啥玩意"></a>啥玩意</h3><p>Flush 和 commit</p>
<p><a href="https://stackoverflow.com/questions/4201455/sqlalchemy-whats-the-difference-between-flush-and-commit">https://stackoverflow.com/questions/4201455/sqlalchemy-whats-the-difference-between-flush-and-commit</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; Foo(bar&#x3D;1)</span><br><span class="line">print x.id</span><br><span class="line"># None</span><br><span class="line">session.add(x)</span><br><span class="line">session.flush()</span><br><span class="line"># BEGIN</span><br><span class="line"># INSERT INTO foo (bar) VALUES(1)</span><br><span class="line"># COMMIT</span><br><span class="line">print x.id</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qry &#x3D; DBSession.query(User).filter(</span><br><span class="line">        and_(User.birthday &lt;&#x3D; &#39;1988-01-17&#39;, User.birthday &gt;&#x3D; &#39;1985-01-17&#39;))</span><br></pre></td></tr></table></figure>

<h2 id="0x04-SQLAlchemy-的基础特性-Under-The-Hood"><a href="#0x04-SQLAlchemy-的基础特性-Under-The-Hood" class="headerlink" title="0x04 SQLAlchemy 的基础特性 Under The Hood"></a>0x04 SQLAlchemy 的基础特性 Under The Hood</h2><h3 id="Loading-策略"><a href="#Loading-策略" class="headerlink" title="Loading 策略"></a>Loading 策略</h3><h4 id="Lazy-Loading"><a href="#Lazy-Loading" class="headerlink" title="Lazy Loading"></a>Lazy Loading</h4><h4 id="Eager-Loading"><a href="#Eager-Loading" class="headerlink" title="Eager Loading"></a>Eager Loading</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from sqlalchemy.dialects import postgresql</span><br><span class="line">&gt;&gt;&gt; print str(q.statement.compile(dialect&#x3D;postgresql.dialect()))</span><br><span class="line">Where q is defined as:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0x05-SQLAlchemy-的高级特性-Under-The-Hood"><a href="#0x05-SQLAlchemy-的高级特性-Under-The-Hood" class="headerlink" title="0x05 SQLAlchemy 的高级特性 Under The Hood"></a>0x05 SQLAlchemy 的高级特性 Under The Hood</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p><a href="https://stackoverflow.com/questions/6297404/multi-threaded-use-of-sqlalchemy">https://stackoverflow.com/questions/6297404/multi-threaded-use-of-sqlalchemy</a><br><a href="https://stackoverflow.com/questions/9619789/sqlalchemy-proper-session-handling-in-multi-thread-applications">https://stackoverflow.com/questions/9619789/sqlalchemy-proper-session-handling-in-multi-thread-applications</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;34322471&#x2F;sqlalchemy-engine-connection-and-session-difference</span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;11769366&#x2F;why-is-sqlalchemy-insert-with-sqlite-25-times-slower-than-using-sqlite3-directly</span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;12223335&#x2F;sqlalchemy-creating-vs-reusing-a-session</span><br><span class="line">session 是个容器</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;18199053&#x2F;example-of-what-sqlalchemy-can-do-and-django-orm-cannot</span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;7389759&#x2F;memory-efficient-built-in-sqlalchemy-iterator-generator</span><br><span class="line"></span><br><span class="line"># 日志</span><br><span class="line">import logging</span><br><span class="line">logging.basicConfig()</span><br><span class="line">logging.getLogger(&#39;sqlalchemy.engine&#39;).setLevel(logging.INFO)</span><br></pre></td></tr></table></figure>

<h2 id="0x06-DEBUG-和-Profile-技巧"><a href="#0x06-DEBUG-和-Profile-技巧" class="headerlink" title="0x06 DEBUG 和 Profile 技巧"></a>0x06 DEBUG 和 Profile 技巧</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS &#x3D; False</span><br></pre></td></tr></table></figure>

<h3 id="6-1-查看技巧"><a href="#6-1-查看技巧" class="headerlink" title="6.1 查看技巧"></a>6.1 查看技巧</h3><p>dict(u)<br>u.<strong>dict</strong></p>
<p><a href="https://stackoverflow.com/questions/1171166/how-can-i-profile-a-sqlalchemy-powered-application">https://stackoverflow.com/questions/1171166/how-can-i-profile-a-sqlalchemy-powered-application</a></p>
<p>如果用上 Flask+SQLAlchemy 一般也要带上，Flask-Migration 与 Flask-SQLAlchemy, 这两个库也是对 Alembic 和 SQLAlchemy 的浅封装。</p>
<p>那么，对于这个 ORM 库还有那些通用性的知识需要了解？</p>
<p>嗯，是时候了解本质了。</p>
<p><a href="http://derrickgilland.com/posts/demystifying-flask-sqlalchemy/">http://derrickgilland.com/posts/demystifying-flask-sqlalchemy/</a></p>
<h2 id="0x07-ORM-的本质"><a href="#0x07-ORM-的本质" class="headerlink" title="0x07 ORM 的本质"></a>0x07 ORM 的本质</h2><p>ORM 的本质是 Data Access Layer 上的一层封装。如果你写原生 SQL, 即手写 DAL 的话，开发效率可能会大打折扣。</p>
<h3 id="ORM-的两种类型-Active-Record-与-Data-Mappers"><a href="#ORM-的两种类型-Active-Record-与-Data-Mappers" class="headerlink" title="ORM 的两种类型 Active Record 与 Data Mappers"></a>ORM 的两种类型 Active Record 与 Data Mappers</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ActiveRecord 风格写起来类似于 Django ORM, 大致是这样的</span><br><span class="line"></span><br><span class="line">## AR 的模型定义</span><br><span class="line"></span><br><span class="line">class User(db.models):</span><br><span class="line">    name &#x3D; db.StringField(verbose&#x3D;&quot;xyz&quot;)</span><br><span class="line"></span><br><span class="line">## AR 的新增</span><br><span class="line">user &#x3D; User()</span><br><span class="line">user.name &#x3D; &quot;123456&quot;</span><br><span class="line">user.save() ## 正好对应数据库中的一行</span><br><span class="line"></span><br><span class="line">## AR 的查询</span><br><span class="line"></span><br><span class="line">users &#x3D; User.objects.filter(Q(name&#x3D;&quot;黄老板的小姨子&quot;)).all()</span><br><span class="line"></span><br><span class="line"># Data Mappers 风格写起来类似于 SQLAlchemy ORM, 大致是这样的</span><br><span class="line"></span><br><span class="line">## SA 的定义</span><br><span class="line"></span><br><span class="line">from sqlalchemy.ext.declarative import declarative_base</span><br><span class="line"></span><br><span class="line">Base &#x3D; declarative_base()</span><br><span class="line"></span><br><span class="line">from sqlalchemy import Column, Integer, String</span><br><span class="line">class User(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;users&#39;</span><br><span class="line"></span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String)</span><br><span class="line"></span><br><span class="line">Base.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line">## SA 的新增</span><br><span class="line"></span><br><span class="line">user &#x3D; User()</span><br><span class="line">user.name &#x3D; &quot;123456&quot;</span><br><span class="line">session.add(user)</span><br><span class="line">sessoon.commit() ## 嗯？其实也是对应数据库中的一行。</span><br><span class="line"></span><br><span class="line">## SA 的查询</span><br><span class="line"></span><br><span class="line">session.query(User).filter(User.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>问题来了，这两者到底是什么，看起来似乎相差不大。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person:</span><br><span class="line"></span><br><span class="line">    lastname</span><br><span class="line">    firstname</span><br><span class="line">    children</span><br><span class="line"></span><br><span class="line">    # 数据操作</span><br><span class="line">    def findone(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def insert(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def update(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def delete(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # 业务逻辑</span><br><span class="line">    def getChildrenTax(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>lastName firstName numberOfDependents</p>
<p>insert update delete</p>
<p>getExemption isFlaggedForAudit getTaxableEarnings</p>
<p>An object that wraps a row in a database table or view, encapsulates the database access, and adds domain logic on that data.</p>
<p>The essence of an Active Record is a Domain Model (116) in which the classes match very closely the record structure of an underlying database. Each Active Record is responsible for saving and loading to the database and also for any domain logic that acts on the data. This may be all the domain logic in the application, or you may ﬁnd that some domain logic is held in Transaction Scripts (110) with common and data-oriented code in the Active Record.</p>
<p>The data structure of the Active Record should exactly match that of the database: one ﬁeld in the class for each column in the table. Type the ﬁelds the way the SQL interface gives you the data—don’t do any conversion at this stage. You may consider Foreign Key Mapping (236), but you may also leave the foreign keys as they are. You can use views or tables with Active Record, although updates through views are obviously harder. Views are particularly useful for reporting purposes.</p>
<p>objects correspond directly to the database tables: an isomorphic schema. If your business logic is complex, you’ll soon want to use your object’s direct relationships, collections, inheritance, and so forth. These don’t map easily onto Active Record, and adding them piecemeal gets very messy. That’s what will lead you to use Data Mapper (165) instead.</p>
<p>Another argument against Active Record is the fact that it couples the object design to the database design. This makes it more difﬁcult to refactor either design as a project goes forward.</p>
<p>Active Record is a good pattern to consider if you’re using Transaction Script (110) and are beginning to feel the pain of code duplication and the difﬁculty in updating scripts and tables that Transaction Script (110) often brings. In this case you can gradually start creating Active Records and then slowly refactor behavior into them. It often helps to wrap the tables as a Gateway (466) ﬁrst, and then start moving behavior so that the tables evolve to a Active Record.</p>
<p>其实为什么不选择设计成 ActiveRecord , 而是选择设计成 Data Mapper, 其实就可以回答这个问题：</p>
<blockquote>
<p>虽然要设计成 ORM, 考虑到数量和性能因素，SQL 数据库（多个表）并不应该是表现像 Object 集合那样（换言之，也就是 AR 表现的像 Object 的集合一样）。<br>同时，出于更好的抽象，object 集合也应该表现的像表以及行</p>
</blockquote>
<p>于是我们可以得出结论，可以在 SQLAlchemy 上面进行一定的封装，使得最后用起来非常的 Django ORM like，其实 SQLAlchemy 稍加定制还是可以很 Django ORM-like 的。</p>
<p>:TODO: 有机会看看那本书再修改一下本小节</p>
<p>这不，果然有人就这么搞了 <a href="https://github.com/absent1706/sqlalchemy-mixins">https://github.com/absent1706/sqlalchemy-mixins</a></p>
<h2 id="0x09-踩坑集"><a href="#0x09-踩坑集" class="headerlink" title="0x09 踩坑集"></a>0x09 踩坑集</h2><h3 id="关系持久化坑"><a href="#关系持久化坑" class="headerlink" title="关系持久化坑"></a>关系持久化坑</h3><ol>
<li>Rows that point to themselves : 比如一个 insert 一个推荐自己的用户，则需要保存 id / ref_id , 但是在这个 user 插入之前，并不存在 id. 所以，一般情况下是先 insert, 然后保存 ref_id</li>
<li>Mutually Dependent Rows</li>
</ol>
<h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><p>session.query(MyClass).filter(“foo={}”.format(getArgs[‘val’]))</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><p><a href="https://www.eversql.com/django-vs-sqlalchemy-which-python-orm-is-better/">https://www.eversql.com/django-vs-sqlalchemy-which-python-orm-is-better/</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/2546207/does-sqlalchemy-have-an-equivalent-of-djangos-get-or-create">https://stackoverflow.com/questions/2546207/does-sqlalchemy-have-an-equivalent-of-djangos-get-or-create</a></p>
</li>
<li><p>除了文档本身，作者在 Stack Overflow 上的回答都是非常值得阅读的。<a href="https://stackoverflow.com/users/34549/zzzeek">https://stackoverflow.com/users/34549/zzzeek</a></p>
</li>
<li><p>Patterns of Enterprise Application Architecture - Martin Fowler</p>
</li>
<li><p><a href="http://aosabook.org/en/sqlalchemy.html">http://aosabook.org/en/sqlalchemy.html</a></p>
<p>  <a href="http://techspot.zzzeek.org/">http://techspot.zzzeek.org/</a></p>
</li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-03-09</strong> 重修文字</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
        <tag>全栈开发</tag>
        <tag>RestAPI</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Python 解法</title>
    <url>/2016/12/21/LeetCodePythonSolution/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刷刷简单的算法问题，顺手提升一下编程的裸写代码的能力。</p>
<p>本文为 LeetCode 的 Easy 算法的解法集合。</p>
<a id="more"></a>

<h2 id="Easy-集合"><a href="#Easy-集合" class="headerlink" title="Easy 集合"></a>Easy 集合</h2><h3 id="1-Two-Sum-29-4"><a href="#1-Two-Sum-29-4" class="headerlink" title="1. Two Sum 29.4%"></a>1. Two Sum 29.4%</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 尝试：暴力解决</span></span><br><span class="line"><span class="comment"># 结果：超时</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        begin = <span class="number">0</span></span><br><span class="line">        end = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> i != j <span class="keyword">and</span> target == nums[i] + nums[j]:</span><br><span class="line">                    <span class="keyword">return</span> [i,j]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试：字典也就是 HashMap 解决</span></span><br><span class="line"><span class="comment"># 结果：读题不准确，数组不行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        nums_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i,num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            nums_dict[num] = i</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            item_num_1st = nums_dict.get(num)</span><br><span class="line">            item_num_2st = nums_dict.get(target-num)</span><br><span class="line">            <span class="keyword">if</span> item_num_2st <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> item_num_1st != item_num_2st:</span><br><span class="line">                <span class="keyword">return</span> [item_num_1st,item_num_2st]</span><br><span class="line"><span class="comment"># 尝试：其他</span></span><br><span class="line"><span class="comment"># 结果：其他</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-ZigZag-Conversion-25-8"><a href="#6-ZigZag-Conversion-25-8" class="headerlink" title="6. ZigZag Conversion 25.8%"></a>6. ZigZag Conversion 25.8%</h3><h3 id="7-Reverse-Integer-23-7-Easy"><a href="#7-Reverse-Integer-23-7-Easy" class="headerlink" title="7    Reverse Integer          23.7%    Easy"></a>7    Reverse Integer          23.7%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def reverse(self, x):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type x: int</span><br><span class="line">        :rtype: int</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        preffix &#x3D; &quot;&quot;</span><br><span class="line">        if &quot;-&quot; in str(x):</span><br><span class="line">            num &#x3D; int(str(x).strip(&quot;-&quot;)[::-1])</span><br><span class="line">            preffix &#x3D; &quot;-&quot;</span><br><span class="line">        else:</span><br><span class="line">            num &#x3D; int(str(x)[::-1])</span><br><span class="line">        if num &gt;&#x3D; 2147483648 or num &lt;&#x3D; -2147483647:</span><br><span class="line">            return 0</span><br><span class="line">        return  int(preffix+str(num))</span><br></pre></td></tr></table></figure>

<h3 id="8-String-to-Integer-atoi-13-8-Easy"><a href="#8-String-to-Integer-atoi-13-8-Easy" class="headerlink" title="8    String to Integer (atoi)          13.8%    Easy"></a>8    String to Integer (atoi)          13.8%    Easy</h3><h3 id="9-Palindrome-Number-34-0-Easy"><a href="#9-Palindrome-Number-34-0-Easy" class="headerlink" title="9    Palindrome Number          34.0%    Easy"></a>9    Palindrome Number          34.0%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用了额外的存储，亟待优化</span><br><span class="line">class Solution(object):</span><br><span class="line">    def isPalindrome(self, x):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type x: int</span><br><span class="line">        :rtype: bool</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        l_x &#x3D; list(str(x))</span><br><span class="line">        return l_x &#x3D;&#x3D; l_x[::-1]</span><br></pre></td></tr></table></figure>

<h3 id="13-Roman-to-Integer-43-2-Easy"><a href="#13-Roman-to-Integer-43-2-Easy" class="headerlink" title="13    Roman to Integer          43.2%    Easy"></a>13    Roman to Integer          43.2%    Easy</h3><h3 id="14-Longest-Common-Prefix-30-4-Easy"><a href="#14-Longest-Common-Prefix-30-4-Easy" class="headerlink" title="14    Longest Common Prefix          30.4%    Easy"></a>14    Longest Common Prefix          30.4%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def longestCommonPrefix(self, strs):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type strs: List[str]</span><br><span class="line">        :rtype: str</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if len(strs) &#x3D;&#x3D; 0:</span><br><span class="line">            return &quot;&quot;</span><br><span class="line">        current_clip &#x3D; &quot;&quot;</span><br><span class="line">        len_strs &#x3D; [len(_str) for _str in strs]</span><br><span class="line">        min_strs_len &#x3D; min(len_strs)</span><br><span class="line">        has_common_flag &#x3D; False</span><br><span class="line">        for _len in range(min_strs_len,0,-1):</span><br><span class="line">            cliped_strs_set &#x3D; set()</span><br><span class="line">            for _str in strs:</span><br><span class="line">                current_clip &#x3D; _str[0:_len]</span><br><span class="line">                cliped_strs_set.add(current_clip)</span><br><span class="line">            if len(cliped_strs_set) &#x3D;&#x3D; 1:</span><br><span class="line">                has_common_flag &#x3D; True</span><br><span class="line">                break</span><br><span class="line">        if has_common_flag:</span><br><span class="line">            return current_clip</span><br><span class="line">        else:</span><br><span class="line">            return &quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="19-Remove-Nth-Node-From-End-of-List-32-0-Easy"><a href="#19-Remove-Nth-Node-From-End-of-List-32-0-Easy" class="headerlink" title="19    Remove Nth Node From End of List          32.0%    Easy"></a>19    Remove Nth Node From End of List          32.0%    Easy</h3><h3 id="20-Valid-Parentheses-31-9-Easy"><a href="#20-Valid-Parentheses-31-9-Easy" class="headerlink" title="20    Valid Parentheses          31.9%    Easy"></a>20    Valid Parentheses          31.9%    Easy</h3><h3 id="21-Merge-Two-Sorted-Lists-37-7-Easy"><a href="#21-Merge-Two-Sorted-Lists-37-7-Easy" class="headerlink" title="21    Merge Two Sorted Lists          37.7%    Easy"></a>21    Merge Two Sorted Lists          37.7%    Easy</h3><h3 id="24-Swap-Nodes-in-Pairs-37-0-Easy"><a href="#24-Swap-Nodes-in-Pairs-37-0-Easy" class="headerlink" title="24    Swap Nodes in Pairs          37.0%    Easy"></a>24    Swap Nodes in Pairs          37.0%    Easy</h3><h3 id="26-Remove-Duplicates-from-Sorted-Array-35-2-Easy"><a href="#26-Remove-Duplicates-from-Sorted-Array-35-2-Easy" class="headerlink" title="26    Remove Duplicates from Sorted Array          35.2%    Easy"></a>26    Remove Duplicates from Sorted Array          35.2%    Easy</h3><h3 id="27-Remove-Element-36-7-Easy"><a href="#27-Remove-Element-36-7-Easy" class="headerlink" title="27    Remove Element          36.7%    Easy"></a>27    Remove Element          36.7%    Easy</h3><h3 id="28-Implement-strStr-26-8-Easy"><a href="#28-Implement-strStr-26-8-Easy" class="headerlink" title="28    Implement strStr()          26.8%    Easy"></a>28    Implement strStr()          26.8%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def strStr(self, haystack, needle):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type haystack: str</span><br><span class="line">        :type needle: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        cur &#x3D; -1</span><br><span class="line">        try:</span><br><span class="line">            cur &#x3D; haystack.index(needle)</span><br><span class="line">        except Exception:</span><br><span class="line">            pass</span><br><span class="line">        return cur</span><br></pre></td></tr></table></figure>

<h3 id="36-Valid-Sudoku-33-7-Easy"><a href="#36-Valid-Sudoku-33-7-Easy" class="headerlink" title="36    Valid Sudoku          33.7%    Easy"></a>36    Valid Sudoku          33.7%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def isValidSudoku(self, board):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type board: List[List[str]]</span><br><span class="line">        :rtype: bool</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 横向</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="38-Count-and-Say-32-3-Easy"><a href="#38-Count-and-Say-32-3-Easy" class="headerlink" title="38    Count and Say          32.3%    Easy"></a>38    Count and Say          32.3%    Easy</h3><h3 id="58-Length-of-Last-Word-31-0-Easy"><a href="#58-Length-of-Last-Word-31-0-Easy" class="headerlink" title="58    Length of Last Word          31.0%    Easy"></a>58    Length of Last Word          31.0%    Easy</h3><h3 id="66-Plus-One-36-7-Easy"><a href="#66-Plus-One-36-7-Easy" class="headerlink" title="66    Plus One          36.7%    Easy"></a>66    Plus One          36.7%    Easy</h3><h3 id="67-Add-Binary-30-2-Easy"><a href="#67-Add-Binary-30-2-Easy" class="headerlink" title="67    Add Binary          30.2%    Easy"></a>67    Add Binary          30.2%    Easy</h3><h3 id="70-Climbing-Stairs-38-5-Easy"><a href="#70-Climbing-Stairs-38-5-Easy" class="headerlink" title="70    Climbing Stairs          38.5%    Easy"></a>70    Climbing Stairs          38.5%    Easy</h3><h3 id="83-Remove-Duplicates-from-Sorted-List-38-7-Easy"><a href="#83-Remove-Duplicates-from-Sorted-List-38-7-Easy" class="headerlink" title="83    Remove Duplicates from Sorted List          38.7%    Easy"></a>83    Remove Duplicates from Sorted List          38.7%    Easy</h3><h3 id="88-Merge-Sorted-Array-31-3-Easy"><a href="#88-Merge-Sorted-Array-31-3-Easy" class="headerlink" title="88    Merge Sorted Array          31.3%    Easy"></a>88    Merge Sorted Array          31.3%    Easy</h3><h3 id="100-Same-Tree-45-1-Easy"><a href="#100-Same-Tree-45-1-Easy" class="headerlink" title="100    Same Tree          45.1%    Easy"></a>100    Same Tree          45.1%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Definition for a binary tree node.</span><br><span class="line"># class TreeNode(object):</span><br><span class="line">#     def __init__(self, x):</span><br><span class="line">#         self.val &#x3D; x</span><br><span class="line">#         self.left &#x3D; None</span><br><span class="line">#         self.right &#x3D; None</span><br><span class="line"></span><br><span class="line">class Solution(object):</span><br><span class="line">    def isSameTree(self, p, q):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type p: TreeNode</span><br><span class="line">        :type q: TreeNode</span><br><span class="line">        :rtype: bool</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if p is None and q is None:</span><br><span class="line">            return True</span><br><span class="line">        elif p is not None and q is not None:</span><br><span class="line">            return p.val &#x3D;&#x3D; q.val and self.isSameTree(p.left,q.left) and  self.isSameTree(p.right,q.right)</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="101-Symmetric-Tree-36-7-Easy"><a href="#101-Symmetric-Tree-36-7-Easy" class="headerlink" title="101    Symmetric Tree          36.7%    Easy"></a>101    Symmetric Tree          36.7%    Easy</h3><h3 id="102-Binary-Tree-Level-Order-Traversal-36-7-Easy"><a href="#102-Binary-Tree-Level-Order-Traversal-36-7-Easy" class="headerlink" title="102    Binary Tree Level Order Traversal          36.7%    Easy"></a>102    Binary Tree Level Order Traversal          36.7%    Easy</h3><h3 id="104-Maximum-Depth-of-Binary-Tree-50-6-Easy"><a href="#104-Maximum-Depth-of-Binary-Tree-50-6-Easy" class="headerlink" title="104    Maximum Depth of Binary Tree          50.6%    Easy"></a>104    Maximum Depth of Binary Tree          50.6%    Easy</h3><h3 id="107-Binary-Tree-Level-Order-Traversal-II-37-5-Easy"><a href="#107-Binary-Tree-Level-Order-Traversal-II-37-5-Easy" class="headerlink" title="107    Binary Tree Level Order Traversal II          37.5%    Easy"></a>107    Binary Tree Level Order Traversal II          37.5%    Easy</h3><h3 id="110-Balanced-Binary-Tree-36-1-Easy"><a href="#110-Balanced-Binary-Tree-36-1-Easy" class="headerlink" title="110    Balanced Binary Tree          36.1%    Easy"></a>110    Balanced Binary Tree          36.1%    Easy</h3><h3 id="111-Minimum-Depth-of-Binary-Tree-32-2-Easy"><a href="#111-Minimum-Depth-of-Binary-Tree-32-2-Easy" class="headerlink" title="111    Minimum Depth of Binary Tree          32.2%    Easy"></a>111    Minimum Depth of Binary Tree          32.2%    Easy</h3><h3 id="112-Path-Sum-32-8-Easy"><a href="#112-Path-Sum-32-8-Easy" class="headerlink" title="112    Path Sum          32.8%    Easy"></a>112    Path Sum          32.8%    Easy</h3><h3 id="118-Pascal’s-Triangle-36-5-Easy"><a href="#118-Pascal’s-Triangle-36-5-Easy" class="headerlink" title="118    Pascal’s Triangle          36.5%    Easy"></a>118    Pascal’s Triangle          36.5%    Easy</h3><h3 id="119-Pascal’s-Triangle-II-34-8-Easy"><a href="#119-Pascal’s-Triangle-II-34-8-Easy" class="headerlink" title="119    Pascal’s Triangle II          34.8%    Easy"></a>119    Pascal’s Triangle II          34.8%    Easy</h3><h3 id="121-Best-Time-to-Buy-and-Sell-Stock-38-9-Easy"><a href="#121-Best-Time-to-Buy-and-Sell-Stock-38-9-Easy" class="headerlink" title="121    Best Time to Buy and Sell Stock          38.9%    Easy"></a>121    Best Time to Buy and Sell Stock          38.9%    Easy</h3><h3 id="125-Valid-Palindrome-25-2-Easy"><a href="#125-Valid-Palindrome-25-2-Easy" class="headerlink" title="125    Valid Palindrome          25.2%    Easy"></a>125    Valid Palindrome          25.2%    Easy</h3><h3 id="136-Single-Number-52-6-Easy"><a href="#136-Single-Number-52-6-Easy" class="headerlink" title="136    Single Number          52.6%    Easy"></a>136    Single Number          52.6%    Easy</h3><h3 id="141-Linked-List-Cycle-35-9-Easy"><a href="#141-Linked-List-Cycle-35-9-Easy" class="headerlink" title="141    Linked List Cycle          35.9%    Easy"></a>141    Linked List Cycle          35.9%    Easy</h3><h3 id="155-Min-Stack-26-0-Easy"><a href="#155-Min-Stack-26-0-Easy" class="headerlink" title="155    Min Stack          26.0%    Easy"></a>155    Min Stack          26.0%    Easy</h3><h3 id="157-Read-N-Characters-Given-Read4-29-4-Easy"><a href="#157-Read-N-Characters-Given-Read4-29-4-Easy" class="headerlink" title="157    Read N Characters Given Read4          29.4%    Easy"></a>157    Read N Characters Given Read4          29.4%    Easy</h3><h3 id="160-Intersection-of-Two-Linked-Lists-30-0-Easy"><a href="#160-Intersection-of-Two-Linked-Lists-30-0-Easy" class="headerlink" title="160    Intersection of Two Linked Lists          30.0%    Easy"></a>160    Intersection of Two Linked Lists          30.0%    Easy</h3><h3 id="165-Compare-Version-Numbers-19-1-Easy"><a href="#165-Compare-Version-Numbers-19-1-Easy" class="headerlink" title="165    Compare Version Numbers          19.1%    Easy"></a>165    Compare Version Numbers          19.1%    Easy</h3><h3 id="168-Excel-Sheet-Column-Title-24-2-Easy"><a href="#168-Excel-Sheet-Column-Title-24-2-Easy" class="headerlink" title="168    Excel Sheet Column Title          24.2%    Easy"></a>168    Excel Sheet Column Title          24.2%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def titleToNumber(self, s):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        result &#x3D; 0</span><br><span class="line">        for i,c in enumerate(s[::-1]):</span><br><span class="line">            result +&#x3D; (ord(c) - ord(&quot;A&quot;) + 1) * (26 ** i)</span><br><span class="line">        return result</span><br></pre></td></tr></table></figure>

<h3 id="169-Majority-Element-44-6-Easy"><a href="#169-Majority-Element-44-6-Easy" class="headerlink" title="169    Majority Element          44.6%    Easy"></a>169    Majority Element          44.6%    Easy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">        <span class="keyword">return</span> Counter(nums).most_common()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="170-Two-Sum-III-Data-structure-design-22-6-Easy"><a href="#170-Two-Sum-III-Data-structure-design-22-6-Easy" class="headerlink" title="170    Two Sum III - Data structure design          22.6%    Easy"></a>170    Two Sum III - Data structure design          22.6%    Easy</h3><h3 id="171-Excel-Sheet-Column-Number-45-0-Easy"><a href="#171-Excel-Sheet-Column-Number-45-0-Easy" class="headerlink" title="171    Excel Sheet Column Number          45.0%    Easy"></a>171    Excel Sheet Column Number          45.0%    Easy</h3><h3 id="172-Factorial-Trailing-Zeroes-34-7-Easy"><a href="#172-Factorial-Trailing-Zeroes-34-7-Easy" class="headerlink" title="172    Factorial Trailing Zeroes          34.7%    Easy"></a>172    Factorial Trailing Zeroes          34.7%    Easy</h3><h3 id="189-Rotate-Array-23-3-Easy"><a href="#189-Rotate-Array-23-3-Easy" class="headerlink" title="189    Rotate Array          23.3%    Easy"></a>189    Rotate Array          23.3%    Easy</h3><h3 id="190-Reverse-Bits-29-5-Easy"><a href="#190-Reverse-Bits-29-5-Easy" class="headerlink" title="190    Reverse Bits          29.5%    Easy"></a>190    Reverse Bits          29.5%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    # @param n, an integer</span><br><span class="line">    # @return an integer</span><br><span class="line">    def reverseBits(self, n):</span><br><span class="line">        return int(bin(n).replace(&quot;0b&quot;,&quot;&quot;).zfill(32)[::-1],2)</span><br></pre></td></tr></table></figure>

<h3 id="191-Number-of-1-Bits-38-4-Easy"><a href="#191-Number-of-1-Bits-38-4-Easy" class="headerlink" title="191    Number of 1 Bits          38.4%    Easy"></a>191    Number of 1 Bits          38.4%    Easy</h3><h3 id="198-House-Robber-37-2-Easy"><a href="#198-House-Robber-37-2-Easy" class="headerlink" title="198    House Robber          37.2%    Easy"></a>198    House Robber          37.2%    Easy</h3><h3 id="202-Happy-Number-39-0-Easy"><a href="#202-Happy-Number-39-0-Easy" class="headerlink" title="202    Happy Number          39.0%    Easy"></a>202    Happy Number          39.0%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def isHappy(self, n):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: bool</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.isHappyNum(self,n,[])</span><br><span class="line"></span><br><span class="line">    def isHappyNum(self,n,result_list):</span><br><span class="line">        result &#x3D; reduce(lambda x , y : x+ y,map(lambda x : int(x) ** 2 ,str(n).split()))</span><br><span class="line">        if result in result_list:</span><br><span class="line">            return False</span><br><span class="line">        else:</span><br><span class="line">            result_list.append(result)</span><br><span class="line">            self.isHappyNum(result,result_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="203-Remove-Linked-List-Elements-30-8-Easy"><a href="#203-Remove-Linked-List-Elements-30-8-Easy" class="headerlink" title="203    Remove Linked List Elements          30.8%    Easy"></a>203    Remove Linked List Elements          30.8%    Easy</h3><h3 id="204-Count-Primes-26-0-Easy"><a href="#204-Count-Primes-26-0-Easy" class="headerlink" title="204    Count Primes          26.0%    Easy"></a>204    Count Primes          26.0%    Easy</h3><h3 id="205-Isomorphic-Strings-32-3-Easy"><a href="#205-Isomorphic-Strings-32-3-Easy" class="headerlink" title="205    Isomorphic Strings          32.3%    Easy"></a>205    Isomorphic Strings          32.3%    Easy</h3><h3 id="206-Reverse-Linked-List-43-2-Easy"><a href="#206-Reverse-Linked-List-43-2-Easy" class="headerlink" title="206    Reverse Linked List          43.2%    Easy"></a>206    Reverse Linked List          43.2%    Easy</h3><h3 id="217-Contains-Duplicate-43-5-Easy"><a href="#217-Contains-Duplicate-43-5-Easy" class="headerlink" title="217    Contains Duplicate          43.5%    Easy"></a>217    Contains Duplicate          43.5%    Easy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> nums <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">len</span>(nums) &gt;= <span class="number">1</span> <span class="keyword">and</span> <span class="built_in">len</span>(nums) &gt; <span class="built_in">len</span>(<span class="built_in">set</span>(nums))</span><br></pre></td></tr></table></figure>

<h3 id="219-Contains-Duplicate-II-31-3-Easy"><a href="#219-Contains-Duplicate-II-31-3-Easy" class="headerlink" title="219    Contains Duplicate II          31.3%    Easy"></a>219    Contains Duplicate II          31.3%    Easy</h3><h3 id="223-Rectangle-Area-31-8-Easy"><a href="#223-Rectangle-Area-31-8-Easy" class="headerlink" title="223    Rectangle Area          31.8%    Easy"></a>223    Rectangle Area          31.8%    Easy</h3><h3 id="225-Implement-Stack-using-Queues-31-0-Easy"><a href="#225-Implement-Stack-using-Queues-31-0-Easy" class="headerlink" title="225    Implement Stack using Queues          31.0%    Easy"></a>225    Implement Stack using Queues          31.0%    Easy</h3><h3 id="226-Invert-Binary-Tree-49-5-Easy"><a href="#226-Invert-Binary-Tree-49-5-Easy" class="headerlink" title="226    Invert Binary Tree          49.5%    Easy"></a>226    Invert Binary Tree          49.5%    Easy</h3><h3 id="231-Power-of-Two-39-1-Easy"><a href="#231-Power-of-Two-39-1-Easy" class="headerlink" title="231    Power of Two          39.1%    Easy"></a>231    Power of Two          39.1%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def isPowerOfTwo(self, n):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: bool</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if n % 2 &#x3D;&#x3D; 1 and n &gt; 1:</span><br><span class="line">            return False</span><br><span class="line">        elif n &lt;&#x3D; 0:</span><br><span class="line">            return False</span><br><span class="line">        elif n in (2,1):</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return self.isPowerOfTwo(n &#x2F; 2)</span><br></pre></td></tr></table></figure>

<h3 id="232-Implement-Queue-using-Stacks-34-9-Easy"><a href="#232-Implement-Queue-using-Stacks-34-9-Easy" class="headerlink" title="232    Implement Queue using Stacks          34.9%    Easy"></a>232    Implement Queue using Stacks          34.9%    Easy</h3><h3 id="234-Palindrome-Linked-List-31-4-Easy"><a href="#234-Palindrome-Linked-List-31-4-Easy" class="headerlink" title="234    Palindrome Linked List          31.4%    Easy"></a>234    Palindrome Linked List          31.4%    Easy</h3><h3 id="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree-38-0-Easy"><a href="#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree-38-0-Easy" class="headerlink" title="235    Lowest Common Ancestor of a Binary Search Tree          38.0%    Easy"></a>235    Lowest Common Ancestor of a Binary Search Tree          38.0%    Easy</h3><h3 id="237-Delete-Node-in-a-Linked-List-45-2-Easy"><a href="#237-Delete-Node-in-a-Linked-List-45-2-Easy" class="headerlink" title="237    Delete Node in a Linked List          45.2%    Easy"></a>237    Delete Node in a Linked List          45.2%    Easy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type node: ListNode</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify node in-place instead.</span></span><br><span class="line"><span class="string">        这个方法是可以 Get 到 node 点的，但是题目的要求应该不是这个意思</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> node.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<h3 id="242-Valid-Anagram-44-6-Easy"><a href="#242-Valid-Anagram-44-6-Easy" class="headerlink" title="242    Valid Anagram          44.6%    Easy"></a>242    Valid Anagram          44.6%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def isAnagram(self, s, t):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type s: str</span><br><span class="line">        :type t: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        from collections import Counter</span><br><span class="line">        return Counter(s) &#x3D;&#x3D; Counter(t)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="243-Shortest-Word-Distance-50-5-Easy"><a href="#243-Shortest-Word-Distance-50-5-Easy" class="headerlink" title="243    Shortest Word Distance          50.5%    Easy"></a>243    Shortest Word Distance          50.5%    Easy</h3><h3 id="246-Strobogrammatic-Number-38-7-Easy"><a href="#246-Strobogrammatic-Number-38-7-Easy" class="headerlink" title="246    Strobogrammatic Number          38.7%    Easy"></a>246    Strobogrammatic Number          38.7%    Easy</h3><h3 id="249-Group-Shifted-Strings-38-1-Easy"><a href="#249-Group-Shifted-Strings-38-1-Easy" class="headerlink" title="249    Group Shifted Strings          38.1%    Easy"></a>249    Group Shifted Strings          38.1%    Easy</h3><h3 id="252-Meeting-Rooms-45-2-Easy"><a href="#252-Meeting-Rooms-45-2-Easy" class="headerlink" title="252    Meeting Rooms          45.2%    Easy"></a>252    Meeting Rooms          45.2%    Easy</h3><h3 id="257-Binary-Tree-Paths-34-3-Easy"><a href="#257-Binary-Tree-Paths-34-3-Easy" class="headerlink" title="257    Binary Tree Paths          34.3%    Easy"></a>257    Binary Tree Paths          34.3%    Easy</h3><h3 id="258-Add-Digits-50-1-Easy"><a href="#258-Add-Digits-50-1-Easy" class="headerlink" title="258    Add Digits          50.1%    Easy"></a>258    Add Digits          50.1%    Easy</h3><h3 id="263-Ugly-Number-38-3-Easy"><a href="#263-Ugly-Number-38-3-Easy" class="headerlink" title="263    Ugly Number          38.3%    Easy"></a>263    Ugly Number          38.3%    Easy</h3><h3 id="266-Palindrome-Permutation-54-8-Easy"><a href="#266-Palindrome-Permutation-54-8-Easy" class="headerlink" title="266    Palindrome Permutation          54.8%    Easy"></a>266    Palindrome Permutation          54.8%    Easy</h3><h3 id="270-Closest-Binary-Search-Tree-Value-37-8-Easy"><a href="#270-Closest-Binary-Search-Tree-Value-37-8-Easy" class="headerlink" title="270    Closest Binary Search Tree Value          37.8%    Easy"></a>270    Closest Binary Search Tree Value          37.8%    Easy</h3><h3 id="276-Paint-Fence-33-7-Easy"><a href="#276-Paint-Fence-33-7-Easy" class="headerlink" title="276    Paint Fence          33.7%    Easy"></a>276    Paint Fence          33.7%    Easy</h3><h3 id="278-First-Bad-Version-24-2-Easy"><a href="#278-First-Bad-Version-24-2-Easy" class="headerlink" title="278    First Bad Version          24.2%    Easy"></a>278    First Bad Version          24.2%    Easy</h3><h3 id="283-Move-Zeroes-47-5-Easy"><a href="#283-Move-Zeroes-47-5-Easy" class="headerlink" title="283    Move Zeroes          47.5%    Easy"></a>283    Move Zeroes          47.5%    Easy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 首先想到的这个答案</span></span><br><span class="line"><span class="comment"># 然后 leetcode 上面居然还是打印的原来的值，我猜测肯定是用后台进行 id 比对内存地址。好吧，这个方式最好。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        zero_count = nums.count(<span class="number">0</span>)</span><br><span class="line">        new_nums = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums <span class="keyword">if</span> num != <span class="number">0</span>]</span><br><span class="line">        new_nums.extend([<span class="number">0</span>]*zero_count)</span><br><span class="line">        nums = new_nums</span><br><span class="line"></span><br><span class="line"><span class="comment">## 蛋疼，三重排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        begin_cur = <span class="number">0</span></span><br><span class="line">        end_cur = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[j] == <span class="number">0</span> <span class="keyword">and</span> nums[j+<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">                    nums[j] , nums[j+<span class="number">1</span>] = nums[j+<span class="number">1</span>] , nums[j]</span><br><span class="line">        print(nums)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="288-Unique-Word-Abbreviation-15-3-Easy"><a href="#288-Unique-Word-Abbreviation-15-3-Easy" class="headerlink" title="288    Unique Word Abbreviation          15.3%    Easy"></a>288    Unique Word Abbreviation          15.3%    Easy</h3><h3 id="290-Word-Pattern-31-9-Easy"><a href="#290-Word-Pattern-31-9-Easy" class="headerlink" title="290    Word Pattern          31.9%    Easy"></a>290    Word Pattern          31.9%    Easy</h3><h3 id="292-Nim-Game-54-6-Easy"><a href="#292-Nim-Game-54-6-Easy" class="headerlink" title="292    Nim Game          54.6%    Easy"></a>292    Nim Game          54.6%    Easy</h3><h3 id="293-Flip-Game-53-7-Easy"><a href="#293-Flip-Game-53-7-Easy" class="headerlink" title="293    Flip Game          53.7%    Easy"></a>293    Flip Game          53.7%    Easy</h3><h3 id="299-Bulls-and-Cows-33-0-Easy"><a href="#299-Bulls-and-Cows-33-0-Easy" class="headerlink" title="299    Bulls and Cows          33.0%    Easy"></a>299    Bulls and Cows          33.0%    Easy</h3><h3 id="303-Range-Sum-Query-Immutable-26-1-Easy"><a href="#303-Range-Sum-Query-Immutable-26-1-Easy" class="headerlink" title="303    Range Sum Query - Immutable          26.1%    Easy"></a>303    Range Sum Query - Immutable          26.1%    Easy</h3><h3 id="326-Power-of-Three-39-1-Easy"><a href="#326-Power-of-Three-39-1-Easy" class="headerlink" title="326    Power of Three          39.1%    Easy"></a>326    Power of Three          39.1%    Easy</h3><h3 id="339-Nested-List-Weight-Sum-59-5-Easy"><a href="#339-Nested-List-Weight-Sum-59-5-Easy" class="headerlink" title="339    Nested List Weight Sum          59.5%    Easy"></a>339    Nested List Weight Sum          59.5%    Easy</h3><h3 id="342-Power-of-Four-37-2-Easy"><a href="#342-Power-of-Four-37-2-Easy" class="headerlink" title="342    Power of Four          37.2%    Easy"></a>342    Power of Four          37.2%    Easy</h3><h3 id="344-Reverse-String-57-4-Easy"><a href="#344-Reverse-String-57-4-Easy" class="headerlink" title="344    Reverse String          57.4%    Easy"></a>344    Reverse String          57.4%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def reverseString(self, s):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return s[::-1]</span><br></pre></td></tr></table></figure>

<h3 id="345-Reverse-Vowels-of-a-String-37-1-Easy"><a href="#345-Reverse-Vowels-of-a-String-37-1-Easy" class="headerlink" title="345    Reverse Vowels of a String          37.1%    Easy"></a>345    Reverse Vowels of a String          37.1%    Easy</h3><h3 id="346-Moving-Average-from-Data-Stream-57-1-Easy"><a href="#346-Moving-Average-from-Data-Stream-57-1-Easy" class="headerlink" title="346    Moving Average from Data Stream          57.1%    Easy"></a>346    Moving Average from Data Stream          57.1%    Easy</h3><h3 id="349-Intersection-of-Two-Arrays-45-4-Easy"><a href="#349-Intersection-of-Two-Arrays-45-4-Easy" class="headerlink" title="349    Intersection of Two Arrays          45.4%    Easy"></a>349    Intersection of Two Arrays          45.4%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def intersection(self, nums1, nums2):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type nums1: List[int]</span><br><span class="line">        :type nums2: List[int]</span><br><span class="line">        :rtype: List[int]</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return list(set(nums1) &amp; set(nums2))</span><br></pre></td></tr></table></figure>

<h3 id="350-Intersection-of-Two-Arrays-II-43-4-Easy"><a href="#350-Intersection-of-Two-Arrays-II-43-4-Easy" class="headerlink" title="350    Intersection of Two Arrays II          43.4%    Easy"></a>350    Intersection of Two Arrays II          43.4%    Easy</h3><h3 id="359-Logger-Rate-Limiter-58-0-Easy"><a href="#359-Logger-Rate-Limiter-58-0-Easy" class="headerlink" title="359    Logger Rate Limiter          58.0%    Easy"></a>359    Logger Rate Limiter          58.0%    Easy</h3><h3 id="371-Sum-of-Two-Integers-51-5-Easy"><a href="#371-Sum-of-Two-Integers-51-5-Easy" class="headerlink" title="371    Sum of Two Integers          51.5%    Easy"></a>371    Sum of Two Integers          51.5%    Easy</h3><h3 id="374-Guess-Number-Higher-or-Lower-33-2-Easy"><a href="#374-Guess-Number-Higher-or-Lower-33-2-Easy" class="headerlink" title="374    Guess Number Higher or Lower          33.2%    Easy"></a>374    Guess Number Higher or Lower          33.2%    Easy</h3><h3 id="383-Ransom-Note-45-9-Easy"><a href="#383-Ransom-Note-45-9-Easy" class="headerlink" title="383    Ransom Note          45.9%    Easy"></a>383    Ransom Note          45.9%    Easy</h3><h3 id="387-First-Unique-Character-in-a-String-45-1-Easy"><a href="#387-First-Unique-Character-in-a-String-45-1-Easy" class="headerlink" title="387    First Unique Character in a String          45.1%    Easy"></a>387    First Unique Character in a String          45.1%    Easy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">firstUniqChar</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        flag = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">        uniq_chars_set = <span class="built_in">set</span>([k <span class="keyword">for</span> k , v <span class="keyword">in</span> Counter(s).items() <span class="keyword">if</span> v == <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i,c <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> uniq_chars_set:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure>

<h3 id="389-Find-the-Difference-50-3-Easy"><a href="#389-Find-the-Difference-50-3-Easy" class="headerlink" title="389    Find the Difference          50.3%    Easy"></a>389    Find the Difference          50.3%    Easy</h3><h3 id="396-Rotate-Function-30-1-Easy"><a href="#396-Rotate-Function-30-1-Easy" class="headerlink" title="396    Rotate Function          30.1%    Easy"></a>396    Rotate Function          30.1%    Easy</h3><h3 id="400-Nth-Digit-30-6-Easy"><a href="#400-Nth-Digit-30-6-Easy" class="headerlink" title="400    Nth Digit          30.6%    Easy"></a>400    Nth Digit          30.6%    Easy</h3><h3 id="401-Binary-Watch-43-1-Easy"><a href="#401-Binary-Watch-43-1-Easy" class="headerlink" title="401    Binary Watch          43.1%    Easy"></a>401    Binary Watch          43.1%    Easy</h3><h3 id="404-Sum-of-Left-Leaves-45-6-Easy"><a href="#404-Sum-of-Left-Leaves-45-6-Easy" class="headerlink" title="404    Sum of Left Leaves          45.6%    Easy"></a>404    Sum of Left Leaves          45.6%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Definition for a binary tree node.</span><br><span class="line"></span><br><span class="line"># class TreeNode(object):</span><br><span class="line"></span><br><span class="line">#     def __init__(self, x):</span><br><span class="line"></span><br><span class="line">#         self.val &#x3D; x</span><br><span class="line"></span><br><span class="line">#         self.left &#x3D; None</span><br><span class="line"></span><br><span class="line">#         self.right &#x3D; None</span><br><span class="line"></span><br><span class="line">class Solution(object):</span><br><span class="line"></span><br><span class="line">    def sumOfLeftLeaves(self, root):</span><br><span class="line"></span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        :type root: TreeNode</span><br><span class="line"></span><br><span class="line">        :rtype: int</span><br><span class="line"></span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        if root is None:</span><br><span class="line"></span><br><span class="line">            return 0</span><br><span class="line"></span><br><span class="line">        return self.newSumOfLeftLeaves(root.left,-1) + self.newSumOfLeftLeaves(root.right,1)</span><br><span class="line"></span><br><span class="line">    def newSumOfLeftLeaves(self,root,flag):</span><br><span class="line"></span><br><span class="line">        if root is None:</span><br><span class="line"></span><br><span class="line">            return 0</span><br><span class="line"></span><br><span class="line">        elif root.left is not None and root.right is not None:</span><br><span class="line"></span><br><span class="line">            return self.newSumOfLeftLeaves(root.left,-1) + self.newSumOfLeftLeaves(root.right,1)</span><br><span class="line"></span><br><span class="line">        elif root.left is None and root.right is None:</span><br><span class="line"></span><br><span class="line">            if flag &#x3D;&#x3D; -1:</span><br><span class="line"></span><br><span class="line">                return root.val + self.newSumOfLeftLeaves(root.right,1)</span><br><span class="line"></span><br><span class="line">            else:</span><br><span class="line"></span><br><span class="line">                return 0</span><br><span class="line"></span><br><span class="line">        elif root.left is None and root.right is not None:</span><br><span class="line"></span><br><span class="line">            return self.newSumOfLeftLeaves(root.right,1)</span><br><span class="line"></span><br><span class="line">        elif root.left is not None and root.right is None:</span><br><span class="line"></span><br><span class="line">            return self.newSumOfLeftLeaves(root.left,-1)</span><br></pre></td></tr></table></figure>

<h3 id="405-Convert-a-Number-to-Hexadecimal-40-6-Easy"><a href="#405-Convert-a-Number-to-Hexadecimal-40-6-Easy" class="headerlink" title="405    Convert a Number to Hexadecimal          40.6%    Easy"></a>405    Convert a Number to Hexadecimal          40.6%    Easy</h3><h3 id="408-Valid-Word-Abbreviation-27-2-Easy"><a href="#408-Valid-Word-Abbreviation-27-2-Easy" class="headerlink" title="408    Valid Word Abbreviation          27.2%    Easy"></a>408    Valid Word Abbreviation          27.2%    Easy</h3><h3 id="409-Longest-Palindrome-44-1-Easy"><a href="#409-Longest-Palindrome-44-1-Easy" class="headerlink" title="409    Longest Palindrome          44.1%    Easy"></a>409    Longest Palindrome          44.1%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def longestPalindrome(self, s):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        from collections import Counter</span><br><span class="line">        max_len &#x3D; 0</span><br><span class="line">        odd_count &#x3D; 0</span><br><span class="line">        for _chr,_chrs_len in Counter(s).items():</span><br><span class="line">            if _chrs_len % 2 &#x3D;&#x3D; 1:</span><br><span class="line">                odd_count &#x3D; 1</span><br><span class="line">                max_len +&#x3D; _chrs_len - 1</span><br><span class="line">            else:</span><br><span class="line">                max_len +&#x3D; _chrs_len</span><br><span class="line"></span><br><span class="line">        return max_len + odd_count</span><br></pre></td></tr></table></figure>

<h3 id="412-Fizz-Buzz-58-0-Easy"><a href="#412-Fizz-Buzz-58-0-Easy" class="headerlink" title="412    Fizz Buzz          58.0%    Easy"></a>412    Fizz Buzz          58.0%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def fizzBuzz(self, n):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: List[str]</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        arr &#x3D; []</span><br><span class="line">        for i in range(1,n+1):</span><br><span class="line">            item &#x3D; None</span><br><span class="line">            if i % 3 &#x3D;&#x3D; 0 and i % 5 &#x3D;&#x3D; 0:</span><br><span class="line">                item &#x3D; &quot;FizzBuzz&quot;</span><br><span class="line">                arr.append(item)</span><br><span class="line">                continue</span><br><span class="line">            if i % 3 &#x3D;&#x3D; 0:</span><br><span class="line">                item &#x3D; &quot;Fizz&quot;</span><br><span class="line">                arr.append(item)</span><br><span class="line">                continue</span><br><span class="line">            if i % 5 &#x3D;&#x3D; 0:</span><br><span class="line">                item &#x3D; &quot;Buzz&quot;</span><br><span class="line">                arr.append(item)</span><br><span class="line">                continue</span><br><span class="line">            arr.append(str(i))</span><br><span class="line">        return arr</span><br></pre></td></tr></table></figure>

<h3 id="414-Third-Maximum-Number-26-7-Easy"><a href="#414-Third-Maximum-Number-26-7-Easy" class="headerlink" title="414    Third Maximum Number          26.7%    Easy"></a>414    Third Maximum Number          26.7%    Easy</h3><h3 id="415-Add-Strings-41-1-Easy"><a href="#415-Add-Strings-41-1-Easy" class="headerlink" title="415    Add Strings          41.1%    Easy"></a>415    Add Strings          41.1%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 哼，让我不用，我偏偏要用转 int</span><br><span class="line">class Solution(object):</span><br><span class="line">    def addStrings(self, num1, num2):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type num1: str</span><br><span class="line">        :type num2: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return str(int(num1) + int(num2))</span><br><span class="line"></span><br><span class="line"># 我就不用 int 都可以 one line</span><br><span class="line">class Solution(object):</span><br><span class="line">    def addStrings(self, num1, num2):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type num1: str</span><br><span class="line">        :type num2: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return str(eval(&quot;&#123;&#125; + &#123;&#125;&quot;.format(num1,num2)))</span><br></pre></td></tr></table></figure>

<h3 id="422-Valid-Word-Square-36-2-Easy"><a href="#422-Valid-Word-Square-36-2-Easy" class="headerlink" title="422    Valid Word Square          36.2%    Easy"></a>422    Valid Word Square          36.2%    Easy</h3><h3 id="434-Number-of-Segments-in-a-String-39-0-Easy"><a href="#434-Number-of-Segments-in-a-String-39-0-Easy" class="headerlink" title="434    Number of Segments in a String          39.0%    Easy"></a>434    Number of Segments in a String          39.0%    Easy</h3><h3 id="437-Path-Sum-III-38-6-Easy"><a href="#437-Path-Sum-III-38-6-Easy" class="headerlink" title="437    Path Sum III          38.6%    Easy"></a>437    Path Sum III          38.6%    Easy</h3><h3 id="438-Find-All-Anagrams-in-a-String-33-4-Easy"><a href="#438-Find-All-Anagrams-in-a-String-33-4-Easy" class="headerlink" title="438    Find All Anagrams in a String          33.4%    Easy"></a>438    Find All Anagrams in a String          33.4%    Easy</h3><h3 id="441-Arranging-Coins-36-2-Easy"><a href="#441-Arranging-Coins-36-2-Easy" class="headerlink" title="441    Arranging Coins          36.2%    Easy"></a>441    Arranging Coins          36.2%    Easy</h3><h3 id="447-Number-of-Boomerangs-41-8-Easy"><a href="#447-Number-of-Boomerangs-41-8-Easy" class="headerlink" title="447    Number of Boomerangs          41.8%    Easy"></a>447    Number of Boomerangs          41.8%    Easy</h3><h3 id="448-Find-All-Numbers-Disappeared-in-an-Array-61-3-Easy"><a href="#448-Find-All-Numbers-Disappeared-in-an-Array-61-3-Easy" class="headerlink" title="448    Find All Numbers Disappeared in an Array          61.3%    Easy"></a>448    Find All Numbers Disappeared in an Array          61.3%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def findDisappearedNumbers(self, nums):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: List[int]</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        len_nums &#x3D; len(nums)</span><br><span class="line">        if len_nums &lt; 1:</span><br><span class="line">            return []</span><br><span class="line">        l &#x3D; list(set(range(1,len_nums + 1)) - set(nums))</span><br><span class="line">        return l</span><br></pre></td></tr></table></figure>

<h3 id="453-Minimum-Moves-to-Equal-Array-Elements-45-9-Easy"><a href="#453-Minimum-Moves-to-Equal-Array-Elements-45-9-Easy" class="headerlink" title="453    Minimum Moves to Equal Array Elements          45.9%    Easy"></a>453    Minimum Moves to Equal Array Elements          45.9%    Easy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def minMoves(self, nums):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: int</span><br><span class="line">        n - 1 个元素 ++ 等同于 1 个元素 --</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return sum(nums) - len(nums) * min(nums)</span><br></pre></td></tr></table></figure>

<h3 id="455-Assign-Cookies-48-7-Easy"><a href="#455-Assign-Cookies-48-7-Easy" class="headerlink" title="455    Assign Cookies          48.7%    Easy"></a>455    Assign Cookies          48.7%    Easy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二叉树？</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findContentChildren</span>(<span class="params">self, g, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type g: List[int]</span></span><br><span class="line"><span class="string">        :type s: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(g) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(s) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        g.sort()</span><br><span class="line">        s.sort()</span><br><span class="line">        satisfied_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(s) &gt; <span class="number">0</span>:</span><br><span class="line">            max_cookie = s.pop()</span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">len</span>(g) &gt; <span class="number">0</span>:</span><br><span class="line">                max_child = g.pop()</span><br><span class="line">                <span class="keyword">if</span> max_child &lt;= max_cookie:</span><br><span class="line">                    satisfied_count += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> satisfied_count</span><br></pre></td></tr></table></figure>

<h3 id="459-Repeated-Substring-Pattern-39-6-Easy"><a href="#459-Repeated-Substring-Pattern-39-6-Easy" class="headerlink" title="459    Repeated Substring Pattern          39.6%    Easy"></a>459    Repeated Substring Pattern          39.6%    Easy</h3><h3 id="461-Hamming-Distance-74-8-Easy"><a href="#461-Hamming-Distance-74-8-Easy" class="headerlink" title="461    Hamming Distance          74.8%    Easy"></a>461    Hamming Distance          74.8%    Easy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingDistance</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :type y: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        ma = <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">max</span>(x,y))).replace(<span class="string">&quot;0b&quot;</span>,<span class="string">&quot;&quot;</span>).zfill(<span class="number">31</span>)</span><br><span class="line">        ma_len = <span class="built_in">len</span>(ma)</span><br><span class="line">        mi = <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">min</span>(x,y))).replace(<span class="string">&quot;0b&quot;</span>,<span class="string">&quot;&quot;</span>).zfill(<span class="number">31</span>)</span><br><span class="line">        print(mi)</span><br><span class="line">        print(ma)</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> i, <span class="built_in">chr</span> <span class="keyword">in</span> <span class="built_in">enumerate</span>(mi):</span><br><span class="line">            <span class="keyword">if</span> ma[i] != <span class="built_in">chr</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>
<h3 id="463-Island-Perimeter-56-3-Easy"><a href="#463-Island-Perimeter-56-3-Easy" class="headerlink" title="463    Island Perimeter          56.3%    Easy"></a>463    Island Perimeter          56.3%    Easy</h3><h3 id="475-Heaters-30-3-Easy"><a href="#475-Heaters-30-3-Easy" class="headerlink" title="475    Heaters          30.3%    Easy"></a>475    Heaters          30.3%    Easy</h3><h3 id="566-Reshape-the-Matrix"><a href="#566-Reshape-the-Matrix" class="headerlink" title="566. Reshape the Matrix"></a>566. Reshape the Matrix</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">matrixReshape</span>(<span class="params">self, nums, r, c</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[List[int]]</span></span><br><span class="line"><span class="string">        :type r: int</span></span><br><span class="line"><span class="string">        :type c: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        row_len = <span class="built_in">len</span>(nums)</span><br><span class="line">        col_len = <span class="built_in">len</span>(nums[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> row_len * col_len != r * c:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_nums = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(c)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(r)]</span><br><span class="line">            cur = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> row_nu <span class="keyword">in</span> <span class="built_in">range</span>(row_len):</span><br><span class="line">                <span class="keyword">for</span> col_nu <span class="keyword">in</span> <span class="built_in">range</span>(col_len):</span><br><span class="line">                    cur += <span class="number">1</span></span><br><span class="line">                    new_row_nu = (cur - <span class="number">1</span>) // c</span><br><span class="line">                    new_col_nu = cur - new_row_nu * c - <span class="number">1</span></span><br><span class="line">                    new_nums[new_row_nu][new_col_nu] = nums[row_nu][col_nu]</span><br><span class="line">        <span class="keyword">return</span> new_nums</span><br></pre></td></tr></table></figure>

<h2 id="Medium-集合"><a href="#Medium-集合" class="headerlink" title="Medium 集合"></a>Medium 集合</h2><h3 id="2-Add-Two-Numbers-26-1-Medium"><a href="#2-Add-Two-Numbers-26-1-Medium" class="headerlink" title="2    Add Two Numbers          26.1%    Medium"></a>2    Add Two Numbers          26.1%    Medium</h3><h3 id="3-Longest-Substring-Without-Repeating-Characters-23-6-Medium"><a href="#3-Longest-Substring-Without-Repeating-Characters-23-6-Medium" class="headerlink" title="3    Longest Substring Without Repeating Characters          23.6%    Medium"></a>3    Longest Substring Without Repeating Characters          23.6%    Medium</h3><h3 id="5-Longest-Palindromic-Substring-24-4-Medium"><a href="#5-Longest-Palindromic-Substring-24-4-Medium" class="headerlink" title="5    Longest Palindromic Substring          24.4%    Medium"></a>5    Longest Palindromic Substring          24.4%    Medium</h3><h3 id="11-Container-With-Most-Water-36-0-Medium"><a href="#11-Container-With-Most-Water-36-0-Medium" class="headerlink" title="11    Container With Most Water          36.0%    Medium"></a>11    Container With Most Water          36.0%    Medium</h3><h3 id="12-Integer-to-Roman-42-6-Medium"><a href="#12-Integer-to-Roman-42-6-Medium" class="headerlink" title="12    Integer to Roman          42.6%    Medium"></a>12    Integer to Roman          42.6%    Medium</h3><h3 id="15-3Sum-20-7-Medium"><a href="#15-3Sum-20-7-Medium" class="headerlink" title="15    3Sum          20.7%    Medium"></a>15    3Sum          20.7%    Medium</h3><h3 id="16-3Sum-Closest-30-4-Medium"><a href="#16-3Sum-Closest-30-4-Medium" class="headerlink" title="16    3Sum Closest          30.4%    Medium"></a>16    3Sum Closest          30.4%    Medium</h3><h3 id="17-Letter-Combinations-of-a-Phone-Number-32-1-Medium"><a href="#17-Letter-Combinations-of-a-Phone-Number-32-1-Medium" class="headerlink" title="17    Letter Combinations of a Phone Number          32.1%    Medium"></a>17    Letter Combinations of a Phone Number          32.1%    Medium</h3><h3 id="18-4Sum-25-5-Medium"><a href="#18-4Sum-25-5-Medium" class="headerlink" title="18    4Sum          25.5%    Medium"></a>18    4Sum          25.5%    Medium</h3><h3 id="22-Generate-Parentheses-41-5-Medium"><a href="#22-Generate-Parentheses-41-5-Medium" class="headerlink" title="22    Generate Parentheses          41.5%    Medium"></a>22    Generate Parentheses          41.5%    Medium</h3><h3 id="29-Divide-Two-Integers-15-9-Medium"><a href="#29-Divide-Two-Integers-15-9-Medium" class="headerlink" title="29    Divide Two Integers          15.9%    Medium"></a>29    Divide Two Integers          15.9%    Medium</h3><h3 id="31-Next-Permutation-28-0-Medium"><a href="#31-Next-Permutation-28-0-Medium" class="headerlink" title="31    Next Permutation          28.0%    Medium"></a>31    Next Permutation          28.0%    Medium</h3><h3 id="34-Search-for-a-Range-30-8-Medium"><a href="#34-Search-for-a-Range-30-8-Medium" class="headerlink" title="34    Search for a Range          30.8%    Medium"></a>34    Search for a Range          30.8%    Medium</h3><h3 id="35-Search-Insert-Position-38-8-Medium"><a href="#35-Search-Insert-Position-38-8-Medium" class="headerlink" title="35    Search Insert Position          38.8%    Medium"></a>35    Search Insert Position          38.8%    Medium</h3><h3 id="39-Combination-Sum-35-4-Medium"><a href="#39-Combination-Sum-35-4-Medium" class="headerlink" title="39    Combination Sum          35.4%    Medium"></a>39    Combination Sum          35.4%    Medium</h3><h3 id="40-Combination-Sum-II-31-0-Medium"><a href="#40-Combination-Sum-II-31-0-Medium" class="headerlink" title="40    Combination Sum II          31.0%    Medium"></a>40    Combination Sum II          31.0%    Medium</h3><h3 id="43-Multiply-Strings-25-8-Medium"><a href="#43-Multiply-Strings-25-8-Medium" class="headerlink" title="43    Multiply Strings          25.8%    Medium"></a>43    Multiply Strings          25.8%    Medium</h3><h3 id="46-Permutations-40-1-Medium"><a href="#46-Permutations-40-1-Medium" class="headerlink" title="46    Permutations          40.1%    Medium"></a>46    Permutations          40.1%    Medium</h3><h3 id="47-Permutations-II-30-8-Medium"><a href="#47-Permutations-II-30-8-Medium" class="headerlink" title="47    Permutations II          30.8%    Medium"></a>47    Permutations II          30.8%    Medium</h3><h3 id="48-Rotate-Image-36-9-Medium"><a href="#48-Rotate-Image-36-9-Medium" class="headerlink" title="48    Rotate Image          36.9%    Medium"></a>48    Rotate Image          36.9%    Medium</h3><h3 id="49-Group-Anagrams-31-5-Medium"><a href="#49-Group-Anagrams-31-5-Medium" class="headerlink" title="49    Group Anagrams          31.5%    Medium"></a>49    Group Anagrams          31.5%    Medium</h3><h3 id="50-Pow-x-n-27-1-Medium"><a href="#50-Pow-x-n-27-1-Medium" class="headerlink" title="50    Pow(x, n)          27.1%    Medium"></a>50    Pow(x, n)          27.1%    Medium</h3><h3 id="53-Maximum-Subarray-38-6-Medium"><a href="#53-Maximum-Subarray-38-6-Medium" class="headerlink" title="53    Maximum Subarray          38.6%    Medium"></a>53    Maximum Subarray          38.6%    Medium</h3><h3 id="54-Spiral-Matrix-24-4-Medium"><a href="#54-Spiral-Matrix-24-4-Medium" class="headerlink" title="54    Spiral Matrix          24.4%    Medium"></a>54    Spiral Matrix          24.4%    Medium</h3><h3 id="55-Jump-Game-29-1-Medium"><a href="#55-Jump-Game-29-1-Medium" class="headerlink" title="55    Jump Game          29.1%    Medium"></a>55    Jump Game          29.1%    Medium</h3><h3 id="59-Spiral-Matrix-II-37-8-Medium"><a href="#59-Spiral-Matrix-II-37-8-Medium" class="headerlink" title="59    Spiral Matrix II          37.8%    Medium"></a>59    Spiral Matrix II          37.8%    Medium</h3><h3 id="60-Permutation-Sequence-27-0-Medium"><a href="#60-Permutation-Sequence-27-0-Medium" class="headerlink" title="60    Permutation Sequence          27.0%    Medium"></a>60    Permutation Sequence          27.0%    Medium</h3><h3 id="61-Rotate-List-24-0-Medium"><a href="#61-Rotate-List-24-0-Medium" class="headerlink" title="61    Rotate List          24.0%    Medium"></a>61    Rotate List          24.0%    Medium</h3><h3 id="62-Unique-Paths-39-0-Medium"><a href="#62-Unique-Paths-39-0-Medium" class="headerlink" title="62    Unique Paths          39.0%    Medium"></a>62    Unique Paths          39.0%    Medium</h3><h3 id="63-Unique-Paths-II-30-8-Medium"><a href="#63-Unique-Paths-II-30-8-Medium" class="headerlink" title="63    Unique Paths II          30.8%    Medium"></a>63    Unique Paths II          30.8%    Medium</h3><h3 id="64-Minimum-Path-Sum-37-0-Medium"><a href="#64-Minimum-Path-Sum-37-0-Medium" class="headerlink" title="64    Minimum Path Sum          37.0%    Medium"></a>64    Minimum Path Sum          37.0%    Medium</h3><h3 id="69-Sqrt-x-26-8-Medium"><a href="#69-Sqrt-x-26-8-Medium" class="headerlink" title="69    Sqrt(x)          26.8%    Medium"></a>69    Sqrt(x)          26.8%    Medium</h3><h3 id="71-Simplify-Path-23-9-Medium"><a href="#71-Simplify-Path-23-9-Medium" class="headerlink" title="71    Simplify Path          23.9%    Medium"></a>71    Simplify Path          23.9%    Medium</h3><h3 id="73-Set-Matrix-Zeroes-35-0-Medium"><a href="#73-Set-Matrix-Zeroes-35-0-Medium" class="headerlink" title="73    Set Matrix Zeroes          35.0%    Medium"></a>73    Set Matrix Zeroes          35.0%    Medium</h3><h3 id="74-Search-a-2D-Matrix-35-6-Medium"><a href="#74-Search-a-2D-Matrix-35-6-Medium" class="headerlink" title="74    Search a 2D Matrix          35.6%    Medium"></a>74    Search a 2D Matrix          35.6%    Medium</h3><h3 id="75-Sort-Colors-36-5-Medium"><a href="#75-Sort-Colors-36-5-Medium" class="headerlink" title="75    Sort Colors          36.5%    Medium"></a>75    Sort Colors          36.5%    Medium</h3><h3 id="77-Combinations-37-6-Medium"><a href="#77-Combinations-37-6-Medium" class="headerlink" title="77    Combinations          37.6%    Medium"></a>77    Combinations          37.6%    Medium</h3><h3 id="78-Subsets-36-2-Medium"><a href="#78-Subsets-36-2-Medium" class="headerlink" title="78    Subsets          36.2%    Medium"></a>78    Subsets          36.2%    Medium</h3><h3 id="79-Word-Search-25-2-Medium"><a href="#79-Word-Search-25-2-Medium" class="headerlink" title="79    Word Search          25.2%    Medium"></a>79    Word Search          25.2%    Medium</h3><h3 id="80-Remove-Duplicates-from-Sorted-Array-II-34-7-Medium"><a href="#80-Remove-Duplicates-from-Sorted-Array-II-34-7-Medium" class="headerlink" title="80    Remove Duplicates from Sorted Array II          34.7%    Medium"></a>80    Remove Duplicates from Sorted Array II          34.7%    Medium</h3><h3 id="81-Search-in-Rotated-Sorted-Array-II-32-9-Medium"><a href="#81-Search-in-Rotated-Sorted-Array-II-32-9-Medium" class="headerlink" title="81    Search in Rotated Sorted Array II          32.9%    Medium"></a>81    Search in Rotated Sorted Array II          32.9%    Medium</h3><h3 id="82-Remove-Duplicates-from-Sorted-List-II-28-5-Medium"><a href="#82-Remove-Duplicates-from-Sorted-List-II-28-5-Medium" class="headerlink" title="82    Remove Duplicates from Sorted List II          28.5%    Medium"></a>82    Remove Duplicates from Sorted List II          28.5%    Medium</h3><h3 id="86-Partition-List-31-4-Medium"><a href="#86-Partition-List-31-4-Medium" class="headerlink" title="86    Partition List          31.4%    Medium"></a>86    Partition List          31.4%    Medium</h3><h3 id="89-Gray-Code-39-1-Medium"><a href="#89-Gray-Code-39-1-Medium" class="headerlink" title="89    Gray Code          39.1%    Medium"></a>89    Gray Code          39.1%    Medium</h3><h3 id="90-Subsets-II-33-6-Medium"><a href="#90-Subsets-II-33-6-Medium" class="headerlink" title="90    Subsets II          33.6%    Medium"></a>90    Subsets II          33.6%    Medium</h3><h3 id="91-Decode-Ways-18-8-Medium"><a href="#91-Decode-Ways-18-8-Medium" class="headerlink" title="91    Decode Ways          18.8%    Medium"></a>91    Decode Ways          18.8%    Medium</h3><h3 id="92-Reverse-Linked-List-II-29-7-Medium"><a href="#92-Reverse-Linked-List-II-29-7-Medium" class="headerlink" title="92    Reverse Linked List II          29.7%    Medium"></a>92    Reverse Linked List II          29.7%    Medium</h3><h3 id="93-Restore-IP-Addresses-25-7-Medium"><a href="#93-Restore-IP-Addresses-25-7-Medium" class="headerlink" title="93    Restore IP Addresses          25.7%    Medium"></a>93    Restore IP Addresses          25.7%    Medium</h3><h3 id="94-Binary-Tree-Inorder-Traversal-43-5-Medium"><a href="#94-Binary-Tree-Inorder-Traversal-43-5-Medium" class="headerlink" title="94    Binary Tree Inorder Traversal          43.5%    Medium"></a>94    Binary Tree Inorder Traversal          43.5%    Medium</h3><h3 id="95-Unique-Binary-Search-Trees-II-30-5-Medium"><a href="#95-Unique-Binary-Search-Trees-II-30-5-Medium" class="headerlink" title="95    Unique Binary Search Trees II          30.5%    Medium"></a>95    Unique Binary Search Trees II          30.5%    Medium</h3><h3 id="96-Unique-Binary-Search-Trees-39-6-Medium"><a href="#96-Unique-Binary-Search-Trees-39-6-Medium" class="headerlink" title="96    Unique Binary Search Trees          39.6%    Medium"></a>96    Unique Binary Search Trees          39.6%    Medium</h3><h3 id="98-Validate-Binary-Search-Tree-22-2-Medium"><a href="#98-Validate-Binary-Search-Tree-22-2-Medium" class="headerlink" title="98    Validate Binary Search Tree          22.2%    Medium"></a>98    Validate Binary Search Tree          22.2%    Medium</h3><h3 id="103-Binary-Tree-Zigzag-Level-Order-Traversal-32-0-Medium"><a href="#103-Binary-Tree-Zigzag-Level-Order-Traversal-32-0-Medium" class="headerlink" title="103    Binary Tree Zigzag Level Order Traversal          32.0%    Medium"></a>103    Binary Tree Zigzag Level Order Traversal          32.0%    Medium</h3><h3 id="105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal-30-6-Medium"><a href="#105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal-30-6-Medium" class="headerlink" title="105    Construct Binary Tree from Preorder and Inorder Traversal          30.6%    Medium"></a>105    Construct Binary Tree from Preorder and Inorder Traversal          30.6%    Medium</h3><h3 id="106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal-30-8-Medium"><a href="#106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal-30-8-Medium" class="headerlink" title="106    Construct Binary Tree from Inorder and Postorder Traversal          30.8%    Medium"></a>106    Construct Binary Tree from Inorder and Postorder Traversal          30.8%    Medium</h3><h3 id="108-Convert-Sorted-Array-to-Binary-Search-Tree-40-2-Medium"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree-40-2-Medium" class="headerlink" title="108    Convert Sorted Array to Binary Search Tree          40.2%    Medium"></a>108    Convert Sorted Array to Binary Search Tree          40.2%    Medium</h3><h3 id="109-Convert-Sorted-List-to-Binary-Search-Tree-32-6-Medium"><a href="#109-Convert-Sorted-List-to-Binary-Search-Tree-32-6-Medium" class="headerlink" title="109    Convert Sorted List to Binary Search Tree          32.6%    Medium"></a>109    Convert Sorted List to Binary Search Tree          32.6%    Medium</h3><h3 id="113-Path-Sum-II-31-2-Medium"><a href="#113-Path-Sum-II-31-2-Medium" class="headerlink" title="113    Path Sum II          31.2%    Medium"></a>113    Path Sum II          31.2%    Medium</h3><h3 id="114-Flatten-Binary-Tree-to-Linked-List-33-4-Medium"><a href="#114-Flatten-Binary-Tree-to-Linked-List-33-4-Medium" class="headerlink" title="114    Flatten Binary Tree to Linked List          33.4%    Medium"></a>114    Flatten Binary Tree to Linked List          33.4%    Medium</h3><h3 id="116-Populating-Next-Right-Pointers-in-Each-Node-36-8-Medium"><a href="#116-Populating-Next-Right-Pointers-in-Each-Node-36-8-Medium" class="headerlink" title="116    Populating Next Right Pointers in Each Node          36.8%    Medium"></a>116    Populating Next Right Pointers in Each Node          36.8%    Medium</h3><h3 id="120-Triangle-32-3-Medium"><a href="#120-Triangle-32-3-Medium" class="headerlink" title="120    Triangle          32.3%    Medium"></a>120    Triangle          32.3%    Medium</h3><h3 id="122-Best-Time-to-Buy-and-Sell-Stock-II-45-3-Medium"><a href="#122-Best-Time-to-Buy-and-Sell-Stock-II-45-3-Medium" class="headerlink" title="122    Best Time to Buy and Sell Stock II          45.3%    Medium"></a>122    Best Time to Buy and Sell Stock II          45.3%    Medium</h3><h3 id="127-Word-Ladder-19-3-Medium"><a href="#127-Word-Ladder-19-3-Medium" class="headerlink" title="127    Word Ladder          19.3%    Medium"></a>127    Word Ladder          19.3%    Medium</h3><h3 id="129-Sum-Root-to-Leaf-Numbers-35-0-Medium"><a href="#129-Sum-Root-to-Leaf-Numbers-35-0-Medium" class="headerlink" title="129    Sum Root to Leaf Numbers          35.0%    Medium"></a>129    Sum Root to Leaf Numbers          35.0%    Medium</h3><h3 id="130-Surrounded-Regions-17-4-Medium"><a href="#130-Surrounded-Regions-17-4-Medium" class="headerlink" title="130    Surrounded Regions          17.4%    Medium"></a>130    Surrounded Regions          17.4%    Medium</h3><h3 id="131-Palindrome-Partitioning-30-6-Medium"><a href="#131-Palindrome-Partitioning-30-6-Medium" class="headerlink" title="131    Palindrome Partitioning          30.6%    Medium"></a>131    Palindrome Partitioning          30.6%    Medium</h3><h3 id="133-Clone-Graph-25-0-Medium"><a href="#133-Clone-Graph-25-0-Medium" class="headerlink" title="133    Clone Graph          25.0%    Medium"></a>133    Clone Graph          25.0%    Medium</h3><h3 id="134-Gas-Station-28-5-Medium"><a href="#134-Gas-Station-28-5-Medium" class="headerlink" title="134    Gas Station          28.5%    Medium"></a>134    Gas Station          28.5%    Medium</h3><h3 id="137-Single-Number-II-40-0-Medium"><a href="#137-Single-Number-II-40-0-Medium" class="headerlink" title="137    Single Number II          40.0%    Medium"></a>137    Single Number II          40.0%    Medium</h3><h3 id="139-Word-Break-28-0-Medium"><a href="#139-Word-Break-28-0-Medium" class="headerlink" title="139    Word Break          28.0%    Medium"></a>139    Word Break          28.0%    Medium</h3><h3 id="142-Linked-List-Cycle-II-31-2-Medium"><a href="#142-Linked-List-Cycle-II-31-2-Medium" class="headerlink" title="142    Linked List Cycle II          31.2%    Medium"></a>142    Linked List Cycle II          31.2%    Medium</h3><h3 id="143-Reorder-List-24-5-Medium"><a href="#143-Reorder-List-24-5-Medium" class="headerlink" title="143    Reorder List          24.5%    Medium"></a>143    Reorder List          24.5%    Medium</h3><h3 id="144-Binary-Tree-Preorder-Traversal-42-8-Medium"><a href="#144-Binary-Tree-Preorder-Traversal-42-8-Medium" class="headerlink" title="144    Binary Tree Preorder Traversal          42.8%    Medium"></a>144    Binary Tree Preorder Traversal          42.8%    Medium</h3><h3 id="147-Insertion-Sort-List-31-6-Medium"><a href="#147-Insertion-Sort-List-31-6-Medium" class="headerlink" title="147    Insertion Sort List          31.6%    Medium"></a>147    Insertion Sort List          31.6%    Medium</h3><h3 id="148-Sort-List-27-2-Medium"><a href="#148-Sort-List-27-2-Medium" class="headerlink" title="148    Sort List          27.2%    Medium"></a>148    Sort List          27.2%    Medium</h3><h3 id="150-Evaluate-Reverse-Polish-Notation-25-7-Medium"><a href="#150-Evaluate-Reverse-Polish-Notation-25-7-Medium" class="headerlink" title="150    Evaluate Reverse Polish Notation          25.7%    Medium"></a>150    Evaluate Reverse Polish Notation          25.7%    Medium</h3><h3 id="151-Reverse-Words-in-a-String-15-7-Medium"><a href="#151-Reverse-Words-in-a-String-15-7-Medium" class="headerlink" title="151    Reverse Words in a String          15.7%    Medium"></a>151    Reverse Words in a String          15.7%    Medium</h3><h3 id="152-Maximum-Product-Subarray-24-3-Medium"><a href="#152-Maximum-Product-Subarray-24-3-Medium" class="headerlink" title="152    Maximum Product Subarray          24.3%    Medium"></a>152    Maximum Product Subarray          24.3%    Medium</h3><h3 id="153-Find-Minimum-in-Rotated-Sorted-Array-38-4-Medium"><a href="#153-Find-Minimum-in-Rotated-Sorted-Array-38-4-Medium" class="headerlink" title="153    Find Minimum in Rotated Sorted Array          38.4%    Medium"></a>153    Find Minimum in Rotated Sorted Array          38.4%    Medium</h3><h3 id="156-Binary-Tree-Upside-Down-42-4-Medium"><a href="#156-Binary-Tree-Upside-Down-42-4-Medium" class="headerlink" title="156    Binary Tree Upside Down          42.4%    Medium"></a>156    Binary Tree Upside Down          42.4%    Medium</h3><h3 id="161-One-Edit-Distance-30-3-Medium"><a href="#161-One-Edit-Distance-30-3-Medium" class="headerlink" title="161    One Edit Distance          30.3%    Medium"></a>161    One Edit Distance          30.3%    Medium</h3><h3 id="162-Find-Peak-Element-35-6-Medium"><a href="#162-Find-Peak-Element-35-6-Medium" class="headerlink" title="162    Find Peak Element          35.6%    Medium"></a>162    Find Peak Element          35.6%    Medium</h3><h3 id="163-Missing-Ranges-28-5-Medium"><a href="#163-Missing-Ranges-28-5-Medium" class="headerlink" title="163    Missing Ranges          28.5%    Medium"></a>163    Missing Ranges          28.5%    Medium</h3><h3 id="166-Fraction-to-Recurring-Decimal-16-7-Medium"><a href="#166-Fraction-to-Recurring-Decimal-16-7-Medium" class="headerlink" title="166    Fraction to Recurring Decimal          16.7%    Medium"></a>166    Fraction to Recurring Decimal          16.7%    Medium</h3><h3 id="167-Two-Sum-II-Input-array-is-sorted-47-9-Medium"><a href="#167-Two-Sum-II-Input-array-is-sorted-47-9-Medium" class="headerlink" title="167    Two Sum II - Input array is sorted          47.9%    Medium"></a>167    Two Sum II - Input array is sorted          47.9%    Medium</h3><h3 id="173-Binary-Search-Tree-Iterator-38-7-Medium"><a href="#173-Binary-Search-Tree-Iterator-38-7-Medium" class="headerlink" title="173    Binary Search Tree Iterator          38.7%    Medium"></a>173    Binary Search Tree Iterator          38.7%    Medium</h3><h3 id="179-Largest-Number-21-3-Medium"><a href="#179-Largest-Number-21-3-Medium" class="headerlink" title="179    Largest Number          21.3%    Medium"></a>179    Largest Number          21.3%    Medium</h3><h3 id="186-Reverse-Words-in-a-String-II-28-5-Medium"><a href="#186-Reverse-Words-in-a-String-II-28-5-Medium" class="headerlink" title="186    Reverse Words in a String II          28.5%    Medium"></a>186    Reverse Words in a String II          28.5%    Medium</h3><h3 id="187-Repeated-DNA-Sequences-29-3-Medium"><a href="#187-Repeated-DNA-Sequences-29-3-Medium" class="headerlink" title="187    Repeated DNA Sequences          29.3%    Medium"></a>187    Repeated DNA Sequences          29.3%    Medium</h3><h3 id="199-Binary-Tree-Right-Side-View-38-4-Medium"><a href="#199-Binary-Tree-Right-Side-View-38-4-Medium" class="headerlink" title="199    Binary Tree Right Side View          38.4%    Medium"></a>199    Binary Tree Right Side View          38.4%    Medium</h3><h3 id="200-Number-of-Islands-32-0-Medium"><a href="#200-Number-of-Islands-32-0-Medium" class="headerlink" title="200    Number of Islands          32.0%    Medium"></a>200    Number of Islands          32.0%    Medium</h3><h3 id="201-Bitwise-AND-of-Numbers-Range-33-0-Medium"><a href="#201-Bitwise-AND-of-Numbers-Range-33-0-Medium" class="headerlink" title="201    Bitwise AND of Numbers Range          33.0%    Medium"></a>201    Bitwise AND of Numbers Range          33.0%    Medium</h3><h3 id="207-Course-Schedule-30-2-Medium"><a href="#207-Course-Schedule-30-2-Medium" class="headerlink" title="207    Course Schedule          30.2%    Medium"></a>207    Course Schedule          30.2%    Medium</h3><h3 id="208-Implement-Trie-Prefix-Tree-25-6-Medium"><a href="#208-Implement-Trie-Prefix-Tree-25-6-Medium" class="headerlink" title="208    Implement Trie (Prefix Tree)          25.6%    Medium"></a>208    Implement Trie (Prefix Tree)          25.6%    Medium</h3><h3 id="209-Minimum-Size-Subarray-Sum-28-4-Medium"><a href="#209-Minimum-Size-Subarray-Sum-28-4-Medium" class="headerlink" title="209    Minimum Size Subarray Sum          28.4%    Medium"></a>209    Minimum Size Subarray Sum          28.4%    Medium</h3><h3 id="210-Course-Schedule-II-25-3-Medium"><a href="#210-Course-Schedule-II-25-3-Medium" class="headerlink" title="210    Course Schedule II          25.3%    Medium"></a>210    Course Schedule II          25.3%    Medium</h3><h3 id="211-Add-and-Search-Word-Data-structure-design-20-1-Medium"><a href="#211-Add-and-Search-Word-Data-structure-design-20-1-Medium" class="headerlink" title="211    Add and Search Word - Data structure design          20.1%    Medium"></a>211    Add and Search Word - Data structure design          20.1%    Medium</h3><h3 id="213-House-Robber-II-32-9-Medium"><a href="#213-House-Robber-II-32-9-Medium" class="headerlink" title="213    House Robber II          32.9%    Medium"></a>213    House Robber II          32.9%    Medium</h3><h3 id="215-Kth-Largest-Element-in-an-Array-37-2-Medium"><a href="#215-Kth-Largest-Element-in-an-Array-37-2-Medium" class="headerlink" title="215    Kth Largest Element in an Array          37.2%    Medium"></a>215    Kth Largest Element in an Array          37.2%    Medium</h3><h3 id="216-Combination-Sum-III-41-5-Medium"><a href="#216-Combination-Sum-III-41-5-Medium" class="headerlink" title="216    Combination Sum III          41.5%    Medium"></a>216    Combination Sum III          41.5%    Medium</h3><h3 id="220-Contains-Duplicate-III-19-5-Medium"><a href="#220-Contains-Duplicate-III-19-5-Medium" class="headerlink" title="220    Contains Duplicate III          19.5%    Medium"></a>220    Contains Duplicate III          19.5%    Medium</h3><h3 id="221-Maximal-Square-26-8-Medium"><a href="#221-Maximal-Square-26-8-Medium" class="headerlink" title="221    Maximal Square          26.8%    Medium"></a>221    Maximal Square          26.8%    Medium</h3><h3 id="222-Count-Complete-Tree-Nodes-26-9-Medium"><a href="#222-Count-Complete-Tree-Nodes-26-9-Medium" class="headerlink" title="222    Count Complete Tree Nodes          26.9%    Medium"></a>222    Count Complete Tree Nodes          26.9%    Medium</h3><h3 id="227-Basic-Calculator-II-27-9-Medium"><a href="#227-Basic-Calculator-II-27-9-Medium" class="headerlink" title="227    Basic Calculator II          27.9%    Medium"></a>227    Basic Calculator II          27.9%    Medium</h3><h3 id="228-Summary-Ranges-27-8-Medium"><a href="#228-Summary-Ranges-27-8-Medium" class="headerlink" title="228    Summary Ranges          27.8%    Medium"></a>228    Summary Ranges          27.8%    Medium</h3><h3 id="229-Majority-Element-II-27-6-Medium"><a href="#229-Majority-Element-II-27-6-Medium" class="headerlink" title="229    Majority Element II          27.6%    Medium"></a>229    Majority Element II          27.6%    Medium</h3><h3 id="230-Kth-Smallest-Element-in-a-BST-41-7-Medium"><a href="#230-Kth-Smallest-Element-in-a-BST-41-7-Medium" class="headerlink" title="230    Kth Smallest Element in a BST          41.7%    Medium"></a>230    Kth Smallest Element in a BST          41.7%    Medium</h3><h3 id="236-Lowest-Common-Ancestor-of-a-Binary-Tree-29-2-Medium"><a href="#236-Lowest-Common-Ancestor-of-a-Binary-Tree-29-2-Medium" class="headerlink" title="236    Lowest Common Ancestor of a Binary Tree          29.2%    Medium"></a>236    Lowest Common Ancestor of a Binary Tree          29.2%    Medium</h3><h3 id="238-Product-of-Array-Except-Self-46-8-Medium"><a href="#238-Product-of-Array-Except-Self-46-8-Medium" class="headerlink" title="238    Product of Array Except Self          46.8%    Medium"></a>238    Product of Array Except Self          46.8%    Medium</h3><h3 id="240-Search-a-2D-Matrix-II-37-8-Medium"><a href="#240-Search-a-2D-Matrix-II-37-8-Medium" class="headerlink" title="240    Search a 2D Matrix II          37.8%    Medium"></a>240    Search a 2D Matrix II          37.8%    Medium</h3><h3 id="241-Different-Ways-to-Add-Parentheses-40-9-Medium"><a href="#241-Different-Ways-to-Add-Parentheses-40-9-Medium" class="headerlink" title="241    Different Ways to Add Parentheses          40.9%    Medium"></a>241    Different Ways to Add Parentheses          40.9%    Medium</h3><h3 id="244-Shortest-Word-Distance-II-34-8-Medium"><a href="#244-Shortest-Word-Distance-II-34-8-Medium" class="headerlink" title="244    Shortest Word Distance II          34.8%    Medium"></a>244    Shortest Word Distance II          34.8%    Medium</h3><h3 id="245-Shortest-Word-Distance-III-49-2-Medium"><a href="#245-Shortest-Word-Distance-III-49-2-Medium" class="headerlink" title="245    Shortest Word Distance III          49.2%    Medium"></a>245    Shortest Word Distance III          49.2%    Medium</h3><h3 id="247-Strobogrammatic-Number-II-38-0-Medium"><a href="#247-Strobogrammatic-Number-II-38-0-Medium" class="headerlink" title="247    Strobogrammatic Number II          38.0%    Medium"></a>247    Strobogrammatic Number II          38.0%    Medium</h3><h3 id="250-Count-Univalue-Subtrees-40-0-Medium"><a href="#250-Count-Univalue-Subtrees-40-0-Medium" class="headerlink" title="250    Count Univalue Subtrees          40.0%    Medium"></a>250    Count Univalue Subtrees          40.0%    Medium</h3><h3 id="251-Flatten-2D-Vector-38-5-Medium"><a href="#251-Flatten-2D-Vector-38-5-Medium" class="headerlink" title="251    Flatten 2D Vector          38.5%    Medium"></a>251    Flatten 2D Vector          38.5%    Medium</h3><h3 id="253-Meeting-Rooms-II-38-0-Medium"><a href="#253-Meeting-Rooms-II-38-0-Medium" class="headerlink" title="253    Meeting Rooms II          38.0%    Medium"></a>253    Meeting Rooms II          38.0%    Medium</h3><h3 id="254-Factor-Combinations-40-0-Medium"><a href="#254-Factor-Combinations-40-0-Medium" class="headerlink" title="254    Factor Combinations          40.0%    Medium"></a>254    Factor Combinations          40.0%    Medium</h3><h3 id="255-Verify-Preorder-Sequence-in-Binary-Search-Tree-38-7-Medium"><a href="#255-Verify-Preorder-Sequence-in-Binary-Search-Tree-38-7-Medium" class="headerlink" title="255    Verify Preorder Sequence in Binary Search Tree          38.7%    Medium"></a>255    Verify Preorder Sequence in Binary Search Tree          38.7%    Medium</h3><h3 id="256-Paint-House-45-7-Medium"><a href="#256-Paint-House-45-7-Medium" class="headerlink" title="256    Paint House          45.7%    Medium"></a>256    Paint House          45.7%    Medium</h3><h3 id="259-3Sum-Smaller-40-5-Medium"><a href="#259-3Sum-Smaller-40-5-Medium" class="headerlink" title="259    3Sum Smaller          40.5%    Medium"></a>259    3Sum Smaller          40.5%    Medium</h3><h3 id="260-Single-Number-III-48-9-Medium"><a href="#260-Single-Number-III-48-9-Medium" class="headerlink" title="260    Single Number III          48.9%    Medium"></a>260    Single Number III          48.9%    Medium</h3><h3 id="261-Graph-Valid-Tree-36-3-Medium"><a href="#261-Graph-Valid-Tree-36-3-Medium" class="headerlink" title="261    Graph Valid Tree          36.3%    Medium"></a>261    Graph Valid Tree          36.3%    Medium</h3><h3 id="264-Ugly-Number-II-31-3-Medium"><a href="#264-Ugly-Number-II-31-3-Medium" class="headerlink" title="264    Ugly Number II          31.3%    Medium"></a>264    Ugly Number II          31.3%    Medium</h3><h3 id="267-Palindrome-Permutation-II-30-8-Medium"><a href="#267-Palindrome-Permutation-II-30-8-Medium" class="headerlink" title="267    Palindrome Permutation II          30.8%    Medium"></a>267    Palindrome Permutation II          30.8%    Medium</h3><h3 id="268-Missing-Number-43-3-Medium"><a href="#268-Missing-Number-43-3-Medium" class="headerlink" title="268    Missing Number          43.3%    Medium"></a>268    Missing Number          43.3%    Medium</h3><h3 id="271-Encode-and-Decode-Strings-26-5-Medium"><a href="#271-Encode-and-Decode-Strings-26-5-Medium" class="headerlink" title="271    Encode and Decode Strings          26.5%    Medium"></a>271    Encode and Decode Strings          26.5%    Medium</h3><h3 id="274-H-Index-31-9-Medium"><a href="#274-H-Index-31-9-Medium" class="headerlink" title="274    H-Index          31.9%    Medium"></a>274    H-Index          31.9%    Medium</h3><h3 id="275-H-Index-II-33-5-Medium"><a href="#275-H-Index-II-33-5-Medium" class="headerlink" title="275    H-Index II          33.5%    Medium"></a>275    H-Index II          33.5%    Medium</h3><h3 id="277-Find-the-Celebrity-35-4-Medium"><a href="#277-Find-the-Celebrity-35-4-Medium" class="headerlink" title="277    Find the Celebrity          35.4%    Medium"></a>277    Find the Celebrity          35.4%    Medium</h3><h3 id="279-Perfect-Squares-34-7-Medium"><a href="#279-Perfect-Squares-34-7-Medium" class="headerlink" title="279    Perfect Squares          34.7%    Medium"></a>279    Perfect Squares          34.7%    Medium</h3><h3 id="280-Wiggle-Sort-54-5-Medium"><a href="#280-Wiggle-Sort-54-5-Medium" class="headerlink" title="280    Wiggle Sort          54.5%    Medium"></a>280    Wiggle Sort          54.5%    Medium</h3><h3 id="281-Zigzag-Iterator-47-9-Medium"><a href="#281-Zigzag-Iterator-47-9-Medium" class="headerlink" title="281    Zigzag Iterator          47.9%    Medium"></a>281    Zigzag Iterator          47.9%    Medium</h3><h3 id="284-Peeking-Iterator-35-0-Medium"><a href="#284-Peeking-Iterator-35-0-Medium" class="headerlink" title="284    Peeking Iterator          35.0%    Medium"></a>284    Peeking Iterator          35.0%    Medium</h3><h3 id="285-Inorder-Successor-in-BST-36-2-Medium"><a href="#285-Inorder-Successor-in-BST-36-2-Medium" class="headerlink" title="285    Inorder Successor in BST          36.2%    Medium"></a>285    Inorder Successor in BST          36.2%    Medium</h3><h3 id="286-Walls-and-Gates-42-0-Medium"><a href="#286-Walls-and-Gates-42-0-Medium" class="headerlink" title="286    Walls and Gates          42.0%    Medium"></a>286    Walls and Gates          42.0%    Medium</h3><h3 id="289-Game-of-Life-36-2-Medium"><a href="#289-Game-of-Life-36-2-Medium" class="headerlink" title="289    Game of Life          36.2%    Medium"></a>289    Game of Life          36.2%    Medium</h3><h3 id="294-Flip-Game-II-44-9-Medium"><a href="#294-Flip-Game-II-44-9-Medium" class="headerlink" title="294    Flip Game II          44.9%    Medium"></a>294    Flip Game II          44.9%    Medium</h3><h3 id="298-Binary-Tree-Longest-Consecutive-Sequence-39-7-Medium"><a href="#298-Binary-Tree-Longest-Consecutive-Sequence-39-7-Medium" class="headerlink" title="298    Binary Tree Longest Consecutive Sequence          39.7%    Medium"></a>298    Binary Tree Longest Consecutive Sequence          39.7%    Medium</h3><h3 id="300-Longest-Increasing-Subsequence-37-2-Medium"><a href="#300-Longest-Increasing-Subsequence-37-2-Medium" class="headerlink" title="300    Longest Increasing Subsequence          37.2%    Medium"></a>300    Longest Increasing Subsequence          37.2%    Medium</h3><h3 id="304-Range-Sum-Query-2D-Immutable-22-7-Medium"><a href="#304-Range-Sum-Query-2D-Immutable-22-7-Medium" class="headerlink" title="304    Range Sum Query 2D - Immutable          22.7%    Medium"></a>304    Range Sum Query 2D - Immutable          22.7%    Medium</h3><h3 id="306-Additive-Number-27-1-Medium"><a href="#306-Additive-Number-27-1-Medium" class="headerlink" title="306    Additive Number          27.1%    Medium"></a>306    Additive Number          27.1%    Medium</h3><h3 id="307-Range-Sum-Query-Mutable-18-5-Medium"><a href="#307-Range-Sum-Query-Mutable-18-5-Medium" class="headerlink" title="307    Range Sum Query - Mutable          18.5%    Medium"></a>307    Range Sum Query - Mutable          18.5%    Medium</h3><h3 id="309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown-39-4-Medium"><a href="#309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown-39-4-Medium" class="headerlink" title="309    Best Time to Buy and Sell Stock with Cooldown          39.4%    Medium"></a>309    Best Time to Buy and Sell Stock with Cooldown          39.4%    Medium</h3><h3 id="310-Minimum-Height-Trees-28-3-Medium"><a href="#310-Minimum-Height-Trees-28-3-Medium" class="headerlink" title="310    Minimum Height Trees          28.3%    Medium"></a>310    Minimum Height Trees          28.3%    Medium</h3><h3 id="311-Sparse-Matrix-Multiplication-50-4-Medium"><a href="#311-Sparse-Matrix-Multiplication-50-4-Medium" class="headerlink" title="311    Sparse Matrix Multiplication          50.4%    Medium"></a>311    Sparse Matrix Multiplication          50.4%    Medium</h3><h3 id="313-Super-Ugly-Number-36-8-Medium"><a href="#313-Super-Ugly-Number-36-8-Medium" class="headerlink" title="313    Super Ugly Number          36.8%    Medium"></a>313    Super Ugly Number          36.8%    Medium</h3><h3 id="314-Binary-Tree-Vertical-Order-Traversal-34-9-Medium"><a href="#314-Binary-Tree-Vertical-Order-Traversal-34-9-Medium" class="headerlink" title="314    Binary Tree Vertical Order Traversal          34.9%    Medium"></a>314    Binary Tree Vertical Order Traversal          34.9%    Medium</h3><h3 id="318-Maximum-Product-of-Word-Lengths-41-9-Medium"><a href="#318-Maximum-Product-of-Word-Lengths-41-9-Medium" class="headerlink" title="318    Maximum Product of Word Lengths          41.9%    Medium"></a>318    Maximum Product of Word Lengths          41.9%    Medium</h3><h3 id="319-Bulb-Switcher-41-8-Medium"><a href="#319-Bulb-Switcher-41-8-Medium" class="headerlink" title="319    Bulb Switcher          41.8%    Medium"></a>319    Bulb Switcher          41.8%    Medium</h3><h3 id="320-Generalized-Abbreviation-43-0-Medium"><a href="#320-Generalized-Abbreviation-43-0-Medium" class="headerlink" title="320    Generalized Abbreviation          43.0%    Medium"></a>320    Generalized Abbreviation          43.0%    Medium</h3><h3 id="322-Coin-Change-25-9-Medium"><a href="#322-Coin-Change-25-9-Medium" class="headerlink" title="322    Coin Change          25.9%    Medium"></a>322    Coin Change          25.9%    Medium</h3><h3 id="323-Number-of-Connected-Components-in-an-Undirected-Graph-46-2-Medium"><a href="#323-Number-of-Connected-Components-in-an-Undirected-Graph-46-2-Medium" class="headerlink" title="323    Number of Connected Components in an Undirected Graph          46.2%    Medium"></a>323    Number of Connected Components in an Undirected Graph          46.2%    Medium</h3><h3 id="324-Wiggle-Sort-II-25-0-Medium"><a href="#324-Wiggle-Sort-II-25-0-Medium" class="headerlink" title="324    Wiggle Sort II          25.0%    Medium"></a>324    Wiggle Sort II          25.0%    Medium</h3><h3 id="325-Maximum-Size-Subarray-Sum-Equals-k-41-4-Medium"><a href="#325-Maximum-Size-Subarray-Sum-Equals-k-41-4-Medium" class="headerlink" title="325    Maximum Size Subarray Sum Equals k          41.4%    Medium"></a>325    Maximum Size Subarray Sum Equals k          41.4%    Medium</h3><h3 id="328-Odd-Even-Linked-List-41-6-Medium"><a href="#328-Odd-Even-Linked-List-41-6-Medium" class="headerlink" title="328    Odd Even Linked List          41.6%    Medium"></a>328    Odd Even Linked List          41.6%    Medium</h3><h3 id="331-Verify-Preorder-Serialization-of-a-Binary-Tree-34-9-Medium"><a href="#331-Verify-Preorder-Serialization-of-a-Binary-Tree-34-9-Medium" class="headerlink" title="331    Verify Preorder Serialization of a Binary Tree          34.9%    Medium"></a>331    Verify Preorder Serialization of a Binary Tree          34.9%    Medium</h3><h3 id="332-Reconstruct-Itinerary-27-7-Medium"><a href="#332-Reconstruct-Itinerary-27-7-Medium" class="headerlink" title="332    Reconstruct Itinerary          27.7%    Medium"></a>332    Reconstruct Itinerary          27.7%    Medium</h3><h3 id="333-Largest-BST-Subtree-29-6-Medium"><a href="#333-Largest-BST-Subtree-29-6-Medium" class="headerlink" title="333    Largest BST Subtree          29.6%    Medium"></a>333    Largest BST Subtree          29.6%    Medium</h3><h3 id="334-Increasing-Triplet-Subsequence-37-6-Medium"><a href="#334-Increasing-Triplet-Subsequence-37-6-Medium" class="headerlink" title="334    Increasing Triplet Subsequence          37.6%    Medium"></a>334    Increasing Triplet Subsequence          37.6%    Medium</h3><h3 id="337-House-Robber-III-41-3-Medium"><a href="#337-House-Robber-III-41-3-Medium" class="headerlink" title="337    House Robber III          41.3%    Medium"></a>337    House Robber III          41.3%    Medium</h3><h3 id="338-Counting-Bits-59-3-Medium"><a href="#338-Counting-Bits-59-3-Medium" class="headerlink" title="338    Counting Bits          59.3%    Medium"></a>338    Counting Bits          59.3%    Medium</h3><h3 id="341-Flatten-Nested-List-Iterator-38-2-Medium"><a href="#341-Flatten-Nested-List-Iterator-38-2-Medium" class="headerlink" title="341    Flatten Nested List Iterator          38.2%    Medium"></a>341    Flatten Nested List Iterator          38.2%    Medium</h3><h3 id="343-Integer-Break-44-6-Medium"><a href="#343-Integer-Break-44-6-Medium" class="headerlink" title="343    Integer Break          44.6%    Medium"></a>343    Integer Break          44.6%    Medium</h3><h3 id="347-Top-K-Frequent-Elements-45-6-Medium"><a href="#347-Top-K-Frequent-Elements-45-6-Medium" class="headerlink" title="347    Top K Frequent Elements          45.6%    Medium"></a>347    Top K Frequent Elements          45.6%    Medium</h3><h3 id="348-Design-Tic-Tac-Toe-45-0-Medium"><a href="#348-Design-Tic-Tac-Toe-45-0-Medium" class="headerlink" title="348    Design Tic-Tac-Toe          45.0%    Medium"></a>348    Design Tic-Tac-Toe          45.0%    Medium</h3><h3 id="351-Android-Unlock-Patterns-42-3-Medium"><a href="#351-Android-Unlock-Patterns-42-3-Medium" class="headerlink" title="351    Android Unlock Patterns          42.3%    Medium"></a>351    Android Unlock Patterns          42.3%    Medium</h3><h3 id="353-Design-Snake-Game-25-1-Medium"><a href="#353-Design-Snake-Game-25-1-Medium" class="headerlink" title="353    Design Snake Game          25.1%    Medium"></a>353    Design Snake Game          25.1%    Medium</h3><h3 id="355-Design-Twitter-24-1-Medium"><a href="#355-Design-Twitter-24-1-Medium" class="headerlink" title="355    Design Twitter          24.1%    Medium"></a>355    Design Twitter          24.1%    Medium</h3><h3 id="356-Line-Reflection-29-7-Medium"><a href="#356-Line-Reflection-29-7-Medium" class="headerlink" title="356    Line Reflection          29.7%    Medium"></a>356    Line Reflection          29.7%    Medium</h3><h3 id="357-Count-Numbers-with-Unique-Digits-44-8-Medium"><a href="#357-Count-Numbers-with-Unique-Digits-44-8-Medium" class="headerlink" title="357    Count Numbers with Unique Digits          44.8%    Medium"></a>357    Count Numbers with Unique Digits          44.8%    Medium</h3><h3 id="360-Sort-Transformed-Array-43-0-Medium"><a href="#360-Sort-Transformed-Array-43-0-Medium" class="headerlink" title="360    Sort Transformed Array          43.0%    Medium"></a>360    Sort Transformed Array          43.0%    Medium</h3><h3 id="361-Bomb-Enemy-37-8-Medium"><a href="#361-Bomb-Enemy-37-8-Medium" class="headerlink" title="361    Bomb Enemy          37.8%    Medium"></a>361    Bomb Enemy          37.8%    Medium</h3><h3 id="362-Design-Hit-Counter-52-4-Medium"><a href="#362-Design-Hit-Counter-52-4-Medium" class="headerlink" title="362    Design Hit Counter          52.4%    Medium"></a>362    Design Hit Counter          52.4%    Medium</h3><h3 id="364-Nested-List-Weight-Sum-II-50-2-Medium"><a href="#364-Nested-List-Weight-Sum-II-50-2-Medium" class="headerlink" title="364    Nested List Weight Sum II          50.2%    Medium"></a>364    Nested List Weight Sum II          50.2%    Medium</h3><h3 id="365-Water-and-Jug-Problem-25-9-Medium"><a href="#365-Water-and-Jug-Problem-25-9-Medium" class="headerlink" title="365    Water and Jug Problem          25.9%    Medium"></a>365    Water and Jug Problem          25.9%    Medium</h3><h3 id="366-Find-Leaves-of-Binary-Tree-56-7-Medium"><a href="#366-Find-Leaves-of-Binary-Tree-56-7-Medium" class="headerlink" title="366    Find Leaves of Binary Tree          56.7%    Medium"></a>366    Find Leaves of Binary Tree          56.7%    Medium</h3><h3 id="367-Valid-Perfect-Square-37-2-Medium"><a href="#367-Valid-Perfect-Square-37-2-Medium" class="headerlink" title="367    Valid Perfect Square          37.2%    Medium"></a>367    Valid Perfect Square          37.2%    Medium</h3><h3 id="368-Largest-Divisible-Subset-32-7-Medium"><a href="#368-Largest-Divisible-Subset-32-7-Medium" class="headerlink" title="368    Largest Divisible Subset          32.7%    Medium"></a>368    Largest Divisible Subset          32.7%    Medium</h3><h3 id="369-Plus-One-Linked-List-52-2-Medium"><a href="#369-Plus-One-Linked-List-52-2-Medium" class="headerlink" title="369    Plus One Linked List          52.2%    Medium"></a>369    Plus One Linked List          52.2%    Medium</h3><h3 id="370-Range-Addition-52-8-Medium"><a href="#370-Range-Addition-52-8-Medium" class="headerlink" title="370    Range Addition          52.8%    Medium"></a>370    Range Addition          52.8%    Medium</h3><h3 id="372-Super-Pow-32-9-Medium"><a href="#372-Super-Pow-32-9-Medium" class="headerlink" title="372    Super Pow          32.9%    Medium"></a>372    Super Pow          32.9%    Medium</h3><h3 id="373-Find-K-Pairs-with-Smallest-Sums-29-5-Medium"><a href="#373-Find-K-Pairs-with-Smallest-Sums-29-5-Medium" class="headerlink" title="373    Find K Pairs with Smallest Sums          29.5%    Medium"></a>373    Find K Pairs with Smallest Sums          29.5%    Medium</h3><h3 id="375-Guess-Number-Higher-or-Lower-II-34-7-Medium"><a href="#375-Guess-Number-Higher-or-Lower-II-34-7-Medium" class="headerlink" title="375    Guess Number Higher or Lower II          34.7%    Medium"></a>375    Guess Number Higher or Lower II          34.7%    Medium</h3><h3 id="376-Wiggle-Subsequence-34-3-Medium"><a href="#376-Wiggle-Subsequence-34-3-Medium" class="headerlink" title="376    Wiggle Subsequence          34.3%    Medium"></a>376    Wiggle Subsequence          34.3%    Medium</h3><h3 id="377-Combination-Sum-IV-41-5-Medium"><a href="#377-Combination-Sum-IV-41-5-Medium" class="headerlink" title="377    Combination Sum IV          41.5%    Medium"></a>377    Combination Sum IV          41.5%    Medium</h3><h3 id="378-Kth-Smallest-Element-in-a-Sorted-Matrix-42-9-Medium"><a href="#378-Kth-Smallest-Element-in-a-Sorted-Matrix-42-9-Medium" class="headerlink" title="378    Kth Smallest Element in a Sorted Matrix          42.9%    Medium"></a>378    Kth Smallest Element in a Sorted Matrix          42.9%    Medium</h3><h3 id="379-Design-Phone-Directory-29-1-Medium"><a href="#379-Design-Phone-Directory-29-1-Medium" class="headerlink" title="379    Design Phone Directory          29.1%    Medium"></a>379    Design Phone Directory          29.1%    Medium</h3><h3 id="382-Linked-List-Random-Node-46-1-Medium"><a href="#382-Linked-List-Random-Node-46-1-Medium" class="headerlink" title="382    Linked List Random Node          46.1%    Medium"></a>382    Linked List Random Node          46.1%    Medium</h3><h3 id="384-Shuffle-an-Array-44-7-Medium"><a href="#384-Shuffle-an-Array-44-7-Medium" class="headerlink" title="384    Shuffle an Array          44.7%    Medium"></a>384    Shuffle an Array          44.7%    Medium</h3><h3 id="385-Mini-Parser-29-4-Medium"><a href="#385-Mini-Parser-29-4-Medium" class="headerlink" title="385    Mini Parser          29.4%    Medium"></a>385    Mini Parser          29.4%    Medium</h3><h3 id="386-Lexicographical-Numbers-39-0-Medium"><a href="#386-Lexicographical-Numbers-39-0-Medium" class="headerlink" title="386    Lexicographical Numbers          39.0%    Medium"></a>386    Lexicographical Numbers          39.0%    Medium</h3><h3 id="388-Longest-Absolute-File-Path-34-4-Medium"><a href="#388-Longest-Absolute-File-Path-34-4-Medium" class="headerlink" title="388    Longest Absolute File Path          34.4%    Medium"></a>388    Longest Absolute File Path          34.4%    Medium</h3><h3 id="390-Elimination-Game-37-4-Medium"><a href="#390-Elimination-Game-37-4-Medium" class="headerlink" title="390    Elimination Game          37.4%    Medium"></a>390    Elimination Game          37.4%    Medium</h3><h3 id="392-Is-Subsequence-44-1-Medium"><a href="#392-Is-Subsequence-44-1-Medium" class="headerlink" title="392    Is Subsequence          44.1%    Medium"></a>392    Is Subsequence          44.1%    Medium</h3><h3 id="393-UTF-8-Validation-35-2-Medium"><a href="#393-UTF-8-Validation-35-2-Medium" class="headerlink" title="393    UTF-8 Validation          35.2%    Medium"></a>393    UTF-8 Validation          35.2%    Medium</h3><h3 id="394-Decode-String-39-7-Medium"><a href="#394-Decode-String-39-7-Medium" class="headerlink" title="394    Decode String          39.7%    Medium"></a>394    Decode String          39.7%    Medium</h3><h3 id="395-Longest-Substring-with-At-Least-K-Repeating-Characters-35-3-Medium"><a href="#395-Longest-Substring-with-At-Least-K-Repeating-Characters-35-3-Medium" class="headerlink" title="395    Longest Substring with At Least K Repeating Characters          35.3%    Medium"></a>395    Longest Substring with At Least K Repeating Characters          35.3%    Medium</h3><h3 id="397-Integer-Replacement-28-9-Medium"><a href="#397-Integer-Replacement-28-9-Medium" class="headerlink" title="397    Integer Replacement          28.9%    Medium"></a>397    Integer Replacement          28.9%    Medium</h3><h3 id="398-Random-Pick-Index-39-0-Medium"><a href="#398-Random-Pick-Index-39-0-Medium" class="headerlink" title="398    Random Pick Index          39.0%    Medium"></a>398    Random Pick Index          39.0%    Medium</h3><h3 id="399-Evaluate-Division-39-2-Medium"><a href="#399-Evaluate-Division-39-2-Medium" class="headerlink" title="399    Evaluate Division          39.2%    Medium"></a>399    Evaluate Division          39.2%    Medium</h3><h3 id="402-Remove-K-Digits-25-9-Medium"><a href="#402-Remove-K-Digits-25-9-Medium" class="headerlink" title="402    Remove K Digits          25.9%    Medium"></a>402    Remove K Digits          25.9%    Medium</h3><h3 id="406-Queue-Reconstruction-by-Height-54-1-Medium"><a href="#406-Queue-Reconstruction-by-Height-54-1-Medium" class="headerlink" title="406    Queue Reconstruction by Height          54.1%    Medium"></a>406    Queue Reconstruction by Height          54.1%    Medium</h3><h3 id="413-Arithmetic-Slices-54-2-Medium"><a href="#413-Arithmetic-Slices-54-2-Medium" class="headerlink" title="413    Arithmetic Slices          54.2%    Medium"></a>413    Arithmetic Slices          54.2%    Medium</h3><h3 id="416-Partition-Equal-Subset-Sum-37-2-Medium"><a href="#416-Partition-Equal-Subset-Sum-37-2-Medium" class="headerlink" title="416    Partition Equal Subset Sum          37.2%    Medium"></a>416    Partition Equal Subset Sum          37.2%    Medium</h3><h3 id="417-Pacific-Atlantic-Water-Flow-32-7-Medium"><a href="#417-Pacific-Atlantic-Water-Flow-32-7-Medium" class="headerlink" title="417    Pacific Atlantic Water Flow          32.7%    Medium"></a>417    Pacific Atlantic Water Flow          32.7%    Medium</h3><h3 id="418-Sentence-Screen-Fitting-26-9-Medium"><a href="#418-Sentence-Screen-Fitting-26-9-Medium" class="headerlink" title="418    Sentence Screen Fitting          26.9%    Medium"></a>418    Sentence Screen Fitting          26.9%    Medium</h3><h3 id="419-Battleships-in-a-Board-59-8-Medium"><a href="#419-Battleships-in-a-Board-59-8-Medium" class="headerlink" title="419    Battleships in a Board          59.8%    Medium"></a>419    Battleships in a Board          59.8%    Medium</h3><h3 id="421-Maximum-XOR-of-Two-Numbers-in-an-Array-40-6-Medium"><a href="#421-Maximum-XOR-of-Two-Numbers-in-an-Array-40-6-Medium" class="headerlink" title="421    Maximum XOR of Two Numbers in an Array          40.6%    Medium"></a>421    Maximum XOR of Two Numbers in an Array          40.6%    Medium</h3><h3 id="423-Reconstruct-Original-Digits-from-English-41-7-Medium"><a href="#423-Reconstruct-Original-Digits-from-English-41-7-Medium" class="headerlink" title="423    Reconstruct Original Digits from English          41.7%    Medium"></a>423    Reconstruct Original Digits from English          41.7%    Medium</h3><h3 id="424-Longest-Repeating-Character-Replacement-39-6-Medium"><a href="#424-Longest-Repeating-Character-Replacement-39-6-Medium" class="headerlink" title="424    Longest Repeating Character Replacement          39.6%    Medium"></a>424    Longest Repeating Character Replacement          39.6%    Medium</h3><h3 id="435-Non-overlapping-Intervals-39-8-Medium"><a href="#435-Non-overlapping-Intervals-39-8-Medium" class="headerlink" title="435    Non-overlapping Intervals          39.8%    Medium"></a>435    Non-overlapping Intervals          39.8%    Medium</h3><h3 id="436-Find-Right-Interval-41-9-Medium"><a href="#436-Find-Right-Interval-41-9-Medium" class="headerlink" title="436    Find Right Interval          41.9%    Medium"></a>436    Find Right Interval          41.9%    Medium</h3><h3 id="439-Ternary-Expression-Parser-49-3-Medium"><a href="#439-Ternary-Expression-Parser-49-3-Medium" class="headerlink" title="439    Ternary Expression Parser          49.3%    Medium"></a>439    Ternary Expression Parser          49.3%    Medium</h3><h3 id="442-Find-All-Duplicates-in-an-Array-45-6-Medium"><a href="#442-Find-All-Duplicates-in-an-Array-45-6-Medium" class="headerlink" title="442    Find All Duplicates in an Array          45.6%    Medium"></a>442    Find All Duplicates in an Array          45.6%    Medium</h3><h3 id="444-Sequence-Reconstruction-20-1-Medium"><a href="#444-Sequence-Reconstruction-20-1-Medium" class="headerlink" title="444    Sequence Reconstruction          20.1%    Medium"></a>444    Sequence Reconstruction          20.1%    Medium</h3><h3 id="445-Add-Two-Numbers-II-44-5-Medium"><a href="#445-Add-Two-Numbers-II-44-5-Medium" class="headerlink" title="445    Add Two Numbers II          44.5%    Medium"></a>445    Add Two Numbers II          44.5%    Medium</h3><h3 id="449-Serialize-and-Deserialize-BST-40-1-Medium"><a href="#449-Serialize-and-Deserialize-BST-40-1-Medium" class="headerlink" title="449    Serialize and Deserialize BST          40.1%    Medium"></a>449    Serialize and Deserialize BST          40.1%    Medium</h3><h3 id="450-Delete-Node-in-a-BST-32-4-Medium"><a href="#450-Delete-Node-in-a-BST-32-4-Medium" class="headerlink" title="450    Delete Node in a BST          32.4%    Medium"></a>450    Delete Node in a BST          32.4%    Medium</h3><h3 id="451-Sort-Characters-By-Frequency-50-3-Medium"><a href="#451-Sort-Characters-By-Frequency-50-3-Medium" class="headerlink" title="451    Sort Characters By Frequency          50.3%    Medium"></a>451    Sort Characters By Frequency          50.3%    Medium</h3><h3 id="452-Minimum-Number-of-Arrows-to-Burst-Balloons-41-9-Medium"><a href="#452-Minimum-Number-of-Arrows-to-Burst-Balloons-41-9-Medium" class="headerlink" title="452    Minimum Number of Arrows to Burst Balloons          41.9%    Medium"></a>452    Minimum Number of Arrows to Burst Balloons          41.9%    Medium</h3><h3 id="454-4Sum-II-41-2-Medium"><a href="#454-4Sum-II-41-2-Medium" class="headerlink" title="454    4Sum II          41.2%    Medium"></a>454    4Sum II          41.2%    Medium</h3><h3 id="456-132-Pattern-27-3-Medium"><a href="#456-132-Pattern-27-3-Medium" class="headerlink" title="456    132 Pattern          27.3%    Medium"></a>456    132 Pattern          27.3%    Medium</h3><h3 id="462-Minimum-Moves-to-Equal-Array-Elements-II-50-3-Medium"><a href="#462-Minimum-Moves-to-Equal-Array-Elements-II-50-3-Medium" class="headerlink" title="462    Minimum Moves to Equal Array Elements II          50.3%    Medium"></a>462    Minimum Moves to Equal Array Elements II          50.3%    Medium</h3><h3 id="464-Can-I-Win-21-4-Medium"><a href="#464-Can-I-Win-21-4-Medium" class="headerlink" title="464    Can I Win          21.4%    Medium"></a>464    Can I Win          21.4%    Medium</h3><h3 id="467-Unique-Substrings-in-Wraparound-String-28-4-Medium"><a href="#467-Unique-Substrings-in-Wraparound-String-28-4-Medium" class="headerlink" title="467    Unique Substrings in Wraparound String          28.4%    Medium"></a>467    Unique Substrings in Wraparound String          28.4%    Medium</h3><h3 id="468-Validate-IP-Address-21-8-Medium"><a href="#468-Validate-IP-Address-21-8-Medium" class="headerlink" title="468    Validate IP Address          21.8%    Medium"></a>468    Validate IP Address          21.8%    Medium</h3><h3 id="469-Convex-Polygon-24-6-Medium"><a href="#469-Convex-Polygon-24-6-Medium" class="headerlink" title="469    Convex Polygon          24.6%    Medium"></a>469    Convex Polygon          24.6%    Medium</h3><h3 id="473-Matchsticks-to-Square-27-5-Medium"><a href="#473-Matchsticks-to-Square-27-5-Medium" class="headerlink" title="473    Matchsticks to Square          27.5%    Medium"></a>473    Matchsticks to Square          27.5%    Medium</h3><h3 id="474-Ones-and-Zeroes-32-7-Medium"><a href="#474-Ones-and-Zeroes-32-7-Medium" class="headerlink" title="474    Ones and Zeroes          32.7%    Medium"></a>474    Ones and Zeroes          32.7%    Medium</h3><h3 id="477-Total-Hamming-Distance-40-1-Medium"><a href="#477-Total-Hamming-Distance-40-1-Medium" class="headerlink" title="477    Total Hamming Distance          40.1%    Medium"></a>477    Total Hamming Distance          40.1%    Medium</h3><h2 id="Hard-集合"><a href="#Hard-集合" class="headerlink" title="Hard 集合"></a>Hard 集合</h2><h3 id="4-Median-of-Two-Sorted-Arrays-20-7-Hard"><a href="#4-Median-of-Two-Sorted-Arrays-20-7-Hard" class="headerlink" title="4    Median of Two Sorted Arrays          20.7%    Hard"></a>4    Median of Two Sorted Arrays          20.7%    Hard</h3><h3 id="10-Regular-Expression-Matching-23-4-Hard"><a href="#10-Regular-Expression-Matching-23-4-Hard" class="headerlink" title="10    Regular Expression Matching          23.4%    Hard"></a>10    Regular Expression Matching          23.4%    Hard</h3><h3 id="23-Merge-k-Sorted-Lists-25-7-Hard"><a href="#23-Merge-k-Sorted-Lists-25-7-Hard" class="headerlink" title="23    Merge k Sorted Lists          25.7%    Hard"></a>23    Merge k Sorted Lists          25.7%    Hard</h3><h3 id="25-Reverse-Nodes-in-k-Group-29-6-Hard"><a href="#25-Reverse-Nodes-in-k-Group-29-6-Hard" class="headerlink" title="25    Reverse Nodes in k-Group          29.6%    Hard"></a>25    Reverse Nodes in k-Group          29.6%    Hard</h3><h3 id="30-Substring-with-Concatenation-of-All-Words-21-6-Hard"><a href="#30-Substring-with-Concatenation-of-All-Words-21-6-Hard" class="headerlink" title="30    Substring with Concatenation of All Words          21.6%    Hard"></a>30    Substring with Concatenation of All Words          21.6%    Hard</h3><h3 id="32-Longest-Valid-Parentheses-23-0-Hard"><a href="#32-Longest-Valid-Parentheses-23-0-Hard" class="headerlink" title="32    Longest Valid Parentheses          23.0%    Hard"></a>32    Longest Valid Parentheses          23.0%    Hard</h3><h3 id="33-Search-in-Rotated-Sorted-Array-31-8-Hard"><a href="#33-Search-in-Rotated-Sorted-Array-31-8-Hard" class="headerlink" title="33    Search in Rotated Sorted Array          31.8%    Hard"></a>33    Search in Rotated Sorted Array          31.8%    Hard</h3><h3 id="37-Sudoku-Solver-27-8-Hard"><a href="#37-Sudoku-Solver-27-8-Hard" class="headerlink" title="37    Sudoku Solver          27.8%    Hard"></a>37    Sudoku Solver          27.8%    Hard</h3><h3 id="41-First-Missing-Positive-24-9-Hard"><a href="#41-First-Missing-Positive-24-9-Hard" class="headerlink" title="41    First Missing Positive          24.9%    Hard"></a>41    First Missing Positive          24.9%    Hard</h3><h3 id="42-Trapping-Rain-Water-35-1-Hard"><a href="#42-Trapping-Rain-Water-35-1-Hard" class="headerlink" title="42    Trapping Rain Water          35.1%    Hard"></a>42    Trapping Rain Water          35.1%    Hard</h3><h3 id="44-Wildcard-Matching-18-9-Hard"><a href="#44-Wildcard-Matching-18-9-Hard" class="headerlink" title="44    Wildcard Matching          18.9%    Hard"></a>44    Wildcard Matching          18.9%    Hard</h3><h3 id="45-Jump-Game-II-26-0-Hard"><a href="#45-Jump-Game-II-26-0-Hard" class="headerlink" title="45    Jump Game II          26.0%    Hard"></a>45    Jump Game II          26.0%    Hard</h3><h3 id="51-N-Queens-28-8-Hard"><a href="#51-N-Queens-28-8-Hard" class="headerlink" title="51    N-Queens          28.8%    Hard"></a>51    N-Queens          28.8%    Hard</h3><h3 id="52-N-Queens-II-42-5-Hard"><a href="#52-N-Queens-II-42-5-Hard" class="headerlink" title="52    N-Queens II          42.5%    Hard"></a>52    N-Queens II          42.5%    Hard</h3><h3 id="56-Merge-Intervals-28-2-Hard"><a href="#56-Merge-Intervals-28-2-Hard" class="headerlink" title="56    Merge Intervals          28.2%    Hard"></a>56    Merge Intervals          28.2%    Hard</h3><h3 id="57-Insert-Interval-26-2-Hard"><a href="#57-Insert-Interval-26-2-Hard" class="headerlink" title="57    Insert Interval          26.2%    Hard"></a>57    Insert Interval          26.2%    Hard</h3><h3 id="65-Valid-Number-12-6-Hard"><a href="#65-Valid-Number-12-6-Hard" class="headerlink" title="65    Valid Number          12.6%    Hard"></a>65    Valid Number          12.6%    Hard</h3><h3 id="68-Text-Justification-17-9-Hard"><a href="#68-Text-Justification-17-9-Hard" class="headerlink" title="68    Text Justification          17.9%    Hard"></a>68    Text Justification          17.9%    Hard</h3><h3 id="72-Edit-Distance-30-5-Hard"><a href="#72-Edit-Distance-30-5-Hard" class="headerlink" title="72    Edit Distance          30.5%    Hard"></a>72    Edit Distance          30.5%    Hard</h3><h3 id="76-Minimum-Window-Substring-23-6-Hard"><a href="#76-Minimum-Window-Substring-23-6-Hard" class="headerlink" title="76    Minimum Window Substring          23.6%    Hard"></a>76    Minimum Window Substring          23.6%    Hard</h3><h3 id="84-Largest-Rectangle-in-Histogram-25-5-Hard"><a href="#84-Largest-Rectangle-in-Histogram-25-5-Hard" class="headerlink" title="84    Largest Rectangle in Histogram          25.5%    Hard"></a>84    Largest Rectangle in Histogram          25.5%    Hard</h3><h3 id="85-Maximal-Rectangle-25-8-Hard"><a href="#85-Maximal-Rectangle-25-8-Hard" class="headerlink" title="85    Maximal Rectangle          25.8%    Hard"></a>85    Maximal Rectangle          25.8%    Hard</h3><h3 id="87-Scramble-String-28-1-Hard"><a href="#87-Scramble-String-28-1-Hard" class="headerlink" title="87    Scramble String          28.1%    Hard"></a>87    Scramble String          28.1%    Hard</h3><h3 id="97-Interleaving-String-23-9-Hard"><a href="#97-Interleaving-String-23-9-Hard" class="headerlink" title="97    Interleaving String          23.9%    Hard"></a>97    Interleaving String          23.9%    Hard</h3><h3 id="99-Recover-Binary-Search-Tree-28-6-Hard"><a href="#99-Recover-Binary-Search-Tree-28-6-Hard" class="headerlink" title="99    Recover Binary Search Tree          28.6%    Hard"></a>99    Recover Binary Search Tree          28.6%    Hard</h3><h3 id="115-Distinct-Subsequences-30-5-Hard"><a href="#115-Distinct-Subsequences-30-5-Hard" class="headerlink" title="115    Distinct Subsequences          30.5%    Hard"></a>115    Distinct Subsequences          30.5%    Hard</h3><h3 id="117-Populating-Next-Right-Pointers-in-Each-Node-II-33-4-Hard"><a href="#117-Populating-Next-Right-Pointers-in-Each-Node-II-33-4-Hard" class="headerlink" title="117    Populating Next Right Pointers in Each Node II          33.4%    Hard"></a>117    Populating Next Right Pointers in Each Node II          33.4%    Hard</h3><h3 id="123-Best-Time-to-Buy-and-Sell-Stock-III-28-1-Hard"><a href="#123-Best-Time-to-Buy-and-Sell-Stock-III-28-1-Hard" class="headerlink" title="123    Best Time to Buy and Sell Stock III          28.1%    Hard"></a>123    Best Time to Buy and Sell Stock III          28.1%    Hard</h3><h3 id="124-Binary-Tree-Maximum-Path-Sum-24-9-Hard"><a href="#124-Binary-Tree-Maximum-Path-Sum-24-9-Hard" class="headerlink" title="124    Binary Tree Maximum Path Sum          24.9%    Hard"></a>124    Binary Tree Maximum Path Sum          24.9%    Hard</h3><h3 id="126-Word-Ladder-II-13-6-Hard"><a href="#126-Word-Ladder-II-13-6-Hard" class="headerlink" title="126    Word Ladder II          13.6%    Hard"></a>126    Word Ladder II          13.6%    Hard</h3><h3 id="128-Longest-Consecutive-Sequence-35-1-Hard"><a href="#128-Longest-Consecutive-Sequence-35-1-Hard" class="headerlink" title="128    Longest Consecutive Sequence          35.1%    Hard"></a>128    Longest Consecutive Sequence          35.1%    Hard</h3><h3 id="132-Palindrome-Partitioning-II-23-3-Hard"><a href="#132-Palindrome-Partitioning-II-23-3-Hard" class="headerlink" title="132    Palindrome Partitioning II          23.3%    Hard"></a>132    Palindrome Partitioning II          23.3%    Hard</h3><h3 id="135-Candy-23-8-Hard"><a href="#135-Candy-23-8-Hard" class="headerlink" title="135    Candy          23.8%    Hard"></a>135    Candy          23.8%    Hard</h3><h3 id="138-Copy-List-with-Random-Pointer-26-5-Hard"><a href="#138-Copy-List-with-Random-Pointer-26-5-Hard" class="headerlink" title="138    Copy List with Random Pointer          26.5%    Hard"></a>138    Copy List with Random Pointer          26.5%    Hard</h3><h3 id="140-Word-Break-II-22-0-Hard"><a href="#140-Word-Break-II-22-0-Hard" class="headerlink" title="140    Word Break II          22.0%    Hard"></a>140    Word Break II          22.0%    Hard</h3><h3 id="145-Binary-Tree-Postorder-Traversal-38-2-Hard"><a href="#145-Binary-Tree-Postorder-Traversal-38-2-Hard" class="headerlink" title="145    Binary Tree Postorder Traversal          38.2%    Hard"></a>145    Binary Tree Postorder Traversal          38.2%    Hard</h3><h3 id="146-LRU-Cache-16-0-Hard"><a href="#146-LRU-Cache-16-0-Hard" class="headerlink" title="146    LRU Cache          16.0%    Hard"></a>146    LRU Cache          16.0%    Hard</h3><h3 id="149-Max-Points-on-a-Line-15-5-Hard"><a href="#149-Max-Points-on-a-Line-15-5-Hard" class="headerlink" title="149    Max Points on a Line          15.5%    Hard"></a>149    Max Points on a Line          15.5%    Hard</h3><h3 id="154-Find-Minimum-in-Rotated-Sorted-Array-II-36-0-Hard"><a href="#154-Find-Minimum-in-Rotated-Sorted-Array-II-36-0-Hard" class="headerlink" title="154    Find Minimum in Rotated Sorted Array II          36.0%    Hard"></a>154    Find Minimum in Rotated Sorted Array II          36.0%    Hard</h3><h3 id="158-Read-N-Characters-Given-Read4-II-Call-multiple-times-24-2-Hard"><a href="#158-Read-N-Characters-Given-Read4-II-Call-multiple-times-24-2-Hard" class="headerlink" title="158    Read N Characters Given Read4 II - Call multiple times          24.2%    Hard"></a>158    Read N Characters Given Read4 II - Call multiple times          24.2%    Hard</h3><h3 id="159-Longest-Substring-with-At-Most-Two-Distinct-Characters-39-3-Hard"><a href="#159-Longest-Substring-with-At-Most-Two-Distinct-Characters-39-3-Hard" class="headerlink" title="159    Longest Substring with At Most Two Distinct Characters          39.3%    Hard"></a>159    Longest Substring with At Most Two Distinct Characters          39.3%    Hard</h3><h3 id="164-Maximum-Gap-28-5-Hard"><a href="#164-Maximum-Gap-28-5-Hard" class="headerlink" title="164    Maximum Gap          28.5%    Hard"></a>164    Maximum Gap          28.5%    Hard</h3><h3 id="174-Dungeon-Game-22-8-Hard"><a href="#174-Dungeon-Game-22-8-Hard" class="headerlink" title="174    Dungeon Game          22.8%    Hard"></a>174    Dungeon Game          22.8%    Hard</h3><h3 id="188-Best-Time-to-Buy-and-Sell-Stock-IV-23-7-Hard"><a href="#188-Best-Time-to-Buy-and-Sell-Stock-IV-23-7-Hard" class="headerlink" title="188    Best Time to Buy and Sell Stock IV          23.7%    Hard"></a>188    Best Time to Buy and Sell Stock IV          23.7%    Hard</h3><h3 id="212-Word-Search-II-22-1-Hard"><a href="#212-Word-Search-II-22-1-Hard" class="headerlink" title="212    Word Search II          22.1%    Hard"></a>212    Word Search II          22.1%    Hard</h3><h3 id="214-Shortest-Palindrome-22-7-Hard"><a href="#214-Shortest-Palindrome-22-7-Hard" class="headerlink" title="214    Shortest Palindrome          22.7%    Hard"></a>214    Shortest Palindrome          22.7%    Hard</h3><h3 id="218-The-Skyline-Problem-25-3-Hard"><a href="#218-The-Skyline-Problem-25-3-Hard" class="headerlink" title="218    The Skyline Problem          25.3%    Hard"></a>218    The Skyline Problem          25.3%    Hard</h3><h3 id="224-Basic-Calculator-25-3-Hard"><a href="#224-Basic-Calculator-25-3-Hard" class="headerlink" title="224    Basic Calculator          25.3%    Hard"></a>224    Basic Calculator          25.3%    Hard</h3><h3 id="233-Number-of-Digit-One-27-2-Hard"><a href="#233-Number-of-Digit-One-27-2-Hard" class="headerlink" title="233    Number of Digit One          27.2%    Hard"></a>233    Number of Digit One          27.2%    Hard</h3><h3 id="239-Sliding-Window-Maximum-31-2-Hard"><a href="#239-Sliding-Window-Maximum-31-2-Hard" class="headerlink" title="239    Sliding Window Maximum          31.2%    Hard"></a>239    Sliding Window Maximum          31.2%    Hard</h3><h3 id="248-Strobogrammatic-Number-III-30-2-Hard"><a href="#248-Strobogrammatic-Number-III-30-2-Hard" class="headerlink" title="248    Strobogrammatic Number III          30.2%    Hard"></a>248    Strobogrammatic Number III          30.2%    Hard</h3><h3 id="265-Paint-House-II-37-0-Hard"><a href="#265-Paint-House-II-37-0-Hard" class="headerlink" title="265    Paint House II          37.0%    Hard"></a>265    Paint House II          37.0%    Hard</h3><h3 id="269-Alien-Dictionary-22-5-Hard"><a href="#269-Alien-Dictionary-22-5-Hard" class="headerlink" title="269    Alien Dictionary          22.5%    Hard"></a>269    Alien Dictionary          22.5%    Hard</h3><h3 id="272-Closest-Binary-Search-Tree-Value-II-37-2-Hard"><a href="#272-Closest-Binary-Search-Tree-Value-II-37-2-Hard" class="headerlink" title="272    Closest Binary Search Tree Value II          37.2%    Hard"></a>272    Closest Binary Search Tree Value II          37.2%    Hard</h3><h3 id="273-Integer-to-English-Words-20-9-Hard"><a href="#273-Integer-to-English-Words-20-9-Hard" class="headerlink" title="273    Integer to English Words          20.9%    Hard"></a>273    Integer to English Words          20.9%    Hard</h3><h3 id="282-Expression-Add-Operators-28-3-Hard"><a href="#282-Expression-Add-Operators-28-3-Hard" class="headerlink" title="282    Expression Add Operators          28.3%    Hard"></a>282    Expression Add Operators          28.3%    Hard</h3><h3 id="287-Find-the-Duplicate-Number-41-6-Hard"><a href="#287-Find-the-Duplicate-Number-41-6-Hard" class="headerlink" title="287    Find the Duplicate Number          41.6%    Hard"></a>287    Find the Duplicate Number          41.6%    Hard</h3><h3 id="291-Word-Pattern-II-37-4-Hard"><a href="#291-Word-Pattern-II-37-4-Hard" class="headerlink" title="291    Word Pattern II          37.4%    Hard"></a>291    Word Pattern II          37.4%    Hard</h3><h3 id="295-Find-Median-from-Data-Stream-23-2-Hard"><a href="#295-Find-Median-from-Data-Stream-23-2-Hard" class="headerlink" title="295    Find Median from Data Stream          23.2%    Hard"></a>295    Find Median from Data Stream          23.2%    Hard</h3><h3 id="296-Best-Meeting-Point-50-0-Hard"><a href="#296-Best-Meeting-Point-50-0-Hard" class="headerlink" title="296    Best Meeting Point          50.0%    Hard"></a>296    Best Meeting Point          50.0%    Hard</h3><h3 id="297-Serialize-and-Deserialize-Binary-Tree-31-3-Hard"><a href="#297-Serialize-and-Deserialize-Binary-Tree-31-3-Hard" class="headerlink" title="297    Serialize and Deserialize Binary Tree          31.3%    Hard"></a>297    Serialize and Deserialize Binary Tree          31.3%    Hard</h3><h3 id="301-Remove-Invalid-Parentheses-34-5-Hard"><a href="#301-Remove-Invalid-Parentheses-34-5-Hard" class="headerlink" title="301    Remove Invalid Parentheses          34.5%    Hard"></a>301    Remove Invalid Parentheses          34.5%    Hard</h3><h3 id="302-Smallest-Rectangle-Enclosing-Black-Pixels-43-3-Hard"><a href="#302-Smallest-Rectangle-Enclosing-Black-Pixels-43-3-Hard" class="headerlink" title="302    Smallest Rectangle Enclosing Black Pixels          43.3%    Hard"></a>302    Smallest Rectangle Enclosing Black Pixels          43.3%    Hard</h3><h3 id="305-Number-of-Islands-II-37-9-Hard"><a href="#305-Number-of-Islands-II-37-9-Hard" class="headerlink" title="305    Number of Islands II          37.9%    Hard"></a>305    Number of Islands II          37.9%    Hard</h3><h3 id="308-Range-Sum-Query-2D-Mutable-19-9-Hard"><a href="#308-Range-Sum-Query-2D-Mutable-19-9-Hard" class="headerlink" title="308    Range Sum Query 2D - Mutable          19.9%    Hard"></a>308    Range Sum Query 2D - Mutable          19.9%    Hard</h3><h3 id="312-Burst-Balloons-41-4-Hard"><a href="#312-Burst-Balloons-41-4-Hard" class="headerlink" title="312    Burst Balloons          41.4%    Hard"></a>312    Burst Balloons          41.4%    Hard</h3><h3 id="315-Count-of-Smaller-Numbers-After-Self-33-4-Hard"><a href="#315-Count-of-Smaller-Numbers-After-Self-33-4-Hard" class="headerlink" title="315    Count of Smaller Numbers After Self          33.4%    Hard"></a>315    Count of Smaller Numbers After Self          33.4%    Hard</h3><h3 id="316-Remove-Duplicate-Letters-28-3-Hard"><a href="#316-Remove-Duplicate-Letters-28-3-Hard" class="headerlink" title="316    Remove Duplicate Letters          28.3%    Hard"></a>316    Remove Duplicate Letters          28.3%    Hard</h3><h3 id="317-Shortest-Distance-from-All-Buildings-33-2-Hard"><a href="#317-Shortest-Distance-from-All-Buildings-33-2-Hard" class="headerlink" title="317    Shortest Distance from All Buildings          33.2%    Hard"></a>317    Shortest Distance from All Buildings          33.2%    Hard</h3><h3 id="321-Create-Maximum-Number-23-8-Hard"><a href="#321-Create-Maximum-Number-23-8-Hard" class="headerlink" title="321    Create Maximum Number          23.8%    Hard"></a>321    Create Maximum Number          23.8%    Hard</h3><h3 id="327-Count-of-Range-Sum-28-6-Hard"><a href="#327-Count-of-Range-Sum-28-6-Hard" class="headerlink" title="327    Count of Range Sum          28.6%    Hard"></a>327    Count of Range Sum          28.6%    Hard</h3><h3 id="329-Longest-Increasing-Path-in-a-Matrix-35-1-Hard"><a href="#329-Longest-Increasing-Path-in-a-Matrix-35-1-Hard" class="headerlink" title="329    Longest Increasing Path in a Matrix          35.1%    Hard"></a>329    Longest Increasing Path in a Matrix          35.1%    Hard</h3><h3 id="330-Patching-Array-31-3-Hard"><a href="#330-Patching-Array-31-3-Hard" class="headerlink" title="330    Patching Array          31.3%    Hard"></a>330    Patching Array          31.3%    Hard</h3><h3 id="335-Self-Crossing-23-7-Hard"><a href="#335-Self-Crossing-23-7-Hard" class="headerlink" title="335    Self Crossing          23.7%    Hard"></a>335    Self Crossing          23.7%    Hard</h3><h3 id="336-Palindrome-Pairs-24-3-Hard"><a href="#336-Palindrome-Pairs-24-3-Hard" class="headerlink" title="336    Palindrome Pairs          24.3%    Hard"></a>336    Palindrome Pairs          24.3%    Hard</h3><h3 id="340-Longest-Substring-with-At-Most-K-Distinct-Characters-38-6-Hard"><a href="#340-Longest-Substring-with-At-Most-K-Distinct-Characters-38-6-Hard" class="headerlink" title="340    Longest Substring with At Most K Distinct Characters          38.6%    Hard"></a>340    Longest Substring with At Most K Distinct Characters          38.6%    Hard</h3><h3 id="352-Data-Stream-as-Disjoint-Intervals-38-7-Hard"><a href="#352-Data-Stream-as-Disjoint-Intervals-38-7-Hard" class="headerlink" title="352    Data Stream as Disjoint Intervals          38.7%    Hard"></a>352    Data Stream as Disjoint Intervals          38.7%    Hard</h3><h3 id="354-Russian-Doll-Envelopes-31-4-Hard"><a href="#354-Russian-Doll-Envelopes-31-4-Hard" class="headerlink" title="354    Russian Doll Envelopes          31.4%    Hard"></a>354    Russian Doll Envelopes          31.4%    Hard</h3><h3 id="358-Rearrange-String-k-Distance-Apart-31-7-Hard"><a href="#358-Rearrange-String-k-Distance-Apart-31-7-Hard" class="headerlink" title="358    Rearrange String k Distance Apart          31.7%    Hard"></a>358    Rearrange String k Distance Apart          31.7%    Hard</h3><h3 id="363-Max-Sum-of-Rectangle-No-Larger-Than-K-32-0-Hard"><a href="#363-Max-Sum-of-Rectangle-No-Larger-Than-K-32-0-Hard" class="headerlink" title="363    Max Sum of Rectangle No Larger Than K          32.0%    Hard"></a>363    Max Sum of Rectangle No Larger Than K          32.0%    Hard</h3><h3 id="380-Insert-Delete-GetRandom-O-1-38-0-Hard"><a href="#380-Insert-Delete-GetRandom-O-1-38-0-Hard" class="headerlink" title="380    Insert Delete GetRandom O(1)          38.0%    Hard"></a>380    Insert Delete GetRandom O(1)          38.0%    Hard</h3><h3 id="381-Insert-Delete-GetRandom-O-1-Duplicates-allowed-27-7-Hard"><a href="#381-Insert-Delete-GetRandom-O-1-Duplicates-allowed-27-7-Hard" class="headerlink" title="381    Insert Delete GetRandom O(1) - Duplicates allowed          27.7%    Hard"></a>381    Insert Delete GetRandom O(1) - Duplicates allowed          27.7%    Hard</h3><h3 id="391-Perfect-Rectangle-23-3-Hard"><a href="#391-Perfect-Rectangle-23-3-Hard" class="headerlink" title="391    Perfect Rectangle          23.3%    Hard"></a>391    Perfect Rectangle          23.3%    Hard</h3><h3 id="403-Frog-Jump-30-2-Hard"><a href="#403-Frog-Jump-30-2-Hard" class="headerlink" title="403    Frog Jump          30.2%    Hard"></a>403    Frog Jump          30.2%    Hard</h3><h3 id="407-Trapping-Rain-Water-II-35-0-Hard"><a href="#407-Trapping-Rain-Water-II-35-0-Hard" class="headerlink" title="407    Trapping Rain Water II          35.0%    Hard"></a>407    Trapping Rain Water II          35.0%    Hard</h3><h3 id="410-Split-Array-Largest-Sum-31-1-Hard"><a href="#410-Split-Array-Largest-Sum-31-1-Hard" class="headerlink" title="410    Split Array Largest Sum          31.1%    Hard"></a>410    Split Array Largest Sum          31.1%    Hard</h3><h3 id="411-Minimum-Unique-Word-Abbreviation-30-9-Hard"><a href="#411-Minimum-Unique-Word-Abbreviation-30-9-Hard" class="headerlink" title="411    Minimum Unique Word Abbreviation          30.9%    Hard"></a>411    Minimum Unique Word Abbreviation          30.9%    Hard</h3><h3 id="420-Strong-Password-Checker-21-5-Hard"><a href="#420-Strong-Password-Checker-21-5-Hard" class="headerlink" title="420    Strong Password Checker          21.5%    Hard"></a>420    Strong Password Checker          21.5%    Hard</h3><h3 id="425-Word-Squares-42-0-Hard"><a href="#425-Word-Squares-42-0-Hard" class="headerlink" title="425    Word Squares          42.0%    Hard"></a>425    Word Squares          42.0%    Hard</h3><h3 id="432-All-O-one-Data-Structure-28-4-Hard"><a href="#432-All-O-one-Data-Structure-28-4-Hard" class="headerlink" title="432    All O`one Data Structure          28.4%    Hard"></a>432    All O`one Data Structure          28.4%    Hard</h3><h3 id="440-K-th-Smallest-in-Lexicographical-Order-21-4-Hard"><a href="#440-K-th-Smallest-in-Lexicographical-Order-21-4-Hard" class="headerlink" title="440    K-th Smallest in Lexicographical Order          21.4%    Hard"></a>440    K-th Smallest in Lexicographical Order          21.4%    Hard</h3><h3 id="446-Arithmetic-Slices-II-Subsequence-22-0-Hard"><a href="#446-Arithmetic-Slices-II-Subsequence-22-0-Hard" class="headerlink" title="446    Arithmetic Slices II - Subsequence          22.0%    Hard"></a>446    Arithmetic Slices II - Subsequence          22.0%    Hard</h3><h3 id="465-Optimal-Account-Balancing-27-5-Hard"><a href="#465-Optimal-Account-Balancing-27-5-Hard" class="headerlink" title="465    Optimal Account Balancing          27.5%    Hard"></a>465    Optimal Account Balancing          27.5%    Hard</h3><h3 id="466-Count-The-Repetitions-24-6-Hard"><a href="#466-Count-The-Repetitions-24-6-Hard" class="headerlink" title="466    Count The Repetitions          24.6%    Hard"></a>466    Count The Repetitions          24.6%    Hard</h3><h3 id="471-Encode-String-with-Shortest-Length-45-9-Hard"><a href="#471-Encode-String-with-Shortest-Length-45-9-Hard" class="headerlink" title="471    Encode String with Shortest Length          45.9%    Hard"></a>471    Encode String with Shortest Length          45.9%    Hard</h3><h3 id="472-Concatenated-Words-28-2-Hard"><a href="#472-Concatenated-Words-28-2-Hard" class="headerlink" title="472    Concatenated Words          28.2%    Hard"></a>472    Concatenated Words          28.2%    Hard</h3>]]></content>
      <categories>
        <category>Python 黑魔法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>开源认证基础服务</title>
    <url>/2020/11/29/_ory/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>随着业务的增长，往往需要统一体系内的服务的账户。<br>经过一番调研，决定尝试一下 ory 的开源认证基础服务</p>
<h2 id="0x01-ORY-尝试解决问题？"><a href="#0x01-ORY-尝试解决问题？" class="headerlink" title="0x01 ORY 尝试解决问题？"></a>0x01 ORY 尝试解决问题？</h2><p>ORY 提供了四个主要项目，每个项目着力于解决一个边界清晰的认证 / 鉴权问题</p>
<ul>
<li>ORY Kratos 提供了用户认证服务</li>
<li>ORY Hydra 提供了 OAuth 2.0 &amp; OpenID Connect provider.</li>
<li>ORY Keto 提供了 访问控制</li>
<li>ORY Oathkeeper 提供了认证访问代理</li>
</ul>
<h2 id="0x02-用户认证服务-Kratos"><a href="#0x02-用户认证服务-Kratos" class="headerlink" title="0x02 用户认证服务 Kratos"></a>0x02 用户认证服务 Kratos</h2><h3 id="常见方案"><a href="#常见方案" class="headerlink" title="常见方案"></a>常见方案</h3><ol>
<li>方案 1, 选择全栈式解决方案 - 比如 Java 社区的 JGroups</li>
<li>方案 2, 选择 IDaas - 比如 Login With Apple, Google</li>
<li>方案 3, 选择自己来 - 比如 Java 社区的 JGroups</li>
</ol>
<p>三种方案各有利弊</p>
<ol>
<li><p>全栈式解决方案上手极快，但</p>
<ul>
<li>扩展性不强</li>
<li>绑定 Java 技术栈</li>
<li>数据模型固定</li>
<li>登陆流程固定<br>  - 更新迭代慢</li>
</ul>
</li>
<li><p>Login With Google 虽然方便，但是并没有解决如下的问题<br>  - 更新 Profile</p>
<ul>
<li>添加第二个恢复邮箱</li>
<li>2FA</li>
<li>存储管理 Sessions<br>  - 全局登出</li>
</ul>
</li>
<li><p>自己来，需要处理事情也挺多</p>
</li>
</ol>
<p>  - 方案二遇到的问题，一个不会少<br>  - 加密算法<br>    - 流程可能较为复杂，比如先用邮箱注册，然后用 Sign Up Using Google, 或者先用 Sign Up Google, 然后使用邮箱登陆。(PS: 我国的登陆姿势就更多了）</p>
<p>是不是某种方案是最好的呢？其实未必<br>就我个人经验来说，</p>
<ul>
<li>第一种方案比较适合稳定的，技术栈相同的团队使用。如果对原先应用进行少量裁剪就可以使用，其实未尝不可。</li>
<li>第二种方案如果登陆入口仅是 Login With Google, 并且内网服务数量就几个，也不需要做全局登出，那么其实做起来比较省事。我工作过的一个公司就喜欢这么干。</li>
<li>第三种方案虽然处理的问题看起来比较多，但是社区现有的 Building Block 已经比较多了。如果流程没有特别复杂，一手打造的非常容易往自己的项目发展情况发展。</li>
</ul>
<h3 id="Kratos-的方案"><a href="#Kratos-的方案" class="headerlink" title="Kratos 的方案"></a>Kratos 的方案</h3><p>Kratos 提供了如下的解决方案</p>
<ul>
<li>登陆与注册</li>
<li>track sesison/devices</li>
<li>MFA/2FA</li>
<li>账户验证</li>
<li>账户恢复</li>
<li>Profile &amp; Account Management</li>
<li>管理后台接口 API</li>
<li>消费 OAuth2 and OpenID Connect</li>
</ul>
<h2 id="0x03-Ory-Hydra"><a href="#0x03-Ory-Hydra" class="headerlink" title="0x03 Ory Hydra"></a>0x03 Ory Hydra</h2><blockquote>
<p>You May Not Need It</p>
</blockquote>
<ul>
<li>Provider OAuth2 and OpenID Connect via <a href="https://github.com/ory/hydra">https://github.com/ory/hydra</a></li>
</ul>
<h2 id="0x03-Ory-Keto"><a href="#0x03-Ory-Keto" class="headerlink" title="0x03 Ory Keto"></a>0x03 Ory Keto</h2><p>权限系统一般放在按照产品需求，最好跟着产品走。而不是随随便便提取出来做一个权限系统。</p>
<blockquote>
<p>You May Not Need It</p>
</blockquote>
<h2 id="0x04-Ory-Oathkeeper"><a href="#0x04-Ory-Oathkeeper" class="headerlink" title="0x04 Ory Oathkeeper"></a>0x04 Ory Oathkeeper</h2><p>同样，如果你不是有做 zero trust</p>
<blockquote>
<p>You May Not Need It</p>
</blockquote>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>后端开发</tag>
      </tags>
  </entry>
</search>
