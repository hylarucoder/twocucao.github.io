<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MG的编程小屋</title>
  <subtitle>Get Busy Living, Or Get Busy Dying</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://twocucao.xyz/"/>
  <updated>2017-11-18T03:29:02.838Z</updated>
  <id>http://twocucao.xyz/</id>
  
  <author>
    <name>Micheal Gardner</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何优雅地使用 macOS</title>
    <link href="http://twocucao.xyz/2017/10/05/ElegantMac/"/>
    <id>http://twocucao.xyz/2017/10/05/ElegantMac/</id>
    <published>2017-10-05T12:06:05.000Z</published>
    <updated>2017-11-18T03:29:02.838Z</updated>
    
    <content type="html"><![CDATA[<p>当时写这篇文章的时候才接触 mac 没多久，使用快两年之后，再次修订了本文。</p>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>谈及 macOS , 很多人喜欢和 Win 比个高下。在我看来， Win 虽在非编程类生态和易用性比 Mac 要好很多，可专业人士之所以专业是因为他能挑选适合的武器发挥最大的效用，不是吗？</p>
<blockquote>
<p>适合自己的，能让自己用最大效率生产或者是娱乐的，才是更好的工具。</p>
</blockquote>
<p>Win 的优点如下：</p>
<ul>
<li>优良的兼容性。</li>
<li>由于出自于什么都爱做的微软公司，从整体来说，VS，.NET, 游戏性，兼容性，性能，新手上手速度来说，都是遥遥领先 Mac 的。</li>
</ul>
<p>Win 的缺点如下：</p>
<ul>
<li>微软的战线实在是拉的太长，什么都想做，什么都想垄断。于是，与之服务密切相关的公司也就受到了 MS 的牵制。这对大公司来说，几乎是不能够忍受的行为。硅谷的公司使用微软服务的也就接近 5%（可能有误差）。</li>
<li>糟糕的终端环境（DOS）和无法与、*nux 世界的脚本友好相处使得系统的可定制性和进阶操作性大大降低。</li>
<li>虽然有 Everything，TotalCMD，AHK 这种神级辅助工具可以满足定制要求。但由于过高的学习成本（哈哈哈，混乱也是学习成本之一，AHK 语言真的很混乱啊，TC 实在是太不人性化了）。</li>
<li><strong>Python 的环境配置实在是太头疼了</strong></li>
</ul>
<p>Win 的缺点就是我切到 Mac 上面的原因。</p>
<p>macOS 的优点如下：</p>
<ul>
<li>Mac 的好在于终端和美观的图形的结合。适合不是微软技术栈和重度 Office 的用户。</li>
<li>*nux 应用的方便以及非常容易与脚本文件配合出强大的组合技能。</li>
<li>反观 Win 上，则这种组合技能则在环境配置上和操作流畅度上差了很多。</li>
</ul>
<p>macOS 的缺点如下：</p>
<ul>
<li>娱乐项目实在是少的要死。Metal 和 DirectX 相差不是一点点。</li>
<li>软件和有些少的不只一点点。</li>
</ul>
<p>本文从下面几处入手，分别从下面几个角度介绍了 macOS</p>
<pre><code>▼ 如何优雅地使用 macOS
    0x00 前言
▼ 0x01 系统内置
    1.1 系统设置
    1.2 自带软件
    1.3 快捷键与触摸板
▼ 0x02 必备软件
    2.1 必备软件 之 日常必备
    ▼ 2.2 必备软件 之 开发必备
        2.2.1 GUI 应用
        2.2.2 CMD 命令
    ▼ 2.3 必备软件 之 编程语言
        2.3.1 Shell
        2.3.2 Python
▼ 0x03 踩坑史
    ▼ 3.1 日常类
        01. 时间机器无法完成备份
        02. 下载站的软件包显示损坏
    ▼ 3.2 编程类
        01. homebrew 的与 Python 的问题
    0xEE 参考链接
</code></pre><h2 id="0x01-系统内置"><a href="#0x01-系统内置" class="headerlink" title="0x01 系统内置"></a>0x01 系统内置</h2><h3 id="1-1-系统设置"><a href="#1-1-系统设置" class="headerlink" title="1.1 系统设置"></a>1.1 系统设置</h3><p>General</p>
<ul>
<li>默认浏览器 : Google Chrome</li>
</ul>
<p>Decktop &amp; Screen Saver</p>
<ul>
<li>桌面 / 屏保</li>
</ul>
<p>Language &amp; Region</p>
<ul>
<li>语言</li>
<li>地区设置</li>
</ul>
<p>Security &amp; Privacy</p>
<ul>
<li>防火墙</li>
</ul>
<p>Sharing</p>
<ul>
<li>Remote Control - SSH</li>
</ul>
<p>Trackpad</p>
<ul>
<li>设置手势</li>
<li>滚轮 Scrool Direction : Natural</li>
</ul>
<h3 id="1-2-自带软件"><a href="#1-2-自带软件" class="headerlink" title="1.2 自带软件"></a>1.2 自带软件</h3><ul>
<li>iTunes</li>
<li>iPhoto</li>
<li>iMessage</li>
<li>SpotLight -&gt; Alfred 3</li>
</ul>
<h3 id="1-3-快捷键与触摸板"><a href="#1-3-快捷键与触摸板" class="headerlink" title="1.3 快捷键与触摸板"></a>1.3 快捷键与触摸板</h3><ul>
<li>cmd 为 command 按键，通常情况下为所有桌面程序通用性的快捷键。</li>
<li>ctrl ，通常情况下是针对程序的功能进行加强，并且此功能往往是非 cmd 类（窗口操作，选择，复制粘贴等等）操作。</li>
<li><p>shift 按键通常用于加强操作。一般会让操作更进一步 or 相反操作。</p>
</li>
<li><p>cmd+tab =~ alt+tab 程序之间的切换</p>
</li>
<li><p>cmd+` 应用内窗口切换</p>
</li>
<li><p>cmd+h 窗口 hide</p>
</li>
<li>cmd+m 窗口 minimize</li>
<li>cmd+n 新建窗口</li>
<li>cmd+o 打开</li>
<li>cmd+s 保存</li>
<li>cmd+shift+s 另存为</li>
<li>cmd+p 打印 print</li>
<li>cmd+w 关闭</li>
<li><p>cmd+q quit</p>
</li>
<li><p>cmd+a select all</p>
</li>
<li>cmd+i show info</li>
<li>cmd+n create a new folder</li>
<li>cmd+f search</li>
<li>cmd+c copy</li>
<li>cmd+v paste</li>
<li>cmd+delete  删除选中文件</li>
<li><p>cmd+shift+delete 清空回收站</p>
</li>
<li><p>cmd+= 放大</p>
</li>
<li>cmd+- 缩小</li>
<li>cmd+t 新建选项卡</li>
<li><p>cmd+r 刷新</p>
</li>
<li><p>cmd+shift+3 截取整个屏幕</p>
</li>
<li>cmd+shift+4 截取选择区域</li>
<li>cmd+shift+4+SPACE 截取选择窗口</li>
<li>cmd+ 鼠标点击 -&gt; 选中不连续文件</li>
<li><p>control+ 鼠标点击 -&gt; 相当于 win 中右键点击</p>
</li>
<li><p>fn+left home</p>
</li>
<li>fn+right end</li>
<li>fn+up pageup</li>
<li>fn+down pagedown</li>
</ul>
<p>触摸板手势：</p>
<ul>
<li><p>点击</p>
<ul>
<li>单指点击 - 单击</li>
<li>单指滑动 - 滑动鼠标光标</li>
<li>双指点击 - 相当于 Windows 的鼠标右键</li>
<li>三指点击 - 划词查找</li>
</ul>
</li>
<li><p>滑动与缩放</p>
<ul>
<li>双指上下滑动 - 滚动</li>
<li>双指缩放 - 与 Android 上图片缩放一致</li>
<li>双指双击 - 只能缩放</li>
<li>双指旋转 - 旋转</li>
<li>双指左右滑动 - 应用内切换网页</li>
<li>双指头从右往左</li>
<li>三指头左右滑动 - 全屏幕 App 切换</li>
<li>大拇指和食中无名缩放 - launchpad</li>
</ul>
</li>
</ul>
<h2 id="0x02-必备软件"><a href="#0x02-必备软件" class="headerlink" title="0x02 必备软件"></a>0x02 必备软件</h2><h3 id="2-1-必备软件-之-日常必备"><a href="#2-1-必备软件-之-日常必备" class="headerlink" title="2.1 必备软件 之 日常必备"></a>2.1 必备软件 之 日常必备</h3><ul>
<li><p>启动器</p>
<ul>
<li>Alfred 3</li>
<li>SpotLight</li>
</ul>
</li>
<li><p>网络工具</p>
<ul>
<li>Chrome</li>
</ul>
</li>
<li><p>社交通讯</p>
<ul>
<li>QQ</li>
<li>WeXin</li>
</ul>
</li>
<li><p>图形图像</p>
<ul>
<li>Adobe PhotoShop CC</li>
<li>Adobe PhotoShop LightRoom</li>
<li>Sketch</li>
<li>Annotate</li>
<li>Camtasia 2</li>
<li>Snagit</li>
<li>ScreenFlow</li>
<li>Final Cut Pro</li>
<li>MPlayerX</li>
<li>QuickTime</li>
<li>iQiyi</li>
<li>NeteaseMusic</li>
<li>IINA</li>
</ul>
</li>
<li><p>办公软件</p>
<ul>
<li>欧陆词典</li>
<li>Calibre</li>
<li>Wiznote</li>
<li>PDF Reader</li>
<li>iBook</li>
<li>Microsoft Office</li>
<li>Work 套件：包括 pages, numbers, keynote</li>
<li>XMind</li>
<li>Airmail</li>
<li>TeamViewer</li>
<li>OmniFocus</li>
<li>OmniGraffle</li>
<li>OmniOutline</li>
<li>OmniPlan</li>
</ul>
</li>
<li><p>系统软件</p>
<ul>
<li>搜狗输入法</li>
<li>AppCleaner</li>
<li>CleanMyMac</li>
<li>VMWare</li>
<li>BetterZip</li>
<li>Caffeine /  Amphetamine</li>
<li>PopClip</li>
<li>HandShaker</li>
<li>AirDroid</li>
</ul>
</li>
</ul>
<h3 id="2-2-必备软件-之-开发必备"><a href="#2-2-必备软件-之-开发必备" class="headerlink" title="2.2 必备软件 之 开发必备"></a>2.2 必备软件 之 开发必备</h3><h4 id="2-2-1-GUI-应用"><a href="#2-2-1-GUI-应用" class="headerlink" title="2.2.1 GUI 应用"></a>2.2.1 GUI 应用</h4><ul>
<li><p>终端用户</p>
<ul>
<li>iTerm2</li>
</ul>
</li>
<li><p>IDE</p>
<ul>
<li>PyCharm</li>
<li>IntellijIDEA</li>
<li>WebStorm</li>
</ul>
</li>
<li><p>编辑器</p>
<ul>
<li>MacVim 配合 <a href="https://github.com/twocucao/c-vim" target="_blank" rel="external">C-VIM</a></li>
<li>Sublime Text 3</li>
</ul>
</li>
<li><p>后台组件</p>
<ul>
<li>MySQL</li>
<li>PostgreSQL</li>
<li>Redis</li>
<li>MongoDB</li>
</ul>
</li>
<li><p>数据库管理软件</p>
<ul>
<li>Navicat</li>
<li>Datagrip</li>
<li>RoboMongo</li>
<li>RDM</li>
<li>Dash</li>
</ul>
</li>
<li><p>网络工具</p>
<ul>
<li>SS QT</li>
<li>Charles, Wireshark</li>
</ul>
</li>
<li><p>Chrome</p>
<ul>
<li>Exporter : 百度云，需要离线安装</li>
<li>AdBlock : 广告拦截</li>
<li>AutoPatchWork : 链接下一页</li>
<li>Axure RP Extension : Axure</li>
<li>CSSViewer</li>
<li>Dream Afar New Tab</li>
<li>JSON Editor</li>
<li>JSON View</li>
<li>Octotree</li>
<li>One-Click Extensions Manager</li>
<li>Proxy SwitchyOmega</li>
<li>React Developer Tools</li>
<li>Redux DevTools</li>
<li>Vue.js devtools</li>
<li>Vimium</li>
</ul>
</li>
<li><p>代码仓库</p>
<ul>
<li>Github Desktop</li>
<li>SourceTree</li>
</ul>
</li>
<li><p>GIS 相关</p>
<ul>
<li>ArcGIS</li>
<li>QGIS</li>
<li>PostgreSQL + PostGIS</li>
</ul>
</li>
</ul>
<h4 id="2-2-2-CMD-命令"><a href="#2-2-2-CMD-命令" class="headerlink" title="2.2.2 CMD 命令"></a>2.2.2 CMD 命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="built_in">test</span> ! $(<span class="built_in">which</span> brew); <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Installing homebrew..."</span></div><div class="line">    ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># Make sure we’re using the latest Homebrew.</span></div><div class="line">brew update</div><div class="line"></div><div class="line"><span class="comment"># Upgrade any already-installed formulae.</span></div><div class="line">brew upgrade --all</div><div class="line"></div><div class="line"><span class="comment"># Install GNU core utilities (those that come with OS X are outdated).</span></div><div class="line"><span class="comment"># Don’t forget to add `$(brew --prefix coreutils)/libexec/gnubin` to `$PATH`.</span></div><div class="line">brew install coreutils</div><div class="line">sudo ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/gsha256sum /usr/<span class="built_in">local</span>/bin/sha256sum</div><div class="line"></div><div class="line"><span class="comment"># Install some other useful utilities like `sponge`.</span></div><div class="line">brew install moreutils</div><div class="line"><span class="comment"># Install GNU `find`, `locate`, `updatedb`, and `xargs`, `g`-prefixed.</span></div><div class="line">brew install findutils</div><div class="line"><span class="comment"># Install GNU `sed`, overwriting the built-in `sed`.</span></div><div class="line">brew install gnu-sed --with-default-names</div><div class="line"><span class="comment"># Install Bash 4.</span></div><div class="line">brew install bash</div><div class="line">brew tap homebrew/versions</div><div class="line">brew install bash-completion2</div><div class="line"><span class="comment"># We installed the new shell, now we have to activate it</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Adding the newly installed shell to the list of allowed shells"</span></div><div class="line"><span class="comment"># Prompts for password</span></div><div class="line">sudo bash -c <span class="string">'echo /usr/local/bin/bash &gt;&gt; /etc/shells'</span></div><div class="line"><span class="comment"># Change to the new shell, prompts for password</span></div><div class="line">chsh <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/bash</div><div class="line"></div><div class="line"><span class="comment"># Install `wget` with IRI support.</span></div><div class="line">brew install wget --with-iri</div><div class="line"></div><div class="line"><span class="comment"># Install RingoJS and Narwhal.</span></div><div class="line"><span class="comment"># Note that the order in which these are installed is important;</span></div><div class="line"><span class="comment"># see http://git.io/brew-narwhal-ringo.</span></div><div class="line">brew install ringojs</div><div class="line">brew install narwhal</div><div class="line"></div><div class="line"><span class="comment"># Install Python</span></div><div class="line">brew install python</div><div class="line">brew install python3</div><div class="line"></div><div class="line"><span class="comment"># Install ruby-build and rbenv</span></div><div class="line">brew install ruby-build</div><div class="line">brew install rbenv</div><div class="line">LINE=<span class="string">'eval "$(rbenv init -)"'</span></div><div class="line">grep -q <span class="string">"<span class="variable">$LINE</span>"</span> ~/.extra || <span class="built_in">echo</span> <span class="string">"<span class="variable">$LINE</span>"</span> &gt;&gt; ~/.extra</div><div class="line"></div><div class="line"><span class="comment"># Install more recent versions of some OS X tools.</span></div><div class="line">brew install vim --override-system-vi</div><div class="line">brew install homebrew/dupes/grep</div><div class="line">brew install homebrew/dupes/openssh</div><div class="line">brew install homebrew/dupes/screen</div><div class="line">brew install homebrew/php/php55 --with-gmp</div><div class="line"></div><div class="line"><span class="comment"># Install font tools.</span></div><div class="line">brew tap bramstein/webfonttools</div><div class="line">brew install sfnt2woff</div><div class="line">brew install sfnt2woff-zopfli</div><div class="line">brew install woff2</div><div class="line"></div><div class="line"><span class="comment"># Install some CTF tools; see https://github.com/ctfs/write-ups.</span></div><div class="line">brew install aircrack-ng</div><div class="line">brew install bfg</div><div class="line">brew install binutils</div><div class="line">brew install binwalk</div><div class="line">brew install cifer</div><div class="line">brew install dex2jar</div><div class="line">brew install dns2tcp</div><div class="line">brew install fcrackzip</div><div class="line">brew install foremost</div><div class="line">brew install hashpump</div><div class="line">brew install hydra</div><div class="line">brew install john</div><div class="line">brew install knock</div><div class="line">brew install netpbm</div><div class="line">brew install nmap</div><div class="line">brew install pngcheck</div><div class="line">brew install socat</div><div class="line">brew install sqlmap</div><div class="line">brew install tcpflow</div><div class="line">brew install tcpreplay</div><div class="line">brew install tcptrace</div><div class="line">brew install ucspi-tcp <span class="comment"># `tcpserver` etc.</span></div><div class="line">brew install homebrew/x11/xpdf</div><div class="line">brew install xz</div><div class="line"></div><div class="line"><span class="comment"># Install other useful binaries.</span></div><div class="line">brew install ack</div><div class="line">brew install dark-mode</div><div class="line"><span class="comment">#brew install exiv2</span></div><div class="line">brew install git</div><div class="line">brew install git-lfs</div><div class="line">brew install git-flow</div><div class="line">brew install git-extras</div><div class="line">brew install hub</div><div class="line">brew install imagemagick --with-webp</div><div class="line">brew install lua</div><div class="line">brew install lynx</div><div class="line">brew install p7zip</div><div class="line">brew install pigz</div><div class="line">brew install pv</div><div class="line">brew install rename</div><div class="line">brew install rhino</div><div class="line">brew install speedtest_cli</div><div class="line">brew install ssh-copy-id</div><div class="line">brew install tree</div><div class="line">brew install webkit2png</div><div class="line">brew install zopfli</div><div class="line">brew install pkg-config libffi</div><div class="line">brew install pandoc</div><div class="line"></div><div class="line"><span class="comment"># Lxml and Libxslt</span></div><div class="line">brew install libxml2</div><div class="line">brew install libxslt</div><div class="line">brew link libxml2 --force</div><div class="line">brew link libxslt --force</div><div class="line"></div><div class="line"><span class="comment"># gitbook autocover</span></div><div class="line">brew install pkg-config cairo pango libpng jpeg giflib</div><div class="line"></div><div class="line"><span class="comment"># Install Cask</span></div><div class="line">brew install caskroom/cask/brew-cask</div><div class="line">brew tap caskroom/versions</div><div class="line"></div><div class="line"><span class="comment"># aerial 屏保</span></div><div class="line"><span class="comment"># https://github.com/JohnCoates/Aerial</span></div><div class="line">brew cask install aerial</div><div class="line"><span class="comment"># https://github.com/sindresorhus/quick-look-plugins</span></div><div class="line">brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzipql qlimagesize webpquicklook suspicious-package quicklookase qlvideo</div><div class="line"></div><div class="line">brew update &amp;&amp; brew upgrade --all &amp;&amp; brew cleanup &amp;&amp; brew prune</div></pre></td></tr></table></figure>
<h3 id="2-3-必备软件-之-编程语言"><a href="#2-3-必备软件-之-编程语言" class="headerlink" title="2.3 必备软件 之 编程语言"></a>2.3 必备软件 之 编程语言</h3><h4 id="2-3-1-Shell"><a href="#2-3-1-Shell" class="headerlink" title="2.3.1 Shell"></a>2.3.1 Shell</h4><p>MAC 使用的大多命令行工具来自于 FreeBSD , 并不是来自 GNU , 所以很多命令会与常规的 linux 命令大同小异。</p>
<p>而本人喜欢 GNU 系软件。</p>
<p>Shell 脚本可参考我的笔记。 <code>第九节如何优雅的使用 Shell</code>_</p>
<p>说到 shell, 除了要使用 bash 的 shell 之外，zsh 的 shell 也值得一试。（不过大神 kennethreitz 最喜欢 fish shell )</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<h4 id="2-3-1-1-Oh-My-Zsh"><a href="#2-3-1-1-Oh-My-Zsh" class="headerlink" title="2.3.1.1 Oh My Zsh"></a>2.3.1.1 Oh My Zsh</h4><h4 id="2-3-2-Python"><a href="#2-3-2-Python" class="headerlink" title="2.3.2 Python"></a>2.3.2 Python</h4><p>笔者虽然也接触过很多语言，都是粗浅一过，但无一精通，唯一可以稍微谈谈的就是 Python 语言。</p>
<p>当然，安装完毕自然是可以参考一下我的 <code>第三节 Pythonista 的工具集</code>_</p>
<p>国内外网络环境不通畅，安装与配置环境这件小事也就成了一个大事情。</p>
<p>我对于 Python 版本的安装 和 Python 依赖包管理有三个阶段：</p>
<ul>
<li>入门级</li>
<li>新手级</li>
<li>熟手级</li>
</ul>
<h4 id="2-3-2-1-入门级"><a href="#2-3-2-1-入门级" class="headerlink" title="2.3.2.1 入门级"></a>2.3.2.1 入门级</h4><p>最初是入门级，我配置环境和大部分的 Pythonista 一样，最初版：</p>
<ul>
<li>面对 Python 版本的管理，干脆就是不管理，brew 安装一个 Python2 用于开发 Python2 的代码，brew install 一个 Python3 用于 Python3 的代码开发。</li>
<li>面对 Python 依赖包管理，干脆就是直接使用 virualenv 或者他的 wrapper 直接 venv 一个环境，然后 active 一下，接着 PIP install -r req.txt</li>
</ul>
<h4 id="2-3-2-2-新手级"><a href="#2-3-2-2-新手级" class="headerlink" title="2.3.2.2 新手级"></a>2.3.2.2 新手级</h4><ul>
<li>面对 Python 版本的管理，使用 pyenv</li>
<li>面对 Python 依赖包管理，使用 pyenv virtualenv 出多个环境，然后切换环境就好了。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">brew install pipenv</div><div class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv.git ~/.pyenv</div><div class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv</div><div class="line"><span class="built_in">echo</span> <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'eval "$(pyenv virtualenv-init -)"'</span> &gt;&gt; ~/.zshrc</div><div class="line"></div><div class="line"><span class="comment"># 接着另开终端</span></div><div class="line"><span class="comment"># 不喜写兼容代码，所有代码均向 3.5+ 靠拢</span></div><div class="line">v=3.5.2|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></div><div class="line">v=3.6.0|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></div><div class="line">v=2.7.11|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></div><div class="line"><span class="comment"># 可以先用迅雷把 官网的 Anaconda3-4.4.0-MacOSX-x86_64.sh 下载下来，然后</span></div><div class="line">mv Anaconda3-4.4.0-MacOSX-x86_64.sh ~/.pyenv/cache/ &amp;&amp; pyenv install anaconda3-4.4.0</div><div class="line"></div><div class="line"><span class="comment"># 设置 Global Python 为 2.7.11, 备注：尽量不要把 Py3 设置为全局，否则由于 Homebrew 本身有一些依赖是依赖于 Py2 的，这样容易出现一些奇怪的问题。</span></div><div class="line">pyenv global 2.7.11</div><div class="line">pip install -i https://pypi.doubanio.com/simple requests</div><div class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></div><div class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">"jedi&gt;=0.9.0"</span> <span class="string">"json-rpc&gt;=1.8.1"</span> <span class="string">"service_factory&gt;=0.1.5"</span> flake8 pytest autoflake hy</div><div class="line"></div><div class="line"><span class="comment"># 创建最常用 Py3 虚拟环境</span></div><div class="line">pyenv virtualenv 3.5.2 py3-daily</div><div class="line">pyenv activate py3-daily</div><div class="line">pip install -i https://pypi.doubanio.com/simple requests</div><div class="line">pip install -i https://pypi.doubanio.com/simple beatutifulsoup4</div><div class="line">pip install -i https://pypi.doubanio.com/simple ipython[notebook]</div><div class="line">pip install -i https://pypi.doubanio.com/simple jupyter</div><div class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></div><div class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">"jedi&gt;=0.9.0"</span> <span class="string">"json-rpc&gt;=1.8.1"</span> <span class="string">"service_factory&gt;=0.1.5"</span> flake8 pytest autoflake hy</div><div class="line"></div><div class="line"><span class="comment"># 创建 Anaconda 的数据科学 AI 环境</span></div><div class="line">pyenv virtualenv anaconda3-4.4.0 py3-ai</div><div class="line">pyenv activate anaconda3-4.4.0/envs/py3-ai</div><div class="line">pyenv deactivate</div><div class="line"></div><div class="line"><span class="comment"># 进入一个项目之后</span></div><div class="line">pyenv activate py3-proj</div><div class="line">pip install -r requirements/local.txt</div><div class="line">pip install -r requirements/prod.txt</div><div class="line"><span class="comment"># requirements/local.txt 与 requirements/prod.txt 依赖于 requirements/base.txt</span></div></pre></td></tr></table></figure>
<h4 id="2-3-2-3-熟手级"><a href="#2-3-2-3-熟手级" class="headerlink" title="2.3.2.3 熟手级"></a>2.3.2.3 熟手级</h4><p>其实，第一种入门级管理方式弊病在于，python 版本太粗糙，之前遇到一个 python3.3 的问题，python3.4 就解决了。而为了避免这种奇葩的版本差异带来的潜在风险，开发与部署一般要锁死 Python 版本。</p>
<p>即便是解决了入门级管理方式带来的版本管理粗糙的问题，同样的，依赖也要锁死。<strong>一个项目对应一种环境该多好</strong> 通过 PIP 的确可以用 freeze 输出为 txt 达到锁死的目的。但个人认为，这个还不够，至少要知道依赖树之类的吧？还要知道哪些东西是可以更新的吧？</p>
<p>而且，就应该像 node 项目里面的 package.json 一样，把依赖什么乱七八糟的东西都放进去才好。</p>
<ul>
<li>面对 Python 版本和依赖包管理，使用 pipenv</li>
</ul>
<blockquote>
<p>这代表着，只要一个就行了。</p>
</blockquote>
<h3 id="2-4-必备软件-之-dotfiles"><a href="#2-4-必备软件-之-dotfiles" class="headerlink" title="2.4 必备软件 之 dotfiles"></a>2.4 必备软件 之 dotfiles</h3><p>详细内容请见</p>
<h2 id="0x03-踩坑史"><a href="#0x03-踩坑史" class="headerlink" title="0x03 踩坑史"></a>0x03 踩坑史</h2><h3 id="3-1-日常类"><a href="#3-1-日常类" class="headerlink" title="3.1 日常类"></a>3.1 日常类</h3><h4 id="01-时间机器无法完成备份"><a href="#01-时间机器无法完成备份" class="headerlink" title="01. 时间机器无法完成备份"></a>01. 时间机器无法完成备份</h4><p>我有定期备份的习惯，在一次备份中，意外的发现怎么备份都无法备份完毕，经过几次测试：</p>
<ol>
<li>我首先猜测是硬盘问题，换了一块硬盘，问题依旧。</li>
<li>复制了几个大文件，感觉也不太像是接口接触不良的问题。</li>
<li>我认为可能是文件数量过多导致的问题。于是删除掉 node_module 后再次备份，备份成功。当然，这也有一定概率是误打误撞。毕竟从概率学上讲，坏掉的钟还能一天有两次时间是对的呢。</li>
</ol>
<blockquote>
<p>外接硬盘的时候，将网络关闭即可。</p>
</blockquote>
<h4 id="02-下载站的软件包显示损坏"><a href="#02-下载站的软件包显示损坏" class="headerlink" title="02. 下载站的软件包显示损坏"></a>02. 下载站的软件包显示损坏</h4><p>有的时候并不是软件损坏，而是 macOS 的安全配置中配置关掉了未识别出的 App</p>
<p>在终端中开启这个选项，并在安全与隐私处点上 anywhere 即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo spctl --master-disable</div></pre></td></tr></table></figure>
<h3 id="3-2-编程类"><a href="#3-2-编程类" class="headerlink" title="3.2 编程类"></a>3.2 编程类</h3><h4 id="01-homebrew-的与-Python-的问题"><a href="#01-homebrew-的与-Python-的问题" class="headerlink" title="01. homebrew 的与 Python 的问题"></a>01. homebrew 的与 Python 的问题</h4><p>在 Python 中执行下面的代码的时候总是报错：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ip = socket.gethostbyname(socket.gethostname())</div><div class="line"><span class="comment"># socket.gaierror: [Errno 8] nodename nor servname provided, or not known</span></div><div class="line"></div><div class="line"><span class="comment"># 最后发现是因为设置主机名没有设置好</span></div><div class="line">sudo scutil --set ComputerName <span class="string">"newname"</span></div><div class="line">sudo scutil --set LocalHostName <span class="string">"newname"</span></div><div class="line">sudo scutil --set HostName <span class="string">"newname"</span></div><div class="line">dscacheutil -flushcache</div><div class="line"><span class="comment"># 然后重启电脑即可</span></div></pre></td></tr></table></figure>
<p>如果本机安装了 Homebrew 如果后面使用 PyEnv 或者 Anaconda 并且设置当前环境为默认 Python 为 Python3（不建议这么搞）, 但是如果偏偏要把默认的 Python 版本换成 Python3, 会弹出一些 pythonpath<br>的问题，执行下面命令即可暂时屏蔽这个问题，但是没有隐患则不清楚。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv /usr/<span class="built_in">local</span>/lib/python2.7/site-packages/sitecustomize.py /usr/<span class="built_in">local</span>/lib/python2.7/site-packages/sitecustomize.py.back</div></pre></td></tr></table></figure>
<h4 id="02-Homebrew-安装过去的文件"><a href="#02-Homebrew-安装过去的文件" class="headerlink" title="02. Homebrew 安装过去的文件"></a>02. Homebrew 安装过去的文件</h4><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li>本文部分命令行安装借鉴了 <a href="https://github.com/donnemartin/dev-setup" target="_blank" rel="external">dev-setup</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2016-02</strong> 确定大致内容</li>
<li><strong>2017-06-28</strong> 重修文字，调整文章结构，Python 环境 和 Homebrew 安装环境</li>
<li><strong>2017-10-05</strong> 再次重修文字，不定期更新</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当时写这篇文章的时候才接触 mac 没多久，使用快两年之后，再次修订了本文。&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;谈及 m
    
    </summary>
    
      <category term="学习资源" scheme="http://twocucao.xyz/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>进击的 VueJS</title>
    <link href="http://twocucao.xyz/2017/09/25/VueAll/"/>
    <id>http://twocucao.xyz/2017/09/25/VueAll/</id>
    <published>2017-09-25T12:06:05.000Z</published>
    <updated>2017-11-21T01:28:03.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近升级项目的脚手架，踩了一些关于 Webpack2 升级为 Webpack3 的版本的坑，解决了之后，顺手分享一下，我接近一年来对 Vue 项目的开发理解。</p>
<p>本文仅限于 VueCli 下面的开发：</p>
<ul>
<li>VueJS 2.5.2</li>
</ul>
<h2 id="0x01-项目结构"><a href="#0x01-项目结构" class="headerlink" title="0x01 项目结构"></a>0x01 项目结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 根文件</div><div class="line">├── Makefile 恩，其实 package.json 也能代替这个功能。</div><div class="line">├── README.md</div><div class="line">├── build #</div><div class="line">├── config # 环境变量配置</div><div class="line">├── dist # 最后输出</div><div class="line">├── extra # 个人偏好，存放最终用于打包成 IconFont 的 svg</div><div class="line">├── index.html # 可以在这里加首屏 loading, 以及其他预先准备好的样式。</div><div class="line">├── node_modules</div><div class="line">├── package.json # 依赖，开发时</div><div class="line">├── src</div><div class="line">├── static # 存放静态资源</div><div class="line">├── test</div><div class="line">└── yarn.lock</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 在 SRC 下面</div><div class="line">├── App.vue # CORE 组件</div><div class="line">├── api # 相关的 Web API 定义</div><div class="line">├── assets # 静态资源，对于已经压缩的，还是直接放在 Static 下面</div><div class="line">├── components</div><div class="line">├── config # 定义常量名称</div><div class="line">├── filters # 定义过滤器</div><div class="line">├── directive # 定义指令，比如 v-loading</div><div class="line">├── main.js # 用于初始化项目，注册组件等等</div><div class="line">├── mixins # 混合</div><div class="line">├── routes.js # 路由</div><div class="line">├── store # vuex 状态</div><div class="line">└── utils # 工具方法</div></pre></td></tr></table></figure>
<p>值得一提的就是 main.js 应该要做的事情</p>
<ul>
<li>注册全局组件和过滤器</li>
<li>给 Vue 实例加戏，哦，说错了，给实例加一些全局性的方法，比如 $comfirm 等对话框 $verbose $warning 等日志</li>
<li>完成刷新界面之后的从 localStorage 的重新赋值</li>
<li>注册路由切换的时候的调用的各类方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># components</div><div class="line">├── fed-commons 定义通用型组件，比如手风琴，tab 卡，全局的卡片，一般为了开发效率，如果是 PC 端的话，建议使用 ElementUI,ElementUI 不满足要求的时候，再考虑自己封装组件。</div><div class="line">└── views</div><div class="line">    ├── auth</div><div class="line">        ├── Login.vue</div><div class="line">        ├── Register.vue</div><div class="line">    ├── commons</div><div class="line">        ├── 404.vue</div><div class="line">        ├── 401.vue</div><div class="line">    ├── core</div><div class="line">        ├── Dashboard.vue</div><div class="line">        ├── Content.vue</div><div class="line">    ├── pages</div><div class="line">        ├── AModule</div><div class="line">            ├── AModulePart1Componennt</div><div class="line">                ├── Charts01.vue</div><div class="line">                ├── Map02.vue</div><div class="line">                ├── Editor03.vue</div><div class="line">            ├── AModulePart1.vue</div><div class="line">            ├── AModulePart2.vue</div><div class="line">        ├── BModule</div><div class="line">            ├── BModulePart1.vue</div><div class="line">            ├── BModulePart2.vue</div></pre></td></tr></table></figure>
<p>指的一提的是，AModulePart1.vue 页面的同级 AModulePart1Componennt 下面如果有多个 ECharts 图表，实际上可以通过 mixin 来达到减少代码量的目的。</p>
<h2 id="0x02-一些零散技巧"><a href="#0x02-一些零散技巧" class="headerlink" title="0x02 一些零散技巧"></a>0x02 一些零散技巧</h2><h3 id="1-离线-IconFont"><a href="#1-离线-IconFont" class="headerlink" title="1. 离线 IconFont"></a>1. 离线 IconFont</h3><p>不太喜欢用在线的东西，当然，这并不是说 iconfont 不好，只是个人偏好而已。</p>
<p>所以，我就查找了一些资料，正好之前研究过某个网站的反爬机制，研究了一下他们的 iconfont, 知道了 font-carrier, 然后调用 node 脚本打包字体文件，并在这个过程中自动生成对应的 iconfont.css</p>
<p>最后的结果就是，当我放一个文件到 svg 文件夹下面的时候，比如 bank.svg , 我执行一下脚本，生成对应的字体文件，在 vue 组件中直接输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span class=&quot;iconfont iconfont-bank&quot; &gt;&lt;/span&gt;</div></pre></td></tr></table></figure>
<p>然后就呈现出来了。</p>
<h3 id="2-打包-DLL"><a href="#2-打包-DLL" class="headerlink" title="2. 打包 DLL"></a>2. 打包 DLL</h3><p>大约在半年前，开发过程中突然在使用 ECharts 后，仅仅不到 10M 大小的项目居然开发 build 的时间需要 5MIN, 打包出来的文件超级大。居然接近了 100 多 M</p>
<p>震惊之余，差点准备写一篇骗点击量的文章：<strong>看完震惊了！！前端和后端男程序员都无法忍受的大小！</strong>, 然后文章内就介绍 Webpack 打包文件居然没有避免重复引入依赖库导致打包文件太大提出抗议。</p>
<p>回到主题，使用 npm run analyze 发现问题出现在 ECharts 上， 每一个图表组件都是依赖于 ECharts, 而每一个组件都包含了一个完整的 ECharts 库的大小。</p>
<p>于是，我一边吐槽 webpack 考虑不周，另一方面寻找解决方案。最后找到了 DLL 方案</p>
<p>这个方案的原理大致是：</p>
<ul>
<li>编写独立的脚本，把几个需要复用的库一个配置文件 (manifest.json), 以及打包库到一个 JS 文件中。</li>
<li>然后从 index.html 引入这个 JS 文件。</li>
<li>接着在 webpack 配置中使之每次引入一个库的时候，避免重复引入。</li>
</ul>
<blockquote>
<p>但这不应该是 Webpack 本身就应该做的吗？为嘛还要配置，还要不伦不类的生成一个配置文件和一个 JS 文件，再从 index.html 里面导入？</p>
</blockquote>
<p>当然，后来出来了一个 <a href="https://github.com/asfktz/autodll-webpack-plugin" target="_blank" rel="external">https://github.com/asfktz/autodll-webpack-plugin</a> 尝试了之后。感觉很赞。可惜在 mac 上一切安好，Windows 上晴天霹雳，debug 了一下，发现是这个库的一个依赖对 windows 的路径处理好像还有点小问题。而公司的前端小伙伴是 Windowser, 只好作罢。</p>
<p>Macer 可以先用试试，至于 Windowser, 那就去这个 ISSUE 下面催催作者吧… 哈哈哈</p>
<h3 id="3-开发环境与部署环境"><a href="#3-开发环境与部署环境" class="headerlink" title="3. 开发环境与部署环境"></a>3. 开发环境与部署环境</h3><p>VueCLI 内置了变量的管理，你可以定义 config/dev.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</div><div class="line">  <span class="attr">NODE_ENV</span>: <span class="string">'"development"'</span>,</div><div class="line">  <span class="attr">API_ROOT</span>: <span class="string">'"http://dev-data.twocucao.xyz"'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>其实，开发的环境用一组变量是不行的。比如，开发的人分为纯前端，纯后端，我这样的前后都会一些的人，每个对于环境的配置都是不太一样的。</p>
<ul>
<li>对于前端 Windowser 直接执行 npm run dev 对接到局域网服务器</li>
<li>对于单个人同时调试后端和前端的时候，一般要把 Web API 对应到本地的机器上。可是使用环境便来配置不同的 DEBUG_MODE=True npm run dev</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// dev.js 应该如下</span></div><div class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</div><div class="line"><span class="keyword">var</span> prodEnv = <span class="built_in">require</span>(<span class="string">'./prod.env'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (process.env.DEBUG_MODE === <span class="string">'True'</span>)&#123;</div><div class="line">  <span class="built_in">module</span>.exports = merge(prodEnv, &#123;</div><div class="line">    <span class="attr">NODE_ENV</span>: <span class="string">'"development"'</span>,</div><div class="line">    <span class="attr">API_ROOT</span>: <span class="string">'"http://local-dev-data.twocucao.xyz"'</span></div><div class="line">  &#125;);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="built_in">module</span>.exports = merge(prodEnv, &#123;</div><div class="line">    <span class="attr">NODE_ENV</span>: <span class="string">'"development"'</span>,</div><div class="line">    <span class="attr">API_ROOT</span>: <span class="string">'"http://dev-data.twocucao.xyz"'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-路由管理与嵌套路由"><a href="#4-路由管理与嵌套路由" class="headerlink" title="4. 路由管理与嵌套路由"></a>4. 路由管理与嵌套路由</h3><p>路由管理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">const routes = [</div><div class="line">  &#123;</div><div class="line">    path: &apos;/login&apos;,</div><div class="line">    component: Login  // 似乎路由中的 component 至少要有一个不是懒加载的，否则会出奇怪的 BUG</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    path: &apos;/&apos;,</div><div class="line">    redirect: &apos;AModule/APage&apos;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    path: &apos;/&apos;,</div><div class="line">    meta: &#123;</div><div class="line">      requiresAuth: true // 通过这个用来区分网页是否需要注册用户登录</div><div class="line">    &#125;,</div><div class="line">    component: Dashboard,</div><div class="line">    children: [</div><div class="line">      &#123;</div><div class="line">        path: &apos;AModule&apos;,</div><div class="line">        component: AModule.vue,</div><div class="line">        name: &apos;AModule&apos;,</div><div class="line">        meta: &#123;</div><div class="line">          requiresAuth: true</div><div class="line">        &#125;,</div><div class="line">        children: [</div><div class="line">          &#123;</div><div class="line">            path: &apos;AModulePart1&apos;,</div><div class="line">            name: &apos;AModulePart1&apos;,</div><div class="line">            component: () =&gt; import(&apos;./components/views/pages/AModule&apos;)</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            path: &apos;AModulePart2&apos;,</div><div class="line">            name: &apos;AModulePart2&apos;,</div><div class="line">            component: () =&gt; import(&apos;./components/views/pages/AModule&apos;)</div><div class="line">          &#125;,</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    // not found handler</div><div class="line">    path: &apos;*&apos;,</div><div class="line">    component: NotFoundView</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="5-TODO"><a href="#5-TODO" class="headerlink" title="5. TODO"></a>5. TODO</h3><h3 id="6-登录，登录校验以及权限"><a href="#6-登录，登录校验以及权限" class="headerlink" title="6. 登录，登录校验以及权限"></a>6. 登录，登录校验以及权限</h3><p>登录可以使用 Mixin 来混入每一个需要校验登录权限的</p>
<h3 id="7-首屏-Loading"><a href="#7-首屏-Loading" class="headerlink" title="7. 首屏 Loading"></a>7. 首屏 Loading</h3><p>这个可以放在 index.html 里面</p>
<h3 id="8-日志管理"><a href="#8-日志管理" class="headerlink" title="8. 日志管理"></a>8. 日志管理</h3><p>我觉得日志管理也应该是比较重要的部分，不管是调试程序，还是用于检查用户浏览器这块的错误日志，甚至是埋点。</p>
<h3 id="9-SSR（未测试）"><a href="#9-SSR（未测试）" class="headerlink" title="9. SSR（未测试）"></a>9. SSR（未测试）</h3><h2 id="0x03-关于提升代码质量的一些零散的想法"><a href="#0x03-关于提升代码质量的一些零散的想法" class="headerlink" title="0x03 关于提升代码质量的一些零散的想法"></a>0x03 关于提升代码质量的一些零散的想法</h2><h3 id="1-语义化与可读性"><a href="#1-语义化与可读性" class="headerlink" title="1. 语义化与可读性"></a>1. 语义化与可读性</h3><h3 id="2-提取公共逻辑（通过-Service-Mixin-来）"><a href="#2-提取公共逻辑（通过-Service-Mixin-来）" class="headerlink" title="2. 提取公共逻辑（通过 Service, Mixin 来）"></a>2. 提取公共逻辑（通过 Service, Mixin 来）</h3><h3 id="3-CSS-管理"><a href="#3-CSS-管理" class="headerlink" title="3. CSS 管理"></a>3. CSS 管理</h3><p>在项目中，我采用 SCSS 来管理 CSS 代码，</p>
<p>过去的时候有两种 css 的代码命名方法</p>
<p>第一种，我管他叫做<strong>配置式写法</strong>，通过将 CSS 语法的几个片段转化成名称，从而实现快速配置出效果的的 CSS</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.fl</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.fr</span> &#123;</div><div class="line">  <span class="attribute">float</span>: right</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mr10</span> &#123;</div><div class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.pb10</span> &#123;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span></div><div class="line">&#125;</div><div class="line">....</div></pre></td></tr></table></figure>
<p>这种写法对于简单页面来说确实也是可以使用的。缺点就是当页面变得复杂一些的时候，则比较难控制这种短小精捍（不直观）的变量。比如</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.tmd01</span>&#123;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span></div><div class="line">  font-size: <span class="number">16px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#2d3c48</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.6</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>请脑补一下我的黄人问号脸</p>
</blockquote>
<p>当然，如果用得好的话，自然是 OK, 如果用不好的话，</p>
<p>后来进入了嵌套写法时代（感谢伟大的 Rails 社区出的 SASS）, 下面的语法都是 SCSS.</p>
<p>第二种写法就变成了这样</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.actions</span> &#123;</div><div class="line">  <span class="selector-class">.card_wrapper</span> &#123;</div><div class="line">    <span class="selector-class">.card</span> &#123;</div><div class="line">      <span class="selector-class">.title</span> &#123;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.content</span> &#123;</div><div class="line">        <span class="selector-class">.list</span> &#123;</div><div class="line">          <span class="selector-class">.fa</span> &#123;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>外加变量和 mixin 以及函数的话，基本上就可以完成代码的组织了。</p>
<p>这种写法倒是比原来不知道高到哪里去了，但问题依旧存在，比如 title,content 这些玩意太多，完完全全的看不懂。更加糟糕的事情是，有的小伙伴直接是乱用嵌套，也不用伪类和伪选择器，从而达到单页面调出来小伙比较快，但因为代码不能重用，调多个页面的时候速度巨慢无比。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.apage &#123;</div><div class="line">  bbizlogic &#123;</div><div class="line">    .actions &#123;</div><div class="line">      .card_wrapper &#123;</div><div class="line">        .card &#123;</div><div class="line">          .title &#123;</div><div class="line">          &#125;</div><div class="line">          .content &#123;</div><div class="line">            .list &#123;</div><div class="line">              .fa &#123;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我本人推荐（其实我是写 Python Web 后端的，逃… ) 代码风格比较倾向于 BEM 命名，关于 BEM 的介绍，请参考简单心理团队的教程。</p>
<ul>
<li><a href="https://jiandanxinli.github.io/2016-08-11.html" target="_blank" rel="external">https://jiandanxinli.github.io/2016-08-11.html</a></li>
<li><a href="https://juejin.im/post/58d0e5caa22b9d00643e8b51" target="_blank" rel="external">https://juejin.im/post/58d0e5caa22b9d00643e8b51</a></li>
</ul>
<p>然而，最好的方式，就是读一个非常使用 SCSS 来组织项目的 CSS 代码的成熟项目。</p>
<p>我推荐两个：</p>
<ul>
<li>BOOTSTRAP V4: Bootstrap V4 使用 SCSS 来写</li>
<li>ELEMENT UI: 饿了么的团队出的，前段时间从 v1 版本升级到 v2 版本，发现网站大部分样式都没有出现大变动，在这里给个赞。</li>
</ul>
<h4 id="1-style-标签的-Scoped-的滥用"><a href="#1-style-标签的-Scoped-的滥用" class="headerlink" title="1. style 标签的 Scoped 的滥用"></a>1. style 标签的 Scoped 的滥用</h4><p>我印象中，有个小伙伴把一个比较大的 CSS 库多次 import 到被 Scoped 的组件中，于是开发时猛然发现 head 处多了大量的 style 标签，除了 css 选择器后面随机的属性 hash, 文件内容都一样。</p>
<blockquote>
<p>公共组件往往可以通过嵌套和加前缀的方式来防止污染。如果 scoped 的属性里面有成吨的 style, 慎用 import.</p>
</blockquote>
<h4 id="2-保持代码的通用性"><a href="#2-保持代码的通用性" class="headerlink" title="2. 保持代码的通用性"></a>2. 保持代码的通用性</h4><p>一般，当同一段逻辑出现三次的时候，是要停下来重构一下的，这样的话，就可以节省很多时间。</p>
<p>套用在 CSS 的样式上也是如此。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;最近升级项目的脚手架，踩了一些关于 Webpack2 升级为 Webpack3 的版本的坑，解决了之后，顺手分享一下，我接近一年来对 Vue 项目的开发理解。&lt;/p&gt;
&lt;p&gt;本文仅限于 VueCli 下面的开发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VueJS 2.5.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;0x01-项目结构&quot;&gt;&lt;a href=&quot;#0x01-项目结构&quot; class=&quot;headerlink&quot; title=&quot;0x01 项目结构&quot;&gt;&lt;/a&gt;0x01 项目结构&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 根文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── Makefile 恩，其实 package.json 也能代替这个功能。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── README.md&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── build #&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── config # 环境变量配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── dist # 最后输出&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── extra # 个人偏好，存放最终用于打包成 IconFont 的 svg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── index.html # 可以在这里加首屏 loading, 以及其他预先准备好的样式。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── node_modules&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── package.json # 依赖，开发时&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── src&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── static # 存放静态资源&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── test&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── yarn.lock&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="学习资源" scheme="http://twocucao.xyz/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
  </entry>
  
  <entry>
    <title>VueJS 文档阅读笔记</title>
    <link href="http://twocucao.xyz/2017/09/15/Vue/"/>
    <id>http://twocucao.xyz/2017/09/15/Vue/</id>
    <published>2017-09-15T12:06:05.000Z</published>
    <updated>2017-11-21T01:27:51.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-Essential"><a href="#0x01-Essential" class="headerlink" title="0x01 Essential"></a>0x01 Essential</h2><h3 id="1-1-The-Vue-Instance"><a href="#1-1-The-Vue-Instance" class="headerlink" title="1.1 The Vue Instance"></a>1.1 The Vue Instance</h3><p>当 Vue 实例被创建时，添加所有在 Data 对象中的属性到 Reactivity System 中。</p>
<blockquote>
<p>而创建之后添加赋值新属性，则不 Reactive</p>
</blockquote>
<p>而实例被创建之时，会自带前缀为 $ 的一系列属性和方法</p>
<h4 id="1-1-1-内置方法和属性"><a href="#1-1-1-内置方法和属性" class="headerlink" title="1.1.1 内置方法和属性"></a>1.1.1 内置方法和属性</h4><h5 id="Instance-Properties"><a href="#Instance-Properties" class="headerlink" title="Instance Properties"></a>Instance Properties</h5><p>vm.$data<br>vm.$props<br>vm.$el<br>vm.$options<br>vm.$parent<br>vm.$root<br>vm.$children<br>vm.$slots<br>vm.$scopedSlots<br>vm.$refs<br>vm.$isServer<br>vm.$attrs<br>vm.$listeners</p>
<a id="more"></a>
<h5 id="Instance-Methods-Data"><a href="#Instance-Methods-Data" class="headerlink" title="Instance Methods / Data"></a>Instance Methods / Data</h5><p>vm.$watch<br>vm.$set<br>vm.$delete</p>
<h5 id="Instance-Methods-Events"><a href="#Instance-Methods-Events" class="headerlink" title="Instance Methods / Events"></a>Instance Methods / Events</h5><p>vm.$on<br>vm.$once<br>vm.$off<br>vm.$emit</p>
<h5 id="Instance-Methods-Lifecycle"><a href="#Instance-Methods-Lifecycle" class="headerlink" title="Instance Methods / Lifecycle"></a>Instance Methods / Lifecycle</h5><p>vm.$mount<br>vm.$forceUpdate<br>vm.$nextTick<br>vm.$destroy</p>
<h4 id="1-1-2-生命周期"><a href="#1-1-2-生命周期" class="headerlink" title="1.1.2 生命周期"></a>1.1.2 生命周期</h4><p><img src="https://vuejs.org/images/lifecycle.png" alt="生命周期"></p>
<h3 id="1-2-Template-Syntax"><a href="#1-2-Template-Syntax" class="headerlink" title="1.2 Template Syntax"></a>1.2 Template Syntax</h3><p>VueJS 编译 模板为 VirtualDOM render 函数，如果对 VirtualDom 非常熟悉的话，则可以使用</p>
<h4 id="1-2-1-插值"><a href="#1-2-1-插值" class="headerlink" title="1.2.1 插值"></a>1.2.1 插值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># text</div><div class="line">&#123;&#123; msg &#125;&#125;</div><div class="line">&lt;span v-once&gt; &#123;&#123; msg &#125;&#125; &lt;span&gt;</div><div class="line"># raw html</div><div class="line">&lt;div v-html=&quot;rawHTML&quot;&gt;&lt;/div&gt;</div><div class="line"># attributes</div><div class="line">&lt;div v-bind:id=&quot;dynamicID&quot;&gt;&lt;/div&gt;</div><div class="line"># JS Expressions</div><div class="line">&#123;&#123; number + 1 &#125;&#125;</div><div class="line">&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;</div><div class="line">&#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;</div><div class="line">&lt;div v-bind:id=&quot;&apos;list-&apos; + id&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="1-2-2-指令"><a href="#1-2-2-指令" class="headerlink" title="1.2.2 指令"></a>1.2.2 指令</h4><ul>
<li>v-bind -&gt; :</li>
<li>v-on   -&gt; @</li>
<li>v-on:submit.prevent=”onSubmit”</li>
</ul>
<h3 id="1-3-Computed-Properties-and-Watchers"><a href="#1-3-Computed-Properties-and-Watchers" class="headerlink" title="1.3 Computed Properties and Watchers"></a>1.3 Computed Properties and Watchers</h3><ul>
<li>当使用 Computed 的时候，一旦其依赖的 reactive 的 data 发生变化之后，则其值发生变化。</li>
<li>其实，可以在模板中调用方法，但只能在项目中。</li>
</ul>
<h3 id="1-4-Class-and-Style-Bindings"><a href="#1-4-Class-and-Style-Bindings" class="headerlink" title="1.4 Class and Style Bindings"></a>1.4 Class and Style Bindings</h3><h4 id="1-4-1-Object-语法"><a href="#1-4-1-Object-语法" class="headerlink" title="1.4.1 Object 语法"></a>1.4.1 Object 语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;static&quot;</div><div class="line">     :class=&quot;&#123; active: isActive, &apos;text-danger&apos;: hasError &#125;&quot;&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="1-4-2-Array-语法"><a href="#1-4-2-Array-语法" class="headerlink" title="1.4.2 Array 语法"></a>1.4.2 Array 语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;[isActive ? activeClass : &apos;&apos;, errorClass]&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="1-4-3-组件"><a href="#1-4-3-组件" class="headerlink" title="1.4.3 组件"></a>1.4.3 组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;my-component class=&quot;baz boo&quot;&gt;&lt;/my-component&gt;</div><div class="line"></div><div class="line">&lt;p  class=&quot;origin baz boo&quot;&gt;</div></pre></td></tr></table></figure>
<h3 id="1-5-Conditional-Rendering"><a href="#1-5-Conditional-Rendering" class="headerlink" title="1.5 Conditional Rendering"></a>1.5 Conditional Rendering</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;</div><div class="line">&lt;h1 v-else&gt;No&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;</div><div class="line">  A</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;</div><div class="line">  B</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt;</div><div class="line">  C</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else&gt;</div><div class="line">  Not A/B/C</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>v-if  是否</li>
<li>v-for 优先级高于 v-if</li>
</ul>
<h3 id="1-6-List-Rendering"><a href="#1-6-List-Rendering" class="headerlink" title="1.6 List Rendering"></a>1.6 List Rendering</h3><p>对于数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;example-2&quot;&gt;</div><div class="line">  &lt;li v-for=&quot;(item, index) in items&quot;&gt;</div><div class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>对于对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;example-2&quot;&gt;</div><div class="line">  &lt;li v-for=&quot;(item, index) in items&quot;&gt;</div><div class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<h4 id="1-6-1-ARRAY-修改检测"><a href="#1-6-1-ARRAY-修改检测" class="headerlink" title="1.6.1 ARRAY 修改检测"></a>1.6.1 ARRAY 修改检测</h4><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<h5 id="取代数组"><a href="#取代数组" class="headerlink" title="取代数组"></a>取代数组</h5><p>filter</p>
<h5 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">直接通过 index 对数组进行修改</div><div class="line"></div><div class="line">不应该</div><div class="line"></div><div class="line">vm.items[indexOfItem] = newValue</div><div class="line"></div><div class="line">应该</div><div class="line"></div><div class="line">// Vue.set</div><div class="line">Vue.set(example1.items, indexOfItem, newValue)</div><div class="line"></div><div class="line">// Array.prototype.splice</div><div class="line">example1.items.splice(indexOfItem, 1, newValue)</div><div class="line"></div><div class="line">修改 length</div><div class="line"></div><div class="line">不该 vm.items.length = newLength</div><div class="line"></div><div class="line">应该 example1.items.splice(newLength)</div></pre></td></tr></table></figure>
<blockquote>
<p>猜测背后可能是因为这种方式是无法监测设置</p>
</blockquote>
<h4 id="1-6-2-Object-修改检测警告"><a href="#1-6-2-Object-修改检测警告" class="headerlink" title="1.6.2 Object 修改检测警告"></a>1.6.2 Object 修改检测警告</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">js 无法直接提供对</div><div class="line"></div><div class="line"><span class="keyword">this</span>.$set(<span class="keyword">this</span>.userProfile, <span class="string">'age'</span>, <span class="number">27</span>)</div></pre></td></tr></table></figure>
<h3 id="1-7-Event-Handling"><a href="#1-7-Event-Handling" class="headerlink" title="1.7 Event Handling"></a>1.7 Event Handling</h3><h4 id="1-7-1-Listening-to-Events"><a href="#1-7-1-Listening-to-Events" class="headerlink" title="1.7.1 Listening to Events"></a>1.7.1 Listening to Events</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"counter += 1"</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>PS: 注意，前面 v-on v-bind 所有的绑定可以绑在方法上，也可以直接填单行表达式。可以提高可阅读性</p>
<h4 id="1-7-2-Method-Event-Handlers"><a href="#1-7-2-Method-Event-Handlers" class="headerlink" title="1.7.2 Method Event Handlers"></a>1.7.2 Method Event Handlers</h4><p>可以绑定方法</p>
<h4 id="1-7-3-Methods-in-Inline-Handlers"><a href="#1-7-3-Methods-in-Inline-Handlers" class="headerlink" title="1.7.3 Methods in Inline Handlers"></a>1.7.3 Methods in Inline Handlers</h4><p>可以绑定方法加参数，配合 for / if</p>
<h4 id="1-7-4-Event-Modifiers"><a href="#1-7-4-Event-Modifiers" class="headerlink" title="1.7.4 Event Modifiers"></a>1.7.4 Event Modifiers</h4><p>事件修饰符</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.stop</div><div class="line">.prevent</div><div class="line">.capture</div><div class="line">.self</div><div class="line">.once</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- the click event's propagation will be stopped --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- the submit event will no longer reload the page --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- modifiers can be chained --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- just the modifier --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- use capture mode when adding the event listener --&gt;</span></div><div class="line"><span class="comment">&lt;!-- i.e. an event targeting an inner element is handled here before being handled by that element --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- only trigger handler if event.target is the element itself --&gt;</span></div><div class="line"><span class="comment">&lt;!-- i.e. not from a child element --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="1-7-5-Key-Modifiers"><a href="#1-7-5-Key-Modifiers" class="headerlink" title="1.7.5 Key Modifiers"></a>1.7.5 Key Modifiers</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.enter</div><div class="line">.tab</div><div class="line">.delete (captures both “Delete” and “Backspace” keys)</div><div class="line">.esc</div><div class="line">.space</div><div class="line">.up</div><div class="line">.down</div><div class="line">.left</div><div class="line">.right</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- same as above --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- also works for shorthand --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="1-7-6-System-Modifier-Keys"><a href="#1-7-6-System-Modifier-Keys" class="headerlink" title="1.7.6 System Modifier Keys"></a>1.7.6 System Modifier Keys</h4><p>键盘</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.ctrl</div><div class="line">.alt</div><div class="line">.shift</div><div class="line">.meta</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Alt + C --&gt;</div><div class="line">&lt;input @keyup.alt.67=&quot;clear&quot;&gt;</div><div class="line">&lt;!-- Ctrl + Click --&gt;</div><div class="line">&lt;div @click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>鼠标</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.left</div><div class="line">.right</div><div class="line">.middle</div></pre></td></tr></table></figure>
<h4 id="1-7-7-Why-Listeners-in-HTML"><a href="#1-7-7-Why-Listeners-in-HTML" class="headerlink" title="1.7.7 Why Listeners in HTML?"></a>1.7.7 Why Listeners in HTML?</h4><p>在以往的开发中，直接写在 html 的 onclick 是很糟糕的方式，因为这违反了局部变量准则。将 onclick 变量提升为整个页面很容易导致，页面内部组织混乱。</p>
<p>而 v-on 则仅执行 viewmodel 的方法，不会绑定到其他方法里。</p>
<h3 id="1-8-Form-Input-Bindings"><a href="#1-8-Form-Input-Bindings" class="headerlink" title="1.8 Form Input Bindings"></a>1.8 Form Input Bindings</h3><p><a href="https://vuejs.org/v2/guide/forms.html" target="_blank" rel="external">https://vuejs.org/v2/guide/forms.html</a></p>
<p>对于每个 Form 空间，可以进行一定的封装。</p>
<p>比如拖拽上传啦，比如 RadioGroup 啦等等。通过封装，可以进行相关的分析。</p>
<h3 id="1-9-Components"><a href="#1-9-Components" class="headerlink" title="1.9 Components"></a>1.9 Components</h3><p>Using Components<br>Global Registration<br>Local Registration<br>DOM Template Parsing Caveats<br>data Must Be a Function<br>Composing Components<br>Props<br>Passing Data with Props<br>camelCase vs. kebab-case<br>Dynamic Props<br>Literal vs. Dynamic<br>One-Way Data Flow<br>Prop Validation<br>Non-Prop Attributes<br>Replacing/Merging with Existing Attributes<br>Custom Events<br>Using v-on with Custom Events<br>Binding Native Events to Components<br>.sync Modifier<br>Form Input Components using Custom Events<br>Customizing Component v-model<br>Non Parent-Child Communication<br>Content Distribution with Slots<br>Compilation Scope<br>Single Slot<br>Named Slots<br>Scoped Slots<br>Dynamic Components<br>keep-alive<br>Misc<br>Authoring Reusable Components<br>Child Component Refs<br>Async Components<br>Advanced Async Components<br>Component Naming Conventions<br>Recursive Components<br>Circular References Between Components<br>Inline Templates<br>X-Templates<br>Cheap Static Components with v-once</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>组件化是 Vue 模块化组织前端网页的方式。</p>
<p>Vue 的组件化，将模板，JavaScript 与样式放在一起。出于代码的复用性：</p>
<p>组件化可以给组件子组件们组织起来，起一个阅读性更好的名称，从而使得编写 Vue 组件更加语义化。</p>
<ul>
<li>如果模板是常用的组件，比如手风琴控件，Menu 控件，sidebar 控件</li>
</ul>
<p>Vue 通过组件来组织代码，但糟糕的是并不是一切都可以被组件化</p>
<h2 id="0x02-Transitions-amp-Animation"><a href="#0x02-Transitions-amp-Animation" class="headerlink" title="0x02 Transitions &amp; Animation"></a>0x02 Transitions &amp; Animation</h2><h3 id="2-1-Event-Handling"><a href="#2-1-Event-Handling" class="headerlink" title="2.1 Event Handling"></a>2.1 Event Handling</h3><h3 id="2-2-Event-Handling"><a href="#2-2-Event-Handling" class="headerlink" title="2.2 Event Handling"></a>2.2 Event Handling</h3><h2 id="0x03-Reusability-amp-Composition"><a href="#0x03-Reusability-amp-Composition" class="headerlink" title="0x03 Reusability &amp; Composition"></a>0x03 Reusability &amp; Composition</h2><h2 id="0x04-Tooling"><a href="#0x04-Tooling" class="headerlink" title="0x04 Tooling"></a>0x04 Tooling</h2><h2 id="0x05-Scaling-Up"><a href="#0x05-Scaling-Up" class="headerlink" title="0x05 Scaling Up"></a>0x05 Scaling Up</h2><h2 id="0x06-Internals"><a href="#0x06-Internals" class="headerlink" title="0x06 Internals"></a>0x06 Internals</h2><h2 id="0x07-Vue-番外篇"><a href="#0x07-Vue-番外篇" class="headerlink" title="0x07 Vue 番外篇"></a>0x07 Vue 番外篇</h2><p>下面的内容从 Vue 作者的知乎 Live 上取来。</p>
<h3 id="阅读源码的建议"><a href="#阅读源码的建议" class="headerlink" title="阅读源码的建议"></a>阅读源码的建议</h3><p><a href="http://hcysun.me/2017/03/03/Vue" target="_blank" rel="external">http://hcysun.me/2017/03/03/Vue</a> 源码学习 /</p>
<h3 id="框架背后的要解决的原理"><a href="#框架背后的要解决的原理" class="headerlink" title="框架背后的要解决的原理"></a>框架背后的要解决的原理</h3><p>组件为基本单元</p>
<p>页面 -&gt;应用（模块，组件树（偏展示））</p>
<ul>
<li>接入型 container</li>
<li>展示型</li>
<li>交互型 比如各类加强版的表单组件，通常强调复用</li>
<li>功能型 比如 <code>&lt;router-view&gt;</code>，<code>&lt;transition&gt;</code>，作为一种扩展、抽象机制存在。</li>
</ul>
<p>view = render(state)</p>
<ul>
<li>命令式 (jquery)</li>
<li>声明式</li>
</ul>
<h3 id="Virtual-Dom"><a href="#Virtual-Dom" class="headerlink" title="Virtual Dom"></a>Virtual Dom</h3><h3 id="变化侦测和渲染机制"><a href="#变化侦测和渲染机制" class="headerlink" title="变化侦测和渲染机制"></a>变化侦测和渲染机制</h3><p>push pull</p>
<p>vue 混合式</p>
<h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><h2 id="0xEE-TODO-TO-LIST"><a href="#0xEE-TODO-TO-LIST" class="headerlink" title="0xEE TODO TO LIST"></a>0xEE TODO TO LIST</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-Essential&quot;&gt;&lt;a href=&quot;#0x01-Essential&quot; class=&quot;headerlink&quot; title=&quot;0x01 Essential&quot;&gt;&lt;/a&gt;0x01 Essential&lt;/h2&gt;&lt;h3 id=&quot;1-1-The-Vue-Instance&quot;&gt;&lt;a href=&quot;#1-1-The-Vue-Instance&quot; class=&quot;headerlink&quot; title=&quot;1.1 The Vue Instance&quot;&gt;&lt;/a&gt;1.1 The Vue Instance&lt;/h3&gt;&lt;p&gt;当 Vue 实例被创建时，添加所有在 Data 对象中的属性到 Reactivity System 中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;而创建之后添加赋值新属性，则不 Reactive&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而实例被创建之时，会自带前缀为 $ 的一系列属性和方法&lt;/p&gt;
&lt;h4 id=&quot;1-1-1-内置方法和属性&quot;&gt;&lt;a href=&quot;#1-1-1-内置方法和属性&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 内置方法和属性&quot;&gt;&lt;/a&gt;1.1.1 内置方法和属性&lt;/h4&gt;&lt;h5 id=&quot;Instance-Properties&quot;&gt;&lt;a href=&quot;#Instance-Properties&quot; class=&quot;headerlink&quot; title=&quot;Instance Properties&quot;&gt;&lt;/a&gt;Instance Properties&lt;/h5&gt;&lt;p&gt;vm.$data&lt;br&gt;vm.$props&lt;br&gt;vm.$el&lt;br&gt;vm.$options&lt;br&gt;vm.$parent&lt;br&gt;vm.$root&lt;br&gt;vm.$children&lt;br&gt;vm.$slots&lt;br&gt;vm.$scopedSlots&lt;br&gt;vm.$refs&lt;br&gt;vm.$isServer&lt;br&gt;vm.$attrs&lt;br&gt;vm.$listeners&lt;/p&gt;
    
    </summary>
    
      <category term="学习资源" scheme="http://twocucao.xyz/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>React CheatSheet</title>
    <link href="http://twocucao.xyz/2017/07/26/ReactCheatSheet/"/>
    <id>http://twocucao.xyz/2017/07/26/ReactCheatSheet/</id>
    <published>2017-07-26T12:06:05.000Z</published>
    <updated>2017-11-18T03:29:51.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><blockquote>
<p>备注：本文已太监</p>
</blockquote>
<p>之前一直使用 VueJS 进行开发，心血来潮想换换口味，于是就借着自己的一个开源的项目尝试一下 ReactJS , 代码分为两部分，如下：</p>
<ul>
<li>前台系统（支持 SSR) <a href="https://github.com/twocucao/YaReactBlog" target="_blank" rel="external">YaReactBlog</a></li>
<li>后台系统 <a href="https://github.com/twocucao/YaReactAdmin" target="_blank" rel="external">YaReactAdmin</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">TODO:</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文目录</p>
<ul>
<li>前端、单页与 React 开发</li>
<li>官网的 Tutorial / Guide 要点</li>
<li>Dva 下使用 React JS 的要点</li>
</ul>
<h2 id="0x00-前端、单页与-React-开发"><a href="#0x00-前端、单页与-React-开发" class="headerlink" title="0x00. 前端、单页与 React 开发"></a>0x00. 前端、单页与 React 开发</h2><h3 id="0-1-前端"><a href="#0-1-前端" class="headerlink" title="0.1. 前端"></a>0.1. 前端</h3><p>前端开发，是最近几年才出现的独立工种。</p>
<p>在我的印象中，以前的人很少会区分前端和后端，现在的前端的职责往往是由后端的人顺手做掉的。当然，这种界面一般情况下都比较丑。</p>
<p>后来，随着浏览器的功能越来越强大，性能越来越好，用户对于界面要求也就越来越高。甚至到后来，对于用户界面的操作的复杂程度要求也越来越高。 传统的后端渲染 Template + 简单的 Ajax 不能满足要求了。</p>
<blockquote>
<p>要界面，要交互，要复杂</p>
</blockquote>
<p>于是便出现了单页应用。</p>
<h3 id="0-2-单页"><a href="#0-2-单页" class="headerlink" title="0.2. 单页"></a>0.2. 单页</h3><p>单页完全可以当做一个性能不是很强的，运行在浏览器中的，使用 HTML CSS JS 来编写的小型客户端。</p>
<p>写单页和写客户端基本一致的情况下，于是在这种情况下，前端开发在使用单页后，直接可以 Mock 数据，接着编写界面，接着调通页面的状态和操作，最后发布。</p>
<h3 id="0-3-ReactJS"><a href="#0-3-ReactJS" class="headerlink" title="0.3. ReactJS"></a>0.3. ReactJS</h3><p>为什么选用 ReactJS 呢？</p>
<p>个人认为，框架是用于改善代码组织的一种约束。</p>
<p>不管是 Web 应用开发的早期的 HTML in PHP OR PHP in HTML, 还是中期的 MVC MTV, 还是后来的 富 AJAX 操作，还是现在的 SPA, 出现的各种框架无非就是为了解决代码组织的问题。</p>
<p>对后端而言，后端 WEB 框架的设计，都是为了单个模块职责过重而出现的一种解决方案：</p>
<ul>
<li>HTML IN PHP 拼接代码简单暴力，可是如果拼接太多，每个文件就很职责重，代码阅读性差，不方便调试，就显得很杂乱。</li>
<li>PHP in HTML 相比上一个解决方案好很多。可是，嵌入过多 PHP 代码，代码阅读性差，不方便调试，则会显得比较混乱。</li>
<li>MVC 与 MTV 把渲染的变量独立出来放到 Controller 中，然后把需要渲染的 HTML 模板放到 Template 中，并且在 Template 中来完成模板的拼接。最后调用 Render 进行渲染。是不是这样问题就解决了呢？不是，如果把业务逻辑放在 Model 层，则 Model 职责过重。那就必须要添加一个 Serivce 层来封装业务逻辑。是不是封装了一个</li>
</ul>
<p>如果业务逻辑简单到令人发指，HTML IN PHP 可以给人最大的灵活性。</p>
<ol>
<li>尝试一下新技术。保持对技术的敏感性。</li>
<li>React 是 FB 出的一套前端框架。大厂支持，不会轻易太监掉。</li>
<li>写了一段时间 VueJS 换换口味。</li>
</ol>
<p>当我们讨论一个框架的时候，除了基本的框架之外还必须要有大量的社区资源，那么对 React 而言，除了 ReactJS 之外，还有什么？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">后台系统</div><div class="line"></div><div class="line"> - ant.design</div><div class="line"></div><div class="line">打包构建</div><div class="line"></div><div class="line"> - webpack</div><div class="line"></div><div class="line">路由和状态管理</div><div class="line"></div><div class="line"> - react-router</div><div class="line"> - react-router-redux</div><div class="line"> - redux</div><div class="line"> - redux-saga</div><div class="line"></div><div class="line">为了更好的管理路由和状态，还是使用 dva 来管理比较好。</div><div class="line"></div><div class="line"> - [dva](https://github.com/dvajs/dva)</div><div class="line"> - [dva-cli](https://github.com/dvajs/dva-cli)</div><div class="line"></div><div class="line">开发构建工具</div><div class="line"></div><div class="line"> - [roadhog](https://github.com/sorrycc/roadhog)</div></pre></td></tr></table></figure>
<h2 id="0x01-官网的-Tutorial-Guide"><a href="#0x01-官网的-Tutorial-Guide" class="headerlink" title="0x01. 官网的 Tutorial / Guide"></a>0x01. 官网的 Tutorial / Guide</h2><p>官网的要点</p>
<h2 id="0x02-在-dva-下，编写-React-组件的正确姿势"><a href="#0x02-在-dva-下，编写-React-组件的正确姿势" class="headerlink" title="0x02. 在 dva 下，编写 React 组件的正确姿势"></a>0x02. 在 dva 下，编写 React 组件的正确姿势</h2><p>编写 React 的时候，我选用了 dva 框架配合 ReactJS 来编写单页。</p>
<p>参考 FB 的这篇教程后，梳理了我编写组件的步骤 <a href="https://facebook.github.io/react/docs/thinking-in-react.html" target="_blank" rel="external">https://facebook.github.io/react/docs/thinking-in-react.html</a> :</p>
<ol>
<li>先构思出原型 （或者拿到 UI 图）</li>
<li>Mock 出假数据</li>
<li>分解页面 OR 组件为 组件树</li>
<li>编写静态组件树</li>
<li>确定最小表达 UI （加上满足要求的样式）</li>
<li>确定什么时候需要什么状态（网络请求，键盘输入，位置变化等等）</li>
<li>收尾美化</li>
<li>在发现问题的时候进行优化</li>
</ol>
<h2 id="0x03-在-dva-下，编写-React-组件的正确姿势"><a href="#0x03-在-dva-下，编写-React-组件的正确姿势" class="headerlink" title="0x03. 在 dva 下，编写 React 组件的正确姿势"></a>0x03. 在 dva 下，编写 React 组件的正确姿势</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-07-17</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;备注：本文已太监&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前一直使用 VueJS 进行开发，心血来潮想换换口味，于是就借着自己的一个开源的项目尝试一下 ReactJS , 代码分为两部分，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前台系统（支持 SSR) &lt;a href=&quot;https://github.com/twocucao/YaReactBlog&quot;&gt;YaReactBlog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;后台系统 &lt;a href=&quot;https://github.com/twocucao/YaReactAdmin&quot;&gt;YaReactAdmin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TODO:&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="学习资源" scheme="http://twocucao.xyz/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数据科学的常识笔记</title>
    <link href="http://twocucao.xyz/2017/07/17/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E7%9A%84%E5%B8%B8%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    <id>http://twocucao.xyz/2017/07/17/数据科学的常识笔记/</id>
    <published>2017-07-17T12:00:00.000Z</published>
    <updated>2017-07-18T05:27:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>2017 年 07 月，为了解统计学和机器学习的基本常识，开了这篇文章。</p>
<p>当然，仅仅是为了了解，所以也就写的随性（不严谨）一些，想到哪里就记录到哪里。</p>
<p>特此记录。</p>
<a id="more"></a>
<p>本文目录</p>
<ul>
<li>数据科学的含义与内容</li>
<li>Vertor 分析</li>
<li>Raster 分析</li>
<li>Vertor 与 Raster</li>
</ul>
<h2 id="0x00-数据科学的含义与内容"><a href="#0x00-数据科学的含义与内容" class="headerlink" title="0x00. 数据科学的含义与内容"></a>0x00. 数据科学的含义与内容</h2><h3 id="0-1-WHAT"><a href="#0-1-WHAT" class="headerlink" title="0.1. WHAT?"></a>0.1. WHAT?</h3><blockquote>
<p>To gain insights into data through computation, statistics , and visualization.</p>
</blockquote>
<p>Josh Blumenstock 认为 数据科学家就是比计算机科学家多点统计技术，比统计学家多点计算机技术。</p>
<p>Shlomo Aragmon 认为 数据科学家 = 统计学家 + 程序员 + 教练 + 讲故事者 + 艺术家</p>
<hr>
<p>一些准则</p>
<ul>
<li>多数据源</li>
<li>懂得数据如何被采集</li>
<li>对数据进行权重</li>
<li>使用统计模型</li>
<li>理解相关性</li>
<li>像 Bayesian 一样思考，像 frequentist 一样检验</li>
<li>良好的沟通能力（代表什么，如何可视化，检验，理解结论）</li>
</ul>
<hr>
<p>一些挑战</p>
<ul>
<li>数据量大</li>
<li>高维诅咒</li>
<li>数据缺失</li>
<li>需要避免过度拟合 (test data vs. training data)</li>
</ul>
<hr>
<p>Data Science 涉及到哪些领域呢？</p>
<ul>
<li>Data Management</li>
<li>Data Mining</li>
<li>Machine Learning</li>
<li>Business Intelligence</li>
<li>Statistics</li>
<li>Decision Making Theory</li>
<li>Story Telling</li>
<li>Perception</li>
<li>Human Cognition</li>
</ul>
<h3 id="0-2-WHY"><a href="#0-2-WHY" class="headerlink" title="0.2. WHY?"></a>0.2. WHY?</h3><p>海量数据的时代</p>
<h3 id="0-3-HOW"><a href="#0-3-HOW" class="headerlink" title="0.3. HOW?"></a>0.3. HOW?</h3><ul>
<li><strong>ASK</strong> an interesting question.  目标是什么？如果拿到数据可以预测或者估计什么？</li>
<li><strong>GET</strong> the data. 数据如何抽样？那些数据是相关的？</li>
<li><strong>EXPLORE</strong> the data. 可视化数据，有异常吗？有模式吗？</li>
<li><strong>MODEL</strong> the data. 构建模型，拟合模型，检验模型。</li>
<li><strong>COMMUNICATE</strong> and <strong>VISUALIZE</strong> the results 我们学到了什么？结果有意义吗？</li>
</ul>
<h3 id="0-4-本文目录"><a href="#0-4-本文目录" class="headerlink" title="0.4. 本文目录"></a>0.4. 本文目录</h3><ul>
<li><p>统计学与数据分析</p>
<ul>
<li>信息可视化</li>
<li>集中趋势的量度</li>
<li>分散性与变异的量度</li>
<li>概率计算</li>
<li>离散概率分布</li>
<li>排列与组合</li>
<li>几何分布、二项分布、泊松分布</li>
<li>正态分布</li>
<li>统计抽样</li>
<li>总体和样本的估计</li>
<li>置信区间</li>
<li>假设检验的运用</li>
<li>x2 分布</li>
<li>相关与回归</li>
</ul>
</li>
<li><p>机器学习</p>
<ul>
<li>分类与回归</li>
<li>交差校验</li>
<li>降维</li>
<li>支持向量机</li>
<li>决策树 &amp; 随机森林</li>
<li>Bagging &amp; Boosting</li>
<li>聚类与文本</li>
<li>贝叶斯思维 &amp; Naive Bayes</li>
<li>文本分析：LDA&amp;Topic Modeling</li>
<li>聚类</li>
</ul>
</li>
<li>深度学习</li>
</ul>
<h2 id="0x01-统计学与数据分析"><a href="#0x01-统计学与数据分析" class="headerlink" title="0x01. 统计学与数据分析"></a>0x01. 统计学与数据分析</h2><h3 id="1-1-信息可视化"><a href="#1-1-信息可视化" class="headerlink" title="1.1. 信息可视化"></a>1.1. 信息可视化</h3><p>建议直接阅读 AntV 的可视化基础 <a href="https://antv.alipay.com/vis/doc/chart/index.html" target="_blank" rel="external">https://antv.alipay.com/vis/doc/chart/index.html</a></p>
<h3 id="1-2-集中趋势的量度"><a href="#1-2-集中趋势的量度" class="headerlink" title="1.2. 集中趋势的量度"></a>1.2. 集中趋势的量度</h3><blockquote>
<p>目的：找出能够反映集中趋势的一个数值</p>
</blockquote>
<p>PS: 可以用分布图看它的均值和平均数是否落在集中趋势，数据向右偏斜，均值位于中位数右侧</p>
<ul>
<li>均值 （均值对于抽样数据更加稳定，但是如果村里一个杨千万九个穷光蛋，则个个都是杨百万）</li>
<li>中位数</li>
<li>众数</li>
</ul>
<h3 id="1-3-分散性与变异的量度"><a href="#1-3-分散性与变异的量度" class="headerlink" title="1.3. 分散性与变异的量度"></a>1.3. 分散性与变异的量度</h3><blockquote>
<p>目的：仅有均值，中位数，众数是不够的，还需要距和差</p>
</blockquote>
<ul>
<li>全距：MAX（上界） - MIN（下界）</li>
<li>按照四分位书的切分方式： 下界 - 下四分位数目 (Q1) - 中位数 - 上四分位数 - 上界</li>
<li>四分位距：上四分位数 - 下四分位数 （当然，可以使用箱线图进行绘制，从而判断出数据集中的地方）</li>
<li>百分位距</li>
<li>方差：量度数据分散性</li>
<li>标准差：典型值与均值的距离，体现了数值的变异程度. 即加入有一批数据的标准差为 3cm, 代表着平均而言，这些数值与均值的距离为 3cm</li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-07-17</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;p&gt;2017 年 07 月，为了解统计学和机器学习的基本常识，开了这篇文章。&lt;/p&gt;
&lt;p&gt;当然，仅仅是为了了解，所以也就写的随性（不严谨）一些，想到哪里就记录到哪里。&lt;/p&gt;
&lt;p&gt;特此记录。&lt;/p&gt;
    
    </summary>
    
      <category term="学习资源" scheme="http://twocucao.xyz/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Geoprocessing With Python</title>
    <link href="http://twocucao.xyz/2017/07/11/GeoProcessingWithPython/"/>
    <id>http://twocucao.xyz/2017/07/11/GeoProcessingWithPython/</id>
    <published>2017-07-11T04:13:20.000Z</published>
    <updated>2017-07-12T02:34:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>16 年 12 月研究 GIS 相关资料用于处理 GIS 相关问题，完成基本 GIS 功能。<br>最新需要进阶相关内容用于更好的处理相关数据。</p>
<ul>
<li>书籍：<ul>
<li>Geoprocessing With Python</li>
<li>PostGIS In Action 2rd</li>
</ul>
</li>
<li>框架：<ul>
<li>前端 Leaflets D3</li>
<li>后端 GeoDjango</li>
</ul>
</li>
<li>其他零零碎碎的资料</li>
</ul>
<p>特此记录。</p>
<a id="more"></a>
<p>本文目录</p>
<ul>
<li>基本概念<ul>
<li>Vertor VS Raster</li>
<li>Vertor 相关类型与坐标系</li>
<li>Raster 相关类型</li>
<li>其他类型</li>
<li>GIS 开发的生态圈以及常用技术栈</li>
</ul>
</li>
<li>Vertor 分析</li>
<li>Raster 分析</li>
<li>Vertor 与 Raster</li>
</ul>
<h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><h3 id="1-1-Vertor-VS-Raster"><a href="#1-1-Vertor-VS-Raster" class="headerlink" title="1.1. Vertor VS Raster"></a>1.1. Vertor VS Raster</h3><ul>
<li>Vector : 基本单元为 Point : points, lines, and polygons 以及其组合，适用于矢量图，地形边界，路线等。</li>
<li>Raster : 基本单元为 Pixel : 2d/3d 包含数值的数组，适用于连续性数据，不仅仅适用于图片。</li>
</ul>
<h3 id="1-2-Vertor-相关类型与坐标系"><a href="#1-2-Vertor-相关类型与坐标系" class="headerlink" title="1.2. Vertor 相关类型与坐标系"></a>1.2. Vertor 相关类型与坐标系</h3><h4 id="1-2-1-国内常见的几种坐标系"><a href="#1-2-1-国内常见的几种坐标系" class="headerlink" title="1.2.1. 国内常见的几种坐标系"></a>1.2.1. 国内常见的几种坐标系</h4><p>国内由于特殊的国情，国际标准也要向国家标准靠齐。比如各个不同的坐标系上坐标的换算。</p>
<p>我们都知道一个坐标 (x,y) 可以表示为经纬度，甚至放在坐标系上，我们可以这么运算两点 (x1,y1) , (x2,y2) 之间的距离</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># z 表示比例系数</span></div><div class="line">distance = math.sqrt((x1-x2) ** <span class="number">2</span> + (y1-y2) ** <span class="number">2</span>) * z</div></pre></td></tr></table></figure>
<p>在近距离的时候的确是可以这么做的比如计算村里小芳和隔壁老王家的距离。当距离过大的时候，比如计算上海 A 区和 B 区的两个写字楼的距离的时候，则有相当大的误差。</p>
<p>那么问题来了：</p>
<p><del>挖掘技术哪家强</del></p>
<p>啊不是，是<strong>国内有哪些常用坐标标准呢？又是如何计算的呢？</strong></p>
<ul>
<li><ol>
<li>GPS WGS-84 国际标准（原始）</li>
</ol>
</li>
<li><ol>
<li>GCJ-02 国内标准（原始数据混淆）</li>
</ol>
</li>
<li><ol>
<li>其他坐标比如 BD-09（原始数据混淆再混淆）</li>
</ol>
</li>
</ul>
<p>对于小公司而言，我们是没有任何方法来通过 BD-09 以及 GCJ-02 这种坐标系进行运算的：</p>
<p>因为坐标点非线性偏移核心计算方法掌握在 GCJ-02 / BD-09 的公司里面，比如 Google 中国，高德地图，百度地图，腾讯地图。所以，为了研究，则必须要有<strong>能够对坐标进行运算的算法</strong>, 那这个东西有没有呢？答案是肯定的，因为国外使用的 WGS-84 标准，并且，计算坐标的算法早就开源。</p>
<p>那么，我们的思路就确定下来了。</p>
<ol>
<li>各种地图的经纬度坐标比如 BD-09 或 GCJ-02 标转换成 WGS-84 坐标。</li>
<li>使用开源 GIS 软件进行对 WGS-84 进行运算。</li>
</ol>
<p>感谢诸多在 GIS 运算上开源的中国先辈，我们轻而易举的获取到了坐标之间相互转化的方法：</p>
<p><a href="https://github.com/wandergis/coordTransform_py" target="_blank" rel="external">https://github.com/wandergis/coordTransform_py</a></p>
<h4 id="1-2-2-形状"><a href="#1-2-2-形状" class="headerlink" title="1.2.2. 形状"></a>1.2.2. 形状</h4><p>坐标系，我们可以简单的理解为一个笛卡尔坐标系（虽然这么说很不准确，但已经足够形象了）</p>
<p>于是对于二维的数据，GIS 的分析就可以理解为对于点，线段，多边形自身以及他们之间的关系的分析。</p>
<h3 id="1-3-Raster-相关类型"><a href="#1-3-Raster-相关类型" class="headerlink" title="1.3. Raster 相关类型"></a>1.3. Raster 相关类型</h3><p>raster 的 digital elevation model(DEM), 即每一个像素值包含一个 elevation value</p>
<p>GDAL/OGR</p>
<!-- more -->
<h2 id="0x02-Vertor-分析"><a href="#0x02-Vertor-分析" class="headerlink" title="0x02. Vertor 分析"></a>0x02. Vertor 分析</h2><h2 id="0x03-Raster-分析"><a href="#0x03-Raster-分析" class="headerlink" title="0x03. Raster 分析"></a>0x03. Raster 分析</h2><h3 id="3-1-教程"><a href="#3-1-教程" class="headerlink" title="3.1. 教程"></a>3.1. 教程</h3><h3 id="3-2-教程"><a href="#3-2-教程" class="headerlink" title="3.2. 教程"></a>3.2. 教程</h3><h3 id="3-3-教程笔记"><a href="#3-3-教程笔记" class="headerlink" title="3.3. 教程笔记"></a>3.3. 教程笔记</h3><h2 id="0x04-Vertor-与-Raster"><a href="#0x04-Vertor-与-Raster" class="headerlink" title="0x04. Vertor 与 Raster"></a>0x04. Vertor 与 Raster</h2><h3 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h3><ul>
<li>Point</li>
<li>LineString</li>
<li><p>Polygon</p>
</li>
<li><p>MultiPoint</p>
</li>
<li>MultiLineString</li>
<li>MultiPolygon</li>
</ul>
<h3 id="中级概念"><a href="#中级概念" class="headerlink" title="中级概念"></a>中级概念</h3><ul>
<li>Raster / Tile (Bands 是什么鬼）</li>
</ul>
<h3 id="PostGIS-MetaTable"><a href="#PostGIS-MetaTable" class="headerlink" title="PostGIS MetaTable"></a>PostGIS MetaTable</h3><ul>
<li>spatial_ref_sys</li>
<li>geography_columns</li>
<li>geometry_columns</li>
<li>raster_columns</li>
<li>raster_overviews</li>
</ul>
<h3 id="PostGIS-常用函数"><a href="#PostGIS-常用函数" class="headerlink" title="PostGIS 常用函数"></a>PostGIS 常用函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">ST_AsText(geom) 用于查看 WKT</div><div class="line">ST_GeometryType(geometry) returns the type of the geometry</div><div class="line">ST_NDims(geometry) returns the number of dimensions of the geometry</div><div class="line">ST_SRID(geometry) returns the spatial reference identifier number of the geometry</div><div class="line">ST_X(geometry) returns the X ordinate , 如果作用在 Point 上，则返回经度</div><div class="line">ST_Y(geometry) returns the Y ordinate , 如果作用在 Point 上，则返回纬度</div><div class="line"></div><div class="line">ST_Length(geometry) returns the length of the linestring</div><div class="line">ST_StartPoint(geometry) returns the first coordinate as a point</div><div class="line">ST_EndPoint(geometry) returns the last coordinate as a point</div><div class="line">ST_NPoints(geometry) returns the number of coordinates in the linestring</div><div class="line"></div><div class="line">ST_Area(geometry) returns the area of the polygons</div><div class="line">ST_NRings(geometry) returns the number of rings (usually 1, more of there are holes)</div><div class="line">ST_ExteriorRing(geometry) returns the outer ring as a linestring</div><div class="line">ST_InteriorRingN(geometry,n) returns a specified interior ring as a linestring</div><div class="line">ST_Perimeter(geometry) returns the length of all the rings</div><div class="line"></div><div class="line">ST_NumGeometries(geometry) returns the number of parts in the collection</div><div class="line">ST_GeometryN(geometry,n) returns the specified part</div><div class="line">ST_Area(geometry) returns the total area of all polygonal parts</div><div class="line">ST_Length(geometry) returns the total length of all linear parts</div></pre></td></tr></table></figure>
<h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-- 合并多个区域并返回 multipoly</div><div class="line">UPDATE areas as A</div><div class="line">SET &quot;Boundary&quot; = ST_Multi(st_union(ARRAY(SELECT geom FROM county_boundary_region WHERE gid in ( &apos;foo_id&apos;,&apos;bar_id)&apos;)</div><div class="line">)))</div><div class="line">WHERE A.&quot;ID&quot; = &apos;xxxxxx&apos;</div></pre></td></tr></table></figure>
<h3 id="其他参考链接"><a href="#其他参考链接" class="headerlink" title="其他参考链接"></a>其他参考链接</h3><ol>
<li><a href="http://gis.stackexchange.com/questions/6681/what-are-the-pros-and-cons-of-postgis-geography-and-geometry-types" target="_blank" rel="external">http://gis.stackexchange.com/questions/6681/what-are-the-pros-and-cons-of-postgis-geography-and-geometry-types</a></li>
<li>Geo Processing with Python</li>
</ol>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-07-11</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;p&gt;16 年 12 月研究 GIS 相关资料用于处理 GIS 相关问题，完成基本 GIS 功能。&lt;br&gt;最新需要进阶相关内容用于更好的处理相关数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;书籍：&lt;ul&gt;
&lt;li&gt;Geoprocessing With Python&lt;/li&gt;
&lt;li&gt;PostGIS In Action 2rd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;框架：&lt;ul&gt;
&lt;li&gt;前端 Leaflets D3&lt;/li&gt;
&lt;li&gt;后端 GeoDjango&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他零零碎碎的资料&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特此记录。&lt;/p&gt;
    
    </summary>
    
      <category term="Python 黑魔法" scheme="http://twocucao.xyz/categories/Python-%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
    
      <category term="可视化" scheme="http://twocucao.xyz/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="GIS" scheme="http://twocucao.xyz/tags/GIS/"/>
    
      <category term="Django" scheme="http://twocucao.xyz/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>ReThinking In Python</title>
    <link href="http://twocucao.xyz/2017/07/04/RethinkingInPython/"/>
    <id>http://twocucao.xyz/2017/07/04/RethinkingInPython/</id>
    <published>2017-07-04T12:08:21.000Z</published>
    <updated>2017-11-21T01:27:43.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生命苦短-我用-Python"><a href="#生命苦短-我用-Python" class="headerlink" title="生命苦短 我用 Python"></a>生命苦短 我用 Python</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍这个过程中结合自己的开发常见场景记录下来的一些笔记。</p>
<h2 id="0x01-Python-胡论"><a href="#0x01-Python-胡论" class="headerlink" title="0x01 Python 胡论"></a>0x01 Python 胡论</h2><h3 id="1-1-Python-的独一无二性"><a href="#1-1-Python-的独一无二性" class="headerlink" title="1.1 Python 的独一无二性"></a>1.1 Python 的独一无二性</h3><p>是要用一门编程语言无非是两种原因：</p>
<ul>
<li>这门技术很火，能挣钱</li>
<li>写起来很舒服，开发效率高</li>
</ul>
<p>这也是我在涉猎了很多编程语言为什么选择了 Python 和 TypeScript 作为自己的主要技能树。</p>
<p>Python 具备这两点，TS （更加准确的说是 JavaScript）具备前一点。</p>
<p>Python 写起来真的特别舒服，语法简洁，第三方库丰富，而且也比较火。</p>
<p>有什么东西比，写代码效率高、生态圈好还重要了。</p>
<p>生态圈好，比如 Web 开发用 Django/Flask , 数据抓取用 Requests , 数据分析清洗用 Pandas, 机器学习。</p>
<a id="more"></a>
<h3 id="1-2-工具链"><a href="#1-2-工具链" class="headerlink" title="1.2 工具链"></a>1.2 工具链</h3><p><a href="./ch04/s03_Pythonista_的工具集.md">Pythonista 的工具集</a></p>
<h3 id="1-3-文档"><a href="#1-3-文档" class="headerlink" title="1.3 文档"></a>1.3 文档</h3><h3 id="1-4-社区"><a href="#1-4-社区" class="headerlink" title="1.4 社区"></a>1.4 社区</h3><h3 id="1-5-书籍"><a href="#1-5-书籍" class="headerlink" title="1.5 书籍"></a>1.5 书籍</h3><h2 id="0x02-基础概念"><a href="#0x02-基础概念" class="headerlink" title="0x02 基础概念"></a>0x02 基础概念</h2><h3 id="2-1-数据类型"><a href="#2-1-数据类型" class="headerlink" title="2.1 数据类型"></a>2.1 数据类型</h3><h4 id="2-1-1-常量"><a href="#2-1-1-常量" class="headerlink" title="2.1.1 常量"></a>2.1.1 常量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">False</div><div class="line">True</div><div class="line">None</div><div class="line">NotImplemented</div><div class="line">Elilipsis ...</div></pre></td></tr></table></figure>
<h5 id="布尔常量"><a href="#布尔常量" class="headerlink" title="布尔常量"></a>布尔常量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">None</div><div class="line">False</div><div class="line">0 0.0 0j</div><div class="line">&apos;&apos; () []</div><div class="line">&#123;&#125;</div><div class="line">一个对象 __bool__() = False , 如果上一个为 True 则__len__()</div></pre></td></tr></table></figure>
<h5 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x or y</div><div class="line">x and y</div><div class="line">not x</div></pre></td></tr></table></figure>
<h5 id="布尔比较值"><a href="#布尔比较值" class="headerlink" title="布尔比较值"></a>布尔比较值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 可以定制</div><div class="line">&lt; &lt;= &gt;= &gt; == !=</div><div class="line"># 无法定制</div><div class="line">is / is not</div></pre></td></tr></table></figure>
<h4 id="2-1-2-数字类型"><a href="#2-1-2-数字类型" class="headerlink" title="2.1.2 数字类型"></a>2.1.2 数字类型</h4><ul>
<li>int</li>
<li>float</li>
<li>complex</li>
</ul>
<h5 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+ - * / // % -n +n abs() int() float()</div><div class="line">complex(re,im)</div><div class="line">c.conjugate()</div><div class="line">divmod(x,y)</div><div class="line">pow(x,y) x ** y</div><div class="line">math.trunc(x)</div><div class="line">math.round(x[,n])</div><div class="line">math.floor(x) &lt;=x</div><div class="line">math.ceil(x)  &gt;=x</div><div class="line">| ^ &amp; &lt;&lt; &gt;&gt; ~x</div></pre></td></tr></table></figure>
<p>注意</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(-1) / 2 # -1</div><div class="line">1 / (-2) # -1</div></pre></td></tr></table></figure>
<h5 id="数值类型的哈希"><a href="#数值类型的哈希" class="headerlink" title="数值类型的哈希"></a>数值类型的哈希</h5><p>// TODO : 麻蛋居然没看懂 4.4.4. Hashing of numeric types</p>
<h4 id="2-1-3-迭代器类型"><a href="#2-1-3-迭代器类型" class="headerlink" title="2.1.3 迭代器类型"></a>2.1.3 迭代器类型</h4><p>生成器</p>
<h4 id="2-1-4-序列类型"><a href="#2-1-4-序列类型" class="headerlink" title="2.1.4 序列类型"></a>2.1.4 序列类型</h4><p>C 实现的按照 item 是否为同一类型分为：</p>
<ul>
<li><strong>Container sequences</strong>:  list, tuple, and collections.deque can hold items of different types.</li>
<li><strong>Flat sequences</strong>: str, bytes, bytearray, memoryview, and array.array hold items of one type.</li>
</ul>
<p>C 实现按照 item 是否可修改分为：</p>
<ul>
<li><strong>Mutable sequences</strong>: list, bytearray, array.array, collections.deque, and memoryview</li>
<li><strong>Immutable sequences</strong>: tuple, str, and bytes</li>
</ul>
<h5 id="通用序列操作"><a href="#通用序列操作" class="headerlink" title="通用序列操作"></a>通用序列操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">x in s</div><div class="line">x not in s</div><div class="line">s + t</div><div class="line">s * n 或者 n * s</div><div class="line">s[i]</div><div class="line">s[i:j]</div><div class="line">s[i:j:s]</div><div class="line">len(s)</div><div class="line">min(s)</div><div class="line">max(s)</div><div class="line">s.index(x,i,j)</div><div class="line">s.count(x)</div><div class="line">// TODO 封装 deepEqual</div></pre></td></tr></table></figure>
<p>切片</p>
<p>为何 Slice 和 Range 会排除 最后一个 Item?</p>
<p>书中讲的太复杂，其实这个和尺子是一个作用，尺子从 0 刻度开始，这样方便丈量。</p>
<p>比如说：</p>
<ul>
<li>items[0:10] 为 10 厘米</li>
<li>items[10] 为 10 刻度后一个单位，即 items[10:11]</li>
<li>items[2:] 为 2 刻度后面若干个单位</li>
<li>items[::3] 以三为单位，从 0 刻度开始，最后为结尾，每三个</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a[i, j] <span class="comment"># 调用 a.__getitem__((i, j))</span></div></pre></td></tr></table></figure>
<h5 id="不可变序列类型"><a href="#不可变序列类型" class="headerlink" title="不可变序列类型"></a>不可变序列类型</h5><ul>
<li>解包赋值</li>
<li>不要手贱加逗号</li>
<li><p>下划线可以用作临时变量 （但是 django 中下划线用于中英文）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a, b, *rest = range(<span class="number">5</span>) <span class="comment"># (0, 1, [2, 3, 4])</span></div><div class="line">a, b, *rest = range(<span class="number">3</span>) <span class="comment"># (0, 1, [2])</span></div><div class="line">a, b, *rest = range(<span class="number">2</span>) <span class="comment"># (0, 1, [])</span></div><div class="line"></div><div class="line">a, *body, c, d = range(<span class="number">5</span>) <span class="comment"># (0, [1, 2], 3, 4)</span></div><div class="line">*head, b, c, d = range(<span class="number">5</span>) <span class="comment"># ([0, 1], 2, 3, 4)</span></div></pre></td></tr></table></figure>
</li>
<li><p>namedtuple</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">City = namedtuple(<span class="string">'City'</span>, <span class="string">'name country population coordinates'</span>)</div><div class="line">tokyo = City(<span class="string">'Tokyo'</span>, <span class="string">'JP'</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>))</div><div class="line">tokyo.population</div><div class="line">tokyo.coordinates</div><div class="line">tokyo[<span class="number">1</span>]</div><div class="line">City._fields <span class="comment"># tuple</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="可变序列类型"><a href="#可变序列类型" class="headerlink" title="可变序列类型"></a>可变序列类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">s[i] = x</div><div class="line">s[i:j] = t</div><div class="line">del s[i:j]</div><div class="line">s[i:j:k] = t</div><div class="line">del s[i:j:k]</div><div class="line">s.append(x)</div><div class="line">s.clear()</div><div class="line">s.copy()</div><div class="line">s.extend(t) 或者 s += t</div></pre></td></tr></table></figure>
<h5 id="Overview-of-Built-in-Sequences"><a href="#Overview-of-Built-in-Sequences" class="headerlink" title="Overview of Built-in Sequences"></a>Overview of Built-in Sequences</h5><h5 id="List-Comprehensions-and-Generator-Expressions"><a href="#List-Comprehensions-and-Generator-Expressions" class="headerlink" title="List Comprehensions and Generator Expressions"></a>List Comprehensions and Generator Expressions</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">new_items = [func(a) <span class="keyword">for</span> item <span class="keyword">in</span> items]</div><div class="line">new_items = [ str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">new_items = list(map(str,list(filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> , list(range(<span class="number">100</span>))))))</div><div class="line"><span class="comment"># 可写成</span></div><div class="line">new_items = list(map(str,filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> , range(<span class="number">100</span>))))</div></pre></td></tr></table></figure>
<p>list 往往和 map filter 以及 listcomp 用于创建简单的序列</p>
<h5 id="Augmented-Assignment-with-Sequences"><a href="#Augmented-Assignment-with-Sequences" class="headerlink" title="Augmented Assignment with Sequences"></a>Augmented Assignment with Sequences</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">对于不可变类型 赋值 l *= <span class="number">2</span> 在内存中则是创建了新的两个长度的元祖，然后赋值</div><div class="line">而由于字符串则需要注意，str_a += <span class="string">"str b"</span> , 虽然为不可变变量，但并不需要拷贝整个字符串（特殊情况）, 但字符串的拼接建议还是<span class="string">""</span>.join()</div><div class="line"></div><div class="line">t = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</div><div class="line">t[<span class="number">2</span>] += [<span class="number">50</span>, <span class="number">60</span>]</div><div class="line"><span class="comment"># 结果为既赋值成功，又报错</span></div><div class="line"><span class="comment"># 但 t[2].extend([50, 60]) 可以赋值成功</span></div><div class="line"><span class="keyword">import</span> dis</div><div class="line">dis.dis(<span class="string">'s[a] += b'</span>) <span class="comment"># 可以查看字节码</span></div></pre></td></tr></table></figure>
<ol>
<li>尽量不要在不可变变量内保存可变变量</li>
<li>t[2] += [50,60] 并不是原子操作，因为，当做了一半的时候，抛出的错误。</li>
</ol>
<h5 id="list-sort-and-the-sorted-Built-In-Function"><a href="#list-sort-and-the-sorted-Built-In-Function" class="headerlink" title="list.sort and the sorted Built-In Function"></a>list.sort and the sorted Built-In Function</h5><p>对于 sort 和 sorted 来说，reverse 代表 desc,key 为单参数用于计算每一个值的结果的函数。<br>list.sort 直接针对列表排序，并且返回 None（出于编程习惯的问题，直接返回 None 的函数大多是对程序有一定的修改）</p>
<h5 id="Managing-Ordered-Sequences-with-bisect"><a href="#Managing-Ordered-Sequences-with-bisect" class="headerlink" title="Managing Ordered Sequences with bisect"></a>Managing Ordered Sequences with bisect</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import bisect</div><div class="line">bisect -&gt; bisect_right</div><div class="line">bisect_left</div><div class="line">insort -&gt; insort_left</div><div class="line">insort_right</div><div class="line"># 搜索可以用来划分档次</div><div class="line">def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):</div><div class="line">    i = bisect.bisect(breakpoints, score)</div><div class="line">    return grades[i]</div><div class="line"></div><div class="line">[grade(score) for score in [33, 99, 77, 70, 89, 90, 100]] # ['F', 'A', 'C', 'C', 'B', 'A', 'A']</div></pre></td></tr></table></figure>
<h5 id="When-a-List-Is-Not-the-Answer"><a href="#When-a-List-Is-Not-the-Answer" class="headerlink" title="When a List Is Not the Answer"></a>When a List Is Not the Answer</h5><p>list 是一种 mix-typed 的数据结构，即可以存放不同种类型的数据结构，由此带来的问题自然是性能问题：</p>
<ul>
<li>list 第一是 mix-typed 的数据结构</li>
<li>动态数组，并非数组</li>
</ul>
<p>当考虑性能的时候，则需要考虑是不是要换一个更好的数据结构：</p>
<ul>
<li>适用于类型单一的 array</li>
<li>增删比较多，或者需要使用 FIFO,LIFO, 则使用 deque (double-ended queue)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Arrays</span></div><div class="line">floats = array(<span class="string">'d'</span>, (random() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>**<span class="number">7</span>)))</div><div class="line"><span class="comment"># NumPy and SciPy</span></div><div class="line"></div><div class="line"><span class="comment"># Deques and Other Queue</span></div></pre></td></tr></table></figure>
<h5 id="Deques-and-Other-Queue"><a href="#Deques-and-Other-Queue" class="headerlink" title="Deques and Other Queue"></a>Deques and Other Queue</h5><ul>
<li>Deque</li>
<li>queue 线程安全 Queue, LifoQueue, and PriorityQueue</li>
<li>multiprocessing Queue 和 JoinableQueue</li>
<li>asyncio Queue, LifoQueue, PriorityQueue, and JoinableQueue</li>
</ul>
<h3 id="2-2-语句"><a href="#2-2-语句" class="headerlink" title="2.2 语句"></a>2.2 语句</h3><p>语句</p>
<h3 id="2-3-函数"><a href="#2-3-函数" class="headerlink" title="2.3 函数"></a>2.3 函数</h3><h4 id="2-3-0-参数"><a href="#2-3-0-参数" class="headerlink" title="2.3.0 参数"></a>2.3.0 参数</h4><h4 id="2-3-1-作用域"><a href="#2-3-1-作用域" class="headerlink" title="2.3.1 作用域"></a>2.3.1 作用域</h4><h4 id="2-3-2-高阶函数"><a href="#2-3-2-高阶函数" class="headerlink" title="2.3.2 高阶函数"></a>2.3.2 高阶函数</h4><h4 id="2-3-3-特殊方法"><a href="#2-3-3-特殊方法" class="headerlink" title="2.3.3 特殊方法"></a>2.3.3 特殊方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">obj.__len__()</div><div class="line">len()</div><div class="line"></div><div class="line">obj.__</div></pre></td></tr></table></figure>
<p>对于内置类型 (list, str , bytearray) 解释器在调用特殊方法的时候调用 C 库，比如 CPython 实现的 len 方法一般直接会调用 PyVarObject C Struct ob_size</p>
<p>特殊方法往往并不是显示调用，而是被隐式调用。比如 init 在 new 中的作用，比如 for item in items 世界上会调用 iter(items), 这也会隐式调用 items.<strong>iter</strong>() .</p>
<p>一般当大量使用特殊方法的时候，都是在进行元编程。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bool(x) 先调用 x.__bool__() , 如果 x.__bool__() 没有实现，则调用 x.__len__(), 如果为 <span class="number">0</span> 则返回 <span class="keyword">False</span></div><div class="line">sorted(arr) 可以直接返回 arr，arr.sort() 是排序内部。</div></pre></td></tr></table></figure>
<p>特殊方法名 （有操作符）</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>方法名</th>
</tr>
</thead>
<tbody>
<tr>
<td>String/Bytes</td>
<td>repr , str , format , bytes</td>
</tr>
<tr>
<td>Conversion to number</td>
<td>abs , bool , complex , init , float , hash , index</td>
</tr>
<tr>
<td>Emulating collections</td>
<td>len , getitem , setitem , delitem , contains</td>
</tr>
<tr>
<td>Iteration</td>
<td>iter, reversed , next</td>
</tr>
<tr>
<td>Emulating callables</td>
<td>call</td>
</tr>
<tr>
<td>Context management</td>
<td>enter, exit</td>
</tr>
<tr>
<td>Instance creation &amp; destruction</td>
<td>new , init , del</td>
</tr>
<tr>
<td>Attribute management</td>
<td>getattr , getattribute , setattr , delattr, dir</td>
</tr>
<tr>
<td>Attribute descriptors</td>
<td>get , set ,delete</td>
</tr>
<tr>
<td>Class service</td>
<td>prepare , instancecheck , subclasscheck</td>
</tr>
</tbody>
</table>
<p>特殊方法名 （无操作符）</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>方法名</th>
</tr>
</thead>
<tbody>
<tr>
<td>Unary numeric operators</td>
<td>neg  , pos  , abs</td>
</tr>
<tr>
<td>Rich comparison operators</td>
<td>lt  , le  , eq  , ne  , gt  , ge</td>
</tr>
<tr>
<td>Arithmetic operators</td>
<td>add  ,sub  , mul  ,truediv  ,floordiv  ,mod , divmod , pow , round round</td>
</tr>
<tr>
<td>Reversed arithmetic operators</td>
<td>radd , rsub , rmul , rtruediv, rfloordiv , rmod , rdivmod, rpow</td>
</tr>
<tr>
<td>Augmented assignment mathmatic</td>
<td>iadd , isub , imul , itruediv, ifloordiv</td>
</tr>
<tr>
<td>Bitwise operators</td>
<td>invert  , lshift  , rshift  , and  , or</td>
</tr>
<tr>
<td>Reversed bitwise operators</td>
<td>rlshift , rrshift , rand , rxor , ror</td>
</tr>
<tr>
<td>Augmented assignment bitwise</td>
<td>ilshift , irshift , iand , ixor , ior</td>
</tr>
</tbody>
</table>
<p>Why len Is Not a Method</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">因为对 不同类型并不是一定调用 __len__ , 对于基本类型查看 c struct 中长度，对于其他类型直接调用 __len__ , 这种区分对待</div><div class="line"></div><div class="line"><span class="comment">### 2.4 生成器</span></div><div class="line"></div><div class="line">```python</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span></div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span></div><div class="line">    <span class="comment"># 这里为了省事，标记 123, 但是一般会有个循环，或者多个循环</span></div><div class="line"></div><div class="line">gen <span class="comment"># &lt;function __main__.gen&gt;</span></div><div class="line"><span class="comment"># 显式调用，返回方法对象</span></div><div class="line">g = gen() <span class="comment"># &lt;generator object gen at 0x10ec23dc0&gt;</span></div><div class="line">next(g)</div><div class="line">next(g)</div><div class="line">next(g)</div><div class="line">next(g) <span class="comment"># 执行到结尾部分或者其他报错 StopIteration</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gen():</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<p>生成器的作用就在于将遍历 lazy 化。嗯？其实编写代码的时候完全不中写生成器也可以 lazy 化很多操作。</p>
<p>需要注意的是，generator 后面支持了一个方法叫做 send(), 是 next() 的升级版本。将原来的数据的单向流通变成了双向流通。</p>
<p>见 <a href="#423-协程">协程</a></p>
<h2 id="0x03-中级概念"><a href="#0x03-中级概念" class="headerlink" title="0x03 中级概念"></a>0x03 中级概念</h2><h3 id="3-1-类和对象"><a href="#3-1-类和对象" class="headerlink" title="3.1 类和对象"></a>3.1 类和对象</h3><p>包含元编程</p>
<h3 id="3-2-模块与包"><a href="#3-2-模块与包" class="headerlink" title="3.2 模块与包"></a>3.2 模块与包</h3><h3 id="3-3-错误-调试测试"><a href="#3-3-错误-调试测试" class="headerlink" title="3.3 错误 / 调试测试"></a>3.3 错误 / 调试测试</h3><h3 id="3-4-IO-编程"><a href="#3-4-IO-编程" class="headerlink" title="3.4 IO 编程"></a>3.4 IO 编程</h3><h3 id="3-5-正则表达式"><a href="#3-5-正则表达式" class="headerlink" title="3.5 正则表达式"></a>3.5 正则表达式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">. ^ $ * + ? &#123; &#125; [ ] \ | ( )</div><div class="line"></div><div class="line">Regular String</div><div class="line"></div><div class="line">"ab*"</div><div class="line">"\\\\section"</div><div class="line">"\\w+\\s+\\1"</div><div class="line"></div><div class="line">Raw string</div><div class="line"></div><div class="line">r"ab*"</div><div class="line">r"\\section"</div><div class="line">r"\w+\s+\1"</div></pre></td></tr></table></figure>
<h2 id="0x04-高级概念"><a href="#0x04-高级概念" class="headerlink" title="0x04 高级概念"></a>0x04 高级概念</h2><h3 id="4-1-元编程"><a href="#4-1-元编程" class="headerlink" title="4.1 元编程"></a>4.1 元编程</h3><h4 id="4-1-1-Dynamic-Attributes-and-Properties"><a href="#4-1-1-Dynamic-Attributes-and-Properties" class="headerlink" title="4.1.1 Dynamic Attributes and Properties"></a>4.1.1 Dynamic Attributes and Properties</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">obj.attr</div><div class="line"></div><div class="line">重写__getattr__</div><div class="line"></div><div class="line">// TODO: 什么时候完成 python 的 DICT 以及 JSON 的相等？</div><div class="line"></div><div class="line">accessor?</div><div class="line">__new__ 是一个 class method, 但是并没有 xxx</div><div class="line"></div><div class="line">x = Foo('a')</div><div class="line"></div><div class="line">def object_maker(the_class, some_arg):</div><div class="line">    new_object = the_class.__new__(some_arg)</div><div class="line">    if isinstance(new_object, the_class):</div><div class="line">        the_class.__init__(new_object, some_arg)</div><div class="line">    return new_object</div><div class="line"></div><div class="line">x = object_maker(Foo,'a')</div></pre></td></tr></table></figure>
<h4 id="4-1-2-Attributes-Descriptors"><a href="#4-1-2-Attributes-Descriptors" class="headerlink" title="4.1.2 Attributes Descriptors"></a>4.1.2 Attributes Descriptors</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@property</span></div><div class="line"></div><div class="line">__class__ <span class="comment"># 接近 type()</span></div><div class="line">__dict__</div><div class="line">__slot__</div><div class="line"></div><div class="line">dir(obj) <span class="comment"># 与__dict__接近</span></div><div class="line">getattr</div><div class="line">setattr</div><div class="line">hasattr</div></pre></td></tr></table></figure>
<h4 id="4-1-3-Class-MetaProgramming"><a href="#4-1-3-Class-MetaProgramming" class="headerlink" title="4.1.3 Class MetaProgramming"></a>4.1.3 Class MetaProgramming</h4><h3 id="4-2-并发编程"><a href="#4-2-并发编程" class="headerlink" title="4.2 并发编程"></a>4.2 并发编程</h3><h4 id="4-2-0-GIL-Global-Interpreter-Lock"><a href="#4-2-0-GIL-Global-Interpreter-Lock" class="headerlink" title="4.2.0 GIL - Global Interpreter Lock"></a>4.2.0 GIL - Global Interpreter Lock</h4><p>并不是所有的解释器语言都有 GIL （尽管 Python 和 Ruby 里面都有）, 也并不是没有尝试过去除 GIL, 但是每次去除都会导致单线程性能的下降。所以暂时保留。</p>
<p>GIL 对程序中的影响：</p>
<blockquote>
<p>一个线程运行 Python , 而其他 N 个睡眠或者等待 I/O - <strong>同一时刻只有一个线程对共享资源进行存取</strong> , Python 线程也可以等待 threading.Lock 或者线程模块中的其他同步对象；</p>
</blockquote>
<h5 id="协同式多任务处理"><a href="#协同式多任务处理" class="headerlink" title="协同式多任务处理"></a>协同式多任务处理</h5><p>如果有两个线程，同时进行 IO 请求，当其中一个线程连接之后，立即会<strong>主动让出 GIL</strong>, 其他线程就可以运行。</p>
<blockquote>
<p>当 N 个线程在网络 I/O 堵塞，或等待重新获取 GIL，而一个线程运行 Python。</p>
</blockquote>
<p>让出之后还要执行代码呀，所以要有个收回 GIL 的动作。</p>
<h5 id="抢占式多任务处理"><a href="#抢占式多任务处理" class="headerlink" title="抢占式多任务处理"></a>抢占式多任务处理</h5><p>Python 2 GIL , 尝试收回 GIL 为 执行 1000 字节码。<br>Python 3 GIL , 尝试收回 GIL 检测间隔为 15ms</p>
<h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>原子操作：sort 之类不需要<br>非原子操作：n=n+2 的字节码分为 加载 n , 加载 2 , 相加，存储 n, 四个步骤，由于不是原子性，很可能被由于 15 ms 而被打断。</p>
<p>当然，懒人一向是 : <strong>优先级不决加括号，线程不决加 lock</strong></p>
<p>对于 Java, 程序员努力在尽可能短的时间内加锁存取共享数据，减轻线程的争夺，实现最大并行。但 Python 中，线程无法并行运行，细粒度的锁就没有了优势。</p>
<h4 id="4-2-1-多线程"><a href="#4-2-1-多线程" class="headerlink" title="4.2.1 多线程"></a>4.2.1 多线程</h4><blockquote>
<p>Python 多线程约等于并发。</p>
</blockquote>
<h4 id="4-2-2-多进程"><a href="#4-2-2-多进程" class="headerlink" title="4.2.2 多进程"></a>4.2.2 多进程</h4><h4 id="4-2-3-协程"><a href="#4-2-3-协程" class="headerlink" title="4.2.3 协程"></a>4.2.3 协程</h4><p>Python 中，协程在语法上接近于生成器（函数内包含 yield 关键字）.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">yield</span> a</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 协程</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># b = yield a</span></div><div class="line">    b = <span class="keyword">yield</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>协程在</p>
<h2 id="0x05-标准库与第三方库"><a href="#0x05-标准库与第三方库" class="headerlink" title="0x05 标准库与第三方库"></a>0x05 标准库与第三方库</h2><h3 id="5-1-数据结构与算法"><a href="#5-1-数据结构与算法" class="headerlink" title="5.1 数据结构与算法"></a>5.1 数据结构与算法</h3><h3 id="5-2-字符串与文本"><a href="#5-2-字符串与文本" class="headerlink" title="5.2 字符串与文本"></a>5.2 字符串与文本</h3><h3 id="5-3-数字日期与时间"><a href="#5-3-数字日期与时间" class="headerlink" title="5.3 数字日期与时间"></a>5.3 数字日期与时间</h3><h3 id="5-4-迭代器与生成器"><a href="#5-4-迭代器与生成器" class="headerlink" title="5.4 迭代器与生成器"></a>5.4 迭代器与生成器</h3><ol>
<li>Introduction</li>
<li>Built-in Functions</li>
<li>Built-in Constants</li>
<li>Built-in Types</li>
<li>Built-in Exceptions</li>
<li>Text Processing Services</li>
<li>Binary Data Services</li>
<li>Data Types</li>
<li>Numeric and Mathematical Modules</li>
<li>Functional Programming Modules</li>
<li>File and Directory Access</li>
<li>Data Persistence</li>
<li>Data Compression and Archiving</li>
<li>File Formats</li>
<li>Cryptographic Services</li>
<li>Generic Operating System Services</li>
<li>Concurrent Execution</li>
<li>Interprocess Communication and Networking</li>
<li>Internet Data Handling</li>
<li>Structured Markup Processing Tools</li>
<li>Internet Protocols and Support</li>
<li>Multimedia Services</li>
<li>Internationalization</li>
<li>Program Frameworks</li>
<li>Graphical User Interfaces with Tk</li>
<li>Development Tools</li>
<li>Debugging and Profiling</li>
<li>Software Packaging and Distribution</li>
<li>Python Runtime Services</li>
<li>Custom Python Interpreters</li>
<li>Importing Modules</li>
<li>Python Language Services</li>
<li>Miscellaneous Services</li>
<li>MS Windows Specific Services</li>
<li>Unix Specific Services</li>
<li>Superseded Modules</li>
<li>Undocumented Modules</li>
</ol>
<h2 id="0x06-可维护性代码"><a href="#0x06-可维护性代码" class="headerlink" title="0x06 可维护性代码"></a>0x06 可维护性代码</h2><h3 id="社区推崇的代码风格-Pythonic"><a href="#社区推崇的代码风格-Pythonic" class="headerlink" title="社区推崇的代码风格 Pythonic"></a>社区推崇的代码风格 Pythonic</h3><pre><code>The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren&apos;t special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you&apos;re Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it&apos;s a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let&apos;s do more of those!
</code></pre><h4 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h4><ul>
<li>外部<strong>不该</strong>引用 protected member （单下划线）</li>
<li>lambda 为一次使用，最好不要赋值。</li>
<li>不要给 buildin 函数赋值</li>
<li>py3 直接 super()</li>
<li>for in else 如果不内置 break 则出会在最后 for in 为 empty 的时候再执行 else 中的语句</li>
<li>context exit 如果不 catch 掉异常让其自然向上一级抛出错误的话，必须为 (self, exception_type, exception_value, traceback):</li>
<li>不要在 init 里面 return 数据</li>
<li>不要混用 tab 和 space</li>
<li>4 个 space 缩进</li>
<li>staticmethod 直接是 参数，classmethod 第一个参数为 cls</li>
<li>可变的 default value 是不能作为 参数的。（可能是解释器在确定函数的定义的时候完成赋值？)</li>
<li>遵循 exception hierachy <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" target="_blank" rel="external">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></li>
<li>defaultdict defaultdict(lambda : 6) , 必须 callable</li>
<li>尽量 unpack 赋值</li>
<li>字典用获取用 get(“myk”,None) , 赋值用 dictionary.setdefault(“list”, []).append(“list_item”)</li>
</ul>
<h4 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h4><ul>
<li>避免使用 import * , 我觉得这点值得商榷 , 如果是某个模块下，完全可以先把模块拆分成多个，最后 import 进来，接着使用 all.</li>
<li>getxxx 获取实际值，如果不为实际值，返回 None 显然不如 try catch 来的实在。</li>
<li>避免使用 global</li>
<li>命名要注意</li>
<li>动态创建方法 , 我觉得这点值得商榷。</li>
</ul>
<h4 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h4><ul>
<li>不要检查，如果可能有异常，尽量抛出异常来 trycatch 解决。</li>
<li>a is None , if flag</li>
<li>isinstance , not type(r) is types.ListType</li>
<li>“{name}{city}”.format(**info_dict)</li>
<li>for k , v in infodict.items()</li>
<li>使用 poiinfo = namedtuple(“poiinfo”,[“name”,”lng”,”lat”]) 返回 poiinfo[‘上海’,121.00,23] 最后返回值打印 poi.name , poi.lng , poi lat</li>
<li>for numbers_value, letters_value in zip(numbers, letters):</li>
<li>enumerate</li>
<li>如果能用 listcomp 则不使用 map 和 filter</li>
</ul>
<h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><ul>
<li>用 set</li>
<li>d.iteritems() 比 items() 省内存</li>
</ul>
<h2 id="0xEE-文章更新"><a href="#0xEE-文章更新" class="headerlink" title="0xEE 文章更新"></a>0xEE 文章更新</h2><ul>
<li><strong>2017-05-11 19:43:00</strong> : 增加代码质量模块</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;生命苦短-我用-Python&quot;&gt;&lt;a href=&quot;#生命苦短-我用-Python&quot; class=&quot;headerlink&quot; title=&quot;生命苦短 我用 Python&quot;&gt;&lt;/a&gt;生命苦短 我用 Python&lt;/h1&gt;&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍这个过程中结合自己的开发常见场景记录下来的一些笔记。&lt;/p&gt;
&lt;h2 id=&quot;0x01-Python-胡论&quot;&gt;&lt;a href=&quot;#0x01-Python-胡论&quot; class=&quot;headerlink&quot; title=&quot;0x01 Python 胡论&quot;&gt;&lt;/a&gt;0x01 Python 胡论&lt;/h2&gt;&lt;h3 id=&quot;1-1-Python-的独一无二性&quot;&gt;&lt;a href=&quot;#1-1-Python-的独一无二性&quot; class=&quot;headerlink&quot; title=&quot;1.1 Python 的独一无二性&quot;&gt;&lt;/a&gt;1.1 Python 的独一无二性&lt;/h3&gt;&lt;p&gt;是要用一门编程语言无非是两种原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这门技术很火，能挣钱&lt;/li&gt;
&lt;li&gt;写起来很舒服，开发效率高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这也是我在涉猎了很多编程语言为什么选择了 Python 和 TypeScript 作为自己的主要技能树。&lt;/p&gt;
&lt;p&gt;Python 具备这两点，TS （更加准确的说是 JavaScript）具备前一点。&lt;/p&gt;
&lt;p&gt;Python 写起来真的特别舒服，语法简洁，第三方库丰富，而且也比较火。&lt;/p&gt;
&lt;p&gt;有什么东西比，写代码效率高、生态圈好还重要了。&lt;/p&gt;
&lt;p&gt;生态圈好，比如 Web 开发用 Django/Flask , 数据抓取用 Requests , 数据分析清洗用 Pandas, 机器学习。&lt;/p&gt;
    
    </summary>
    
      <category term="学习资源" scheme="http://twocucao.xyz/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="编程工具" scheme="http://twocucao.xyz/tags/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>ReThinking In JavaScript</title>
    <link href="http://twocucao.xyz/2017/07/04/RethinkingInJavaScript/"/>
    <id>http://twocucao.xyz/2017/07/04/RethinkingInJavaScript/</id>
    <published>2017-07-04T12:08:21.000Z</published>
    <updated>2017-07-05T06:29:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>JavaScript 这门语言已经不容小觑了，在项目中的前端部分基于 VueJS 和 ElementUI 之后，我也就顺应历史潮流深入了解了一下这门不容小觑的语言。</p>
<a id="more"></a>
<h3 id="1-为什么是-JavaScript"><a href="#1-为什么是-JavaScript" class="headerlink" title="1. 为什么是 JavaScript"></a>1. 为什么是 JavaScript</h3><p>为什么是 JavaScript 呢？</p>
<p>因为太火，不得不认真学习一下。</p>
<p>我本人对 JavaScript 这种语言是有偏见的，这点我不会掩饰，我始终记得在正常的语言 Python / Java / C# 中实现一个休眠的简单功能和在 JS 中实现一个休眠功能的差别。</p>
<p>在 Python 中有很多语法糖，内置数据结构丰富，而 JS 则并不是如此，数据类型相对少，Bool 判断混乱，而今天，这门混乱的语言在流行程度上几乎接近于 Java 这门语言，即便是存在这样或者那样的问题，JavaScript 依然是一种奇葩的王者。</p>
<p>在服务端，有多少功能是 Python 完不成而 JavaScript（即 NodeJS) 可以胜任的呢？而且，NodeJS 写起来的感觉比起 Python 来说，还是差了很多，所以，我比较倾向于把计算类和 IO 类的操作用 Python 来写，至于浏览器端就交给 JavaScript 好了。</p>
<p>那么，对 JS 的这种定位，也使得我对 JS 生态圈的掌握程度不会超过 Vue/React 系。</p>
<h3 id="2-工具链"><a href="#2-工具链" class="headerlink" title="2. 工具链"></a>2. 工具链</h3><h4 id="2-1-浏览器端"><a href="#2-1-浏览器端" class="headerlink" title="2.1. 浏览器端"></a>2.1. 浏览器端</h4><h4 id="2-2-桌面端"><a href="#2-2-桌面端" class="headerlink" title="2.2. 桌面端"></a>2.2. 桌面端</h4><h4 id="2-3-客户端"><a href="#2-3-客户端" class="headerlink" title="2.3. 客户端"></a>2.3. 客户端</h4><h3 id="4-文档"><a href="#4-文档" class="headerlink" title="4. 文档"></a>4. 文档</h3><h3 id="5-社区"><a href="#5-社区" class="headerlink" title="5. 社区"></a>5. 社区</h3><h3 id="6-书籍"><a href="#6-书籍" class="headerlink" title="6. 书籍"></a>6. 书籍</h3><h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h3><ul>
<li>Number （没有 INT 值，只有 double-precision 64-bit format IEEE 754 ）</li>
<li>String</li>
<li>Boolean</li>
<li>Symbol (new in ES2015)</li>
<li>Object<ul>
<li>Function</li>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
</ul>
</li>
<li>null</li>
<li>undefined</li>
</ul>
<h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><h3 id="3-语句"><a href="#3-语句" class="headerlink" title="3. 语句"></a>3. 语句</h3><h2 id="0x02-中级概念"><a href="#0x02-中级概念" class="headerlink" title="0x02 中级概念"></a>0x02 中级概念</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h3 id="错误-调试测试"><a href="#错误-调试测试" class="headerlink" title="错误 / 调试测试"></a>错误 / 调试测试</h3><h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><h4 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h4><h5 id="协同式多任务处理"><a href="#协同式多任务处理" class="headerlink" title="协同式多任务处理"></a>协同式多任务处理</h5><h5 id="抢占式多任务处理"><a href="#抢占式多任务处理" class="headerlink" title="抢占式多任务处理"></a>抢占式多任务处理</h5><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h2 id="0x03-高级技巧"><a href="#0x03-高级技巧" class="headerlink" title="0x03 高级技巧"></a>0x03 高级技巧</h2><h2 id="0x04-标准库"><a href="#0x04-标准库" class="headerlink" title="0x04 标准库"></a>0x04 标准库</h2><h3 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h3><h3 id="系统化模块"><a href="#系统化模块" class="headerlink" title="系统化模块"></a>系统化模块</h3><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><h2 id="0xEE-文章更新"><a href="#0xEE-文章更新" class="headerlink" title="0xEE 文章更新"></a>0xEE 文章更新</h2><ul>
<li><strong>2017-07-05 19:43:00</strong> : 初始化本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;p&gt;JavaScript 这门语言已经不容小觑了，在项目中的前端部分基于 VueJS 和 ElementUI 之后，我也就顺应历史潮流深入了解了一下这门不容小觑的语言。&lt;/p&gt;
    
    </summary>
    
      <category term="学习资源" scheme="http://twocucao.xyz/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="编程工具" scheme="http://twocucao.xyz/tags/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Vim Cheatsheet</title>
    <link href="http://twocucao.xyz/2017/06/23/VimCheatSheet/"/>
    <id>http://twocucao.xyz/2017/06/23/VimCheatSheet/</id>
    <published>2017-06-23T11:48:00.000Z</published>
    <updated>2017-08-04T17:02:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中 Vim 使用场景。</p>
<p>不定期更新。</p>
<a id="more"></a>
<ul>
<li>配置</li>
<li>基本使用技巧</li>
<li>原生 Tips &amp; Hacks</li>
<li>Vim 必备插件</li>
</ul>
<h2 id="0x01-配置"><a href="#0x01-配置" class="headerlink" title="0x01 配置"></a>0x01 配置</h2><p>原先使用 k-vim 进行日常的编辑，然后依据自己的一些需求进行微调为 c-vim 。</p>
<p><a href="https://github.com/twocucao/c-vim" target="_blank" rel="external">https://github.com/twocucao/c-vim</a></p>
<h2 id="0x02-基本使用技巧"><a href="#0x02-基本使用技巧" class="headerlink" title="0x02 基本使用技巧"></a>0x02 基本使用技巧</h2><h3 id="2-1-Insert-Mode"><a href="#2-1-Insert-Mode" class="headerlink" title="2.1 Insert Mode"></a>2.1 Insert Mode</h3><ul>
<li>c-w 向后删除一个 word</li>
<li>c-h 向后删除一个 char</li>
</ul>
<h3 id="2-2-Normal-Mode"><a href="#2-2-Normal-Mode" class="headerlink" title="2.2 Normal Mode"></a>2.2 Normal Mode</h3><ul>
<li>gi 返回上次修改地点</li>
<li>d% 剪切包含括号的括号内部内容</li>
<li>U 恢复单个句子</li>
<li>在命令状态下按 c-d 可以查看所有命令，相当于 bash 下面的 tabtab</li>
<li>hjkl 左下上右</li>
<li>EasyMotion 使用这个就可以代替乱七八糟的快速移动了。这是一个可以给当前的文字立即用打上 tag, 这样的话在 normal 情况下输入，,w  然后就可以看到很多 tag, 输入其中的 tag 就可以立即跳转到相应的 tag.</li>
<li>insert 状态进行编辑 c-h c-w 删除一个字，删除一个词。</li>
<li>normal 状态下进行删除 x dd  —— 删除一个字，剪切一行。</li>
<li>. ..  —— 重复操作</li>
<li><blockquote>
<p>&lt;   —— 缩进 &gt;G <g <g="">g</g></p>
</blockquote>
</li>
<li>c-b c-f back forth</li>
<li>c-n c-p 代码补全，tips, 建议标点符号全部半角花，这样就会吧每段连起来的汉字当成一个单词，这样就可以减少输入代码。</li>
<li><blockquote>
<p>indent</p>
</blockquote>
</li>
<li>&lt; outdent</li>
<li>do it (&gt;)</li>
<li>repeat (.)</li>
<li>reverse (u)</li>
<li>f{char}</li>
<li>repeat ;</li>
<li>reverse ,</li>
</ul>
<h3 id="2-3-Command-Mode"><a href="#2-3-Command-Mode" class="headerlink" title="2.3 Command Mode"></a>2.3 Command Mode</h3><p>:%s/old/new/gc 可以一行一行查看</p>
<h3 id="2-4-Visual-Mode"><a href="#2-4-Visual-Mode" class="headerlink" title="2.4 Visual Mode"></a>2.4 Visual Mode</h3><p>vib - 选框内<br>vi” - “” 内部<br>vi’ - ‘’ 内部<br>ggVG</p>
<h3 id="2-5-窗口管理"><a href="#2-5-窗口管理" class="headerlink" title="2.5 窗口管理"></a>2.5 窗口管理</h3><p>切换窗口：Ctrl+w+hjkl<br>分割窗口：Ctrl+w+vs<br>关闭窗口：Ctrl+w+q</p>
<h2 id="0x03-原生-Tips-amp-Hacks"><a href="#0x03-原生-Tips-amp-Hacks" class="headerlink" title="0x03 原生 Tips &amp; Hacks"></a>0x03 原生 Tips &amp; Hacks</h2><h3 id="行处理"><a href="#行处理" class="headerlink" title="行处理"></a>行处理</h3><h4 id="行排序"><a href="#行排序" class="headerlink" title="行排序"></a>行排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">行排序</div><div class="line">sort r /【.\+】/</div><div class="line">sort u</div><div class="line">sort n</div><div class="line">sort</div><div class="line">sort!</div><div class="line">g/start/+1,/end/-1 sort n</div><div class="line"></div><div class="line">:%!column -t</div><div class="line">:%!sort -k2nr</div></pre></td></tr></table></figure>
<h4 id="行删除"><a href="#行删除" class="headerlink" title="行删除"></a>行删除</h4><p>删除 html 标签</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:%s/&lt;\_.\&#123;-1,\&#125;&gt;//g</div></pre></td></tr></table></figure>
<h4 id="删除空行"><a href="#删除空行" class="headerlink" title="删除空行"></a>删除空行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">:g/^$/d</div><div class="line">:g/^\s*$/d</div><div class="line">:%s/\n\&#123;3,&#125;/\r\r/e</div><div class="line">:g/^[ \t\u3000]*$/d</div><div class="line"></div><div class="line">:g/pattern/d</div><div class="line">:g!/pattern/d</div><div class="line"></div><div class="line">:g/pattern/t$</div><div class="line">:g/pattern/m$</div><div class="line">:s/ \&#123;2,&#125;/ /g</div></pre></td></tr></table></figure>
<p>Use \r instead of \n</p>
<h2 id="0x04-Vim-必备插件"><a href="#0x04-Vim-必备插件" class="headerlink" title="0x04 Vim 必备插件"></a>0x04 Vim 必备插件</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中 Vim 使用场景。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="效率" scheme="http://twocucao.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="工作自动化" scheme="http://twocucao.xyz/tags/%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
      <category term="Vim" scheme="http://twocucao.xyz/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Git CheatSheet</title>
    <link href="http://twocucao.xyz/2017/06/15/GitCheatSheet/"/>
    <id>http://twocucao.xyz/2017/06/15/GitCheatSheet/</id>
    <published>2017-06-15T12:46:00.000Z</published>
    <updated>2017-06-23T06:43:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我使用 Git 的一些开发小技巧。</p>
<p>不定期更新。</p>
<a id="more"></a>
<p>Git 是一种代码版本管理工具，是团队配合用于管理代码的一种工具。</p>
<p>本文的目录结构如下：</p>
<ul>
<li>Git 常用命令</li>
</ul>
<h2 id="0x01-Git-命令范论"><a href="#0x01-Git-命令范论" class="headerlink" title="0x01 Git 命令范论"></a>0x01 Git 命令范论</h2><ol>
<li>基础命令 （本地修改类）</li>
<li>合作命令 （本地与仓库类）</li>
<li>综合命令</li>
<li>管理命令</li>
</ol>
<p>前两种命令是入门 Git 的程序员都必须要会的。</p>
<p>而队伍里的技术管理人员必须要会前三。</p>
<h3 id="1-1-基础命令"><a href="#1-1-基础命令" class="headerlink" title="1.1 基础命令"></a>1.1 基础命令</h3><ul>
<li>git-init(1) to create a new repository.</li>
<li>git-log(1) to see what happened.</li>
<li>git-checkout(1) and git-branch(1) to switch branches.</li>
<li>git-add(1) to manage the index file.</li>
<li>git-diff(1) and git-status(1) to see what you are in the middle of doing.</li>
<li>git-commit(1) to advance the current branch.</li>
<li>git-reset(1) and git-checkout(1) (with pathname parameters) to undo changes.</li>
<li>git-merge(1) to merge between local branches.</li>
<li>git-rebase(1) to maintain topic branches.</li>
<li>git-tag(1) to mark a known point.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ tar zxf frotz.tar.gz</div><div class="line">$ <span class="built_in">cd</span> frotz</div><div class="line">$ git init</div><div class="line">$ git add . (1)</div><div class="line">$ git commit -m <span class="string">"import of frotz source tree."</span></div><div class="line">$ git tag v2.43 (2)</div><div class="line"></div><div class="line">$ git checkout -b alsa-audio (1)</div><div class="line">$ edit/compile/<span class="built_in">test</span></div><div class="line">$ git checkout -- curses/ux_audio_oss.c (2) <span class="comment"># 恢复文件</span></div><div class="line">$ git add curses/ux_audio_alsa.c (3)</div><div class="line">$ edit/compile/<span class="built_in">test</span></div><div class="line">$ git diff HEAD (4) <span class="comment"># 查看提交了哪些修改</span></div><div class="line">$ git commit <span class="_">-a</span> <span class="_">-s</span> (5) <span class="comment"># 提交所有</span></div><div class="line">$ edit/compile/<span class="built_in">test</span></div><div class="line">$ git diff HEAD^ (6) <span class="comment"># 查看所有变化，包含之前的 commit</span></div><div class="line">$ git commit <span class="_">-a</span> --amend (7) <span class="comment"># 修订前一个 commit, 把所有的新变化提交到</span></div><div class="line">$ git checkout master (8)</div><div class="line">$ git merge alsa-audio (9)</div><div class="line">$ git <span class="built_in">log</span> --since=<span class="string">'3 days ago'</span> (10)</div><div class="line">$ git <span class="built_in">log</span> v2.43.. curses/ (11)</div></pre></td></tr></table></figure>
<h3 id="1-2-合作命令"><a href="#1-2-合作命令" class="headerlink" title="1.2 合作命令"></a>1.2 合作命令</h3><ul>
<li>git-clone(1) from the upstream to prime your local repository.</li>
<li>git-pull(1) and git-fetch(1) from “origin” to keep up-to-date with the upstream.</li>
<li>git-push(1) to shared repository, if you adopt CVS style shared repository workflow.</li>
<li>git-format-patch(1) to prepare e-mail submission, if you adopt Linux kernel-style public forum workflow.</li>
<li>git-send-email(1) to send your e-mail submission without corruption by your MUA.</li>
<li>git-request-pull(1) to create a summary of changes for your upstream to pull.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## clone 修改 提交</span></div><div class="line">$ git <span class="built_in">clone</span> git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6</div><div class="line">$ <span class="built_in">cd</span> my2.6</div><div class="line">$ git checkout -b mine master (1)</div><div class="line">$ edit/compile/<span class="built_in">test</span>; git commit <span class="_">-a</span> <span class="_">-s</span> (2)</div><div class="line">$ git format-patch master (3)</div><div class="line">$ git send-email --to=<span class="string">"person &lt;email@example.com&gt;"</span> 00*.patch (4)</div><div class="line">$ git checkout master (5)</div><div class="line">$ git pull (6)</div><div class="line">$ git <span class="built_in">log</span> -p ORIG_HEAD.. arch/i386 include/asm-i386 (7) <span class="comment"># 查看感兴趣的部分</span></div><div class="line">$ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8) <span class="comment"># 查看分支</span></div><div class="line">$ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9) <span class="comment"># 从一个特地</span></div><div class="line">$ git reset --hard ORIG_HEAD (10) <span class="comment"># 撤销 pull</span></div><div class="line">$ git gc (11) <span class="comment"># garbage collect leftover objects from reverted pull</span></div><div class="line"><span class="comment"># 推送到其他 repo</span></div><div class="line"></div><div class="line">satellite$ git <span class="built_in">clone</span> mothership:frotz frotz (1)</div><div class="line">satellite$ <span class="built_in">cd</span> frotz</div><div class="line">satellite$ git config --get-regexp <span class="string">'^(remote|branch)\.'</span> (2)</div><div class="line">remote.origin.url mothership:frotz</div><div class="line">remote.origin.fetch refs/heads/*:refs/remotes/origin/*</div><div class="line">branch.master.remote origin</div><div class="line">branch.master.merge refs/heads/master</div><div class="line">satellite$ git config remote.origin.push \</div><div class="line">            +refs/heads/*:refs/remotes/satellite/* (3)</div><div class="line">satellite$ edit/compile/<span class="built_in">test</span>/commit</div><div class="line">satellite$ git push origin (4)</div><div class="line"></div><div class="line">mothership$ <span class="built_in">cd</span> frotz</div><div class="line">mothership$ git checkout master</div><div class="line">mothership$ git merge satellite/master (5)</div><div class="line"></div><div class="line">           1. mothership machine has a frotz repository under your home directory; <span class="built_in">clone</span> from it to start a repository on the satellite machine.</div><div class="line">           2. <span class="built_in">clone</span> sets these configuration variables by default. It arranges git pull to fetch and store the branches of mothership machine to <span class="built_in">local</span> remotes/origin/* remote-tracking</div><div class="line">           branches.</div><div class="line">           3. arrange git push to push all <span class="built_in">local</span> branches to their corresponding branch of the mothership machine.</div><div class="line">           4. push will stash all our work away on remotes/satellite/* remote-tracking branches on the mothership machine. You could use this as a back-up method. Likewise, you can</div><div class="line">           pretend that mothership <span class="string">"fetched"</span> from you (useful when access is one sided).</div><div class="line">           5. on mothership machine, merge the work <span class="keyword">done</span> on the satellite machine into the master branch.</div><div class="line"></div><div class="line">       Branch off of a specific tag.</div><div class="line"></div><div class="line">               $ git checkout -b private2.6.14 v2.6.14 (1)</div><div class="line">               $ edit/compile/<span class="built_in">test</span>; git commit <span class="_">-a</span></div><div class="line">               $ git checkout master</div><div class="line">               $ git cherry-pick v2.6.14..private2.6.14 (2)</div><div class="line"></div><div class="line">           1. create a private branch based on a well known (but somewhat behind) tag.</div><div class="line">           2. forward port all changes <span class="keyword">in</span> private2.6.14 branch to master branch without a formal <span class="string">"merging"</span>. Or longhand git format-patch -k -m --stdout v2.6.14..private2.6.14 | git am -3</div><div class="line">           -k</div></pre></td></tr></table></figure>
<h3 id="1-3-综合个体"><a href="#1-3-综合个体" class="headerlink" title="1.3 综合个体"></a>1.3 综合个体</h3><h3 id="1-4-仓库管理"><a href="#1-4-仓库管理" class="headerlink" title="1.4 仓库管理"></a>1.4 仓库管理</h3><p>安装完毕之后，cmd-s-p shell command install</p>
<h2 id="0x02-Git-Hacks"><a href="#0x02-Git-Hacks" class="headerlink" title="0x02 Git Hacks"></a>0x02 Git Hacks</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 搜索代码的变化</span></div><div class="line">git <span class="built_in">log</span> -S<span class="string">'&lt;a term in the source&gt;'</span></div><div class="line"><span class="comment"># 放弃本地修改，与远程同步</span></div><div class="line">git fetch origin &amp;&amp; git reset --hard origin/master &amp;&amp; git clean <span class="_">-f</span> <span class="_">-d</span></div><div class="line"><span class="comment"># 列出所有冲突文件</span></div><div class="line">git diff --name-only --diff-filter=U</div><div class="line"></div><div class="line"><span class="comment"># 手贱错误提交，但是没有 push</span></div><div class="line">git commit -m <span class="string">"Something terribly misguided"</span>              (1)</div><div class="line">git reset HEAD~                                           (2)</div><div class="line"><span class="comment"># edit needing changed files</span></div><div class="line">git add needing changed files                             (4)</div><div class="line">git commit -c ORIG_HEAD                                   (5)</div></pre></td></tr></table></figure>
<h2 id="0x03-Git-和-我的-Workflow"><a href="#0x03-Git-和-我的-Workflow" class="headerlink" title="0x03 Git 和 我的 Workflow"></a>0x03 Git 和 我的 Workflow</h2><p>一切工具都是为思路服务。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我使用 Git 的一些开发小技巧。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Pandas Cheatsheet</title>
    <link href="http://twocucao.xyz/2017/06/03/PandasCheatSheet/"/>
    <id>http://twocucao.xyz/2017/06/03/PandasCheatSheet/</id>
    <published>2017-06-03T10:41:47.000Z</published>
    <updated>2017-08-28T09:38:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Pandas 相关语句。当然，其中还包含 Numpy 等数据科学，统计学相关语句。</p>
<p>主要包含：</p>
<ul>
<li>Pandas 与 SQL 等价的一些操作</li>
<li>Pandas 使用过程中的一些细节</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>
<blockquote>
<p>SQL 是一种面向集合的处理工具 / 语言<br>Pandas 是一种面向数组的处理工具</p>
<p><strong>而一般处理 pandas 的数据往往以二维表的形式存在。所以，可以类比为更加强大的 SQL 语言。</strong></p>
</blockquote>
<h2 id="0x01-DataFrame-相关"><a href="#0x01-DataFrame-相关" class="headerlink" title="0x01. DataFrame 相关"></a>0x01. DataFrame 相关</h2><h3 id="1-1-定义并初始化"><a href="#1-1-定义并初始化" class="headerlink" title="1.1. 定义并初始化"></a>1.1. 定义并初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 1. 内存变量转 Dataframe</span></div><div class="line"><span class="comment">## 1.1. 通过二位矩阵 , index , columns</span></div><div class="line">dates = pd.date_range(<span class="string">'20130101'</span>, periods=<span class="number">6</span>)</div><div class="line">pd = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index=dates, columns=list(<span class="string">'ABCD'</span>))</div><div class="line"><span class="comment">## 1.2. 通过字典 Key 为 Column , Value 为 list,timestamp,np.array,value</span></div><div class="line">df2 = pd.DataFrame(&#123; <span class="string">'A'</span> : <span class="number">1.</span>,</div><div class="line">                     <span class="string">'B'</span> : pd.Timestamp(<span class="string">'20130102'</span>),</div><div class="line">                     <span class="string">'C'</span> : pd.Series(<span class="number">1</span>,index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</div><div class="line">                     <span class="string">'D'</span> : np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">'int32'</span>),</div><div class="line">                     <span class="string">'E'</span> : pd.Categorical([<span class="string">"test"</span>,<span class="string">"train"</span>,<span class="string">"test"</span>,<span class="string">"train"</span>]),</div><div class="line">                     <span class="string">'F'</span> : <span class="string">'foo'</span> &#125;)</div><div class="line"><span class="comment"># 长度无需统一，会自动填充</span></div><div class="line"></div><div class="line"><span class="comment"># 2. 从文件中读取</span></div><div class="line">pd.read_excel(<span class="string">"./data_set.xlsx"</span>,index_col=<span class="keyword">False</span>) <span class="comment"># 关掉 Index</span></div><div class="line"></div><div class="line"><span class="comment"># 3. 合并多个同样的 DataFrame</span></div><div class="line">df_items = [df_item1,df_item2,...]</div><div class="line">df = pd.concat(df_items).drop_duplicates()</div><div class="line">df.merge(data_set_df, left_on=<span class="string">"lno"</span>, right_on=<span class="string">"rno"</span>, how=<span class="string">"outer"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 4.series to dataframe</span></div><div class="line">df = s.to_frame()</div></pre></td></tr></table></figure>
<h3 id="1-2-查看并修改表结构"><a href="#1-2-查看并修改表结构" class="headerlink" title="1.2. 查看并修改表结构"></a>1.2. 查看并修改表结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1. 查看表结构</span></div><div class="line"></div><div class="line">df.head()</div><div class="line">df.tail(<span class="number">3</span>)</div><div class="line">df.index</div><div class="line"><span class="comment"># df.index = ['日期','小时']</span></div><div class="line">df.columns</div><div class="line">df.columns = map(str.lower, df.columns)</div><div class="line"></div><div class="line">df.values</div><div class="line"></div><div class="line">df[<span class="string">'col'</span>] = df[<span class="string">'col'</span>].astype(str).convert_objects(convert_numeric=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># 2. 删除 col_name</span></div><div class="line"></div><div class="line">df.drop([<span class="string">'col_name_1'</span>,<span class="string">'col_name_2'</span>,...,<span class="string">'col_name_N'</span>],inplace=<span class="keyword">True</span>,axis=<span class="number">1</span>,errors=<span class="string">'ignore'</span>)</div><div class="line"></div><div class="line"><span class="keyword">del</span> df[<span class="string">'cola'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 3. 修改元数据</span></div><div class="line">df.rename(columns=<span class="keyword">lambda</span> x: x.split(<span class="string">'.'</span>)[<span class="number">-1</span>], inplace=<span class="keyword">True</span>)</div><div class="line">df.rename(columns=&#123;<span class="string">'oldName1'</span>: <span class="string">'newName1'</span>, <span class="string">'oldName2'</span>: <span class="string">'newName2'</span>&#125;, inplace=<span class="keyword">True</span>)</div><div class="line">df.rename(columns = &#123;<span class="number">0</span>: <span class="string">'cola'</span>, <span class="number">1</span>: <span class="string">'colb'</span>, <span class="number">2</span>: <span class="string">'colc'</span>&#125;, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># 2.</span></div><div class="line"><span class="comment">## 2. 遍历</span></div><div class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows():</div><div class="line">    <span class="keyword">print</span> row[<span class="string">"c1"</span>], row[<span class="string">"c2"</span>]</div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> df.itertuples(index=<span class="keyword">True</span>, name=<span class="string">'Pandas'</span>):</div><div class="line">    <span class="keyword">print</span> getattr(row, <span class="string">"c1"</span>), getattr(row, <span class="string">"c2"</span>)</div><div class="line">= IF([@price] &lt; <span class="number">1</span>, <span class="string">"未知"</span>,IF([@price] &lt; <span class="number">30000</span>, <span class="string">"三万以下"</span>, IF([@price] &lt;= <span class="number">50000</span>, <span class="string">"三万到五万"</span>, IF([@price] &lt;= <span class="number">100000</span>, <span class="string">"五万到十万"</span>, IF([@price] &lt;= <span class="number">10000000</span>, <span class="string">"十万以上"</span>, <span class="string">"其他"</span>)))))</div></pre></td></tr></table></figure>
<h3 id="1-3-修改表内容"><a href="#1-3-修改表内容" class="headerlink" title="1.3. 修改表内容"></a>1.3. 修改表内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.drop_duplicates([<span class="string">'col_a'</span>,<span class="string">'col_b'</span>])</div></pre></td></tr></table></figure>
<h3 id="1-4-查看表内容"><a href="#1-4-查看表内容" class="headerlink" title="1.4. 查看表内容"></a>1.4. 查看表内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 选择</span></div><div class="line">df[<span class="string">'A'</span>] <span class="comment"># 列选</span></div><div class="line">df[<span class="number">0</span>:<span class="number">30</span>] <span class="comment"># 行选</span></div><div class="line">df[<span class="string">'20130102'</span>:<span class="string">'20130104'</span>] <span class="comment"># 行选</span></div><div class="line">df.loc[<span class="string">'20130102'</span>:<span class="string">'20130104'</span>,[<span class="string">'A'</span>,<span class="string">'B'</span>]] <span class="comment"># by label</span></div><div class="line">df.loc[condition,[<span class="string">'cola'</span>,<span class="string">'colb'</span>]]</div><div class="line">df.loc[[<span class="string">'ri01'</span>,<span class="string">'ri02'</span>] , [<span class="string">"cola"</span>,<span class="string">"colb"</span>,<span class="string">"colc"</span>]]</div><div class="line"></div><div class="line">df.iloc[<span class="number">1</span>:<span class="number">5</span>, <span class="number">2</span>:<span class="number">4</span>] <span class="comment"># by position</span></div><div class="line">df.iloc[: , <span class="number">0</span>:<span class="number">7</span>] <span class="comment"># 全部列，0-7 索引</span></div><div class="line"></div><div class="line">df.ix[[<span class="string">'ri02'</span>, <span class="string">'ri09'</span>]] <span class="comment"># 选取行</span></div><div class="line"></div><div class="line">total_rows=len(df.axes[<span class="number">0</span>])</div><div class="line">total_cols=len(df.axes[<span class="number">1</span>])</div><div class="line"></div><div class="line">df.sample(<span class="number">3000</span>) <span class="comment"># 随机抽取 3000 行，可以用于快速验证算法</span></div><div class="line"></div><div class="line">criterion = df2[<span class="string">'a'</span>].map(<span class="keyword">lambda</span> x: x.startswith(<span class="string">'t'</span>))</div><div class="line">df2[criterion]</div><div class="line"></div><div class="line">df2[[x.startswith(<span class="string">'t'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> df2[<span class="string">'a'</span>]]]</div><div class="line"><span class="comment"># select * from df limit 5</span></div><div class="line">df.head()</div><div class="line"><span class="comment"># select a,b,c from df</span></div><div class="line">df[[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]].head()</div><div class="line"><span class="comment"># select a,b,c from df where a = 11 and b = 'xx'</span></div><div class="line">df[ ( df[<span class="string">'a'</span>] == <span class="number">11</span>) &amp; ( df[<span class="string">'b'</span>] == <span class="string">'xx'</span>) ][[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]]</div><div class="line">df[<span class="string">'a'</span>].value_counts()</div><div class="line"></div><div class="line"><span class="comment"># SELECT * FROM df ORDER BY a DESC LIMIT 10 OFFSET 5;</span></div><div class="line">df.nlargest(<span class="number">10</span>+<span class="number">5</span>, columns=<span class="string">'a'</span>).tail(<span class="number">10</span>)</div><div class="line"></div><div class="line">df.column.str[<span class="number">0</span>:<span class="number">2</span>]</div><div class="line">df.column_name.str.len()</div><div class="line">two_groups = <span class="string">'(?P&lt;letter&gt;[a-z])(?P&lt;digit&gt;[0-9])'</span></div><div class="line">s.str.extract(two_groups, expand=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># 排序</span></div><div class="line"></div><div class="line">df.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span>)</div><div class="line">df.sort_values(by=<span class="string">'B'</span>)</div><div class="line">df = df.sort([<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>],ascending=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>])</div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="comment"># window function</span></div><div class="line"><span class="comment"># SELECT a, b, c, rank() OVER (PARTITION BY a ORDER BY b DESC) as rn FROM df;</span></div><div class="line"><span class="comment"># 如果没有这个 window function 的话，可以 groupby 一下，然后生成表和原有表进行 JOIN</span></div><div class="line">tips.assign(rn=tips.sort_values([<span class="string">'b'</span>], ascending=<span class="keyword">False</span>).groupby([<span class="string">'a'</span>]).cumcount() + <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># Top N rows per group</span></div><div class="line"><span class="comment"># rank 代表等级 如果两人并列第一名，则不存在第二名，直接是第三名 , row_number 代表排名，即即便两个人分数一样，也无法并列第一名</span></div><div class="line"></div><div class="line"><span class="comment"># PostGRESQL's ROW_NUMBER() analytic function</span></div><div class="line">SELECT * FROM (</div><div class="line">  SELECT</div><div class="line">    t.*,</div><div class="line">    ROW_NUMBER() OVER(PARTITION BY day ORDER BY total_bill DESC) AS rn</div><div class="line">  FROM tips t</div><div class="line">) tt</div><div class="line">WHERE rn &lt; <span class="number">3</span></div><div class="line">ORDER BY day, rn;</div><div class="line"></div><div class="line">(tips.assign(rn=tips.sort_values([<span class="string">'total_bill'</span>], ascending=<span class="keyword">False</span>)</div><div class="line">                    .groupby([<span class="string">'day'</span>])</div><div class="line">                    .cumcount() + <span class="number">1</span>)</div><div class="line">     .query(<span class="string">'rn &lt; 3'</span>)</div><div class="line">     .sort_values([<span class="string">'day'</span>,<span class="string">'rn'</span>])</div><div class="line">)</div><div class="line"></div><div class="line">(tips.assign(rnk=tips.groupby([<span class="string">'day'</span>])[<span class="string">'total_bill'</span>]</div><div class="line">                     .rank(method=<span class="string">'first'</span>, ascending=<span class="keyword">False</span>))</div><div class="line">     .query(<span class="string">'rnk &lt; 3'</span>)</div><div class="line">     .sort_values([<span class="string">'day'</span>,<span class="string">'rnk'</span>])</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># PostGRESQL's RANK() analytic function</span></div><div class="line">SELECT * FROM (</div><div class="line">  SELECT</div><div class="line">    t.*,</div><div class="line">    RANK() OVER(PARTITION BY sex ORDER BY tip) AS rnk</div><div class="line">  FROM tips t</div><div class="line">  WHERE tip &lt; <span class="number">2</span></div><div class="line">)</div><div class="line">WHERE rnk &lt; <span class="number">3</span></div><div class="line">ORDER BY sex, rnk;</div><div class="line"></div><div class="line">(tips[tips[<span class="string">'tip'</span>] &lt; <span class="number">2</span>]</div><div class="line">     .assign(rnk_min=tips.groupby([<span class="string">'sex'</span>])[<span class="string">'tip'</span>]</div><div class="line">                         .rank(method=<span class="string">'min'</span>))</div><div class="line">     .query(<span class="string">'rnk_min &lt; 3'</span>)</div><div class="line">     .sort_values([<span class="string">'sex'</span>,<span class="string">'rnk_min'</span>])</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># where 语句</span></div><div class="line">df[<span class="string">'a'</span>].isnull()</div><div class="line">df[<span class="string">'a'</span>].isin(arr)</div><div class="line"></div><div class="line"><span class="comment"># groupby</span></div><div class="line">df.groupby(<span class="string">'a'</span>).size() <span class="comment"># 计算 a</span></div><div class="line">df.groupby(<span class="string">'a'</span>)[<span class="string">'b'</span>].count() <span class="comment"># 同上计算 a</span></div><div class="line">df.groupby(<span class="string">'a'</span>).count() <span class="comment"># 计算所有 cols</span></div><div class="line">agg_fun_dict = &#123;<span class="string">'tip'</span>: np.mean, <span class="string">'day'</span>: np.size&#125;</div><div class="line">agg_fun_dict_new = &#123;<span class="string">'tip'</span>: [np.mean, np.size]&#125;</div><div class="line">df.groupby(<span class="string">'a'</span>)[[<span class="string">'b'</span>,<span class="string">'c'</span>]].agg(agg_fun_dict)</div><div class="line">df.groupby(<span class="string">'a'</span>)[<span class="string">'b'</span>].describe()</div><div class="line">df.age.agg([<span class="string">'min'</span>, <span class="string">'max'</span>])</div><div class="line">df.applymap(multiply_10_for_every_int) <span class="comment">#</span></div><div class="line"></div><div class="line">calc_groups = df.groupby([date])</div><div class="line">calc_groups[<span class="string">'id_aa'</span>].nunique().reset_index().to_excel(<span class="string">"123.xlsx"</span>)</div><div class="line"></div><div class="line"><span class="comment"># pivot</span></div><div class="line">pd.pivot_table(data=df,values=<span class="string">'value_col'</span>, index=<span class="string">'A_FROM'</span>, columns=<span class="string">'B_TO'</span>, aggfunc=<span class="keyword">lambda</span> x: len(x.unique()),margins=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># CONCAT</span></div><div class="line">append</div><div class="line"><span class="comment"># JOIN</span></div><div class="line">pd.merge(df1, df2, on=<span class="string">'key'</span>, how=<span class="string">'outer'</span>)</div><div class="line"></div><div class="line"><span class="comment"># UPDATE tips SET tip = tip*2 WHERE tip &lt; 2;</span></div><div class="line">tips.loc[tips[<span class="string">'tip'</span>] &lt; <span class="number">2</span>, <span class="string">'tip'</span>] *= <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment"># <span class="doctag">TODO:</span></span></div></pre></td></tr></table></figure>
<h3 id="1-5-表变换"><a href="#1-5-表变换" class="headerlink" title="1.5. 表变换"></a>1.5. 表变换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># apply , apply map</span></div><div class="line">DataFrame.apply operates on entire rows <span class="keyword">or</span> columns at a time.</div><div class="line">DataFrame.applymap, Series.apply, <span class="keyword">and</span> Series.map operate on one element at time.</div></pre></td></tr></table></figure>
<h3 id="1-6-表遍历"><a href="#1-6-表遍历" class="headerlink" title="1.6. 表遍历"></a>1.6. 表遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df.iterrows()</div><div class="line">df.itertuples()</div></pre></td></tr></table></figure>
<h2 id="0x02-可视化技术"><a href="#0x02-可视化技术" class="headerlink" title="0x02. 可视化技术"></a>0x02. 可视化技术</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 绘制</span></div><div class="line">df.plot(kind=<span class="string">'bar'</span>)</div><div class="line"></div><div class="line">plt.xlabel(<span class="string">'xlable'</span>)</div><div class="line">plt.ylabel(<span class="string">'ylable'</span>)</div><div class="line">plt.title(<span class="string">'title name'</span>)</div><div class="line"></div><div class="line">plt.show()</div><div class="line"></div><div class="line">df[<span class="string">'数量'</span>].plot(kind=<span class="string">'bar'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 批量创建图</span></div><div class="line">g = sns.FacetGrid(customers, col=<span class="string">"cola"</span>)</div><div class="line">g.map(plt.scatter, <span class="string">"数量"</span>, <span class="string">"单位"</span>, alpha=<span class="number">1</span>)</div><div class="line">g.add_legend();</div><div class="line"></div><div class="line">ttbill = sns.distplot(tips[<span class="string">"总价格"</span>]);</div><div class="line">ttbill.set(xlabel = <span class="string">'价值'</span>, ylabel = <span class="string">'频率'</span>, title = <span class="string">"标题名"</span>)</div><div class="line">sns.despine()</div><div class="line"></div><div class="line">sns.jointplot(x =<span class="string">"total_bill"</span>, y =<span class="string">"tip"</span>, data = tips)</div><div class="line"><span class="comment"># https://github.com/guipsamora/pandas_exercises/blob/master/07_Visualization/Tips/Exercises_with_code_and_solutions.ipynb</span></div><div class="line"></div><div class="line">plt.pie(</div><div class="line">    [<span class="number">100</span>,<span class="number">300</span>],</div><div class="line">    labels = [<span class="string">'男'</span>, <span class="string">'女'</span>],</div><div class="line">    shadow = <span class="keyword">False</span>,</div><div class="line">    colors = [<span class="string">'blue'</span>,<span class="string">'red'</span>],</div><div class="line">    explode = (<span class="number">0.15</span> , <span class="number">0</span>),</div><div class="line">    startangle = <span class="number">90</span>,</div><div class="line">    autopct = <span class="string">'%1.1f%%'</span></div><div class="line">    )</div><div class="line">plt.axis(<span class="string">'equal'</span>)</div><div class="line">plt.title(<span class="string">"男女比例"</span>)</div><div class="line">plt.tight_layout()</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h2 id="0x03-asd1"><a href="#0x03-asd1" class="headerlink" title="0x03. asd1"></a>0x03. asd1</h2><h2 id="0x04-Performance-Tips"><a href="#0x04-Performance-Tips" class="headerlink" title="0x04. Performance Tips"></a>0x04. Performance Tips</h2><p>最近遇到了数据量比较大的数据处理，数据条数差不多在 3 千万条。加载到内存中大约 1GB.</p>
<h3 id="4-1-精简行列"><a href="#4-1-精简行列" class="headerlink" title="4.1. 精简行列"></a>4.1. 精简行列</h3><ol>
<li>读入 dataframe 的时候就排除多余的行列。</li>
<li>Merge 时候需要精简行列。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df1.merge(df2[list(<span class="string">'xab'</span>)])</div><div class="line">pandas.merge(dataframe1, dataframe2.iloc[:, [<span class="number">0</span>:<span class="number">5</span>]], how=<span class="string">'left'</span>, on=<span class="string">'key'</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Pandas 相关语句。当然，其中还包含 Numpy 等数据科学，统计学相关语句。&lt;/p&gt;
&lt;p&gt;主要包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pandas 与 SQL 等价的一些操作&lt;/li&gt;
&lt;li&gt;Pandas 使用过程中的一些细节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫 Crawler" scheme="http://twocucao.xyz/categories/%E7%88%AC%E8%99%AB-Crawler/"/>
    
    
      <category term="Pandas" scheme="http://twocucao.xyz/tags/Pandas/"/>
    
      <category term="效率" scheme="http://twocucao.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="工作自动化" scheme="http://twocucao.xyz/tags/%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
  </entry>
  
  <entry>
    <title>一个基于 TensorFlow 的图片分类器</title>
    <link href="http://twocucao.xyz/2017/05/29/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8ETensorFlow%E7%9A%84%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <id>http://twocucao.xyz/2017/05/29/一个基于TensorFlow的分类器/</id>
    <published>2017-05-29T00:46:00.000Z</published>
    <updated>2017-06-14T10:06:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>这年头，不会写爬虫不会写网站，那基本上不能算是一个 Python 程序员，但是 2017 年的 Google IO 之后，作为一个 Pythonist 你不会点数据分析和机器学习，也不好见人了。<br>所以，本文教你在什么机器学习概念都不懂的情况下，做出一个基于 TensorFlow 的图片分类功能，入个门。仅此而已。<br>本文的代码和文章内容主要源于我在 Github 上无意间翻到的一个 Repo, 链接地址，我所做的功夫就是在这基础上将代码改为了 Python 3 / TensorFlow 1.1.0 的环境，将这个流程梳理一下，不算是代码的生产者最多搬运工，仅此而已。</p>
<p>本文的目的是：</p>
<blockquote>
<p>通过 TensorFlow 训练一个小型的分类器，用这个分类器通过照片识别出明星的姓名。</p>
</blockquote>
<p>即我们要训练一个小 AI, 这个小 AI 能分辨欢乐颂里面的五美：</p>
<ul>
<li>乔欣</li>
<li>刘涛</li>
<li>王子文</li>
<li>杨紫</li>
<li>蒋欣</li>
</ul>
<a id="more"></a>
<p>注意：本文主要在 MacOS 上进行测试。<br>本文的目录结构如下：</p>
<ul>
<li>准备训练数据和测试数据</li>
<li>TensorFlow 环境配置 </li>
<li>开始训练图片</li>
<li>对图片进行分类</li>
<li>文章回顾</li>
<li>参考链接</li>
</ul>
<p>首先克隆我的 Repo,（我的 Repo 在这里)[<a href="https://github.com/twocucao/the-machine" target="_blank" rel="external">https://github.com/twocucao/the-machine</a>] .</p>
<p>仓库结构大致如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">├── README.md</div><div class="line">├── compose</div><div class="line">│   └── tensorflow</div><div class="line">│       ├── Dockerfile</div><div class="line">│       └── Dockerfile-dev</div><div class="line">├── config</div><div class="line">├── doc</div><div class="line">├── image_classifier</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── label_dir.py</div><div class="line">│   ├── label_image.py</div><div class="line">│   ├── retrain.py</div><div class="line">│   └── train.sh</div><div class="line">└── bootstrap.sh</div></pre></td></tr></table></figure></p>
<h2 id="0x01-准备训练数据和测试数据"><a href="#0x01-准备训练数据和测试数据" class="headerlink" title="0x01 准备训练数据和测试数据"></a>0x01 准备训练数据和测试数据</h2><p>准备训练数据，数据从哪里来呢？从百度来。我们从百度抓取大约 5 组图片，每组图片大约 1000 张图片，并且从每组里面留下 900 组作为训练数据，抽出 100 作为测试数据。</p>
<h3 id="1-1-抓取图片"><a href="#1-1-抓取图片" class="headerlink" title="1.1 抓取图片"></a>1.1 抓取图片</h3><p>抓取代码放在代码仓库中，比较简单，下载即可用。</p>
<p>在 crawl_baidu_images.py 中填入五美的姓名，运行脚本即可。<br>脚本会请求百度图片的图片，然后下载下来，程序跑完会有如下的图片数据。<br>好，抓取图片我们就完成了。</p>
<h3 id="1-2-归类训练数据"><a href="#1-2-归类训练数据" class="headerlink" title="1.2 归类训练数据"></a>1.2 归类训练数据</h3><p>归类训练数据，其实就是把刚刚下载下来的图片，分类为五美，也就是把刘涛的照片放到刘涛文件夹中。看一下现在的文件夹，似乎已经分类完毕了，是不是这样呢？显然不是，因为：</p>
<ul>
<li>下载下来的图片貌似 JPG 结尾的图片，但是文件内容是不是 JPEG 的格式就不好说了，也可 GIF 也可能是 PNG.</li>
<li>当你搜索刘涛的时候，百度图片给出的不仅仅是刘涛。也可能有胡歌《琅琊榜》, 也可能有胡军《天龙八部》</li>
</ul>
<p>所以下面需要做的是：</p>
<ol>
<li>移除非 JPG 的文件格式</li>
<li>人工确 (jian) 定 (huang) 文件夹中的图片。</li>
</ol>
<p>在做上面这两步之前，我们先新建文件夹 image_classifier_train ( 笔者放在 /Users/twocucao/Codes/Repos/image_classifier_train ), 注意，这个文件夹不要放在代码下面，把五美的文件夹放到这个文件夹下面的 data 文件夹下。并且用拼音命名。</p>
<p>如下：</p>
<p><img src="http://oriw7hkjj.bkt.clouddn.com/WX20170529-160220@2x.png" alt=""></p>
<p>我们先移除非 JPEG 的图片。如果是 mac 系统需要先安装 jpeginfo , brew install jpeginfo 即可。<br>进入 /Users/twocucao/Codes/Repos/image_classifier_train 执行下面脚本 <strong>去除非 JPG 的图片</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">find . -iname &quot;*.jpg&quot; -exec jpeginfo -c &#123;&#125; \; | grep -E &quot;WARNING|ERROR&quot; &gt; need_delete.sh</div><div class="line">cat need_delete.sh | awk &apos;&#123;print $1&#125;&apos; | xargs rm</div><div class="line">rm need_delete.sh</div></pre></td></tr></table></figure>
<p>好了接下来，我们需要到每一个文件夹下进行人工<del>鉴黄</del>检验图片是不是五美，比如，到 liutao 文件夹下检查，删除图片基本上没有清晰面容的照片。<br>为了速度，我们把图片转成缩略图大致看一下,去除明显不是五美的照片,我们进行下一步的筛选.</p>
<h3 id="1-3-找出对应的头像"><a href="#1-3-找出对应的头像" class="headerlink" title="1.3 找出对应的头像"></a>1.3 找出对应的头像</h3><p>我们需要从图片库中选出五美的头像来</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pyenv global system</div><div class="line"></div><div class="line">brew reinstall boost-python --with-python3 --without-python</div><div class="line">conda install -c menpo dlib=19.4</div></pre></td></tr></table></figure>
<h2 id="0x02-TensorFlow-环境配置"><a href="#0x02-TensorFlow-环境配置" class="headerlink" title="0x02 TensorFlow 环境配置"></a>0x02 TensorFlow 环境配置</h2><h3 id="2-1-Docker-的安装和镜像加速"><a href="#2-1-Docker-的安装和镜像加速" class="headerlink" title="2.1 Docker 的安装和镜像加速"></a>2.1 Docker 的安装和镜像加速</h3><p>本文需要使用 Docker 作为环境配置，也正是因为如此，我们可以在很快的时间内搭建起来 tensorflow 的运行环境。目测，Docker 也是未来几年内搭建环境分发环境的首选。<br>Docker 下载不必多说，需要补充一句的是，我们可以在阿里云账户上使用一个 registry 对 Docker 镜像进行加速。<br>在阿里云的容器界面获取加速链接填到 docker 里面即可。如图。</p>
<p><img src="http://oriw7hkjj.bkt.clouddn.com/WX20170529-162953@2x.png" alt=""></p>
<h3 id="2-2-构建镜像文件并且构建镜像"><a href="#2-2-构建镜像文件并且构建镜像" class="headerlink" title="2.2 构建镜像文件并且构建镜像"></a>2.2 构建镜像文件并且构建镜像</h3><p>建议在执行构建镜像之前，务必先完成本文的第二小节的图片准备。然后执行下面的命令，将镜像文件构建成镜像。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /Users/twocucao/Codes/Repos/the-machine</div><div class="line">docker build <span class="_">-f</span> compose/tensorflow/Dockerfile-dev -t twocucao/tensorflow .</div></pre></td></tr></table></figure></p>
<p>该行命令使用 compose/tensorflow/Dockerfile-dev 作为 Dockerfile 文件，构建镜像名称为 twocucao/tensorflow , 传入的 context 为 当前路径。</p>
<h3 id="2-3-测试-Tensorflow-容器"><a href="#2-3-测试-Tensorflow-容器" class="headerlink" title="2.3 测试 Tensorflow 容器"></a>2.3 测试 Tensorflow 容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run -it twocucao/tensorflow /bin/bash</div><div class="line"><span class="built_in">echo</span> <span class="string">'hello tensorflow'</span></div></pre></td></tr></table></figure>
<p>如果运行正常，则一切正常。可以进行下一步骤了。</p>
<h2 id="0x03-开始训练"><a href="#0x03-开始训练" class="headerlink" title="0x03 开始训练"></a>0x03 开始训练</h2><p>执行命令开始训练。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./train.sh /Users/twocucao/Codes/Repos/image_classifier_train</div></pre></td></tr></table></figure>
<p>我设置的训练次数为 20000, 在我的本子上基本两个小时，可能时间有些长，没有耐心的童鞋可以吧训练次数调整低一些。然后重新构建镜像。</p>
<blockquote>
<p>那么，当 TensorFlow 在训练的时候，我们要谈些什么？</p>
</blockquote>
<p>Google 开源了 Inception 模型，这个模型从 ImageNet 的上千个分类的图片训练而来，而我们所做的工作，便是在此基础上做最后的增量训练。然而，我们只用来区分女明星，似乎这个 Inception 的模型有点大材小用？<br>好，训练结束之后我们查看一下文件夹 /Users/twocucao/Codes/Repos/image_classifier_train 下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">├── bottlenecks</div><div class="line">│   ├── jiangxin</div><div class="line">│   ├── liutao</div><div class="line">│   ├── qiaoxin</div><div class="line">│   ├── wangziwen</div><div class="line">│   └── yangzi</div><div class="line">├── data</div><div class="line">│   ├── jiangxin</div><div class="line">│   ├── liutao</div><div class="line">│   ├── qiaoxin</div><div class="line">│   ├── wangziwen</div><div class="line">│   └── yangzi</div><div class="line">├── inception</div><div class="line">│   ├── LICENSE</div><div class="line">│   ├── classify_image_graph_def.pb</div><div class="line">│   ├── cropped_panda.jpg</div><div class="line">│   ├── imagenet_2012_challenge_label_map_proto.pbtxt</div><div class="line">│   ├── imagenet_synset_to_human_label_map.txt</div><div class="line">│   └── inception-2015-12-05.tgz</div><div class="line">├── retrained_graph.pb</div><div class="line">├── retrained_labels.txt</div><div class="line">└── test_data</div><div class="line">    ├── src</div><div class="line">    └── target</div></pre></td></tr></table></figure></p>
<p>Bottlenecks 文件夹为我们将每一张 JPG 转成矩阵的文本<br>Inception 为 Google 开源的模型文件。<br>retrained_graph.pb 为训练出来的图的模型文件。<br>retrained_labels.txt 为标签。</p>
<p>如下图不断刷出的一坨坨的文字是什么呢?</p>
<ul>
<li>时间 , 无需多说</li>
<li>当前训练次数</li>
<li>Train accuracy = 87.0%</li>
<li>Cross entropy = 0.499145</li>
<li>Validation accuracy = 52.0% (N=100)</li>
</ul>
<p>看到 Train accuracy &gt;&gt; Validation accuracy 估计是模型过度拟合了,嗯,看来这个模型还是有点问题的.</p>
<h2 id="0x04-对图片进行分类"><a href="#0x04-对图片进行分类" class="headerlink" title="0x04 对图片进行分类"></a>0x04 对图片进行分类</h2><h3 id="4-1-开始分类"><a href="#4-1-开始分类" class="headerlink" title="4.1 开始分类"></a>4.1 开始分类</h3><h3 id="4-2-对分类结果进行评估"><a href="#4-2-对分类结果进行评估" class="headerlink" title="4.2 对分类结果进行评估"></a>4.2 对分类结果进行评估</h3><h2 id="0x05-文章回顾"><a href="#0x05-文章回顾" class="headerlink" title="0x05 文章回顾"></a>0x05 文章回顾</h2><h2 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h2><ul>
<li><a href="https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/index.html" target="_blank" rel="external">https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/index.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;这年头，不会写爬虫不会写网站，那基本上不能算是一个 Python 程序员，但是 2017 年的 Google IO 之后，作为一个 Pythonist 你不会点数据分析和机器学习，也不好见人了。&lt;br&gt;所以，本文教你在什么机器学习概念都不懂的情况下，做出一个基于 TensorFlow 的图片分类功能，入个门。仅此而已。&lt;br&gt;本文的代码和文章内容主要源于我在 Github 上无意间翻到的一个 Repo, 链接地址，我所做的功夫就是在这基础上将代码改为了 Python 3 / TensorFlow 1.1.0 的环境，将这个流程梳理一下，不算是代码的生产者最多搬运工，仅此而已。&lt;/p&gt;
&lt;p&gt;本文的目的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过 TensorFlow 训练一个小型的分类器，用这个分类器通过照片识别出明星的姓名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即我们要训练一个小 AI, 这个小 AI 能分辨欢乐颂里面的五美：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;乔欣&lt;/li&gt;
&lt;li&gt;刘涛&lt;/li&gt;
&lt;li&gt;王子文&lt;/li&gt;
&lt;li&gt;杨紫&lt;/li&gt;
&lt;li&gt;蒋欣&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>VSCode CheatSheet</title>
    <link href="http://twocucao.xyz/2017/05/27/VSCodeCheatSheet/"/>
    <id>http://twocucao.xyz/2017/05/27/VSCodeCheatSheet/</id>
    <published>2017-05-27T00:46:00.000Z</published>
    <updated>2017-05-27T01:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我使用 VSCode 的一些开发小技巧。</p>
<p>不定期更新。</p>
<a id="more"></a>
<p>VSCode 是一种编辑器，这显然是一句废话。</p>
<p>这个问题应该是，我为什么要使用 VSCode 作为主力编辑器。有人说：微软出品一定是精品。这个理由很软粉，但是不能打动我更换编辑器的欲望。</p>
<p>使用编辑器自然是求其轻量，高效的文字处理，以及编程的相关环境的支持，以及跨平台和可扩展性。</p>
<ul>
<li><strong>轻量</strong>是求其打开速度快，编辑不卡顿。这一点，用 Vim , Emacs , Sublime Text 完全都可以。</li>
<li><strong>高效的文字处理</strong>是因为满足日常编写文字和代码的需求。</li>
<li><strong>编程相关环境的支持</strong>是因为作为一个学习东西很杂乱的人来说，最痛苦的事情就在于 IDE 常常来不及给一些新技术予以足够的支持，比如说 Docker, 比如说 ansible。</li>
<li><strong>跨平台和可扩展性</strong> 跨平台是必须的，可扩展性则是从插件资源和编写插件的难度考虑。</li>
</ul>
<p>本文的目录结构如下：</p>
<ul>
<li>VSCode 常用命令</li>
</ul>
<h2 id="0x01-VSCode-相关配置"><a href="#0x01-VSCode-相关配置" class="headerlink" title="0x01 VSCode 相关配置"></a>0x01 VSCode 相关配置</h2><p>安装完毕之后，cmd-s-p shell command install</p>
<h2 id="0x02-VSCode-常用命令"><a href="#0x02-VSCode-常用命令" class="headerlink" title="0x02 VSCode 常用命令"></a>0x02 VSCode 常用命令</h2><ul>
<li><strong>Command Palette</strong> : cmd-s-p</li>
<li><strong>cmd-p</strong> : cmd-p</li>
<li><strong>显示状态</strong> : cmd-s-m</li>
<li><strong>下一个错误</strong> : F8 / shift-F8</li>
<li><em>**</em> : c-s-p</li>
<li><em>**</em> : c-s-p</li>
<li><em>**</em> : c-s-p</li>
<li><em>**</em> : c-s-p</li>
<li><em>**</em> : c-s-p</li>
<li><em>**</em> : c-s-p</li>
<li><em>**</em> : c-s-p<h2 id="0x03-VS-扩展相关"><a href="#0x03-VS-扩展相关" class="headerlink" title="0x03 VS 扩展相关"></a>0x03 VS 扩展相关</h2></li>
</ul>
<h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我使用 VSCode 的一些开发小技巧。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Docker CheatSheet</title>
    <link href="http://twocucao.xyz/2017/05/21/DockerCheatSheet/"/>
    <id>http://twocucao.xyz/2017/05/21/DockerCheatSheet/</id>
    <published>2017-05-21T02:57:00.000Z</published>
    <updated>2017-07-23T07:43:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Docker 相关和命令。</p>
<ul>
<li>Docker 相关概念</li>
<li>Docker 配套工具</li>
<li>Django PostgreSQL RabbitMQ Redis ElasticSearch Sentry 集群 Docker 化</li>
<li>Docker 踩坑记录</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>
<h2 id="0x01-Docker-相关概念"><a href="#0x01-Docker-相关概念" class="headerlink" title="0x01 Docker 相关概念"></a>0x01 Docker 相关概念</h2><h3 id="1-1-Docker-是什么？"><a href="#1-1-Docker-是什么？" class="headerlink" title="1.1 Docker 是什么？"></a>1.1 Docker 是什么？</h3><p>在认知 Docker 这种相对而言比较新概念的时候，只要从以往的经验中拿出一个词语来概括新词汇即可。</p>
<p>于是，我们便可以这么理解：</p>
<blockquote>
<p>Docker 是一种比虚拟机轻量的用来存放职责比较单一的应用的容器。</p>
</blockquote>
<p>也就是三点：</p>
<ul>
<li>比虚拟机轻量</li>
<li>用来存放职责单一的应用</li>
<li>容器</li>
</ul>
<p>显然这是一种理解，而不是一种定义。</p>
<h3 id="1-2-Docker-是用来做什么的？"><a href="#1-2-Docker-是用来做什么的？" class="headerlink" title="1.2 Docker 是用来做什么的？"></a>1.2 Docker 是用来做什么的？</h3><p>新技术本质是什么？工具也。<br>每一个新的技术都是为了提升效率才被创造出来，那么，究竟 Docker 可以从哪些方面提升我们的效率呢？</p>
<p>我们知道开发一个有些规模的网站的话，需要严格遵守如下的开发流程：</p>
<ul>
<li>编码</li>
<li>测试</li>
<li>集成到系统中</li>
<li>部署</li>
</ul>
<p>但如果人员比较多，则会出现问题，有的人喜欢用 MacOS, 有的人喜欢用 Ubuntu, 开发测试环境怎么统一呢？如果开发人员明明使用的是某个版本的 PostgreSQL, 用了最新的功能，但是测试和运维用的就是老版本的功能怎么办？</p>
<p>部署环境也会有问题，比如，开发部突然想使用更高版本的软件，比如突然需要更多的 Django 应用来负担海量请求的怎么办？Hadoop 不够用怎么办？</p>
<p>当然，思路很简单，开发的时候使用虚拟机，拷贝给大家一起用，部署的时候多创建一些机器，然后上 Ansible 远程操控。即可。</p>
<p>并不是不行，但是 Docker 由于更加轻量，操作粒度更加细腻，我可以销毁镜像，上传镜像，定制镜像，很轻松调整镜像包并且安装挂载文件。</p>
<h2 id="0x02-Docker-配套工具"><a href="#0x02-Docker-配套工具" class="headerlink" title="0x02 Docker 配套工具"></a>0x02 Docker 配套工具</h2><h2 id="0x03-Django-技术栈-Docker-化"><a href="#0x03-Django-技术栈-Docker-化" class="headerlink" title="0x03 Django 技术栈 Docker 化"></a>0x03 Django 技术栈 Docker 化</h2><h2 id="0x04-Docker-踩坑记录"><a href="#0x04-Docker-踩坑记录" class="headerlink" title="0x04 Docker 踩坑记录"></a>0x04 Docker 踩坑记录</h2><h3 id="4-1-PostgreSQL-的初始化"><a href="#4-1-PostgreSQL-的初始化" class="headerlink" title="4.1 PostgreSQL 的初始化"></a>4.1 PostgreSQL 的初始化</h3><p>当 Docker 化 PostgreSQL 的时候，必须要把一些初始化脚本放在 docker-entrypoint-initdb.d 中，才能初始化，笔者在进行测试的时候多次发现无法进行初始化，究其原因，经过查找，如果没有及时删除 Volume 的话，则无论怎么初始化，或者 Build, 每一次都会挂载原来的文件夹。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ADD init_django_db.sh /docker-entrypoint-initdb.d/init_django_db.sh</div></pre></td></tr></table></figure></p>
<h3 id="4-2-清空所有Image"><a href="#4-2-清空所有Image" class="headerlink" title="4.2 清空所有Image"></a>4.2 清空所有Image</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Delete all containers</span></div><div class="line">docker rm $(docker ps <span class="_">-a</span> -q)</div><div class="line"><span class="comment"># Delete all images</span></div><div class="line">docker rmi $(docker images -q)</div><div class="line"><span class="comment"># Force delete</span></div><div class="line">docker rmi $(docker images -q) <span class="_">-f</span></div><div class="line"><span class="comment"># Delete Unused Volume</span></div><div class="line">docker volume prune</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Docker 相关和命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 相关概念&lt;/li&gt;
&lt;li&gt;Docker 配套工具&lt;/li&gt;
&lt;li&gt;Django PostgreSQL RabbitMQ Redis ElasticSearch Sentry 集群 Docker 化&lt;/li&gt;
&lt;li&gt;Docker 踩坑记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库与消息队列" scheme="http://twocucao.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>MacBook Pro 15.4 Multi-Touch Bar</title>
    <link href="http://twocucao.xyz/2017/05/01/OhMyNewMac/"/>
    <id>http://twocucao.xyz/2017/05/01/OhMyNewMac/</id>
    <published>2017-05-01T13:45:00.000Z</published>
    <updated>2017-05-07T05:55:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个月前换了这台新电脑 MacBook Pro 15.4 Multi-Touch Bar (Core i7/16GB/512GB)，感觉每天打字都很舒服，也算是实现了一个梦寐以求的小目标吧。<br><a id="more"></a></p>
<p>在此之前，用我的<strong>前任</strong>有下面几款：</p>
<ul>
<li>大一时候从网吧买的 400 块钱的台式机</li>
<li>大一时候从淘宝买的 700 块钱的笔记本</li>
<li>大二上学期买的 1200 块钱的笔记本</li>
<li>大三上学期买的 3200 块钱的笔记本，后来花了 2000 块升级了一下下</li>
<li>大四上学期买的 5000 块的二手 MacBook Pro</li>
</ul>
<p>后来手贱买了降噪耳机，机械键盘，手机，pad , 这些都没有花家人的钱。</p>
<p>能把一手烂牌打出不错的结果，这才是让人自豪的事情啊！</p>
<p>晚安，以及劳动节快乐。</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>2017-05-01: 初始化本文的开头</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一个月前换了这台新电脑 MacBook Pro 15.4 Multi-Touch Bar (Core i7/16GB/512GB)，感觉每天打字都很舒服，也算是实现了一个梦寐以求的小目标吧。&lt;br&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="效率" scheme="http://twocucao.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="碎碎念" scheme="http://twocucao.xyz/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="编程工具" scheme="http://twocucao.xyz/tags/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>『Fluent Python』读书笔记</title>
    <link href="http://twocucao.xyz/2017/04/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_FluentPython/"/>
    <id>http://twocucao.xyz/2017/04/18/读书笔记_FluentPython/</id>
    <published>2017-04-18T12:16:37.000Z</published>
    <updated>2017-11-08T09:06:00.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Fluent Python 适用于中级 Pythoner。</p>
<blockquote>
<p>以 Python 作为主力编程语言已经 1 年多了，读这本书，希望写的代码可以更加的 Pythonic。</p>
</blockquote>
<a id="more"></a>
<h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><h2 id="本书结构"><a href="#本书结构" class="headerlink" title="本书结构"></a>本书结构</h2><ul>
<li>P1. Prologue<ul>
<li>C01. The Python Data Model<ul>
<li>A Pythonic Card Deck</li>
<li>How Special Methods Are Used</li>
<li>Overview of Special Methods</li>
<li>Why len Is Not a Method</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P2. Data Structure<ul>
<li>C02. An Array of Sequences<ul>
<li>Overview of Built-in Sequences</li>
<li>List Comprehensions and Generator Expressions</li>
<li>Tuples Are Not Just Immutable Lists</li>
<li>Slicing</li>
<li>Using plus and star with Sequences</li>
<li>Augmented Assignment with Sequences</li>
<li>list.sort and the sorted Built-In Function</li>
<li>Managing Ordered Sequences with bisect</li>
<li>When a List Is Not the Answer</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C03. Dictionaries and Sets<ul>
<li>Generic Mapping Types</li>
<li>Dict Comprehensions</li>
<li>Common Mapping Methods</li>
<li>Mappings with Flexiable Key Lookup</li>
<li>Variations of Dict</li>
<li>Subclassing UserDict</li>
<li>Immutable Mappings</li>
<li>Set Theory</li>
<li>Dict and Set Under the Hood</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C04. Text VS Bytes<ul>
<li>Character Issues</li>
<li>Byte Essentials</li>
<li>Basic Encoders/Decoders</li>
<li>Understanding Encode/Decode Problems</li>
<li>Handling Text Files</li>
<li>Normalizng Unicode for Saner Comparisons</li>
<li>Sorting Unicode Text</li>
<li>The Unicode Database</li>
<li>Dual-Mode str and bytes APIs</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P3. Function as Objects<ul>
<li>C05. First-Class Function<ul>
<li>Treating a Function Like an Object</li>
<li>Higher-Order Functions</li>
<li>Anonymous Functions</li>
<li>The Seven Flavors of Callable Objects</li>
<li>User-Defined Callable Types</li>
<li>Function Introspection</li>
<li>From Positional to Keyword-Only Parameters</li>
<li>Function Annotations</li>
<li>Packages for Functional Programming</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C06. Design Patterns with First-Class Functions<ul>
<li>Refactoring Strategy</li>
<li>Command</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C07. Function Decorators and Closures<ul>
<li>Decorators 101</li>
<li>When Python Executes Decorators</li>
<li>Decorator-Enhanced Strategy Pattern</li>
<li>Variable Scope Rules</li>
<li>Closures</li>
<li>The nonlocal Declaration</li>
<li>Implementing a Simple Decorator</li>
<li>Decorators In the Standard Library</li>
<li>Stacked Decorators</li>
<li>Parameterized Decorators</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P4. Object-Oriented Idioms<ul>
<li>C08. Object References, Mutability, and Recycling<ul>
<li>Variables Are Not Boxes</li>
<li>Identity, Equality , and Aliases</li>
<li>Copies Are Shallow by Default</li>
<li>Function Parameters as References</li>
<li>del and Garbage Collection</li>
<li>Weak References</li>
<li>Tricts Python Plays with Immutables</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C09. A Pythonic Object<ul>
<li>Object Representations</li>
<li>Vector Class Redux</li>
<li>An Alternative Constructor</li>
<li>classmethod VS staticmethod</li>
<li>Formatted Displays</li>
<li>A Hashable Vector2d</li>
<li>Private and “Protected” Attributes in Python</li>
<li>Saving Space with the slots Class Attribute</li>
<li>Overriding Class Attributes</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C10. Sequence Hacking , Hashing , and Slicing<ul>
<li>Vector: A User-Defined Sequence Type</li>
<li>Vector Take #1: Vector2d Compatible</li>
<li>Protocols and Duck Typing</li>
<li>Vector Take #2: A Sliceable Sequence</li>
<li>Vector Take #3: Dynamic Attribute Access</li>
<li>Vector Take #4: Hashing and a Faster ==</li>
<li>Vector Take #5: Formatting</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C11. Interfaces: From Protocols to ABCs<ul>
<li>Interfaces and Protocols in Python Culture</li>
<li>Python Digs Sequences</li>
<li>Monkey-Patching to Implement a Protocol at Runtime</li>
<li>Alex Martelli’s Waterfowl</li>
<li>Subclassing an ABC</li>
<li>ABCs in the Standard Library</li>
<li>Defining and Using an ABC</li>
<li>How the Tombola Subclasses Were Tested</li>
<li>Usage of register in Practice</li>
<li>Geese Can Behave as Ducks</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C12. Inheritance: For Good or For Worse<ul>
<li>Subclassing Built-In Types Is Tricty</li>
<li>Multiple Inheritance and Method Resolution Order</li>
<li>Multiple Inheritance in the Real World</li>
<li>Coping with Multiple Inheritance</li>
<li>A Modern Example: Mixins in Django Generic Views</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C13. Operator Overloading: Doing It Right<ul>
<li>Operator Overloading 101</li>
<li>Unary Operators</li>
<li>Overloading plus for Verctor Addtion</li>
<li>Overloading star for Scalar Multiplication</li>
<li>Rich Comparison Operators</li>
<li>Augmented Assignment Operator</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P5. Control Flow<ul>
<li>C14. Iterables, Iterators , and Generators<ul>
<li>Sentence Take #1 : A Sequence of Words Iterables VS Iterators</li>
<li>Iterables Versus Itertors</li>
<li>Sentence Take #2 : A Classic Iterator</li>
<li>Sentence Take #3 : A Generator Function</li>
<li>Sentence Take #4 : A Lazy Implementation</li>
<li>Sentence Take #5 : A Generator Expression</li>
<li>Generator Expressions : When to Use Them</li>
<li>Another Example : Arithmetic Progression Generator</li>
<li>Generator Functions in the Standard Library</li>
<li>New Syntax In Python 3.3 : yield from</li>
<li>Iterable Reducing Functions</li>
<li>A Closer Look at the iter Function</li>
<li>Case Study : Generators in a Databse Conversion Utility</li>
<li>Generators as Coroutines</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C15. Context Managers and else Blocks<ul>
<li>Do This , Then That: else Blocks Beyond if</li>
<li>Context Managers and with Blocks</li>
<li>The contextlib Utilities</li>
<li>Using @contextmanager</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C16. Coroutines<ul>
<li>How Coroutines Evolved from Generators</li>
<li>Basic Behavior of a Generator Used as a Coroutine</li>
<li>Example: Coroutine to Compute a Running Average</li>
<li>Decorators for Conroutine Priming</li>
<li>Coroutine Termination and Exception Handing</li>
<li>Returning a Value from a Coroutine</li>
<li>Using Yield from</li>
<li>The Meaning of yield from</li>
<li>Use Case: Coroutines for Discrete Event Simulation</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C17. Concurrency with Futures<ul>
<li>e.g. Web Downloads in Three Styles</li>
<li>Blocking I/O and the GIL</li>
<li>Launching Processes with concurrent.futures</li>
<li>Experimenting with Executor.map</li>
<li>Downloads with Progress Display and Error Handling</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C18. Concurrency with asyncio<ul>
<li>Thread VS Coroutine : A Comparison</li>
<li>Downloading with asyncio and aiohttp</li>
<li>Running Circling Around Blocking Calls</li>
<li>Enhancing the asyncio downloader Script</li>
<li>From Callbacks to Futures and Coroutines</li>
<li>Writing asyncio Servers</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P6. Metaprogramming<ul>
<li>C19. Dynamic Attributes and Properties<ul>
<li>Data Wrangling with Dynamic Attributes</li>
<li>Using a Property for Attribute Validation</li>
<li>A Proper Look at Properties</li>
<li>Coding a Property Factory</li>
<li>Handling Attribute Deletion</li>
<li>Essential Attributes and Functions For Attribute Handling</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C20. Attribute Descriptors<ul>
<li>Desciptor Example: Attribute Validation</li>
<li>Overriding VS Nonoverriding Descriptors</li>
<li>Methods Are Descriptors</li>
<li>Descriptor Usage Tips</li>
<li>Descriptor docstring and Overriding Deletion</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C21. Class Metaprogramming<ul>
<li>A Class Factory</li>
<li>A Class Decorator for Customizing Descriptors</li>
<li>What Happens When: Import Time VS Runtime</li>
<li>Metaclasses 101</li>
<li>A Metaclass for Customizing Descriptors</li>
<li>The Metaclass prepare Special Method</li>
<li>Classes as Objects</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="P1-Prologue"><a href="#P1-Prologue" class="headerlink" title="P1. Prologue"></a>P1. Prologue</h2><p>序言部分讲了很重要的一点，Python 最优秀的地方就是其统一性。</p>
<p>Pythonic 体现在使用的 Python Data Model 来表述，其途径主要编写<strong>特殊方法 (Special/Magic Method)</strong></p>
<ul>
<li>Iteration</li>
<li>Collections</li>
<li>Attribute access</li>
<li>Operator overloading</li>
<li>Function and method invocation</li>
<li>Object creation and destruction</li>
<li>String representation and formatting</li>
<li>Managed contexts (i.e., with blocks)</li>
</ul>
<h3 id="C01-The-Python-Data-Model"><a href="#C01-The-Python-Data-Model" class="headerlink" title="C01. The Python Data Model"></a>C01. The Python Data Model</h3><p>扩展阅读：<a href="http://zopeinterface.readthedocs.io/en/latest/" target="_blank" rel="external">http://zopeinterface.readthedocs.io/en/latest/</a></p>
<h4 id="A-Pythonic-Card-Deck"><a href="#A-Pythonic-Card-Deck" class="headerlink" title="A Pythonic Card Deck"></a>A Pythonic Card Deck</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#### 1. 案例一：纸牌 nametuple</span></div><div class="line">Card = collections.namedtuple(<span class="string">'Card'</span>, [<span class="string">'rank'</span>, <span class="string">'suit'</span>])</div><div class="line"><span class="comment"># Card 是一个类</span></div><div class="line"><span class="comment"># 重载到 Cards(object) 的 __init__ , __len__ , __getitem__</span></div><div class="line"><span class="comment"># 重载可以之后可以使用 [] 语法 ( [0] [-1] random.choice(cards) [:3] [12::13] for in sorted reversed,sorted(cards, key=calc_score) card in cards ),</span></div><div class="line"><span class="comment"># 还可以重载 __setitem__, 之后就可以 shuffle</span></div><div class="line"><span class="comment"># 重载 __repr__ , __abs__ , __bool__ , __add__ , __mul__ 可以 repr() abs() bool() + *</span></div></pre></td></tr></table></figure>
<h4 id="How-Special-Methods-Are-Used"><a href="#How-Special-Methods-Are-Used" class="headerlink" title="How Special Methods Are Used"></a>How Special Methods Are Used</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">obj.__len__()</div><div class="line">len()</div><div class="line"></div><div class="line">obj.__</div></pre></td></tr></table></figure>
<h4 id="Overview-of-Special-Methods"><a href="#Overview-of-Special-Methods" class="headerlink" title="Overview of Special Methods"></a>Overview of Special Methods</h4><p>对于内置类型 (list, str , bytearray) 解释器在调用特殊方法的时候调用 C 库，比如 CPython 实现的 len 方法一般直接会调用 PyVarObject C Struct ob_size</p>
<p>特殊方法往往并不是显示调用，而是被隐式调用。比如 init 在 new 中的作用，比如 for item in items 世界上会调用 iter(items), 这也会隐式调用 items.<strong>iter</strong>() .</p>
<p>一般当大量使用特殊方法的时候，都是在进行元编程。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bool(x) 先调用 x.__bool__() , 如果 x.__bool__() 没有实现，则调用 x.__len__(), 如果为 <span class="number">0</span> 则返回 <span class="keyword">False</span></div><div class="line">sorted(arr) 可以直接返回 arr，arr.sort() 是排序内部。</div></pre></td></tr></table></figure>
<p>特殊方法名 （有操作符）</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>方法名</th>
</tr>
</thead>
<tbody>
<tr>
<td>String/Bytes</td>
<td>repr , str , format , bytes</td>
</tr>
<tr>
<td>Conversion to number</td>
<td>abs , bool , complex , init , float , hash , index</td>
</tr>
<tr>
<td>Emulating collections</td>
<td>len , getitem , setitem , delitem , contains</td>
</tr>
<tr>
<td>Iteration</td>
<td>iter, reversed , next</td>
</tr>
<tr>
<td>Emulating callables</td>
<td>call</td>
</tr>
<tr>
<td>Context management</td>
<td>enter, exit</td>
</tr>
<tr>
<td>Instance creation &amp; destruction</td>
<td>new , init , del</td>
</tr>
<tr>
<td>Attribute management</td>
<td>getattr , getattribute , setattr , delattr, dir</td>
</tr>
<tr>
<td>Attribute descriptors</td>
<td>get , set ,delete</td>
</tr>
<tr>
<td>Class service</td>
<td>prepare , instancecheck , subclasscheck</td>
</tr>
</tbody>
</table>
<p>特殊方法名 （无操作符）</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>方法名</th>
</tr>
</thead>
<tbody>
<tr>
<td>Unary numeric operators</td>
<td>neg  , pos  , abs</td>
</tr>
<tr>
<td>Rich comparison operators</td>
<td>lt  , le  , eq  , ne  , gt  , ge</td>
</tr>
<tr>
<td>Arithmetic operators</td>
<td>add  ,sub  , mul  ,truediv  ,floordiv  ,mod , divmod , pow , round round</td>
</tr>
<tr>
<td>Reversed arithmetic operators</td>
<td>radd , rsub , rmul , rtruediv, rfloordiv , rmod , rdivmod, rpow</td>
</tr>
<tr>
<td>Augmented assignment mathmatic</td>
<td>iadd , isub , imul , itruediv, ifloordiv</td>
</tr>
<tr>
<td>Bitwise operators</td>
<td>invert  , lshift  , rshift  , and  , or</td>
</tr>
<tr>
<td>Reversed bitwise operators</td>
<td>rlshift , rrshift , rand , rxor , ror</td>
</tr>
<tr>
<td>Augmented assignment bitwise</td>
<td>ilshift , irshift , iand , ixor , ior</td>
</tr>
</tbody>
</table>
<h4 id="Why-len-Is-Not-a-Method"><a href="#Why-len-Is-Not-a-Method" class="headerlink" title="Why len Is Not a Method"></a>Why len Is Not a Method</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">因为对 不同类型并不是一定调用 __len__ , 对于基本类型查看 c struct 中长度，对于其他类型直接调用 __len__ , 这种区分对待</div></pre></td></tr></table></figure>
<h2 id="P2-Data-Structure"><a href="#P2-Data-Structure" class="headerlink" title="P2. Data Structure"></a>P2. Data Structure</h2><h3 id="C02-An-Array-of-Sequences"><a href="#C02-An-Array-of-Sequences" class="headerlink" title="C02. An Array of Sequences"></a>C02. An Array of Sequences</h3><p>Strings, lists, byte sequences, arrays, XML elements, and database results share a rich set of common operations including iteration, slicing, sorting, and concatenation.</p>
<h4 id="Overview-of-Built-in-Sequences"><a href="#Overview-of-Built-in-Sequences" class="headerlink" title="Overview of Built-in Sequences"></a>Overview of Built-in Sequences</h4><p>C 实现的按照 item 是否为同一类型分为：</p>
<ul>
<li><strong>Container sequences</strong>:  list, tuple, and collections.deque can hold items of different types.</li>
<li><strong>Flat sequences</strong>: str, bytes, bytearray, memoryview, and array.array hold items of one type.</li>
</ul>
<p>C 实现按照 item 是否可修改分为：</p>
<ul>
<li><strong>Mutable sequences</strong>: list, bytearray, array.array, collections.deque, and memoryview</li>
<li><strong>Immutable sequences</strong>: tuple, str, and bytes</li>
</ul>
<h4 id="List-Comprehensions-and-Generator-Expressions"><a href="#List-Comprehensions-and-Generator-Expressions" class="headerlink" title="List Comprehensions and Generator Expressions"></a>List Comprehensions and Generator Expressions</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">new_items = [func(a) <span class="keyword">for</span> item <span class="keyword">in</span> items]</div><div class="line">new_items = [ str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">new_items = list(map(str,list(filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> , list(range(<span class="number">100</span>))))))</div><div class="line"><span class="comment"># 可写成</span></div><div class="line">new_items = list(map(str,filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> , range(<span class="number">100</span>))))</div></pre></td></tr></table></figure>
<p>list 往往和 map filter 以及 listcomp 用于创建简单的序列</p>
<h4 id="Tuples-Are-Not-Just-Immutable-Lists"><a href="#Tuples-Are-Not-Just-Immutable-Lists" class="headerlink" title="Tuples Are Not Just Immutable Lists"></a>Tuples Are Not Just Immutable Lists</h4><ul>
<li>解包赋值</li>
<li>不要手贱加逗号</li>
<li><p>下划线可以用作临时变量 （但是 django 中下划线用于中英文）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a, b, *rest = range(<span class="number">5</span>) <span class="comment"># (0, 1, [2, 3, 4])</span></div><div class="line">a, b, *rest = range(<span class="number">3</span>) <span class="comment"># (0, 1, [2])</span></div><div class="line">a, b, *rest = range(<span class="number">2</span>) <span class="comment"># (0, 1, [])</span></div><div class="line"></div><div class="line">a, *body, c, d = range(<span class="number">5</span>) <span class="comment"># (0, [1, 2], 3, 4)</span></div><div class="line">*head, b, c, d = range(<span class="number">5</span>) <span class="comment"># ([0, 1], 2, 3, 4)</span></div></pre></td></tr></table></figure>
</li>
<li><p>namedtuple</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">City = namedtuple(<span class="string">'City'</span>, <span class="string">'name country population coordinates'</span>)</div><div class="line">tokyo = City(<span class="string">'Tokyo'</span>, <span class="string">'JP'</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>))</div><div class="line">tokyo.population</div><div class="line">tokyo.coordinates</div><div class="line">tokyo[<span class="number">1</span>]</div><div class="line">City._fields <span class="comment"># tuple</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Slicing"><a href="#Slicing" class="headerlink" title="Slicing"></a>Slicing</h4><p>为何 Slice 和 Range 会排除 最后一个 Item?</p>
<p>书中讲的太复杂，其实这个和尺子是一个作用，尺子从 0 刻度开始，这样方便丈量。</p>
<p>比如说：</p>
<ul>
<li>items[0:10] 为 10 厘米</li>
<li>items[10] 为 10 刻度后一个单位，即 items[10:11]</li>
<li>items[2:] 为 2 刻度后面若干个单位</li>
<li>items[::3] 以三为单位，从 0 刻度开始，最后为结尾，每三个</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a[i, j] # 调用 a.__getitem__((i, j))</div></pre></td></tr></table></figure>
<h4 id="Augmented-Assignment-with-Sequences"><a href="#Augmented-Assignment-with-Sequences" class="headerlink" title="Augmented Assignment with Sequences"></a>Augmented Assignment with Sequences</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">对于不可变类型 赋值 l *= <span class="number">2</span> 在内存中则是创建了新的两个长度的元祖，然后赋值</div><div class="line">而由于字符串则需要注意，str_a += <span class="string">"str b"</span> , 虽然为不可变变量，但并不需要拷贝整个字符串（特殊情况）, 但字符串的拼接建议还是<span class="string">""</span>.join()</div><div class="line"></div><div class="line">t = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</div><div class="line">t[<span class="number">2</span>] += [<span class="number">50</span>, <span class="number">60</span>]</div><div class="line"><span class="comment"># 结果为既赋值成功，又报错</span></div><div class="line"><span class="comment"># 但 t[2].extend([50, 60]) 可以赋值成功</span></div><div class="line"><span class="keyword">import</span> dis</div><div class="line">dis.dis(<span class="string">'s[a] += b'</span>) <span class="comment"># 可以查看字节码</span></div></pre></td></tr></table></figure>
<ol>
<li>尽量不要在不可变变量内保存可变变量</li>
<li>t[2] += [50,60] 并不是原子操作，因为，当做了一半的时候，抛出的错误。</li>
</ol>
<h4 id="list-sort-and-the-sorted-Built-In-Function"><a href="#list-sort-and-the-sorted-Built-In-Function" class="headerlink" title="list.sort and the sorted Built-In Function"></a>list.sort and the sorted Built-In Function</h4><p>对于 sort 和 sorted 来说，reverse 代表 desc,key 为单参数用于计算每一个值的结果的函数。<br>list.sort 直接针对列表排序，并且返回 None（出于编程习惯的问题，直接返回 None 的函数大多是对程序有一定的修改）</p>
<h4 id="Managing-Ordered-Sequences-with-bisect"><a href="#Managing-Ordered-Sequences-with-bisect" class="headerlink" title="Managing Ordered Sequences with bisect"></a>Managing Ordered Sequences with bisect</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import bisect</div><div class="line">bisect -&gt; bisect_right</div><div class="line">bisect_left</div><div class="line">insort -&gt; insort_left</div><div class="line">insort_right</div><div class="line"># 搜索可以用来划分档次</div><div class="line">def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):</div><div class="line">    i = bisect.bisect(breakpoints, score)</div><div class="line">    return grades[i]</div><div class="line"></div><div class="line">[grade(score) for score in [33, 99, 77, 70, 89, 90, 100]] # ['F', 'A', 'C', 'C', 'B', 'A', 'A']</div></pre></td></tr></table></figure>
<h4 id="When-a-List-Is-Not-the-Answer"><a href="#When-a-List-Is-Not-the-Answer" class="headerlink" title="When a List Is Not the Answer"></a>When a List Is Not the Answer</h4><p>list 是一种 mix-typed 的数据结构，即可以存放不同种类型的数据结构，由此带来的问题自然是性能问题：</p>
<ul>
<li>list 第一是 mix-typed 的数据结构</li>
<li>动态数组，并非数组</li>
</ul>
<p>当考虑性能的时候，则需要考虑是不是要换一个更好的数据结构：</p>
<ul>
<li>适用于类型单一的 array</li>
<li>增删比较多，或者需要使用 FIFO,LIFO, 则使用 deque (double-ended queue)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Arrays</span></div><div class="line">floats = array(<span class="string">'d'</span>, (random() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>**<span class="number">7</span>)))</div><div class="line"><span class="comment"># NumPy and SciPy</span></div><div class="line"></div><div class="line"><span class="comment"># Deques and Other Queue</span></div></pre></td></tr></table></figure>
<h4 id="Deques-and-Other-Queue"><a href="#Deques-and-Other-Queue" class="headerlink" title="Deques and Other Queue"></a>Deques and Other Queue</h4><ul>
<li>Deque</li>
<li>queue 线程安全 Queue, LifoQueue, and PriorityQueue</li>
<li>multiprocessing Queue 和 JoinableQueue</li>
<li>asyncio Queue, LifoQueue, PriorityQueue, and JoinableQueue</li>
</ul>
<h3 id="C03-Dictionaries-and-Sets"><a href="#C03-Dictionaries-and-Sets" class="headerlink" title="C03. Dictionaries and Sets"></a>C03. Dictionaries and Sets</h3><p>本章内容：</p>
<ul>
<li>Common dictionary methods</li>
<li>Special handling for missing keys</li>
<li>Variations of dict in the standard library</li>
<li>The set and frozenset types</li>
<li>How hash tables work</li>
<li>Implications of hash tables (key type limitations, unpredictable ordering, etc.)</li>
</ul>
<h5 id="Generic-Mapping-Types"><a href="#Generic-Mapping-Types" class="headerlink" title="Generic Mapping Types"></a>Generic Mapping Types</h5><p>Hashable ?  一个 obj 的 hash value 在他生命周期内 hash value 是不变的。一个 frozen set 也是 hashable 的（包括每个子元素）.</p>
<blockquote>
<p>All of Python’s immutable built-in objects are hashable , except that tuple<br>如果一个 tuple 是每个子元素都是 hashable 的话，则该 tuple 也是 hashable 的。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 直接在 dict 上面进行操作</span></div><div class="line">index.setdefault(word, []).append(location)</div></pre></td></tr></table></figure>
<h5 id="missing-方法"><a href="#missing-方法" class="headerlink" title="missing 方法"></a>missing 方法</h5><p>keyerror 会触发 missing 方法</p>
<h5 id="Variations-of-Dict"><a href="#Variations-of-Dict" class="headerlink" title="Variations of Dict"></a>Variations of Dict</h5><p>OrderedDict - 有序字典<br>ChainMap - 组装多个字典，按照次序搜索<br>Counter - COUNTER</p>
<h5 id="Immutable-Mappings"><a href="#Immutable-Mappings" class="headerlink" title="Immutable Mappings"></a>Immutable Mappings</h5><h5 id="Set-Theory"><a href="#Set-Theory" class="headerlink" title="Set Theory"></a>Set Theory</h5><p>交差并补</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 1. 交集</div><div class="line">s &amp; z</div><div class="line">z &amp; s</div><div class="line">s &amp;= z</div><div class="line"># 2. 差集</div><div class="line">s - z</div><div class="line">z - s</div><div class="line">s -= z</div><div class="line"># 3. 并集</div><div class="line">s | z</div><div class="line">z | s</div><div class="line">s |= z</div><div class="line"># 4. 补集</div><div class="line">s ^ z</div><div class="line">z ^ s</div><div class="line">s ^= z</div><div class="line"></div><div class="line"># 被包含</div><div class="line">e in z</div><div class="line"></div><div class="line"># 子集</div><div class="line">s &lt;= z</div><div class="line">s =&gt; z</div></pre></td></tr></table></figure>
<h5 id="Dict-and-Set-Under-the-Hood"><a href="#Dict-and-Set-Under-the-Hood" class="headerlink" title="Dict and Set Under the Hood"></a>Dict and Set Under the Hood</h5><h3 id="C04-Text-VS-Bytes"><a href="#C04-Text-VS-Bytes" class="headerlink" title="C04. Text VS Bytes"></a>C04. Text VS Bytes</h3><pre><code>- Character Issues
- Byte Essentials
- Basic Encoders/Decoders
- Understanding Encode/Decode Problems
- Handling Text Files
- Normalizng Unicode for Saner Comparisons
- Sorting Unicode Text
- The Unicode Database
- Dual-Mode str and bytes APIs
- Summary
- Further Reading
</code></pre><h2 id="P3-Function-as-Objects"><a href="#P3-Function-as-Objects" class="headerlink" title="P3. Function as Objects"></a>P3. Function as Objects</h2><p>function is the first-class object</p>
<p>Higher-Order Functions</p>
<ul>
<li>设计模式</li>
<li>装饰器</li>
<li>callables</li>
<li>function attributes</li>
<li>introspection</li>
<li>parameter annotations</li>
<li><p>nonlocal declaration</p>
</li>
<li><p>references, mutability, 实例生命周期，定制自己集合类 collections and ABCs, 多继承，重载操作符。</p>
</li>
<li><p>生成器</p>
</li>
<li>上下文管理器</li>
<li>协程 （包括 Yield)</li>
<li>concurrency</li>
<li><p>event-oriented IO asyncio</p>
</li>
<li><p>动态创建类</p>
</li>
<li>descriptors</li>
<li>class decorators</li>
<li>metaclasses</li>
</ul>
<h3 id="C05-First-Class-Function"><a href="#C05-First-Class-Function" class="headerlink" title="C05. First-Class Function"></a>C05. First-Class Function</h3><pre><code>- Treating a Function Like an Object
- Higher-Order Functions
- Anonymous Functions
- The Seven Flavors of Callable Objects
- User-Defined Callable Types
- Function Introspection
- From Positional to Keyword-Only Parameters
- Function Annotations
- Packages for Functional Programming
- Summary
- Further Reading
</code></pre><h3 id="C06-Design-Patterns-with-First-Class-Functions"><a href="#C06-Design-Patterns-with-First-Class-Functions" class="headerlink" title="C06. Design Patterns with First-Class Functions"></a>C06. Design Patterns with First-Class Functions</h3><pre><code>- Refactoring Strategy
- Command
- Summary
- Further Reading
</code></pre><h3 id="C07-Function-Decorators-and-Closures"><a href="#C07-Function-Decorators-and-Closures" class="headerlink" title="C07. Function Decorators and Closures"></a>C07. Function Decorators and Closures</h3><pre><code>- Decorators 101
- When Python Executes Decorators
- Decorator-Enhanced Strategy Pattern
- Variable Scope Rules
- Closures
- The nonlocal Declaration
- Implementing a Simple Decorator
- Decorators In the Standard Library
- Stacked Decorators
- Parameterized Decorators
- Summary
- Further Reading
</code></pre><h2 id="P4-Object-Oriented-Idioms"><a href="#P4-Object-Oriented-Idioms" class="headerlink" title="P4. Object-Oriented Idioms"></a>P4. Object-Oriented Idioms</h2><h3 id="C08-Object-References-Mutability-and-Recycling"><a href="#C08-Object-References-Mutability-and-Recycling" class="headerlink" title="C08. Object References, Mutability, and Recycling"></a>C08. Object References, Mutability, and Recycling</h3><p>reference variable : variable 不是盒子，贴在盒子上的标签。</p>
<p>赋值并非创建 Copy<br>赋值给一个值并非改变之前绑定的值，而仅仅是重新绑定 rebinding<br>函数由于参数为 reference, 所以可以修改 mutable 的变量<br>函数参数不应当初始化为可修改的值。</p>
<p>id 与 == : 内存值 和 值相等<br>copy 默认是浅拷贝<br>函数参数是引用<br>GC 使用的引用计数，通过 weakref.finalize 可以增加 obj 被回收的回调函数<br>强引用和弱引用，weakref 具体使用场景？ <a href="https://pymotw.com/3/weakref/" target="_blank" rel="external">https://pymotw.com/3/weakref/</a><br>One example is a class that wants to keep track of all its current instances. This can be done with weak references, a low-level mechanism underlying the more useful collections WeakValueDictionary, WeakKey Dictionary, WeakSet, and the finalize function from the weakref module.<br>公用字符串字面量和小的数的技巧叫做 interning</p>
<p>PS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在 IPython 中 _ 为某个表达式返回的值</div></pre></td></tr></table></figure></p>
<pre><code>- Weak References
- Tricts Python Plays with Immutables
- Summary
- Further Reading
</code></pre><h3 id="C09-A-Pythonic-Object"><a href="#C09-A-Pythonic-Object" class="headerlink" title="C09. A Pythonic Object"></a>C09. A Pythonic Object</h3><pre><code>- Object Representations
- Vector Class Redux
- An Alternative Constructor
- classmethod VS staticmethod
- Formatted Displays
- A Hashable Vector2d
- Private and &quot;Protected&quot; Attributes in Python
- Saving Space with the slots Class Attribute
- Overriding Class Attributes
- Summary
- Further Reading
</code></pre><h3 id="C10-Sequence-Hacking-Hashing-and-Slicing"><a href="#C10-Sequence-Hacking-Hashing-and-Slicing" class="headerlink" title="C10. Sequence Hacking , Hashing , and Slicing"></a>C10. Sequence Hacking , Hashing , and Slicing</h3><pre><code>- Vector: A User-Defined Sequence Type
- Vector Take #1: Vector2d Compatible
- Protocols and Duck Typing
- Vector Take #2: A Sliceable Sequence
- Vector Take #3: Dynamic Attribute Access
- Vector Take #4: Hashing and a Faster ==
- Vector Take #5: Formatting
- Summary
- Further Reading
</code></pre><h3 id="C11-Interfaces-From-Protocols-to-ABCs"><a href="#C11-Interfaces-From-Protocols-to-ABCs" class="headerlink" title="C11. Interfaces: From Protocols to ABCs"></a>C11. Interfaces: From Protocols to ABCs</h3><pre><code>- Interfaces and Protocols in Python Culture
- Python Digs Sequences
- Monkey-Patching to Implement a Protocol at Runtime
- Alex Martelli&apos;s Waterfowl
- Subclassing an ABC
- ABCs in the Standard Library
- Defining and Using an ABC
- How the Tombola Subclasses Were Tested
- Usage of register in Practice
- Geese Can Behave as Ducks
- Chapter Summary
- Further Reading
</code></pre><h3 id="C12-Inheritance-For-Good-or-For-Worse"><a href="#C12-Inheritance-For-Good-or-For-Worse" class="headerlink" title="C12. Inheritance: For Good or For Worse"></a>C12. Inheritance: For Good or For Worse</h3><pre><code>- Subclassing Built-In Types Is Tricty
- Multiple Inheritance and Method Resolution Order
- Multiple Inheritance in the Real World
- Coping with Multiple Inheritance
- A Modern Example: Mixins in Django Generic Views
- Chapter Summary
- Further Reading
</code></pre><h3 id="C13-Operator-Overloading-Doing-It-Right"><a href="#C13-Operator-Overloading-Doing-It-Right" class="headerlink" title="C13. Operator Overloading: Doing It Right"></a>C13. Operator Overloading: Doing It Right</h3><pre><code>- Operator Overloading 101
- Unary Operators
- Overloading plus for Verctor Addtion
- Overloading star for Scalar Multiplication
- Rich Comparison Operators
- Augmented Assignment Operator
- Chapter Summary
- Further Reading
</code></pre><h2 id="P5-Control-Flow"><a href="#P5-Control-Flow" class="headerlink" title="P5. Control Flow"></a>P5. Control Flow</h2><h3 id="C14-Iterables-Iterators-and-Generators"><a href="#C14-Iterables-Iterators-and-Generators" class="headerlink" title="C14. Iterables, Iterators , and Generators"></a>C14. Iterables, Iterators , and Generators</h3><pre><code>- Sentence Take #1 : A Sequence of Words Iterables VS Iterators
- Iterables Versus Itertors
- Sentence Take #2 : A Classic Iterator
- Sentence Take #3 : A Generator Function
- Sentence Take #4 : A Lazy Implementation
- Sentence Take #5 : A Generator Expression
- Generator Expressions : When to Use Them
- Another Example : Arithmetic Progression Generator
- Generator Functions in the Standard Library
- New Syntax In Python 3.3 : yield from
- Iterable Reducing Functions
- A Closer Look at the iter Function
- Case Study : Generators in a Databse Conversion Utility
- Generators as Coroutines
- Chapter Summary
- Further Reading
</code></pre><h3 id="C15-Context-Managers-and-else-Blocks"><a href="#C15-Context-Managers-and-else-Blocks" class="headerlink" title="C15. Context Managers and else Blocks"></a>C15. Context Managers and else Blocks</h3><pre><code>- Do This , Then That: else Blocks Beyond if
- Context Managers and with Blocks
- The contextlib Utilities
- Using @contextmanager
- Chapter Summary
- Further Reading
</code></pre><h3 id="C16-Coroutines"><a href="#C16-Coroutines" class="headerlink" title="C16. Coroutines"></a>C16. Coroutines</h3><pre><code>- How Coroutines Evolved from Generators
- Basic Behavior of a Generator Used as a Coroutine
- Example: Coroutine to Compute a Running Average
- Decorators for Conroutine Priming
- Coroutine Termination and Exception Handing
- Returning a Value from a Coroutine
- Using Yield from
- The Meaning of yield from
- Use Case: Coroutines for Discrete Event Simulation
- Chapter Summary
- Further Reading
</code></pre><h3 id="C17-Concurrency-with-Futures"><a href="#C17-Concurrency-with-Futures" class="headerlink" title="C17. Concurrency with Futures"></a>C17. Concurrency with Futures</h3><pre><code>- e.g. Web Downloads in Three Styles
- Blocking I/O and the GIL
- Launching Processes with concurrent.futures
- Experimenting with Executor.map
- Downloads with Progress Display and Error Handling
- Chapter Summary
- Further Reading
</code></pre><h3 id="C18-Concurrency-with-asyncio"><a href="#C18-Concurrency-with-asyncio" class="headerlink" title="C18. Concurrency with asyncio"></a>C18. Concurrency with asyncio</h3><pre><code>- Thread VS Coroutine : A Comparison
- Downloading with asyncio and aiohttp
- Running Circling Around Blocking Calls
- Enhancing the asyncio downloader Script
- From Callbacks to Futures and Coroutines
- Writing asyncio Servers
- Chapter Summary
- Further Reading
</code></pre><h2 id="P6-Metaprogramming"><a href="#P6-Metaprogramming" class="headerlink" title="P6. Metaprogramming"></a>P6. Metaprogramming</h2><h3 id="C19-Dynamic-Attributes-and-Properties"><a href="#C19-Dynamic-Attributes-and-Properties" class="headerlink" title="C19. Dynamic Attributes and Properties"></a>C19. Dynamic Attributes and Properties</h3><pre><code>- Data Wrangling with Dynamic Attributes
- Using a Property for Attribute Validation
- A Proper Look at Properties
- Coding a Property Factory
- Handling Attribute Deletion
- Essential Attributes and Functions For Attribute Handling
- Chapter Summary
- Further Reading
</code></pre><h3 id="C20-Attribute-Descriptors"><a href="#C20-Attribute-Descriptors" class="headerlink" title="C20. Attribute Descriptors"></a>C20. Attribute Descriptors</h3><pre><code>- Desciptor Example: Attribute Validation
- Overriding VS Nonoverriding Descriptors
- Methods Are Descriptors
- Descriptor Usage Tips
- Descriptor docstring and Overriding Deletion
- Chapter Summary
- Further Reading
</code></pre><h3 id="C21-Class-Metaprogramming"><a href="#C21-Class-Metaprogramming" class="headerlink" title="C21. Class Metaprogramming"></a>C21. Class Metaprogramming</h3><pre><code>- A Class Factory
- A Class Decorator for Customizing Descriptors
- What Happens When: Import Time VS Runtime
- Metaclasses 101
- A Metaclass for Customizing Descriptors
- The Metaclass prepare Special Method
- Classes as Objects
- Chapter Summary
- Further Reading
</code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="https://docs.python.org/3/reference/datamodel.html" target="_blank" rel="external">https://docs.python.org/3/reference/datamodel.html</a></li>
<li>Python Cookbook</li>
<li>Python Essential Reference, 4th Edition</li>
<li>The Art of the Metaobject Protocol</li>
</ul>
<p>UPDATE:</p>
<table>
<thead>
<tr>
<th>日期</th>
<th>类型</th>
<th>详细操作</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>2017-04-18</strong></td>
<td>动笔</td>
<td>初始化本文结构</td>
</tr>
<tr>
<td><strong>2017-04-26</strong></td>
<td>重构</td>
<td>添加目录和阅读笔记</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Fluent Python 适用于中级 Pythoner。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以 Python 作为主力编程语言已经 1 年多了，读这本书，希望写的代码可以更加的 Pythonic。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="写在人生的边上" scheme="http://twocucao.xyz/categories/%E5%86%99%E5%9C%A8%E4%BA%BA%E7%94%9F%E7%9A%84%E8%BE%B9%E4%B8%8A/"/>
    
    
      <category term="碎碎念" scheme="http://twocucao.xyz/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="书单与简评" scheme="http://twocucao.xyz/tags/%E4%B9%A6%E5%8D%95%E4%B8%8E%E7%AE%80%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>Full Stack Django DevOps Cheatsheet</title>
    <link href="http://twocucao.xyz/2017/04/06/FullStackDjangoDevOpsCheatsheet/"/>
    <id>http://twocucao.xyz/2017/04/06/FullStackDjangoDevOpsCheatsheet/</id>
    <published>2017-04-06T12:29:00.000Z</published>
    <updated>2017-11-18T05:25:16.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Django 全栈开发 的一些小经验和踩坑记录。本文没有安装和常识性配置的介绍，仅仅是一笔带过项目中遇到的一些点点滴滴的小问题。算是踩坑和心得笔记吧。</p>
<p>不仅仅是 Django, 还有 Django 涉及到的：</p>
<ul>
<li>组件：PostgreSQL,RabbitMQ,Redis,MongoDB,Ngnix</li>
<li>技术：爬虫技术，数据库设计，GIS 记录，单页 / 多页 (VueJS+Webpack+DjangoRestFramework), 自动化部署</li>
<li>轮子：Django 紧密关联的可以极大推进项目开发的轮子</li>
</ul>
<a id="more"></a>
<p>于是，本文的内容就如下：</p>
<ul>
<li>前后端分离</li>
<li>自动化部署</li>
<li>数据库相关</li>
<li>其他踩坑经历</li>
</ul>
<!-- more -->
<h2 id="0x01-前后端分离"><a href="#0x01-前后端分离" class="headerlink" title="0x01. 前后端分离"></a>0x01. 前后端分离</h2><p>前后端分离是提高团队开发的一个重要的开发策略，前后端分离之后，后端和前端交流好 JSON 格式，并行开发，局域网中放置一台服务器，后端写好一个功能，推送代码，由 gitlab 触发 Runner 自动交付到局域网的服务器上。这样的话，前后端可以并行开发，从而摆脱每一次开发过程不可避免，前端编写模板，然后由后端套用模板，出了问题，前端修改模板，后端接着修改模板… 循环往复，不曾更改的问题，在这种职责分明的情况下也不会出现背锅侠的问题。</p>
<p>在往常的开发过程中，而如果 Ajax 比较多或者前端写的代码质量稍微低一些，那么倒霉的事情就发生了，后端和前端的沟通成本那是相当的高。推锅的事情也会发生。</p>
<p>而新的开发过程中，如果上级有界面上的需求，基本上只需要前端更新一下代码，推送，就可以立即看到效果。<br>同样的，后端也是如此。</p>
<blockquote>
<p>这就是我选择前后端分离的初衷 – 将主要的精力放在开发上面。而不是套用模板和编辑 Ajax 过程中带来的沟通问题。</p>
</blockquote>
<p>在前后端配合上：</p>
<ul>
<li>后端选择 Django,Restful 框架选择了 DjangoRestFramework, DRF 的优点在于可以自动生成 API 界面，让前端对照着表单进行请求接口的测试。于是局域网的那一台可以配置为 Debug 模式，生产机器就可以关闭 DEBUG 模式。</li>
<li>前端选择 VueJS, 选择这个小而精美的框架一方面是基于团队的开发水平考虑，如果使用太激进的框架 React, 可能遇到问题无法在短时间内解决。由于选用了 VueJS, 也就选用了 Vue 全家桶，通过 Webpack2 进行配置完成基本的打包任务，通过 config 读取环境变量进行生产环境和发布环境的 apiurl 的分离</li>
<li>代码提交选择 Coding.NET 用于提交代码，在局域网中选择 Gitlab 用于提交代码，配上 Gitlab CI 进行持续集成，每次提交代码直接直接构建本地发布。前后端合作亲密无间。</li>
</ul>
<p>前后端分离有什么缺点呢？</p>
<ol>
<li>必须强行升级 Https</li>
<li>开发时候需要关掉 Django 的同源策略</li>
<li>IE8– 不兼容</li>
</ol>
<h3 id="1-1-Django-和-他的小伙伴们"><a href="#1-1-Django-和-他的小伙伴们" class="headerlink" title="1.1. Django 和 他的小伙伴们"></a>1.1. Django 和 他的小伙伴们</h3><p>Django 适用于快速开发，对于创业公司来说，是不错的快速开发语言。</p>
<p>不仅仅是因为 Python 表达力比较强，更重要的是 Django 有很多高质量的包可以使用。</p>
<ul>
<li>Django Debug Toolbar</li>
<li>DjangoRestFramework</li>
<li>Django Extensions</li>
</ul>
<h3 id="1-4-Django-的奇技淫巧"><a href="#1-4-Django-的奇技淫巧" class="headerlink" title="1.4. Django 的奇技淫巧"></a>1.4. Django 的奇技淫巧</h3><h4 id="Django-Model"><a href="#Django-Model" class="headerlink" title="Django Model"></a>Django Model</h4><ul>
<li><a href="http://stackoverflow.com/questions/1355150/django-when-saving-how-can-you-check-if-a-field-has-changed" target="_blank" rel="external">Save If Changed</a></li>
</ul>
<h2 id="0x02-自动化部署"><a href="#0x02-自动化部署" class="headerlink" title="0x02. 自动化部署"></a>0x02. 自动化部署</h2><p>写程序 一般就是开发测试部署。</p>
<p>话虽然这么时候，但是在具体的实践过程中，还是有很多很多坑需要注意的。</p>
<p>比如，仅仅就开发环节来说，团队协作怎么搞？你说可以用 GIT 作为版本管理工具，代码托管。那我问你，这个 Web 开发过程中前端开发模板，后端套用模板怎么搞？你说，前后端分离，那前后端分离后 Http 请求被劫持怎么办，跨站攻击怎么搞……<br>甚至如果是一个人开发的话，直接拉一台服务器做做部署，定期更新到网站上就行了。但如果是团队协作呢？前端提交了代码，产品经理过来说，你更新一下服务器，后端提交了代码，前端过来说，你更新一下服务器，过程琐碎而耗时。大量的时间就浪费在了这种枯燥的事情上了。两个后端，一个前端的情况下，每天本地发布（交付）的次数就已经是相当惊人（大概是前后端每天提交 5 次左右），如果以后是 3 个后端，三个前端，那我作为主程，每天就写不了代码了，这种情况是断不能忍的。</p>
<p>这个时候，就需要想着把团队协作开发流程优化好：</p>
<p>在我刚开始进行开发的时候，使用 bash 配合 Ansible 在本地和上线的 Ubuntu 16.04 上面自动化能够自动化的大部分工作，程序员在本地开发的时候，只需要进行开发，然后推送代码到 repo, 剩下的诸如自动化测试集成到系统中，则全部自动化。</p>
<h3 id="2-1-使用场景"><a href="#2-1-使用场景" class="headerlink" title="2.1. 使用场景"></a>2.1. 使用场景</h3><p>经过研究，我确定了理想中的使用场景：</p>
<blockquote>
<p>前端与后端提交代码到代码托管上面的时候，直接集成，构建，Stage 到服务器。</p>
<p>到上线的时候，由我执行 Ansible 进行上线。</p>
</blockquote>
<h3 id="2-2-实施方案"><a href="#2-2-实施方案" class="headerlink" title="2.2. 实施方案"></a>2.2. 实施方案</h3><p>在这个流程中，我需要安装如下的软件：</p>
<ul>
<li>Gitlab Gitlab-CI-Runner : 用于解决代码托管，项目的基本成长，以及持续化集成</li>
<li>PostgreSQL</li>
<li>MongoDB</li>
<li>Redis</li>
<li>RabbitMQ</li>
<li>Nginx</li>
<li>Python 以及 Python 扩展的依赖包</li>
<li>其他</li>
</ul>
<p>配置文件为 3 类：</p>
<ul>
<li>test</li>
<li>stage</li>
<li>production</li>
</ul>
<p>硬件设备 3 台：</p>
<ol>
<li>第一台为 Gitlab 部署的软件</li>
<li>第二台为 Stage 环境 （本地局域网持续交付）的机器</li>
<li>第三台为 Server （阿里云） 机器</li>
</ol>
<blockquote>
<p>注：最初使用 Ubuntu 机器，最终确定使用 Docker 镜像进行构建</p>
</blockquote>
<h3 id="2-3-持续交付"><a href="#2-3-持续交付" class="headerlink" title="2.3. 持续交付"></a>2.3. 持续交付</h3><p>当前端工程师 Push Master 分支到 Repo 上的时候，执行 Job 更新网站<br>当后端工程师 Push Master 分支到 Repo 上的时候，执行 Job 更新网站</p>
<p>Push Master 分支，这个自然无需多说，问题是怎么执行 Job 呢？</p>
<blockquote>
<p><strong>Gitlab CI Multi Runner</strong></p>
</blockquote>
<p>在一台 stage 的机器上安装 gitlab ci multi runner , 并且在该机器上注册 runner 为 shell , 这意味着 runner 会以 gitlab-runner 用户的权限进行测试 , 你需要 uninstall<br>然后 install –user=root 一下，然后重启，即可在 gitlab-ci.yml 上。</p>
<p>修改文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gitlab-runner register <span class="comment"># 然后填入相关信息</span></div><div class="line">vim /etc/gitlab-runner/config.toml <span class="comment"># 接着进行修改</span></div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">concurrent = 1</div><div class="line">check_interval = 0</div><div class="line"></div><div class="line">[[runners]]</div><div class="line">  name = <span class="string">"yadjangoweb"</span></div><div class="line">  url = <span class="string">"http://192.168.1.139/ci"</span></div><div class="line">  token = <span class="string">"325asd65f4e7xa9faasda8da"</span></div><div class="line">  executor = <span class="string">"shell"</span></div><div class="line">  [runners.cache]</div></pre></td></tr></table></figure>
<h3 id="2-4-Dockerize-Application"><a href="#2-4-Dockerize-Application" class="headerlink" title="2.4. Dockerize Application"></a>2.4. Dockerize Application</h3><p>Docker 以其轻量级和类似于版本管理的软件方式吸引了我。于是，准备将所有的 Service 都 Docker 化。</p>
<p>拿 Django 程序来说，首先 Django 程序依赖三个组件 redis / postgresql / rabbitmq , 完成这些组件的安装之后才能进行下一步的操作。</p>
<h2 id="0x03-数据库相关"><a href="#0x03-数据库相关" class="headerlink" title="0x03 数据库相关"></a>0x03 数据库相关</h2><h3 id="1-数据库设计"><a href="#1-数据库设计" class="headerlink" title="1. 数据库设计"></a>1. 数据库设计</h3><p>PostgreSQL Array 在爬虫方面可以用来标记一个 Record 的处理状态<br>PostgreSQL Range 用来判断范围也是一个比较高效的选择（用空间 gist 索引取代两个索引）</p>
<p>GeoDjango 和 PostGIS 非常配</p>
<h3 id="2-数据迁移"><a href="#2-数据迁移" class="headerlink" title="2. 数据迁移"></a>2. 数据迁移</h3><h4 id="1-1-第一次数据迁移之-MySQL-转-PostgreSQL"><a href="#1-1-第一次数据迁移之-MySQL-转-PostgreSQL" class="headerlink" title="1.1. 第一次数据迁移之 MySQL 转 PostgreSQL"></a>1.1. 第一次数据迁移之 MySQL 转 PostgreSQL</h4><p>第一次数据迁移的时候基于 PostgreSQL 社区里面有个大杀器，叫做 PostGIS, 通过 PostGIS, 可以很方便的拥有和国内一些地图公司匹敌的算法。抛开算法实现的效率问题，基本上可以满足日常的开发需求，当时数据量不算大，使用 mysqldump 下来也就 500M 左右，而且行数大约 700W 条，于是使用了一个很笨的方法，就是将数据库使用 Django 命令 dump 成 json, 接着修改配置重新导入新数据库。</p>
<p>这种方式的缺点就是效率低而且太吃内存了，当时 16G 的服务器满内存，满交换内存地搞了一个上午。</p>
<h4 id="1-2-第二次数据迁移之重新-makemigrations"><a href="#1-2-第二次数据迁移之重新-makemigrations" class="headerlink" title="1.2. 第二次数据迁移之重新 makemigrations"></a>1.2. 第二次数据迁移之重新 makemigrations</h4><p>为什么要重新 makemigrations 呢，因为糟糕的事情发生了。</p>
<p>有个需求，需要重新定制用户登录认证系统。用户登录认证系统是最最应该在项目开始的时候编写的，这就是项目的基石，这个需求就恰似在房子盖到第三层的时候突然要把地基给加固。</p>
<p>Django 中如果使用了 auth 模块，则 auth.user 是最先被迁移到数据库中的，而如果你经过权衡继承 AbstractUser 并且 makemigrations 生成个迁移文件 0001_initial.py 后，在正常的情况下不容易将 migration 修改应用到数据库中。</p>
<blockquote>
<p>如果我偏要勉强呢？</p>
</blockquote>
<p>当然是可以勉强的，删掉数据库中已经记录下来的 auth.user migration 的相关记录即可。</p>
<p>那我为什么还是需要重新编写 migration 呢？</p>
<ol>
<li>因为之前对数据库的结构调整比较频繁，多达 138 次，而在 138 次调整数据结构之后，再去撤销第一次数据表的迁移操作的时候，则无异于厨子做菜要把牛排做 8 分熟，但是厨子做到 7 分熟的时候，突然顾客说，我要 5 分熟的牛排。那只能重新来了。</li>
<li>顺手精简掉 138 个文件。</li>
</ol>
<p>如何做呢？</p>
<ol>
<li>数据的迁移在没有表与表之间的关联的时候是很好办的，CSV, 标准 SQL 文件。</li>
<li>有表关联的情况下则需要权衡数据量来进行迁移，假如数据量在 10 来个 G 的时候，读到内存中，按照数据表的依赖关系，自下而上逐层迁移即可。</li>
<li>数据量大的时候，则需要去约束，去索引，然后转 CSV/SQL, 迁移到数据表中。如果表依赖不复杂的话，直接 psql 命令重定向数据也可以。</li>
</ol>
<p>但是呢，由于使用了 Django, 在数据量不大的时候，完全可以使用 Django 的 ORM 来做迁移。</p>
<p>我在 Google 了一下，发现下面一个脚本，于是设置数据库为新数据库 default 和 depressed</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_migrate</span><span class="params">(model)</span>:</span></div><div class="line">    <span class="comment"># remove data from destination db before copying</span></div><div class="line">    <span class="comment"># to avoid primary key conflicts or mismatches</span></div><div class="line">    <span class="keyword">if</span> model.objects.using(<span class="string">'default'</span>).exists():</div><div class="line">        model.objects.using(<span class="string">'default'</span>).all().delete()</div><div class="line"></div><div class="line">    <span class="comment"># get data form the source database</span></div><div class="line">    items = model.objects.using(<span class="string">'depressed'</span>).order_by(<span class="string">"pk"</span>).all()</div><div class="line">    count = len(items)</div><div class="line">    <span class="comment"># process in chunks, to handle models with lots of data</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count, <span class="number">10000</span>):</div><div class="line">        chunk_items = items[i:i + <span class="number">10000</span>]</div><div class="line">        print(<span class="string">"已经迁移数据"</span>, i)</div><div class="line">        model.objects.using(<span class="string">'default'</span>).bulk_create(chunk_items)</div><div class="line"></div><div class="line">    <span class="comment"># many-to-many fields are NOT handled by bulk create; check for</span></div><div class="line">    <span class="comment"># them and use the existing implicit through models to copy them</span></div><div class="line">    <span class="keyword">for</span> m2mfield <span class="keyword">in</span> model._meta.many_to_many:</div><div class="line">        m2m_model = getattr(model, m2mfield.name).through</div><div class="line">        batch_migrate(m2m_model)</div></pre></td></tr></table></figure>
<p>按照表与表之间的依赖关系，逐个迁移到数据库中搞定。</p>
<h3 id="1-3-sequence-问题"><a href="#1-3-sequence-问题" class="headerlink" title="1.3 sequence 问题"></a>1.3 sequence 问题</h3><p>在写 Django 的时候发现的时候无论如何都无法保存新的 item.</p>
<p>原来的代码为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">item = Item.objects.get_or_create()</div><div class="line">item.foo = <span class="number">1</span></div><div class="line">item.save()</div></pre></td></tr></table></figure>
<p>报错信息是 Integrety, 报 duplicated 错误（下面的代码当然是打了马赛克了）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">django.db.utils.IntegrityError: duplicate key value violates unique constraint <span class="string">"foo_item_pkey"</span></div><div class="line">DETAIL:  Key (id)=(<span class="number">111111</span>) already exists.</div></pre></td></tr></table></figure>
<p>那么，问题来了：</p>
<blockquote>
<p><del>挖掘技术哪家强？</del></p>
</blockquote>
<p>啊，不是</p>
<blockquote>
<p>How To Solve This?</p>
</blockquote>
<p>经过猜测，而 get 到已有的 item 设置并且保存的话，并不会出现这个问题。问题主要出在 create 上面。</p>
<p>于是编写代码验证一下是不是猜想正确</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    item = Item.objects.get()</div><div class="line"><span class="keyword">except</span> Exception:</div><div class="line">    item = Item.objects.create()</div><div class="line"></div><div class="line"><span class="comment"># do something</span></div><div class="line"></div><div class="line">item.save()</div></pre></td></tr></table></figure>
<p>duplicate 的问题肯定是多次存同样的不能重复的字段。</p>
<p><strong>但尼玛，我之前做测试的时候考虑过这个逻辑呀？</strong>换而言之，这种问题不应该出现，如果出现了问题，八成是 ORM 用的不对。</p>
<p>印象中这种问题 Google 一下 Integrety Duplicate Django PostgreSQL 一般就能出来了。</p>
<p>最后找到解决方案：<a href="http://centoshowtos.org/web-services/django-and-postgres-duplicate-key/" target="_blank" rel="external">http://centoshowtos.org/web-services/django-and-postgres-duplicate-key/</a></p>
<p>在终端进入 psql 查询 sequence 最新值</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> start_value, <span class="keyword">last_value</span>, max_value <span class="keyword">from</span> dt_crawler_item_item_id_seq;</div><div class="line"></div><div class="line"> start_value | last_value |      max_value</div><div class="line"><span class="comment">-------------|------------|---------------------</span></div><div class="line">           1 |    111110 | 9223372036854775807</div></pre></td></tr></table></figure>
<p>而我们查看一下 item_id 的最大值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select max(item_id) from app_model_item;</div><div class="line"></div><div class="line">   max</div><div class="line">---------</div><div class="line"> 111111</div></pre></td></tr></table></figure>
<p>重置 sequence last_value 值到最新即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter sequence app_model_item_item_id_seq restart with 111111;</div></pre></td></tr></table></figure>
<blockquote>
<p>当数据库每次插入一条非指定主键的记录，则获取 last_value(111110), 加 1 得到当前的主键接着插入。但这个过程无异于数据库中已经有了一个 pk 为 111111 的记录，再插入一条。于是报错。</p>
</blockquote>
<p>回顾这个问题，该问题是由于 PostGres 的 sequence 造成 pkey 相等，换而言之，postgres 应该在有一个 pk 值为 111111 的时候，插入一个无主键的记录，PostgreSQL 获取 sequence+1(111110 + 1) 得到它认为当前的主键值，接着再一次插入了主键为 111111 的这个值。</p>
<p>这个过程相当于依次插入两个条 ID 相同的记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>(<span class="keyword">id</span>, column2, …) <span class="keyword">VALUES</span> (<span class="number">111111</span>, value2, …);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>(<span class="keyword">id</span>, column2, …) <span class="keyword">VALUES</span> (<span class="number">111111</span>, value2, …);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>sequence 避免了每一次 max 查找带来的性能损失，一方面带来了方便，也带来了隐藏的坑。</p>
</blockquote>
<p>如果以后这个问题比较多的话，参考下面的源码对文本进行修改。</p>
<p><a href="https://github.com/ASKBOT/django-postgresql-fix-sequences/blob/master/postgresql_sequence_utils/utils.py" target="_blank" rel="external">https://github.com/ASKBOT/django-postgresql-fix-sequences/blob/master/postgresql_sequence_utils/utils.py</a></p>
<h2 id="0x04-WebServer"><a href="#0x04-WebServer" class="headerlink" title="0x04 WebServer"></a>0x04 WebServer</h2><p>目前使用的 WebServer 是用 Nginx 做反向代理，将请求通过 unix socket 转发到 gunicorn，gunicorn 作为 django 实际上的 webserver。</p>
<h3 id="unix-socket-和-gunicorn-的-REMOTE-ADDR-问题"><a href="#unix-socket-和-gunicorn-的-REMOTE-ADDR-问题" class="headerlink" title="unix socket 和 gunicorn 的 REMOTE_ADDR 问题"></a>unix socket 和 gunicorn 的 REMOTE_ADDR 问题</h3><p>Django Admin 模块在访问 某个页面的时候特别特别慢，而在我的机器上一切正常，我怀疑的是数据库的问题，于是，那么首先要知道数据库的查询语句，于是想借用 django debug toolbar 来 profiling, 于是问题来了，我在局域网模拟真机环境，结果无论如何都无法呈现 Django Debug Toolbar,</p>
<p>问题八成出现在 Django 配置环境 或者 Nginx 上面（当然，最后发现是 Gunicorn 的锅）. 在</p>
<p>经过一段时间的排查，认为是 Nginx 的问题，在相关配置添加下面设置 Header,</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxy_set_header X-Forwarded-For $remote_addr;</div></pre></td></tr></table></figure>
<p>结果依旧无法获取 request.Meta[“REMOTE-ADDR”]</p>
<p>经过搜索发现不止我一个人的问题：<a href="https://github.com/benoitc/gunicorn/issues/797" target="_blank" rel="external">https://github.com/benoitc/gunicorn/issues/797</a></p>
<p>最后发现是 Http 请求从 nginx 这儿经过 unix socket 转发到 gunicorn.sock 下默认是没有赋值 REMOTE-ADDR 的，</p>
<p>那么，这个在 HTTP Header 层次的东西，没有在 gunicorn 层次解决，那就只能在 django 层次解决。</p>
<p>给 Django 添加中间件如下，放在 djangodebugtools 的前面。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XForwardedForMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="keyword">if</span> request.META.get(<span class="string">"HTTP_X_FORWARDED_FOR"</span>, <span class="keyword">False</span>):</div><div class="line">            request.META[<span class="string">"HTTP_X_PROXY_REMOTE_ADDR"</span>] = request.META[<span class="string">"REMOTE_ADDR"</span>]</div><div class="line">            parts = request.META[<span class="string">"HTTP_X_FORWARDED_FOR"</span>].split(<span class="string">","</span>, <span class="number">1</span>)</div><div class="line">            request.META[<span class="string">"REMOTE_ADDR"</span>] = parts[<span class="number">0</span>]</div></pre></td></tr></table></figure></p>
<p>解决。</p>
<h3 id="Nginx-Gzip-压缩"><a href="#Nginx-Gzip-压缩" class="headerlink" title="Nginx Gzip 压缩"></a>Nginx Gzip 压缩</h3><p>当 json 数据量比较大的时候，则必须要考虑开启压缩。一般情况下，虽然这个可以在 Django 层次完成，但是这么做还不如在 nginx 层次完成。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gzip on;</div><div class="line">gzip_disable <span class="string">"msie6"</span>;</div><div class="line">gzip_vary on;</div><div class="line">gzip_proxied any;</div><div class="line">gzip_comp_level <span class="number">6</span>;</div><div class="line">gzip_buffers <span class="number">16</span> <span class="number">8</span>k;</div><div class="line">gzip_http_version <span class="number">1.1</span>;</div><div class="line">gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</div></pre></td></tr></table></figure>
<p>开启之后，我这边的 一个 220k 的数据缩减到 54k</p>
<h2 id="0x04-其他踩坑相关"><a href="#0x04-其他踩坑相关" class="headerlink" title="0x04. 其他踩坑相关"></a>0x04. 其他踩坑相关</h2><h3 id="4-1-奇怪的文件问题"><a href="#4-1-奇怪的文件问题" class="headerlink" title="4.1 奇怪的文件问题"></a>4.1 奇怪的文件问题</h3><p>在某一天遇到了一个问题 往常的时候，当文件上传到 Django 中的时候，都可以正常的解析，但是这两天居然不能用了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 问题代码出现在</span></div><div class="line">df = pd.read_excel(file_obj)</div><div class="line"><span class="comment"># 报这个问题 google 几乎没有什么解决方案</span></div><div class="line">Invalid file path <span class="keyword">or</span> buffer object type</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">django</span>.<span class="title">core</span>.<span class="title">files</span>.<span class="title">uploadedfile</span>.<span class="title">InMemoryUploadedFile</span>'&gt;</span></div></pre></td></tr></table></figure>
<p>更加糟糕的问题出现了，我本人的开发环境和服务器的开发环境基本一致，但，但，但为什么不能用呢？</p>
<p>分别回滚代码，Nginx 设置，在线上打 Log, 最终确定了是 Pandas 从 0.19 升级到了 0.20 之后出现的一个小问题。最终还原线上 python 安装环境，搞定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Django 全栈开发 的一些小经验和踩坑记录。本文没有安装和常识性配置的介绍，仅仅是一笔带过项目中遇到的一些点点滴滴的小问题。算是踩坑和心得笔记吧。&lt;/p&gt;
&lt;p&gt;不仅仅是 Django, 还有 Django 涉及到的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组件：PostgreSQL,RabbitMQ,Redis,MongoDB,Ngnix&lt;/li&gt;
&lt;li&gt;技术：爬虫技术，数据库设计，GIS 记录，单页 / 多页 (VueJS+Webpack+DjangoRestFramework), 自动化部署&lt;/li&gt;
&lt;li&gt;轮子：Django 紧密关联的可以极大推进项目开发的轮子&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Django" scheme="http://twocucao.xyz/categories/Django/"/>
    
    
      <category term="Pandas" scheme="http://twocucao.xyz/tags/Pandas/"/>
    
      <category term="效率" scheme="http://twocucao.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="工作自动化" scheme="http://twocucao.xyz/tags/%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
  </entry>
  
  <entry>
    <title>Thinking In Python Language</title>
    <link href="http://twocucao.xyz/2017/03/21/ThinkingInPython/"/>
    <id>http://twocucao.xyz/2017/03/21/ThinkingInPython/</id>
    <published>2017-03-21T12:05:00.000Z</published>
    <updated>2017-07-04T04:39:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文的内容都是一些简略的笔记。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍这个过程中结合自己的开发常见场景记录下来的一些笔记。</p>
<a id="more"></a>
<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><h3 id="1-为什么是-Python"><a href="#1-为什么是-Python" class="headerlink" title="1. 为什么是 Python"></a>1. 为什么是 Python</h3><p>选 Python, 很大程度上是因为 Python 的快速开发。</p>
<p>当然，快速开发（这里的开发包含部署）这个词也往往会被误解。什么叫做快速？我用一个 CMS 框架快速搭建出一个网站这是否叫做快速？</p>
<ul>
<li>每一次部署的时候，如果使用 Java 或者是 Go, 部署的时候直接 maven 编译打包，接着把 War 包直接上传到 Tomcat 就结束了。而用 Python 则需要各种虚拟环境，各种稀里哗啦的配置。这种情况下是哪一种快速呢？</li>
</ul>
<p>Python 有什么好处呢？</p>
<ul>
<li>写代码效率高</li>
<li>生态圈好</li>
</ul>
<p>写代码效率高，这指的是写 Python 代码，而不是运行时。</p>
<p>生态圈好，Web 开发用 Django/Flask , 数据抓取用 Requests , 数据分析清洗用 Pandas, 机器学习。</p>
<h3 id="2-工具链"><a href="#2-工具链" class="headerlink" title="2. 工具链"></a>2. 工具链</h3><h3 id="4-文档"><a href="#4-文档" class="headerlink" title="4. 文档"></a>4. 文档</h3><h3 id="5-社区"><a href="#5-社区" class="headerlink" title="5. 社区"></a>5. 社区</h3><h3 id="6-书籍"><a href="#6-书籍" class="headerlink" title="6. 书籍"></a>6. 书籍</h3><h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><blockquote>
<p> 程序 = 算法 + 数据结构</p>
</blockquote>
<p>这句话当然是不全面的，但并不影响这句话在计算机世界里面的地位。</p>
<p>依我看来，对我的启发大致是：</p>
<blockquote>
<p>我会把 API 的调用和数据结构以及算法想清楚，然后才动手把代码分解成伪代码。</p>
</blockquote>
<h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h3><p>数据类型按照不同的划分标准可以进行不同的划分：</p>
<p>按照复杂性可以这么划分：</p>
<ul>
<li>简单类型</li>
<li>复杂类型</li>
</ul>
<p>按照复杂性可以这么划分：</p>
<ul>
<li>基本类型</li>
<li>引用类型</li>
</ul>
<p>按照数据结构可以这么划分：</p>
<ul>
<li>集合结构 : 串</li>
<li>线性结构 : 线性表 （单链表，静态链表，循环链表，双向链表，<strong>栈，队列</strong>)</li>
<li>树形结构 : 树（二叉树，B+ 树，红黑树）</li>
<li>图形结构 : 图</li>
</ul>
<h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>对于一些基本的数据类型，操作为 加减乘除取余数位运算等等</p>
<p>对于复杂的一些数据类型，则需要对数据结构多一些了解。</p>
<p>比如，对队列而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对 hash 而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字典而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字符串而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？</p>
<p>那字符串来说，Java 推荐使用 StringBuilder 来合并多个字符串，Python 推荐 join 多个字符串等等。</p>
<h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><h3 id="3-语句"><a href="#3-语句" class="headerlink" title="3. 语句"></a>3. 语句</h3><h2 id="0x02-中级概念"><a href="#0x02-中级概念" class="headerlink" title="0x02 中级概念"></a>0x02 中级概念</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块，这个概念，可大可小，大的时候，把一个程序说成是模块，小的时候，可以把一个文件，甚至你说这一个函数是一个模块，也行。</p>
<p>这里的模块指的是一个包下的函数。</p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象有三大概念：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
<h3 id="错误-调试测试"><a href="#错误-调试测试" class="headerlink" title="错误 / 调试测试"></a>错误 / 调试测试</h3><p>异常处理实际上可以考验一个程序员编写代码的健壮性。</p>
<p>事实上来说，代码写的健壮是一个程序员必备的素养。但其实在开发过程中，出于对项目进行赶工上线，需要对程序的健壮性做出一定的取舍。并且，在编写客户端，服务端，网页前端的时候基本上都会遇到这个问题。什么时候选择健壮的程序，什么时候选择是还可以的程序。需要自己的经验。</p>
<h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><blockquote>
<p>Python 多线程约等于并发。</p>
</blockquote>
<h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><h4 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h4><p>Global Interpreter Lock</p>
<p>并不是所有的解释器语言都有 GIL （尽管 Python 和 Ruby 里面都有）, 也并不是没有尝试过去除 GIL, 但是每次去除都会导致单线程性能的下降。所以暂时保留。</p>
<p>GIL 对程序中的影响：</p>
<blockquote>
<p>一个线程运行 Python , 而其他 N 个睡眠或者等待 I/O - <strong>同一时刻只有一个线程对共享资源进行存取</strong> , Python 线程也可以等待 threading.Lock 或者线程模块中的其他同步对象；</p>
</blockquote>
<h5 id="协同式多任务处理"><a href="#协同式多任务处理" class="headerlink" title="协同式多任务处理"></a>协同式多任务处理</h5><p>如果有两个线程，同时进行 IO 请求，当其中一个线程连接之后，立即会<strong>主动让出 GIL</strong>, 其他线程就可以运行。</p>
<blockquote>
<p>当 N 个线程在网络 I/O 堵塞，或等待重新获取 GIL，而一个线程运行 Python。</p>
</blockquote>
<p>让出之后还要执行代码呀，所以要有个收回 GIL 的动作。</p>
<h5 id="抢占式多任务处理"><a href="#抢占式多任务处理" class="headerlink" title="抢占式多任务处理"></a>抢占式多任务处理</h5><p>Python 2 GIL , 尝试收回 GIL 为 执行 1000 字节码。<br>Python 3 GIL , 尝试收回 GIL 检测间隔为 15ms</p>
<h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>原子操作：sort 之类不需要<br>非原子操作：n=n+2 的字节码分为 加载 n , 加载 2 , 相加，存储 n, 四个步骤，由于不是原子性，很可能被由于 15 ms 而被打断。</p>
<p>当然，懒人一向是 : <strong>优先级不决加括号，线程不决加 lock</strong></p>
<p>对于 Java, 程序员努力在尽可能短的时间内加锁存取共享数据，减轻线程的争夺，实现最大并行。但 Python 中，线程无法并行运行，细粒度的锁就没有了优势。</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h2 id="0x03-高级技巧"><a href="#0x03-高级技巧" class="headerlink" title="0x03 高级技巧"></a>0x03 高级技巧</h2><h2 id="0x04-标准库"><a href="#0x04-标准库" class="headerlink" title="0x04 标准库"></a>0x04 标准库</h2><h3 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h3><h3 id="系统化模块"><a href="#系统化模块" class="headerlink" title="系统化模块"></a>系统化模块</h3><ol>
<li>Introduction</li>
<li>Built-in Functions</li>
<li>Built-in Constants</li>
<li>Built-in Types</li>
<li>Built-in Exceptions</li>
<li>Text Processing Services</li>
<li>Binary Data Services</li>
<li>Data Types</li>
<li>Numeric and Mathematical Modules</li>
<li>Functional Programming Modules</li>
<li>File and Directory Access</li>
<li>Data Persistence</li>
<li>Data Compression and Archiving</li>
<li>File Formats</li>
<li>Cryptographic Services</li>
<li>Generic Operating System Services</li>
<li>Concurrent Execution</li>
<li>Interprocess Communication and Networking</li>
<li>Internet Data Handling</li>
<li>Structured Markup Processing Tools</li>
<li>Internet Protocols and Support</li>
<li>Multimedia Services</li>
<li>Internationalization</li>
<li>Program Frameworks</li>
<li>Graphical User Interfaces with Tk</li>
<li>Development Tools</li>
<li>Debugging and Profiling</li>
<li>Software Packaging and Distribution</li>
<li>Python Runtime Services</li>
<li>Custom Python Interpreters</li>
<li>Importing Modules</li>
<li>Python Language Services</li>
<li>Miscellaneous Services</li>
<li>MS Windows Specific Services</li>
<li>Unix Specific Services</li>
<li>Superseded Modules</li>
<li>Undocumented Modules</li>
</ol>
<h2 id="0x05-第三方库"><a href="#0x05-第三方库" class="headerlink" title="0x05 第三方库"></a>0x05 第三方库</h2><ul>
<li>Requests : API 人性化</li>
</ul>
<h2 id="0x06-代码质量"><a href="#0x06-代码质量" class="headerlink" title="0x06 代码质量"></a>0x06 代码质量</h2><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><ul>
<li>外部<strong>不该</strong>引用 protected member （单下划线）</li>
<li>lambda 为一次使用，最好不要赋值。</li>
<li>不要给 buildin 函数赋值</li>
<li>py3 直接 super()</li>
<li>for in else 如果不内置 break 则出会在最后 for in 为 empty 的时候再执行 else 中的语句</li>
<li>context exit 如果不 catch 掉异常让其自然向上一级抛出错误的话，必须为 (self, exception_type, exception_value, traceback):</li>
<li>不要在 init 里面 return 数据</li>
<li>不要混用 tab 和 space</li>
<li>4 个 space 缩进</li>
<li>staticmethod 直接是 参数，classmethod 第一个参数为 cls</li>
<li>可变的 default value 是不能作为 参数的。（可能是解释器在确定函数的定义的时候完成赋值？)</li>
<li>遵循 exception hierachy <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" target="_blank" rel="external">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></li>
<li>defaultdict defaultdict(lambda : 6) , 必须 callable</li>
<li>尽量 unpack 赋值</li>
<li>字典用获取用 get(“myk”,None) , 赋值用 dictionary.setdefault(“list”, []).append(“list_item”)</li>
</ul>
<h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><ul>
<li>避免使用 import * , 我觉得这点值得商榷 , 如果是某个模块下，完全可以先把模块拆分成多个，最后 import 进来，接着使用 all.</li>
<li>getxxx 获取实际值，如果不为实际值，返回 None 显然不如 try catch 来的实在。</li>
<li>避免使用 global</li>
<li>命名要注意</li>
<li>动态创建方法 , 我觉得这点值得商榷。</li>
</ul>
<h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><ul>
<li>不要检查，如果可能有异常，尽量抛出异常来 trycatch 解决。</li>
<li>a is None , if flag</li>
<li>isinstance , not type(r) is types.ListType</li>
<li>“{name}{city}”.format(**info_dict)</li>
<li>for k , v in infodict.items()</li>
<li>使用 poiinfo = namedtuple(“poiinfo”,[“name”,”lng”,”lat”]) 返回 poiinfo[‘上海’,121.00,23] 最后返回值打印 poi.name , poi.lng , poi lat</li>
<li>for numbers_value, letters_value in zip(numbers, letters):</li>
<li>enumerate</li>
<li>如果能用 listcomp 则不使用 map 和 filter</li>
</ul>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ul>
<li>用 set</li>
<li>d.iteritems() 比 items() 省内存</li>
</ul>
<h2 id="0xEE-文章更新"><a href="#0xEE-文章更新" class="headerlink" title="0xEE 文章更新"></a>0xEE 文章更新</h2><ul>
<li><strong>2017-05-11 19:43:00</strong> : 增加代码质量模块</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文的内容都是一些简略的笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍这个过程中结合自己的开发常见场景记录下来的一些笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="学习资源" scheme="http://twocucao.xyz/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="编程工具" scheme="http://twocucao.xyz/tags/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Thinking In Programming Language</title>
    <link href="http://twocucao.xyz/2017/03/21/LearnProgrammingLanguage/"/>
    <id>http://twocucao.xyz/2017/03/21/LearnProgrammingLanguage/</id>
    <published>2017-03-21T12:05:00.000Z</published>
    <updated>2017-11-18T04:40:23.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何学习一门编程语言"><a href="#如何学习一门编程语言" class="headerlink" title="如何学习一门编程语言"></a>如何学习一门编程语言</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文的内容都是一些个人的比较虚的经验。泛泛而谈。</p>
<p>很多人得出一些结论，往往是样本就一个。比如说一个只用过 PHP 的人叫嚣 PHP 是最好的语言。</p>
<p>但即便是用过几种语言，得出的经验依然是片面的。</p>
<p>所以，我得出的结论，不完全是对的，至少是我个人的经验。</p>
<p>本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍之际。</p>
<h2 id="0x01-编程语言胡论"><a href="#0x01-编程语言胡论" class="headerlink" title="0x01 编程语言胡论"></a>0x01 编程语言胡论</h2><p>在我看来，一个人说他会且只精通一门编程语言是很让我不能理解的事情，在我看来，什么编程语言框架上手两三天就能去写，但是这严格意义上应该叫做能用，和精通相差甚远。那是不是说写的时间长的人经验就老道了呢？也不见得。下棋下了一辈子是烂棋篓子的人比比皆是。</p>
<p>那我认为什么样子的人才是懂写代码的人。</p>
<pre><code>拥有良好的组织代码的能力的人。
</code></pre><p>恩，组织代码的能力，一个文件排布混乱的人，不太可能写出整齐严谨的代码，当然，人也可能是复杂的，比如，这个人写的代码挺好，但是生活住处一团糟。</p>
<p>当然这是题外话了，依个人经验而言，学习任何一个复杂的系统，也需要像组织一个东西一样，系统性的学习。</p>
<p>系统化的东西往往像《如何阅读一本书》里面描述一本书的复杂架构那样。</p>
<pre><code>没有一种物质或产品是绝对简单的。所有的东西都是复杂的组合体。当你看一个整体组成复杂的东西的时候，如果只看它如何呈现一体的面貌，那是还没有掌握精髓，你还必须要明白它怎样呈现多个的面貌，但不是各自为政、互不相干的多个面貌，而是互相融合成有机体的多个面貌。如果组成的各个部分没有有机的关联，仅仅是一个集合体罢了。

这就像是一堆砖头跟一栋又砖头建造起来的房子是有区别的。而单一的房子与建造的房子也不相同。一本书就像是一栋单一的房子。一栋大厦，拥有许多房间，每层楼都有房间，有不同的尺寸和形状，不同的外观，不同的用途，这些房间是独立的，分离的，每个房间都有自己的架构和装潢设计，但却不是完全独立与分离的，这些房间使用普通门 / 拱门 / 走廊 / 楼梯串联起来的，即建筑师错位的动线架构，因为这些架构师彼此联结的，因此每一个部分在整体的使用功能上要贡献出自己的力量。否则这栋房子便是不适合居住的。
</code></pre><p>对于复杂的东西，系统内部的各个部分都是密切相关。</p>
<pre><code>先模块化，用一个快速的方式获得每个模块的全貌，接着不断分解模块为知识单元，最后连接各个子模块和知识单元
</code></pre><p>下面的内容就是我组织入手学习编程语言的思路。</p>
<h3 id="1-1-编程语言的独一无二性"><a href="#1-1-编程语言的独一无二性" class="headerlink" title="1.1 编程语言的独一无二性"></a>1.1 编程语言的独一无二性</h3><p>有的人认为所有的编程语言都是一样的，我不这么认为。</p>
<p>我觉得这种想法很初级，所有的编程语言都是有特点的，也是有优缺点的。</p>
<p>举一个我朋友的爱说的很粗俗的例子：</p>
<pre><code>虽然说关了灯全都一个样，但是每一个女孩子都有是独一无二的存在。
</code></pre><p>这个例子即便是我这种 23 年丰富单身经验的人，依然可以在第一时间捕捉到我这个段子手朋友的意思。</p>
<ul>
<li>有的偏向于运行效率，有的偏向于开发效率。</li>
<li>有的据说是让人编程时候感到快乐 (ruby)，有的说你生命苦短，为什么不用 Python。</li>
<li>有的偏向于 Web 开发 (PHP)，有的偏向于并发操作</li>
<li>有的是 Windows 上面自动化的小白工具 (Autohotkey)</li>
<li>有的是据说是一次编译，到处运行 (Java)</li>
</ul>
<p>编程语言往往是上面这些因素的取舍。</p>
<ul>
<li>你要运行效率，往往开发效率就会打折。</li>
<li>你要开发效率，往往就需要堆更多的机器来提升性能。</li>
<li>你要充分利用某个平台，往往就没有极高兼容性。</li>
<li>你要编程语言省心，往往编程语言就会自作聪明。</li>
</ul>
<h3 id="1-2-工具链"><a href="#1-2-工具链" class="headerlink" title="1.2 工具链"></a>1.2 工具链</h3><p>工欲善其事必先利其器，而这个器就是工具链。工具链大致有如下：</p>
<ul>
<li>Mac Homebrew</li>
<li>集成开发环境</li>
<li>编辑器</li>
<li>开发环境里面的 shell</li>
<li>cmake</li>
</ul>
<h3 id="1-3-文档"><a href="#1-3-文档" class="headerlink" title="1.3 文档"></a>1.3 文档</h3><p>官网的文档是最应该反复查看的东西，这是我现在依然喜欢强调的。</p>
<p>而官网的文档也分为四种</p>
<ul>
<li>一种是 tutorial      – 用于<strong>上手</strong>对应的软件 / 编程语言</li>
<li>一种是 guide         – 用于<strong> Topic Reading </strong></li>
<li>一种是 api document  – 用于<strong>查看细节</strong></li>
<li>一种是 RTFSC ( Read The Fucking Source Code ) 阅读源码</li>
</ul>
<blockquote>
<p>注：把 StackOverFlow 中某个标签的 Most Votes 的答案，是除了大略看看 tutorial 之外的另一种快速熟悉入门时候的痛点的手段。</p>
</blockquote>
<p>当然，其实代码写的足够好的话本身就是一种注释。</p>
<h3 id="1-4-社区"><a href="#1-4-社区" class="headerlink" title="1.4 社区"></a>1.4 社区</h3><p>社区一般情况下都会有的，但有几个网站特别值得提出来</p>
<ul>
<li>官网上一般都会放一些比较出色的社区</li>
<li>Github</li>
<li>reddit</li>
<li>某个技术对应的 Weekly 订阅</li>
</ul>
<h3 id="1-5-书籍"><a href="#1-5-书籍" class="headerlink" title="1.5 书籍"></a>1.5 书籍</h3><p>特别值得一提的是有一个持续不断阅读到有趣的文章的方法：</p>
<ol>
<li>Google 出对应的 书 / Weekly 周报 / 博客，比如 Python Weekly 然后订阅</li>
<li>接着不断的查看列入优质文章的作者的文章，Github 地址啦，他关注的 Repo 啦等等等等。</li>
<li>然后去阅读他的代码 / 博客。</li>
</ol>
<h2 id="0x02-基础概念"><a href="#0x02-基础概念" class="headerlink" title="0x02 基础概念"></a>0x02 基础概念</h2><blockquote>
<p> 程序 = 算法 + 数据结构</p>
</blockquote>
<p>这句话当然是不全面的，这句话经典就经典在高度概括了程序中算法和数据结构的重要性，但并不影响这句话在计算机世界里面的地位。</p>
<p>依我看来，对我的启发是：</p>
<blockquote>
<p>我会把 API 的调用和数据结构以及算法想清楚，然后才动手把代码分解成伪代码。最后写成代码。</p>
</blockquote>
<h3 id="2-1-数据类型"><a href="#2-1-数据类型" class="headerlink" title="2.1 数据类型"></a>2.1 数据类型</h3><p>按照复杂性可划分为：</p>
<ul>
<li>简单类型</li>
<li>复杂类型</li>
</ul>
<p>按照复杂性可划分为：</p>
<ul>
<li>基本类型</li>
<li>引用类型</li>
</ul>
<p>按照数据结构可划分为：</p>
<ul>
<li>集合结构 : 串</li>
<li>线性结构 : 线性表 （单链表，静态链表，循环链表，双向链表，<strong>栈，队列</strong>)</li>
<li>树形结构 : 树（二叉树，B+ 树，红黑树）</li>
<li>图形结构 : 图</li>
</ul>
<p>对于一些基本的数据类型，操作为 加减乘除取余数位运算等等</p>
<p>对于复杂的一些数据类型，则需要对数据结构多一些了解。</p>
<p>比如，对队列而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对 hash 而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字典而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字符串而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？</p>
<p>那字符串来说，Java 推荐使用 StringBuilder 来合并多个字符串，Python 推荐 join 多个字符串等等。</p>
<h3 id="2-2-语句"><a href="#2-2-语句" class="headerlink" title="2.2 语句"></a>2.2 语句</h3><ul>
<li>声明语句</li>
<li>赋值语句</li>
<li><p>条件语句</p>
<ol>
<li>判断的时候不确定操作符优先级的时候，加括号</li>
<li>尽量显式判断，不要用隐式判断。</li>
</ol>
</li>
<li><p>循环语句</p>
<ol>
<li>Break 和 Continue</li>
</ol>
</li>
</ul>
<h3 id="2-3-函数"><a href="#2-3-函数" class="headerlink" title="2.3 函数"></a>2.3 函数</h3><ol>
<li>传值还是传引用</li>
<li>参数</li>
</ol>
<p>函数或者叫做方法，叫法不同。</p>
<p>函数，我有个很私人的称呼，称它为最小操作模块。</p>
<p>实际上，在编程的过程中，程序员用面向对象的思想进行编码的人可能真的不是很多。把一段长程序按照自己的需求进行切分成若干个函数的倒是比比皆是。</p>
<p>不过按照什么样子的标准来切分一段程序为多个函数，仁者见仁智者见智。</p>
<p>这里面需要注意的事情是：</p>
<ul>
<li><ol>
<li>注意传值（基本类型）和传引用（引用类型）</li>
</ol>
</li>
<li><ol>
<li>函数重载</li>
</ol>
</li>
</ul>
<p>对于不同的编程语言，传值（基本类型）和传引用（引用类型）基本上达成了共识。<br>但在实现函数重载的时候则是有所不同，</p>
<p>比如，Java 里面选择了多写几个函数，Python 则没有这个机制，不过，通过默认参数却可以曲线救国，实现这个机制。</p>
<p>递归<br>函数式编程<br>高阶函数 mapreduce/ filter / sorted / 返回函数 / 匿名函数 / 装饰器 / 偏函数</p>
<h4 id="2-3-1-作用域"><a href="#2-3-1-作用域" class="headerlink" title="2.3.1 作用域"></a>2.3.1 作用域</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">1</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        a = <span class="number">2</span></div><div class="line">    print(a)</div><div class="line"></div><div class="line">outer()</div><div class="line"><span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">1</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        a = <span class="number">2</span></div><div class="line">    print(a)</div><div class="line">    inner()</div><div class="line">    print(a)</div><div class="line"></div><div class="line">outer()</div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></div><div class="line">    a = [<span class="number">1</span>]</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        a.append(<span class="number">2</span>)</div><div class="line">    print(a)</div><div class="line">    inner()</div><div class="line">    print(a)</div><div class="line"></div><div class="line">outer()</div><div class="line"><span class="comment"># [1]</span></div><div class="line"><span class="comment"># [1, 2]</span></div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">var outer = function()&#123;</div><div class="line">    var a = 1;</div><div class="line">    var inner = function()&#123;</div><div class="line">        a = 2</div><div class="line">    &#125;;</div><div class="line">    console.log(a);</div><div class="line">    inner();</div><div class="line">    console.log(a);</div><div class="line">&#125;</div><div class="line">outer()</div><div class="line"># 1</div><div class="line"># 2</div><div class="line"></div><div class="line">var outer = function()&#123;</div><div class="line">    var a = 1;</div><div class="line">    var inner = function()&#123;</div><div class="line">        var a = 2</div><div class="line">    &#125;;</div><div class="line">    console.log(a);</div><div class="line">    inner();</div><div class="line">    console.log(a);</div><div class="line">&#125;</div><div class="line">outer()</div><div class="line"># 1</div><div class="line"># 1</div></pre></td></tr></table></figure>
<h4 id="2-3-2-高阶函数"><a href="#2-3-2-高阶函数" class="headerlink" title="2.3.2 高阶函数"></a>2.3.2 高阶函数</h4><ul>
<li>map</li>
<li>reduce</li>
<li>filter</li>
</ul>
<h2 id="0x03-中级概念"><a href="#0x03-中级概念" class="headerlink" title="0x03 中级概念"></a>0x03 中级概念</h2><h3 id="3-1-类和对象"><a href="#3-1-类和对象" class="headerlink" title="3.1 类和对象"></a>3.1 类和对象</h3><p>面向对象有三大概念：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
<h3 id="3-2-模块与包"><a href="#3-2-模块与包" class="headerlink" title="3.2 模块与包"></a>3.2 模块与包</h3><p>模块，这个概念，可大可小，大的时候，把一个程序说成是模块，小的时候，可以把一个文件，甚至你说这一个函数是一个模块，也行。</p>
<p>这里的模块指的是一个包下的函数。</p>
<h3 id="3-3-错误-调试测试"><a href="#3-3-错误-调试测试" class="headerlink" title="3.3 错误 / 调试测试"></a>3.3 错误 / 调试测试</h3><p>异常处理实际上可以考验一个程序员编写代码的健壮性。</p>
<p>事实上来说，代码写的健壮是一个程序员必备的素养。但其实在开发过程中，出于对项目进行赶工上线，需要对程序的健壮性做出一定的取舍。并且，在编写客户端，服务端，网页前端的时候基本上都会遇到这个问题。什么时候选择健壮的程序，什么时候选择是还可以的程序。需要自己的经验。</p>
<h3 id="3-4-IO-编程"><a href="#3-4-IO-编程" class="headerlink" title="3.4 IO 编程"></a>3.4 IO 编程</h3><h3 id="3-5-正则表达式"><a href="#3-5-正则表达式" class="headerlink" title="3.5 正则表达式"></a>3.5 正则表达式</h3><h2 id="0x04-高级概念"><a href="#0x04-高级概念" class="headerlink" title="0x04 高级概念"></a>0x04 高级概念</h2><h3 id="4-1-元编程"><a href="#4-1-元编程" class="headerlink" title="4.1 元编程"></a>4.1 元编程</h3><h3 id="4-2-并发编程"><a href="#4-2-并发编程" class="headerlink" title="4.2 并发编程"></a>4.2 并发编程</h3><h4 id="4-2-1-多线程"><a href="#4-2-1-多线程" class="headerlink" title="4.2.1 多线程"></a>4.2.1 多线程</h4><blockquote>
<p>Python 多线程约等于并发。</p>
</blockquote>
<h4 id="4-2-2-多进程"><a href="#4-2-2-多进程" class="headerlink" title="4.2.2 多进程"></a>4.2.2 多进程</h4><h4 id="4-2-3-协程"><a href="#4-2-3-协程" class="headerlink" title="4.2.3 协程"></a>4.2.3 协程</h4><h2 id="0x05-标准库"><a href="#0x05-标准库" class="headerlink" title="0x05 标准库"></a>0x05 标准库</h2><h3 id="5-1-数据结构与算法"><a href="#5-1-数据结构与算法" class="headerlink" title="5.1 数据结构与算法"></a>5.1 数据结构与算法</h3><h3 id="5-2-字符串与文本"><a href="#5-2-字符串与文本" class="headerlink" title="5.2 字符串与文本"></a>5.2 字符串与文本</h3><h3 id="5-3-数字日期与时间"><a href="#5-3-数字日期与时间" class="headerlink" title="5.3 数字日期与时间"></a>5.3 数字日期与时间</h3><h3 id="5-4-迭代器与生成器"><a href="#5-4-迭代器与生成器" class="headerlink" title="5.4 迭代器与生成器"></a>5.4 迭代器与生成器</h3><h3 id="5-3-文本处理"><a href="#5-3-文本处理" class="headerlink" title="5.3 文本处理"></a>5.3 文本处理</h3><h2 id="0x06-可维护性代码"><a href="#0x06-可维护性代码" class="headerlink" title="0x06 可维护性代码"></a>0x06 可维护性代码</h2><h3 id="社区推崇的代码风格"><a href="#社区推崇的代码风格" class="headerlink" title="社区推崇的代码风格"></a>社区推崇的代码风格</h3><h3 id="调试的若干种姿势"><a href="#调试的若干种姿势" class="headerlink" title="调试的若干种姿势"></a>调试的若干种姿势</h3><h2 id="0xEE-文章更新"><a href="#0xEE-文章更新" class="headerlink" title="0xEE 文章更新"></a>0xEE 文章更新</h2><ul>
<li><strong>2017-05-11 19:43:00</strong> : 增加代码质量模块</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何学习一门编程语言&quot;&gt;&lt;a href=&quot;#如何学习一门编程语言&quot; class=&quot;headerlink&quot; title=&quot;如何学习一门编程语言&quot;&gt;&lt;/a&gt;如何学习一门编程语言&lt;/h1&gt;&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class
    
    </summary>
    
      <category term="学习资源" scheme="http://twocucao.xyz/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="编程工具" scheme="http://twocucao.xyz/tags/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>『如何阅读一本书』读书笔记</title>
    <link href="http://twocucao.xyz/2017/02/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    <id>http://twocucao.xyz/2017/02/10/读书笔记_如何阅读一本书/</id>
    <published>2017-02-10T15:54:00.000Z</published>
    <updated>2017-03-14T02:31:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>选择了这本书进行精读是有原因的：</p>
<blockquote>
<p>在一个需要大量阅读的时代里，读东西更加有策略。</p>
</blockquote>
<p>记得大约是初三的考试比赛，监考老师发了卷子，我们这些人拿到卷子捋起袖子就是写，而监考老师说了一句话：</p>
<blockquote>
<p>先看看卷子，然后再写，不要上来就做题。</p>
</blockquote>
<p>虽然那次考试并不算理想，最大的收获应该就是这句话。</p>
<blockquote>
<p>通过’先预估，然后再做’的意识，我应该是少走了一些弯路的。至少工作效率稍微提升了一些。</p>
</blockquote>
<p>但，有了这个先预估一下，然后再做的意识可以减少很多问题，然而并不能更好解决的问题。因为意识这玩意，不是方法，不是策略。知道考虑火候，不懂得把握火候照样做不出好菜。</p>
<a id="more"></a>
<p>对应到我看这本书的目的，即是，当需要我能在捋起袖子干之前，找到一个更好的策略，对读书，有一个更好的方法。而不是仅仅是埋下头一通看。</p>
<p>也是为了给自己更好的啃源码，看文档激发一些更好的灵感。</p>
<p>这是从非专业领域里面找灵感的一种方式，即所谓：汝果欲学诗，工夫在诗外。</p>
<h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again -->
<p><strong>Table of Contents</strong></p>
<ul>
<li><a href="#-">-</a></li>
<li><a href="#本文目录">本文目录</a></li>
<li><a href="#如何阅读一本书目录简评">《如何阅读一本书》目录简评</a></li>
<li><a href="#问与答">问与答</a><ul>
<li><a href="#cq1- 本书整体讲了什么">CQ1: 本书整体讲了什么？</a></li>
<li><a href="#sq1- 较好的阅读一本书的步骤">SQ1: 较好的阅读一本书的步骤</a><ul>
<li><a href="#确定要补充那些知识 -- 技能体系">确定要补充那些知识 / 技能体系</a></li>
<li><a href="#筛选书籍阶段 -- 过滤不适合的书">筛选书籍阶段 : 过滤不适合的书</a></li>
<li><a href="#检视阅读阶段 -- 判断一本书的质量">检视阅读阶段 : 判断一本书的质量</a><ul>
<li><a href="#检视阅读阶段 -step1-- 大体定位这本书">检视阅读阶段 STEP1 : 大体定位这本书。</a></li>
<li><a href="#检视阅读阶段 -step2-">检视阅读阶段 STEP2 :</a></li>
<li><a href="#检视阅读的一些误区：">检视阅读的一些误区：</a></li>
<li><a href="#分析阅读阶段 -- 全方位吃透这本书">分析阅读阶段 : 全方位吃透这本书</a><ul>
<li><a href="#分析阅读第一阶段：找出一本书在谈写什么的规则">分析阅读第一阶段：找出一本书在谈写什么的规则</a></li>
<li><a href="#分析阅读第二阶段：诠释一本书的内容的规则">分析阅读第二阶段：诠释一本书的内容的规则。</a></li>
<li><a href="#分析阅读第三阶段：评论一本书的规则">分析阅读第三阶段：评论一本书的规则</a></li>
</ul>
</li>
<li><a href="#主题阅读阶段 -- 纳入自己的知识体系">主题阅读阶段 : 纳入自己的知识体系</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sq2- 上面关于阅读一本书的步骤是适用于所有书即使通用的步骤吗">SQ2: 上面关于阅读一本书的步骤是适用于所有书，即使通用的步骤吗？</a><ul>
<li><a href="#分析阅读之如何阅读实用型的书">分析阅读之如何阅读实用型的书</a></li>
<li><a href="#分析阅读之如何阅读历史书">分析阅读之如何阅读历史书</a></li>
</ul>
</li>
<li><a href="#sq3- 关于读书的有哪些误区">SQ3: 关于读书的有哪些误区</a><ul>
<li><a href="#速读">速读</a></li>
<li><a href="#随便翻翻">随便翻翻</a></li>
<li><a href="#陷入细枝末节">陷入细枝末节</a></li>
</ul>
</li>
<li><a href="#eq1- 为什么要重新学习如何阅读书籍的策略与方法">EQ1: 为什么要<strong>重新学习</strong>如何阅读书籍的策略与方法</a></li>
</ul>
</li>
<li><a href="#相关链接">相关链接</a></li>
</ul>
<!-- markdown-toc end -->
<h2 id="《如何阅读一本书》目录简评"><a href="#《如何阅读一本书》目录简评" class="headerlink" title="《如何阅读一本书》目录简评"></a>《如何阅读一本书》目录简评</h2><p>本书的翻译版书籍的目录如下：</p>
<ul>
<li>第一篇：阅读的层次<ul>
<li>ch01: 阅读的活力与艺术</li>
<li>ch02: 阅读的层次</li>
<li>ch03: 阅读的第一个层次：基础阅读</li>
<li>ch04: 阅读的第二个层次：检视阅读</li>
<li>ch05: 如何做一个自我要求的读者</li>
</ul>
</li>
<li>第二篇：阅读的第三个层次：分析阅读<ul>
<li>ch06: 一本书的分类</li>
<li>ch07: 透视一本书</li>
<li>ch08: 与作者找出共通的词义</li>
<li>ch09: 判断作者的主旨</li>
<li>ch10: 公正的评断一本书</li>
<li>ch11: 赞同或反对作者</li>
<li>ch12: 辅助阅读</li>
</ul>
</li>
<li>第三篇：阅读不同读物的方法<ul>
<li>ch13: 如何阅读实用型的书</li>
<li>ch14: 如何阅读想象文学</li>
<li>ch15: 阅读故事，戏剧，诗的一些建议</li>
<li>ch16: 如何阅读历史书</li>
<li>ch17: 如何阅读科学和数学</li>
<li>ch18: 如何阅读哲学书</li>
<li>ch19: 如何阅读社会科学</li>
</ul>
</li>
<li>第四篇：阅读的最终目标<ul>
<li>ch20: 阅读的第四个层次：主题阅读</li>
<li>ch21: 阅读与心智的成长</li>
</ul>
</li>
</ul>
<p>这本书的目录看起来比较奇怪，分为四个部分，但是第一篇和第二篇分类比较混乱，ch03,ch04, 第二篇，ch20 不是应该是同一级嘛？</p>
<p>以为找英文原版的目录拿来对照，译者还是严格的遵守了原文目录的排布。</p>
<p>译者把<strong>Part</strong>翻译为<strong>篇</strong>, 我觉得就直接翻译为<strong>部分</strong>比较好。整理目录，补充一部分 Part,Chapter,Section 的标题。</p>
<p>于是做了点体力活，把英文书籍的目录部分搬运过来。</p>
<ul>
<li>第一篇：阅读的层次 <the dimensions="" of="" reading=""><ul>
<li>ch01: 阅读的活力与艺术 <the activity="" and="" art="" of="" reading=""><ol>
<li>Active Reading</li>
<li>The Goals of Reading: Reading for Information and Reading for Understanding</li>
<li>Reading as Learning: The Difference Betweenn Learning By Instruction and Learning by Instruction and Learning by Discovery</li>
<li>Present and Absent Teachers</li>
</ol>
</the></li>
<li>ch02: 阅读的层次 <the levels="" of="" reading=""></the></li>
<li>ch03: 阅读的第一个层次：基础阅读 <the first="" level="" of="" reading:="" elementary="" reading=""><ol>
<li>Stages Of Learning to Read</li>
<li>Stages and Levels</li>
<li>Higher Levels of Reading and Higher Education</li>
<li>Reading and the Democratic Ideal of Education</li>
</ol>
</the></li>
<li>ch04: 阅读的第二个层次：检视阅读 <the second="" level="" of="" reading:="" inspectional="" reading=""><ol>
<li>Inspectional Reading I: Systemmatic Skimming or Pre-reading</li>
<li>Inspectional Reading II: Superficial Reading</li>
<li>On Reading Speeds</li>
<li>Fixations and Regressions</li>
<li>The Problem of Comprehension</li>
<li>Summary of Inspectional Reading</li>
</ol>
</the></li>
<li>ch05: 如何做一个自我要求的读者 <how to="" be="" a="" demanding="" reader=""><ol>
<li>The Essence of Active Reading: The Four Basic Questions a Reader Asks</li>
<li>How to Make a Book Your Own</li>
<li>The Three Kinds of Note-making</li>
<li>Forming the Habit of Reading</li>
<li>From Many Rules to One Habit</li>
</ol>
</how></li>
</ul>
</the></li>
<li>第二篇：阅读的第三个层次：分析阅读 <the third="" level="" of="" reading:="" analytical="" reading=""><ul>
<li>ch06: 分类一本书 <pigeonholing a="" book=""><ol>
<li>The Importance of Classifying Books</li>
<li>What You Can Learn from the Title of a Book</li>
<li>Practical vs. Theoretical Books</li>
<li>Kinds of Theoretical Books</li>
</ol>
</pigeonholing></li>
<li>ch07: 透视一本书 <x-raying a="" book=""><ol>
<li>Of Plots and Plans: Stating the Unity of a Book</li>
<li>Mastering the Multiplicity: The Art of Outlining a Book</li>
<li>The Reciprocal Arts of Reading and Writing</li>
<li>Discovering the Author’s Intentions</li>
<li>The First Stage of Analytical Reading</li>
</ol>
</x-raying></li>
<li>ch08: 与作者找出共通的词义 <coming to="" terms="" with="" and="" author=""><ol>
<li>Words vs. Terms</li>
<li>Finding the Key Words</li>
<li>Technical Words and Special Vocabularies</li>
<li>Finding the Meanings</li>
</ol>
</coming></li>
<li>ch09: 判断作者的主旨 &lt;Determing an Author’s Message&gt;<ol>
<li>Sentences vs. Propositions</li>
<li>Finding the Key Sentences</li>
<li>Finding the Arguments</li>
<li>Finding the Solutions</li>
<li>The Second Stage of Analytical Reading</li>
</ol>
</li>
<li>ch10: 公正的评断一本书 <critizing a="" book="" fairly=""><ol>
<li>Teachability as a Virtue</li>
<li>The Role of Rhetoric</li>
<li>The importance of Suspending Judgement</li>
<li>The Importance of Avoiding Contentiousness</li>
<li>On the Resolution of Disagreements</li>
</ol>
</critizing></li>
<li>ch11: 赞同或反对作者 <agreeing or="" disagreeing="" with="" an="" author=""><ol>
<li>Prejudice and Judgment</li>
<li>Judging the Author’s Soundness</li>
<li>Judging the Author’s Completeness</li>
<li>The Third Stage of Analytical Reading</li>
</ol>
</agreeing></li>
<li>ch12: 辅助阅读 <aids to="" reading=""><ol>
<li>The Role Of Relevant Experience</li>
<li>Other Books as Extrinsic Aids to Reading</li>
<li>How to Use Commentaries and Abstracts</li>
<li>How to Reference Books</li>
<li>How to Use a Dictionary</li>
<li>How to Use an Encyclopedia</li>
</ol>
</aids></li>
</ul>
</the></li>
<li>第三篇：阅读不同读物的方法 <approaches to="" different="" kinds="" of="" reading="" matter=""><ul>
<li>ch13: 如何阅读实用型的书 <how to="" read="" practical="" books=""><ol>
<li>The Two Kinds of Practical Books</li>
<li>The Role of Persuation</li>
<li>What Does Agreement Entail in the Case of a Practical Book?</li>
</ol>
</how></li>
<li>ch14: 如何阅读想象文学 <how to="" read="" imaginative="" literature=""><ol>
<li>How Not to Read Imageinative Literature</li>
<li>Genaral Rules for Reading Imaginative Literature</li>
</ol>
</how></li>
<li>ch15: 阅读故事，戏剧，诗的一些建议 <suggestion for="" reading="" stories="" ,="" plays="" and="" poems=""><ol>
<li>How to Read Stories</li>
<li>A Note About Epics</li>
<li>How to Read Plays</li>
<li>A Note About Tragedy</li>
<li>How to Read Lyric Poetry</li>
</ol>
</suggestion></li>
<li>ch16: 如何阅读历史书 <how to="" read="" history=""><ol>
<li>The Elusiveness of Historial Facts</li>
<li>Theories of History</li>
<li>Questions to Ask of Historical Book</li>
<li>How to Reading Biography and Autobiography</li>
<li>How to Read About Current Events</li>
<li>A Note on Digests</li>
</ol>
</how></li>
<li>ch17: 如何阅读科学和数学 <how to="" read="" science="" and="" mathematics=""><ol>
<li>Understanding the Scientific Enterprise</li>
<li>Suggestions for Reading Classical Scientific Books</li>
<li>Facing the Problem of Mathematics</li>
<li>Handlding the Mathematics in Scientific Books</li>
<li>A Note on Popular Science</li>
</ol>
</how></li>
<li>ch18: 如何阅读哲学书 <how to="" read="" philosophy=""><ol>
<li>The Questions Philosophers Ask</li>
<li>Modern Philosophy and the Great Tradition</li>
<li>On Philosophical Method</li>
<li>On Philosophical Styles</li>
<li>Hints for Reading Philosophy</li>
<li>On Making Up Your Own Mind</li>
<li>A Note on Theology</li>
<li>How to Read “Canoncial”</li>
</ol>
</how></li>
<li>ch19: 如何阅读社会科学 <how to="" read="" social="" science=""><ol>
<li>What Is Social Science?</li>
<li>The Apparent Ease of Reading Social Science</li>
<li>Didfficulties of Reading Social Science</li>
<li>Reading Social Science Literature</li>
</ol>
<ul>
<li>第四篇：阅读的最终目标 <the ultimate="" goals="" of="" reading=""></the></li>
</ul>
</how></li>
<li>ch20: 阅读的第四个层次：主题阅读 <the fourth="" level="" of="" reading:="" syntopical="" reading=""><ol>
<li>The Role of Inspection in Syntopical Reading</li>
<li>The Five Steps in Syntopical Reading</li>
<li>The Need for Objectivity</li>
<li>An Example of an Exercise in Syntopical Reading: The Idea of Progress</li>
<li>The Syntopicon and How to Use It</li>
<li>On the Principles That Underlie Syntopical Reading</li>
<li>Summary of Syntopical Reading</li>
</ol>
</the></li>
<li>ch21: 阅读与心智的成长 <reading and="" the="" growth="" of="" mind=""><ol>
<li>What Good Books Can Do For Us</li>
<li>The Pyramid of Books</li>
<li>The Life and Growth of the Mind</li>
</ol>
</reading></li>
</ul>
</approaches></li>
</ul>
<h2 id="问与答"><a href="#问与答" class="headerlink" title="问与答"></a>问与答</h2><p>如何阅读一本书里面有很多技巧，其中有个就是通过<strong>提问</strong>的方式来使得读书效率更高。</p>
<p>下文是我在读这本书之前和读这本书之后提出的部分问题，挑选一部分写出来作为自己的读书笔记。</p>
<p>我把提问类型标记为如下：</p>
<ul>
<li>CQ  Common Question   : 所有书提问。</li>
<li>SQ  Specific Question : 本类书提问。</li>
<li>EQ  Extended Question : 脑洞类提问。</li>
</ul>
<h3 id="CQ1-本书整体讲了什么？"><a href="#CQ1-本书整体讲了什么？" class="headerlink" title="CQ1: 本书整体讲了什么？"></a>CQ1: 本书整体讲了什么？</h3><blockquote>
<p>You see, but you do not observe. The distinction is clear.</p>
<ul>
<li>Sherlock Holmes/Arthur Conan Doyle, A Scandal in Bohemia (1891)</li>
</ul>
</blockquote>
<p>一句话概括：</p>
<blockquote>
<p>本书讲的是读书的策略与技巧 (HOW).</p>
</blockquote>
<p>再详细一些：</p>
<blockquote>
<p>本书讲的是，当面对不同层次的书，不同种类的书，同一本书的不同部分，挑书，看书，读书，吃透书的策略与技巧。</p>
</blockquote>
<p>作者从阅读的活力与艺术入手，介绍了阅读的必要性，然后介绍了阅读的四种层次，接着点出了阅读层次的进入一些阅读层次的要求，方法，技巧。着重介绍了分析阅读，以及面对各种各样的读物的阅读技巧。</p>
<p>第一部分 花了一章简单的介绍了基础阅读。花了一章介绍了检视阅读，附加另一章介绍做一个自我要求的读者。</p>
<p>接着是第二部分重点介绍阅读的第三个层次，分析阅读：</p>
<p>这个层次需要</p>
<ul>
<li>『分类这本书』</li>
<li>『透视这本书』</li>
<li>『判断作者主旨』</li>
<li>『评断一本书』</li>
<li>『赞同或者反对』</li>
</ul>
<p>PS: 译者把 Pigeonholing a Book 翻译为一本书的分类，这个放在标题上和分类一本书意思相差大了。</p>
<p>也介绍了辅助阅读的通用的一些方法和手段。</p>
<p>接着进入第三部分，作者用自己的经验来分享对于每一种不同类型（阅读使用类书籍，想象文学，故事 / 戏剧 / 诗篇，历史，科学与数学，哲学，社科）的书籍，有哪些注意点（抓重点）, 有哪些技巧。</p>
<p>第四个部分则是介绍了阅读的终极目的：</p>
<p>其实每一个人的读书都是主题阅读</p>
<p>挑选《沟通的艺术》基本上都是为了提升沟通上的技巧。换而言之，其实我们都是为了丰富自己在沟通上面的知识体系从而选择了看这本书。</p>
<p>当然，作者并不是新造一个概念，然后一本正经的说没有干货的道理，作者还举了一个例子用于如何在主题之间作取舍，更加有条理的去看某些类别的书。</p>
<h3 id="SQ1-较好的阅读一本书的步骤"><a href="#SQ1-较好的阅读一本书的步骤" class="headerlink" title="SQ1: 较好的阅读一本书的步骤"></a>SQ1: 较好的阅读一本书的步骤</h3><h4 id="确定要补充那些知识-技能体系"><a href="#确定要补充那些知识-技能体系" class="headerlink" title="确定要补充那些知识 / 技能体系"></a>确定要补充那些知识 / 技能体系</h4><blockquote>
<p>“Some books are to be tasted, others to be swallowed, and some few to be chewed and digested” - Francis Bacon</p>
</blockquote>
<p>有的书适合浅尝，有的书适合吞咽，只有少部分适合咀嚼和消化到变为身体的一部分。 培根对书归类的这句话相当形象。</p>
<p>看书除非是热爱读书，否则随便拿起一本书，实在是难以激发自己探索这本书的冲动。</p>
<p>而，这里面有一个隐藏的问题，就是<strong>要补充哪些知识 / 技能体系</strong>, 首先是要知道有哪些知识体系。</p>
<ul>
<li>维护健康</li>
<li>高效自学</li>
<li>逻辑思考</li>
<li>规划管理</li>
<li>沟通表达</li>
<li>团队协作</li>
<li>……</li>
</ul>
<h4 id="筛选书籍阶段-过滤不适合的书"><a href="#筛选书籍阶段-过滤不适合的书" class="headerlink" title="筛选书籍阶段 : 过滤不适合的书"></a>筛选书籍阶段 : 过滤不适合的书</h4><blockquote>
<p>目的：用一些比较通用的技巧筛选出书籍。然后进入下一阶段</p>
</blockquote>
<p>技巧：</p>
<ul>
<li>泛读书衣：书衣和封面是重要的宣传点，书衣没有亮点。基本上这本书也不会有太大亮点。</li>
<li>泛读封面：<ul>
<li>出版社不行，基本上这本书也不行，出版社的可能在某个领域特别牛，比如图灵 / 机械在计算机方面特别牛，我就特别青睐于选这两家的新出来的技术书籍。但不管外面怎么说，反正我自从不考试了之后，我就拒绝看清华大学出版社的所有计算机相关的书籍。清华大学出版社的计算机类作者就几乎进入了我的计算机不读书籍作者的黑名单。</li>
<li>作者的其他书不行，新书八成也不怎么样。作者有一本书写的巨牛无比，他的其他书籍也不会差到哪里去。假如《母猪的产后护理》质量很高甚至连高科技养猪的网易老总都专门给这本书作序，那作者的《世界如此残酷，你一定要内心强大》一定是另一本仙风道骨的自传。</li>
<li>一本精心构造的书的内容，插画都是有一定的寓意的。很少有作家出一本书是忍心让自己的书封面长的巨丑。</li>
<li>这也需要注意的是：有的烂作品也会在封面下一番功夫，这就需要进入下一阶段的的探索了。</li>
<li>版次越高，则越好。</li>
<li>印次越高，则越好。</li>
<li>首印数量很少，则出版社对这本书没有多大信心。</li>
<li>编著，著是原创，编则是整合。</li>
<li>如果可以的话，优先阅读英文书。</li>
<li>豆瓣和亚马逊的书评。</li>
</ul>
</li>
<li>泛读目录：好的书籍的目录一定是（注意是一定是）逻辑清晰，结构层次分明，足以概括该章节的，甚至对如果稍微懂一点点的人，仅仅凭着目录就可以脑补出整本书的结构。</li>
<li>其他技巧：比如，直接买某个社群推荐的书单。我在不懂编程的时候就是这么做的。当然，后来稍微入了编程的大门才发现当初买了很多烂书。当然，用别人的书单也会逐渐让自己挑选书的能力退化。</li>
</ul>
<p>如果不适合口味，比如你想看《面向对象编程思想》过程中的翻到了一本《找对象，就这么做》的书，果断换一本；或者这书质量实在是太差，比如你翻到了《公猪在母猪的产后护理过程中不得不做的 138 件小事》, 书总共就 350 页，居然讲什么是母猪花了 147.6 页，果断换一本书。这样你就节约了看一本不合适的书的时间。</p>
<h4 id="检视阅读阶段-判断一本书的质量"><a href="#检视阅读阶段-判断一本书的质量" class="headerlink" title="检视阅读阶段 : 判断一本书的质量"></a>检视阅读阶段 : 判断一本书的质量</h4><blockquote>
<p>目的：判断一本书的质量，以及评估当前的书本是否值得进入下一阶段。然后进入下一阶段。</p>
<p>适用场景：不知道这本书适不适合进行更高质量的阅读。或者时间有限并且急于挖掘书中的知识。</p>
</blockquote>
<p>经过上个阶段的过滤，不合适的书基本上也就差不了多少了，这时候就需要对这本书进行检视阅读了：</p>
<h5 id="检视阅读阶段-STEP1-大体定位这本书。"><a href="#检视阅读阶段-STEP1-大体定位这本书。" class="headerlink" title="检视阅读阶段 STEP1 : 大体定位这本书。"></a>检视阅读阶段 STEP1 : 大体定位这本书。</h5><ol>
<li>看书名页 / 序 : 了解这本书的主题，归类这本书的类型。</li>
<li>研究目录页  : 对这本书的基本架构做概括性的理解。</li>
<li>查看索引</li>
<li>出版者的介绍</li>
<li>挑选几个和主题相关的篇章，着重看篇章的开头或结尾。</li>
<li>把书打开，随意翻，有时候连续看几页，但不要太多。</li>
</ol>
<p>定位这本书的用途：</p>
<ol>
<li>弃而不看。</li>
<li>放着做参考书。</li>
<li>进行检视阅读的第二阶段</li>
</ol>
<h5 id="检视阅读阶段-STEP2"><a href="#检视阅读阶段-STEP2" class="headerlink" title="检视阅读阶段 STEP2 :"></a>检视阅读阶段 STEP2 :</h5><p>这篇作者 / 译者使用了一个很容易被误会词，粗读。</p>
<p>即：</p>
<blockquote>
<p>头一次面对一本难读的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或者思索。</p>
</blockquote>
<p>那什么标准的读才叫粗读呢？</p>
<blockquote>
<p>把握主干，不拘泥于细枝末节，把握大原则，不拘泥于细微的重点，而不是那种随便翻翻的”粗读”.</p>
</blockquote>
<h5 id="检视阅读的一些误区："><a href="#检视阅读的一些误区：" class="headerlink" title="检视阅读的一些误区："></a>检视阅读的一些误区：</h5><blockquote>
<p>速读也只能回答出”这是在说什么的”的问题。对深入理解，回答更深层次的问题没有大帮助。</p>
</blockquote>
<h4 id="分析阅读阶段-全方位吃透这本书"><a href="#分析阅读阶段-全方位吃透这本书" class="headerlink" title="分析阅读阶段 : 全方位吃透这本书"></a>分析阅读阶段 : 全方位吃透这本书</h4><p>经过筛选与检视，剩下的书则是很有价值的书。</p>
<blockquote>
<p>而，读一本书的阅读技巧，明显是高于比书本长度少，比书本难度易的读物。即 <strong>这些阅读技巧也同样适用于非书籍的读物上</strong></p>
</blockquote>
<h5 id="分析阅读第一阶段：找出一本书在谈写什么的规则"><a href="#分析阅读第一阶段：找出一本书在谈写什么的规则" class="headerlink" title="分析阅读第一阶段：找出一本书在谈写什么的规则"></a>分析阅读第一阶段：找出一本书在谈写什么的规则</h5><p>步骤：</p>
<ol>
<li>依照书的种类与主题来分类</li>
<li>使用最简短的文字说明整本书在谈些什么</li>
<li>将主要部分按顺序和关联性列举出来。将全书的大纲列举出来，并将各个部分的大纲也列出来。</li>
<li>确定作者想要解决的问题。</li>
</ol>
<blockquote>
<p>如果心中没有一个分类的标准，再清楚的书名也没有用。</p>
<p>每一本书都有一个骨架，作为一个合格的读者，目的就是找出这个骨架。</p>
</blockquote>
<ol>
<li>掌握一本书的架构</li>
<li>使用单一的句子，或者最多几句话来叙述整本书的内容。</li>
<li>将书中的重要篇章列举出来，说明他们如何按照顺序组成一个整体的架构。</li>
</ol>
<blockquote>
<p>PS: 建筑架构与书本架构的那个比方真的是精彩。</p>
</blockquote>
<p>第三点可以用列提纲来解决：</p>
<ul>
<li>作者将全数分为五个部分，第 1/2/3/4/5 部分讲的是什么</li>
<li>第一部分的第一节（注：Section, 译者翻译为段落）, 有 X/Y/Z 节 /</li>
<li>X 节作者做出四个观点 (Point),I/II/III</li>
</ul>
<blockquote>
<p>由于纸笔速度跟不上大脑运转速度，对每一本书这样读并且列提纲的话相当耗费精力，但是具备这样的意识还是很重要的。</p>
</blockquote>
<h5 id="分析阅读第二阶段：诠释一本书的内容的规则。"><a href="#分析阅读第二阶段：诠释一本书的内容的规则。" class="headerlink" title="分析阅读第二阶段：诠释一本书的内容的规则。"></a>分析阅读第二阶段：诠释一本书的内容的规则。</h5><p>步骤：</p>
<ol>
<li>诠释作者的关键字，与他达成共识。</li>
<li>由最重要的句子中，抓住作者的重要主旨。</li>
<li>知道作者的论述是什么，从内容中找出相关的句子，再重新架构出来。</li>
<li>确定作者已经解决了哪些问题，还有哪些问题是没有解决的，在判断那些是作者知道他没有解决的问题。</li>
</ol>
<blockquote>
<ol>
<li>作者的主旨如果没有理论的支持，只是在书法个人想法罢了。2. 为什么他认为我们应该被说服，以接受这样的观点。</li>
</ol>
</blockquote>
<ol>
<li>找出关键句</li>
<li>找出主旨</li>
<li>找出论述</li>
<li>找出解答</li>
</ol>
<p>他沟通的主要核心是他所辖的肯定与否定的判断，以及他为什么会这么做的立构。</p>
<blockquote>
<p>不能用他们自己的话，重述你的观点。则是代表不理解。</p>
</blockquote>
<h5 id="分析阅读第三阶段：评论一本书的规则"><a href="#分析阅读第三阶段：评论一本书的规则" class="headerlink" title="分析阅读第三阶段：评论一本书的规则"></a>分析阅读第三阶段：评论一本书的规则</h5><p>规则：</p>
<p>A. 智慧礼节的一般规则</p>
<ol>
<li>除非你已经完成了大纲架构，也能诠释整本书了，否则不要轻易评断。</li>
<li>不要争强好胜，非辩到底不可。</li>
<li>在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同。<br>B. 批评观点的特别标准<ol>
<li>证明作者的知识不足。</li>
<li>证明作者的知识错误。</li>
<li>证明作者不合逻辑。</li>
<li>证明作者的分析与理由是不完整的。</li>
</ol>
</li>
</ol>
<p>甚至，可以用于其他的类型的学习。</p>
<h4 id="主题阅读阶段-纳入自己的知识体系"><a href="#主题阅读阶段-纳入自己的知识体系" class="headerlink" title="主题阅读阶段 : 纳入自己的知识体系"></a>主题阅读阶段 : 纳入自己的知识体系</h4><p>主题阅读其实就是对同一个主题挑选几本书进行查看。</p>
<p>多问问自己：这本书谈的内容对我研究的主题内容道理有没有帮助？</p>
<p>主题阅读 STEP1. 找到与主题相关的章节。只看与该章节相关的内容。<br>主题阅读 STEP2. 带领作者与你达成共识。与检视阅读的第二步骤相反。<br>主题阅读 STEP3. 理清问题。<br>主题阅读 STEP4. 界定议题。<br>主题阅读 STEP5. 分析讨论。</p>
<h3 id="SQ2-上面关于阅读一本书的步骤是适用于所有书，即是通用的步骤吗？"><a href="#SQ2-上面关于阅读一本书的步骤是适用于所有书，即是通用的步骤吗？" class="headerlink" title="SQ2: 上面关于阅读一本书的步骤是适用于所有书，即是通用的步骤吗？"></a>SQ2: 上面关于阅读一本书的步骤是适用于所有书，即是通用的步骤吗？</h3><blockquote>
<p>不是</p>
</blockquote>
<p>作者在书中介绍了四个问题，用来帮助读者进行更好的阅读，这些问题除了不适合小说类的书籍，基本上可以适用于绝大部分的书籍。</p>
<ul>
<li>CQ1 : <strong>本书整体讲了什么？</strong> （主题，作者如何依次发展主题，如何逐步从核心主题分解出从属的关键议题来）</li>
<li>CQ2 : <strong>作者细说了什么？怎么说的？</strong> （找出主要的 ideas,assertions,arguments, 汗，译者翻译为了 想法，声明，论点，实际上应该翻译为想法，主张，论据……)</li>
<li>CQ3 : <strong>这本书说的有道理吗？是全部有道理，还是部分有道理？</strong></li>
<li>CQ4 : <strong>这本书跟我有什么关系？</strong> 如果是资讯，则询问是否有意义。是否值得有更深入的了解。这本书可以补充我哪些知识体系</li>
</ul>
<p>作者在书中已经介绍完分析阅读，按理来说应该进入的是下一部分，即主题阅读。</p>
<p>但是第三部分<strong>莫名其妙</strong>硬塞了一部分内容叫做<strong>阅读不同读物的方法</strong></p>
<p>内容是如何阅读下面的读物：</p>
<ul>
<li>实用型的书</li>
<li>想象文学</li>
<li>故事，戏剧，诗</li>
<li>历史书</li>
<li>科学与数学</li>
<li>哲学书</li>
<li>社会科学</li>
</ul>
<p>而这么做的答案在第十三章的开头（不是应该在第三部分的开头嘛？).</p>
<blockquote>
<p>在任何艺术或实务领域，规则太通用是一件令人扫兴的事情。少量的通用性规则是优势。越通用的规则也就意味着越易懂，而与此同时当遇到真实案例的时候，往往通用规则太宽泛而难以应用。</p>
<p>即，尽管作者做了抽象的总结的经验，但还是要具体落实到具体的案例上。</p>
</blockquote>
<h5 id="分析阅读之如何阅读实用型的书"><a href="#分析阅读之如何阅读实用型的书" class="headerlink" title="分析阅读之如何阅读实用型的书"></a>分析阅读之如何阅读实用型的书</h5><blockquote>
<p>注：由于时间有限，仅仅对阅读实用类和历史书籍做了笔记，以后补上。</p>
<p>注意：<strong>任何一本实用性的书不能解决该书所关心的实际问题.</strong></p>
</blockquote>
<p>就像学会<strong>如何阅读一本书</strong>, 看完做好笔记并不意味着<strong>你不会阅读一本书</strong>这个问题<strong>消失了</strong>, 只有行动才能解决问题。</p>
<blockquote>
<p><strong>听过那么多道理，却不行动，不能过好这一生</strong>也没有那必要怪道理。</p>
<p><strong>Just Do It</strong></p>
</blockquote>
<ul>
<li>如果是阅读数学类的书，可能了解作者本人是没有任何必要的。</li>
<li>如果是阅读道德论述，经济论文和经济论著，则非常有必要了解作者的人格，生活所处的时代背景。</li>
</ul>
<p>第一个问题：这本书是在谈些什么。<br>第二个问题：这本书的意义或内容，共识，主旨，论述。<br>第三个问题：内容真实吗？<br>第四个问题：这本书与我何干？</p>
<h5 id="分析阅读之如何阅读历史书"><a href="#分析阅读之如何阅读历史书" class="headerlink" title="分析阅读之如何阅读历史书"></a>分析阅读之如何阅读历史书</h5><p>这部分刚开始就通过法庭陪审团的车祸事件来说明，在严格规范的证据之下，加上详细检验之后，身为陪审员都很难百分之百的确定一件事情的真相。</p>
<p>而，一个人连一件单纯的事都难以确知真相，遑论历史？</p>
<p>由于历史的理论不同，历史学家对历史事件的描述则不同。</p>
<p>阅读历史的两个要点：</p>
<ol>
<li>对你感兴趣的时间或者时期，尽量阅读一种以上的历史书</li>
<li>不要只关心在过去某个时间地点真正发生了什么事情，还要读懂在任何时空中，尤其是现在，人们为什么会有这般行动的原因。</li>
</ol>
<h3 id="SQ3-关于读书的有哪些误区"><a href="#SQ3-关于读书的有哪些误区" class="headerlink" title="SQ3: 关于读书的有哪些误区"></a>SQ3: 关于读书的有哪些误区</h3><h4 id="速读"><a href="#速读" class="headerlink" title="速读"></a>速读</h4><ol>
<li>许多书连略读都是不值得的，另外一些书只需要快速读过就行了。有少数的书需要用某种速度，通常是相当慢的速度，才能完全理解。</li>
<li>一本只需要快速阅读的书，却用很慢的速度来读，就是在浪费时间，这时速读的技巧就能帮你解决问题。</li>
</ol>
<p>PS: 无论是多么难读的书，在无关精要的间隙部分都可以读快一些。而那些比较困难的部分，应该慢慢阅读。</p>
<blockquote>
<p>核心的注意点应该放在：理解了多少。<br>恰似沟通需要注意的：不是你说了多少，说的多快，而是对方理解了多少。</p>
</blockquote>
<h4 id="随便翻翻"><a href="#随便翻翻" class="headerlink" title="随便翻翻"></a>随便翻翻</h4><p>读书如果不是为了娱乐消遣，切忌进行在很松散的状态下随便拿一本书看看。</p>
<blockquote>
<p>为了解决很随便的看一本书，我的技巧就是带着问题去看。</p>
</blockquote>
<h4 id="陷入细枝末节"><a href="#陷入细枝末节" class="headerlink" title="陷入细枝末节"></a>陷入细枝末节</h4><blockquote>
<p>头一次面对一本难读的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或者思索。</p>
</blockquote>
<p>不停的停下来查一些陌生的知识会不断的破坏兴趣。并且会忽略掉一些大的原则性的东西。<br>比如：当你努力的去了解那些细微的重点时，就会错过大原则：关于成本中包含的薪水，租金，利润与利息种种因素，市场在定价中的角色，垄断专卖的害处，自由贸易的理由等等。</p>
<blockquote>
<p>作者的意思其实就是从枝干再到树叶。不要上来就陷入一些细小的琐碎事物中。</p>
</blockquote>
<h3 id="EQ1-为什么要重新学习如何阅读书籍的策略与方法"><a href="#EQ1-为什么要重新学习如何阅读书籍的策略与方法" class="headerlink" title="EQ1: 为什么要重新学习如何阅读书籍的策略与方法"></a>EQ1: 为什么要<strong>重新学习</strong>如何阅读书籍的策略与方法</h3><blockquote>
<p>初学者的无知在于未学，而学者的无知在于学后</p>
</blockquote>
<p>以上。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://en.wikipedia.org/wiki/How_to_Read_A_Book" target="_blank" rel="external">https://en.wikipedia.org/wiki/How_to_Read_A_Book</a><br><a href="https://en.wikipedia.org/wiki/How_to_Read_Literature_Like_a_Professor" target="_blank" rel="external">https://en.wikipedia.org/wiki/How_to_Read_Literature_Like_a_Professor</a><br><a href="https://www.amazon.com/How-Read-Book-Intelligent-Touchstone/dp/0671212095/ref=pd_bxgy_14_2?_encoding=UTF8&amp;psc=1&amp;refRID=MMHSVKSVYBBGSMZRWDQE" target="_blank" rel="external">亚马逊地址《如何阅读一本书》</a></p>
<p>UPDATE:</p>
<table>
<thead>
<tr>
<th>日期</th>
<th>类型</th>
<th>详细操作</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>2017-02-13</strong></td>
<td>创建</td>
<td>初始化本文</td>
</tr>
<tr>
<td><strong>2017-02-17</strong></td>
<td>重构</td>
<td>删除零散笔记，重新组织本文结构</td>
</tr>
<tr>
<td><strong>2017-02-26</strong></td>
<td>重构</td>
<td>调整部分内容</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;选择了这本书进行精读是有原因的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在一个需要大量阅读的时代里，读东西更加有策略。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记得大约是初三的考试比赛，监考老师发了卷子，我们这些人拿到卷子捋起袖子就是写，而监考老师说了一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先看看卷子，然后再写，不要上来就做题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然那次考试并不算理想，最大的收获应该就是这句话。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过’先预估，然后再做’的意识，我应该是少走了一些弯路的。至少工作效率稍微提升了一些。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但，有了这个先预估一下，然后再做的意识可以减少很多问题，然而并不能更好解决的问题。因为意识这玩意，不是方法，不是策略。知道考虑火候，不懂得把握火候照样做不出好菜。&lt;/p&gt;
    
    </summary>
    
      <category term="写在人生的边上" scheme="http://twocucao.xyz/categories/%E5%86%99%E5%9C%A8%E4%BA%BA%E7%94%9F%E7%9A%84%E8%BE%B9%E4%B8%8A/"/>
    
    
      <category term="碎碎念" scheme="http://twocucao.xyz/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="书单与简评" scheme="http://twocucao.xyz/tags/%E4%B9%A6%E5%8D%95%E4%B8%8E%E7%AE%80%E8%AF%84/"/>
    
  </entry>
  
</feed>
