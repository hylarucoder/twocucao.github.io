<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MG的编程小屋</title>
  <subtitle>Get Busy Living, Or Get Busy Dying</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://twocucao.xyz/"/>
  <updated>2018-03-18T06:47:22.795Z</updated>
  <id>http://twocucao.xyz/</id>
  
  <author>
    <name>Micheal Gardner</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flask 文档阅读笔记</title>
    <link href="http://twocucao.xyz/2018/03/09/Flask%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://twocucao.xyz/2018/03/09/Flask文档阅读笔记/</id>
    <published>2018-03-09T08:27:03.000Z</published>
    <updated>2018-03-18T06:47:22.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>因为最近需要新增一个 Flask 技术栈，所以准备趁这休息的时候更新关于 Flask 的两篇文章。</p>
<p>前者是文档阅读笔记，后者是源码初步解析。</p>
<blockquote>
<p>嗯，其实这篇就是做了一些搬运的活。</p>
</blockquote>
<h2 id="0x01-文档"><a href="#0x01-文档" class="headerlink" title="0x01 文档"></a>0x01 文档</h2><p>由于 Flask 还依赖 Jinja2 与 Werkzeug, 并且往往大家在使用 Flask 的时候还是会使用 itsdangerous. 所以，当大家说 Flask 代码少的时候，我还是不服的。但如果你说，Flask 本身实现确实是简洁，扩展性强，我还是服气的。</p>
<p>Flask 的文档有三种类型（其他框架类文档也是如此）：</p>
<ul>
<li>Tutorial 类，即教程类</li>
<li>Guide 类，即指南类</li>
<li>API 类，即接口级别的文档</li>
</ul>
<p>当你是一个老手，还想快速上手一个框架的时候，认真读一读前两者，然后挑选一个项目多看几遍即可。</p>
<p>但是当你深入到框架里面的设计与实现的时候，则必须要多读读 API Document , 由于通常情况下 API Document 的内容往往是代码中的注释，加上 Flask 代码量本来就不多。所以，有的时候阅读 Flask 代码代码也会比 API 好很多。</p>
<h2 id="0x02-Guide"><a href="#0x02-Guide" class="headerlink" title="0x02 Guide"></a>0x02 Guide</h2><h3 id="2-1-Templates"><a href="#2-1-Templates" class="headerlink" title="2.1 Templates"></a>2.1 Templates</h3><p>快速 Get 模板语言无非就是掌握：</p>
<ol>
<li>上下文变量</li>
<li>条件语法</li>
<li>列表语法</li>
<li>模板的继承 (extend 语法）与组合 (include)</li>
<li>额外的一些语法糖，比如 filter 的使用 / 组成</li>
</ol>
<h3 id="2-2-Testing-Flask-Applications"><a href="#2-2-Testing-Flask-Applications" class="headerlink" title="2.2 Testing Flask Applications"></a>2.2 Testing Flask Applications</h3><blockquote>
<p>Something that is untested is broken.</p>
</blockquote>
<p>这里的测试，有哪些测试呢？</p>
<ol>
<li>非 flask 相关逻辑的测试。比如，我对一小段无关于 View 层的纯粹的逻辑进行测试，我比较喜欢使用 pytest 进行测试。</li>
<li>Flask 相关<ul>
<li>Setup</li>
<li>TearDown</li>
<li>登录前 / 登陆后</li>
</ul>
</li>
</ol>
<h3 id="2-3-Application-Errors"><a href="#2-3-Application-Errors" class="headerlink" title="2.3 Application Errors"></a>2.3 Application Errors</h3><p>比如测试请求与响应结果。比如测试路由。测试某个与 View 层绑定的数据操作是否执行成功。</p>
<p>首先，大致扫一眼 tutorial ，知道了 Flask 的教程讲了如下的东西：</p>
<ol>
<li>路由</li>
<li>静态文件</li>
<li>模板渲染</li>
<li>接触请求数据</li>
<li>重定向和错误</li>
<li>响应</li>
<li>Session</li>
<li>Message Flash</li>
<li>日志</li>
<li>扩展</li>
</ol>
<p>当然，我们都是老手了，肯定是挑重点来看了。</p>
<p>Routing, 发现现在的问题在于</p>
<p>Flask 有两个主要依赖：</p>
<ul>
<li>路由、调试、WSGI</li>
<li>模板</li>
</ul>
<h2 id="0x02-社区支持"><a href="#0x02-社区支持" class="headerlink" title="0x02 社区支持"></a>0x02 社区支持</h2><h2 id="0x04-读文档产生的疑问"><a href="#0x04-读文档产生的疑问" class="headerlink" title="0x04 读文档产生的疑问"></a>0x04 读文档产生的疑问</h2><p>1.</p>
<p>For web applications it’s crucial to react to the data a client sends to the server. In Flask this information is provided by the global request object. If you have some experience with Python you might be wondering how that object can be global and how Flask manages to still be threadsafe. The answer is context locals:</p>
<p>Context Locals<br>Insider Information<br>If you want to understand how that works and how you can implement tests with context locals, read this section, otherwise just skip it.</p>
<p>Certain objects in Flask are global objects, but not of the usual kind. These objects are actually proxies to objects that are local to a specific context. What a mouthful. But that is actually quite easy to understand.</p>
<p>Imagine the context being the handling thread. A request comes in and the web server decides to spawn a new thread (or something else, the underlying object is capable of dealing with concurrency systems other than threads). When Flask starts its internal request handling it figures out that the current thread is the active context and binds the current application and the WSGI environments to that context (thread). It does that in an intelligent way so that one application can invoke another application without breaking.</p>
<p>So what does this mean to you? Basically you can completely ignore that this is the case unless you are doing something like unit testing. You will notice that code which depends on a request object will suddenly break because there is no request object. The solution is creating a request object yourself and binding it to the context. The easiest solution for unit testing is to use the test_request_context() context manager. In combination with the with statement it will bind a test request so that you can interact with it. Here is an example:</p>
<h3 id="Thread-Local"><a href="#Thread-Local" class="headerlink" title="Thread Local"></a>Thread Local</h3><p>One of the design decisions in Flask was that simple tasks should be simple; they should not take a lot of code and yet they should not limit you. Because of that, Flask has a few design choices that some people might find surprising or unorthodox. For example, Flask uses thread-local objects internally so that you don’t have to pass objects around from function to function within a request in order to stay threadsafe. This approach is convenient, but requires a valid request context for dependency injection or when attempting to reuse code which uses a value pegged to the request. The Flask project is honest about thread-locals, does not hide them, and calls out in the code and documentation where they are used.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;因为最近需要新增一个 Flask 技术栈，所以准备趁这休息的时候更新关于 Flask 的两篇文章。&lt;
    
    </summary>
    
      <category term="后端开发" scheme="http://twocucao.xyz/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
      <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="RestAPI" scheme="http://twocucao.xyz/tags/RestAPI/"/>
    
      <category term="Flask" scheme="http://twocucao.xyz/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask 源码初步解读</title>
    <link href="http://twocucao.xyz/2018/03/09/Flask%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://twocucao.xyz/2018/03/09/Flask源码解析/</id>
    <published>2018-03-09T08:27:03.000Z</published>
    <updated>2018-03-10T02:36:01.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>系列文章先暂时停更一周。今天换换口味。</p>
<p>久闻 Flask 是众多 Pythonist 喜欢的框架。这次借着换工作的机会熟悉一下 Flask</p>
<ol>
<li>本文先分享我阅读代码的一些小经验</li>
<li>接着通过最简单的一个 WSGI APP 开始，带着<strong>如何设计一个 Web 框架</strong>这个问题，进行头脑风暴，从而脑补（而不是实现）出一个 Web 框架的基本要素。</li>
<li>从源码角度绘制一张流程图，Flask 从启动到接受第一个请求、返回第一个响应期间都发生了什么。<br>4.</li>
</ol>
<p>然后带着大家初次阅读代码。<br>接着，带着第二个大问题<strong>Flask 是的上下文到底是啥玩意</strong>, 再次进行头脑风暴，然后阅读源码。<br>然后，依据文档结合 Flask 源码看看其他有趣的实现。<br>再后来，依据文档结合 Flask 源码看看其他有趣的实现。<br>最后，依据文档结合 Flask 源码看看其他有趣的实现。</p>
<blockquote>
<p>将解读 Flask 的源码放在一篇文章里，势必会造成广度有余而深度不足。所以本想定位于 Flask 源码初步解读。</p>
</blockquote>
<h2 id="0x01-阅读-Flask-代码的一种较好的姿势"><a href="#0x01-阅读-Flask-代码的一种较好的姿势" class="headerlink" title="0x01 阅读 Flask 代码的一种较好的姿势"></a>0x01 阅读 Flask 代码的一种较好的姿势</h2><p>之前在 <a href="https://www.zhihu.com/question/28509408/answer/299763091" target="_blank" rel="external">https://www.zhihu.com/question/28509408/answer/299763091</a> 分享过自己一点阅读代码的粗浅的经验，是以阅读一个 Django 应用为案例的。这里借着 Flask 本身分享一下我的看法。</p>
<p>读源码，是一个技术活。一是忌讳要想读懂全部，另一个忌讳是以为自己能一下子毫无障碍的读懂全部代码。</p>
<ol>
<li>建议 0 : 看源码的时候，<strong>务必务必带着问题去读</strong>。每一次阅读其实都是在尝试回答或小或大的问题（当然，其实读书看文章莫不如是）。</li>
<li>建议 1 : 先读现成的文档，如果逻辑不简单，就不要对着代码一通瞎看。</li>
<li>建议 2 : 所谓『横看成岭侧成峰，远近高低都不同』 你需要从不同的角度来读源码，而且要带上具体的问题来读。</li>
<li>建议 3 : 抓大放小，该略读就略读（比如知道 Nginx 的大致作用就好，做优化请求响应的时候再翻看文档），该精读则精读（具体一个关键的功能）。</li>
</ol>
<h2 id="0x02-问题-1-如何设计一个-Web-框架"><a href="#0x02-问题-1-如何设计一个-Web-框架" class="headerlink" title="0x02 问题 1: 如何设计一个 Web 框架"></a>0x02 问题 1: 如何设计一个 Web 框架</h2><h3 id="头脑风暴"><a href="#头脑风暴" class="headerlink" title="头脑风暴"></a>头脑风暴</h3><p>在阅读 Flask 相关代码的之前，先头脑风暴一下：</p>
<blockquote>
<p>如何设计一个 Web 框架？</p>
</blockquote>
<p>当心中对这个问题有一定的了解之后，读 Flask 代码会更好。</p>
<p>首先，Web 框架是为了提升 Web 开发的。(XX 框架是为了提升 XX 开发的）, 这种提升可能会是 开发体验 / 性能。</p>
<p>我们来看看那个最基础的 wsgi app 的相关代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)])</div><div class="line">    <span class="keyword">return</span> [<span class="string">'Hello World!'</span>]</div></pre></td></tr></table></figure>
<p>但，显然，这是完全不够的。 比如说：</p>
<ul>
<li>没有路由，我访问啥玩意都是 hello world。</li>
<li>没有数据存取，连个数据库链接 CURDE 啥玩意都没有</li>
<li>environ 太过于底层，如果是判断 headers 啥的太麻烦，要是像 django 里面一样能拿到一个 request 对象返回一个 response 对象就好了。</li>
<li>没有模板语言</li>
<li>还有其他能够提升开发体验的东西，比如自带 http server 代码热加载之类。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    <span class="comment"># 依据 environ 判断路由</span></div><div class="line">    <span class="comment"># 依据 路由 执行相关 view 层方法</span></div><div class="line">    <span class="comment"># 在相关 view 层方法内执行相关逻辑</span></div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)])</div><div class="line">    <span class="comment"># 返回对应响应</span></div><div class="line">    <span class="keyword">return</span> response</div></pre></td></tr></table></figure>
<p>当然，思路是这么个思路，当然这个思路也确实非常的面向过程。</p>
<p>至于我们如何把这个面向过程的思路变成面向对象的设计与实现，则需要更加细致的思考这些问题。</p>
<ol>
<li>能不能把 request 和 response 封装一下？方便在 view 里面处理？</li>
<li>路由能不能直接搞成 装饰器类型的比如 @router(“/“) 直接放在 view 层的 function 上。</li>
<li>能不能有个方便对数据库进行 CURDE 的东西？</li>
<li>这玩意会不会线程不安全，假如我想每一个请求都有单独的变量集合的话，线程怎么管理？:TODO 线程的问题需验证一下 sleep</li>
<li>……</li>
</ol>
<h2 id="0x02-问题-2-流程是怎么样的"><a href="#0x02-问题-2-流程是怎么样的" class="headerlink" title="0x02 问题 2: 流程是怎么样的"></a>0x02 问题 2: 流程是怎么样的</h2><p>再结合 flask 的极简案例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># hello.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello, World!'</span></div><div class="line"></div><div class="line">$ FLASK_APP=hello.py flask run</div></pre></td></tr></table></figure>
<p>这下我们的<strong>首次</strong>阅读 Flask 代码的思路就很清楚了。</p>
<blockquote>
<p>从请求到响应的整个流程，Flask 的是怎么处理请求的？</p>
</blockquote>
<ol>
<li>搞清楚 flask 是如何封装 request 和 response 的</li>
<li>flask 如何实现的路由？</li>
</ol>
<blockquote>
<p>当然，flask 不带 ORM, 这我们也就不研究了。</p>
</blockquote>
<h3 id="首次阅读代码"><a href="#首次阅读代码" class="headerlink" title="首次阅读代码"></a>首次阅读代码</h3><p>首次 TODO: 大致流程</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></div><div class="line">    <span class="comment"># 一些方法 ......</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">full_dispatch_request</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 主要是执行一些方法，最后返回响应</span></div><div class="line">        self.try_trigger_before_first_request_functions()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            request_started.send(self)</div><div class="line">            rv = self.preprocess_request()</div><div class="line">            <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                rv = self.dispatch_request()</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            rv = self.handle_user_exception(e)</div><div class="line">        <span class="comment"># ??? TODO</span></div><div class="line">        <span class="keyword">return</span> self.finalize_request(rv)</div><div class="line"></div><div class="line">    <span class="comment"># 这里是我们熟悉的 environ, 和 start_response</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :param environ: a WSGI environment</div><div class="line">        :param start_response: a callable accepting a status code,</div><div class="line">                               a list of headers and an optional</div><div class="line">                               exception context to start the response</div><div class="line">        """</div><div class="line">        <span class="comment"># 在这里对 environ 进行封装，创建请求上下文</span></div><div class="line">        ctx = self.request_context(environ)</div><div class="line">        error = <span class="keyword">None</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="comment"># 这里将请求上下文压入 _request_ctx_stack</span></div><div class="line">                ctx.push()</div><div class="line">                response = self.full_dispatch_request()</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                error = e</div><div class="line">                response = self.handle_exception(e)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                error = sys.exc_info()[<span class="number">1</span>]</div><div class="line">                <span class="keyword">raise</span></div><div class="line">            <span class="keyword">return</span> response(environ, start_response)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="keyword">if</span> self.should_ignore_error(error):</div><div class="line">                error = <span class="keyword">None</span></div><div class="line">            <span class="comment"># 这里将创建的请求上下文从中 _request_ctx_stack pop 出来</span></div><div class="line">            ctx.auto_pop(error)</div></pre></td></tr></table></figure>
<p>– TODO: 在这里需要重构一下</p>
<p>不过话说回来 请求上下文的容器 request_ctx_stack 到底是啥？</p>
<blockquote>
<p>另一种本地数据存储方式。</p>
</blockquote>
<p>在多线程的情况下，每一个请求都会创建一个线程，从这个请求被发起到销毁，我想拥有单独的变量（修改这个变量不会影响到其他变量），比如 sessions 之类。</p>
<p>显然，在多线程的情况下，以上的需求完全可以通过 threadlocal 来实现。</p>
<p>翻了 werkzeug 的文档，找到了原因：</p>
<blockquote>
<p>因为 python 里面的并发模型并不只有多线程一种。比如 greenlets, 每一个请求，都在一个线程里面。</p>
</blockquote>
<h2 id="0x02-这个时候，就需要看文档了。"><a href="#0x02-这个时候，就需要看文档了。" class="headerlink" title="0x02 这个时候，就需要看文档了。"></a>0x02 这个时候，就需要看文档了。</h2><h2 id="0x02-问题-2-Flask-中-Context-机制"><a href="#0x02-问题-2-Flask-中-Context-机制" class="headerlink" title="0x02 问题 2: Flask 中 Context 机制"></a>0x02 问题 2: Flask 中 Context 机制</h2><p>在 Django 完成一个 View 层的逻辑是这样的，Django 封装好了请求，请求经过 middleware 的处理，最后调用 login 函数，并且传入 request 方便 view 函数进行处理。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        error = someerror</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, error=error)</div></pre></td></tr></table></figure>
<p>在 Flask 完成一个 View 层的逻辑是这样的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</div><div class="line"><span class="meta">@app.route('/login', methods=['POST', 'GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        error = someerror</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, error=error)</div></pre></td></tr></table></figure>
<p>假如我是一个爱问问题的年轻人，这里肯定会有疑惑：</p>
<blockquote>
<p>从外部 import 过来，那就是利用了 python 自带的 import 单例模式。 那么线程和线程之间拿到的肯定是同一个 request 呀。但 Django 里面每个 request 都是不一样的，否则一些很基础功能的比如已经认证的用户就无法拿到了。</p>
</blockquote>
<p>我已经不是那个爱问问题的年轻人，因为年纪已经不小了。逃…</p>
<p>显然，每一次在 view 层引用的 request 肯定不是同一个 request , 那么，这是如何做到的呢？比如用 ThreadLocal , ThreadLocal 通过每个线程不同的 ID 拿到的本地变量，于是我们查看一下对应的实现。 这个 request 来自于 global.py , 使用了一个 werkzeug.local 里面的 LocalProxy</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</div><div class="line"><span class="keyword">from</span> werkzeug.local <span class="keyword">import</span> LocalStack, LocalProxy</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span><span class="params">(name)</span>:</span></div><div class="line">    top = _request_ctx_stack.top</div><div class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</div><div class="line">    <span class="keyword">return</span> getattr(top, name)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_app_object</span><span class="params">(name)</span>:</span></div><div class="line">    top = _app_ctx_stack.top</div><div class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</div><div class="line">    <span class="keyword">return</span> getattr(top, name)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_find_app</span><span class="params">()</span>:</span></div><div class="line">    top = _app_ctx_stack.top</div><div class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</div><div class="line">    <span class="keyword">return</span> top.app</div><div class="line"></div><div class="line"><span class="comment"># context locals</span></div><div class="line">_request_ctx_stack = LocalStack()</div><div class="line">_app_ctx_stack = LocalStack()</div><div class="line">current_app = LocalProxy(_find_app)</div><div class="line"><span class="comment"># 这就是我们需要的注意的地方，LocalProxy</span></div><div class="line">request = LocalProxy(partial(_lookup_req_object, <span class="string">'request'</span>))</div><div class="line">session = LocalProxy(partial(_lookup_req_object, <span class="string">'session'</span>))</div><div class="line">g = LocalProxy(partial(_lookup_app_object, <span class="string">'g'</span>))</div></pre></td></tr></table></figure>
<p>看到这里一阵蛋疼，貌似没有 threadlocal ？再次查看相关实现最后还是定位到了如何区分不同的 request 的核心代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># since each thread has its own greenlet we can just use those as identifiers</span></div><div class="line"><span class="comment"># for the context.  If greenlets are not available we fall back to the</span></div><div class="line"><span class="comment"># current thread ident depending on where it is.</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> greenlet <span class="keyword">import</span> getcurrent <span class="keyword">as</span> get_ident</div><div class="line">    <span class="comment"># greenlet 的代码是 C, 时间长没看 C 代码了，看了半天没看明白</span></div><div class="line">    <span class="comment"># 翻了文档返回当前的 greenlet, 也就是返回调用此函数的 greenlet</span></div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">from</span> thread <span class="keyword">import</span> get_ident</div><div class="line">    <span class="keyword">except</span> ImportError:</div><div class="line">        <span class="keyword">from</span> _thread <span class="keyword">import</span> get_ident</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></div><div class="line">    __slots__ = (<span class="string">'__storage__'</span>, <span class="string">'__ident_func__'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        object.__setattr__(self, <span class="string">'__storage__'</span>, &#123;&#125;)</div><div class="line">        <span class="comment"># 这里传递的 ident 就可以直接</span></div><div class="line">        object.__setattr__(self, <span class="string">'__ident_func__'</span>, get_ident)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span>:</span></div><div class="line">    <span class="comment"># 用 local 实现的栈</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalProxy</span>:</span></div><div class="line">    <span class="comment"># 一个 local 的代理器</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></div><div class="line">    <span class="keyword">if</span> name == <span class="string">'__members__'</span>:</div><div class="line">        <span class="keyword">return</span> dir(self._get_current_object())</div><div class="line">    <span class="keyword">return</span> getattr(self._get_current_object(), name)</div></pre></td></tr></table></figure>
<p>即：</p>
<ol>
<li>当 Flask 以多线程模型运行的时候，则使用的是 threadlocal 方式</li>
<li>当 Flask 以 greenlet 的模型运行的时候，则使用的是 greenlet 区分不同</li>
</ol>
<p>接下来回头看一下处理 request 的逻辑</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</div><div class="line"><span class="meta">@app.route('/login', methods=['POST', 'GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 这个 request 哪里来？</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        error = someerror</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, error=error)</div></pre></td></tr></table></figure>
<p>于是，我们就知道了，当引用 request 这个 LocalProxy 的时候，引用的确实是同一个名称为 request 变量，并且这个变量也确实是 LocalProxy 的实例</p>
<blockquote>
<p>但是当使用 request.method 的时候，LocalProxy 重载了 取到的则是另一个『请求对象』的 method.</p>
</blockquote>
<p>于是拿到当前请求的信息。</p>
<p>当然，其实我们也可以依据利用这个技巧写一个 currentuser 的 ProxyLocal, 然后在每个 view 层里面使用 user.has_something 进行操作。</p>
<h2 id="0x03-问题-3-Flask-中官方的机制"><a href="#0x03-问题-3-Flask-中官方的机制" class="headerlink" title="0x03 问题 3: Flask 中官方的机制"></a>0x03 问题 3: Flask 中官方的机制</h2><h2 id="0x04-问题-3-Flask-中是如何做到优雅扩展的"><a href="#0x04-问题-3-Flask-中是如何做到优雅扩展的" class="headerlink" title="0x04 问题 3: Flask 中是如何做到优雅扩展的"></a>0x04 问题 3: Flask 中是如何做到优雅扩展的</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-03-09</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;系列文章先暂时停更一周。今天换换口味。&lt;/p&gt;
&lt;p&gt;久闻 Flask 是众多 Pythonist 
    
    </summary>
    
      <category term="后端开发" scheme="http://twocucao.xyz/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
      <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="RestAPI" scheme="http://twocucao.xyz/tags/RestAPI/"/>
    
      <category term="Flask" scheme="http://twocucao.xyz/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>YaDjangoBlog 之前后端分离篇</title>
    <link href="http://twocucao.xyz/2018/03/04/YaDjangoBlog%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%AF%87/"/>
    <id>http://twocucao.xyz/2018/03/04/YaDjangoBlog前后端分离篇/</id>
    <published>2018-03-04T00:38:47.000Z</published>
    <updated>2018-03-04T14:57:22.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文是 Django 全栈开发教程的第三篇 YaDjangoBlog 之前后端分离</p>
<p>目录在这里，已经更新的文章如下</p>
<ul>
<li>Django 全栈开发教程 - 2018 年不容错过的 Django 全栈项目 – 目录篇</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的开发环境配置</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的前后端设计</li>
</ul>
<p><strong>本文需要成四件事情：</strong></p>
<ul>
<li>第一件事情，解读 DjangoRestFramework, 通过简单的例子来引入用 DRF 的必要性，并且简单介绍 DRF 的 CBV 实现。</li>
<li>第二件事情，简单介绍 DRF 在本项目 YaDjangoBlog 中的使用</li>
<li>第三件事情，简单聊聊 RESTFULAPI 规范，并给出最佳实践参考。</li>
<li>第四件事情，简单解读一下 Django 处理请求流程代码。</li>
</ul>
<p>PS: 为了打字方便，下面的：</p>
<ul>
<li>DRF 指的是 DjangoRestFramework</li>
<li>CBV 指的是 Class Based View</li>
<li>FBV 指的是 Function Based View</li>
</ul>
<blockquote>
<p>坐稳了，开车了。</p>
</blockquote>
<h2 id="0x01-DjangorestFramework-解读"><a href="#0x01-DjangorestFramework-解读" class="headerlink" title="0x01 DjangorestFramework 解读"></a>0x01 DjangorestFramework 解读</h2><h3 id="为什么要用-DRF-呢？"><a href="#为什么要用-DRF-呢？" class="headerlink" title="为什么要用 DRF 呢？"></a>为什么要用 DRF 呢？</h3><p>使用一个库的原因，无非就是为了：</p>
<ol>
<li>节省开发者自己造轮子的时间。</li>
<li>有利于代码的可维护性 / 或者程序的健壮性。</li>
</ol>
<p>具体落实到 DRF, 有哪些具体的优点呢？</p>
<ol>
<li>可直接浏览调试的界面。让前端调试起来欲罢不能的功能。</li>
<li>用 DRF 的方式快速批量开接口</li>
<li>分页、序列化、校验、登录、权限、Web 附加文档、限流，高度的可扩展性。哪里不爽扩展哪里，so easy</li>
<li>算的上是 Django 社区最好的 RESTFUL 框架的轮子了。</li>
<li>完善的社区支持，比如 guardian/django-filter 等等结合。</li>
</ol>
<h3 id="不使用-DRF-应该如何写-WebAPI-做呢？"><a href="#不使用-DRF-应该如何写-WebAPI-做呢？" class="headerlink" title="不使用 DRF 应该如何写 WebAPI 做呢？"></a>不使用 DRF 应该如何写 WebAPI 做呢？</h3><p>我们先看看，不使用 DRF 的时代，API 是如何编写的。</p>
<p>这里我们用 function based view 来简单说明。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 最简单版本</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_hello</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">return</span> JsonResponse(&#123;</div><div class="line">        <span class="string">"这就是 key"</span>: <span class="string">"这就是 value"</span>,</div><div class="line">        <span class="string">"时间"</span>: time.time()</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>刚开始学 DRF 的时候，我也有这种疑惑，这有必要需要一个 RESTFULAPI 的框架嘛？捋起袖子，JSON API 甩起来开咯。</p>
<p>之所以得出这个结论，是因为这个例子实在是过于简单。</p>
<p>当涉及到一定复杂程度的 API 的时候，问题就来了：</p>
<ol>
<li>权限是否需要区分？</li>
<li>分页需不需要做？</li>
<li>前端人员提交 Form 表单时，只能通过命令行或者是 POSTMAN 之类的工具提交参数，这会不会带来不便？后端人员写这些表单的各个字段，也是很手酸的事情。</li>
<li>拼接字典或者是字符串倒也还好，能不能有个序列器帮我直接序列化这模型，并且如果模型和模型之间有联系，最好也可以帮我完成模型和模型之间的关联。</li>
<li>Profile API 应该如何做？</li>
</ol>
<p>这都是我们需要考虑的。</p>
<p>如果不用 DRF, 而是由后端程序员直接写这些代码的话，也不是不行。</p>
<ol>
<li>对于第一点，可以直接在 fbv 上面加装饰器。</li>
<li>对于第二点，分页的时候可以直接将逻辑写在 fbv 里面。</li>
<li>前端 er 直接使用 PostMan 之类的工具就好了。</li>
<li>序列化，可以借助内置的序列化方法。</li>
<li>Profile 可以在提交参数的时候，附加一个参数比如 debug, 渲染的时候，将使用 HTML 里面内置一个 JSON 字符串的方式渲染出来。这样的话，就可以使用 Django Debug Tools 进行 Profile 了。</li>
</ol>
<p>很显然，这是个系统性的活。 假如接下来还要考虑限流、RESTFULAPI 的设计，这就相当蛋疼了。</p>
<p>显然，我们的 FBV 就会是这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@a_authority</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex_hello</span><span class="params">(request)</span>:</span></div><div class="line">    params = getParams(request)</div><div class="line">    .....</div><div class="line">    query_results = SomeModels.some_query()</div><div class="line">    .....</div><div class="line">    results = SomeModelsSerial(query_results)</div><div class="line">    .....</div><div class="line">    <span class="keyword">return</span> JsonResponse(results)</div></pre></td></tr></table></figure>
<p>看起来似乎是有规律可循的，既然有规律可循，就能封装一下，减轻负担。FBV 已经这样了，显然只能每次都要硬编码这些取参数，查询，序列化。当然，如果用生成器也能简化一部分函数代码。yield 实现方法太丑还是弃用吧。</p>
<p>我们试试 CBV 看看如何。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 继承并重写方法</span></div><div class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> View</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></div><div class="line">        query_results = SomeModels.some_query()</div><div class="line">        .....</div><div class="line">        results = SomeModelsSerial(query_results)</div><div class="line">        .....</div><div class="line">        <span class="keyword">return</span> results</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></div><div class="line">        query_results = SomeModels.some_query()</div><div class="line">        .....</div><div class="line">        results = SomeModelsSerial(query_results)</div><div class="line">        .....</div><div class="line">        <span class="keyword">return</span> results</div><div class="line"></div><div class="line">    .....</div><div class="line"></div><div class="line">    <span class="comment"># 这里相当于 view 函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="comment"># 这里处理正式处理之前的逻辑，比如权限判断。</span></div><div class="line">        <span class="comment"># 如果是 GET 方法，则调用</span></div><div class="line">        results = self.get(request, *args, **kwargs):</div><div class="line">        <span class="comment"># 这里处理正式处理之后的逻辑，比如统计 list 的 total 值，加上时间戳</span></div><div class="line">        <span class="keyword">return</span> JsonResponse(results)</div></pre></td></tr></table></figure>
<p>于是，除了使用 FBV 进行硬编码之外，还可以使用 CBV 的基类 进行扩展定制。</p>
<p>我们思考一下：</p>
<ol>
<li>假如我想渲染某个模型的 JSON 列表，就可以定制一个 ListViewAPI 出来。如果需要一个 DetailViewAPI, 就定制一个 DetailViewAPI 出来。</li>
<li>我们再声明一些 Permission 类，序列化类，模型，然后在 dispatch 中直接使用这些东西的话，就只需要在 get 和 post 里面编写一些最核心的逻辑了。</li>
<li>甚至，指定了分页器和查询，都完全不需要再 get 和 post 里面写代码。</li>
</ol>
<p>恭喜你，读到这里，你已经可以写一个极简的 DRF 出来了。</p>
<p>但写成 DRF 这种量级的程序，还需要做很多很多事情。</p>
<h3 id="DRF-处理请求的流程"><a href="#DRF-处理请求的流程" class="headerlink" title="DRF 处理请求的流程"></a>DRF 处理请求的流程</h3><p>要知道 DRF 的处理请求的流程，就要先知道 Django 的处理请求流程。</p>
<p>宏观来看</p>
<ol>
<li>请求先经过 MiddleWare , 接着判断 urlconf （默认为 ROOT_URLCONF),</li>
<li>匹配 URL, 将请求上下文 dispatch 到具体的 view.</li>
<li>处理完毕，经过 MiddleWare</li>
</ol>
<p><a href="https://docs.djangoproject.com/en/2.0/topics/http/urls/" target="_blank" rel="external">https://docs.djangoproject.com/en/2.0/topics/http/urls/</a></p>
<p>在本文的结尾的时候，我也将带大家从源码角度过一下，涉及到这个流程的相关的源码。这里先跳过。</p>
<p>那么，DRF 是如何处理一个请求的呢？我们忽略路由之类的东西，直接看对应的 CBV 的源码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></div><div class="line"></div><div class="line">    renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES</div><div class="line">    parser_classes = api_settings.DEFAULT_PARSER_CLASSES</div><div class="line">    authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES</div><div class="line">    throttle_classes = api_settings.DEFAULT_THROTTLE_CLASSES</div><div class="line">    permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES</div><div class="line">    content_negotiation_class = api_settings.DEFAULT_CONTENT_NEGOTIATION_CLASS</div><div class="line">    metadata_class = api_settings.DEFAULT_METADATA_CLASS</div><div class="line">    versioning_class = api_settings.DEFAULT_VERSIONING_CLASS</div><div class="line"></div><div class="line">    <span class="comment"># ...... 其他方法</span></div><div class="line"></div><div class="line">    <span class="comment"># Dispatch methods</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Returns the initial request object.</div><div class="line">        """</div><div class="line">        parser_context = self.get_parser_context(request)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Request(</div><div class="line">            request,</div><div class="line">            parsers=self.get_parsers(),</div><div class="line">            authenticators=self.get_authenticators(),</div><div class="line">            negotiator=self.get_content_negotiator(),</div><div class="line">            parser_context=parser_context</div><div class="line">        )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Runs anything that needs to occur prior to calling the method handler.</div><div class="line">        """</div><div class="line">        self.format_kwarg = self.get_format_suffix(**kwargs)</div><div class="line"></div><div class="line">        <span class="comment"># Perform content negotiation and store the accepted info on the request</span></div><div class="line">        neg = self.perform_content_negotiation(request)</div><div class="line">        request.accepted_renderer, request.accepted_media_type = neg</div><div class="line"></div><div class="line">        <span class="comment"># Determine the API version, if versioning is in use.</span></div><div class="line">        version, scheme = self.determine_version(request, *args, **kwargs)</div><div class="line">        request.version, request.versioning_scheme = version, scheme</div><div class="line"></div><div class="line">        <span class="comment"># Ensure that the incoming request is permitted</span></div><div class="line">        self.perform_authentication(request)</div><div class="line">        self.check_permissions(request)</div><div class="line">        self.check_throttles(request)</div><div class="line"></div><div class="line">    <span class="comment"># Note: Views are made CSRF exempt from within `as_view` as to prevent</span></div><div class="line">    <span class="comment"># accidental removal of this exemption in cases where `dispatch` needs to</span></div><div class="line">    <span class="comment"># be overridden.</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        `.dispatch()` is pretty much the same as Django's regular dispatch,</div><div class="line">        but with extra hooks for startup, finalize, and exception handling.</div><div class="line">        """</div><div class="line">        self.args = args</div><div class="line">        self.kwargs = kwargs</div><div class="line">        <span class="comment"># 这里需要注意</span></div><div class="line">        request = self.initialize_request(request, *args, **kwargs)</div><div class="line">        self.request = request</div><div class="line">        self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># 这里需要注意</span></div><div class="line">            self.initial(request, *args, **kwargs)</div><div class="line"></div><div class="line">            <span class="comment"># Get the appropriate handler method</span></div><div class="line">            <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</div><div class="line">                handler = getattr(self, request.method.lower(),</div><div class="line">                                  self.http_method_not_allowed)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                handler = self.http_method_not_allowed</div><div class="line"></div><div class="line">            response = handler(request, *args, **kwargs)</div><div class="line"></div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</div><div class="line">            response = self.handle_exception(exc)</div><div class="line"></div><div class="line">        self.response = self.finalize_response(request, response, *args, **kwargs)</div><div class="line">        <span class="keyword">return</span> self.response</div></pre></td></tr></table></figure>
<p>可以看出，当请求到达 dispatch 的时候，DRF 添加了一些钩子函数，用于开始 / 结束 / 错误控制。</p>
<ol>
<li>在 initialize_request 的时候，对 request 进行封装，添加上 parser / auth / negoriator / parser context</li>
<li>接着在 initial 方法里面校验了版本，进行了认证和鉴权，检查了限流</li>
</ol>
<p>一看，其实与我们之前想封装 APIView 的想法不谋而合，而我们只是想想，DRF 是详细实现。</p>
<h2 id="0x02-DjangorestFramework-的使用案例"><a href="#0x02-DjangorestFramework-的使用案例" class="headerlink" title="0x02 DjangorestFramework 的使用案例"></a>0x02 DjangorestFramework 的使用案例</h2><h3 id="如何开-WebAPI-接口"><a href="#如何开-WebAPI-接口" class="headerlink" title="如何开 WebAPI 接口"></a>如何开 WebAPI 接口</h3><p>回到我们的 yadjangoblog 上面来。这个时候我们想开一个博文列表 API:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1. 定义序列器，用于序列化查询的每一条。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostListSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    category = BlogCategorySerializer(read_only=<span class="keyword">True</span>)</div><div class="line">    tags = BlogTagSerializer(many=<span class="keyword">True</span>, read_only=<span class="keyword">True</span>)</div><div class="line">    title = serializers.CharField()</div><div class="line">    id = serializers.IntegerField()</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = BlogPost</div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'char_num'</span>, <span class="string">'vote_num'</span>, <span class="string">'category'</span>, <span class="string">'tags'</span>, <span class="string">'publish_date'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 2. 定义过滤器，可以通过过滤器进行查询</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostFilter</span><span class="params">(filters.FilterSet)</span>:</span></div><div class="line">    title = filters.CharFilter(lookup_expr=<span class="string">'contains'</span>)</div><div class="line">    having_tags = filters.Filter(name=<span class="string">"tags"</span>, lookup_expr=<span class="string">'in'</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = BlogPost</div><div class="line">        fields = (<span class="string">'title'</span>, <span class="string">'char_num'</span>, <span class="string">'category'</span>, <span class="string">'tags'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 3. 指定其他设置，具体大家看源码就好了。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostListAPIView</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    依照 category , tags , 时间 （年 / 月 / 日  年 / 月 年）</div><div class="line">    """</div><div class="line">    queryset = BlogPost.objects.all()</div><div class="line">    serializer_class = BlogPostListSerializer</div><div class="line">    filter_backends = (filters.DjangoFilterBackend, OrderingFilter,)</div><div class="line">    filter_class = BlogPostFilter</div><div class="line">    ordering_fields = (<span class="string">'publish_date'</span>,)</div><div class="line">    ordering = (<span class="string">'publish_date'</span>,)</div><div class="line">    permission_classes = (permissions.AllowAny,)</div><div class="line">    pagination_class = SmallResultsSetPagination</div></pre></td></tr></table></figure>
<p>在指定上面的操作之后，一个接口就快速的开出来了。</p>
<p>: TODO 插入一张图</p>
<p>当然，DRF 认认真真通读一遍的话，还是可以给自己节省不少时间的。</p>
<p>这是开接口，似乎，还少了什么，比如 Restful API.</p>
<h3 id="前端如何使用-WebAPI-接口"><a href="#前端如何使用-WebAPI-接口" class="headerlink" title="前端如何使用 WebAPI 接口"></a>前端如何使用 WebAPI 接口</h3><p>什么是 CORS 可以参考阮一峰的文章 <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
<p>在调试的时候，我们肯定是使用 ajax / fetch 方式请求。这就会遇到一个问题：</p>
<ul>
<li>跨域</li>
</ul>
<p>解决方式也很简单，服务端只要服务器实现了 CORS 接口，就可以跨源通信。</p>
<p>安装 django-cors-headers, 并在 settings 中开启 CORS_ORIGIN_ALLOW_ALL = True 即可。</p>
<p>这里参考了临书的解决方案，要感谢 @临书 , 附上参考地址 <a href="https://zhuanlan.zhihu.com/p/24893786" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/24893786</a></p>
<p>对于本项目而言，使用了 axios 请求库，直接 get 即可。详细看前端代码即可。</p>
<h2 id="0x03-RESTFUL-API-设计"><a href="#0x03-RESTFUL-API-设计" class="headerlink" title="0x03 RESTFUL API 设计"></a>0x03 RESTFUL API 设计</h2><p>开发过程中，尽量靠近 RESTFUL API 的设计，而不是照搬。</p>
<p>举个其他领域的例子，有的人表述美就只有：</p>
<ul>
<li>已撸</li>
</ul>
<p>但是不同的美各有各的模样：</p>
<ul>
<li>手如柔荑，肤如凝脂，领如蝤蛴，齿如瓠犀，螓首蛾眉，巧笑倩兮，美目盼兮。</li>
</ul>
<p>同样，放在 RESFUL 的时候确实也出现了这种情况：</p>
<p>几乎所有的业务逻辑最后会落实到数据表的 CURDE, 但是所有业务逻辑并不能完全使用 CRUDE 描述。</p>
<p>我们看下面的例子</p>
<h3 id="关于请求"><a href="#关于请求" class="headerlink" title="关于请求"></a>关于请求</h3><p>举个例子，RESTFUL 适合纯粹 CURDE 的设计风格。</p>
<p>比如，新增博客，更新博客，查询博客，删除博客，查看是否含有博客</p>
<p>但语义在某些场景下表述不足， 比如，设计订单的时候，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">URL: /api/v1/user/some_user/orders</div><div class="line">你查看订单集合，这个好理解。get 方法</div><div class="line">你新增订单，这个好理解。put 方法</div><div class="line">URL: /api/v1/user/some_user/order/xxxxxxx</div><div class="line">你删除订单，这个好理解。delete 方法</div><div class="line">你获取订单，这个好理解。get 方法</div><div class="line">你修改订单，这个好理解。post 方法</div><div class="line"></div><div class="line">但修改订单，有的时候可能会比较复杂，有可能是取消订单，有可能是评价订单，有可能是其他。而 RESTFUL 表达这种情况就有些语义不足了。</div></pre></td></tr></table></figure>
<p>当然，个人经验是，字段越多，越难靠近 RESTFUL 规范</p>
<p>这个时候，就需要设计者做好 RESTFULAPI 的设计与语义化的平衡了。</p>
<h3 id="关于响应"><a href="#关于响应" class="headerlink" title="关于响应"></a>关于响应</h3><p>关于响应设计，主要有两点需要注意：</p>
<ul>
<li>状态码 (HTTP 状态码，也业务逻辑通用状态码）</li>
<li>响应内容 包含 业务逻辑通用状态码，剩下的视具体情况而定。</li>
</ul>
<p>HTTP 状态码用于标记资源情况，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">200 表示获取资源</div><div class="line">404 表示 NOT FOUND</div></pre></td></tr></table></figure>
<p>但有时候也存在语义表达不足问题，一般前后端也会约定一个通用的状态码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">通用状态码 错误信息 含义 HTTP 状态码</div><div class="line">999	    unknow_v2_error	未知错误	400</div><div class="line">1000	need_permission	需要权限	403</div><div class="line">1001	uri_not_found	资源不存在	404</div><div class="line">1002	missing_args	参数不全	400</div><div class="line">1003	image_too_large	上传的图片太大	400</div><div class="line">....</div></pre></td></tr></table></figure>
<p>至于响应内容，一般都是见招拆招的。建议查看文章末尾的 Douban 的相关 API 规范来提升姿势。</p>
<h2 id="0x04-Django-的处理请求流程代码解读"><a href="#0x04-Django-的处理请求流程代码解读" class="headerlink" title="0x04 Django 的处理请求流程代码解读"></a>0x04 Django 的处理请求流程代码解读</h2><p>这小节属于一时兴起写的番外篇。和本文主体内容没啥必要的关联。不感兴趣的可以直接跳转到文章末尾点赞哈。</p>
<p>WSGI 全称叫做 web 服务器网关接口，通常情况下，gunicorn 或者 uwsgi 接收来自 nginx 转发来的请求之后，向 web app 提供了环境信息（叫请求上下文会不会好些）以及一个 callback. 这样的话，web app 就可以接收这个环境信息，处理完毕，通过回调函数处理请求，并返回响应。一个极简的 webapp 如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">app</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    <span class="string">"""Simplest possible application object"""</span></div><div class="line">    data = <span class="string">'Hello, World!\n'</span></div><div class="line">    status = <span class="string">'200 OK'</span></div><div class="line">    response_headers = [</div><div class="line">        (<span class="string">'Content-type'</span>,<span class="string">'text/plain'</span>),</div><div class="line">        (<span class="string">'Content-Length'</span>, str(len(data)))</div><div class="line">    ]</div><div class="line">    start_response(status, response_headers)</div><div class="line">    <span class="keyword">return</span> iter([data])</div></pre></td></tr></table></figure>
<p>现在我们看看 django 中是如何处理请求的。首先查看相关的 wsgi.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># wsgi.py</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> django.core.wsgi <span class="keyword">import</span> get_wsgi_application</div><div class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"config.settings"</span>)</div><div class="line">application = get_wsgi_application()</div><div class="line"></div><div class="line"><span class="comment"># 接着查看 get_wsgi_application</span></div><div class="line"><span class="keyword">import</span> django</div><div class="line"><span class="keyword">from</span> django.core.handlers.wsgi <span class="keyword">import</span> WSGIHandler</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_wsgi_application</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    The public interface to Django's WSGI support. Return a WSGI callable.</div><div class="line"></div><div class="line">    Avoids making django.core.handlers.WSGIHandler a public API, in case the</div><div class="line">    internal WSGI implementation changes or moves in the future.</div><div class="line">    """</div><div class="line">    django.setup(set_prefix=<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">return</span> WSGIHandler()</div><div class="line"></div><div class="line"><span class="comment"># 于是自然而言的看到了 WSGIHandler</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span><span class="params">(base.BaseHandler)</span>:</span></div><div class="line">    request_class = WSGIRequest</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        super().__init__(*args, **kwargs)</div><div class="line">        self.load_middleware()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">        <span class="comment"># 有木有看到 environ 和 start_response ?? 这就是极简 web app 中的 webapp 核心方法。</span></div><div class="line">        set_script_prefix(get_script_name(environ))</div><div class="line">        signals.request_started.send(sender=self.__class__, environ=environ)</div><div class="line">        request = self.request_class(environ)</div><div class="line">        <span class="comment"># 注意这一行，有请求处理逻辑 具体要见下面代码</span></div><div class="line">        response = self.get_response(request)</div><div class="line">        <span class="comment"># ......</span></div><div class="line">        <span class="keyword">return</span> response</div></pre></td></tr></table></figure>
<p>嗯，看到了子类，就要看看基类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseHandler</span>:</span></div><div class="line">    _request_middleware = <span class="keyword">None</span></div><div class="line">    _view_middleware = <span class="keyword">None</span></div><div class="line">    _template_response_middleware = <span class="keyword">None</span></div><div class="line">    _response_middleware = <span class="keyword">None</span></div><div class="line">    _exception_middleware = <span class="keyword">None</span></div><div class="line">    _middleware_chain = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_middleware</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        注册 MiddleWare, 并赋值 _middleware_chain 方法，使之调用的时候可以先按照顺序从 setting 的 middleware 里面处理 requests</div><div class="line">        并在处理 request 的最后调用 私有方法 _get_response</div><div class="line">        """</div><div class="line">        self._request_middleware = []</div><div class="line">        self._view_middleware = []</div><div class="line">        self._template_response_middleware = []</div><div class="line">        self._response_middleware = []</div><div class="line">        self._exception_middleware = []</div><div class="line"></div><div class="line">        handler = convert_exception_to_response(self._get_response)</div><div class="line">        <span class="comment"># 注意，这里面是倒着来的 代码中越在前面，实际运行的时候处理就越在后面</span></div><div class="line">        <span class="keyword">for</span> middleware_path <span class="keyword">in</span> reversed(settings.MIDDLEWARE):</div><div class="line">            <span class="comment"># 依次添加 view middleware / template middleware / exception middleware</span></div><div class="line">            middleware = import_string(middleware_path)</div><div class="line">            mw_instance = middleware(handler)</div><div class="line">            handler = convert_exception_to_response(mw_instance)</div><div class="line"></div><div class="line">        <span class="comment"># We only assign to this when initialization is complete as it is used</span></div><div class="line">        <span class="comment"># as a flag for initialization being complete.</span></div><div class="line">        self._middleware_chain = handler</div><div class="line"></div><div class="line">    .....</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_response</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="string">"""Return an HttpResponse object for the given HttpRequest."""</span></div><div class="line">        <span class="comment"># Setup default url resolver for this thread</span></div><div class="line">        set_urlconf(settings.ROOT_URLCONF)</div><div class="line"></div><div class="line">        response = self._middleware_chain(request)</div><div class="line">        <span class="comment"># ......</span></div><div class="line">        <span class="keyword">return</span> response</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_response</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Resolve and call the view, then apply view, exception, and</div><div class="line">        template_response middleware. This method is everything that happens</div><div class="line">        inside the request/response middleware.</div><div class="line">        """</div><div class="line">        response = <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="comment"># 1. 接着判断 urlconf （默认为 ROOT_URLCONF), 可以通过 middleware 进行设置</span></div><div class="line">        <span class="keyword">if</span> hasattr(request, <span class="string">'urlconf'</span>):</div><div class="line">            urlconf = request.urlconf</div><div class="line">            set_urlconf(urlconf)</div><div class="line">            resolver = get_resolver(urlconf)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            resolver = get_resolver()</div><div class="line"></div><div class="line">        resolver_match = resolver.resolve(request.path_info)</div><div class="line">        callback, callback_args, callback_kwargs = resolver_match</div><div class="line">        request.resolver_match = resolver_match</div><div class="line"></div><div class="line">        <span class="comment"># Apply view middleware....</span></div><div class="line">        <span class="comment"># 注意，这个就是 view 函数</span></div><div class="line">        wrapped_callback = self.make_view_atomic(callback)</div><div class="line">        response = wrapped_callback(request, *callback_args, **callback_kwargs)</div><div class="line">        <span class="comment"># Complain if the view returned None (a common error).</span></div><div class="line">        <span class="keyword">return</span> response</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception_by_middleware</span><span class="params">(self, exception, request)</span>:</span></div><div class="line">        <span class="comment"># ......</span></div></pre></td></tr></table></figure>
<p>上面代码比较表达的意思比较简单，值得注意的地方我都加了注释。</p>
<p>需要特别注意的就是 middleware_chain 这个属性（实际上是一个方法）, 正是这个方法使得注册的 middleware （在 load_middleware 方法里）可以在 fbv 或者 cbv 处理 request 之前，通过对 request 进行处理。</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE. 参考链接"></a>0xEE. 参考链接</h2><p>还犹豫啥，Django 前后端分离最佳实践，点赞后，快上车吧</p>
<ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog" target="_blank" rel="external">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog" target="_blank" rel="external">https://github.com/twocucao/YaDjangoBlog</a></li>
<li>扩展阅读之 douban restful api 设计  <a href="https://developers.douban.com/wiki/?title=api_v2" target="_blank" rel="external">https://developers.douban.com/wiki/?title=api_v2</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-22</strong> 开启本文</li>
<li><strong>2018-03-04</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文是 Django 全栈开发教程的第三篇 YaDjangoBlog 之前后端分离&lt;/p&gt;
&lt;p&gt;目
    
    </summary>
    
      <category term="后端开发" scheme="http://twocucao.xyz/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Django" scheme="http://twocucao.xyz/tags/Django/"/>
    
      <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
      <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="RestAPI" scheme="http://twocucao.xyz/tags/RestAPI/"/>
    
  </entry>
  
  <entry>
    <title>YaDjangoBlog 的前后端设计</title>
    <link href="http://twocucao.xyz/2018/02/23/YaDjangoBlog%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%9D%E6%AD%A5%E8%AE%BE%E8%AE%A1/"/>
    <id>http://twocucao.xyz/2018/02/23/YaDjangoBlog的前后端初步设计/</id>
    <published>2018-02-23T02:13:30.000Z</published>
    <updated>2018-03-18T06:47:33.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文是 Django 全栈开发教程的第二篇</p>
<p>目录在这里，已经更新的文章如下</p>
<ul>
<li>Django 全栈开发教程 - 2018 年不容错过的 Django 全栈项目 – 目录篇</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的开发环境配置</li>
</ul>
<p>本文需要完成两件事情：</p>
<ul>
<li>第一件事情，回答一个问题：为什么要选择博客系统作为教程而不是别的？</li>
<li>第二件事情，简单说说 YaDjangoBlog 的前后端设计。</li>
</ul>
<h2 id="0x01-为什么是博客系统"><a href="#0x01-为什么是博客系统" class="headerlink" title="0x01 为什么是博客系统"></a>0x01 为什么是博客系统</h2><p>在目录评论区，有个读者问：</p>
<p>为什么选择博客系统？而不是别的系统？</p>
<p>一言以蔽之：因为合适。</p>
<p>为什么说合适？</p>
<ol>
<li>第一点：代码量相对合适，业务逻辑大家都很清楚，博客系统说简单也简单，说复杂也复杂，待会我们就可以谈到。简单的例子反而是入门和深入了解 Django 技术栈（而不是设计一个优秀的程序）的最佳案例。</li>
<li>第二点：言简意赅，知识点覆盖全面，注意，我们要学习的 Django 技术栈，Django 技术栈，Django 技术栈。不是学高可用架构设计，不是超级复杂系统的设计，不是业务逻辑设计。</li>
<li>第三点：日常开发都是见招拆招，依据业务逻辑来，作为开发者，总不能直接把公司的业务代码上传的 Github 上吧？</li>
</ol>
<p>不妨想想，其实写个博客系统压根就不需要这么麻烦的使用各种组件来给自己的博客系统贴金。那么，我为何还是要『为赋新词强说愁』呢？</p>
<p>答案是『醉翁之意不在酒，在乎山水之间』。通过这个简单的博客，来带大家过一遍 Django 技术栈，具体能学的多好，看个人努力。</p>
<p>当然，借此也吐槽一下，有的人认为，博客系统简单，不就是 Blog / Category / Tag / Comment，有啥可练手的？</p>
<p>其实不然，设计一个博客系统完全可以按照复杂系统的高标准来设计，举例来说：</p>
<ol>
<li>ORM 设计：如果我想把 Category/Tags/Comment 变成通用的，即可以对 Blog 进行分类 / 标签 / 评论，对新建的 Product 模型 也可以进行分类 / 标签 / 评论。</li>
<li>数据库设计：Category 可能有三到四级子分类怎么办？ Comment 支持评论区互相回复评论。这里的不但要通用，还要用树形结构实现放在一张表里面。</li>
<li>全文搜索：Blog 的 content 字段是长文对吧？这个总不能每次搜索都是 like 查询吧？Elasticsearch 怎么搞。</li>
<li>缓存和定时任务：PV 和 UV 量总不能每次访问都更新一次数据库吧？为什么不用 Redis 呢？用上了 Redis, 为什么不加上定时任务呢帮忙把 PV/UV 以及点赞数量啥的定期更新到数据库中？</li>
<li>Celery ：定时任务为啥不用神器 Celery 呢？</li>
<li>其他问题：如何对某个接口进行 profile? 如果逻辑比较复杂，是不是要补上单元测试。Django 单实例如何使用多域名？</li>
</ol>
<p>那一套太祖长拳从宋兵甲手里使出来，不过是威力平平；</p>
<blockquote>
<p>如果是从那乔峰手里使出来，那威力如何？</p>
</blockquote>
<h2 id="0x02-前后端分离"><a href="#0x02-前后端分离" class="headerlink" title="0x02 前后端分离"></a>0x02 前后端分离</h2><h3 id="前后端分离的必要性"><a href="#前后端分离的必要性" class="headerlink" title="前后端分离的必要性"></a>前后端分离的必要性</h3><p>为什么前后端分离？</p>
<ul>
<li>一是需求：简简单单的套模板已经不够了，还要富交互，代码量上去了。</li>
<li>二是技术条件成熟：NodeJS 横空出世，使得 JS 成了不仅仅可以在浏览器中运行的语言，成了一门和 Java,Python,Ruby 一样的客户端语言。</li>
<li>三是生态：轮子多，这车轱辘如你所愿。</li>
</ul>
<p>前端的职责变重，代码量则上来了，相应的，模块化工具就自然出来了。</p>
<blockquote>
<p>PS: 前后端分离也不是啥新概念，当年开发客户端的不也是前后端分离？ 当然，这里的前后端分离指的是浏览器与服务器的前后端分离。</p>
</blockquote>
<p>前后端分离之后，依旧是前端发送请求，后端返回对应的数据。</p>
<p>那么，哪里变了？我认为，主要有两点：</p>
<ol>
<li>前后端流程可以并行开发，即前后端可以同时干活。并且责任明确。</li>
<li>JS 可以干客户端语言干的事情。</li>
</ol>
<p>以前，我们都是由美工设计页面，前端开发模板，后端开发 API, 前端再套 API, 再交给后端，后端接过前端的页面套模板。一切看起来是那么的和谐。</p>
<p>但是，就是这么一个看起来一个简单的套模板 / 开发 API，就是一个时间黑洞。</p>
<p>比如说：</p>
<ul>
<li>小美（美工）设计好设计稿，交给小钱（前端）</li>
<li>小钱完成前端页面的设计，</li>
<li>小侯（后端）开发 API,</li>
<li>小钱套 API 后，完成页面设计，并将这个页面交给小侯</li>
<li>小侯要做的事情，把小钱的前端页面切分成模板引擎里面的语法，从数据库里面取数据，交给模板引擎渲染，完成套前端页面流程。</li>
</ul>
<p>接着，产品经理跳出来，指出页面设计中有两个地方需要优化，于是：</p>
<p>大家面临的选择就只有两个：</p>
<ol>
<li>合起伙来，解决掉产品经理</li>
<li>大家在反反复复，迂迂回回的需求变更、BUG 解决、调试中，浪费了一些不应该浪费的时间。</li>
</ol>
<p>那么前后端分离了，前后端的开发就如同客户端开发和服务端开发一样：</p>
<ul>
<li>前端 / 客户端 负责路由，负责什么时候请求什么 API, 该去优化性能就去优化性能。</li>
<li><p>后端 / 服务端 负责折腾后端组件，优化性能。</p>
</li>
<li><p>如果调页面，直接找前端去就好了。</p>
</li>
<li>如果是数据或者 API 有问题，直接找后端就好了。</li>
</ul>
<p>这么一分，其实职责就好界定了很多，由于修改与优化不会引发两个工种的交叉合作（前端改完，后端套模板）,BUG 率就减少了很多。</p>
<blockquote>
<p>PS: 其实职责好界定很多，但不能避免推锅。</p>
</blockquote>
<p>由于本博客只关注 Django 技术栈，而所谓使用 JavaScript 前后端通吃的『大前端』, 则不在我们的讨论范围之内。</p>
<blockquote>
<p>比起使用一门语言前后端通吃，笔者还是比较倾向于『见人说人话，见鬼说鬼话』, 即使用多种语言，去处理合适的问题的。</p>
</blockquote>
<h3 id="前后端分离的成本"><a href="#前后端分离的成本" class="headerlink" title="前后端分离的成本"></a>前后端分离的成本</h3><p>前后端分离并不是没有代价的。</p>
<p>对于前端：</p>
<ul>
<li>首次页面 Loading 速度</li>
<li>JWT 认证请求</li>
<li>在特定场景下，有些看起来在多页面开发过程中比较简单的事情，反而比较复杂。</li>
<li>需要注意内存的使用率。</li>
</ul>
<p>对于后端：</p>
<ul>
<li>JWT 认证响应，以前是 session 认证，而且 Django 都给你实现好了。现在变了，往往大家使用的都是 JWT 作为认证。</li>
</ul>
<p>但这些成本相比与节省的开发时间相比都是微不足道的。</p>
<p>当然，我会在本系列的后面抽出一篇教程来专门讲解 Django 内置用户的扩展和前后端分离的登录认证。</p>
<h2 id="0x03-博客系统设计"><a href="#0x03-博客系统设计" class="headerlink" title="0x03 博客系统设计"></a>0x03 博客系统设计</h2><p>这个博客最初要解决的问题是：</p>
<ol>
<li>hexo 用腻了，想自己写一个简单的博客系统。</li>
<li>这个博客要可以导入文章，我不需要编辑器功能，在本地编辑完毕之后，导入数据库就好。</li>
</ol>
<h3 id="页面构成"><a href="#页面构成" class="headerlink" title="页面构成"></a>页面构成</h3><ol>
<li>首页</li>
<li>博客列表页</li>
<li>博客存档页</li>
<li>博客历史页</li>
<li>博客详情页</li>
<li>关于我页面</li>
</ol>
<h3 id="模型构成"><a href="#模型构成" class="headerlink" title="模型构成"></a>模型构成</h3><p>首先 M 模型层</p>
<ol>
<li>PostgreSQL : 博文 / 博文类型 / 博文标签</li>
<li>Elasticsearch : 博文</li>
<li>Redis : 每篇博文的阅读量，点赞量</li>
</ol>
<p>这里需要注意的是：</p>
<ul>
<li>第一：博文类型-博文：1 对多，博文标签-博文：多对多</li>
<li>第二：博文中的 content 为文章内容，即可以在 Elasticsearch 中作为全文搜索的字段。具体降到 Elasticsearch 的时候我们会详细说明。</li>
<li>第三：博文中的 阅读量和点赞量放在 Redis 里面，由 Celery 的定时任务定期刷到内存中。</li>
</ul>
<p>再考虑 VT 视图模板层，VT 层，会根据情况 DjangorestFramework 来进行序列化和反序列化。</p>
<p>在设计模型的时候，尽量将涉及到模型的操作放在模型内。</p>
<p>关于如何设计更好的模型，在以后的文章将会讲解，先挖个坑。</p>
<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p>理想环境中，我们的架构图如下：</p>
<p>哦，不好意思，放错图了，是这样的。</p>
<p>但这样的架构应该有专门的人来维护。</p>
<p>于是在人力有限的情况下，本项目的架构图是这样的。</p>
<p>哦，不好意思，放错图了，是这样的。</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE. 参考链接"></a>0xEE. 参考链接</h2><p>还犹豫啥，Django 前后端分离最佳实践，点赞后，快上车吧</p>
<ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog" target="_blank" rel="external">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog" target="_blank" rel="external">https://github.com/twocucao/YaDjangoBlog</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-22</strong> 开启本文</li>
<li><strong>2018-02-27</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文是 Django 全栈开发教程的第二篇&lt;/p&gt;
&lt;p&gt;目录在这里，已经更新的文章如下&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="后端开发" scheme="http://twocucao.xyz/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Django" scheme="http://twocucao.xyz/tags/Django/"/>
    
      <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
      <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="RestAPI" scheme="http://twocucao.xyz/tags/RestAPI/"/>
    
  </entry>
  
  <entry>
    <title>YaDjangoBlog 之 前端 VueJS 篇</title>
    <link href="http://twocucao.xyz/2018/02/23/YaDjangoBlog%E4%B9%8B%E5%89%8D%E7%AB%AFVueJS%E7%AF%87/"/>
    <id>http://twocucao.xyz/2018/02/23/YaDjangoBlog之前端VueJS篇/</id>
    <published>2018-02-23T02:13:30.000Z</published>
    <updated>2018-03-18T03:20:11.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文是 Django 全栈开发教程的第四篇</p>
<p>目录在这里，已经更新的文章如下</p>
<ul>
<li>Django 全栈开发教程 - 2018 年不容错过的 Django 全栈项目 – 目录篇</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的开发环境配置</li>
</ul>
<p>本文需要完成三件事情：</p>
<ul>
<li>第一件事情，介绍为什么选择 VueJS？</li>
<li>第二件事情，介绍 Vue 项目的一些注意点。</li>
<li>第三件事情，蜻蜓点水搬的带大家过一编，YaDjangoBlog 前端的项目结构，静态资源管理，路由以及组件。</li>
</ul>
<h2 id="0x01-为什么是-VueJS"><a href="#0x01-为什么是-VueJS" class="headerlink" title="0x01 为什么是 VueJS"></a>0x01 为什么是 VueJS</h2><p>国产框架 + 语法简洁是我入坑 VueJS 初衷。</p>
<p>后来却是 Vue 的丰富的生态和简洁的语法吸引了继续用下去。</p>
<p>这里要感谢为 VueJS 持续贡献代码的人，从 Vue 本身，到 VueCLI, 到 Router, 到 VueX, 如果没有那么多人为之贡献代码，可能今天这一小节就变成了，『为什么是 React 了』逃。</p>
<p>Vue 自称为 Vue 渐进式 JavaScript 框架。</p>
<p>什么是渐进式？</p>
<p>就是你可以逐步按照 Vue 的方式逐渐引入一些 Vue 的组件到项目中。没有必要上来就是 Vue 全家桶，依据场景逐步引入。</p>
<p>参考链接 <a href="https://www.zhihu.com/question/51907207" target="_blank" rel="external">https://www.zhihu.com/question/51907207</a></p>
<p>然而，依据我的经验，vue 全家桶用起来还是很舒服的。这里必须要感谢 Vue 社区。</p>
<p>模板语法，数据驱动，双向绑定。写起代码来简直就是一个字，爽。</p>
<h2 id="0x02-Vue-项目的一些注意点"><a href="#0x02-Vue-项目的一些注意点" class="headerlink" title="0x02 Vue 项目的一些注意点"></a>0x02 Vue 项目的一些注意点</h2><p>从项目角度，我们想想前端项目有哪些地方是需要注意的：</p>
<ol>
<li>开发环境和线上环境区分</li>
<li>前端资源打包<ul>
<li>Vue 项目资源打包</li>
<li>DLL 打包</li>
<li>字体文件打包</li>
</ul>
</li>
<li>CSS/JS 如何管理</li>
<li>有哪些必要的依赖，如何引入第三方库</li>
<li>有哪些页面级组件，有哪些小组件？应该安排这些组件？组件与组件应该怎么通讯？</li>
<li>路由怎么管理</li>
<li>状态怎么管理</li>
<li>登录，鉴权怎么做</li>
</ol>
<p>限于篇幅，我就不一一讲解了。挑在 YaDjangoBlog 中使用到的技术简单介绍一下。</p>
<p>再次感谢 Vue 社区出品的 VueCLI 以及 Webpack 模板。</p>
<p>下面依次介绍：</p>
<ol>
<li>项目结构</li>
<li>静态资源管理</li>
<li>路由</li>
<li>组件</li>
</ol>
<h2 id="0x03-项目结构"><a href="#0x03-项目结构" class="headerlink" title="0x03 项目结构"></a>0x03 项目结构</h2><p>首先，YaDjangoBlog 文件的前端目录如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── README.md</div><div class="line">├── build</div><div class="line">│   ├── build.js</div><div class="line">│   ├── build_iconfont.js <span class="comment"># 构建 iconfont 脚本</span></div><div class="line">│   ├── check-versions.js</div><div class="line">│   ├── logo.png</div><div class="line">│   ├── utils.js</div><div class="line">│   ├── vue-loader.conf.js</div><div class="line">│   ├── webpack.base.conf.js</div><div class="line">│   ├── webpack.dev.conf.js <span class="comment"># 增加了 AutoDllPlugin 用于自动打包 DLL</span></div><div class="line">│   └── webpack.prod.conf.js</div><div class="line">├── config</div><div class="line">│   ├── dev.env.js <span class="comment"># 可以在这里添加开发环境的环境变脸</span></div><div class="line">│   ├── index.js</div><div class="line">│   ├── prod.env.js</div><div class="line">│   └── test.env.js</div><div class="line">├── extra</div><div class="line">│   └── svg-icon <span class="comment"># 这里存放需要生成 iconfont 的字体文件。</span></div><div class="line">├── index.html</div><div class="line">├── package.json <span class="comment"># 这里添加了一些构建脚本</span></div><div class="line">├── packages</div><div class="line">│   └── theme-future <span class="comment"># 注意，这里是另一个子项目，使用 Gulp 构建的纯 CSS 子项目。</span></div><div class="line">├── src</div><div class="line">│   ├── App.vue</div><div class="line">│   ├── api <span class="comment"># 对 axios 进行初步封装</span></div><div class="line">│   ├── assets <span class="comment"># 从使用 Gulp 生成的 CSS 可以放在这里。</span></div><div class="line">│   ├── components <span class="comment"># 跨页面的组件放在这里</span></div><div class="line">│   ├── directives <span class="comment"># 指令</span></div><div class="line">│   ├── filters    <span class="comment"># 过滤器</span></div><div class="line">│   ├── main.js    <span class="comment"># 初始化 Vue 实例</span></div><div class="line">│   ├── pages      <span class="comment"># 页面</span></div><div class="line">│   ├── router     <span class="comment"># 路由</span></div><div class="line">│   ├── store      <span class="comment"># vuex</span></div><div class="line">│   └── utils      <span class="comment"># 常用工具类</span></div><div class="line">├── static</div><div class="line">│   ├── hightlight <span class="comment"># hightlight 脚本</span></div><div class="line">│   ├── iconfont   <span class="comment"># 本地构建的 iconfont</span></div><div class="line">│   ├── images</div><div class="line">│   └── js</div><div class="line">├── <span class="built_in">test</span>           <span class="comment"># 没写测试，大家开源项目不要学我.... 逃</span></div><div class="line">│   ├── e2e</div><div class="line">│   └── unit</div><div class="line">└── yarn.lock</div></pre></td></tr></table></figure>
<h2 id="0x04-静态资源管理"><a href="#0x04-静态资源管理" class="headerlink" title="0x04 静态资源管理"></a>0x04 静态资源管理</h2><p>静态资源管理，主要涉及到 JS/CSS/ 图片 / 字体</p>
<p>首先，由于使用了 VueCli 的模板，所以大可以按照 VueCli 提供的写法来写。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Footer</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'app'</span>,</div><div class="line">  <span class="attr">components</span>: &#123;</div><div class="line">    <span class="attr">Header</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./pages/commons/Header.vue'</span>),</div><div class="line">    <span class="attr">Footer</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./pages/commons/Footer.vue'</span>),</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="undefined"></span></div><div class="line">  $primary-color: #37b24d;</div><div class="line">  $dark-color: #2b5732;</div><div class="line">  $body-bg: #f9f9f9;</div><div class="line">  @import '~spectre.css/src/spectre-icons.scss';</div><div class="line">  @import '~spectre.css/src/spectre.scss';</div><div class="line">  @import '~spectre.css/src/spectre-exp.scss';</div><div class="line">  @import './assets/theme-future/index.css';</div><div class="line">  a &#123;</div><div class="line">    &amp;:focus,</div><div class="line">    &amp;:hover,</div><div class="line">    &amp;:active,</div><div class="line">    &amp;.active &#123;</div><div class="line">      text-decoration: none;</div><div class="line">      box-shadow: 0 0 0 0;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  #app &#123;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>依据我个人经验，做了一部分的微调：</p>
<p><strong>第一</strong> 在代码中新建一个主题 CSS, 单独用于处理 SCSS 编译 CSS. 即除了 App.vue, 其他地方的 CSS 直接写在同一个地方。</p>
<p><strong>第二</strong> 对于字体文件，不引入 IconFont 在线字体，而是使用 SVG 本地编译字体。这样减少对 iconfont cdn 的依赖，可以以后直接迁移这个字体到其他 CDN 上。</p>
<p><strong>第三</strong> 对于依赖库管理，分为 npm 依赖库和外部 JS 依赖库两种</p>
<p>对于 NPM 依赖库，如果有使用过 ECharts3.0 的 SPA 开发者应该对于万恶的 DLL 非常熟悉了。最早的时候，我们是这样做的：</p>
<ul>
<li>先写一个编译脚本，指定相关依赖包，打包出 dll 和一个 manifest 文件</li>
<li>然后从 index.html 里引入打包好的 dll.</li>
<li>再从 webpack 的配置文件中引入这个文件。</li>
</ul>
<p>这种恶心的配置随着 autodll-webpack-plugin 的出现从而得到缓解，于是现在的你只需要配置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> AutoDllPlugin(&#123;</div><div class="line">  <span class="attr">inject</span>: <span class="literal">true</span>, <span class="comment">// will inject the DLL bundles to index.html</span></div><div class="line">  debug: <span class="literal">true</span>,</div><div class="line">  <span class="attr">filename</span>: <span class="string">'[name]_[hash].js'</span>,</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">vendor</span>: [</div><div class="line">      <span class="string">'@antv/data-set'</span>,</div><div class="line">      <span class="string">'@antv/g2'</span>,</div><div class="line">      <span class="string">'@antv/g6'</span>,</div><div class="line">      <span class="string">'highlight.js'</span>,</div><div class="line">      <span class="string">'markdown-it'</span>,</div><div class="line">      <span class="string">'markdown-it-abbr'</span>,</div><div class="line">      <span class="string">'markdown-it-deflist'</span>,</div><div class="line">      <span class="string">'markdown-it-emoji'</span>,</div><div class="line">      <span class="string">'markdown-it-footnote'</span>,</div><div class="line">      <span class="string">'markdown-it-ins'</span>,</div><div class="line">      <span class="string">'markdown-it-katex'</span>,</div><div class="line">      <span class="string">'markdown-it-mark'</span>,</div><div class="line">      <span class="string">'markdown-it-sub'</span>,</div><div class="line">      <span class="string">'markdown-it-sup'</span>,</div><div class="line">      <span class="string">'markdown-it-task-lists'</span>,</div><div class="line">      <span class="string">'markdown-it-toc-and-anchor'</span>,</div><div class="line">      <span class="string">'typed.js'</span>,</div><div class="line">      <span class="string">'vue'</span>,</div><div class="line">      <span class="string">'vue-router'</span>,</div><div class="line">      <span class="string">'vuex'</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> webpack.optimize.UglifyJsPlugin()],</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>当然，如果你用了 ECharts, 有的时候会出现莫名其妙的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__DEV__ is not defined</div></pre></td></tr></table></figure>
<p>解决方法就是在这上面的插件里面加个插件定义一个 Global 的变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new webpack.DefinePlugin(&#123;</div><div class="line">  __DEV__: false</div><div class="line">&#125;),</div></pre></td></tr></table></figure>
<blockquote>
<p>PS: 去年的版本由于依赖库的一个路径问题导致 autodll-webpack-plugin 不能在 Windows 上使用，今年可以啦。还不快快用起来？</p>
</blockquote>
<p>对于外部的 JS/CSS 依赖库：</p>
<ol>
<li>直接拷贝到 static 下面，然后从 index.html 引入即可。</li>
<li>动态创建 script 标签（比如动态引入高德地图）</li>
</ol>
<h2 id="0x04-路由"><a href="#0x04-路由" class="headerlink" title="0x04 路由"></a>0x04 路由</h2><p>博客项目，实际上路由比较简单。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">export default new Router(&#123;</div><div class="line">  mode: &apos;history&apos;,</div><div class="line">  base: &apos;/&apos;,</div><div class="line">  // 注释掉这里是因为和引入的 smooth-scroll 冲突</div><div class="line">  // scrollBehavior (to, from, savedPosition) &#123;</div><div class="line">  //   return &#123; x: 0, y: 0 &#125;</div><div class="line">  // &#125;,</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/&apos;,</div><div class="line">      name: &apos;home&apos;,</div><div class="line">      component: () =&gt; import(&apos;../pages/Home.vue&apos;)</div><div class="line">    &#125;,</div><div class="line">    // 解决手贱带来的问题</div><div class="line">    &#123;</div><div class="line">      path: &apos;/index:suffix*&apos;,</div><div class="line">      name: &apos;index&apos;,</div><div class="line">      component: () =&gt; import(&apos;../pages/Home.vue&apos;)</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/blog&apos;,</div><div class="line">      name: &apos;blog&apos;,</div><div class="line">      component: () =&gt; import(&apos;../pages/Blog.vue&apos;)</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/blog/post/:title&apos;,</div><div class="line">      name: &apos;post&apos;,</div><div class="line">      component: () =&gt; import(&apos;../pages/Blog/ArticlePost.vue&apos;)</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/blog/:category(category/\\d+)?/:tags(tags/\\d+)?/:page(page/\\d+)?&apos;,</div><div class="line">      name: &apos;blogposts&apos;,</div><div class="line">      component: () =&gt; import(&apos;../pages/Blog.vue&apos;)</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/archive&apos;,</div><div class="line">      name: &apos;archive&apos;,</div><div class="line">      component: () =&gt; import(&apos;../pages/Archive.vue&apos;)</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/gallery&apos;,</div><div class="line">      name: &apos;gallery&apos;,</div><div class="line">      component: () =&gt; import(&apos;../pages/Gallery.vue&apos;)</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/works&apos;,</div><div class="line">      name: &apos;works&apos;,</div><div class="line">      component: () =&gt; import(&apos;../pages/Works.vue&apos;)</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/about&apos;,</div><div class="line">      name: &apos;about&apos;,</div><div class="line">      component: () =&gt; import(&apos;../pages/About.vue&apos;)</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>除了 import 语法之外，需要注意的就是 ‘/blog/:category(category/\d+)?/:tags(tags/\d+)?/:page(page/\d+)?’ 这个奇怪的表达式。</p>
<p>这个表达式可以用于匹配下面的路由</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/blog/category/1/tags/2/page/3</div><div class="line">/blog/category/1/page/3</div><div class="line">/blog/tags/3/page/3</div><div class="line">/blog/page/3</div></pre></td></tr></table></figure>
<p>匹配完毕之后，就可以拿到 categroy tags page 的值然后提交数据库拿数据咯。</p>
<h2 id="0x05-组件"><a href="#0x05-组件" class="headerlink" title="0x05 组件"></a>0x05 组件</h2><p>博客里面需要注意的就三个组件</p>
<ul>
<li>ArticlePost 组件</li>
<li>分页组件</li>
<li>打字终端组件</li>
</ul>
<p>第一个，ArticlePost 组件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"p-article-post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"columns"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-1 hide-xl"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2 col-xl-3"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-sidebar"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>本文目录<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"articleToc"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6 col-xl-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ArticleCard</span> <span class="attr">:article</span>=<span class="string">"article"</span> @<span class="attr">articleTocReady</span>=<span class="string">"initArticleToc"</span>&gt;</span><span class="tag">&lt;/<span class="name">ArticleCard</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2 col-xl-3"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-sidebar"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>公告<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">              MG 的编程小屋，其实就是我整理笔记，写写文章的地方。</div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">              专注 Python / JavaScript , 爱折腾的全干工程师 (Full Stuff Engineer)</div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">              如果我的文章给您的日常开发带来很大帮助的话</div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">              您可以关注我的公众号</div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/images/mp_wechat.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"width: 200px"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">              也可以扫描二维码进行投喂</div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/images/tips_wechat.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"width: 200px"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">              听说关注或者进行投喂的人，技术都越来越牛咯。</div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-1 hide-xl"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">import</span> &#123;fetchBlogPost&#125; <span class="keyword">from</span> <span class="string">'../../api/blog'</span>;</div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'BlogPage'</span>,</div><div class="line">    <span class="attr">components</span>: &#123;</div><div class="line">      <span class="attr">ArticleCard</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../../components/Common/ArticleCard.vue'</span>),</div><div class="line">    &#125;,</div><div class="line">    data() &#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">article</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">articleToc</span>: <span class="literal">undefined</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">watch</span>: &#123;</div><div class="line">      <span class="string">'$route.params'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.initArticle()</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    created() &#123;</div><div class="line">      <span class="keyword">this</span>.initArticle()</div><div class="line">    &#125;,</div><div class="line">    mounted() &#123;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      <span class="attr">initArticleToc</span>: <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.articleToc = v;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">initArticle</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> title = <span class="keyword">this</span>.$route.params.title;</div><div class="line">        fetchBlogPost(title).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">this</span>.article = res;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>嗯，其实就是监听 url, 如果匹配上 url 的话，从 url 中取 title, 然后发送请求，接着取回响应的内容交给子组件处理。子组件处理完毕会 emit 出一个 toc 的值，将这个值赋值给左侧 toc 即可。</p>
<ul>
<li>分页组件</li>
</ul>
<p>见地址吧  <a href="https://github.com/twocucao/YaVueBlog/blob/master/src/components/Common/Pagination.vue" target="_blank" rel="external">https://github.com/twocucao/YaVueBlog/blob/master/src/components/Common/Pagination.vue</a></p>
<ul>
<li>打字终端组件</li>
</ul>
<p>终端的样式，当然是抄别人的 CSS, 打字效果，来源于 typed.js 依赖库</p>
<h2 id="0x06-扩展"><a href="#0x06-扩展" class="headerlink" title="0x06. 扩展"></a>0x06. 扩展</h2><p>对于其他的实现，自然是要多多看代码咯。</p>
<p>其实前端工程化是一个很广的概念，本文没有提到代码风格、团队开发工作流、CSS 编写规范、组件优化、Webpack 详细配置等等。这都需要在日常开发中多多练习的。</p>
<p>笔者最近换了份工作，以 React 为技术栈。 加上篇幅和精力有限，也就是不在以 Vue 为前端这一块详细展开了。</p>
<p>下面的文章还是聚焦在后端上面。</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE. 参考链接"></a>0xEE. 参考链接</h2><p>还犹豫啥，Django 前后端分离最佳实践，点赞后，快上车吧</p>
<ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog" target="_blank" rel="external">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog" target="_blank" rel="external">https://github.com/twocucao/YaDjangoBlog</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-03-18</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文是 Django 全栈开发教程的第四篇&lt;/p&gt;
&lt;p&gt;目录在这里，已经更新的文章如下&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="后端开发" scheme="http://twocucao.xyz/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Django" scheme="http://twocucao.xyz/tags/Django/"/>
    
      <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
      <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="RestAPI" scheme="http://twocucao.xyz/tags/RestAPI/"/>
    
  </entry>
  
  <entry>
    <title>YaDjangoBlog 开发环境配置</title>
    <link href="http://twocucao.xyz/2018/02/22/YaDjangoBlog%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://twocucao.xyz/2018/02/22/YaDjangoBlog开发环境配置/</id>
    <published>2018-02-22T02:13:30.000Z</published>
    <updated>2018-02-22T04:49:04.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文是 Django 全栈开发教程的第一篇，上一篇是第零篇，目录会随时更新，地址在这里 2018 年不容错过的 Django 全栈项目 <a href="https://zhuanlan.zhihu.com/p/33903527" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/33903527</a></p>
<blockquote>
<p>为什么是第零篇，因为程序员从零计数呀。笑~~</p>
</blockquote>
<p>本文需要完成两件事情：</p>
<ul>
<li>配置基本的开发环境</li>
<li>让代码先运行一下</li>
</ul>
<p>如果你使用的 macOS, 那么可以跟着下文一步一步走。如果是 linux/window 用户，可能稍微需要在配置环境上多花点时间。</p>
<blockquote>
<p>本文默认你至少会在 iTerm2 下面使用基本的 bash 命令与 git , 如果使用的 ohmyzsh 就更好了。 建议先参考请查看我之前的文章里面的配置环境 如何优雅地使用 macOS <a href="https://zhuanlan.zhihu.com/p/29892969" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/29892969</a></p>
</blockquote>
<h2 id="0x01-Python-开发环境配置"><a href="#0x01-Python-开发环境配置" class="headerlink" title="0x01 Python 开发环境配置"></a>0x01 Python 开发环境配置</h2><p>本小节的目的就是配置好基本的 python 开发环境</p>
<p>使用了神器 pyenv</p>
<blockquote>
<p>BTW: 为什么不直接用 pipenv ? 因为网络不通畅，如若不然，pipenv 比 pyenv 更适合用来做 python 依赖包管理。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 新开终端</span></div><div class="line">git clone https://github.com/yyuu/pyenv.git ~/.pyenv</div><div class="line">git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv</div><div class="line">echo <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.zshrc</div><div class="line">echo <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.zshrc</div><div class="line">echo <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.zshrc</div><div class="line">echo <span class="string">'eval "$(pyenv virtualenv-init -)"'</span> &gt;&gt; ~/.zshrc</div><div class="line"></div><div class="line"><span class="comment"># 接着另开终端</span></div><div class="line"><span class="comment"># 不喜写兼容代码，所有代码均向 3.5+ 靠拢</span></div><div class="line">v=<span class="number">3.5</span><span class="number">.2</span>|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v</div><div class="line">v=<span class="number">3.6</span><span class="number">.0</span>|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v</div><div class="line">v=<span class="number">2.7</span><span class="number">.11</span>|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v</div><div class="line"></div><div class="line"><span class="comment"># 设置 Global Python 为 2.7.11, 备注：尽量不要把 Py3 设置为全局，否则由于 Homebrew 本身有一些依赖是依赖于 Py2 的，这样容易出现一些奇怪的问题。</span></div><div class="line">pyenv <span class="keyword">global</span> <span class="number">2.7</span><span class="number">.11</span></div><div class="line">pip install -i https://pypi.doubanio.com/simple requests</div><div class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></div><div class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">"jedi&gt;=0.9.0"</span> <span class="string">"json-rpc&gt;=1.8.1"</span> <span class="string">"service_factory&gt;=0.1.5"</span> flake8 pytest autoflake hy</div><div class="line"></div><div class="line"><span class="comment"># 创建最常用 Py3 虚拟环境</span></div><div class="line">pyenv virtualenv <span class="number">3.5</span><span class="number">.2</span> py3-daily</div><div class="line">pyenv activate py3-daily</div><div class="line">pip install -i https://pypi.doubanio.com/simple requests</div><div class="line">pip install -i https://pypi.doubanio.com/simple beatutifulsoup4</div><div class="line">pip install -i https://pypi.doubanio.com/simple ipython[notebook]</div><div class="line">pip install -i https://pypi.doubanio.com/simple jupyter</div><div class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></div><div class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">"jedi&gt;=0.9.0"</span> <span class="string">"json-rpc&gt;=1.8.1"</span> <span class="string">"service_factory&gt;=0.1.5"</span> flake8 pytest autoflake hy</div></pre></td></tr></table></figure>
<p>好，Python 环境就安装完毕了。</p>
<h2 id="0x02-JavaScript-开发环境配置"><a href="#0x02-JavaScript-开发环境配置" class="headerlink" title="0x02 JavaScript 开发环境配置"></a>0x02 JavaScript 开发环境配置</h2><blockquote>
<p>本小节的目的就是配置好基本的 JS 开发环境，但估计 JSer 看了本小节依旧可以在配置上少一些麻烦。</p>
</blockquote>
<p>JS 可以前后端通吃，社区生态很丰富。ES6 之后从 python 和 ruby 里面借鉴了不少语法糖。现在写起来还是比较愉悦的。</p>
<p>JavaScript 不管开发前端应用还是后端应用，都需要安装 node 环境。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先安装 nvm</span></div><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</div><div class="line"><span class="comment"># 新开终端</span></div><div class="line">nvm install 8</div><div class="line">nvm use 8</div><div class="line">nvm <span class="built_in">alias</span> default 8</div><div class="line"></div><div class="line">npm install cnpm</div><div class="line">cnpm install yarn -g</div><div class="line"><span class="comment"># 设置镜像</span></div><div class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<p>编辑 ~/.npmrc 配置文件，输入下文再配置各种奇奇怪怪的镜像地址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">registry=https://registry.npm.taobao.org/</div><div class="line">chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver</div><div class="line">disturl=https://npm.taobao.org/dist</div><div class="line">operadriver_cdnurl=http://cdn.npm.taobao.org/dist/operadriver</div><div class="line">phantomjs_cdnurl=http://cdn.npm.taobao.org/dist/phantomjs</div><div class="line">fse_binary_host_mirror=https://npm.taobao.org/mirrors/fsevents</div><div class="line">sass_binary_site=http://cdn.npm.taobao.org/dist/node-sass</div><div class="line">electron_mirror=http://cdn.npm.taobao.org/dist/electron/</div></pre></td></tr></table></figure>
<p>配置完毕</p>
<h2 id="0x03-Docker-安装与配置"><a href="#0x03-Docker-安装与配置" class="headerlink" title="0x03 Docker 安装与配置"></a>0x03 Docker 安装与配置</h2><blockquote>
<p>本小节主要解决一个最蛋疼的问题，就是网络问题</p>
</blockquote>
<p>下载并安装 docker for mac 地址如下 <a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="external">https://docs.docker.com/docker-for-mac/install/</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装成功后运行命令</span></div><div class="line">docker run hello-world</div></pre></td></tr></table></figure>
<p>如果一切正常，则会显示如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ docker run hello-world</div><div class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</div><div class="line">latest: Pulling from library/hello-world</div><div class="line">ca4f61b1923c: Pull complete</div><div class="line">Digest: sha256:083de497cff944f969d8499ab94f07134c50bcf5e6b9559b27182d3fa80ce3f7</div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</div><div class="line"></div><div class="line">Hello from Docker!</div><div class="line">This message shows that your installation appears to be working correctly.</div><div class="line"></div><div class="line">To generate this message, Docker took the following steps:</div><div class="line"> 1. The Docker client contacted the Docker daemon.</div><div class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</div><div class="line">    (amd64)</div><div class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</div><div class="line">    executable that produces the output you are currently reading.</div><div class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</div><div class="line">    to your terminal.</div><div class="line"></div><div class="line">To try something more ambitious, you can run an Ubuntu container with:</div><div class="line"> $ docker run -it ubuntu bash</div><div class="line"></div><div class="line">Share images, automate workflows, and more with a free Docker ID:</div><div class="line"> https://cloud.docker.com/</div><div class="line"></div><div class="line">For more examples and ideas, visit:</div><div class="line"> https://docs.docker.com/engine/userguide/</div></pre></td></tr></table></figure>
<p>好，配置到这里。</p>
<p>你以为你已经配置好了，还先别激动，网络问题还没解决呢。小的镜像可以直接从 Docker 上直接拖下来，几百兆的镜像可就没这么容易了。</p>
<p>这里我们使用了阿里云的 Docker 容器镜像。</p>
<p>登录阿里云，到控制台，找到容器镜像服务，镜像加速器，</p>
<p>如下图：</p>
<p>右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Daemon 标签（Docker 17.03 之前版本为 Advanced 标签）下的 Registry mirrors 列表中将 <a href="https://your-url.mirror.aliyuncs.com" target="_blank" rel="external">https://your-url.mirror.aliyuncs.com</a> 加到”registry-mirrors”的数组里，点击 Apply &amp; Restart 按钮，等待 Docker 重启并应用配置的镜像加速器。</p>
<p>Docker 配置完毕。</p>
<h2 id="0x04-项目试运行"><a href="#0x04-项目试运行" class="headerlink" title="0x04 项目试运行"></a>0x04 项目试运行</h2><p>运行项目之前，保持你我的工作环境基本一致</p>
<ul>
<li>创建一些必须的目录</li>
<li>clone 项目</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir -p ~/Codes/YaB<span class="built_in">log</span>/DockerVolume/YaDjangoB<span class="built_in">log</span>/PostgreSQL/data</div><div class="line">mkdir -p ~/Codes/YaB<span class="built_in">log</span>/DockerVolume/YaDjangoB<span class="built_in">log</span>/Redis/data</div><div class="line">mkdir -p ~/Codes/YaB<span class="built_in">log</span>/DockerVolume/YaDjangoB<span class="built_in">log</span>/Backups</div><div class="line"><span class="built_in">cd</span> ~/Codes/YaB<span class="built_in">log</span>/</div><div class="line">git <span class="built_in">clone</span> git@github.com:twocucao/YaVueBlog.git</div><div class="line">git <span class="built_in">clone</span> git@github.com:twocucao/YaDjangoBlog.git</div></pre></td></tr></table></figure>
<p>克隆下来项目之后还需要稍微折腾一下（没办法，CURD 开发 = 折腾折腾折腾 + 搬砖搬砖搬砖）</p>
<ul>
<li>运行 Vue 开发环境</li>
<li>运行 Docker 化的 django 环境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 新开一个终端 用于运行 Vue 应用</span></div><div class="line"><span class="comment"># 前端环境不放在 Docker 环境中。（因为开发环境没必要，生产环境才需要）</span></div><div class="line"><span class="built_in">cd</span> ~/Codes/YaB<span class="built_in">log</span>/YaVueB<span class="built_in">log</span>/ &amp;&amp; yarn &amp;&amp; <span class="built_in">cd</span> -</div><div class="line"><span class="built_in">cd</span> ~/Codes/YaB<span class="built_in">log</span>/YaVueB<span class="built_in">log</span>/packages/theme-future/ &amp;&amp; yarn &amp;&amp; <span class="built_in">cd</span> -</div><div class="line"><span class="built_in">cd</span> ~/Codes/YaB<span class="built_in">log</span>/YaVueB<span class="built_in">log</span>/</div><div class="line">npm run build:theme</div><div class="line">npm run dev</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 新开一个终端</span></div><div class="line"><span class="built_in">cd</span> ~/Codes/YaB<span class="built_in">log</span>/YaDjangoB<span class="built_in">log</span>/</div><div class="line">make</div></pre></td></tr></table></figure>
<p>看到下图，包含所有的命令。</p>
<p>这是我用 Makefile 编写的一系列命令，方便我在开发过程将主要的精力花在业务逻辑上而不是花时间在强记大量的琐碎的命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/Codes/YaB<span class="built_in">log</span>/YaDjangoB<span class="built_in">log</span>/</div><div class="line">make build-all</div><div class="line"><span class="comment"># 等待运行后端所有组件</span></div></pre></td></tr></table></figure>
<p>然后，读者可以先去泡杯咖啡点个外卖吃个饭之类的。等待构建完毕。</p>
<p>需要注意的是，务必配置好 docker 镜像加速地址，否则根据国内情况，你可能需要多去泡几杯咖啡，多吃几顿饭。</p>
<p>好，接下来我们运行后端程序，首次运行需要花费不少时间</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/Codes/YaB<span class="built_in">log</span>/YaDjangoB<span class="built_in">log</span>/</div><div class="line">make django-just-up</div></pre></td></tr></table></figure>
<p>运行之后，终端结果如下：</p>
<p>可以发现，服务已经都开始启动了。</p>
<p>但不要冲动，先等等，因为一次开了如下的服务：</p>
<ul>
<li>postgres</li>
<li>redis</li>
<li>elasticsearch</li>
<li>mailhog</li>
<li>django</li>
<li>celerybeat</li>
<li>celeryworker</li>
<li>celeryflower</li>
</ul>
<p>需要多等会儿时间到各个服务运行正常。直到出现下图：</p>
<p>这意味着基本上所有的程序都运行正常了。如果有服务挂掉，欢迎到 github 的 issue 上提一下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 接着再新开一个终端 用于导入基础数据</span></div><div class="line"><span class="built_in">cd</span> ~/Codes/YaB<span class="built_in">log</span>/YaDjangoB<span class="built_in">log</span>/</div><div class="line">make django-import-articles</div></pre></td></tr></table></figure>
<p>好，那么，我们来验证一下如下几个地址：</p>
<ul>
<li>接口地址 <a href="http://localhost:8000/api/v1/archive" target="_blank" rel="external">http://localhost:8000/api/v1/archive</a></li>
<li>Vue 地址 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a></li>
<li>在搜索框内输入 elasticsearch 查看接口是否正常返回数据</li>
<li>查看 celery 的 task 是否正确</li>
</ul>
<p>如果一切正常，则所有的截图应该如下</p>
<h2 id="0x05-Tmux-和-Tmuxinator"><a href="#0x05-Tmux-和-Tmuxinator" class="headerlink" title="0x05 Tmux 和 Tmuxinator"></a>0x05 Tmux 和 Tmuxinator</h2><p>我们在上文中可以发现有个极其蛋疼菊紧的问题。</p>
<p>当我们运行 make django-just-up 这个命令的时候，所有服务运行的同时，所有的标准输入都打印到一个终端。</p>
<p>这个和我们日常开发不太相同</p>
<ol>
<li>在 django 开发的时候，我们运行 runserver, 肯定是只想在那个终端里看到 runserver 的运行情况。而不是 Redis,Elasticsearch,PGsql 之类的 log。</li>
<li>并且，django 的热加载会有些小问题，有些错误只能 ctrl+c 关掉 runserver, 然后重启。但当我们想 ctrl+c 关掉 runserver 的时候，却把所有的的服务都关掉了。</li>
</ol>
<p>解决方式也简单：</p>
<p>对于暂时不想在开发时看到日志的服务，干脆直接放后台运行，执行我封装的命令 make django-before-up 把部分服务直接放在后台里，然后再开四个终端，运行下面的命令。</p>
<ul>
<li>make django-runserver # 运行 runserver , 并只把该容器的 log 打印出来。下面三者同上。</li>
<li>make django-celerybeat</li>
<li>make django-celeryworker</li>
<li>make django-celeryflower</li>
</ul>
<p>显然还是很麻烦，我这种懒人可是能少写几行代码就少些几行代码的。</p>
<p>那么我们还可以更省事（懒一些）么？</p>
<p>我之前写了一篇简单的 tmux 与 Tmuxinator 教程 <a href="https://zhuanlan.zhihu.com/p/33369297" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/33369297</a> , 具体配置步骤参考文中即可。</p>
<p>配置好 Tmuxinator 之后</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先软连接一下</span></div><div class="line">ln -svf ~/Codes/YaB<span class="built_in">log</span>/YaDjangoB<span class="built_in">log</span>/yadjangoblog.yml ~/.tmuxinator/yadjangoblog.yml</div></pre></td></tr></table></figure>
<p>当我需要运行的所有服务的时候，我只需要</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmuxinator start yadjangoblog</div></pre></td></tr></table></figure>
<p>就可以开启所有命令。</p>
<p>yadjangoblog.yml 的内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">windows:</div><div class="line">  - &quot;前端-页面开发&quot;:</div><div class="line">      root: ~/Codes/YaBlog/YaVueBlog/</div><div class="line">      layout: main-vertical</div><div class="line">      panes:</div><div class="line">        - &quot;前端页面 DEV&quot;:</div><div class="line">          - &quot;npm run dev&quot;</div><div class="line">  - &quot;前端-CSS 与字体文件&quot;:</div><div class="line">      root: ~/Codes/YaBlog/YaVueBlog/</div><div class="line">      layout: main-vertical</div><div class="line">      panes:</div><div class="line">        - &quot;npm run dev:theme&quot;</div><div class="line">        - &quot;npm run dev:iconfont&quot;</div><div class="line">  - &quot;后端-Django 及其服务&quot;:</div><div class="line">      root: ~/Codes/YaBlog/YaDjangoBlog/</div><div class="line">      layout: main-vertical</div><div class="line">      panes:</div><div class="line">        - &quot;make django-before-up &amp;&amp; make django-runserver&quot;</div><div class="line">  - &quot;后端-数据库相关&quot;:</div><div class="line">      layout: main-vertical</div><div class="line">      root: ~/Codes/YaBlog/YaDjangoBlog/</div><div class="line">      panes:</div><div class="line">        - &quot;sleep 20 &amp;&amp; make dbshell&quot;</div><div class="line">        - &quot;sleep 20 &amp;&amp; make shell&quot;</div><div class="line">  - &quot;后端-Celery&quot;:</div><div class="line">      layout: main-vertical</div><div class="line">      root: ~/Codes/YaBlog/YaDjangoBlog/</div><div class="line">      panes:</div><div class="line">        - &quot;sleep 20 &amp;&amp; make django-celerybeat&quot;</div><div class="line">        - &quot;sleep 20 &amp;&amp; make django-celeryworker&quot;</div></pre></td></tr></table></figure>
<h2 id="0x06-PyCharm-基本设置"><a href="#0x06-PyCharm-基本设置" class="headerlink" title="0x06 PyCharm 基本设置"></a>0x06 PyCharm 基本设置</h2><blockquote>
<p>大家应该都用 PyCharm 进行开发了吧。 如果是的话，不看本小节可能会让你栽个跟头</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这步是给 pycharm 打开代码做准备</span></div><div class="line">pyenv activate py3-daily</div><div class="line">pip install -i https://pypi.doubanio.com/simple -r requirements/local.txt</div></pre></td></tr></table></figure>
<p>务必完成下面两个步骤</p>
<ol>
<li>在 Preferences -&gt; project -&gt; interpreter 选择对应的 py3-daily 虚拟环境。</li>
<li>在侧边栏把 yadjangoblog , 注意小写的。右键标记为 sources root</li>
</ol>
<p>这样的标记相当于告诉 PyCharm , 这个项目的 PYTHONPATH 是 yadjangoblog/ , 否则使用 PyCharm 导入 AModel 会自动导入 from yadjangoblog.yaadmin.models from AModel 而不是 from yaadmin.models import AModel , 这会导致程序运行错误。</p>
<blockquote>
<p>PS: 包括后面跑单元测试的时候，均手动设置了 PYTHONPATH 变量。</p>
</blockquote>
<h2 id="0x07-开发流程"><a href="#0x07-开发流程" class="headerlink" title="0x07 开发流程"></a>0x07 开发流程</h2><p>本小节，从笔者开机开始，回顾一下环境配置好之后，笔者是如何进入开发状态的：</p>
<ol>
<li>开机。输入密码进入桌面。</li>
<li>打开 Iterm, 运行 tmuxinator start yadjangoblog 开启项目。打开 PyCharm 和 WebStorm</li>
<li>开发<ul>
<li>在 WebStorm 中写写前端代码，在 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 和 tmux 里的第一个 window 查看状态</li>
<li>在 PyCharm 中写写后端代码，在第三个 window 查看 runserver 状态，在第四个 window 的两个 Panel 运行 python manage.py 相关命令。</li>
<li>在 Chrome Elasticsearch Head 扩展里调试 Elasticsearch 语法</li>
<li>在 <a href="http://localhost:8000/api/your-api-path" target="_blank" rel="external">http://localhost:8000/api/your-api-path</a> 里调试前后端 API</li>
<li>在 <a href="http://localhost:5555" target="_blank" rel="external">http://localhost:5555</a> 通过 flower 查看相关</li>
<li>…..</li>
<li>当然，你也可以新开一个终端里面，执行 make 查看相关还可以执行哪些命令。</li>
</ul>
</li>
</ol>
<p>那么，具体执行这些命令背后究竟发生了什么？</p>
<ul>
<li>数十服务为何突然启动</li>
<li>数百个任务为何半夜消失</li>
<li>正常运行的服务为何屡屡崩溃</li>
<li>这一切的背后！是工程师的人性扭曲还是码畜的道德沦丧？是内存的爆发还是处理器的无奈？</li>
<li>敬请关注本专栏 『MG 的编程小屋』或者 Github 频道，让我们跟随教程走进全干工程师的代码世界。</li>
</ul>
<blockquote>
<p>不好意思，顺手打了个硬广，防止别人把我的文章砍头去尾直接扒过去。</p>
</blockquote>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE. 参考链接"></a>0xEE. 参考链接</h2><p>还犹豫啥，点赞后，快上车吧</p>
<ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog" target="_blank" rel="external">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog" target="_blank" rel="external">https://github.com/twocucao/YaDjangoBlog</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-22</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文是 Django 全栈开发教程的第一篇，上一篇是第零篇，目录会随时更新，地址在这里 2018 年
    
    </summary>
    
      <category term="后端开发" scheme="http://twocucao.xyz/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Django" scheme="http://twocucao.xyz/tags/Django/"/>
    
      <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
      <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="RestAPI" scheme="http://twocucao.xyz/tags/RestAPI/"/>
    
  </entry>
  
  <entry>
    <title>2018 年不容错过的 Django 全栈项目</title>
    <link href="http://twocucao.xyz/2018/02/21/FullStackDjangoDevOps/"/>
    <id>http://twocucao.xyz/2018/02/21/FullStackDjangoDevOps/</id>
    <published>2018-02-21T02:13:30.000Z</published>
    <updated>2018-02-21T05:39:00.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><blockquote>
<p>写在前面的话：不好意思，标题难以免俗，起了个很俗气的名字。</p>
</blockquote>
<p>这是我的一个全栈类型 Django 开源项目的系列讲解教程的目录。</p>
<p>为什么写这系列的文章呢？目的总的来说有两个：</p>
<ol>
<li>一是希望更多的人通过本系列的教程更好的认识 Django 开发技术栈或者说是 Web 开发技术栈，让更多的 Pythonist 更顺畅的进入 Django 开发的世界。</li>
<li>二是希望借由这个持续更新的过程让自己更加深入理解 Django 技术栈 Django / DjangoRestFramework / Docker / Vue.JS / Celery / PostgreSQL / Redis / RabbitMQ</li>
</ol>
<p>为什么说这个项目你不容错过？</p>
<ul>
<li>新！新！新！保持最新的软件开发版本，E.G: Django 2.0 + Vue.JS 2.5 + PostgreSQL 10 + Celery 4.1.0</li>
<li>Django 框架：Django 及其 强大的生态圈</li>
<li>后端组件：PostgreSQL RabbitMQ Redis Ngnix</li>
<li>前端技术：单页应用 前后端分离 (VueJS+Webpack+DjangoRestFramework), 自动化部署</li>
<li>Django 社区最佳实践：从配置 / 开发 / 测试 / 部署 <strong>全干</strong>工程师 (Full Stuff Engineer) 的最新的 DevOps 思考成果。</li>
<li>基本覆盖了进阶 Django 开发所需要的各种组件与操作。</li>
<li>只需要适当的调整，本项目就可以成为你新开项目的最佳脚手架。</li>
</ul>
<p>本系列文章的面向读者：</p>
<ul>
<li>目标是 DevOps 的 Pythonist</li>
<li>爱瞎几把折腾的 Pythonist</li>
<li>前后端分离的实践者</li>
</ul>
<blockquote>
<p>生命苦短，赶快上车</p>
<p>Life is Short , I Use Python</p>
</blockquote>
<h2 id="0x01-项目介绍"><a href="#0x01-项目介绍" class="headerlink" title="0x01 项目介绍"></a>0x01 项目介绍</h2><p>YaDjangoBlog 是另一个关于博客的轮子，但是其野心并不在于仅仅多造一个博客系统，还有通过本项目做 Django 全栈开发的最佳实践。</p>
<h3 id="1-1-项目地址"><a href="#1-1-项目地址" class="headerlink" title="1.1 项目地址"></a>1.1 项目地址</h3><ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog" target="_blank" rel="external">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog" target="_blank" rel="external">https://github.com/twocucao/YaDjangoBlog</a></li>
</ul>
<h3 id="1-2-项目技术栈"><a href="#1-2-项目技术栈" class="headerlink" title="1.2 项目技术栈"></a>1.2 项目技术栈</h3><ul>
<li>开发与部署环境为 Docker</li>
<li>Python 3.5.2</li>
<li>前端 Vue + Webpack + ES2015 + axios</li>
<li>后端 <a href="https://github.com/django/django" target="_blank" rel="external">Django 2.0</a> + <a href="https://github.com/tomchristie/django-rest-framework/" target="_blank" rel="external">DjangoRestFramework</a> + Celery</li>
<li>自动化部署选用工具 Ansible 以及 Docker</li>
<li>后端组件<ul>
<li>ElasticSearch 用于搜索和推荐</li>
<li>PostgreSQL 用于数据持久化</li>
<li>Redis 用于 Session / 和缓存</li>
<li>RabbitMQ 分布式队列 / 定时任务</li>
<li>Nginx 用于反向代理</li>
</ul>
</li>
</ul>
<h3 id="1-3-特别感谢"><a href="#1-3-特别感谢" class="headerlink" title="1.3 特别感谢"></a>1.3 特别感谢</h3><ul>
<li>ansible django stack: <a href="https://github.com/jcalazan/ansible-django-stack" target="_blank" rel="external">https://github.com/jcalazan/ansible-django-stack</a></li>
<li>cookiecutter-django: <a href="https://github.com/pydanny/cookiecutter-django" target="_blank" rel="external">https://github.com/pydanny/cookiecutter-django</a></li>
<li>djangopackages: <a href="https://github.com/djangopackages/djangopackages" target="_blank" rel="external">https://github.com/djangopackages/djangopackages</a></li>
<li>董伟明 关于 ElasticSearch 的几篇文章 <a href="http://www.dongwm.com/archives/%E7%9F%A5%E4%B9%8ELive%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E4%B9%8B%E4%BD%BF%E7%94%A8Elasticsearch%E6%90%9C%E7%B4%A2/" target="_blank" rel="external">http://www.dongwm.com/archives/%E7%9F%A5%E4%B9%8ELive%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E4%B9%8B%E4%BD%BF%E7%94%A8Elasticsearch%E6%90%9C%E7%B4%A2/</a></li>
<li>各个组件的开发者们<ul>
<li>ElasticSearch</li>
<li>PostgreSQL</li>
<li>Redis</li>
<li>RabbitMQ</li>
<li>Nginx</li>
<li>Docker</li>
</ul>
</li>
</ul>
<h3 id="1-4-项目截图"><a href="#1-4-项目截图" class="headerlink" title="1.4 项目截图"></a>1.4 项目截图</h3><p>好，讲了半天有的没的，还是贴点图吧，毕竟我不是 Markdown 程序员</p>
<blockquote>
<p>我们先看看能看得见的前端页面</p>
</blockquote>
<p>主页</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6ba50ddaa85f?w=3344&amp;h=1822&amp;f=png&amp;s=1504757" alt=""></p>
<p>博客详情</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6c3e3a0b8dd4?w=3342&amp;h=1846&amp;f=png&amp;s=1021166" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6c31db9c8d5c?w=3350&amp;h=1804&amp;f=png&amp;s=1016132" alt=""></p>
<p>这是一个很普通的 Archive 页面</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6bfa8c121ed4?w=3312&amp;h=1818&amp;f=png&amp;s=425859" alt=""></p>
<p>这是以 Elasticsearch 为支持的 搜索功能</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6bc0a967a3e1?w=3348&amp;h=1840&amp;f=png&amp;s=1582839" alt=""></p>
<p>Django 自带后台</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6c47b50b6827?w=3356&amp;h=1768&amp;f=png&amp;s=365303" alt=""></p>
<p>前后端分离怎么能少的了 rest api 的实现与便捷的前端调试？</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6c5522e83368?w=3346&amp;h=1840&amp;f=png&amp;s=486772" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6c7ad6641b0a" alt=""></p>
<p>Django Debug Tools 帮你迅速调优接口</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6c782bf2a593?w=3348&amp;h=1838&amp;f=png&amp;s=735083" alt=""></p>
<blockquote>
<p>我们再先看看能看得见的开发界面</p>
</blockquote>
<p>在终端执行 tmuxinator start yavueblog 就可以自动运行所有任务</p>
<p>前端运行状态</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6d2d904bb3aa?w=3360&amp;h=2054&amp;f=png&amp;s=539522" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6d7172d15be3?w=3360&amp;h=2054&amp;f=png&amp;s=2446065" alt=""></p>
<p>后端运行状态<br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6d5933c52727?w=3360&amp;h=2054&amp;f=png&amp;s=3296514" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6d8ce415395c?w=3360&amp;h=2054&amp;f=png&amp;s=2720324" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6d9ff1f2efb1?w=3360&amp;h=2054&amp;f=png&amp;s=3932296" alt=""></p>
<p>当然，你可以直接用客户端连接到对应的服务商检查组件的运行状态</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6db1754b4e8b?w=3352&amp;h=1430&amp;f=png&amp;s=640103" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/2/21/161b6d949bd83c81?w=3352&amp;h=1126&amp;f=png&amp;s=532337" alt=""></p>
<h2 id="0x02-系列教程目录"><a href="#0x02-系列教程目录" class="headerlink" title="0x02 系列教程目录"></a>0x02 系列教程目录</h2><h3 id="2-1-教程注意项"><a href="#2-1-教程注意项" class="headerlink" title="2.1 教程注意项"></a>2.1 教程注意项</h3><ol>
<li>本文的开发环境配置仅仅限于 macOS 上，如果读者使用的是 Windows / 可能需要自己搞定环境的配置。不过笔者使用了 Docker 进行环境配置，应该配置环境会省事很多。</li>
<li>在阅读本教程，请读者至少跟着 Django 官方的教程跟着走一遍。不要零基础一通瞎搞。</li>
<li>如果在使用过程中出现问题，请在 ISSUE 提供尽可能多的信息，将问题描述清楚。</li>
</ol>
<p>本系列教程并不按照一步一步增加代码的方式写教程。</p>
<p>我先带着大家搭建好整个项目框架，然后从不同的视角开介绍这个项目，比如：</p>
<ol>
<li>某个模块的 models 是如何设计的？有哪些卧槽居然可以这么用的写代码方式。</li>
<li>Django User 如何做扩展？同样在 Django 的生态圈里面，哪些场景有哪些值得围观的包，比如 guardian</li>
<li>Restful API 应该如何写，Django 里面的 Rest API 应该如何写？会有哪些生产效率 guangguangguang 提升上去的使用方法？权限怎么做？限流怎么搞？</li>
<li>Py.test TDD 测试驱动开发了解一下？</li>
<li>使用 Tmux 等合理工具的优雅的单终端多开。</li>
</ol>
<h3 id="2-2-教程目录"><a href="#2-2-教程目录" class="headerlink" title="2.2 教程目录"></a>2.2 教程目录</h3><ul>
<li>Django 全栈开发教程 - 2018 年不容错过的 Django 全栈项目 – 目录篇</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的开发环境配置</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的后端组件配置</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的前后端初步设计</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的后端初步实现</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的前端实现 YaVueBlog</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的后端组件之 Redis</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的后端组件之 PostgreSQL</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的后端组件之 Elasticsearch</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的后端组件之 RabbitMQ</li>
<li>Django 全栈开发教程 - YaDjangoBlog 的生产环境部署</li>
</ul>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE. 参考链接"></a>0xEE. 参考链接</h2><p>还犹豫啥，快上车吧</p>
<ul>
<li>前端代码 <a href="https://github.com/twocucao/YaVueBlog" target="_blank" rel="external">https://github.com/twocucao/YaVueBlog</a></li>
<li>后端代码 <a href="https://github.com/twocucao/YaDjangoBlog" target="_blank" rel="external">https://github.com/twocucao/YaDjangoBlog</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-21</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;写在前面的话：不好意思，标题难以免俗，起了个很俗气的名字。&lt;/p&gt;
&lt;/b
    
    </summary>
    
      <category term="后端开发" scheme="http://twocucao.xyz/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Django" scheme="http://twocucao.xyz/tags/Django/"/>
    
      <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
      <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="RestAPI" scheme="http://twocucao.xyz/tags/RestAPI/"/>
    
  </entry>
  
  <entry>
    <title>Celery CheatSheet</title>
    <link href="http://twocucao.xyz/2018/02/20/CeleryCheatSheet/"/>
    <id>http://twocucao.xyz/2018/02/20/CeleryCheatSheet/</id>
    <published>2018-02-20T02:25:39.000Z</published>
    <updated>2018-02-20T12:12:13.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Celery 相关和命令。</p>
<p>不定期更新。</p>
<p>本文编写于 2018 年初，仅仅聚焦于 Django2.0 与 Celery 4.1.0</p>
<p>本文需要结合我的开源项目 YaDjangoBlog 来看 <a href="https://github.com/twocucao/YaDjangoBlog" target="_blank" rel="external">https://github.com/twocucao/YaDjangoBlog</a></p>
<p>Celery 主要用于分布式队列。</p>
<p>分布式队列可以用来做什么呢？</p>
<p>试想一下这么个场景：</p>
<ul>
<li>假如用户提交一个耗时任务，Django 一般会在 Function Based View 里进行处理这个任务（假设这个任务耗时 30s)，我可以先把这个任务放在分布式队列里面，将耗时任务甩锅给 Celery 的 Worker 。这样的话，就可以极大的减少 Function Based View 处理耗时任务的时间。</li>
</ul>
<p>当然，除此之外，Celery 还可以用于其他的分布式队列场景：</p>
<ul>
<li>批量发送邮件</li>
<li>定时任务 CronJob</li>
<li>分配爬虫抓取任务</li>
</ul>
<p>当然，如果不用 Celery 的话也能搞定上面的场景，比如，借用数据库本身就可以直接做分布式任务派发。</p>
<blockquote>
<p>只是这样的实现本身代码可维护性，扩展性，性能等等都不是很好罢了。</p>
</blockquote>
<p>Celery 的特点如下：</p>
<ul>
<li>简单易维护</li>
<li>高可用</li>
<li>快：依据官网的资料，单进程可以在若干分钟内处理上百万级数据，亚毫秒级往返延迟 (using RabbitMQ, librabbitmq, and optimized settings)</li>
<li>扩展性好：Almost every part of Celery can be extended or used on its own, Custom pool implementations, serializers, compression schemes, logging, schedulers, consumers, producers, broker transports, and much more.</li>
</ul>
<p>除此之外，还有什么特性呢？</p>
<ul>
<li>监控</li>
<li>Work-Flows</li>
<li>时间 / 速度 限制</li>
<li>日程安排 (CronJob)</li>
<li>资源泄露保护</li>
<li>用户组件</li>
</ul>
<a id="more"></a>
<h2 id="0x01-安装，配置，基本-shell-命令"><a href="#0x01-安装，配置，基本-shell-命令" class="headerlink" title="0x01 安装，配置，基本 shell 命令"></a>0x01 安装，配置，基本 shell 命令</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install <span class="string">"celery[librabbitmq]"</span></div></pre></td></tr></table></figure>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><p>指定 Broker URL 即可</p>
<h3 id="3-插件"><a href="#3-插件" class="headerlink" title="3. 插件"></a>3. 插件</h3><p>Flower 插件</p>
<h2 id="0x02-Celery-配套工具"><a href="#0x02-Celery-配套工具" class="headerlink" title="0x02 Celery 配套工具"></a>0x02 Celery 配套工具</h2><h2 id="0x03-Celery-基础概念"><a href="#0x03-Celery-基础概念" class="headerlink" title="0x03 Celery 基础概念"></a>0x03 Celery 基础概念</h2><ul>
<li>Application</li>
<li>Tasks</li>
<li>Calling Tasks</li>
<li>Canvas: Designing Work-flows</li>
<li>Workers Guide</li>
<li>Daemonization</li>
<li>Periodic Tasks</li>
<li>Routing Tasks</li>
<li>Monitoring and Management Guide</li>
<li>Security</li>
<li>Optimizing</li>
<li>Debugging</li>
<li>Concurrency</li>
<li>Signals</li>
<li>Testing with Celery</li>
<li>Extensions and Bootsteps</li>
<li>Configuration and defaults</li>
</ul>
<h3 id="3-1-Application"><a href="#3-1-Application" class="headerlink" title="3.1 Application"></a>3.1 Application</h3><h3 id="3-1-Tasks"><a href="#3-1-Tasks" class="headerlink" title="3.1 Tasks"></a>3.1 Tasks</h3><h3 id="3-1-Calling-Tasks"><a href="#3-1-Calling-Tasks" class="headerlink" title="3.1 Calling Tasks"></a>3.1 Calling Tasks</h3><h3 id="3-1-Canvas-Designing-Work-flows"><a href="#3-1-Canvas-Designing-Work-flows" class="headerlink" title="3.1 Canvas: Designing Work-flows"></a>3.1 Canvas: Designing Work-flows</h3><h3 id="3-1-Workers-Guide"><a href="#3-1-Workers-Guide" class="headerlink" title="3.1 Workers Guide"></a>3.1 Workers Guide</h3><h3 id="3-1-Daemonization"><a href="#3-1-Daemonization" class="headerlink" title="3.1 Daemonization"></a>3.1 Daemonization</h3><h3 id="3-1-Periodic-Tasks"><a href="#3-1-Periodic-Tasks" class="headerlink" title="3.1 Periodic Tasks"></a>3.1 Periodic Tasks</h3><h3 id="3-1-Routing-Tasks"><a href="#3-1-Routing-Tasks" class="headerlink" title="3.1 Routing Tasks"></a>3.1 Routing Tasks</h3><h3 id="3-1-Monitoring-and-Management-Guide"><a href="#3-1-Monitoring-and-Management-Guide" class="headerlink" title="3.1 Monitoring and Management Guide"></a>3.1 Monitoring and Management Guide</h3><h3 id="3-1-Security"><a href="#3-1-Security" class="headerlink" title="3.1 Security"></a>3.1 Security</h3><h3 id="3-1-Optimizing"><a href="#3-1-Optimizing" class="headerlink" title="3.1 Optimizing"></a>3.1 Optimizing</h3><h3 id="3-1-Debugging"><a href="#3-1-Debugging" class="headerlink" title="3.1 Debugging"></a>3.1 Debugging</h3><h3 id="3-1-Concurrency"><a href="#3-1-Concurrency" class="headerlink" title="3.1 Concurrency"></a>3.1 Concurrency</h3><h3 id="3-1-Signals"><a href="#3-1-Signals" class="headerlink" title="3.1 Signals"></a>3.1 Signals</h3><h3 id="3-1-Testing-with-Celery"><a href="#3-1-Testing-with-Celery" class="headerlink" title="3.1 Testing with Celery"></a>3.1 Testing with Celery</h3><h3 id="3-1-Extensions-and-Bootsteps"><a href="#3-1-Extensions-and-Bootsteps" class="headerlink" title="3.1 Extensions and Bootsteps"></a>3.1 Extensions and Bootsteps</h3><h3 id="3-1-Configuration-and-defaults"><a href="#3-1-Configuration-and-defaults" class="headerlink" title="3.1 Configuration and defaults"></a>3.1 Configuration and defaults</h3><h3 id="3-1-BROKER-掮客"><a href="#3-1-BROKER-掮客" class="headerlink" title="3.1 BROKER 掮客"></a>3.1 BROKER 掮客</h3><p>本文基于 RabbitMQ 做消息队列，并非 Redis 所以 Broker 默认使用 RabbitMQ</p>
<p>支持下面两个：</p>
<ul>
<li>Monitoring : 比如 Flower</li>
<li>Remote Control: 可以通过 celery inspect 和 control 命令进行检查和控制。</li>
</ul>
<h3 id="简单步骤"><a href="#简单步骤" class="headerlink" title="简单步骤"></a>简单步骤</h3><ol>
<li>定义 app, 指定 broker 和 backend</li>
<li>定义 tasks</li>
<li>指定 worker</li>
<li>调用 Task , 调用后返回 AsyncResult 实例，</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">add.delay(<span class="number">2</span>, <span class="number">2</span>)</div><div class="line">add.apply_async((<span class="number">2</span>, <span class="number">2</span>))</div><div class="line">add.apply_async((<span class="number">2</span>, <span class="number">2</span>), queue=<span class="string">'lopri'</span>, countdown=<span class="number">10</span>)</div><div class="line">add.signature((<span class="number">2</span>, <span class="number">2</span>), countdown=<span class="number">10</span>)</div><div class="line"></div><div class="line">res = add.delay(<span class="number">2</span>, <span class="number">2</span>)</div><div class="line">res.get(timeout=<span class="number">1</span>)</div></pre></td></tr></table></figure>
<h4 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 并行</div><div class="line">group(add.s(i, i) for i in xrange(10))().get()</div><div class="line"># [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</div><div class="line"># partial group</div><div class="line">g = group(add.s(i) for i in xrange(10))</div><div class="line">g(10).get()</div></pre></td></tr></table></figure>
<h4 id="Chains"><a href="#Chains" class="headerlink" title="Chains"></a>Chains</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">chain(add.s(4, 4) | mul.s(8))().get()</div><div class="line">(add.s(4, 4) | mul.s(8))().get()</div><div class="line"># partial chain</div><div class="line">g = chain(add.s(4) | mul.s(8))</div><div class="line">g(4).get()</div></pre></td></tr></table></figure>
<h4 id="chords"><a href="#chords" class="headerlink" title="chords"></a>chords</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chord((add.s(i, i) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>)), xsum.s())().get()</div><div class="line">(group(add.s(i, i) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>)) | xsum.s())().get()</div><div class="line"><span class="comment"># eg : upload_document.s(file) | group(apply_filter.s() for filter in filters)</span></div></pre></td></tr></table></figure>
<p>####</p>
<h3 id="3-1-Elasticsearch-CRUDE-以及基本操作"><a href="#3-1-Elasticsearch-CRUDE-以及基本操作" class="headerlink" title="3.1 Elasticsearch CRUDE 以及基本操作"></a>3.1 Elasticsearch CRUDE 以及基本操作</h3><h2 id="0x04-全文搜索的基本概念"><a href="#0x04-全文搜索的基本概念" class="headerlink" title="0x04 全文搜索的基本概念"></a>0x04 全文搜索的基本概念</h2><h2 id="0x05-调试"><a href="#0x05-调试" class="headerlink" title="0x05 调试"></a>0x05 调试</h2><h2 id="0x06-Python-SDK"><a href="#0x06-Python-SDK" class="headerlink" title="0x06 Python SDK"></a>0x06 Python SDK</h2><p>官方提供了两个 SDK 方便我们进行日常的开发：</p>
<h3 id="6-1-与-Python-集成"><a href="#6-1-与-Python-集成" class="headerlink" title="6.1 与 Python 集成"></a>6.1 与 Python 集成</h3><p>前者偏底层一些，后者偏高层一些，高底层关系的有点类似于 sqlalchemy core 和 sqlalchemy orm 之间的关系。</p>
<h3 id="6-2-与-Django-集成"><a href="#6-2-与-Django-集成" class="headerlink" title="6.2 与 Django 集成"></a>6.2 与 Django 集成</h3><h4 id="elasticsearch-analysis-ik-的配置"><a href="#elasticsearch-analysis-ik-的配置" class="headerlink" title="elasticsearch-analysis-ik 的配置"></a>elasticsearch-analysis-ik 的配置</h4><h2 id="0x07-踩坑集"><a href="#0x07-踩坑集" class="headerlink" title="0x07 踩坑集"></a>0x07 踩坑集</h2><ul>
<li>序列问题</li>
</ul>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-20</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Celery 相关和命令。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
&lt;p&gt;本文编写于 2018 年初，仅仅聚焦于 Django2.0 与 Celery 4.1.0&lt;/p&gt;
&lt;p&gt;本文需要结合我的开源项目 YaDjangoBlog 来看 &lt;a href=&quot;https://github.com/twocucao/YaDjangoBlog&quot;&gt;https://github.com/twocucao/YaDjangoBlog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Celery 主要用于分布式队列。&lt;/p&gt;
&lt;p&gt;分布式队列可以用来做什么呢？&lt;/p&gt;
&lt;p&gt;试想一下这么个场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假如用户提交一个耗时任务，Django 一般会在 Function Based View 里进行处理这个任务（假设这个任务耗时 30s)，我可以先把这个任务放在分布式队列里面，将耗时任务甩锅给 Celery 的 Worker 。这样的话，就可以极大的减少 Function Based View 处理耗时任务的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，除此之外，Celery 还可以用于其他的分布式队列场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;批量发送邮件&lt;/li&gt;
&lt;li&gt;定时任务 CronJob&lt;/li&gt;
&lt;li&gt;分配爬虫抓取任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，如果不用 Celery 的话也能搞定上面的场景，比如，借用数据库本身就可以直接做分布式任务派发。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只是这样的实现本身代码可维护性，扩展性，性能等等都不是很好罢了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Celery 的特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单易维护&lt;/li&gt;
&lt;li&gt;高可用&lt;/li&gt;
&lt;li&gt;快：依据官网的资料，单进程可以在若干分钟内处理上百万级数据，亚毫秒级往返延迟 (using RabbitMQ, librabbitmq, and optimized settings)&lt;/li&gt;
&lt;li&gt;扩展性好：Almost every part of Celery can be extended or used on its own, Custom pool implementations, serializers, compression schemes, logging, schedulers, consumers, producers, broker transports, and much more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，还有什么特性呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控&lt;/li&gt;
&lt;li&gt;Work-Flows&lt;/li&gt;
&lt;li&gt;时间 / 速度 限制&lt;/li&gt;
&lt;li&gt;日程安排 (CronJob)&lt;/li&gt;
&lt;li&gt;资源泄露保护&lt;/li&gt;
&lt;li&gt;用户组件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="后台组件" scheme="http://twocucao.xyz/categories/%E5%90%8E%E5%8F%B0%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="CheatSheet" scheme="http://twocucao.xyz/tags/CheatSheet/"/>
    
      <category term="Redis" scheme="http://twocucao.xyz/tags/Redis/"/>
    
      <category term="RabbitMQ" scheme="http://twocucao.xyz/tags/RabbitMQ/"/>
    
      <category term="消息队列" scheme="http://twocucao.xyz/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch CheatSheet</title>
    <link href="http://twocucao.xyz/2018/02/10/ElasticSearchCheatSheet/"/>
    <id>http://twocucao.xyz/2018/02/10/ElasticSearchCheatSheet/</id>
    <published>2018-02-10T02:25:39.000Z</published>
    <updated>2018-02-15T08:48:36.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 ElasticSearch 相关和命令。</p>
<p>不定期更新。</p>
<p>最早使用 ElasticSearch 是两年前了。最近准备用 Django 写一个全栈式的应用，借用强大的 ES 来做搜索。这是我在写程序之余写这篇文章的原因。</p>
<p>官网介绍 ElasticSearch 不仅仅是全文搜索，也可以结构化搜索（这里用结构化查询会更准确一些），分析，处理人类语言，地理位置，以及关系。</p>
<p>然而，我在项目使用过程中还是主要用到了全文搜索以及推荐。</p>
<p>不用其他的主要原因是因为 ES 尺有所短寸有所长：</p>
<ol>
<li>geo 处理方面 postgis 完全就是神一般的存在。为什么还要用 ES 呢？</li>
<li>关系型数据库的核心不就是处理关系？复杂的关系肯定还是放在关系数据库里面。</li>
</ol>
<p>highlighted search snippets, and search-as-you-type and did-you-mean suggestions.</p>
<p>我对 ElasticSearch 在后台组件里的作用在于搜索与推荐：</p>
<ol>
<li>整站的搜索功能<ul>
<li>全文搜索</li>
</ul>
</li>
<li>推荐<ul>
<li>依据某几个维度的数据进行排序</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h2 id="0x01-安装，配置，基本-shell-命令"><a href="#0x01-安装，配置，基本-shell-命令" class="headerlink" title="0x01 安装，配置，基本 shell 命令"></a>0x01 安装，配置，基本 shell 命令</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 执行如下的命令</div><div class="line">curl &apos;http://localhost:9200/?pretty&apos;</div><div class="line"># 输出结果</div><div class="line">&#123;</div><div class="line">  &quot;name&quot; : &quot;XOGvo8a&quot;,</div><div class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</div><div class="line">  &quot;cluster_uuid&quot; : &quot;fAwp341bQzalzBxRFyD1YA&quot;,</div><div class="line">  &quot;version&quot; : &#123;</div><div class="line">    &quot;number&quot; : &quot;6.2.1&quot;,</div><div class="line">    &quot;build_hash&quot; : &quot;7299dc3&quot;,</div><div class="line">    &quot;build_date&quot; : &quot;2018-02-07T19:34:26.990113Z&quot;,</div><div class="line">    &quot;build_snapshot&quot; : false,</div><div class="line">    &quot;lucene_version&quot; : &quot;7.2.1&quot;,</div><div class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</div><div class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><h3 id="3-插件"><a href="#3-插件" class="headerlink" title="3. 插件"></a>3. 插件</h3><p>ES 的插件有很多，比这使用现在最新的版本是 6.2.1 版本。</p>
<blockquote>
<p>PS: 两年前我用的还是 2.3.3 版本。新版本有很多插件配置起来已经有所不同了。比如说 head 现在已经被独立出来作为一个单纯的网页，chrome 商店可以直接下载。</p>
</blockquote>
<h2 id="0x02-ElasticSearch-配套工具"><a href="#0x02-ElasticSearch-配套工具" class="headerlink" title="0x02 ElasticSearch 配套工具"></a>0x02 ElasticSearch 配套工具</h2><p>建议使用 Head 插件来进行简单的查询与调试。</p>
<h2 id="0x03-ElasticSearch-基础概念"><a href="#0x03-ElasticSearch-基础概念" class="headerlink" title="0x03 ElasticSearch 基础概念"></a>0x03 ElasticSearch 基础概念</h2><h3 id="3-1-Elasticsearch-CRUDE-以及基本操作"><a href="#3-1-Elasticsearch-CRUDE-以及基本操作" class="headerlink" title="3.1 Elasticsearch CRUDE 以及基本操作"></a>3.1 Elasticsearch CRUDE 以及基本操作</h3><p>ES 使用的是 RESTFUL API 接口</p>
<p>这也就意味着：</p>
<ul>
<li>PUT 创建记录</li>
<li>GET 获取记录</li>
<li>POST 更新记录</li>
<li>DELETE 删除记录</li>
<li>HEAD 是否存在</li>
</ul>
<h2 id="0x04-全文搜索的基本概念"><a href="#0x04-全文搜索的基本概念" class="headerlink" title="0x04 全文搜索的基本概念"></a>0x04 全文搜索的基本概念</h2><h3 id="4-1-全文搜索遇到的挑战"><a href="#4-1-全文搜索遇到的挑战" class="headerlink" title="4.1 全文搜索遇到的挑战"></a>4.1 全文搜索遇到的挑战</h3><p>在最初开源搜索引擎技术还不是很成熟的时候，我们一般都会使用 RDBMS 进行简单搜索。</p>
<p>简单搜索，也就是我们常常使用的 like 查询（当然，有的数据库可以使用正则表达式）</p>
<p>这种方式是简单暴力的查询方式，优点是实现起来简单暴力。缺点是在这个场景下性能和准确度很差。</p>
<p>举例：</p>
<ul>
<li>假如站点里文章数量比较大，并且文章内容比较长，则进行一次全表查询，效率可想而知。当然，做好分库分表读写分离也是能用的。</li>
<li>如果我要对搜索到的词语进行高亮，则实现方式就只能是把查询到的文章放在应用层里面进行批量替换。</li>
<li>RDBMS 似乎完全不懂各种语言之间的区别。<ul>
<li>『停止词 / 常用词』有的字我是不需要的，比如南京的狗，其实我想搜的是南京狗，这里的『的』就不是我需要的。</li>
<li>『同义词』有的字我需要的是他的同义词，比如日本黄狗，其实我想搜的是柴犬。</li>
<li>『附加符号』假如说我们搜索一个声调 [nǐ], 总不能让用户打出 [nǐ] 进行搜索吧？总归要转为 ni 才能方便搜索</li>
<li>『词根形式』对于一个单词，假如是动词可能有时态上的区分，如果是名词，可能有单复数的区分。假如我搜 mice, 其实同样的 mouse 也应该被搜索出来。但有事用这种方式也会矫枉过正，比如 organizations 的 原型其实并不是 organization 而是，organ. （当然，overstemming 和 understemming 也是两个不可忽视的问题）<ul>
<li>Number: fox, foxes</li>
<li>Tense: pay, paid, paying</li>
<li>Gender: waiter, waitress</li>
<li>Person: hear, hears</li>
<li>Case: I, me, my</li>
<li>Aspect: ate, eaten</li>
<li>Mood: so be it, were it so</li>
<li>PS: 万幸的是，中文处理中木词根这个概念。我也就不深入这块了。</li>
</ul>
</li>
<li>『拼写问题』 周杰棍与周杰伦</li>
<li>『分词 / 识别词』中文不像英文，词和词之间是完全没有空格的，也就是说，中文天然要比英文多一个关于分词的步骤。</li>
</ul>
</li>
</ul>
<h3 id="4-2-全文搜索的索引时与查询时"><a href="#4-2-全文搜索的索引时与查询时" class="headerlink" title="4.2 全文搜索的索引时与查询时"></a>4.2 全文搜索的索引时与查询时</h3><ul>
<li>索引时，指的是 ElasticSearch 在存储文档的阶段。</li>
<li>查询时，指的是 ElasticSearch 在查询文档的阶段。</li>
</ul>
<h4 id="1-索引时-ES-做了什么？"><a href="#1-索引时-ES-做了什么？" class="headerlink" title="1. 索引时 ES 做了什么？"></a>1. 索引时 ES 做了什么？</h4><blockquote>
<p>这里我们略过定义 index,type,document 仅仅指某个 field 被赋值 document 被保存的时候针对这个被赋值的 text 类型 field 的处理。</p>
</blockquote>
<ul>
<li>第一步：<strong>文本经过 analyzer 处理</strong></li>
<li>第二步：<strong>形成倒排索引</strong></li>
</ul>
<p>先看第一步：</p>
<p>通常在定义 field 的时候显式指定 analyzer（分析器）.</p>
<p>这个 analyzer 一般的作用如下：</p>
<ul>
<li>STEP 1: 令牌化文本为独立的词</li>
<li>STEP 2: 词语转小写</li>
<li>STEP 3: 去除常见的停止词</li>
<li>STEP 4: 获取词的词根的原型</li>
</ul>
<p>不同的 analyzer 作用大同小异，拿我们常用的 <a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="external">https://github.com/medcl/elasticsearch-analysis-ik</a> 的话，则也是类似的步骤（下面步骤是我猜测的，没看源码）</p>
<ol>
<li>令牌化文本为独立的词语 - 分词，并且令牌化文本为独立的词汇</li>
<li>除去常见的停止词</li>
<li>匹配同义词</li>
<li>….</li>
</ol>
<p>可以定义字段的时候可以指定 analyzer（索引时） 与 search_analyzer（查询时）</p>
<p>先看经过第一步之后，就可以进入第二步形成倒排索引了，此时，倒排索引之于 ElasticSearch 可以类比于 btree 之于 MySQL 或者 Gist 之于 PostgreSQL.</p>
<p>那么，倒排索引包含哪些东西呢？</p>
<ul>
<li><strong>Terms dictionary</strong><ul>
<li>已排序完毕的 terms, 以及包含这些 terms 的 documents 的数量。</li>
</ul>
</li>
<li><strong>Postings List</strong><ul>
<li>哪些 document 包含这些词</li>
</ul>
</li>
<li><strong>Terms frequency</strong><ul>
<li>每个 term 在这些文章的频率</li>
</ul>
</li>
<li><strong>Position</strong><ul>
<li>每个 term 在每个 document 的位置，这是为了便于 phrase query 和 proximity query</li>
<li>高频词的 phrase query 可能导致 上 G 的数据被读取。虽然有 cache, 但是远远不够。</li>
</ul>
</li>
<li><strong>Offsets</strong><ul>
<li>每个 term 在每个 document 的开始和结束，便于高亮</li>
</ul>
</li>
<li><strong>Norms</strong><ul>
<li>用于给短 field 更多权重的因素.(TODO: 啥玩意）</li>
</ul>
</li>
</ul>
<p>减少停止词仅仅可以减少少部分 terms dictionary 和 postings list , 但是 positions 和 offsets data 对 index 的影响则是非常大的。</p>
<h4 id="2-查询时-ES-做了什么？"><a href="#2-查询时-ES-做了什么？" class="headerlink" title="2. 查询时 ES 做了什么？"></a>2. 查询时 ES 做了什么？</h4><ul>
<li>第一步：<strong>文本经过 analyzer 处理</strong></li>
<li>第二步：<strong>查询倒排索引</strong></li>
</ul>
<h4 id="3-全文搜索调优之中文分词"><a href="#3-全文搜索调优之中文分词" class="headerlink" title="3. 全文搜索调优之中文分词"></a>3. 全文搜索调优之中文分词</h4><p>如何扩展分词词典呢？</p>
<blockquote>
<p>TODO: 这个话题可能比较大，先挖坑，以后填</p>
</blockquote>
<h4 id="4-全文搜索调优之停止词"><a href="#4-全文搜索调优之停止词" class="headerlink" title="4. 全文搜索调优之停止词"></a>4. 全文搜索调优之停止词</h4><p>使用停止词是减少索引大小的一种方式（减小索引效果不明显），那么，哪些词语可以呗当做停止词呢？</p>
<p>低频词语：低频词语具备高权重<br>高频词语：高频词语具备低权重</p>
<p>当然，是否是高频词语依据个人经验主要依据两点来判断：</p>
<ul>
<li>具体情况：比如在英文中，and/the 之类的会比较多，但是中文会比较少。同样的，中文里面其他语言的东西会少一些。正文八经的文章出现不正经的词汇的概率会低。在技术问里面，『数据库』属于高频词汇，但是在比如简书之类的，可能梦想 / 鸡汤 / 超级 / 震惊会多一些。掘金的『前端』两个字绝壁是高频词。</li>
<li>抽样跑新词发现的程序。社区里多的是新词发现的脚本。对文章内容或者从搜索框记录下来的搜索词跑一下新词发现的程序，然后人工筛选，应该可以发现更多的高频和低频的词汇。</li>
</ul>
<p>是不是用上停止词就好了呢？并不是。</p>
<p>比如：</p>
<ul>
<li>假如停止词里面包含了 not , 那么 happy 和 not happy 搜索出来的结果则一致。</li>
<li>假如停止词里面包含了或，那么，如果有个乐队名字叫做『或或』, 则搜索不出来。</li>
<li>假如停止词里面包含了 to / be / not / or , 则莎士比亚的名言 『To be, or not to be』 则搜索不出来。</li>
</ul>
<h4 id="5-全文搜索调优之同义词"><a href="#5-全文搜索调优之同义词" class="headerlink" title="5. 全文搜索调优之同义词"></a>5. 全文搜索调优之同义词</h4><p>同义词也有很多种：</p>
<ol>
<li>平级关系：插、戳、刺、扎</li>
<li>包含关系：成人包含男人和女人</li>
<li>不容易分清楚关系：<ul>
<li>炒，煎，贴，烹，炸，溜<br>　- 汆，涮，煮，炖，煨，焐<br>　- 蒸，鲊<br>　- 卤，酱，熏，烤，炝，腌，拌，焗</li>
</ul>
</li>
</ol>
<p>用法：</p>
<blockquote>
<p>同义词使用自定义 filter , 并且在新建 analyzer 并指定 filter 即可。</p>
</blockquote>
<table>
<thead>
<tr>
<th>-</th>
<th>索引时</th>
<th>查询时</th>
</tr>
</thead>
<tbody>
<tr>
<td>索引大小</td>
<td>耗时变多，同义词被索引，大小更大</td>
<td>耗时几乎不变</td>
</tr>
<tr>
<td>相关性</td>
<td>准确度下降，所有同义词相同 IDF, 则在所有文档的索引记录中，常用词和冷门词权重相同</td>
<td>准确度提升，每个同义词的 IDF 将被校正</td>
</tr>
<tr>
<td>性能</td>
<td>性能下降，查询需要涨到</td>
<td>性能下降，查询被重写，用于查找同义词</td>
</tr>
<tr>
<td>灵活性</td>
<td>变差，同义词法则不改变已存在记录，需重新索引</td>
<td>不变，同义词法则可被更新，无需重新索引</td>
</tr>
</tbody>
</table>
<p>由此可见，大部分场景下的索引时如果没有特别的需求，慎用同义词。</p>
<h4 id="6-全文搜索调优之拼写错误"><a href="#6-全文搜索调优之拼写错误" class="headerlink" title="6. 全文搜索调优之拼写错误"></a>6. 全文搜索调优之拼写错误</h4><p>有的时候，用户也会输入错误：</p>
<ul>
<li>口误，把『周杰伦』拼成『周杰棍』</li>
</ul>
<p>这个时候，搜索引擎应该提示一下，您搜索的是不是『周杰伦』呢？</p>
<p>这里面就遇到了一个问题，我们显然知道周杰棍和周杰伦是是相似的，为什么呢？或者说，直观上感知的详细，能用数学方式表达出来吗？</p>
<p>有人说，正则匹配 / 通配符匹配呗。这是一个思路。</p>
<p>Vladimir Levenshtein 和 frederic damerau 给出了一种相似度算法 <a href="https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance" target="_blank" rel="external">https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance</a></p>
<p>一个词组通过转换到另一个词的步数就是其距离：</p>
<ul>
<li>替换：『周杰伦』到『周杰棍』</li>
<li>插入：『周杰』到『周杰棍』</li>
<li>删除：『周杰伦』到『周杰』</li>
<li>相邻字符转换：『周伦杰』和『周杰伦』 , 但是『周杰棍的双节伦』到『周杰伦的双节棍』 并不是相邻字符转换</li>
</ul>
<p>用法：</p>
<blockquote>
<p>指定 “fuzziness”: step 即可</p>
</blockquote>
<p>当 step &gt;=2 的时候，由于每次查询都会遍历 terms 字典，则如果大于 2 的时候遍历 terms 的数量则非常惊人了。</p>
<ul>
<li>方法一：设置 prefix_length, 单词的前面一定长度不进行 fuzzy 匹配。一般设置为 3 （估计这是属于英文的匹配，中文环境做不了参考）;</li>
<li>方法二：设置 max_expansins, 类似于 RDBMS 的 limit, 查询到一定记录之后停止查询。</li>
</ul>
<p>fuzzy match query 也是支持的，比如说，假如你指定 “fuzziness” 为 1, 搜索周杰棍，则将周杰伦，周杰全搜索出来了。似乎搜索的很全面呀，但是问题来了：</p>
<blockquote>
<p>依据 TF/IDF 的高频低权重，低频高权重的计算方式，<strong>周杰棍由于出现次数极少，反而获得了极高的权重。</strong></p>
</blockquote>
<p>所以，一般情况下还是建议做为下面两个问题的解决方案：</p>
<ul>
<li>Search as you type : completion suggester</li>
<li>Did you mean : phrase suggester</li>
</ul>
<h4 id="7-全文搜索调优之相关性"><a href="#7-全文搜索调优之相关性" class="headerlink" title="7. 全文搜索调优之相关性"></a>7. 全文搜索调优之相关性</h4><p>我们在接触 RDBMS 的时候系统是没有相关性的说法的，比如说，2017 年 12 月份 xxx 用户的订单，就是直接 select 出来这些订单。因为 where 语句后面包含了界限明确的条件，而全文搜索则不然。</p>
<p>全文搜索不仅仅找到匹配的 documents, 并且按照相关性进行排序（其实就是打分 score)。</p>
<p>为什么需要打分呢？从相亲角度来说，上海内环有房肯定是个超级大加分项。同样是录入信息，在上海内环有房的权重值可是设置的高一些。</p>
<p>Elasticsearch 中使用的计算 score 的公式叫做 practical scoring function, 这个公式借鉴于 TF/TDF 以及 矢量空间模型，但有更多的特征比如，条件罂粟，字段长度正态化，term / query clause boosting</p>
<h5 id="索引时三因素"><a href="#索引时三因素" class="headerlink" title="索引时三因素"></a>索引时三因素</h5><p>先看前两个因素 TF/IDF</p>
<ul>
<li>tf(t in d) = sqrt(frequency)</li>
<li>idf(t) = 1 + log (numDocs / (docFreq + 1))</li>
</ul>
<p>再看后一个因素 Field-Length norm</p>
<p>标题越短，这个词对这个 field 的代表性越强</p>
<ul>
<li>norm(d) = 1 / sqrt(numTerms)</li>
</ul>
<h5 id="查询时"><a href="#查询时" class="headerlink" title="查询时"></a>查询时</h5><p>几个词 -&gt; 几维度 -&gt; 寻求最佳匹配以及近似匹配</p>
<ul>
<li>最佳匹配应该是通过计算长度（应该是，但不确定）</li>
<li>近似匹配，计算距离最近的 cos 值。</li>
</ul>
<h5 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h5><p>这个公式调优的时候需要用到</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">score(q,d)  = queryNorm(q)</div><div class="line">                ·coord(q,d)</div><div class="line">                ·∑(tf(t <span class="keyword">in</span> d)·idf(t)²·t.getBoost()·norm(t,d)) (t <span class="keyword">in</span> q)</div></pre></td></tr></table></figure>
<h2 id="0x05-搜索语法"><a href="#0x05-搜索语法" class="headerlink" title="0x05 搜索语法"></a>0x05 搜索语法</h2><p>Single document APIs</p>
<ul>
<li>Index API</li>
<li>Get API</li>
<li>Delete API</li>
<li>Update API</li>
<li>Multi-document APIs</li>
</ul>
<p>Multi Get API</p>
<ul>
<li>Bulk API</li>
<li>Delete By Query API</li>
<li>Update By Query API</li>
<li>Reindex API</li>
</ul>
<blockquote>
<p>TODO: 全文搜索 RDBMS like 的效率问题。</p>
</blockquote>
<p>全文搜索包含两个重要方面：</p>
<ul>
<li><p>相关性：通过 TF/IDF , 距离 , 模糊相似度，以及其他算法</p>
</li>
<li><p>Term-Based : term or fuzzy</p>
</li>
<li>Full-Text : match or query_string</li>
</ul>
<p>TERM 查找-&gt;精确查找</p>
<blockquote>
<p>加上 constant_score 和 filter 的话，就成了常亮？麻痹的，这两个又是啥</p>
</blockquote>
<p> inverted index</p>
<h2 id="0x05-调试"><a href="#0x05-调试" class="headerlink" title="0x05 调试"></a>0x05 调试</h2><p>查看 analyzer 的效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /my_index/_analyze</div><div class="line">&#123;</div><div class="line">  <span class="string">"analyzer"</span> : <span class="string">"my_synonyms"</span>,</div><div class="line">  <span class="string">"text"</span> : <span class="string">"Elizabeth is the English queen"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="0x06-Python-SDK"><a href="#0x06-Python-SDK" class="headerlink" title="0x06 Python SDK"></a>0x06 Python SDK</h2><p>官方提供了两个 SDK 方便我们进行日常的开发：</p>
<ul>
<li>elasticsearch</li>
<li>elasticsearch_dsl</li>
</ul>
<h3 id="6-1-与-Python-集成"><a href="#6-1-与-Python-集成" class="headerlink" title="6.1 与 Python 集成"></a>6.1 与 Python 集成</h3><p>前者偏底层一些，后者偏高层一些，高底层关系的有点类似于 sqlalchemy core 和 sqlalchemy orm 之间的关系。</p>
<h3 id="6-2-与-Django-集成"><a href="#6-2-与-Django-集成" class="headerlink" title="6.2 与 Django 集成"></a>6.2 与 Django 集成</h3><h4 id="elasticsearch-analysis-ik-的配置"><a href="#elasticsearch-analysis-ik-的配置" class="headerlink" title="elasticsearch-analysis-ik 的配置"></a>elasticsearch-analysis-ik 的配置</h4><h2 id="0x07-踩坑集"><a href="#0x07-踩坑集" class="headerlink" title="0x07 踩坑集"></a>0x07 踩坑集</h2><ul>
<li>序列问题</li>
</ul>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><a href="https://www.zhihu.com/question/19645541" target="_blank" rel="external">https://www.zhihu.com/question/19645541</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-15</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 ElasticSearch 相关和命令。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
&lt;p&gt;最早使用 ElasticSearch 是两年前了。最近准备用 Django 写一个全栈式的应用，借用强大的 ES 来做搜索。这是我在写程序之余写这篇文章的原因。&lt;/p&gt;
&lt;p&gt;官网介绍 ElasticSearch 不仅仅是全文搜索，也可以结构化搜索（这里用结构化查询会更准确一些），分析，处理人类语言，地理位置，以及关系。&lt;/p&gt;
&lt;p&gt;然而，我在项目使用过程中还是主要用到了全文搜索以及推荐。&lt;/p&gt;
&lt;p&gt;不用其他的主要原因是因为 ES 尺有所短寸有所长：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;geo 处理方面 postgis 完全就是神一般的存在。为什么还要用 ES 呢？&lt;/li&gt;
&lt;li&gt;关系型数据库的核心不就是处理关系？复杂的关系肯定还是放在关系数据库里面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;highlighted search snippets, and search-as-you-type and did-you-mean suggestions.&lt;/p&gt;
&lt;p&gt;我对 ElasticSearch 在后台组件里的作用在于搜索与推荐：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整站的搜索功能&lt;ul&gt;
&lt;li&gt;全文搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推荐&lt;ul&gt;
&lt;li&gt;依据某几个维度的数据进行排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="后台组件" scheme="http://twocucao.xyz/categories/%E5%90%8E%E5%8F%B0%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="CheatSheet" scheme="http://twocucao.xyz/tags/CheatSheet/"/>
    
      <category term="ElasticSearch" scheme="http://twocucao.xyz/tags/ElasticSearch/"/>
    
      <category term="搜索排序" scheme="http://twocucao.xyz/tags/%E6%90%9C%E7%B4%A2%E6%8E%92%E5%BA%8F/"/>
    
      <category term="搜索引擎" scheme="http://twocucao.xyz/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Docker CheatSheet</title>
    <link href="http://twocucao.xyz/2018/02/10/DockerCheatSheet/"/>
    <id>http://twocucao.xyz/2018/02/10/DockerCheatSheet/</id>
    <published>2018-02-10T01:01:55.000Z</published>
    <updated>2018-02-11T01:14:31.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Docker 相关和命令。</p>
<ul>
<li>Docker 相关概念</li>
<li>Docker 配套工具</li>
<li>Django PostgreSQL RabbitMQ Redis ElasticSearch Sentry 集群 Docker 化</li>
<li>Docker 踩坑记录</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>
<h2 id="0x01-Docker-相关概念"><a href="#0x01-Docker-相关概念" class="headerlink" title="0x01 Docker 相关概念"></a>0x01 Docker 相关概念</h2><h3 id="1-1-Docker-是什么？"><a href="#1-1-Docker-是什么？" class="headerlink" title="1.1 Docker 是什么？"></a>1.1 Docker 是什么？</h3><p>在认知 Docker 这种相对而言比较新概念的时候，只要从以往的经验中拿出一个词语来概括新词汇即可。</p>
<p>于是，我们便可以这么理解：</p>
<blockquote>
<p>Docker 是一种比虚拟机轻量的用来存放职责比较单一的应用的容器。</p>
</blockquote>
<p>也就是三点：</p>
<ul>
<li>比虚拟机轻量</li>
<li>用来存放职责单一的应用</li>
<li>容器</li>
</ul>
<p>显然这是一种理解，而不是一种定义。</p>
<h3 id="1-2-Docker-是用来做什么的？"><a href="#1-2-Docker-是用来做什么的？" class="headerlink" title="1.2 Docker 是用来做什么的？"></a>1.2 Docker 是用来做什么的？</h3><p>新技术本质是什么？工具也。<br>每一个新的技术都是为了提升效率才被创造出来，那么，究竟 Docker 可以从哪些方面提升我们的效率呢？</p>
<p>我们知道开发一个有些规模的网站的话，需要严格遵守如下的开发流程：</p>
<ul>
<li>编码</li>
<li>测试</li>
<li>集成到系统中</li>
<li>部署</li>
</ul>
<p>但如果人员比较多，则会出现问题，有的人喜欢用 MacOS, 有的人喜欢用 Ubuntu, 开发测试环境怎么统一呢？如果开发人员明明使用的是某个版本的 PostgreSQL, 用了最新的功能，但是测试和运维用的就是老版本的功能怎么办？</p>
<p>部署环境也会有问题，比如，开发部突然想使用更高版本的软件，比如突然需要更多的 Django 应用来负担海量请求的怎么办？Hadoop 不够用怎么办？</p>
<p>当然，思路很简单，开发的时候使用虚拟机，拷贝给大家一起用，部署的时候多创建一些机器，然后上 Ansible 远程操控。即可。</p>
<p>并不是不行，但是 Docker 由于更加轻量，操作粒度更加细腻，我可以销毁镜像，上传镜像，定制镜像，很轻松调整镜像包并且安装挂载文件。</p>
<h2 id="0x02-Docker-初始配置"><a href="#0x02-Docker-初始配置" class="headerlink" title="0x02 Docker 初始配置"></a>0x02 Docker 初始配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker-machine create --driver=virtualbox default</div><div class="line">docker-machine ls</div><div class="line">eval &quot;$(docker-machine env default)&quot;</div></pre></td></tr></table></figure>
<h2 id="0x03-Django-技术栈-Docker-化"><a href="#0x03-Django-技术栈-Docker-化" class="headerlink" title="0x03 Django 技术栈 Docker 化"></a>0x03 Django 技术栈 Docker 化</h2><p>为了理解这个过程，下面我将我 Docker 化 django 应用的流程按照一定步骤演示出来。我将我使用 Django 的部分经验搞出来，做成了一个 django-bpc ，即 django best practice。如果诸位有兴趣研究的话，拿来看看源码倒是倒是非常好。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 演示环境为 MAC, 在此之前，务必安装好 docker for mac 以及 virualbox</span></div><div class="line"><span class="comment"># xxxxxx 为 阿里云分配的容器 registry</span></div><div class="line">docker-machine create --engine-registry-mirror=https://xxxxxx.mirror.aliyuncs.com <span class="_">-d</span> virtualbox default</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">├── AUTHORS.md</div><div class="line">├── HISTORY.md</div><div class="line">├── LICENSE</div><div class="line">├── MANIFEST.in</div><div class="line">├── Makefile</div><div class="line">├── README.md</div><div class="line">├── assets</div><div class="line">├── compose</div><div class="line">│   ├── django</div><div class="line">│   ├── elasticsearch</div><div class="line">│   ├── nginx</div><div class="line">│   ├── postgres</div><div class="line">│   ├── rabbitmq</div><div class="line">│   └── redis</div><div class="line">├── config</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── settings</div><div class="line">│   ├── urls.py</div><div class="line">│   └── wsgi.py</div><div class="line">├── dev.yml</div><div class="line">├── docker-compose.yml</div><div class="line">├── docs</div><div class="line">│   ├── Makefile</div><div class="line">│   ├── exts</div><div class="line">│   ├── make.bat</div><div class="line">│   ├── make_pdf.sh</div><div class="line">│   └── <span class="built_in">source</span></div><div class="line">├── manage.py</div><div class="line">├── pytest.ini</div><div class="line">├── requirements</div><div class="line">│   ├── base.txt</div><div class="line">│   ├── local.txt</div><div class="line">│   ├── production.txt</div><div class="line">│   └── test.txt</div><div class="line">├── scripts</div><div class="line">├── setup.cfg</div><div class="line">├── tests</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── conftest.py</div><div class="line">│   └── test_basics.py</div><div class="line">└── yadjangoblog</div><div class="line">    ├── __init__.py</div><div class="line">    ├── contrib</div><div class="line">    ├── static</div><div class="line">    ├── templates</div><div class="line">    ├── yaaccounts</div><div class="line">    ├── yaadmin</div><div class="line">    ├── yaapi</div><div class="line">    ├── yablog</div><div class="line">    ├── yacommon</div><div class="line">    └── yataskapp</div></pre></td></tr></table></figure>
<h3 id="3-1-开发时"><a href="#3-1-开发时" class="headerlink" title="3.1 开发时"></a>3.1 开发时</h3><h4 id="1-运行所需组件"><a href="#1-运行所需组件" class="headerlink" title="1. 运行所需组件"></a>1. 运行所需组件</h4><p>在开发时候需要使用几个后台的组件</p>
<ul>
<li>PostgreSQL 用于做数据存储</li>
<li>Redis 用于做缓存 和 Session 等等</li>
<li>RedditMQ 用于消息队列</li>
<li>ElasticSearch 用于做搜索与推荐</li>
</ul>
<p>目录中的组件基本上都在这儿了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── compose</div><div class="line">│   ├── django</div><div class="line">│   ├── elasticsearch</div><div class="line">│   ├── nginx</div><div class="line">│   ├── postgres</div><div class="line">│   ├── rabbitmq</div><div class="line">│   └── redis</div></pre></td></tr></table></figure>
<p>进行初步的封装和添加脚本，不直接采用官网的配置需要是因为添加一些的定制版本。</p>
<h4 id="2-Vue-JS-运行环境"><a href="#2-Vue-JS-运行环境" class="headerlink" title="2. Vue.JS 运行环境"></a>2. Vue.JS 运行环境</h4><p>Vue.JS 使用 Vue-Cli 搭建的脚手架还是挺方便的，这个就无需 Docker 化了，需要注意的是，建议配置一下开发时候请求的 API 地址。</p>
<p>我本人用于请求本地地址的 8080 端口，并且 8080 端口映射到 Docker 容器里面的 Django App</p>
<h4 id="3-Django-App"><a href="#3-Django-App" class="headerlink" title="3. Django App"></a>3. Django App</h4><p>配置 Django, 我使用的是 ubuntu 16.04 基础镜像，然后安装必备的依赖。</p>
<p>接着指定 workdir 为当前目录</p>
<p>需要注意的是，Django App 里面需要等待 PostgreSQL 初始化完毕才能进行正常的运行接下来需要运行的命令，比如 runserver 之类的命令。</p>
<p>entrypoint 的左右即是放在命令执行之前，这样的话，重写掉 entrypoint 文件，就可以实现上面的功能了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 本段代码来自 cookiecutter Django</span></div><div class="line">function postgres_ready()&#123;</div><div class="line">python &lt;&lt; END</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> psycopg2</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    conn = psycopg2.connect(dbname=<span class="string">"$POSTGRES_USER"</span>, user=<span class="string">"$POSTGRES_USER"</span>, password=<span class="string">"$POSTGRES_PASSWORD"</span>, host=<span class="string">"postgres"</span>)</div><div class="line"><span class="keyword">except</span> psycopg2.OperationalError:</div><div class="line">    sys.exit(<span class="number">-1</span>)</div><div class="line">sys.exit(<span class="number">0</span>)</div><div class="line">END</div><div class="line">&#125;</div><div class="line"></div><div class="line">until postgres_ready; do</div><div class="line">  &gt;&amp;<span class="number">2</span> echo <span class="string">"Postgres is unavailable - sleeping"</span></div><div class="line">  sleep <span class="number">1</span></div><div class="line">done</div></pre></td></tr></table></figure>
<p>最后封装一些命令到，比如启动 Celery 之类的。</p>
<h4 id="4-Celery-运行环境"><a href="#4-Celery-运行环境" class="headerlink" title="4. Celery 运行环境"></a>4. Celery 运行环境</h4><h4 id="5-其他零散的重要配置"><a href="#5-其他零散的重要配置" class="headerlink" title="5. 其他零散的重要配置"></a>5. 其他零散的重要配置</h4><h3 id="3-2-具体开发"><a href="#3-2-具体开发" class="headerlink" title="3.2 具体开发"></a>3.2 具体开发</h3><p>我编写了一整套 makefile 的命令，我会先进入项目 YaDjangoBlog , 然后执行 make ; 执行 make 之后，显示了我编写的一些便于开发测试的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">sep--sep-a           ========== 开发时命令 ==============</div><div class="line">django-build-up      build and compose up</div><div class="line">force_djnago_build-up django / pg / es</div><div class="line">django-before-up     e.g pg / es / redis</div><div class="line">django-runserver     runserver</div><div class="line">django-celerybeat    celerybeat</div><div class="line">django-celeryworker  celeryworker</div><div class="line">django-just-up       build and up</div><div class="line">django-manager       Enter python manage.py</div><div class="line">django-console       Enter Django Console</div><div class="line">shell                Enter Shell</div><div class="line">dbshell              Enter psql as yadjangoweb</div><div class="line">sep--sep-b           ========== 测试与代码质量 ==============</div><div class="line">lint                 check style with flake8</div><div class="line">test                 run tests quickly with the default Python</div><div class="line">coverage             check code coverage quickly with the default Python</div><div class="line">sep--sep-c           ========== 文档生成相关 ==============</div><div class="line">docs                 generate Sphinx HTML documentation, including API docs</div><div class="line">servedocs            compile the docs watching for changes</div><div class="line">sep--sep-d           ========== 程序发布相关 ==============</div><div class="line">release              package and upload a release</div><div class="line">dist                 builds source and wheel package</div><div class="line">install              install the package to the active Python&apos;s site-packages</div><div class="line">sep--sep-e           ========== Docker 镜像相关 ==============</div><div class="line">build-postgres       &gt; Postgres</div><div class="line">force-build-postgres &gt; Postgres</div><div class="line">build-ubuntu         &gt; base ubuntu</div><div class="line">force_build-ubuntu   &gt; base ubuntu</div><div class="line">build-django         &gt; base django</div><div class="line">force_build-django   &gt; base django</div><div class="line">sep--sep-f           ========== 文件清理相关 ==============</div><div class="line">clean                remove all build, test, coverage and Python artifacts</div><div class="line">clean-build          remove build artifacts</div><div class="line">clean-pyc            remove Python file artifacts</div><div class="line">clean-test           remove test and coverage artifacts</div></pre></td></tr></table></figure>
<h4 id="1-构建镜像"><a href="#1-构建镜像" class="headerlink" title="1. 构建镜像"></a>1. 构建镜像</h4><p>执行 build 命令即可。</p>
<h4 id="2-使用-Tmuxinator-批量运行命令"><a href="#2-使用-Tmuxinator-批量运行命令" class="headerlink" title="2. 使用 Tmuxinator 批量运行命令"></a>2. 使用 Tmuxinator 批量运行命令</h4><p>现在，我有这么一个需求，就是在 iterm 中开启如下的终端：</p>
<ul>
<li>第 1 个终端，运行的命令是 Vue.JS 的启动命令 npm run dev。</li>
<li>第 2 个终端，有两个分屏，其一用于构建 iconfont 字体文件的命令，其二用于 Gulp 动态编译 SCSS 文件的命令。</li>
<li>第 3 个终端，运行的命令是 Django 的 runserver 的命令。</li>
<li>第 4 个终端，有两个分屏，一个是 Django 容器的 bash 环境，另一个是 PostgreSQL 的 命令行环境。</li>
<li>第 5 个终端，有两个分屏，一者运行 Celery Beat，另一者则是运行 Celery Worker.</li>
</ul>
<blockquote>
<p>当然，目前没有添加 redis 和 RabbitMQ 的命令行环境</p>
</blockquote>
<h4 id="3-使用-PyCharm-进行开发"><a href="#3-使用-PyCharm-进行开发" class="headerlink" title="3. 使用 PyCharm 进行开发"></a>3. 使用 PyCharm 进行开发</h4><h3 id="3-3-部署时"><a href="#3-3-部署时" class="headerlink" title="3.3 部署时"></a>3.3 部署时</h3><p>Docker 部署需要解决的问题，是裸机部署的 Docker 化。</p>
<blockquote>
<p>TODO: 目前 Docker 部署的脚本还在编写中，这部分的文字可能后期会调整</p>
</blockquote>
<h4 id="0-Django-生产环境和开发环境之间的区别"><a href="#0-Django-生产环境和开发环境之间的区别" class="headerlink" title="0. Django 生产环境和开发环境之间的区别"></a>0. Django 生产环境和开发环境之间的区别</h4><p>生产环境和开发环境除了一些文字配置上的不同，还有一些不同，比如：</p>
<ol>
<li>新增了 uwsgi / gunicorn 作为新的 web 容器</li>
<li>新增了 Ngnix 作为反向代理</li>
<li>Celery Worker 数量的变化</li>
<li>Supervisor 进程守护</li>
</ol>
<p>首先说第一点带来的区别，我们使用 Django 内置的 runserver 的时候，其实这个命令可以用于做生产环境的 Web 服务器。</p>
<p>比如，只需如此 python manage.py runserver 0.0.0.0:8888</p>
<p>可以用，但不推荐用。没什么负载量。这时候就需要 gunicorn 了。你可以理解 Gunicorn 是进阶的 runserver,</p>
<p>可以参考：<a href="https://docs.djangoproject.com/en/2.0/howto/deployment/wsgi/gunicorn/" target="_blank" rel="external">https://docs.djangoproject.com/en/2.0/howto/deployment/wsgi/gunicorn/</a></p>
<p>同时，Gunicorn 可以进行颗粒度更细致的操作，但负载量不如 uwsgi, 毕竟前者 python 写的，后者是 C 写的。</p>
<p>一般 Gunicorn 也会配上 NGNIX,</p>
<p>简单来说，Nginx 至少可以解决下面的问题：</p>
<ul>
<li>匹配域名</li>
<li>转发请求<ul>
<li>设置请求头</li>
<li>转发本地的静态文件 (static / media）</li>
<li>映射部分请求到 gunicorn , 然后 gunicorn 开启一个线程到 Django</li>
<li>负载均衡</li>
</ul>
</li>
</ul>
<p>需要注意的是 gunicorn 这种关键性的进程，一定要用 Supervisor 进行守护，否则挂掉了就完蛋了，</p>
<h4 id="1-裸机部署-Django-程序"><a href="#1-裸机部署-Django-程序" class="headerlink" title="1. 裸机部署 Django 程序"></a>1. 裸机部署 Django 程序</h4><h4 id="2-Docker-部署"><a href="#2-Docker-部署" class="headerlink" title="2. Docker 部署"></a>2. Docker 部署</h4><h2 id="0x04-Docker-踩坑记录"><a href="#0x04-Docker-踩坑记录" class="headerlink" title="0x04 Docker 踩坑记录"></a>0x04 Docker 踩坑记录</h2><h3 id="4-1-PostgreSQL-的初始化"><a href="#4-1-PostgreSQL-的初始化" class="headerlink" title="4.1 PostgreSQL 的初始化"></a>4.1 PostgreSQL 的初始化</h3><p>当 Docker 化 PostgreSQL 的时候，必须要把一些初始化脚本放在 docker-entrypoint-initdb.d 中，才能初始化，笔者在进行测试的时候多次发现无法进行初始化，究其原因，经过查找，如果没有及时删除 Volume 的话，则无论怎么初始化，或者 Build, 每一次都会挂载原来的文件夹。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ADD init_django_db.sh /docker-entrypoint-initdb.d/init_django_db.sh</div></pre></td></tr></table></figure>
<h3 id="4-2-清空所有-Image"><a href="#4-2-清空所有-Image" class="headerlink" title="4.2 清空所有 Image"></a>4.2 清空所有 Image</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Delete all containers</span></div><div class="line">docker rm $(docker ps <span class="_">-a</span> -q)</div><div class="line"><span class="comment"># Delete all images</span></div><div class="line">docker rmi $(docker images -q)</div><div class="line"><span class="comment"># Force delete</span></div><div class="line">docker rmi $(docker images -q) <span class="_">-f</span></div><div class="line"><span class="comment"># Delete Unused Volume</span></div><div class="line">docker volume prune</div></pre></td></tr></table></figure>
<h1 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h1><ul>
<li><a href="https://github.com/wsargent/docker-cheat-sheet" target="_blank" rel="external">https://github.com/wsargent/docker-cheat-sheet</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-01-20</strong> 初始化本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Docker 相关和命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 相关概念&lt;/li&gt;
&lt;li&gt;Docker 配套工具&lt;/li&gt;
&lt;li&gt;Django PostgreSQL RabbitMQ Redis ElasticSearch Sentry 集群 Docker 化&lt;/li&gt;
&lt;li&gt;Docker 踩坑记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="我的开源项目" scheme="http://twocucao.xyz/categories/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Django" scheme="http://twocucao.xyz/tags/Django/"/>
    
      <category term="Docker" scheme="http://twocucao.xyz/tags/Docker/"/>
    
      <category term="DevOps" scheme="http://twocucao.xyz/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Numpy Cheatsheet</title>
    <link href="http://twocucao.xyz/2018/02/03/NumpyCheatSheet/"/>
    <id>http://twocucao.xyz/2018/02/03/NumpyCheatSheet/</id>
    <published>2018-02-03T02:37:53.000Z</published>
    <updated>2018-02-11T01:19:55.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Numpy 相关语句。</p>
<p>主要包含：</p>
<h1 id="Numpy-库"><a href="#Numpy-库" class="headerlink" title="Numpy 库"></a>Numpy 库</h1><h2 id="0x00-前言-1"><a href="#0x00-前言-1" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Numpy 相关语句。</p>
<p>对于数据分析应用而言，最应该关注：</p>
<ul>
<li>用于数据整理和清理、子集构造和过滤、转换等快速的矢量化数组运算。</li>
<li>常用的数组算法，如排序、唯一化、集合运算等。</li>
<li>高效的描述统计和数据聚合 / 摘要运算。</li>
<li>用于异构数据集的合并 / 连接运算的数据对齐和关系型数据运算。</li>
<li>将条件逻辑表述为数组表达式（而不是带有 if-else-if 分支的循环）</li>
<li>数据的分组运算（聚合、转换、函数应用等）。</li>
</ul>
<blockquote>
<p>学习 Numpy 本质上是为了更好的使用 Pandas</p>
</blockquote>
<h2 id="0x01-ndarray"><a href="#0x01-ndarray" class="headerlink" title="0x01 ndarray"></a>0x01 ndarray</h2><h3 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a>1.1 数据类型</h3><h3 id="1-2-创建-ndarray"><a href="#1-2-创建-ndarray" class="headerlink" title="1.2 创建 ndarray"></a>1.2 创建 ndarray</h3><h3 id="1-3-数组和标量之间的运算"><a href="#1-3-数组和标量之间的运算" class="headerlink" title="1.3 数组和标量之间的运算"></a>1.3 数组和标量之间的运算</h3><p>当我们把数组当做矢量的时候。</p>
<ol>
<li>两个大小相同的矢量将运算到元素级</li>
<li>矢量和标量将作用与每一个元素</li>
<li>不同大小的矢量之间的运算叫做广播</li>
</ol>
<h3 id="1-4-索引和切片"><a href="#1-4-索引和切片" class="headerlink" title="1.4 索引和切片"></a>1.4 索引和切片</h3><h3 id="1-4-1-一般索引和一般切片"><a href="#1-4-1-一般索引和一般切片" class="headerlink" title="1.4.1 一般索引和一般切片"></a>1.4.1 一般索引和一般切片</h3><p>对于一维数组的话，如果没有显式 copy 则会修改原来的值。</p>
<p>切片语法与 Python 相近</p>
<h3 id="1-4-2-切片型索引"><a href="#1-4-2-切片型索引" class="headerlink" title="1.4.2 切片型索引"></a>1.4.2 切片型索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a[:<span class="number">2</span>,<span class="number">1</span>:]</div><div class="line">a[<span class="number">2</span>,<span class="number">1</span>:]</div></pre></td></tr></table></figure>
<h3 id="1-4-3-布尔型索引"><a href="#1-4-3-布尔型索引" class="headerlink" title="1.4.3 布尔型索引"></a>1.4.3 布尔型索引</h3><p>参考 pandas 语法</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-06-03</strong> 初始化本文</li>
<li><strong>2018-02-03</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Numpy 相关语句。&lt;/
    
    </summary>
    
      <category term="数据科学" scheme="http://twocucao.xyz/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="Pandas" scheme="http://twocucao.xyz/tags/Pandas/"/>
    
      <category term="效率" scheme="http://twocucao.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
      <category term="Numpy" scheme="http://twocucao.xyz/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>用 tmux 与 tmuxinator 打造开发工作流</title>
    <link href="http://twocucao.xyz/2018/01/28/TmuxWithTmuxinatorWorkflow/"/>
    <id>http://twocucao.xyz/2018/01/28/TmuxWithTmuxinatorWorkflow/</id>
    <published>2018-01-28T02:57:41.000Z</published>
    <updated>2018-01-28T08:01:27.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>本文就我最近开发的一个前后端的项目（名字叫做 yavueblog) 来简单介绍两个神器</p>
<ul>
<li>一个是 tmux</li>
<li>一个是 tmuxinator</li>
</ul>
<p>我在开发这个前后端的项目的时候要开启要通过不少的命令来启动服务：</p>
<ul>
<li>（前端开发）运行 npm run dev 进行开发前端页面</li>
<li>（前端开发）运行 npm run dev:theme , 当主题的 SCSS 发生变化的同时，编译 SCSS</li>
<li>（前端开发）运行 npm run dev:iconfont, 当移入了新的 svg 图标的时候，自动构建出新的字体文件与 iconfont.css 。</li>
<li>（后端开发）运行 make dockerup 中开启 Django 应用。启动 Django 服务，PostgreSQL 数据库，Redis 等等，</li>
</ul>
<p>我的需求如下：</p>
<ul>
<li>一键启动这些脚本，前两个任务，放在第一个终端。</li>
<li>后面两个任务放在第二、三个终端里。</li>
</ul>
<p>以前的做法都是新建三个终端选项卡，然后第一个终端分两屏，然后分别到各个终端 cd 或者 autojump 到对应的目录，然后手动运行命令。</p>
<p>加上运行 npm run dev:theme 的时候，我是通过 Python 的 watchdog 来实现对指定目录和指定类型文件的变化进行监听的，所以还要切换 PyEnv 自定义的 Python 的环境中。</p>
<p>这些命令反反复复输入还是挺麻烦的事情，为何不用工具来解决呢？</p>
<h2 id="0x01-tmux-tmuxinator"><a href="#0x01-tmux-tmuxinator" class="headerlink" title="0x01 tmux + tmuxinator"></a>0x01 tmux + tmuxinator</h2><p>先安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">brew install tmux</div><div class="line">brew install ruby</div><div class="line">gem install tmuxinator</div></pre></td></tr></table></figure>
<p>什么是 tmux?  简单而言，就是一个终端复用软件。<br>什么是 tmuxinator? 简单而言，就是为了简化 tmux 操作的软件。只需要编写 yaml 即快速开启一个比较适合你的终端窗口布局。</p>
<p>关于 tmux 的配置，推荐这个 repo</p>
<p><a href="https://github.com/gpakosz/.tmux" target="_blank" rel="external">https://github.com/gpakosz/.tmux</a></p>
<h2 id="0x02-编写-Tmuxinator-配置文件"><a href="#0x02-编写-Tmuxinator-配置文件" class="headerlink" title="0x02 编写 Tmuxinator 配置文件"></a>0x02 编写 Tmuxinator 配置文件</h2><p>输入 tmuxinator new yavueblog</p>
<p>修改文件如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># ~/.tmuxinator/yavueblog.yml</div><div class="line"></div><div class="line">name: yavueblog</div><div class="line">root: ~/Codes/PublicRepos/YaBlogSystem/</div><div class="line"></div><div class="line"># Optional tmux socket</div><div class="line"># socket_name: foo</div><div class="line"></div><div class="line"># Runs before everything. Use it to start daemons etc.</div><div class="line"># pre: sudo /etc/rc.d/mysqld start</div><div class="line"></div><div class="line"># Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.</div><div class="line">pre_window: pyenv activate 3.5.2/envs/py3-daily</div><div class="line"></div><div class="line">windows:</div><div class="line">  - &quot;网站开发&quot;:</div><div class="line">      layout: main-vertical</div><div class="line">      # Synchronize all panes of this window, can be enabled before or after the pane commands run.</div><div class="line">      # &apos;before&apos; represents legacy functionality and will be deprecated in a future release, in favour of &apos;after&apos;</div><div class="line">      # synchronize: after</div><div class="line">      panes:</div><div class="line">        - &quot;cd ./YaVueBlog/ &amp;&amp; npm run dev&quot;</div><div class="line">        - &quot;cd ./YaVueBlog/ &amp;&amp; npm run dev:theme&quot;</div><div class="line">  - &quot;iconfont 构建&quot;: &quot;cd ./YaVueBlog/ &amp;&amp; npm run dev:iconfont&quot;</div><div class="line">  - &quot;DockerizedDjango&quot;: &quot;cd ./YaDjangoBlog/ &amp;&amp; make docker-compose-build-up&quot;</div></pre></td></tr></table></figure>
<p>这样的话，每次开发就只需要运行 tmuxinator start yavueblog，并且打开 IDE 直接捋起袖子就是干就好了。</p>
<h2 id="0x03-玩-tmux-首先要掌握的三个小技巧"><a href="#0x03-玩-tmux-首先要掌握的三个小技巧" class="headerlink" title="0x03 玩 tmux 首先要掌握的三个小技巧"></a>0x03 玩 tmux 首先要掌握的三个小技巧</h2><p>如果你刚用 tmux 的话，火速掌握下面三个小技巧。要不然会抓狂的。</p>
<ol>
<li>切换终端</li>
</ol>
<ul>
<li>c-b + 数字</li>
<li>c-b + n</li>
</ul>
<ol>
<li>滚屏</li>
</ol>
<p><a href="https://superuser.com/questions/209437/how-do-i-scroll-in-tmux" target="_blank" rel="external">https://superuser.com/questions/209437/how-do-i-scroll-in-tmux</a></p>
<ol>
<li>复制文字</li>
</ol>
<p><a href="https://superuser.com/questions/196060/selecting-text-in-tmux-copy-mode" target="_blank" rel="external">https://superuser.com/questions/196060/selecting-text-in-tmux-copy-mode</a></p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><a href="https://github.com/twocucao" target="_blank" rel="external">我的 Github</a></li>
</ul>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-03-08 09:33:37</strong> 重新润饰文字，弃用 Rails 开发一年。现在主 DjangoRestFrameWork+VueJS</li>
<li><strong>2018-01-28 11:44:00</strong> 重修文字，适配本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;p&gt;本文就我最近开发的一个前后端的项目（名字叫做 yavueblog) 来简单介绍两个神器&lt;/p&gt;

    
    </summary>
    
      <category term="善用佳软" scheme="http://twocucao.xyz/categories/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
    
      <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tmux" scheme="http://twocucao.xyz/tags/Tmux/"/>
    
      <category term="Tmuxinator" scheme="http://twocucao.xyz/tags/Tmuxinator/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的数据压缩和存档</title>
    <link href="http://twocucao.xyz/2018/01/23/PythonCompression/"/>
    <id>http://twocucao.xyz/2018/01/23/PythonCompression/</id>
    <published>2018-01-23T06:56:30.000Z</published>
    <updated>2018-01-28T02:55:03.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在一次数据分析过程中，对方扔过来 40GB 的数据 – data.tar.gz .</p>
<p>我想着能不能直接用 pandas 直接读取这个文件呢？查找了一些资料，于是有了本文。</p>
<p>Python 中支持如下：</p>
<ul>
<li>数据压缩算法：zlib, gzip, bzip2 and lzma</li>
<li>存档格式：zip 以及 tar</li>
</ul>
<h2 id="0x01-压缩是怎么回事？"><a href="#0x01-压缩是怎么回事？" class="headerlink" title="0x01 压缩是怎么回事？"></a>0x01 压缩是怎么回事？</h2><h2 id="0x02-zlib-与-gzip"><a href="#0x02-zlib-与-gzip" class="headerlink" title="0x02 zlib 与 gzip"></a>0x02 zlib 与 gzip</h2><p>gzip 依赖于 zlib</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># 读取压缩文件</div><div class="line">import gzip</div><div class="line">with gzip.open(&apos;/home/joe/file.txt.gz&apos;, &apos;rb&apos;) as f:</div><div class="line">    file_content = f.read()</div><div class="line"></div><div class="line"># 写入压缩文件</div><div class="line">import gzip</div><div class="line">content = b&quot;Lots of content here&quot;</div><div class="line">with gzip.open(&apos;/home/joe/file.txt.gz&apos;, &apos;wb&apos;) as f:</div><div class="line">    f.write(content)</div><div class="line"></div><div class="line"># 拷贝压缩文件</div><div class="line">import gzip</div><div class="line">import shutil</div><div class="line">with open(&apos;/home/joe/file.txt&apos;, &apos;rb&apos;) as f_in:</div><div class="line">    with gzip.open(&apos;/home/joe/file.txt.gz&apos;, &apos;wb&apos;) as f_out:</div><div class="line">        shutil.copyfileobj(f_in, f_out)</div><div class="line"></div><div class="line"># 压缩二进制字符串</div><div class="line">import gzip</div><div class="line">s_in = b&quot;Lots of content here&quot;</div><div class="line">s_out = gzip.compress(s_in)</div></pre></td></tr></table></figure>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-12-20</strong> 初始化本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;在一次数据分析过程中，对方扔过来 40GB 的数据 – data.tar.gz .&lt;/p&gt;
&lt;p&gt;我
    
    </summary>
    
      <category term="Python 黑魔法" scheme="http://twocucao.xyz/categories/Python-%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
    
      <category term="数据压缩" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>关于 CSS 你应该知道的一切</title>
    <link href="http://twocucao.xyz/2017/12/28/AllStuffAboutCSS/"/>
    <id>http://twocucao.xyz/2017/12/28/AllStuffAboutCSS/</id>
    <published>2017-12-28T10:41:47.000Z</published>
    <updated>2018-02-12T05:46:07.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本笔记诞生于很久前零零散散记录的笔记，拿出来发布一下。</p>
<h2 id="0x01-CSS-是如何工作的？"><a href="#0x01-CSS-是如何工作的？" class="headerlink" title="0x01 CSS 是如何工作的？"></a>0x01 CSS 是如何工作的？</h2><p>HTML 是元素的标记语言。</p>
<p>CSS 被用来 样式和网页布局的。</p>
<p>样式和布局都有哪些呢？</p>
<ul>
<li>字体</li>
<li>颜色</li>
<li>大小</li>
<li>内容间距</li>
<li>多列</li>
<li>动画</li>
</ul>
<p>通过 DOM 树的节点和样式节点结合，生成渲染树，然后交给浏览器进行渲染从而使得外观发生变化。</p>
<h2 id="0x02-CSS-基本语法"><a href="#0x02-CSS-基本语法" class="headerlink" title="0x02 CSS 基本语法"></a>0x02 CSS 基本语法</h2><p>CSS 基本语法有三个组成部分：</p>
<ol>
<li>规则</li>
<li>选择器</li>
<li>属性</li>
</ol>
<h3 id="2-1-CSS-规则"><a href="#2-1-CSS-规则" class="headerlink" title="2.1 CSS 规则"></a>2.1 CSS 规则</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">h1 &#123;</div><div class="line">    colour: blue;</div><div class="line">    background-color: yellow;</div><div class="line">    border: 1px solid black;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// @规则</div><div class="line"></div><div class="line">@import</div><div class="line">@charset</div><div class="line">@media</div><div class="line">@font-face</div><div class="line"></div><div class="line">/* in shorthand like padding and margin, the values are applied</div><div class="line">in the order top, right, bottom, left (the same order as an analog clock). There are also other</div><div class="line">shorthand types, for example two values, which set for example</div><div class="line">the padding for top/bottom, then left/right */</div><div class="line">padding: 10px 15px 15px 5px;</div></pre></td></tr></table></figure>
<h3 id="2-2-选择器"><a href="#2-2-选择器" class="headerlink" title="2.2 选择器"></a>2.2 选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">// Simple selectors: Match one or more elements based on element type, class, or id.</div><div class="line">/* All div elements are blue */</div><div class="line">div &#123;</div><div class="line">    color: blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line">h1 &#123;</div><div class="line">    color: red;</div><div class="line">    text-shadow: 1px 1px 1px black;</div><div class="line">    background: linear-gradient(to bottom, rgba(0,0,0,0.25), rgba(0,0,0,0.1));</div><div class="line">    padding: 3px;</div><div class="line">    text-align: center;</div><div class="line">    box-shadow: inset 2px 2px 5px rgba(0,0,0,0.5), inset -2px -2px 5px rgba(255,255,255,0.5);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Attribute selectors: Match one or more elements based on their attributes/attribute values.</div><div class="line">/* All elements with the attribute &quot;data-vegetable&quot;</div><div class="line">are given green text */</div><div class="line"></div><div class="line">[data-vegetable] &#123;</div><div class="line">    color: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* All elements with the attribute &quot;data-vegetable&quot;</div><div class="line">with the exact value &quot;liquid&quot; are given a golden</div><div class="line">background color */</div><div class="line"></div><div class="line">[data-vegetable=&quot;liquid&quot;] &#123;</div><div class="line">    background-color: goldenrod;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* All elements with the attribute &quot;data-vegetable&quot;,</div><div class="line">containing the value &quot;spicy&quot;, even among others,</div><div class="line">are given a red text color */</div><div class="line"></div><div class="line">[data-vegetable~=&quot;spicy&quot;] &#123;</div><div class="line">    color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Pseudo-classes: Match one or more elements that exist in a certain state, such as an element that is being hovered over by the mouse pointer, or a checkbox that is currently disabled or checked, or an element that is the first child of its parent in the DOM tree.</div><div class="line">// Pseudo-elements: Match one or more parts of content that are in a certain position in relation to an element, for example the first word of each paragraph, or generated content appearing just before an element.</div><div class="line"></div><div class="line">:active</div><div class="line">:any</div><div class="line">:checked</div><div class="line">:default</div><div class="line">:dir()</div><div class="line">:disabled</div><div class="line">:empty</div><div class="line">:enabled</div><div class="line">:first</div><div class="line">:first-child</div><div class="line">:first-of-type</div><div class="line">:fullscreen</div><div class="line">:focus</div><div class="line">:focus-within</div><div class="line">:hover</div><div class="line">:indeterminate</div><div class="line">:in-range</div><div class="line">:invalid</div><div class="line">:lang()</div><div class="line">:last-child</div><div class="line">:last-of-type</div><div class="line">:left</div><div class="line">:link</div><div class="line">:not()</div><div class="line">:nth-child()</div><div class="line">:nth-last-child()</div><div class="line">:nth-last-of-type()</div><div class="line">:nth-of-type()</div><div class="line">:only-child</div><div class="line">:only-of-type</div><div class="line">:optional</div><div class="line">:out-of-range</div><div class="line">:read-only</div><div class="line">:read-write</div><div class="line">:required</div><div class="line">:right</div><div class="line">:root</div><div class="line">:scope</div><div class="line">:target</div><div class="line">:valid</div><div class="line">:visited</div><div class="line"></div><div class="line">// Combinators: These are not exactly selectors themselves, but ways of combining two or more selectors in useful ways for very specific selections. So for example, you could select only paragraphs that are direct descendants of divs, or paragraphs that come directly after headings.</div><div class="line"></div><div class="line">A, B	匹配 A 或 B</div><div class="line">A B	    匹配 A 里面的 B</div><div class="line">A &gt; B	匹配 A 里面的直属 B</div><div class="line">A + B	匹配 A 下一个兄弟节点 B</div><div class="line">A ~ B	匹配 A 的下一群兄弟节点 B</div><div class="line"></div><div class="line">// Multiple selectors: Again, these are not separate selectors; the idea is that you can put multiple selectors on the same CSS rule, separated by commas, to apply a single set of declarations to all the elements selected by those selectors.</div></pre></td></tr></table></figure>
<h3 id="2-3-属性"><a href="#2-3-属性" class="headerlink" title="2.3 属性"></a>2.3 属性</h3><h4 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h4><p><a href="http://cssreference.io/positioning/" target="_blank" rel="external">http://cssreference.io/positioning/</a></p>
<h4 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h4><h4 id="Box-Model"><a href="#Box-Model" class="headerlink" title="Box Model"></a>Box Model</h4><p>块级元素 (Block)<br>  新开始一行并且尽可能撑满容器，p,form,header,footer,section<br>  设置块级元素的 width 可以防止它从左到右撑满整个容器<br>行内元素 (inline)<br>  包裹一些文字，而不会打乱段落的布局，a,span<br>none<br>  script 默认 display:none,visibility:hidden 是占据空间</p>
<p>盒模型</p>
<p>属性</p>
<p>三，层叠与继承</p>
<p>既然是层叠，就要有层叠的规律</p>
<h2 id="0x03-CSS-新语法"><a href="#0x03-CSS-新语法" class="headerlink" title="0x03 CSS 新语法"></a>0x03 CSS 新语法</h2><h3 id="3-1-Flex-Layout"><a href="#3-1-Flex-Layout" class="headerlink" title="3.1 Flex Layout"></a>3.1 Flex Layout</h3><ul>
<li><a href="https://github.com/philipwalton/solved-by-flexbox" target="_blank" rel="external">https://github.com/philipwalton/solved-by-flexbox</a></li>
</ul>
<h3 id="3-2-Grid-Layout"><a href="#3-2-Grid-Layout" class="headerlink" title="3.2 Grid Layout"></a>3.2 Grid Layout</h3><h2 id="0x04-SCSS"><a href="#0x04-SCSS" class="headerlink" title="0x04 SCSS"></a>0x04 SCSS</h2><p>这是一种兼容 CSS 语法的新语言。主要用于提升代码的可维护性。</p>
<p>至于其他 less 之类大同小异。只选取了功能最强大的部分进行间接。</p>
<h3 id="4-1-OOCSS-BEM-我的实践"><a href="#4-1-OOCSS-BEM-我的实践" class="headerlink" title="4.1 OOCSS / BEM / 我的实践"></a>4.1 OOCSS / BEM / 我的实践</h3><h3 id="4-1-如何组织-SCSS-代码-—-布局篇"><a href="#4-1-如何组织-SCSS-代码-—-布局篇" class="headerlink" title="4.1 如何组织 SCSS 代码 — 布局篇"></a>4.1 如何组织 SCSS 代码 — 布局篇</h3><h3 id="4-2-如何组织-SCSS-代码-—-组件篇"><a href="#4-2-如何组织-SCSS-代码-—-组件篇" class="headerlink" title="4.2 如何组织 SCSS 代码 — 组件篇"></a>4.2 如何组织 SCSS 代码 — 组件篇</h3><h4 id="4-2-BEM"><a href="#4-2-BEM" class="headerlink" title="4.2 BEM"></a>4.2 BEM</h4><h2 id="0x05-CSS-规范"><a href="#0x05-CSS-规范" class="headerlink" title="0x05 CSS 规范"></a>0x05 CSS 规范</h2><ul>
<li><p><a href="https://github.com/airbnb/css" target="_blank" rel="external">https://github.com/airbnb/css</a></p>
</li>
<li><p>Use soft tabs (2 spaces) for indentation</p>
</li>
<li>Prefer dashes over camelCasing in class names.<ul>
<li>Underscores and PascalCasing are okay if you are using BEM (see OOCSS and BEM below).</li>
</ul>
</li>
<li>Do not use ID selectors</li>
<li>When using multiple selectors in a rule declaration, give each selector its own line.</li>
<li>Put a space before the opening brace { in rule declarations</li>
<li>In properties, put a space after, but not before, the : character.</li>
<li>Put closing braces } of rule declarations on a new line</li>
<li>Put blank lines between rule declarations</li>
</ul>
<p>OOCSS 与 BEM 混用</p>
<blockquote>
<p>只要是可维护的好代码，并不需要拘泥于用什么风格</p>
</blockquote>
<h3 id="5-1-圣杯"><a href="#5-1-圣杯" class="headerlink" title="5.1 圣杯"></a>5.1 圣杯</h3><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><a href="https://github.com/picturepan2/spectre" target="_blank" rel="external">https://github.com/picturepan2/spectre</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-12-20</strong> 初始化本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本笔记诞生于很久前零零散散记录的笔记，拿出来发布一下。&lt;/p&gt;
&lt;h2 id=&quot;0x01-CSS-是
    
    </summary>
    
      <category term="前端开发" scheme="http://twocucao.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="http://twocucao.xyz/tags/CSS/"/>
    
      <category term="SASS" scheme="http://twocucao.xyz/tags/SASS/"/>
    
  </entry>
  
  <entry>
    <title>macOS 的系统与软件</title>
    <link href="http://twocucao.xyz/2017/12/23/macOSInDepth/"/>
    <id>http://twocucao.xyz/2017/12/23/macOSInDepth/</id>
    <published>2017-12-23T10:41:47.000Z</published>
    <updated>2018-02-11T01:14:31.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>折腾了 Windows 很多年，后来出于个人开发需求转投 Mac，使用起来一直很顺手。现在也开始从顺手开始到了解更深一点的东西。</p>
<h2 id="0x01-系统安全架构"><a href="#0x01-系统安全架构" class="headerlink" title="0x01 系统安全架构"></a>0x01 系统安全架构</h2><h3 id="1-1-系统架构概述"><a href="#1-1-系统架构概述" class="headerlink" title="1.1 系统架构概述"></a>1.1 系统架构概述</h3><p>非开发人员分层：</p>
<ul>
<li>User Experience<ul>
<li>Aqua</li>
<li>Dashboard</li>
<li>Spotlight</li>
<li>Dock</li>
<li>输入法</li>
<li>屏保</li>
<li>辅助功能</li>
<li>语音</li>
<li>位置与地图</li>
<li>搜索</li>
<li>etc</li>
</ul>
</li>
<li>Application Framework<ul>
<li>Cocoa</li>
</ul>
</li>
<li>Graphics and Media<ul>
<li>核心框架，OpenAL,Quartz,SceneKit,SpriteKit</li>
</ul>
</li>
<li>Darwin<ul>
<li>系统内核与 Shell 环境</li>
</ul>
</li>
</ul>
<p>开发人员分层：</p>
<ul>
<li>Cocoa Layer: Cocoa 框架层 包括了用于开发界面程序的框架集合。</li>
<li>Foundation Layer: 提供了程序开发室使用到的基础数据类型、数值处理、网络、IO 和 日期等</li>
<li>Media Layer: 提供了图像、声音、视频、动画及游戏开发需要的接口</li>
<li>Core Service Layer: 系统安全、底层内部数据访问以及存储接口。比如 AddressBook,CoreData,QuickLook 用于快速浏览插件开发。CoreFoundation 框架也属于这一层。</li>
<li>Core OS Layer: 加速器，蓝牙，异常处理，网络扩展，系统配置</li>
<li>Kernel &amp; Driver Layer: 内核与驱动层。包括开发设备驱动程序与内核扩展所需的一些框架。</li>
</ul>
<p>应用程序是一个 bundle 文件，一般为 xxx.app 文件夹，</p>
<h3 id="1-1-一些常用软件"><a href="#1-1-一些常用软件" class="headerlink" title="1.1 一些常用软件"></a>1.1 一些常用软件</h3><p>Clang<br>LLVM</p>
<p>HT Editor</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install ht</div></pre></td></tr></table></figure>
<h2 id="0x02-前言"><a href="#0x02-前言" class="headerlink" title="0x02 前言"></a>0x02 前言</h2><h2 id="0x03-前言"><a href="#0x03-前言" class="headerlink" title="0x03 前言"></a>0x03 前言</h2><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li>macOS 软件安全和逆向分析</li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-12-20</strong> 初始化本文</li>
<li><strong>2018-02-10</strong> 添加笔记</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;折腾了 Windows 很多年，后来出于个人开发需求转投 Mac，使用起来一直很顺手。现在也开始从顺
    
    </summary>
    
      <category term="善用佳软" scheme="http://twocucao.xyz/categories/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
    
      <category term="macOS" scheme="http://twocucao.xyz/tags/macOS/"/>
    
      <category term="XCode" scheme="http://twocucao.xyz/tags/XCode/"/>
    
      <category term="App Store" scheme="http://twocucao.xyz/tags/App-Store/"/>
    
      <category term="Apple Store" scheme="http://twocucao.xyz/tags/Apple-Store/"/>
    
      <category term="iTunes Store" scheme="http://twocucao.xyz/tags/iTunes-Store/"/>
    
  </entry>
  
  <entry>
    <title>记一次小机器的 Python 大数据分析</title>
    <link href="http://twocucao.xyz/2017/12/07/ANoteWithSmallMachineAndBigData/"/>
    <id>http://twocucao.xyz/2017/12/07/ANoteWithSmallMachineAndBigData/</id>
    <published>2017-12-07T08:56:12.000Z</published>
    <updated>2018-03-07T06:19:30.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>机缘巧合，最近公司突然要搞一波大量数据的分析。属于客流类的分析。</p>
<p>数据量级也还算不错，经过 gzip 压缩，接近 400 个 点位的 SQL 文件 (MySQL innoDB)，大小接近 100GB 左右，原始记录数据估测在 180 亿左右。</p>
<p>解压后…… 差不多一个 T 吧。</p>
<p>如果是人民币玩家，自然是直接购置几十台高配置机器，做个 mysql shard 或者直接上大数据全家桶比如 hadoop 和 hive 之类，让程序员去往死里折腾吧。</p>
<blockquote>
<p>嗯，然而对于我这种非人民币玩家，就要用单机硬扛。</p>
</blockquote>
<p>那就硬扛呗。</p>
<p>我手上的机器配置如下：</p>
<ul>
<li><p>局域网服务器 （ Ubuntu 16.04 LTS ）</p>
<ul>
<li>Xeon(R) CPU E3-1225 v5 @ 3.30GHz</li>
<li>16G 内存</li>
<li>1T 硬盘</li>
</ul>
</li>
<li><p>苹果电脑 2016 年 15 寸 最高配</p>
<ul>
<li>1T 硬盘</li>
<li>i7 四核</li>
</ul>
</li>
</ul>
<h2 id="0x01-准备数据阶段"><a href="#0x01-准备数据阶段" class="headerlink" title="0x01 准备数据阶段"></a>0x01 准备数据阶段</h2><p>用低配机器分析大数据的<strong>首要原则</strong>，就是<strong>不要分析大数据</strong>。</p>
<p>何也？</p>
<blockquote>
<p>就是<strong>尽可能的抽取所得结论所需分析数据的最小超集</strong></p>
</blockquote>
<p>小机器是无法完成海量计算的，但通过一定的过滤和筛选可以将数据筛选出到一台机器能扛得住的计算量。从而达到可以可以分析海量数据的目的。</p>
<h3 id="1-1-将数据导入-MySQL-中"><a href="#1-1-将数据导入-MySQL-中" class="headerlink" title="1.1 将数据导入 MySQL 中"></a>1.1 将数据导入 MySQL 中</h3><p>我们先不管三七二十一，既然给了 SQL 文件，肯定要入库的，那么问题来了：</p>
<blockquote>
<p><del>将大象关进冰箱要几个步骤</del></p>
</blockquote>
<p>将数据导入数据库中需要几个步骤</p>
<p>或者说，如何更快的导入 400 张不同表的数据。</p>
<p>大致步骤如下：</p>
<ul>
<li>新增硬盘，并初始化</li>
<li>配置 MySQL 的 datadir 到新增硬盘上</li>
<li>导入数据 (PV &amp; MySQL)</li>
</ul>
<h4 id="新增硬盘，并初始化"><a href="#新增硬盘，并初始化" class="headerlink" title="新增硬盘，并初始化"></a>新增硬盘，并初始化</h4><p>首先，<strong>购买并插入硬盘</strong></p>
<p>使用 lshw 查看硬盘信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># lshw -C disk</span></div><div class="line">  *-disk</div><div class="line">       description: SCSI Disk</div><div class="line">       product: My Passport 25E2</div><div class="line">       vendor: WD</div><div class="line">       physical id: 0.0.0</div><div class="line">       bus info: scsi@7:0.0.0</div><div class="line">       logical name: /dev/sdb</div><div class="line">       version: 4004</div><div class="line">       serial: WX888888HALK</div><div class="line">       size: 3725GiB (4TB)</div><div class="line">       capabilities: gpt-1.00 partitioned partitioned:gpt</div><div class="line">       configuration: ansiversion=6 guid=88e88888-422d-49f0-9ba9-221db75fe4b4 logicalsectorsize=512 sectorsize=4096</div><div class="line">  *-disk</div><div class="line">       description: ATA Disk</div><div class="line">       product: WDC WD10EZEX-08W</div><div class="line">       vendor: Western Digital</div><div class="line">       physical id: 0.0.0</div><div class="line">       bus info: scsi@0:0.0.0</div><div class="line">       logical name: /dev/sda</div><div class="line">       version: 1A01</div><div class="line">       serial: WD-WC888888888U</div><div class="line">       size: 931GiB (1TB)</div><div class="line">       capabilities: partitioned partitioned:dos</div><div class="line">       configuration: ansiversion=5 logicalsectorsize=512 sectorsize=4096 signature=f1b42036</div><div class="line">  *-cdrom</div><div class="line">       description: DVD reader</div><div class="line">       product: DVDROM DH1XXX8SH</div><div class="line">       vendor: PLDS</div><div class="line">       physical id: 0.0.0</div><div class="line">       bus info: scsi@5:0.0.0</div><div class="line">       logical name: /dev/cdrom</div><div class="line">       logical name: /dev/dvd</div><div class="line">       logical name: /dev/sr0</div><div class="line">       version: ML31</div><div class="line">       capabilities: removable audio dvd</div><div class="line">       configuration: ansiversion=5 status=nodisc</div></pre></td></tr></table></figure>
<p>使用 fdisk 格式化硬盘，并且分区</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">fdisk /dev/sdb</div><div class="line"><span class="comment">#输入 n</span></div><div class="line"><span class="comment">#输入 p</span></div><div class="line"><span class="comment">#输入 1</span></div><div class="line"><span class="comment">#输入 w</span></div><div class="line">sudo mkfs -t ext4 /dev/sdb1</div><div class="line">mkdir -p /media/mynewdrive</div><div class="line">vim /etc/fstab</div><div class="line"><span class="comment"># /dev/sdb1    /media/mynewdrive   ext4    defaults     0        2</span></div><div class="line"><span class="comment"># 直接挂载所有，或者 reboot</span></div><div class="line">mount <span class="_">-a</span></div></pre></td></tr></table></figure>
<p>至此为止，硬盘就格式化完成了。</p>
<blockquote>
<p>关于安装硬盘，可以参考 <a href="https://help.ubuntu.com/community/InstallingANewHardDrive" target="_blank" rel="external">https://help.ubuntu.com/community/InstallingANewHardDrive</a></p>
</blockquote>
<h4 id="配置-MySQL"><a href="#配置-MySQL" class="headerlink" title="配置 MySQL"></a>配置 MySQL</h4><p>篇幅有限，只简介具体在 Ubuntu 16.04 上面 配置 MySQL 的 DataDIR ，省去安装和基本登录认证的配置。</p>
<p>mysql 在 ubuntu 下面默认的路径如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/var/lib/mysql/</div></pre></td></tr></table></figure>
<p>我们开始配置 DataDIR</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">systemctl stop mysql</div><div class="line">rsync -av /var/lib/mysql /mnt/volume-nyc1-01</div><div class="line">mv /var/lib/mysql /var/lib/mysql.bak</div><div class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</div><div class="line"><span class="comment"># 修改至 datadir=/mnt/volume-nyc1-01/mysql</span></div><div class="line">vim /etc/apparmor.d/tunables/<span class="built_in">alias</span></div><div class="line"><span class="comment"># alias /var/lib/mysql/ -&gt; /mnt/volume-nyc1-01/mysql/</span></div><div class="line">sudo systemctl restart apparmor</div><div class="line">vim /usr/share/mysql/mysql-systemd-start</div><div class="line"><span class="comment"># 修改成</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> /var/lib/mysql ] &amp;&amp; [ ! -L /var/lib/mysql ]; <span class="keyword">then</span></div><div class="line"> <span class="built_in">echo</span> <span class="string">"MySQL data dir not found at /var/lib/mysql. Please create one."</span></div><div class="line"> <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> /var/lib/mysql/mysql ] &amp;&amp; [ ! -L /var/lib/mysql/mysql ]; <span class="keyword">then</span></div><div class="line"> <span class="built_in">echo</span> <span class="string">"MySQL system database not found. Please run mysql_install_db tool."</span></div><div class="line"> <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># 接下来</span></div><div class="line">sudo mkdir /var/lib/mysql/mysql -p</div><div class="line">sudo systemctl restart mysql</div><div class="line"></div><div class="line"><span class="comment"># 最后 my.conf 修改相关文件路径</span></div></pre></td></tr></table></figure>
<blockquote>
<p>详细请参考这篇文章 <a href="https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-16-04" target="_blank" rel="external">https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-16-04</a></p>
</blockquote>
<p>将 DataDIR 配置完成之后，就可以导入数据了。嗯，经过这么麻烦的事情之后，我决定下次遇到这种情况首选 Docker 而不是在 Ubuntu Server 上面搞这个。</p>
<blockquote>
<p>站在现在看，如果重来的话，我肯定会用 Docker 然后把数据盘挂载到新硬盘到。</p>
</blockquote>
<p>比如直接 Docker 命令执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql <span class="_">-e</span> MYSQL_ROOT_PASSWORD=my-secret-pw <span class="_">-d</span> mysql:tag</div></pre></td></tr></table></figure>
<h4 id="导入数据-之-MySQL-PV"><a href="#导入数据-之-MySQL-PV" class="headerlink" title="导入数据 之 MySQL + PV"></a>导入数据 之 MySQL + PV</h4><p>我们使用 mysql 导入脚本的时候，有几种导入方式</p>
<ul>
<li>source 命令，然而这个命令容易在数据量很大的时候直接卡掉。（印象中是直接把 sql 文件加载到内存中，然后执行，然而，只要涉及到大量文本打印出来并且执行，速度一定会变慢很多）</li>
<li>mysql 命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysql 命令的典型导入场景就是这样</span></div><div class="line">mysql -uadmin -p123456 some_db &lt; tb.sql</div></pre></td></tr></table></figure>
<p>加上 PV 命令的话，比较神奇了。有进度条了！!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 附加进度条的导入场景</span></div><div class="line">pv -i 1 -p -t <span class="_">-e</span> ./xxxx_probe.sql | mysql -uadmin -p123456 some_db</div></pre></td></tr></table></figure>
<p>然后，可以查看一下磁盘 CPU 内存的占用情况。如果负载（着重注意 IO，内存）还不够满，使用 tmux 多开几个进程导入数据。</p>
<p>因为每个 SQL 文件对应的表不一样，所以多开几个进程批量 insert 的话并不会锁表，这样可以显著提升导入速度。</p>
<h3 id="1-2-导出数据"><a href="#1-2-导出数据" class="headerlink" title="1.2 导出数据"></a>1.2 导出数据</h3><p>既然已经导入了数据，为什么需要导出数据呢？</p>
<p>因为数据量比较大，需要进行初步清洗。而我们最后肯定使用 Pandas 进行分析，从局域网数据库中读取大量的数据的时候，pandas 速度会非常的慢（具体是因为网络传输速度？)。所以，为了后面分析省事，我批量导出了数据，然后按照我的习惯进行了归类。</p>
<p>在这个过程中，我还进行了一小部分的数据过滤，比如：</p>
<ul>
<li>只选取对自己有用的行与列。</li>
<li>化整为零，拆分数据为最小单元的 CSV 文件</li>
</ul>
<h4 id="只选取对自己有用的行与列"><a href="#只选取对自己有用的行与列" class="headerlink" title="只选取对自己有用的行与列"></a>只选取对自己有用的行与列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> col_a , col_b <span class="keyword">from</span> some_table <span class="keyword">where</span> Acondition <span class="keyword">and</span> bcondition <span class="keyword">and</span> col_c <span class="keyword">in</span> (<span class="string">'xx'</span>,<span class="string">'yy'</span>,<span class="string">'zz'</span>);</div></pre></td></tr></table></figure>
<p>这里面有一些值得注意的地方</p>
<ul>
<li>尽量把简单的判断写在左边。</li>
<li>如果不是反复查询，则没有必要建立索引。直接走全表，筛选出必要的数据存 CSV 即可。</li>
</ul>
<h4 id="尽量拆分数据为最小单元的-CSV-文件"><a href="#尽量拆分数据为最小单元的-CSV-文件" class="headerlink" title="尽量拆分数据为最小单元的 CSV 文件"></a>尽量拆分数据为最小单元的 CSV 文件</h4><p>如果按照某类，某段时间进行拆分可以在分析的时候随时取随时分析那就进行拆分。</p>
<p>比如，某个大的 CSV 包含琼瑶里面各种人物情节地点的位置就可以拆分为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">201712_大明湖畔_夏雨荷_还珠格格_你还记得吗.csv</div><div class="line">201711_老街_可云_情深深雨蒙蒙_谁来救我.csv</div><div class="line">201710_屋子里_云帆_又见一帘幽梦_你的腿不及紫菱的爱情.csv</div></pre></td></tr></table></figure>
<p>当我们需要取这坨数据的时候，可以直接 glob 一下，然后 sort, 接着二分查找。就可以快速读取这块数据了。</p>
<h3 id="1-3-校验数据完备性"><a href="#1-3-校验数据完备性" class="headerlink" title="1.3 校验数据完备性"></a>1.3 校验数据完备性</h3><p>第三方给的数据多多少少会有这些或者那些的问题，一般情况下，可以通过检查数据完备性来尽可能的减少数据的不靠谱性。</p>
<p>我习惯性在这样的表里面详细记录数据完备性的各种参数与进度。</p>
<p>比如：</p>
<ul>
<li>数据的提供情况和实际情况</li>
<li>阶段性的记录条数和点位的统计值</li>
<li>max，min，mean，median 用来避免异常值</li>
<li>如果是分年份，则必须要统计每一天的情况，否则也不知道数据的缺失程度。</li>
</ul>
<h2 id="0x02-分析阶段"><a href="#0x02-分析阶段" class="headerlink" title="0x02 分析阶段"></a>0x02 分析阶段</h2><p>经过上一步处理，数据的文件总大小大约从 1000GB (uncompressed) -&gt; 30GB 左右 （拆分成若干个文件 compressed) 。每个文件大约是几百兆。</p>
<h3 id="2-1-性能要点-1：文件系统"><a href="#2-1-性能要点-1：文件系统" class="headerlink" title="2.1 性能要点 1：文件系统"></a>2.1 性能要点 1：文件系统</h3><p>如果统计逻辑很简单，但是数量多，首选使用读取文件。读取文件进行统计速度是非常快的。（人民币玩家走开）</p>
<p>像 linux 里面的 wc,grep,sort,uniq 在这种场景有时候也能用到。</p>
<blockquote>
<p>注意，如果文件特别大，一定要迭代器一个一个读取。</p>
</blockquote>
<p>对于超大文件，比如说，上百 G 文件，可以先分成小片的文件，然后多进程批量读取并且处理。</p>
<h3 id="2-2-性能要点-2：化整为零，map-reduce-filter"><a href="#2-2-性能要点-2：化整为零，map-reduce-filter" class="headerlink" title="2.2 性能要点 2：化整为零，map reduce filter"></a>2.2 性能要点 2：化整为零，map reduce filter</h3><p>化整为零这个已经在上面的 1.2 节讲过了。</p>
<p>map/reduce/filter 可以极大的减少代码。</p>
<blockquote>
<p>collection 中有个 Counter , 在进行简单代码统计的时候用起来可以极大的减少代码。</p>
</blockquote>
<h3 id="2-3-性能要点-3：进程池的两种作用"><a href="#2-3-性能要点-3：进程池的两种作用" class="headerlink" title="2.3 性能要点 3：进程池的两种作用"></a>2.3 性能要点 3：进程池的两种作用</h3><p>我们都知道，当 用 Python 执行计算密集的任务时，可以考虑使用多进程来加速：</p>
<p>即<strong>为了加速计算</strong>，此为作用一。如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_item_calc</span><span class="params">(item)</span>:</span></div><div class="line">    df = pd.read.....</div><div class="line">    <span class="comment"># complex calc</span></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">with</span> ProcessPoolExecutor(<span class="number">3</span>) <span class="keyword">as</span> pool:</div><div class="line">    result_items = pool.map(per_item_calc,all_tobe_calc_items)</div><div class="line"></div><div class="line">reduce_results = ....</div></pre></td></tr></table></figure>
<p>其实进程的销毁本身就可以给我带来第二个作用<strong>管理内存</strong>。</p>
<p>具体会在 2.6 中的 DataFrame 里面解释。</p>
<h3 id="2-4-性能要点-4：List-和-Set-itertools"><a href="#2-4-性能要点-4：List-和-Set-itertools" class="headerlink" title="2.4 性能要点 4：List 和 Set , itertools"></a>2.4 性能要点 4：List 和 Set , itertools</h3><p>有 400 组 UUID 集合，每个列表数量在 1000000 左右，列表和列表之间重复部分并不是很大。我想拿到去重之后的所有 UUID，应该怎么处理</p>
<p>在去重的时候，自然而然想到了使用集合来处理。</p>
<p>最初的做法是</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list_of_uuid_set = [ set1 , set2 ... set400 ]</div><div class="line">all_uuid_set = reduce(<span class="keyword">lambda</span> x: x | y, list_of_uuid_set)</div></pre></td></tr></table></figure>
<p>1 小时过去了。 突然之间，四下里万籁无声。公司内外聚集数百之众，竟不约而同的谁都没有出声，便有人想说话的，也为这寂静的气氛所慑，话到嘴边都缩了回去。似乎硬盘的指示灯也熄灭了，发出轻柔异常的声音。我心中忽想：</p>
<blockquote>
<p><del>小师妹这时候不知在干甚么？</del> 卧槽，程序是不是又卡死了？</p>
</blockquote>
<p>SSH 上去 htop 一下机器。发现实存和内存都满了。直觉告诉我，CPython 的集合运算应该是挺耗内存的。</p>
<p>嗯，这怎么行，试试用列表吧。列表占用内存应该是比较小的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(list1,list2)</span>:</span></div><div class="line">    list1.append(list2)</div><div class="line">    <span class="keyword">return</span> list1</div><div class="line"></div><div class="line">list_of_uuid_list = [ list1 , list2 ... list400 ]</div><div class="line">all_uuid_set = set(reduce(merge, list_of_uuid_list))</div></pre></td></tr></table></figure>
<p>1 小时过去了。 我一拍大腿，道：</p>
<blockquote>
<p><del>小师妹这时候不知在干甚么？</del> 卧槽，程序是不是又卡死了？</p>
</blockquote>
<p>最后在 StackOverFlow 上找到了更好的解决方案。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list_of_uuid_list = [ list1 , list2 ... list400 ]</div><div class="line">all_uuid_set = set(list(itertools.chain(*list_of_uuid_list)))</div></pre></td></tr></table></figure>
<p>运行一下，5s 不到出了结果（注意，包含了 Set 去重）。</p>
<p>itertools 里还有很多有趣的函数可以使用。</p>
<p><a href="https://docs.python.org/3/library/itertools.html" target="_blank" rel="external">https://docs.python.org/3/library/itertools.html</a></p>
<h3 id="2-5-性能要点-5：IPython-给性能带来的影响"><a href="#2-5-性能要点-5：IPython-给性能带来的影响" class="headerlink" title="2.5 性能要点 5：IPython 给性能带来的影响"></a>2.5 性能要点 5：IPython 给性能带来的影响</h3><p>当我们在分析数据的时候，往往使用的是 IPython, 或者 Jupyter Notebook</p>
<p>但是，方便的同时，如果不加以注意的话，就会带来一点点小问题。</p>
<p>比如下划线和双下划线分别存储上一个 CELL 的返回值，和上上个 CELL 的返回值。</p>
<h3 id="2-6-性能要点-6：DataFrame-带来的-GC-问题"><a href="#2-6-性能要点-6：DataFrame-带来的-GC-问题" class="headerlink" title="2.6 性能要点 6：DataFrame 带来的 GC 问题"></a>2.6 性能要点 6：DataFrame 带来的 GC 问题</h3><p>DataFrame 是我用 Pandas 的原因，在这次使用 DataFrame 的过程中，还是出现一些头疼的问题的。比如莫名的内存泄露。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_item_calc</span><span class="params">(item)</span>:</span></div><div class="line">    df = pd.read.....</div><div class="line">    <span class="comment"># complex calc</span></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line">result_items = []</div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> all_tobe_calc_items:</div><div class="line">    result_items.append(per_item_calc(item))</div><div class="line"></div><div class="line">reduce_results = ....</div></pre></td></tr></table></figure>
<p>我在 For 循环中读取 DataFrame 赋值给 df, 然后统计出一个结果。按理来说，每次只要一个简单的 result, 每次读取的文件大小一致，同样的会占用接近 2G 内存，而，当我赋值 df 的时候，<strong>按理来说，应该是把原先 df 的引用数应该为 0, 会被 gc 掉，又释放了 2G 内存</strong>，所以，是不太可能出现内存不够用的。</p>
<p>运行程序，内存 biubiubiubiu 的增长，当进行到约第 1000 次的循坏的时候，直到 16G 内存占满。</p>
<p>那么显式的 del 一下会不会好一点呢？代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_item_calc</span><span class="params">(item)</span>:</span></div><div class="line">    df = pd.read.....</div><div class="line">    <span class="comment"># complex calc</span></div><div class="line">    <span class="keyword">del</span> df</div><div class="line">    <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<p>似乎好了一点点，但是其实并没有好到哪里去。</p>
<p>然而，和前一次一样，内存 biubiubiubiu 的增长，当进行到约第 1000 次的循坏的时候，直到 16G 内存占满。</p>
<p>只是在读取文件的时候，预先减少了上次循环没有 del 掉的 df. 和上一个想法没有太大区别。除了比上一个方法每次读取文件的提前减少了一个多 G 的内存。</p>
<p>查找相关资料，涉及到 Python 里面的 Pandas GC 的资料并不多，稍微整理一下，如下：</p>
<blockquote>
<p>Python 程序 在 Linux 或者 Mac 中，哪怕是 del 这个对象，Python 依旧 <del>站着茅坑不拉屎</del> 就是不把内存还给系统，自己先占着，<del>有本事你打死我啊</del> 直到进程销毁。</p>
</blockquote>
<p>嗯？这个和我要的东西不一样嘛？具体怎么管理 pandas 里面的 object 的，到底是哪里 GC 不到位呢？还是没有说呀。</p>
<p>参考：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/23183958/python-memory-management-dictionary" target="_blank" rel="external">https://stackoverflow.com/questions/23183958/python-memory-management-dictionary</a></li>
<li><a href="http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm" target="_blank" rel="external">http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm</a></li>
</ul>
<p>不过有一点启示了我。</p>
<blockquote>
<p>直到进程销毁。</p>
</blockquote>
<p>Python 里面不是有个 ProcessPoolExecutor 模块么。</p>
<p>那么问题来了，ProcessPoolExecutor 是动态创建进程并且分配任务的呢，为每一个 item 分配一个进程来运算？还是创建完三个进程之后把 item 分配给空闲进程的进行运算呢？</p>
<ul>
<li>如果是前者，则是正经的进程池。似乎 map 过去，除非任务执行完毕或者异常退出，否则进程不销毁。并不能给我们解决 内存泄露 的问题。</li>
<li>如果是后者，则是并不是线程池。</li>
</ul>
<p>你说，进程池肯定是前者咯。可是你在验证之前，这是进程池只是你的从其他语言带来的想法，这是不是一个线程池，是一个什么样子的进程池，如果进程执行过程中挂掉了，这个时候就少了一个线程，会不会再补充一个进程呢？？</p>
<p>怎么看验证呢？</p>
<ol>
<li>运行程序，进入 Htop 看进程 PID</li>
<li>看源码</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># https://github.com/python/cpython/blob/3.6/Lib/concurrent/futures/process.py#L440</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_adjust_process_count</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(self._processes), self._max_workers):</div><div class="line">        p = multiprocessing.Process(</div><div class="line">                target=_process_worker,</div><div class="line">                args=(self._call_queue,</div><div class="line">                        self._result_queue))</div><div class="line">        p.start()</div><div class="line">        self._processes[p.pid] = p</div></pre></td></tr></table></figure>
<p>从源码得出在主线程创建了管理进程的线程，管理进程的线程创建了 max_workers 个进程（在我的例子里面就只有 3 个 worker).</p>
<blockquote>
<p>是个进程池。</p>
</blockquote>
<p>好，如果是进程池，似乎 map 过去，除非任务执行完毕或者异常退出，否则进程不销毁。并不能给我们解决 内存泄露 的问题。</p>
<blockquote>
<p>等等，如果用多进程池不就好咯？</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_item_calc</span><span class="params">(item)</span>:</span></div><div class="line">    df = pd.read.....</div><div class="line">    <span class="comment"># complex calc</span></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line">result_items = []</div><div class="line">step = <span class="number">300</span></div><div class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">0</span>,len(all_tobe_calc_items),step):</div><div class="line">    pieces_tobe_calc_items = all_tobe_calc_items[idx:idx+step]</div><div class="line">    <span class="keyword">with</span> ProcessPoolExecutor(<span class="number">3</span>) <span class="keyword">as</span> pool:</div><div class="line">        pieces_result_items = pool.map(per_item_calc,pieces_tobe_calc_items)</div><div class="line">        result_items.append(pieces_result_items)</div><div class="line"></div><div class="line">reduce_results = list(itertools.chain(*result_items))</div></pre></td></tr></table></figure>
<blockquote>
<p>当然，这是一种让操作系统帮我 GC 的方法。<strong>即 Python 不能帮我 GC 的，操作系统帮我 GC</strong></p>
<p>PS: 其实用 multiprocessing 模块也行，只是线程池可以稍微控制一下进程创建的数量。</p>
</blockquote>
<p>总结一下，对于大量的 DataFrame 处理：</p>
<ol>
<li>多个进程池是一种处理的方式。</li>
<li>尽量减少 DataFrame 的数量</li>
<li>尽量减少赋值导致的 COPY, 修改时带上 inplace=True</li>
<li>读取 CSV 的时候指定相关列的类型 {‘col_a’: np.float64, ‘col_b’: np.int32}，否则 pandas 会产生大量的 object</li>
</ol>
<h2 id="0xDD-番外篇"><a href="#0xDD-番外篇" class="headerlink" title="0xDD 番外篇"></a>0xDD 番外篇</h2><p>在分析这次的数据过程中，自己的 Mac 主板也坏掉了，幸好还在保修期，送到苹果店维修了一下。给苹果的售后点个赞。</p>
<h2 id="0xEE-更新"><a href="#0xEE-更新" class="headerlink" title="0xEE 更新"></a>0xEE 更新</h2><ul>
<li><strong>2017-12-07</strong> 初始化本文</li>
<li><strong>2017-12-16</strong> 增加分析阶段的文字</li>
<li><strong>2017-12-26</strong> 去掉一些 TODO, 发布到我的小站</li>
<li><strong>2017-12-31</strong> 正式发布</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;机缘巧合，最近公司突然要搞一波大量数据的分析。属于客流类的分析。&lt;/p&gt;
&lt;p&gt;数据量级也还算不错，
    
    </summary>
    
      <category term="Python 黑魔法" scheme="http://twocucao.xyz/categories/Python-%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="性能优化" scheme="http://twocucao.xyz/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="多进程" scheme="http://twocucao.xyz/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的作用域准则</title>
    <link href="http://twocucao.xyz/2017/11/20/PythonClosureAndScopes/"/>
    <id>http://twocucao.xyz/2017/11/20/PythonClosureAndScopes/</id>
    <published>2017-11-20T01:33:58.000Z</published>
    <updated>2018-01-28T01:36:15.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>因为最早用的是 Java 和 C#，写 Python 的时候自然也把 Python 作用域的想的和原有的一致。</p>
<p>Python 的作用域变量遵循在大部分情况下是一致的，但也有例外的情况。</p>
<p>本文着通过遇到的一个作用域的小问题来说说 Python 的作用域</p>
<a id="more"></a>
<h2 id="0x01-作用域的几个实例"><a href="#0x01-作用域的几个实例" class="headerlink" title="0x01 作用域的几个实例"></a>0x01 作用域的几个实例</h2><p>Python 的作用域变量遵循在大部分情况下与其他语言一致，但也有例外的情况。比如：</p>
<h3 id="1-1-第一个例子"><a href="#1-1-第一个例子" class="headerlink" title="1.1 第一个例子"></a>1.1 第一个例子</h3><p>作用域第一版代码如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line">print(a, id(a)) <span class="comment"># 打印 1 4465620064</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></div><div class="line">    print(a, id(a))</div><div class="line">func1()  <span class="comment"># 打印 1 4465620064</span></div></pre></td></tr></table></figure>
<p>作用域第一版对应字节码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">4           0 LOAD_GLOBAL              0 (print)</div><div class="line">            3 LOAD_GLOBAL              1 (a)</div><div class="line">            6 LOAD_GLOBAL              2 (id)</div><div class="line">            9 LOAD_GLOBAL              1 (a)</div><div class="line">           12 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">           15 CALL_FUNCTION            2 (2 positional, 0 keyword pair)</div><div class="line">           18 POP_TOP</div><div class="line">           19 LOAD_CONST               0 (None)</div><div class="line">           22 RETURN_VALUE</div></pre></td></tr></table></figure>
<blockquote>
<p>PS: 行 4 表示 代码行数 0 / 3 / 9 … 不知道是啥，我就先管他叫做<strong>条</strong>吧 是 load global<br>PPS: 注意条 3/6 LOAD_GLOBAL 为从全局变量中加载</p>
</blockquote>
<p>顺手附上本文需要着重理解的几个指令</p>
<pre><code>LOAD_GLOBA          : Loads the global named co_names[namei] onto the stack.
LOAD_FAST(var_num)  : Pushes a reference to the local co_varnames[var_num] onto the stack.
STORE_FAST(var_num) : Stores TOS into the local co_varnames[var_num].
</code></pre><p>这点似乎挺符合我们认知的，那么，再深一点呢？既然这个变量是可以 Load 进来的就可以修改咯？</p>
<h3 id="1-2-第二个例子"><a href="#1-2-第二个例子" class="headerlink" title="1.2 第二个例子"></a>1.2 第二个例子</h3><p>然而并不是，我们看作用域第二版对应代码如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line">print(a, id(a)) <span class="comment"># 打印 1 4465620064</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">2</span></div><div class="line">    print(a, id(a))</div><div class="line">func2() <span class="comment"># 打印 2 4465620096</span></div></pre></td></tr></table></figure>
<p>一看，WTF, 两个 a 内存值不一样。证明这两个变量是完全两个变量。</p>
<p>作用域第二版对应字节码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">4           0 LOAD_CONST               1 (2)</div><div class="line">            3 STORE_FAST               0 (a)</div><div class="line"></div><div class="line">5           6 LOAD_GLOBAL              0 (print)</div><div class="line">            9 LOAD_FAST                0 (a)</div><div class="line">           12 LOAD_GLOBAL              1 (id)</div><div class="line">           15 LOAD_FAST                0 (a)</div><div class="line">           18 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">           21 CALL_FUNCTION            2 (2 positional, 0 keyword pair)</div><div class="line">           24 POP_TOP</div><div class="line">           25 LOAD_CONST               0 (None)</div><div class="line">           28 RETURN_VALUE</div></pre></td></tr></table></figure>
<blockquote>
<p>注意行 4 条 3 (STORE_FAST) 以及行 5 条 9/15 (LOAD_FAST)</p>
</blockquote>
<p>这说明了这里的 a 并不是 LOAD_GLOBAL 而来，而是从该函数的作用域 LOAD_FAST 而来。</p>
<h3 id="1-3-第三个例子"><a href="#1-3-第三个例子" class="headerlink" title="1.3 第三个例子"></a>1.3 第三个例子</h3><p>那我们在函数体重修改一下 a 值看看。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">()</span>:</span></div><div class="line">    print(a, id(a)) <span class="comment"># 注释掉此行不影响结论</span></div><div class="line">    a += <span class="number">1</span></div><div class="line">    print(a, id(a))</div><div class="line">func3() <span class="comment"># 当调用到这里的时候 local variable 'a' referenced before assignment</span></div><div class="line"><span class="comment"># 即 a += 1 =&gt; a = a + 1 这里的第二个 a 报错鸟</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">3           0 LOAD_GLOBAL              0 (print)</div><div class="line">            3 LOAD_FAST                0 (a)</div><div class="line">            6 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">            9 POP_TOP</div><div class="line"></div><div class="line">4          10 LOAD_FAST                0 (a)</div><div class="line">           13 LOAD_CONST               1 (1)</div><div class="line">           16 BINARY_ADD</div><div class="line">           17 STORE_FAST               0 (a)</div><div class="line"></div><div class="line">5          20 LOAD_GLOBAL              0 (print)</div><div class="line">           23 LOAD_FAST                0 (a)</div><div class="line">           26 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">           29 POP_TOP</div><div class="line">           30 LOAD_CONST               0 (None)</div><div class="line">           33 RETURN_VALUE</div></pre></td></tr></table></figure>
<p>那么，func3 也就自然而言由于没有无法 LOAD_FAST 对应的 a 变量，则报了引用错误。</p>
<p>然后问题来了，a 为基本类型的时候是这样的。如果引用类型呢？我们直接仿照 func3 的实例把 a 改成 list 类型。如下</p>
<h3 id="1-4-第四个例子"><a href="#1-4-第四个例子" class="headerlink" title="1.4 第四个例子"></a>1.4 第四个例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span><span class="params">()</span>:</span></div><div class="line">    print(a, id(a)) <span class="comment"># 这条注不注释掉都一样</span></div><div class="line">    a += <span class="number">1</span> <span class="comment"># 这里我故意写错 按理来说应该是 a.append(1)</span></div><div class="line">    print(a, id(a))</div><div class="line">func4()</div><div class="line"></div><div class="line"><span class="comment"># 当调用到这里的时候 local variable 'a' referenced before assignment</span></div></pre></td></tr></table></figure>
<p>╮(╯▽╰)╭ 看来事情那么简单，结果变量 a 依旧是无法修改。</p>
<p>可按理来说跟应该报下面的错误呀</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;int&apos; object is not iterable</div></pre></td></tr></table></figure>
<h3 id="1-5-第五个例子"><a href="#1-5-第五个例子" class="headerlink" title="1.5 第五个例子"></a>1.5 第五个例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func5</span><span class="params">()</span>:</span></div><div class="line">    print(a, id(a))</div><div class="line">    a.append(<span class="number">1</span>)</div><div class="line">    print(a, id(a))</div><div class="line">func5()</div><div class="line"><span class="comment"># [1] 4500243208</span></div><div class="line"><span class="comment"># [1, 1] 4500243208</span></div></pre></td></tr></table></figure>
<p>这下可以修改了。看一下字节码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">3           0 LOAD_GLOBAL              0 (print)</div><div class="line">            3 LOAD_GLOBAL              1 (a)</div><div class="line">            6 LOAD_GLOBAL              2 (id)</div><div class="line">            9 LOAD_GLOBAL              1 (a)</div><div class="line">           12 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">           15 CALL_FUNCTION            2 (2 positional, 0 keyword pair)</div><div class="line">           18 POP_TOP</div><div class="line"></div><div class="line">4          19 LOAD_GLOBAL              1 (a)</div><div class="line">           22 LOAD_ATTR                3 (append)</div><div class="line">           25 LOAD_CONST               1 (1)</div><div class="line">           28 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">           31 POP_TOP</div><div class="line"></div><div class="line">5          32 LOAD_GLOBAL              0 (print)</div><div class="line">           35 LOAD_GLOBAL              1 (a)</div><div class="line">           38 LOAD_GLOBAL              2 (id)</div><div class="line">           41 LOAD_GLOBAL              1 (a)</div><div class="line">           44 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">           47 CALL_FUNCTION            2 (2 positional, 0 keyword pair)</div><div class="line">           50 POP_TOP</div><div class="line">           51 LOAD_CONST               0 (None)</div><div class="line">           54 RETURN_VALUE</div></pre></td></tr></table></figure>
<p>从全局拿来 a 变量，执行 append 方法。</p>
<h2 id="0x02-作用域准则以及本地赋值准则"><a href="#0x02-作用域准则以及本地赋值准则" class="headerlink" title="0x02 作用域准则以及本地赋值准则"></a>0x02 作用域准则以及本地赋值准则</h2><h3 id="2-1-作用域准则"><a href="#2-1-作用域准则" class="headerlink" title="2.1 作用域准则"></a>2.1 作用域准则</h3><p>看来这是解释器遵循了某种变量查找的法则，似乎就只能从原理上而不是在 CPython 的实现上解释这个问题了。</p>
<p>查找了一些资料，发现 Python 解释器在依据 基于 LEGB 准则 （顺手吐槽一下不是 LGBT）</p>
<p>LEGB 指的变量查找遵循</p>
<ul>
<li>Local</li>
<li>Enclosing-function locals</li>
<li>Global</li>
<li>Built-In</li>
</ul>
<p>StackOverFlow 上 martineau 提供了一个不错的例子用来说明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">100</span></div><div class="line">print(<span class="string">"1. Global x:"</span>, x)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></div><div class="line">    y = x</div><div class="line">    print(<span class="string">"2. Enclosed y:"</span>, y)</div><div class="line">    x = x + <span class="number">1</span></div><div class="line">    print(<span class="string">"3. Enclosed x:"</span>, x)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"4. Enclosed self.x"</span>, self.x)</div><div class="line">        print(<span class="string">"5. Global x"</span>, x)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            print(y)</div><div class="line">        <span class="keyword">except</span> NameError <span class="keyword">as</span> e:</div><div class="line">            print(<span class="string">"6."</span>, e)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method_local_ref</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            print(x)</div><div class="line">        <span class="keyword">except</span> UnboundLocalError <span class="keyword">as</span> e:</div><div class="line">            print(<span class="string">"7."</span>, e)</div><div class="line">        x = <span class="number">200</span> <span class="comment"># causing 7 because has same name</span></div><div class="line">        print(<span class="string">"8. Local x"</span>, x)</div><div class="line"></div><div class="line">inst = Test()</div><div class="line">inst.method()</div><div class="line">inst.method_local_ref()</div></pre></td></tr></table></figure>
<p>我们试着用变量查找准则去解释 <strong>第一个例子</strong> 的时候，是解释的通的。</p>
<p>第二个例子，发现函数体内的 a 变量已经不是那个 a 变量了。要是按照这个查找原则的话，似乎有点说不通了。</p>
<p>但当解释第三个例子的时候，就完全说不通了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">()</span>:</span></div><div class="line">    print(a, id(a)) <span class="comment"># 注释掉此行不影响结论</span></div><div class="line">    a += <span class="number">1</span></div><div class="line">    print(a, id(a))</div><div class="line">func3() <span class="comment"># 当调用到这里的时候 local variable 'a' referenced before assignment</span></div><div class="line"><span class="comment"># 即 a += 1 =&gt; a = a + 1 这里的第二个 a 报错鸟</span></div></pre></td></tr></table></figure>
<p>按照我的猜想，这里的代码执行可能有两种情况：</p>
<ul>
<li>当代码执行到第三行的时候可能是向从 local 找 a, 发现没有，再找 Enclosing-function 发现没有，最后应该在 Global 里面找到才是。注释掉第三行的时候也是同理。</li>
<li>当代码执行到第三行的时候可能是向下从 local 找 a, 发现有，然后代码执行，结束。</li>
</ul>
<p>但如果真的和我的想法接近的话，这两种情况都可以执行，除了变量作用域之外还是有一些其他的考量。我把这个叫做<strong>本地赋值准则</strong> （拍脑袋起的名称）</p>
<p>一般我们管这种考量叫做 <del>Python 作者就是觉得这种编码方式好你爱写不写</del> Python 作者对于变量作用域的权衡。</p>
<p>事实上，当解释器编译函数体为字节码的时候，如果是一个赋值操作 (list.append 之流不是赋值操作），则会被限定这个变量认为是一个 local 变量。如果在 local 中找不到，并不向上查找，就报引用错误。</p>
<pre><code>这不是 BUG
这不是 BUG
这不是 BUG
</code></pre><p>这是一种设计权衡 Python 认为 虽然不强求强制声明类型，但假定被赋值的变量是一个 Local 变量。这样减少避免动态语言比如 JavaScript 动不动就修改掉了全局变量的坑。</p>
<p>这也就解释了第四个例子中赋值操作报错，以及第五个例子 append 为什么可以正常执行。</p>
<p>如果我偏要勉强呢？ 可以通过 global 和 nonlocal 来 引入模块级变量 or 上一级变量。</p>
<blockquote>
<p>PS: JS 也开始使用 let 进行声明，小箭头函数内部赋值查找变量也是向上查找。</p>
</blockquote>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><a href="https://stackoverflow.com/questions/291978/short-description-of-the-scoping-rules" target="_blank" rel="external">Martineau 的例子</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-11-20</strong> 从原有笔记中抽取本文整理而成</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;因为最早用的是 Java 和 C#，写 Python 的时候自然也把 Python 作用域的想的和原有的一致。&lt;/p&gt;
&lt;p&gt;Python 的作用域变量遵循在大部分情况下是一致的，但也有例外的情况。&lt;/p&gt;
&lt;p&gt;本文着通过遇到的一个作用域的小问题来说说 Python 的作用域&lt;/p&gt;
    
    </summary>
    
      <category term="Python 黑魔法" scheme="http://twocucao.xyz/categories/Python-%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
    
      <category term="作用域" scheme="http://twocucao.xyz/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
      <category term="语言细节" scheme="http://twocucao.xyz/tags/%E8%AF%AD%E8%A8%80%E7%BB%86%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 Cheatsheet</title>
    <link href="http://twocucao.xyz/2017/10/20/UbuntuCheatSheet/"/>
    <id>http://twocucao.xyz/2017/10/20/UbuntuCheatSheet/</id>
    <published>2017-10-20T10:41:47.000Z</published>
    <updated>2018-01-28T11:43:27.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Shell 单行命令。</p>
<p>不定期更新。</p>
<p>桌面版和 Server 版的操作系统版本均为 Ubuntu 16.04 , 数据库为 MySQL / PostgreSQL , Python 3.5.2 开发和运行环境。</p>
<p>由于部分 Mac 上面的配置与 Ubuntu 上配置几乎相同，特别是一些桌面端，跨平台，强烈建议使用。</p>
<p>每次来一个新同事就需要给他们的环境进行配置，配置其实挺麻烦的，虽然可以花一天的时间配置一遍，但总觉得如果多来几个同事的话我基本上就废掉了。<br>于是抛弃 bash 脚本，修改为 Ansible 脚本，将当前的配置任务彻底脚本化。</p>
<a id="more"></a>
<h2 id="0x01-Ubuntu-桌面版开发基本配置"><a href="#0x01-Ubuntu-桌面版开发基本配置" class="headerlink" title="0x01 Ubuntu 桌面版开发基本配置"></a>0x01 Ubuntu 桌面版开发基本配置</h2><p>语言级别配置，请参考我的其他文章，如何优雅的使用 MAC</p>
<h2 id="0x02-Ubuntu-服务器版本基本配置"><a href="#0x02-Ubuntu-服务器版本基本配置" class="headerlink" title="0x02 Ubuntu 服务器版本基本配置"></a>0x02 Ubuntu 服务器版本基本配置</h2><p>第一步，更新源：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span></div><div class="line">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted <span class="comment">#Added by software-properties</span></div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe <span class="comment">#Added by software-properties</span></div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe <span class="comment">#Added by software-properties</span></div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse <span class="comment">#Added by software-properties</span></div><div class="line">deb http://archive.canonical.com/ubuntu xenial partner</div><div class="line">deb-src http://archive.canonical.com/ubuntu xenial partner</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe <span class="comment">#Added by software-properties</span></div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 更换源</span></div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev</div><div class="line">sudo apt-get install zsh tree htop</div><div class="line">sudo apt-get install build-essential acl ntp htop git libpq-dev libmysqlclient-dev libffi-dev libfreetype6-dev libjpeg8-dev liblcms2-dev libtiff5-dev libwebp-dev libxml2-dev libxslt1-dev tcl8.6-dev tk8.6-dev zlib1g-dev python-dev python-pip python-pycurl python-tk ipython supervisor python3.5 python3.5-dev python3-pip python3-lxml python3-tk ipython3</div><div class="line">sudo apt-get install mysql-server mysql-client libmysqlclient-dev slurm</div><div class="line"></div><div class="line"><span class="comment"># GIT 配置</span></div><div class="line">git config --global color.ui <span class="literal">true</span></div><div class="line">git config --global user.name <span class="string">"twocucao"</span></div><div class="line">git config --global user.email <span class="string">"twocucao@gmail.com"</span></div><div class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"twocucao@gmail.com"</span></div></pre></td></tr></table></figure>
<h3 id="2-1-设置无登录密钥"><a href="#2-1-设置无登录密钥" class="headerlink" title="2.1 设置无登录密钥"></a>2.1 设置无登录密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 刚开始用了一个很蠢的方法</span></div><div class="line">scp ~/.ssh/id_rsa.pub twocucao@192.168.2.156:.ssh/id_rsa.pub</div><div class="line">ssh twocucao@192.168.2.156 <span class="string">"mkdir .ssh;chmod 0700 .ssh"</span></div><div class="line"></div><div class="line"><span class="comment"># 现在想想，可以直接 ssh-copy-id</span></div><div class="line">ssh-copy-id twocucao@192.168.2.156</div></pre></td></tr></table></figure>
<p><a href="http://askubuntu.com/questions/46930/how-can-i-set-up-password-less-ssh-login" target="_blank" rel="external">http://askubuntu.com/questions/46930/how-can-i-set-up-password-less-ssh-login</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 服务器</span></div><div class="line"></div><div class="line">sudo apt-get install openssh-server</div><div class="line">sudo vi /etc/ssh/sshd_config <span class="comment"># 找到 PermitRootLogin no 一行，改为 PermitRootLogin yes</span></div><div class="line">sudo service ssh restart</div><div class="line"></div><div class="line">sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev</div><div class="line"></div><div class="line">sudo adduser deploy</div><div class="line">sudo adduser deploy sudo</div><div class="line">su deploy</div><div class="line"></div><div class="line"><span class="comment"># 开发机复制 ssh 公钥。</span></div><div class="line"><span class="comment"># 可以用下面的命令，汗，之前都是在服务器上面创建.ssh 文件夹，然后在本地 scp 拷贝过去，现在想想这个方法还是挺笨的。</span></div><div class="line"><span class="comment"># 就像这样</span></div><div class="line">scp ~/.ssh/id_rsa.pub deploy@192.168.1.143:/webapps/xxxapp/.ssh/authorized_keys</div><div class="line"><span class="comment"># 其实这个命令就 OK 了。</span></div><div class="line">ssh-copy-id deploy@IPADDRESS</div><div class="line"></div><div class="line"><span class="comment"># 服务器</span></div><div class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7</div><div class="line">sudo apt-get install -y apt-transport-https ca-certificates</div><div class="line"></div><div class="line">sudo apt-get install -y nginx-extras</div><div class="line">sudo service nginx start</div></pre></td></tr></table></figure></p>
<h2 id="0x02-Ubuntu-服务器版本基本配置-1"><a href="#0x02-Ubuntu-服务器版本基本配置-1" class="headerlink" title="0x02 Ubuntu 服务器版本基本配置"></a>0x02 Ubuntu 服务器版本基本配置</h2><h2 id="0x03-了解-Linux-服务器运行情况"><a href="#0x03-了解-Linux-服务器运行情况" class="headerlink" title="0x03 了解 Linux 服务器运行情况"></a>0x03 了解 Linux 服务器运行情况</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 运行时间</span></div><div class="line">uptime</div><div class="line"></div><div class="line"><span class="comment"># 内存情况</span></div><div class="line">free -h</div><div class="line"></div><div class="line"><span class="comment"># 网络类</span></div><div class="line"><span class="comment">## 实时流量监控</span></div><div class="line">iftop</div><div class="line"><span class="comment">## 进程占用带宽</span></div><div class="line">nethogs</div><div class="line"><span class="comment">## sudo nethogs eth0</span></div><div class="line">iptraf</div><div class="line"></div><div class="line"><span class="comment"># 磁盘类</span></div><div class="line">iotop</div><div class="line"><span class="comment">## 当 dstat 的 wai 字段值比较大时，可以使用 iotop 找出哪些进程出了问题</span></div><div class="line"></div><div class="line"><span class="comment"># 综合类 之 监控进程，进程管理</span></div><div class="line">top</div><div class="line">htop</div><div class="line">glances <span class="comment"># PS , 这个监控粒度更细</span></div><div class="line"></div><div class="line"><span class="comment"># 综合类 可以取代 vmstat , iostat , netstat , ifstat</span></div><div class="line">dstat</div><div class="line"></div><div class="line"><span class="comment"># 综合类</span></div><div class="line"><span class="comment"># 约等于 strace + tcpdump + htop + iftop + lsof</span></div><div class="line">sysdig</div></pre></td></tr></table></figure>
<h2 id="0x04-踩坑集合"><a href="#0x04-踩坑集合" class="headerlink" title="0x04 踩坑集合"></a>0x04 踩坑集合</h2><p>前段时间公司新买了一台 Thinkpad Server 作为内网服务器。</p>
<p>于是在安装 Ubuntu16.04 的时候就遇到了一个令人哭笑不得的问题。</p>
<blockquote>
<p><strong>无法正常安装</strong> 报 ubuntu 的 initramfs 错误。</p>
</blockquote>
<p>于是，我下意识的去 Google 问题，在 Ubuntu 的一个论坛上面找到了对应的答案：</p>
<blockquote>
<p>是 Superblock 的问题。</p>
</blockquote>
<p>对应措施如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 找到分区号</span></div><div class="line">sudo fdisk <span class="_">-l</span>|grep Linux|grep -Ev <span class="string">'swap'</span></div><div class="line"><span class="comment"># 找到超级块</span></div><div class="line">sudo dumpe2fs /dev/sda2 | grep superblock</div><div class="line"><span class="comment"># 修复超级块</span></div><div class="line">sudo fsck -b 32768 /dev/sda2 -y</div></pre></td></tr></table></figure>
<p>然后重启即可。</p>
<p>当然，问题并没有结束，还是在老地方发现 initramfs 错误。</p>
<p>就在我哭笑不得的准备最后一搏，实在不行就安装 CentOS 作为系统的时候，由于安装时候选择 language 的时候选择英文，结果居然安装成功了。</p>
<blockquote>
<p>所以，解决问题的方式就是<strong>不要使用简体中文进行安装</strong>.</p>
</blockquote>
<p>虽然这是一个很奇怪的问题，至今我也没有探索出来具体的原因。想到问题居然是因为安装的时候因为选择了中文安装。</p>
<blockquote>
<p>这个问题还真的是…..</p>
</blockquote>
<p><strong>最后知道真相的我眼泪掉下来</strong></p>
<h3 id="3-1-磁盘问题"><a href="#3-1-磁盘问题" class="headerlink" title="3.1 磁盘问题"></a>3.1 磁盘问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">df -h 查看磁盘块占用的文件（block）</div><div class="line">df -i 查看索引节点的占用（Inodes）</div><div class="line">find / -size +100M |xargs ls -lh</div><div class="line"># 删除 5 天前的文件</div><div class="line">find /path/to/files* -mtime +5 -exec rm &#123;&#125; \;</div><div class="line">du -h</div><div class="line">rm xxx.log</div><div class="line">echo &quot;&quot; &gt; xxx.log</div></pre></td></tr></table></figure>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-03-19</strong> 重修文字，准备整理安装配置将结果转化为 Ansible PlayBook</li>
<li><strong>2017-10-20</strong> 重修文字，准备整理安装配置将结果转化为 Ansible PlayBook</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Shell 单行命令。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
&lt;p&gt;桌面版和 Server 版的操作系统版本均为 Ubuntu 16.04 , 数据库为 MySQL / PostgreSQL , Python 3.5.2 开发和运行环境。&lt;/p&gt;
&lt;p&gt;由于部分 Mac 上面的配置与 Ubuntu 上配置几乎相同，特别是一些桌面端，跨平台，强烈建议使用。&lt;/p&gt;
&lt;p&gt;每次来一个新同事就需要给他们的环境进行配置，配置其实挺麻烦的，虽然可以花一天的时间配置一遍，但总觉得如果多来几个同事的话我基本上就废掉了。&lt;br&gt;于是抛弃 bash 脚本，修改为 Ansible 脚本，将当前的配置任务彻底脚本化。&lt;/p&gt;
    
    </summary>
    
      <category term="善用佳软" scheme="http://twocucao.xyz/categories/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
    
      <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
      <category term="Ubuntu" scheme="http://twocucao.xyz/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅地使用 macOS</title>
    <link href="http://twocucao.xyz/2017/10/05/ElegantMac/"/>
    <id>http://twocucao.xyz/2017/10/05/ElegantMac/</id>
    <published>2017-10-05T12:06:05.000Z</published>
    <updated>2018-03-08T03:05:33.876Z</updated>
    
    <content type="html"><![CDATA[<p>当时写这篇文章的时候才接触 mac 没多久，使用快两年之后，再次修订了本文。</p>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>谈及 macOS , 很多人喜欢和 Win 比个高下。在我看来， Win 虽在非编程类生态和易用性比 Mac 要好很多，可专业人士之所以专业是因为他能挑选适合的武器发挥最大的效用，不是吗？</p>
<blockquote>
<p>适合自己的，能让自己用最大效率生产或者是娱乐的，才是更好的工具。</p>
</blockquote>
<a id="more"></a>
<p>Win 的优点如下：</p>
<ul>
<li>优良的兼容性。</li>
<li>由于出自于什么都爱做的微软公司，从整体来说，VS，.NET, 游戏性，兼容性，性能，新手上手速度来说，都是遥遥领先 Mac 的。</li>
</ul>
<p>Win 的缺点如下：</p>
<ul>
<li>微软的战线实在是拉的太长，什么都想做，什么都想垄断。于是，与之服务密切相关的公司也就受到了 MS 的牵制。这对大公司来说，几乎是不能够忍受的行为。硅谷的公司使用微软服务的也就接近 5%（可能有误差）。</li>
<li>糟糕的终端环境（DOS）和无法与、*nux 世界的脚本友好相处使得系统的可定制性和进阶操作性大大降低。</li>
<li>虽然有 Everything，TotalCMD，AHK 这种神级辅助工具可以满足定制要求。但由于过高的学习成本（哈哈哈，混乱也是学习成本之一，AHK 语言真的很混乱啊，TC 实在是太不人性化了）。</li>
<li><strong>Python 的环境配置实在是太头疼了</strong></li>
</ul>
<p>Win 的缺点就是我切到 Mac 上面的原因。</p>
<p>macOS 的优点如下：</p>
<ul>
<li>Mac 的好在于终端和美观的图形的结合。适合不是微软技术栈和重度 Office 的用户。</li>
<li>*nux 应用的方便以及非常容易与脚本文件配合出强大的组合技能。</li>
<li>反观 Win 上，则这种组合技能则在环境配置上和操作流畅度上差了很多。</li>
</ul>
<p>macOS 的缺点如下：</p>
<ul>
<li>娱乐项目实在是少的要死。Metal 和 DirectX 相差不是一点点。</li>
<li>软件和有些少的不只一点点。</li>
</ul>
<p>本文从下面几处入手，分别从下面几个角度介绍了 macOS</p>
<pre><code>▼ 如何优雅地使用 macOS
    0x00 前言
▼ 0x01 系统内置
    1.1 系统设置
    1.2 自带软件
    1.3 快捷键与触摸板
▼ 0x02 必备软件
    2.1 必备软件 之 日常必备
    ▼ 2.2 必备软件 之 开发必备
        2.2.1 GUI 应用
        2.2.2 CMD 命令
    ▼ 2.3 必备软件 之 编程语言
        2.3.1 Shell
        2.3.2 Python
▼ 0x03 踩坑史
    ▼ 3.1 日常类
        01. 时间机器无法完成备份
        02. 下载站的软件包显示损坏
    ▼ 3.2 编程类
        01. homebrew 的与 Python 的问题
    0xEE 参考链接
</code></pre><h2 id="0x01-系统内置"><a href="#0x01-系统内置" class="headerlink" title="0x01 系统内置"></a>0x01 系统内置</h2><h3 id="1-1-系统设置"><a href="#1-1-系统设置" class="headerlink" title="1.1 系统设置"></a>1.1 系统设置</h3><p>General</p>
<ul>
<li>默认浏览器 : Google Chrome</li>
</ul>
<p>Decktop &amp; Screen Saver</p>
<ul>
<li>桌面 / 屏保</li>
</ul>
<p>Language &amp; Region</p>
<ul>
<li>语言</li>
<li>地区设置</li>
</ul>
<p>Security &amp; Privacy</p>
<ul>
<li>防火墙</li>
</ul>
<p>Sharing</p>
<ul>
<li>Remote Control - SSH</li>
</ul>
<p>Trackpad</p>
<ul>
<li>设置手势</li>
<li>滚轮 Scrool Direction : Natural</li>
</ul>
<h3 id="1-2-自带软件"><a href="#1-2-自带软件" class="headerlink" title="1.2 自带软件"></a>1.2 自带软件</h3><ul>
<li>iTunes</li>
<li>iPhoto</li>
<li>iMessage</li>
<li>SpotLight -&gt; Alfred 3</li>
</ul>
<h3 id="1-3-快捷键与触摸板"><a href="#1-3-快捷键与触摸板" class="headerlink" title="1.3 快捷键与触摸板"></a>1.3 快捷键与触摸板</h3><ul>
<li>cmd 为 command 按键，通常情况下为所有桌面程序通用性的快捷键。</li>
<li>ctrl ，通常情况下是针对程序的功能进行加强，并且此功能往往是非 cmd 类（窗口操作，选择，复制粘贴等等）操作。</li>
<li><p>shift 按键通常用于加强操作。一般会让操作更进一步 or 相反操作。</p>
</li>
<li><p>cmd+tab =~ alt+tab 程序之间的切换</p>
</li>
<li><p>cmd+` 应用内窗口切换</p>
</li>
<li><p>cmd+h 窗口 hide</p>
</li>
<li>cmd+m 窗口 minimize</li>
<li>cmd+n 新建窗口</li>
<li>cmd+o 打开</li>
<li>cmd+s 保存</li>
<li>cmd+shift+s 另存为</li>
<li>cmd+p 打印 print</li>
<li>cmd+w 关闭</li>
<li><p>cmd+q quit</p>
</li>
<li><p>cmd+a select all</p>
</li>
<li>cmd+i show info</li>
<li>cmd+n create a new folder</li>
<li>cmd+f search</li>
<li>cmd+c copy</li>
<li>cmd+v paste</li>
<li>cmd+delete  删除选中文件</li>
<li><p>cmd+shift+delete 清空回收站</p>
</li>
<li><p>cmd+= 放大</p>
</li>
<li>cmd+- 缩小</li>
<li>cmd+t 新建选项卡</li>
<li><p>cmd+r 刷新</p>
</li>
<li><p>cmd+shift+3 截取整个屏幕</p>
</li>
<li>cmd+shift+4 截取选择区域</li>
<li>cmd+shift+4+SPACE 截取选择窗口</li>
<li>cmd+ 鼠标点击 -&gt; 选中不连续文件</li>
<li><p>control+ 鼠标点击 -&gt; 相当于 win 中右键点击</p>
</li>
<li><p>fn+left home</p>
</li>
<li>fn+right end</li>
<li>fn+up pageup</li>
<li>fn+down pagedown</li>
</ul>
<p>触摸板手势：</p>
<ul>
<li><p>点击</p>
<ul>
<li>单指点击 - 单击</li>
<li>单指滑动 - 滑动鼠标光标</li>
<li>双指点击 - 相当于 Windows 的鼠标右键</li>
<li>三指点击 - 划词查找</li>
</ul>
</li>
<li><p>滑动与缩放</p>
<ul>
<li>双指上下滑动 - 滚动</li>
<li>双指缩放 - 与 Android 上图片缩放一致</li>
<li>双指双击 - 只能缩放</li>
<li>双指旋转 - 旋转</li>
<li>双指左右滑动 - 应用内切换网页</li>
<li>双指头从右往左</li>
<li>三指头左右滑动 - 全屏幕 App 切换</li>
<li>大拇指和食中无名缩放 - launchpad</li>
</ul>
</li>
</ul>
<h2 id="0x02-必备软件"><a href="#0x02-必备软件" class="headerlink" title="0x02 必备软件"></a>0x02 必备软件</h2><h3 id="2-1-必备软件-之-日常必备"><a href="#2-1-必备软件-之-日常必备" class="headerlink" title="2.1 必备软件 之 日常必备"></a>2.1 必备软件 之 日常必备</h3><ul>
<li><p>启动器</p>
<ul>
<li>Alfred 3</li>
<li>SpotLight</li>
</ul>
</li>
<li><p>网络工具</p>
<ul>
<li>Chrome</li>
</ul>
</li>
<li><p>社交通讯</p>
<ul>
<li>QQ</li>
<li>WeXin</li>
</ul>
</li>
<li><p>图形图像</p>
<ul>
<li>Adobe PhotoShop CC</li>
<li>Adobe PhotoShop LightRoom</li>
<li>Sketch</li>
<li>Annotate</li>
<li>Camtasia 2</li>
<li>Snagit</li>
<li>ScreenFlow</li>
<li>Final Cut Pro</li>
<li>MPlayerX</li>
<li>QuickTime</li>
<li>iQiyi</li>
<li>NeteaseMusic</li>
<li>IINA</li>
</ul>
</li>
<li><p>办公软件</p>
<ul>
<li>欧陆词典</li>
<li>Calibre</li>
<li>Wiznote</li>
<li>PDF Reader</li>
<li>iBook</li>
<li>Microsoft Office</li>
<li>Work 套件：包括 pages, numbers, keynote</li>
<li>XMind</li>
<li>Airmail</li>
<li>TeamViewer</li>
<li>OmniFocus</li>
<li>OmniGraffle</li>
<li>OmniOutline</li>
<li>OmniPlan</li>
</ul>
</li>
<li><p>系统软件</p>
<ul>
<li>搜狗输入法</li>
<li>AppCleaner</li>
<li>CleanMyMac</li>
<li>VMWare</li>
<li>BetterZip</li>
<li>Caffeine /  Amphetamine</li>
<li>PopClip</li>
<li>HandShaker</li>
<li>AirDroid</li>
</ul>
</li>
</ul>
<h3 id="2-2-必备软件-之-开发必备"><a href="#2-2-必备软件-之-开发必备" class="headerlink" title="2.2 必备软件 之 开发必备"></a>2.2 必备软件 之 开发必备</h3><h4 id="2-2-1-GUI-应用"><a href="#2-2-1-GUI-应用" class="headerlink" title="2.2.1 GUI 应用"></a>2.2.1 GUI 应用</h4><ul>
<li><p>终端用户</p>
<ul>
<li>iTerm2</li>
</ul>
</li>
<li><p>IDE</p>
<ul>
<li>PyCharm</li>
<li>IntellijIDEA</li>
<li>WebStorm</li>
</ul>
</li>
<li><p>编辑器</p>
<ul>
<li>MacVim 配合 <a href="https://github.com/twocucao/c-vim" target="_blank" rel="external">C-VIM</a></li>
<li>Sublime Text 3</li>
</ul>
</li>
<li><p>后台组件</p>
<ul>
<li>MySQL</li>
<li>PostgreSQL</li>
<li>Redis</li>
<li>MongoDB</li>
</ul>
</li>
<li><p>数据库管理软件</p>
<ul>
<li>Navicat</li>
<li>Datagrip</li>
<li>RoboMongo</li>
<li>RDM</li>
<li>Dash</li>
</ul>
</li>
<li><p>网络工具</p>
<ul>
<li>SS QT</li>
<li>Charles, Wireshark</li>
</ul>
</li>
<li><p>Chrome</p>
<ul>
<li>Exporter : 百度云，需要离线安装</li>
<li>AdBlock : 广告拦截</li>
<li>AutoPatchWork : 链接下一页</li>
<li>Axure RP Extension : Axure</li>
<li>CSSViewer</li>
<li>Dream Afar New Tab</li>
<li>JSON Editor</li>
<li>JSON View</li>
<li>Octotree</li>
<li>One-Click Extensions Manager</li>
<li>Proxy SwitchyOmega</li>
<li>React Developer Tools</li>
<li>Redux DevTools</li>
<li>Vue.js devtools</li>
<li>Vimium</li>
</ul>
</li>
<li><p>代码仓库</p>
<ul>
<li>Github Desktop</li>
<li>SourceTree</li>
</ul>
</li>
<li><p>GIS 相关</p>
<ul>
<li>ArcGIS</li>
<li>QGIS</li>
<li>PostgreSQL + PostGIS</li>
</ul>
</li>
</ul>
<h4 id="2-2-2-CMD-命令"><a href="#2-2-2-CMD-命令" class="headerlink" title="2.2.2 CMD 命令"></a>2.2.2 CMD 命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="built_in">test</span> ! $(<span class="built_in">which</span> brew); <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Installing homebrew..."</span></div><div class="line">    ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># Make sure we’re using the latest Homebrew.</span></div><div class="line">brew update</div><div class="line"></div><div class="line"><span class="comment"># Upgrade any already-installed formulae.</span></div><div class="line">brew upgrade --all</div><div class="line"></div><div class="line"><span class="comment"># Install GNU core utilities (those that come with OS X are outdated).</span></div><div class="line"><span class="comment"># Don’t forget to add `$(brew --prefix coreutils)/libexec/gnubin` to `$PATH`.</span></div><div class="line">brew install coreutils</div><div class="line">sudo ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/gsha256sum /usr/<span class="built_in">local</span>/bin/sha256sum</div><div class="line"></div><div class="line"><span class="comment"># Install some other useful utilities like `sponge`.</span></div><div class="line">brew install moreutils</div><div class="line"><span class="comment"># Install GNU `find`, `locate`, `updatedb`, and `xargs`, `g`-prefixed.</span></div><div class="line">brew install findutils</div><div class="line"><span class="comment"># Install GNU `sed`, overwriting the built-in `sed`.</span></div><div class="line">brew install gnu-sed --with-default-names</div><div class="line"><span class="comment"># Install Bash 4.</span></div><div class="line">brew install bash</div><div class="line">brew tap homebrew/versions</div><div class="line">brew install bash-completion2</div><div class="line"><span class="comment"># We installed the new shell, now we have to activate it</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Adding the newly installed shell to the list of allowed shells"</span></div><div class="line"><span class="comment"># Prompts for password</span></div><div class="line">sudo bash -c <span class="string">'echo /usr/local/bin/bash &gt;&gt; /etc/shells'</span></div><div class="line"><span class="comment"># Change to the new shell, prompts for password</span></div><div class="line">chsh <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/bash</div><div class="line"></div><div class="line"><span class="comment"># Install `wget` with IRI support.</span></div><div class="line">brew install wget --with-iri</div><div class="line"></div><div class="line"><span class="comment"># Install RingoJS and Narwhal.</span></div><div class="line"><span class="comment"># Note that the order in which these are installed is important;</span></div><div class="line"><span class="comment"># see http://git.io/brew-narwhal-ringo.</span></div><div class="line">brew install ringojs</div><div class="line">brew install narwhal</div><div class="line"></div><div class="line"><span class="comment"># Install Python</span></div><div class="line">brew install python</div><div class="line">brew install python3</div><div class="line"></div><div class="line"><span class="comment"># Install ruby-build and rbenv</span></div><div class="line">brew install ruby-build</div><div class="line">brew install rbenv</div><div class="line">LINE=<span class="string">'eval "$(rbenv init -)"'</span></div><div class="line">grep -q <span class="string">"<span class="variable">$LINE</span>"</span> ~/.extra || <span class="built_in">echo</span> <span class="string">"<span class="variable">$LINE</span>"</span> &gt;&gt; ~/.extra</div><div class="line"></div><div class="line"><span class="comment"># Install more recent versions of some OS X tools.</span></div><div class="line">brew install vim --override-system-vi</div><div class="line">brew install homebrew/dupes/grep</div><div class="line">brew install homebrew/dupes/openssh</div><div class="line">brew install homebrew/dupes/screen</div><div class="line">brew install homebrew/php/php55 --with-gmp</div><div class="line"></div><div class="line"><span class="comment"># Install font tools.</span></div><div class="line">brew tap bramstein/webfonttools</div><div class="line">brew install sfnt2woff</div><div class="line">brew install sfnt2woff-zopfli</div><div class="line">brew install woff2</div><div class="line"></div><div class="line"><span class="comment"># Install some CTF tools; see https://github.com/ctfs/write-ups.</span></div><div class="line">brew install aircrack-ng</div><div class="line">brew install bfg</div><div class="line">brew install binutils --with-default-names</div><div class="line">brew install binwalk</div><div class="line">brew install cifer</div><div class="line">brew install dex2jar</div><div class="line">brew install diffutils</div><div class="line">brew install dns2tcp</div><div class="line">brew install ed --with-default-names</div><div class="line">brew install fcrackzip</div><div class="line">brew install findutils --with-default-names</div><div class="line">brew install foremost</div><div class="line">brew install gawk</div><div class="line">brew install gnu-indent --with-default-names</div><div class="line">brew install gnu-sed --with-default-names</div><div class="line">brew install gnu-tar --with-default-names</div><div class="line">brew install gnu-which --with-default-names</div><div class="line">brew install gnutls</div><div class="line">brew install grep --with-default-names</div><div class="line">brew install gzip</div><div class="line">brew install hashpump</div><div class="line">brew install homebrew/x11/xpdf</div><div class="line">brew install hydra</div><div class="line">brew install john</div><div class="line">brew install knock</div><div class="line">brew install netpbm</div><div class="line">brew install nmap</div><div class="line">brew install pngcheck</div><div class="line">brew install screen</div><div class="line">brew install socat</div><div class="line">brew install sqlmap</div><div class="line">brew install tcpflow</div><div class="line">brew install tcpreplay</div><div class="line">brew install tcptrace</div><div class="line">brew install tmux</div><div class="line">brew install ucspi-tcp <span class="comment"># `tcpserver` etc.</span></div><div class="line">brew install watch</div><div class="line">brew install wdiff --with-gettext</div><div class="line">brew install wget</div><div class="line">brew install xz</div><div class="line"></div><div class="line"><span class="comment"># Install other useful binaries.</span></div><div class="line">brew install ack</div><div class="line">brew install dark-mode</div><div class="line"><span class="comment">#brew install exiv2</span></div><div class="line">brew install git</div><div class="line">brew install git-lfs</div><div class="line">brew install git-flow</div><div class="line">brew install git-extras</div><div class="line">brew install hub</div><div class="line">brew install imagemagick --with-webp</div><div class="line">brew install lua</div><div class="line">brew install lynx</div><div class="line">brew install p7zip</div><div class="line">brew install pigz</div><div class="line">brew install pv</div><div class="line">brew install rename</div><div class="line">brew install rhino</div><div class="line">brew install speedtest_cli</div><div class="line">brew install ssh-copy-id</div><div class="line">brew install tree</div><div class="line">brew install webkit2png</div><div class="line">brew install zopfli</div><div class="line">brew install pkg-config libffi</div><div class="line">brew install pandoc</div><div class="line"></div><div class="line"><span class="comment"># Lxml and Libxslt</span></div><div class="line">brew install libxml2</div><div class="line">brew install libxslt</div><div class="line">brew link libxml2 --force</div><div class="line">brew link libxslt --force</div><div class="line"></div><div class="line"><span class="comment"># gitbook autocover</span></div><div class="line">brew install pkg-config cairo pango libpng jpeg giflib</div><div class="line"></div><div class="line"><span class="comment"># Install Cask</span></div><div class="line">brew install caskroom/cask/brew-cask</div><div class="line">brew tap caskroom/versions</div><div class="line"></div><div class="line"><span class="comment"># aerial 屏保</span></div><div class="line"><span class="comment"># https://github.com/JohnCoates/Aerial</span></div><div class="line">brew cask install aerial</div><div class="line"><span class="comment"># https://github.com/sindresorhus/quick-look-plugins</span></div><div class="line">brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzipql qlimagesize webpquicklook suspicious-package quicklookase qlvideo</div><div class="line"></div><div class="line">brew update &amp;&amp; brew upgrade --all &amp;&amp; brew cleanup &amp;&amp; brew prune</div></pre></td></tr></table></figure>
<h3 id="2-3-必备软件-之-编程语言"><a href="#2-3-必备软件-之-编程语言" class="headerlink" title="2.3 必备软件 之 编程语言"></a>2.3 必备软件 之 编程语言</h3><h4 id="2-3-1-Shell"><a href="#2-3-1-Shell" class="headerlink" title="2.3.1 Shell"></a>2.3.1 Shell</h4><p>MAC 使用的大多命令行工具来自于 FreeBSD , 并不是来自 GNU , 所以很多命令会与常规的 linux 命令大同小异。</p>
<p>而本人喜欢 GNU 系软件。</p>
<p>Shell 脚本可参考我的笔记。 <code>第九节如何优雅的使用 Shell</code>_</p>
<p>说到 shell, 除了要使用 bash 的 shell 之外，zsh 的 shell 也值得一试。（不过大神 kennethreitz 最喜欢 fish shell )</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<h4 id="2-3-1-1-Oh-My-Zsh"><a href="#2-3-1-1-Oh-My-Zsh" class="headerlink" title="2.3.1.1 Oh My Zsh"></a>2.3.1.1 Oh My Zsh</h4><h4 id="2-3-1-2-Fish-Shell"><a href="#2-3-1-2-Fish-Shell" class="headerlink" title="2.3.1.2 Fish Shell"></a>2.3.1.2 Fish Shell</h4><p>依据 kennethreitz 最近公开的 dotfiles 我决定跟着看看</p>
<h4 id="2-3-2-Python"><a href="#2-3-2-Python" class="headerlink" title="2.3.2 Python"></a>2.3.2 Python</h4><p>笔者虽然也接触过很多语言，都是粗浅一过，但无一精通，唯一可以稍微谈谈的就是 Python 语言。</p>
<p>当然，安装完毕自然是可以参考一下我的 <code>第三节 Pythonista 的工具集</code>_</p>
<p>国内外网络环境不通畅，安装与配置环境这件小事也就成了一个大事情。</p>
<p>我对于 Python 版本的安装 和 Python 依赖包管理有三个阶段：</p>
<ul>
<li>入门级</li>
<li>新手级</li>
<li>熟手级</li>
</ul>
<h4 id="2-3-2-1-入门级"><a href="#2-3-2-1-入门级" class="headerlink" title="2.3.2.1 入门级"></a>2.3.2.1 入门级</h4><p>最初是入门级，我配置环境和大部分的 Pythonista 一样，最初版：</p>
<ul>
<li>面对 Python 版本的管理，干脆就是不管理，brew 安装一个 Python2 用于开发 Python2 的代码，brew install 一个 Python3 用于 Python3 的代码开发。</li>
<li>面对 Python 依赖包管理，干脆就是直接使用 virualenv 或者他的 wrapper 直接 venv 一个环境，然后 active 一下，接着 PIP install -r req.txt</li>
</ul>
<h4 id="2-3-2-2-新手级"><a href="#2-3-2-2-新手级" class="headerlink" title="2.3.2.2 新手级"></a>2.3.2.2 新手级</h4><ul>
<li>面对 Python 版本的管理，使用 pyenv</li>
<li>面对 Python 依赖包管理，使用 pyenv virtualenv 出多个环境，然后切换环境就好了。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">brew install pipenv</div><div class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv.git ~/.pyenv</div><div class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv</div><div class="line"><span class="built_in">echo</span> <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'eval "$(pyenv virtualenv-init -)"'</span> &gt;&gt; ~/.zshrc</div><div class="line"></div><div class="line"><span class="comment"># 接着另开终端</span></div><div class="line"><span class="comment"># 不喜写兼容代码，所有代码均向 3.5+ 靠拢</span></div><div class="line">v=3.5.2|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></div><div class="line">v=3.6.0|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></div><div class="line">v=2.7.11|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></div><div class="line"><span class="comment"># 可以先用迅雷把 官网的 Anaconda3-4.4.0-MacOSX-x86_64.sh 下载下来，然后</span></div><div class="line">mv Anaconda3-4.4.0-MacOSX-x86_64.sh ~/.pyenv/cache/ &amp;&amp; pyenv install anaconda3-4.4.0</div><div class="line"></div><div class="line"><span class="comment"># 设置 Global Python 为 2.7.11, 备注：尽量不要把 Py3 设置为全局，否则由于 Homebrew 本身有一些依赖是依赖于 Py2 的，这样容易出现一些奇怪的问题。</span></div><div class="line">pyenv global 2.7.11</div><div class="line">pip install -i https://pypi.doubanio.com/simple requests</div><div class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></div><div class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">"jedi&gt;=0.9.0"</span> <span class="string">"json-rpc&gt;=1.8.1"</span> <span class="string">"service_factory&gt;=0.1.5"</span> flake8 pytest autoflake hy</div><div class="line"></div><div class="line"><span class="comment"># 创建最常用 Py3 虚拟环境</span></div><div class="line">pyenv virtualenv 3.5.2 py3-daily</div><div class="line">pyenv activate py3-daily</div><div class="line">pip install -i https://pypi.doubanio.com/simple requests</div><div class="line">pip install -i https://pypi.doubanio.com/simple beatutifulsoup4</div><div class="line">pip install -i https://pypi.doubanio.com/simple ipython[notebook]</div><div class="line">pip install -i https://pypi.doubanio.com/simple jupyter</div><div class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></div><div class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">"jedi&gt;=0.9.0"</span> <span class="string">"json-rpc&gt;=1.8.1"</span> <span class="string">"service_factory&gt;=0.1.5"</span> flake8 pytest autoflake hy</div><div class="line"></div><div class="line"><span class="comment"># 创建 Anaconda 的数据科学 AI 环境</span></div><div class="line">pyenv virtualenv anaconda3-4.4.0 py3-ai</div><div class="line">pyenv activate anaconda3-4.4.0/envs/py3-ai</div><div class="line">pyenv deactivate</div><div class="line"></div><div class="line"><span class="comment"># 进入一个项目之后</span></div><div class="line">pyenv activate py3-proj</div><div class="line">pip install -r requirements/local.txt</div><div class="line">pip install -r requirements/prod.txt</div><div class="line"><span class="comment"># requirements/local.txt 与 requirements/prod.txt 依赖于 requirements/base.txt</span></div></pre></td></tr></table></figure>
<h4 id="2-3-2-3-熟手级"><a href="#2-3-2-3-熟手级" class="headerlink" title="2.3.2.3 熟手级"></a>2.3.2.3 熟手级</h4><p>其实，第一种入门级管理方式弊病在于，python 版本太粗糙，之前遇到一个 python3.3 的问题，python3.4 就解决了。而为了避免这种奇葩的版本差异带来的潜在风险，开发与部署一般要锁死 Python 版本。</p>
<p>即便是解决了入门级管理方式带来的版本管理粗糙的问题，同样的，依赖也要锁死。<strong>一个项目对应一种环境该多好</strong> 通过 PIP 的确可以用 freeze 输出为 txt 达到锁死的目的。但个人认为，这个还不够，至少要知道依赖树之类的吧？还要知道哪些东西是可以更新的吧？</p>
<p>而且，就应该像 node 项目里面的 package.json 一样，把依赖什么乱七八糟的东西都放进去才好。</p>
<ul>
<li>面对 Python 版本和依赖包管理，使用 pipenv</li>
</ul>
<blockquote>
<p>这代表着，只要一个就行了。</p>
</blockquote>
<h4 id="2-3-3-JavaScript-与-Node-环境"><a href="#2-3-3-JavaScript-与-Node-环境" class="headerlink" title="2.3.3 JavaScript 与 Node 环境"></a>2.3.3 JavaScript 与 Node 环境</h4><h5 id="nvm-amp-amp-npm-amp-amp-yarn"><a href="#nvm-amp-amp-npm-amp-amp-yarn" class="headerlink" title="nvm &amp;&amp; npm &amp;&amp; yarn"></a>nvm &amp;&amp; npm &amp;&amp; yarn</h5><p>nvm 主要用户管理 node 的版本，linux / mac only ,windower 最好下载 node 版本安装，记得配置环境变量。</p>
<p>npm 主要用户管理包，国内人喜欢使用 cnpm, 但是 cnpm 包管理比较渣，所以一般情况下选择 Yarn 配合管理</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install cnpm</div><div class="line">cnpm install yarn -g</div><div class="line"><span class="comment"># 查看下载源</span></div><div class="line"><span class="comment"># yarn config get registry</span></div><div class="line">yarn config set registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<p>yarn 在使用包管理的时候会分析依赖，这对总是 BUG 不断的 node_module 简直是福音。</p>
<h4 id="2-3-4-Java"><a href="#2-3-4-Java" class="headerlink" title="2.3.4 Java"></a>2.3.4 Java</h4><p>Java 环境安装稍微有一丢丢蛋疼。特别是多版本管理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TODO: 以后补充 JAVA 环境安装</div></pre></td></tr></table></figure>
<h4 id="2-3-5-Ruby"><a href="#2-3-5-Ruby" class="headerlink" title="2.3.5 Ruby"></a>2.3.5 Ruby</h4><p>两年前写过几个月的 Ruby, 现在安装 Ruby 环境更多是因为 Ruby 还有一些 Gem 质量挺高的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.rvm.io | bash -s stable</div><div class="line">rvm install 2.3.0</div><div class="line">gem install tmuxinator</div></pre></td></tr></table></figure>
<h3 id="2-4-必备配置-之-dotfiles"><a href="#2-4-必备配置-之-dotfiles" class="headerlink" title="2.4 必备配置 之 dotfiles"></a>2.4 必备配置 之 dotfiles</h3><p>详细内容请见 <a href="https://github.com/twocucao/yadotfiles" target="_blank" rel="external">yadotfiles</a></p>
<ul>
<li>依照我个人的习惯，在 OhMyZsh 基础上增加了个人习惯的环境变量的配置，一些函数的封装。</li>
</ul>
<p>比如，当我在写本文的目录中输入 todos, 就可以查看该我在写文章的时候里面挖了多少个还没有填上去的 TODO（坑）。如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3e383c54 (Micheal Gardner 2017-11-18 12:40:38 +0800 422) ## 0xEE TODO TO LIST</div><div class="line">ae86b7cb (Micheal Gardner 2017-11-19 21:39:49 +0800 245) ### 5. TODO</div><div class="line">c0d51990 (Micheal Gardner 2017-11-22 16:42:08 +0800 552) TODO: 以后补充 JAVA 环境安装</div><div class="line">c0d51990 (Micheal Gardner 2017-11-22 16:42:08 +0800 561) 比如，当我在写本文的目录中输入 todos, 就可以查看该我在写文章的时候里面挖了多少个还没有填上去的 TODO（坑）。</div></pre></td></tr></table></figure>
<p>详细请参考 <a href="https://github.com/twocucao/yadotfiles" target="_blank" rel="external">yadotfiles</a></p>
<h2 id="0x03-踩坑史"><a href="#0x03-踩坑史" class="headerlink" title="0x03 踩坑史"></a>0x03 踩坑史</h2><h3 id="3-1-日常类"><a href="#3-1-日常类" class="headerlink" title="3.1 日常类"></a>3.1 日常类</h3><h4 id="01-时间机器无法完成备份"><a href="#01-时间机器无法完成备份" class="headerlink" title="01. 时间机器无法完成备份"></a>01. 时间机器无法完成备份</h4><p>我有定期备份的习惯，在一次备份中，意外的发现怎么备份都无法备份完毕，经过几次测试：</p>
<ol>
<li>我首先猜测是硬盘问题，换了一块硬盘，问题依旧。</li>
<li>复制了几个大文件，感觉也不太像是接口接触不良的问题。</li>
<li>我认为可能是文件数量过多导致的问题。于是删除掉 node_module 后再次备份，备份成功。当然，这也有一定概率是误打误撞。毕竟从概率学上讲，坏掉的钟还能一天有两次时间是对的呢。</li>
</ol>
<blockquote>
<p>外接硬盘的时候，将网络关闭即可。</p>
</blockquote>
<h4 id="02-下载站的软件包显示损坏"><a href="#02-下载站的软件包显示损坏" class="headerlink" title="02. 下载站的软件包显示损坏"></a>02. 下载站的软件包显示损坏</h4><p>有的时候并不是软件损坏，而是 macOS 的安全配置中配置关掉了未识别出的 App</p>
<p>在终端中开启这个选项，并在安全与隐私处点上 anywhere 即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo spctl --master-disable</div></pre></td></tr></table></figure>
<h3 id="3-2-编程类"><a href="#3-2-编程类" class="headerlink" title="3.2 编程类"></a>3.2 编程类</h3><h4 id="01-homebrew-的与-Python-的问题"><a href="#01-homebrew-的与-Python-的问题" class="headerlink" title="01. homebrew 的与 Python 的问题"></a>01. homebrew 的与 Python 的问题</h4><p>在 Python 中执行下面的代码的时候总是报错：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ip = socket.gethostbyname(socket.gethostname())</div><div class="line"><span class="comment"># socket.gaierror: [Errno 8] nodename nor servname provided, or not known</span></div><div class="line"></div><div class="line"><span class="comment"># 最后发现是因为设置主机名没有设置好</span></div><div class="line">sudo scutil --set ComputerName <span class="string">"newname"</span></div><div class="line">sudo scutil --set LocalHostName <span class="string">"newname"</span></div><div class="line">sudo scutil --set HostName <span class="string">"newname"</span></div><div class="line">dscacheutil -flushcache</div><div class="line"><span class="comment"># 然后重启电脑即可</span></div></pre></td></tr></table></figure>
<p>如果本机安装了 Homebrew 如果后面使用 PyEnv 或者 Anaconda 并且设置当前环境为默认 Python 为 Python3（不建议这么搞）, 但是如果偏偏要把默认的 Python 版本换成 Python3, 会弹出一些 pythonpath<br>的问题，执行下面命令即可暂时屏蔽这个问题，但是没有隐患则不清楚。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv /usr/<span class="built_in">local</span>/lib/python2.7/site-packages/sitecustomize.py /usr/<span class="built_in">local</span>/lib/python2.7/site-packages/sitecustomize.py.back</div></pre></td></tr></table></figure>
<h4 id="02-Homebrew-安装过去的文件"><a href="#02-Homebrew-安装过去的文件" class="headerlink" title="02. Homebrew 安装过去的文件"></a>02. Homebrew 安装过去的文件</h4><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li>本文部分命令行安装借鉴了 <a href="https://github.com/donnemartin/dev-setup" target="_blank" rel="external">dev-setup</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2016-02</strong> 确定大致内容</li>
<li><strong>2017-06-28</strong> 重修文字，调整文章结构，Python 环境 和 Homebrew 安装环境</li>
<li><strong>2017-10-05</strong> 再次重修文字，不定期更新</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当时写这篇文章的时候才接触 mac 没多久，使用快两年之后，再次修订了本文。&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;谈及 macOS , 很多人喜欢和 Win 比个高下。在我看来， Win 虽在非编程类生态和易用性比 Mac 要好很多，可专业人士之所以专业是因为他能挑选适合的武器发挥最大的效用，不是吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;适合自己的，能让自己用最大效率生产或者是娱乐的，才是更好的工具。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="善用佳软" scheme="http://twocucao.xyz/categories/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
    
      <category term="macOS" scheme="http://twocucao.xyz/tags/macOS/"/>
    
      <category term="Ubuntu" scheme="http://twocucao.xyz/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="http://twocucao.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Vue 项目漫谈</title>
    <link href="http://twocucao.xyz/2017/09/25/VueProjectTalking/"/>
    <id>http://twocucao.xyz/2017/09/25/VueProjectTalking/</id>
    <published>2017-09-25T12:06:05.000Z</published>
    <updated>2018-01-30T11:48:07.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近升级 Vue 项目的脚手架，踩了一些关于 Webpack2 升级为 Webpack3 的版本的坑，解决了之后，顺手分享一下，我接近一年来对 Vue 项目的开发理解。</p>
<p>欢迎切磋。</p>
<p>项目使用的脚手架为 VueCli 提供的 webpack 脚手架：</p>
<ul>
<li>VueJS 2.5.2</li>
</ul>
<h2 id="0x01-项目结构"><a href="#0x01-项目结构" class="headerlink" title="0x01 项目结构"></a>0x01 项目结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 根文件</span></div><div class="line">├── Makefile 恩，其实 package.json 也能代替这个功能。</div><div class="line">├── README.md</div><div class="line">├── build <span class="comment">#</span></div><div class="line">├── config <span class="comment"># 环境变量配置</span></div><div class="line">├── dist <span class="comment"># 最后输出</span></div><div class="line">├── extra <span class="comment"># 个人偏好，存放最终用于打包成 IconFont 的 svg</span></div><div class="line">├── index.html <span class="comment"># 可以在这里加首屏 loading, 以及其他预先准备好的样式。</span></div><div class="line">├── node_modules</div><div class="line">├── package.json <span class="comment"># 依赖，开发时</span></div><div class="line">├── src</div><div class="line">├── static <span class="comment"># 存放静态资源</span></div><div class="line">├── <span class="built_in">test</span></div><div class="line">└── yarn.lock</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在 SRC 下面</span></div><div class="line">├── App.vue <span class="comment"># CORE 组件</span></div><div class="line">├── api <span class="comment"># 相关的 Web API 定义</span></div><div class="line">├── assets <span class="comment"># 静态资源，对于已经压缩的，还是直接放在 Static 下面</span></div><div class="line">├── components</div><div class="line">├── config <span class="comment"># 定义常量名称</span></div><div class="line">├── filters <span class="comment"># 定义过滤器</span></div><div class="line">├── directives <span class="comment"># 定义指令，比如 v-loading</span></div><div class="line">├── main.js <span class="comment"># 用于初始化项目，注册组件等等</span></div><div class="line">├── mixins <span class="comment"># 混合</span></div><div class="line">├── routes.js <span class="comment"># 路由</span></div><div class="line">├── store <span class="comment"># vuex 状态</span></div><div class="line">└── utils <span class="comment"># 工具方法</span></div></pre></td></tr></table></figure>
<p>值得一提的就是 main.js 应该要做的事情</p>
<ul>
<li>注册全局组件和过滤器</li>
<li>给 Vue 实例加戏，哦，说错了，给实例加一些全局性的方法，比如 $comfirm 等对话框 $verbose $warning 等日志</li>
<li>完成刷新界面之后的从 localStorage 的重新赋值</li>
<li>注册路由切换的时候的调用的各类方法</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># components</span></div><div class="line">├── fed-commons 定义通用型组件，比如手风琴，tab 卡，全局的卡片，一般为了开发效率，如果是 PC 端的话，建议使用 ElementUI,ElementUI 不满足要求的时候，再考虑自己封装组件。</div><div class="line">└── views</div><div class="line">    ├── auth</div><div class="line">        ├── Login.vue</div><div class="line">        ├── Register.vue</div><div class="line">    ├── commons</div><div class="line">        ├── 404.vue</div><div class="line">        ├── 401.vue</div><div class="line">    ├── core</div><div class="line">        ├── Dashboard.vue</div><div class="line">        ├── Content.vue</div><div class="line">    ├── pages</div><div class="line">        ├── AModule</div><div class="line">            ├── AModulePart1Componennt</div><div class="line">                ├── Charts01.vue</div><div class="line">                ├── Map02.vue</div><div class="line">                ├── Editor03.vue</div><div class="line">            ├── AModulePart1.vue</div><div class="line">            ├── AModulePart2.vue</div><div class="line">        ├── BModule</div><div class="line">            ├── BModulePart1.vue</div><div class="line">            ├── BModulePart2.vue</div></pre></td></tr></table></figure>
<p>值得一提的是，AModulePart1.vue 页面的同级 AModulePart1Componennt 下面如果有多个 ECharts 图表，实际上可以通过 mixin 来达到减少代码量的目的。</p>
<h2 id="0x02-开发技巧"><a href="#0x02-开发技巧" class="headerlink" title="0x02 开发技巧"></a>0x02 开发技巧</h2><h3 id="8-日志管理"><a href="#8-日志管理" class="headerlink" title="8. 日志管理"></a>8. 日志管理</h3><p>我觉得日志管理也应该是比较重要的部分，不管是调试程序，还是用于检查用户浏览器这块的错误日志，甚至是埋点。</p>
<p>依据具体技术栈可以考虑上个 sentry 或者 ELK</p>
<h3 id="6-登录，登录校验以及权限"><a href="#6-登录，登录校验以及权限" class="headerlink" title="6. 登录，登录校验以及权限"></a>6. 登录，登录校验以及权限</h3><p>登录可以使用 Mixin 来混入每一个需要校验登录权限的</p>
<h3 id="7-首屏-Loading"><a href="#7-首屏-Loading" class="headerlink" title="7. 首屏 Loading"></a>7. 首屏 Loading</h3><p>这个可以放在 index.html 里面</p>
<h3 id="4-路由管理与嵌套路由"><a href="#4-路由管理与嵌套路由" class="headerlink" title="4. 路由管理与嵌套路由"></a>4. 路由管理与嵌套路由</h3><p>路由管理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> routes = [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/login'</span>,</div><div class="line">    <span class="attr">component</span>: Login  <span class="comment">// 似乎路由中的 component 至少要有一个不是懒加载的，否则会出奇怪的 BUG</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">    <span class="attr">redirect</span>: <span class="string">'AModule/APage'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">    <span class="attr">meta</span>: &#123;</div><div class="line">      <span class="attr">requiresAuth</span>: <span class="literal">true</span> <span class="comment">// 通过这个用来区分网页是否需要注册用户登录</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">component</span>: Dashboard,</div><div class="line">    <span class="attr">children</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'AModule'</span>,</div><div class="line">        <span class="attr">component</span>: AModule.vue,</div><div class="line">        <span class="attr">name</span>: <span class="string">'AModule'</span>,</div><div class="line">        <span class="attr">meta</span>: &#123;</div><div class="line">          <span class="attr">requiresAuth</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">children</span>: [</div><div class="line">          &#123;</div><div class="line">            <span class="attr">path</span>: <span class="string">'AModulePart1'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'AModulePart1'</span>,</div><div class="line">            <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./components/views/pages/AModule'</span>)</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            <span class="attr">path</span>: <span class="string">'AModulePart2'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'AModulePart2'</span>,</div><div class="line">            <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./components/views/pages/AModule'</span>)</div><div class="line">          &#125;,</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="comment">// not found handler</span></div><div class="line">    path: <span class="string">'*'</span>,</div><div class="line">    <span class="attr">component</span>: NotFoundView</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>嵌套路由有什么优点？</p>
<ol>
<li>使得子路由里的页面可以复用父级路由的页面的组件</li>
<li>减少手动硬编码 meta 和 props 的代码量</li>
<li>便于定制面包屑组件</li>
<li>其他</li>
</ol>
<h2 id="0x03-构建技巧"><a href="#0x03-构建技巧" class="headerlink" title="0x03 构建技巧"></a>0x03 构建技巧</h2><h3 id="3-1-离线-IconFont"><a href="#3-1-离线-IconFont" class="headerlink" title="3.1 离线 IconFont"></a>3.1 离线 IconFont</h3><p>经常需要离线调试网页，顺手写了这个脚本。</p>
<p>之前在研究某个网站的反爬机制的时候发现时动态生成 iconfont, 然后通过 unicode 码来实现数字的显示，从而让爬虫小白无法爬取。研究了一下他们的 iconfont, 知道了 font-carrier, 然后调用 node 脚本打包字体文件，并在这个过程中自动生成对应的 iconfont.css</p>
<p>最后的结果就是，当我放一个文件到 svg 文件夹下面的时候，比如 bank.svg , 我执行一下脚本，生成对应的字体文件，在 html 里面编写脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span class=&quot;iconfont iconfont-bank&quot; &gt;&lt;/span&gt;</div></pre></td></tr></table></figure>
<p>然后对应图标就呈现出来了。</p>
<h3 id="3-2-Webpack-构建工具"><a href="#3-2-Webpack-构建工具" class="headerlink" title="3.2 Webpack 构建工具"></a>3.2 Webpack 构建工具</h3><p>日常开发用的是 VueCli, 配置还是非常人性化的。开箱即用。</p>
<h4 id="开发环境与部署环境"><a href="#开发环境与部署环境" class="headerlink" title="开发环境与部署环境"></a>开发环境与部署环境</h4><p>VueCLI 内置了变量的管理，你可以定义 config/dev.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</div><div class="line">  <span class="attr">NODE_ENV</span>: <span class="string">'"development"'</span>,</div><div class="line">  <span class="attr">API_ROOT</span>: <span class="string">'"http://dev-data.twocucao.xyz"'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>其实，开发的环境用一组变量是不行的。比如，开发的人分为纯前端，纯后端，我这样的前后都会一些的人，每个对于环境的配置都是不太一样的。</p>
<ul>
<li>对于前端 Windowser 直接执行 npm run dev 对接到局域网服务器</li>
<li>对于单个人同时调试后端和前端的时候，一般要把 Web API 对应到本地的机器上。可是使用环境便来配置不同的 DEBUG_MODE=True npm run dev</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// dev.js 应该如下</span></div><div class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</div><div class="line"><span class="keyword">var</span> prodEnv = <span class="built_in">require</span>(<span class="string">'./prod.env'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (process.env.DEBUG_MODE === <span class="string">'True'</span>)&#123;</div><div class="line">  <span class="built_in">module</span>.exports = merge(prodEnv, &#123;</div><div class="line">    <span class="attr">NODE_ENV</span>: <span class="string">'"development"'</span>,</div><div class="line">    <span class="attr">API_ROOT</span>: <span class="string">'"http://local-dev-data.twocucao.xyz"'</span></div><div class="line">  &#125;);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="built_in">module</span>.exports = merge(prodEnv, &#123;</div><div class="line">    <span class="attr">NODE_ENV</span>: <span class="string">'"development"'</span>,</div><div class="line">    <span class="attr">API_ROOT</span>: <span class="string">'"http://dev-data.twocucao.xyz"'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="DLL-打包"><a href="#DLL-打包" class="headerlink" title="DLL 打包"></a>DLL 打包</h4><p>大约在半年前，开发过程中突然在使用 ECharts 后，仅仅不到 10M 大小的项目居然开发 build 的时间需要 5MIN, 打包出来的文件超级大。居然接近了 100 多 M</p>
<p>震惊之余，差点准备写一篇骗点击量的文章：<strong>看完震惊了！！前端和后端男程序员都无法忍受的大小！</strong>, 然后文章内就介绍 Webpack 打包文件居然没有避免重复引入依赖库导致打包文件太大提出抗议。</p>
<p>回到主题，使用 npm run analyze 发现问题出现在 ECharts 上， 每一个图表组件都是依赖于 ECharts, 而每一个组件都包含了一个完整的 ECharts 库的大小。</p>
<p>于是，我一边吐槽 webpack 考虑不周，另一方面寻找解决方案。最后找到了 DLL 方案</p>
<p>这个方案的原理大致是：</p>
<ul>
<li>编写独立的脚本，把几个需要复用的库一个配置文件 (manifest.json), 以及打包库到一个 JS 文件中。</li>
<li>然后从 index.html 引入这个 JS 文件。</li>
<li>接着在 webpack 配置中使之每次引入一个库的时候，避免重复引入。</li>
</ul>
<blockquote>
<p>但这不应该是 Webpack 本身就应该做的吗？为嘛还要配置，还要不伦不类的生成一个配置文件和一个 JS 文件，再从 index.html 里面导入？</p>
</blockquote>
<p>当然，Webpack 生态还是很丰富的，后来出来了一个 <a href="https://github.com/asfktz/autodll-webpack-plugin" target="_blank" rel="external">https://github.com/asfktz/autodll-webpack-plugin</a> 尝试了之后。感觉很赞。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// windows 系统不兼容，暂时去掉</span></div><div class="line"><span class="keyword">new</span> AutoDllPlugin(&#123;</div><div class="line">  <span class="attr">inject</span>: <span class="literal">true</span>, <span class="comment">// will inject the DLL bundles to index.html</span></div><div class="line">  filename: <span class="string">'[name]_[hash].js'</span>,</div><div class="line">  <span class="attr">path</span>: <span class="string">'./static/js/'</span>,</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">vendor</span>: [</div><div class="line">      <span class="string">'mapbox-gl'</span>,</div><div class="line">      <span class="string">'d3'</span>,</div><div class="line">      <span class="string">'echarts'</span>,</div><div class="line">      <span class="string">'echarts-gl'</span>,</div><div class="line">      <span class="string">'leaflet'</span>,</div><div class="line">      <span class="string">'axios'</span>,</div><div class="line">      <span class="string">'vue'</span>,</div><div class="line">      <span class="string">'vue-router'</span>,</div><div class="line">      <span class="string">'vuex'</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">      <span class="attr">compress</span>: &#123;</div><div class="line">        <span class="attr">comparisons</span>: <span class="literal">false</span>  <span class="comment">// don't optimize comparisons</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">sourceMap</span>: <span class="literal">true</span></div><div class="line">    &#125;),</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>可惜在 mac 上一切安好，Windows 上晴天霹雳，debug 了一下，发现是这个库的一个依赖库对 windows 的路径处理好像还有点小问题。而公司的前端小伙伴是 Windowser, 只好作罢。</p>
<p>Macer 可以先用试试，至于 Windowser, 那就去这个 ISSUE 下面催催作者吧… 哈哈哈</p>
<blockquote>
<p>update: 现在 windows 已经可以用了。</p>
</blockquote>
<h2 id="0x03-代码质量工程管理"><a href="#0x03-代码质量工程管理" class="headerlink" title="0x03 代码质量工程管理"></a>0x03 代码质量工程管理</h2><h3 id="1-语义化与可读性"><a href="#1-语义化与可读性" class="headerlink" title="1. 语义化与可读性"></a>1. 语义化与可读性</h3><h3 id="2-提取公共逻辑（通过-Service-Mixin-来）"><a href="#2-提取公共逻辑（通过-Service-Mixin-来）" class="headerlink" title="2. 提取公共逻辑（通过 Service, Mixin 来）"></a>2. 提取公共逻辑（通过 Service, Mixin 来）</h3><h3 id="3-CSS-管理"><a href="#3-CSS-管理" class="headerlink" title="3. CSS 管理"></a>3. CSS 管理</h3><p>在项目中，我采用 SCSS 来管理 CSS 代码，</p>
<p>过去的时候有两种 css 的代码命名方法</p>
<p>第一种，我管他叫做<strong>配置式写法</strong>，通过将 CSS 语法的几个片段转化成名称，从而实现快速配置出效果的的 CSS</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.fl</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.fr</span> &#123;</div><div class="line">  <span class="attribute">float</span>: right</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mr10</span> &#123;</div><div class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.pb10</span> &#123;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span></div><div class="line">&#125;</div><div class="line">....</div></pre></td></tr></table></figure>
<p>这种写法对于简单页面来说确实也是可以使用的。缺点就是当页面变得复杂一些的时候，则比较难控制这种短小精捍（不直观）的变量。比如</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.tmd01</span>&#123;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span></div><div class="line">  font-size: <span class="number">16px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#2d3c48</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.6</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>请脑补一下我的黄人问号脸</p>
</blockquote>
<p>当然，如果用得好的话，自然是 OK, 如果用不好的话，</p>
<p>后来进入了嵌套写法时代（感谢伟大的 Rails 社区出的 SASS）, 下面的语法都是 SCSS.</p>
<p>第二种写法就变成了这样</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.actions</span> &#123;</div><div class="line">  <span class="selector-class">.card_wrapper</span> &#123;</div><div class="line">    <span class="selector-class">.card</span> &#123;</div><div class="line">      <span class="selector-class">.title</span> &#123;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.content</span> &#123;</div><div class="line">        <span class="selector-class">.list</span> &#123;</div><div class="line">          <span class="selector-class">.fa</span> &#123;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>外加变量和 mixin 以及函数的话，基本上就可以完成代码的组织了。</p>
<p>这种写法倒是比原来不知道高到哪里去了，但问题依旧存在，比如 title,content 这些玩意太多，完完全全的看不懂。更加糟糕的事情是，有的小伙伴直接是乱用嵌套，也不用伪类和伪选择器，从而达到单页面调出来小伙比较快，但因为代码不能重用，调多个页面的时候速度巨慢无比。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.apage &#123;</div><div class="line">  bbizlogic &#123;</div><div class="line">    .actions &#123;</div><div class="line">      .card_wrapper &#123;</div><div class="line">        .card &#123;</div><div class="line">          .title &#123;</div><div class="line">          &#125;</div><div class="line">          .content &#123;</div><div class="line">            .list &#123;</div><div class="line">              .fa &#123;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我本人推荐（其实我是写 Python Web 后端的，逃… ) 代码风格比较倾向于 BEM 命名，关于 BEM 的介绍，请参考简单心理团队的教程。</p>
<ul>
<li><a href="https://jiandanxinli.github.io/2016-08-11.html" target="_blank" rel="external">https://jiandanxinli.github.io/2016-08-11.html</a></li>
<li><a href="https://juejin.im/post/58d0e5caa22b9d00643e8b51" target="_blank" rel="external">https://juejin.im/post/58d0e5caa22b9d00643e8b51</a></li>
</ul>
<p>然而，最好的方式，就是读一个非常使用 SCSS 来组织项目的 CSS 代码的成熟项目。</p>
<p>我推荐两个：</p>
<ul>
<li>BOOTSTRAP V4: Bootstrap V4 使用 SCSS 来写</li>
<li>ELEMENT UI: 饿了么的团队出的，前段时间从 v1 版本升级到 v2 版本，发现网站大部分样式都没有出现大变动，在这里给个赞。</li>
</ul>
<h4 id="0-先从整体上设计好骨架"><a href="#0-先从整体上设计好骨架" class="headerlink" title="0. 先从整体上设计好骨架"></a>0. 先从整体上设计好骨架</h4><p>接着才是 HTML, 然后才是 CSS</p>
<p>现在前端入行的人越来越多，很多的新手前端 er 会用比较快的思维来编写，这就导致代码质量奇差无比。</p>
<ul>
<li>哎，我看看，面粉加多了，我加点水，水加多了，我再加点面粉。</li>
<li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li>
<li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li>
<li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li>
<li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li>
</ul>
<p>当设计出来的网页本身的 HTML 写的就很混乱，CSS 能写的好在哪里呢？</p>
<p>命名都很混乱，遑论代码可维护性？</p>
<p>可以多去参考一些成熟的项目的 CSS 是怎么命名的呀，HTML 是怎么设计的呀</p>
<h4 id="1-Scoped-的滥用"><a href="#1-Scoped-的滥用" class="headerlink" title="1. Scoped 的滥用"></a>1. Scoped 的滥用</h4><p>我印象中，有个小伙伴把一个比较大的 CSS 库多次 import 到被 Scoped 的组件中，于是开发时猛然发现 head 处多了大量的 style 标签，除了 css 选择器后面随机的属性 hash, 文件内容都一样。</p>
<blockquote>
<p>公共组件往往可以通过嵌套和加前缀的方式来防止污染。如果 scoped 的属性里面有成吨的 style, 慎用 import.</p>
</blockquote>
<p>还有小伙伴喜欢在很多七七八八的组件各种 import scss. 其实对于中小型项目，完全可以直接全局一个文件 style 即可。</p>
<p>我现在的做法，是直接在 src 的上方直接用 gulp 搭建一个只用来编译 SCSS 到 CSS 的项目，每次编译后输出到页面里面。</p>
<p>如果项目是小项目，建议直接在 app.vue 里面 import pages</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── common</div><div class="line">├── fonts</div><div class="line">├── global.scss</div><div class="line">├── index.scss</div><div class="line">├── mixins</div><div class="line">├── pages.scss</div><div class="line">└── reset.scss</div></pre></td></tr></table></figure>
<h4 id="2-保持代码的通用性"><a href="#2-保持代码的通用性" class="headerlink" title="2. 保持代码的通用性"></a>2. 保持代码的通用性</h4><p>一般，当同一段逻辑出现三次的时候，是要停下来重构一下的，这样的话，就可以节省很多时间。</p>
<p>套用在 CSS 的样式上也是如此。</p>
<h2 id="0x04-Tmux-和-Tmuxnator-打造工作流"><a href="#0x04-Tmux-和-Tmuxnator-打造工作流" class="headerlink" title="0x04 Tmux 和 Tmuxnator 打造工作流"></a>0x04 Tmux 和 Tmuxnator 打造工作流</h2><p>具体参考我的文章 <a href="l">用 Tmux 和 Tmuxnator 打造工作流</a></p>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-09-25</strong> 初始化本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;最近升级 Vue 项目的脚手架，踩了一些关于 Webpack2 升级为 Webpack3 的版本的坑，解决了之后，顺手分享一下，我接近一年来对 Vue 项目的开发理解。&lt;/p&gt;
&lt;p&gt;欢迎切磋。&lt;/p&gt;
&lt;p&gt;项目使用的脚手架为 VueCli 提供的 webpack 脚手架：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VueJS 2.5.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;0x01-项目结构&quot;&gt;&lt;a href=&quot;#0x01-项目结构&quot; class=&quot;headerlink&quot; title=&quot;0x01 项目结构&quot;&gt;&lt;/a&gt;0x01 项目结构&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 根文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── Makefile 恩，其实 package.json 也能代替这个功能。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── README.md&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── build &lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── config &lt;span class=&quot;comment&quot;&gt;# 环境变量配置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── dist &lt;span class=&quot;comment&quot;&gt;# 最后输出&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── extra &lt;span class=&quot;comment&quot;&gt;# 个人偏好，存放最终用于打包成 IconFont 的 svg&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── index.html &lt;span class=&quot;comment&quot;&gt;# 可以在这里加首屏 loading, 以及其他预先准备好的样式。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── node_modules&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── package.json &lt;span class=&quot;comment&quot;&gt;# 依赖，开发时&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── src&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── static &lt;span class=&quot;comment&quot;&gt;# 存放静态资源&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── yarn.lock&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://twocucao.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
      <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="项目经验" scheme="http://twocucao.xyz/tags/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
</feed>
