<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MG的编程小屋</title>
  <subtitle>Get Busy Living, Or Get Busy Dying</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://twocucao.xyz/"/>
  <updated>2017-06-23T01:48:21.000Z</updated>
  <id>http://twocucao.xyz/</id>
  
  <author>
    <name>Micheal Gardner</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vim Cheatsheet</title>
    <link href="http://twocucao.xyz/2017/06/23/VimCheatSheet/"/>
    <id>http://twocucao.xyz/2017/06/23/VimCheatSheet/</id>
    <published>2017-06-23T11:48:00.000Z</published>
    <updated>2017-06-23T01:48:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中 Vim 使用场景。</p>
<p>不定期更新。</p>
<a id="more"></a>
<ul>
<li>安装与配置</li>
<li>基本使用技巧</li>
<li>原生 Tips &amp; Hacks</li>
<li>Vim 必备插件</li>
</ul>
<h2 id="0x01-安装与配置"><a href="#0x01-安装与配置" class="headerlink" title="0x01 安装与配置"></a>0x01 安装与配置</h2><h2 id="0x02-基本使用技巧"><a href="#0x02-基本使用技巧" class="headerlink" title="0x02 基本使用技巧"></a>0x02 基本使用技巧</h2><h3 id="2-1-Insert-Mode"><a href="#2-1-Insert-Mode" class="headerlink" title="2.1 Insert Mode"></a>2.1 Insert Mode</h3><h3 id="2-2-Normal-Mode"><a href="#2-2-Normal-Mode" class="headerlink" title="2.2 Normal Mode"></a>2.2 Normal Mode</h3><p>gi 返回上次修改地点<br>d% 剪切包含括号的括号内部内容<br>U 恢复单个句子<br>在命令状态下按 c-d 可以查看所有命令，相当于 bash 下面的 tabtab</p>
<ul>
<li>hjkl 左下上右</li>
<li>EasyMotion 使用这个就可以代替乱七八糟的快速移动了。这是一个可以给当前的文字立即用打上 tag, 这样的话在 normal 情况下输入，,w  然后就可以看到很多 tag, 输入其中的 tag 就可以立即跳转到相应的 tag.</li>
<li>insert 状态进行编辑 c-h c-w 删除一个字，删除一个词。</li>
<li>normal 状态下进行删除 x dd  —— 删除一个字，剪切一行。</li>
<li>. ..  —— 重复操作</li>
<li><blockquote>
<p>&lt;   —— 缩进 &gt;G <g <g="">g</g></p>
</blockquote>
</li>
<li>c-b c-f back forth</li>
<li>c-n c-p 代码补全，tips, 建议标点符号全部半角花，这样就会吧每段连起来的汉字当成一个单词，这样就可以减少输入代码。</li>
</ul>
<blockquote>
<p>indent<br>&lt; outdent</p>
</blockquote>
<p>do it (&gt;)<br>repeat (.)<br>reverse (u)</p>
<p>f{char}<br>repeat ;<br>reverse ,</p>
<h3 id="2-3-Command-Mode"><a href="#2-3-Command-Mode" class="headerlink" title="2.3 Command Mode"></a>2.3 Command Mode</h3><p>:%s/old/new/gc 可以一行一行查看</p>
<h3 id="2-4-Visual-Mode"><a href="#2-4-Visual-Mode" class="headerlink" title="2.4 Visual Mode"></a>2.4 Visual Mode</h3><p>vib - 选框内<br>vi” - “” 内部<br>vi’ - ‘’ 内部<br>ggVG</p>
<h3 id="2-5-窗口管理"><a href="#2-5-窗口管理" class="headerlink" title="2.5 窗口管理"></a>2.5 窗口管理</h3><p>切换窗口：Ctrl+w+hjkl<br>分割窗口：Ctrl+w+vs<br>关闭窗口：Ctrl+w+q</p>
<h2 id="0x03-原生-Tips-amp-Hacks"><a href="#0x03-原生-Tips-amp-Hacks" class="headerlink" title="0x03 原生 Tips &amp; Hacks"></a>0x03 原生 Tips &amp; Hacks</h2><h3 id="行处理"><a href="#行处理" class="headerlink" title="行处理"></a>行处理</h3><h4 id="行排序"><a href="#行排序" class="headerlink" title="行排序"></a>行排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">行排序</div><div class="line">sort r /【.\+】/</div><div class="line">sort u</div><div class="line">sort n</div><div class="line">sort</div><div class="line">sort!</div><div class="line">g/start/+1,/end/-1 sort n</div><div class="line"></div><div class="line">:%!column -t</div><div class="line">:%!sort -k2nr</div></pre></td></tr></table></figure>
<h4 id="行删除"><a href="#行删除" class="headerlink" title="行删除"></a>行删除</h4><p>删除 html 标签</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:%s/&lt;\_.\&#123;-1,\&#125;&gt;//g</div></pre></td></tr></table></figure>
<h4 id="删除空行"><a href="#删除空行" class="headerlink" title="删除空行"></a>删除空行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">:g/^$/d</div><div class="line">:g/^\s*$/d</div><div class="line">:%s/\n\&#123;3,&#125;/\r\r/e</div><div class="line">:g/^[ \t\u3000]*$/d</div><div class="line"></div><div class="line">:g/pattern/d</div><div class="line">:g!/pattern/d</div><div class="line"></div><div class="line">:g/pattern/t$</div><div class="line">:g/pattern/m$</div><div class="line">:s/ \&#123;2,&#125;/ /g</div></pre></td></tr></table></figure>
<p>Use \r instead of \n</p>
<h2 id="0x04-Vim-必备插件"><a href="#0x04-Vim-必备插件" class="headerlink" title="0x04 Vim 必备插件"></a>0x04 Vim 必备插件</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中 Vim 使用场景。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="效率" scheme="http://twocucao.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="工作自动化" scheme="http://twocucao.xyz/tags/%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
      <category term="Vim" scheme="http://twocucao.xyz/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Git CheatSheet</title>
    <link href="http://twocucao.xyz/2017/06/15/GitCheatSheet/"/>
    <id>http://twocucao.xyz/2017/06/15/GitCheatSheet/</id>
    <published>2017-06-15T12:46:00.000Z</published>
    <updated>2017-06-16T05:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我使用 Git 的一些开发小技巧。</p>
<p>不定期更新。</p>
<a id="more"></a>
<p>Git 是一种代码版本管理工具，是团队配合用于管理代码的一种工具。</p>
<p>本文的目录结构如下：</p>
<ul>
<li>Git 常用命令</li>
</ul>
<h2 id="0x01-Git-命令范论"><a href="#0x01-Git-命令范论" class="headerlink" title="0x01 Git 命令范论"></a>0x01 Git 命令范论</h2><ol>
<li>基础命令 （本地修改类）</li>
<li>合作命令 （本地与仓库类）</li>
<li>综合命令</li>
<li>管理命令</li>
</ol>
<p>前两种命令是入门 Git 的程序员都必须要会的。</p>
<p>而队伍里的技术管理人员必须要会前三。</p>
<h3 id="1-1-基础命令"><a href="#1-1-基础命令" class="headerlink" title="1.1 基础命令"></a>1.1 基础命令</h3><ul>
<li>git-init(1) to create a new repository.</li>
<li>git-log(1) to see what happened.</li>
<li>git-checkout(1) and git-branch(1) to switch branches.</li>
<li>git-add(1) to manage the index file.</li>
<li>git-diff(1) and git-status(1) to see what you are in the middle of doing.</li>
<li>git-commit(1) to advance the current branch.</li>
<li>git-reset(1) and git-checkout(1) (with pathname parameters) to undo changes.</li>
<li>git-merge(1) to merge between local branches.</li>
<li>git-rebase(1) to maintain topic branches.</li>
<li>git-tag(1) to mark a known point.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ tar zxf frotz.tar.gz</div><div class="line">$ <span class="built_in">cd</span> frotz</div><div class="line">$ git init</div><div class="line">$ git add . (1)</div><div class="line">$ git commit -m <span class="string">"import of frotz source tree."</span></div><div class="line">$ git tag v2.43 (2)</div><div class="line"></div><div class="line">$ git checkout -b alsa-audio (1)</div><div class="line">$ edit/compile/<span class="built_in">test</span></div><div class="line">$ git checkout -- curses/ux_audio_oss.c (2) <span class="comment"># 恢复文件</span></div><div class="line">$ git add curses/ux_audio_alsa.c (3)</div><div class="line">$ edit/compile/<span class="built_in">test</span></div><div class="line">$ git diff HEAD (4) <span class="comment"># 查看提交了哪些修改</span></div><div class="line">$ git commit <span class="_">-a</span> <span class="_">-s</span> (5) <span class="comment"># 提交所有</span></div><div class="line">$ edit/compile/<span class="built_in">test</span></div><div class="line">$ git diff HEAD^ (6) <span class="comment"># 查看所有变化，包含之前的 commit</span></div><div class="line">$ git commit <span class="_">-a</span> --amend (7) <span class="comment"># 修订前一个 commit, 把所有的新变化提交到</span></div><div class="line">$ git checkout master (8)</div><div class="line">$ git merge alsa-audio (9)</div><div class="line">$ git <span class="built_in">log</span> --since=<span class="string">'3 days ago'</span> (10)</div><div class="line">$ git <span class="built_in">log</span> v2.43.. curses/ (11)</div></pre></td></tr></table></figure>
<h3 id="1-2-合作命令"><a href="#1-2-合作命令" class="headerlink" title="1.2 合作命令"></a>1.2 合作命令</h3><ul>
<li>git-clone(1) from the upstream to prime your local repository.</li>
<li>git-pull(1) and git-fetch(1) from “origin” to keep up-to-date with the upstream.</li>
<li>git-push(1) to shared repository, if you adopt CVS style shared repository workflow.</li>
<li>git-format-patch(1) to prepare e-mail submission, if you adopt Linux kernel-style public forum workflow.</li>
<li>git-send-email(1) to send your e-mail submission without corruption by your MUA.</li>
<li>git-request-pull(1) to create a summary of changes for your upstream to pull.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## clone 修改 提交</span></div><div class="line">$ git <span class="built_in">clone</span> git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6</div><div class="line">$ <span class="built_in">cd</span> my2.6</div><div class="line">$ git checkout -b mine master (1)</div><div class="line">$ edit/compile/<span class="built_in">test</span>; git commit <span class="_">-a</span> <span class="_">-s</span> (2)</div><div class="line">$ git format-patch master (3)</div><div class="line">$ git send-email --to=<span class="string">"person &lt;email@example.com&gt;"</span> 00*.patch (4)</div><div class="line">$ git checkout master (5)</div><div class="line">$ git pull (6)</div><div class="line">$ git <span class="built_in">log</span> -p ORIG_HEAD.. arch/i386 include/asm-i386 (7) <span class="comment"># 查看感兴趣的部分</span></div><div class="line">$ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8) <span class="comment"># 查看分支</span></div><div class="line">$ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9) <span class="comment"># 从一个特地</span></div><div class="line">$ git reset --hard ORIG_HEAD (10) <span class="comment"># 撤销 pull</span></div><div class="line">$ git gc (11) <span class="comment"># garbage collect leftover objects from reverted pull</span></div><div class="line"><span class="comment"># 推送到其他 repo</span></div><div class="line"></div><div class="line">satellite$ git <span class="built_in">clone</span> mothership:frotz frotz (1)</div><div class="line">satellite$ <span class="built_in">cd</span> frotz</div><div class="line">satellite$ git config --get-regexp <span class="string">'^(remote|branch)\.'</span> (2)</div><div class="line">remote.origin.url mothership:frotz</div><div class="line">remote.origin.fetch refs/heads/*:refs/remotes/origin/*</div><div class="line">branch.master.remote origin</div><div class="line">branch.master.merge refs/heads/master</div><div class="line">satellite$ git config remote.origin.push \</div><div class="line">            +refs/heads/*:refs/remotes/satellite/* (3)</div><div class="line">satellite$ edit/compile/<span class="built_in">test</span>/commit</div><div class="line">satellite$ git push origin (4)</div><div class="line"></div><div class="line">mothership$ <span class="built_in">cd</span> frotz</div><div class="line">mothership$ git checkout master</div><div class="line">mothership$ git merge satellite/master (5)</div><div class="line"></div><div class="line">           1. mothership machine has a frotz repository under your home directory; <span class="built_in">clone</span> from it to start a repository on the satellite machine.</div><div class="line">           2. <span class="built_in">clone</span> sets these configuration variables by default. It arranges git pull to fetch and store the branches of mothership machine to <span class="built_in">local</span> remotes/origin/* remote-tracking</div><div class="line">           branches.</div><div class="line">           3. arrange git push to push all <span class="built_in">local</span> branches to their corresponding branch of the mothership machine.</div><div class="line">           4. push will stash all our work away on remotes/satellite/* remote-tracking branches on the mothership machine. You could use this as a back-up method. Likewise, you can</div><div class="line">           pretend that mothership <span class="string">"fetched"</span> from you (useful when access is one sided).</div><div class="line">           5. on mothership machine, merge the work <span class="keyword">done</span> on the satellite machine into the master branch.</div><div class="line"></div><div class="line">       Branch off of a specific tag.</div><div class="line"></div><div class="line">               $ git checkout -b private2.6.14 v2.6.14 (1)</div><div class="line">               $ edit/compile/<span class="built_in">test</span>; git commit <span class="_">-a</span></div><div class="line">               $ git checkout master</div><div class="line">               $ git cherry-pick v2.6.14..private2.6.14 (2)</div><div class="line"></div><div class="line">           1. create a private branch based on a well known (but somewhat behind) tag.</div><div class="line">           2. forward port all changes <span class="keyword">in</span> private2.6.14 branch to master branch without a formal <span class="string">"merging"</span>. Or longhand git format-patch -k -m --stdout v2.6.14..private2.6.14 | git am -3</div><div class="line">           -k</div></pre></td></tr></table></figure>
<h3 id="1-3-综合个体"><a href="#1-3-综合个体" class="headerlink" title="1.3 综合个体"></a>1.3 综合个体</h3><h3 id="1-4-仓库管理"><a href="#1-4-仓库管理" class="headerlink" title="1.4 仓库管理"></a>1.4 仓库管理</h3><p>安装完毕之后，cmd-s-p shell command install</p>
<h2 id="0x02-Git-Hacks"><a href="#0x02-Git-Hacks" class="headerlink" title="0x02 Git Hacks"></a>0x02 Git Hacks</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 搜索代码的变化</span></div><div class="line">git <span class="built_in">log</span> -S<span class="string">'&lt;a term in the source&gt;'</span></div><div class="line"><span class="comment"># 放弃本地修改，与远程同步</span></div><div class="line">git fetch origin &amp;&amp; git reset --hard origin/master &amp;&amp; git clean <span class="_">-f</span> <span class="_">-d</span></div><div class="line"><span class="comment"># 列出所有冲突文件</span></div><div class="line">git diff --name-only --diff-filter=U</div><div class="line"></div><div class="line"><span class="comment"># 手贱错误提交，但是没有 push</span></div><div class="line">git commit -m <span class="string">"Something terribly misguided"</span>              (1)</div><div class="line">git reset HEAD~                                           (2)</div><div class="line"><span class="comment"># edit needing changed files</span></div><div class="line">git add needing changed files                             (4)</div><div class="line">git commit -c ORIG_HEAD                                   (5)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我使用 Git 的一些开发小技巧。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Pandas Cheatsheet</title>
    <link href="http://twocucao.xyz/2017/06/03/PandasCheatSheet/"/>
    <id>http://twocucao.xyz/2017/06/03/PandasCheatSheet/</id>
    <published>2017-06-03T10:41:47.000Z</published>
    <updated>2017-06-20T08:04:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Pandas 相关语句。当然,其中还包含Numpy等数据科学,统计学相关语句.</p>
<p>主要包含：</p>
<ul>
<li>Pandas 与 SQL 等价的一些操作</li>
<li>Pandas 使用过程中的一些细节</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>
<blockquote>
<p>SQL 是一种面向集合的处理工具 / 语言<br>Pandas 是一种面向数组的处理工具</p>
<p><strong>而一般处理 pandas 的数据往往以二维表的形式存在。所以，可以类比为更加强大的 SQL 语言。</strong></p>
</blockquote>
<h2 id="0x01-DataFrame-相关"><a href="#0x01-DataFrame-相关" class="headerlink" title="0x01. DataFrame 相关"></a>0x01. DataFrame 相关</h2><h3 id="1-1-定义并初始化"><a href="#1-1-定义并初始化" class="headerlink" title="1.1. 定义并初始化"></a>1.1. 定义并初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 1. 内存变量转 Dataframe</span></div><div class="line"><span class="comment">## 1.1. 通过二位矩阵 , index , columns</span></div><div class="line">dates = pd.date_range(<span class="string">'20130101'</span>, periods=<span class="number">6</span>)</div><div class="line">pd = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index=dates, columns=list(<span class="string">'ABCD'</span>))</div><div class="line"><span class="comment">## 1.2. 通过字典 Key 为 Column , Value 为 list,timestamp,np.array,value</span></div><div class="line">df2 = pd.DataFrame(&#123; <span class="string">'A'</span> : <span class="number">1.</span>,</div><div class="line">                     <span class="string">'B'</span> : pd.Timestamp(<span class="string">'20130102'</span>),</div><div class="line">                     <span class="string">'C'</span> : pd.Series(<span class="number">1</span>,index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</div><div class="line">                     <span class="string">'D'</span> : np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">'int32'</span>),</div><div class="line">                     <span class="string">'E'</span> : pd.Categorical([<span class="string">"test"</span>,<span class="string">"train"</span>,<span class="string">"test"</span>,<span class="string">"train"</span>]),</div><div class="line">                     <span class="string">'F'</span> : <span class="string">'foo'</span> &#125;)</div><div class="line"><span class="comment"># 长度无需统一，会自动填充</span></div><div class="line"></div><div class="line"><span class="comment"># 2. 从文件中读取</span></div><div class="line">pd.read_excel(<span class="string">"./data_set.xlsx"</span>,index_col=<span class="keyword">False</span>) <span class="comment"># 关掉 Index</span></div><div class="line"></div><div class="line"><span class="comment"># 3. 合并多个同样的 DataFrame</span></div><div class="line">df_items = [df_item1,df_item2,...]</div><div class="line">final_df = pd.concat(df_items).drop_duplicates()</div><div class="line">final_df.merge(data_set_df, left_on=<span class="string">"lno"</span>, right_on=<span class="string">"rno"</span>, how=<span class="string">"outer"</span>)</div></pre></td></tr></table></figure>
<h3 id="1-2-查看并修改表结构"><a href="#1-2-查看并修改表结构" class="headerlink" title="1.2. 查看并修改表结构"></a>1.2. 查看并修改表结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1. 查看表结构</span></div><div class="line"></div><div class="line">df.head()</div><div class="line">df.tail(<span class="number">3</span>)</div><div class="line">df.index</div><div class="line"><span class="comment"># df.index = ['日期','小时']</span></div><div class="line">df.columns</div><div class="line">df.columns = map(str.lower, df.columns)</div><div class="line"></div><div class="line">df.values</div><div class="line"></div><div class="line">df[<span class="string">'col'</span>] = df[<span class="string">'col'</span>].astype(str).convert_objects(convert_numeric=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># 2. 删除 col_name</span></div><div class="line"></div><div class="line">df.drop([<span class="string">'col_name_1'</span>,<span class="string">'col_name_2'</span>,...,<span class="string">'col_name_N'</span>],inplace=<span class="keyword">True</span>,axis=<span class="number">1</span>,errors=<span class="string">'ignore'</span>)</div><div class="line"></div><div class="line"><span class="keyword">del</span> df[<span class="string">'col'</span>]</div><div class="line"><span class="comment"># 3. 修改元数据</span></div><div class="line">df.rename(columns=<span class="keyword">lambda</span> x: x.split(<span class="string">'.'</span>)[<span class="number">-1</span>], inplace=<span class="keyword">True</span>)</div><div class="line">df.rename(columns=&#123;<span class="string">'oldName1'</span>: <span class="string">'newName1'</span>, <span class="string">'oldName2'</span>: <span class="string">'newName2'</span>&#125;, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">total_rows=len(df.axes[<span class="number">0</span>])</div><div class="line">total_cols=len(df.axes[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment"># 2.</span></div><div class="line"><span class="comment">## 2. 遍历</span></div><div class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows():</div><div class="line">    <span class="keyword">print</span> row[<span class="string">"c1"</span>], row[<span class="string">"c2"</span>]</div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> df.itertuples(index=<span class="keyword">True</span>, name=<span class="string">'Pandas'</span>):</div><div class="line">    <span class="keyword">print</span> getattr(row, <span class="string">"c1"</span>), getattr(row, <span class="string">"c2"</span>)</div><div class="line">= IF([@price] &lt; <span class="number">1</span>, <span class="string">"未知"</span>,IF([@price] &lt; <span class="number">30000</span>, <span class="string">"三万以下"</span>, IF([@price] &lt;= <span class="number">50000</span>, <span class="string">"三万到五万"</span>, IF([@price] &lt;= <span class="number">100000</span>, <span class="string">"五万到十万"</span>, IF([@price] &lt;= <span class="number">10000000</span>, <span class="string">"十万以上"</span>, <span class="string">"其他"</span>)))))</div></pre></td></tr></table></figure>
<h3 id="1-3-修改表内容"><a href="#1-3-修改表内容" class="headerlink" title="1.3. 修改表内容"></a>1.3. 修改表内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h3 id="1-4-查看表内容"><a href="#1-4-查看表内容" class="headerlink" title="1.4. 查看表内容"></a>1.4. 查看表内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 选择</span></div><div class="line">df[<span class="string">'A'</span>] <span class="comment"># 列选</span></div><div class="line">df[<span class="number">0</span>:<span class="number">30</span>] <span class="comment"># 行选</span></div><div class="line">df[<span class="string">'20130102'</span>:<span class="string">'20130104'</span>] <span class="comment"># 行选</span></div><div class="line">df.loc[<span class="string">'20130102'</span>:<span class="string">'20130104'</span>,[<span class="string">'A'</span>,<span class="string">'B'</span>]] <span class="comment"># by label</span></div><div class="line">df.iloc[<span class="number">1</span>:<span class="number">5</span>, <span class="number">2</span>:<span class="number">4</span>] <span class="comment"># by position</span></div><div class="line">df.sample(<span class="number">3000</span>) <span class="comment"># 随机抽取 3000 行，可以用于快速验证算法</span></div><div class="line"></div><div class="line">criterion = df2[<span class="string">'a'</span>].map(<span class="keyword">lambda</span> x: x.startswith(<span class="string">'t'</span>))</div><div class="line">df2[criterion]</div><div class="line"></div><div class="line">df2[[x.startswith(<span class="string">'t'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> df2[<span class="string">'a'</span>]]]</div><div class="line"><span class="comment"># select * from final_df limit 5</span></div><div class="line">final_df.head()</div><div class="line"><span class="comment"># select a,b,c from final_df</span></div><div class="line">final_df[[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]].head()</div><div class="line"><span class="comment"># select a,b,c from final_df where a = 11 and b = 'xx'</span></div><div class="line">final_df[ ( final_df[<span class="string">'a'</span>] == <span class="number">11</span>) &amp; ( final_df[<span class="string">'b'</span>] == <span class="string">'xx'</span>) ][[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]]</div><div class="line">final_df[<span class="string">'a'</span>].value_counts()</div><div class="line"></div><div class="line"><span class="comment"># SELECT * FROM final_df ORDER BY a DESC LIMIT 10 OFFSET 5;</span></div><div class="line">final_df.nlargest(<span class="number">10</span>+<span class="number">5</span>, columns=<span class="string">'a'</span>).tail(<span class="number">10</span>)</div><div class="line"></div><div class="line">df.column.str[<span class="number">0</span>:<span class="number">2</span>]</div><div class="line">df.column_name.str.len()</div><div class="line">two_groups = <span class="string">'(?P&lt;letter&gt;[a-z])(?P&lt;digit&gt;[0-9])'</span></div><div class="line">s.str.extract(two_groups, expand=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># 排序</span></div><div class="line"></div><div class="line">df.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span>)</div><div class="line">df.sort_values(by=<span class="string">'B'</span>)</div><div class="line">df = df.sort([<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>],ascending=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>])</div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="comment"># window function</span></div><div class="line"><span class="comment"># SELECT a, b, c, rank() OVER (PARTITION BY a ORDER BY b DESC) as rn FROM final_df;</span></div><div class="line"><span class="comment"># 如果没有这个 window function 的话，可以 groupby 一下，然后生成表和原有表进行 JOIN</span></div><div class="line">tips.assign(rn=tips.sort_values([<span class="string">'b'</span>], ascending=<span class="keyword">False</span>).groupby([<span class="string">'a'</span>]).cumcount() + <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># Top N rows per group</span></div><div class="line"><span class="comment"># rank 代表等级 如果两人并列第一名，则不存在第二名，直接是第三名 , row_number 代表排名，即即便两个人分数一样，也无法并列第一名</span></div><div class="line"></div><div class="line"><span class="comment"># PostGRESQL's ROW_NUMBER() analytic function</span></div><div class="line">SELECT * FROM (</div><div class="line">  SELECT</div><div class="line">    t.*,</div><div class="line">    ROW_NUMBER() OVER(PARTITION BY day ORDER BY total_bill DESC) AS rn</div><div class="line">  FROM tips t</div><div class="line">) tt</div><div class="line">WHERE rn &lt; <span class="number">3</span></div><div class="line">ORDER BY day, rn;</div><div class="line"></div><div class="line">(tips.assign(rn=tips.sort_values([<span class="string">'total_bill'</span>], ascending=<span class="keyword">False</span>)</div><div class="line">                    .groupby([<span class="string">'day'</span>])</div><div class="line">                    .cumcount() + <span class="number">1</span>)</div><div class="line">     .query(<span class="string">'rn &lt; 3'</span>)</div><div class="line">     .sort_values([<span class="string">'day'</span>,<span class="string">'rn'</span>])</div><div class="line">)</div><div class="line"></div><div class="line">(tips.assign(rnk=tips.groupby([<span class="string">'day'</span>])[<span class="string">'total_bill'</span>]</div><div class="line">                     .rank(method=<span class="string">'first'</span>, ascending=<span class="keyword">False</span>))</div><div class="line">     .query(<span class="string">'rnk &lt; 3'</span>)</div><div class="line">     .sort_values([<span class="string">'day'</span>,<span class="string">'rnk'</span>])</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># PostGRESQL's RANK() analytic function</span></div><div class="line">SELECT * FROM (</div><div class="line">  SELECT</div><div class="line">    t.*,</div><div class="line">    RANK() OVER(PARTITION BY sex ORDER BY tip) AS rnk</div><div class="line">  FROM tips t</div><div class="line">  WHERE tip &lt; <span class="number">2</span></div><div class="line">)</div><div class="line">WHERE rnk &lt; <span class="number">3</span></div><div class="line">ORDER BY sex, rnk;</div><div class="line"></div><div class="line">(tips[tips[<span class="string">'tip'</span>] &lt; <span class="number">2</span>]</div><div class="line">     .assign(rnk_min=tips.groupby([<span class="string">'sex'</span>])[<span class="string">'tip'</span>]</div><div class="line">                         .rank(method=<span class="string">'min'</span>))</div><div class="line">     .query(<span class="string">'rnk_min &lt; 3'</span>)</div><div class="line">     .sort_values([<span class="string">'sex'</span>,<span class="string">'rnk_min'</span>])</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># where 语句</span></div><div class="line">final_df[<span class="string">'a'</span>].isnull()</div><div class="line">final_df[<span class="string">'a'</span>].isin(arr)</div><div class="line"></div><div class="line"><span class="comment"># groupby</span></div><div class="line">final_df.groupby(<span class="string">'a'</span>).size() <span class="comment"># 计算 a</span></div><div class="line">final_df.groupby(<span class="string">'a'</span>)[<span class="string">'b'</span>].count() <span class="comment"># 同上计算 a</span></div><div class="line">final_df.groupby(<span class="string">'a'</span>).count() <span class="comment"># 计算所有 cols</span></div><div class="line">agg_fun_dict = &#123;<span class="string">'tip'</span>: np.mean, <span class="string">'day'</span>: np.size&#125;</div><div class="line">agg_fun_dict_new = &#123;<span class="string">'tip'</span>: [np.mean, np.size]&#125;</div><div class="line">final_df.groupby(<span class="string">'a'</span>)[[<span class="string">'b'</span>,<span class="string">'c'</span>]].agg(agg_fun_dict)</div><div class="line"></div><div class="line">calc_groups = final_df.groupby([date])</div><div class="line">calc_groups[<span class="string">'id_aa'</span>].nunique().reset_index().to_excel(<span class="string">"123.xlsx"</span>)</div><div class="line"></div><div class="line"><span class="comment"># pivot</span></div><div class="line">pd.pivot_table(data=df,values=<span class="string">'value_col'</span>, index=<span class="string">'A_FROM'</span>, columns=<span class="string">'B_TO'</span>, aggfunc=<span class="keyword">lambda</span> x: len(x.unique()),margins=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># CONCAT</span></div><div class="line">append</div><div class="line"><span class="comment"># JOIN</span></div><div class="line">pd.merge(df1, df2, on=<span class="string">'key'</span>, how=<span class="string">'outer'</span>)</div><div class="line"></div><div class="line"><span class="comment"># UPDATE tips SET tip = tip*2 WHERE tip &lt; 2;</span></div><div class="line">tips.loc[tips[<span class="string">'tip'</span>] &lt; <span class="number">2</span>, <span class="string">'tip'</span>] *= <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment"># <span class="doctag">TODO:</span></span></div></pre></td></tr></table></figure>
<h3 id="1-5-表变换"><a href="#1-5-表变换" class="headerlink" title="1.5. 表变换"></a>1.5. 表变换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># apply , apply map</span></div><div class="line">DataFrame.apply operates on entire rows <span class="keyword">or</span> columns at a time.</div><div class="line">DataFrame.applymap, Series.apply, <span class="keyword">and</span> Series.map operate on one element at time.</div></pre></td></tr></table></figure>
<h2 id="0x02-asd"><a href="#0x02-asd" class="headerlink" title="0x02. asd"></a>0x02. asd</h2><h2 id="0x03-asd1"><a href="#0x03-asd1" class="headerlink" title="0x03. asd1"></a>0x03. asd1</h2><h2 id="0x04-Performance-Tips"><a href="#0x04-Performance-Tips" class="headerlink" title="0x04. Performance Tips"></a>0x04. Performance Tips</h2><p>最近遇到了数据量比较大的数据处理，数据条数差不多在 3 千万条。加载到内存中大约 1GB.</p>
<h3 id="4-1-精简行列"><a href="#4-1-精简行列" class="headerlink" title="4.1. 精简行列"></a>4.1. 精简行列</h3><ol>
<li>读入 dataframe 的时候就排除多余的行列。</li>
<li>Merge 时候需要精简行列。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df1.merge(df2[list(<span class="string">'xab'</span>)])</div><div class="line">pandas.merge(dataframe1, dataframe2.iloc[:, [<span class="number">0</span>:<span class="number">5</span>]], how=<span class="string">'left'</span>, on=<span class="string">'key'</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Pandas 相关语句。当然,其中还包含Numpy等数据科学,统计学相关语句.&lt;/p&gt;
&lt;p&gt;主要包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pandas 与 SQL 等价的一些操作&lt;/li&gt;
&lt;li&gt;Pandas 使用过程中的一些细节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫 Crawler" scheme="http://twocucao.xyz/categories/%E7%88%AC%E8%99%AB-Crawler/"/>
    
    
      <category term="Pandas" scheme="http://twocucao.xyz/tags/Pandas/"/>
    
      <category term="效率" scheme="http://twocucao.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="工作自动化" scheme="http://twocucao.xyz/tags/%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
  </entry>
  
  <entry>
    <title>一个基于 TensorFlow 的图片分类器</title>
    <link href="http://twocucao.xyz/2017/05/29/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8ETensorFlow%E7%9A%84%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <id>http://twocucao.xyz/2017/05/29/一个基于TensorFlow的分类器/</id>
    <published>2017-05-29T00:46:00.000Z</published>
    <updated>2017-06-14T10:06:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>这年头，不会写爬虫不会写网站，那基本上不能算是一个 Python 程序员，但是 2017 年的 Google IO 之后，作为一个 Pythonist 你不会点数据分析和机器学习，也不好见人了。<br>所以，本文教你在什么机器学习概念都不懂的情况下，做出一个基于 TensorFlow 的图片分类功能，入个门。仅此而已。<br>本文的代码和文章内容主要源于我在 Github 上无意间翻到的一个 Repo, 链接地址，我所做的功夫就是在这基础上将代码改为了 Python 3 / TensorFlow 1.1.0 的环境，将这个流程梳理一下，不算是代码的生产者最多搬运工，仅此而已。</p>
<p>本文的目的是：</p>
<blockquote>
<p>通过 TensorFlow 训练一个小型的分类器，用这个分类器通过照片识别出明星的姓名。</p>
</blockquote>
<p>即我们要训练一个小 AI, 这个小 AI 能分辨欢乐颂里面的五美：</p>
<ul>
<li>乔欣</li>
<li>刘涛</li>
<li>王子文</li>
<li>杨紫</li>
<li>蒋欣</li>
</ul>
<a id="more"></a>
<p>注意：本文主要在 MacOS 上进行测试。<br>本文的目录结构如下：</p>
<ul>
<li>准备训练数据和测试数据</li>
<li>TensorFlow 环境配置 </li>
<li>开始训练图片</li>
<li>对图片进行分类</li>
<li>文章回顾</li>
<li>参考链接</li>
</ul>
<p>首先克隆我的 Repo,（我的 Repo 在这里)[<a href="https://github.com/twocucao/the-machine" target="_blank" rel="external">https://github.com/twocucao/the-machine</a>] .</p>
<p>仓库结构大致如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">├── README.md</div><div class="line">├── compose</div><div class="line">│   └── tensorflow</div><div class="line">│       ├── Dockerfile</div><div class="line">│       └── Dockerfile-dev</div><div class="line">├── config</div><div class="line">├── doc</div><div class="line">├── image_classifier</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── label_dir.py</div><div class="line">│   ├── label_image.py</div><div class="line">│   ├── retrain.py</div><div class="line">│   └── train.sh</div><div class="line">└── bootstrap.sh</div></pre></td></tr></table></figure></p>
<h2 id="0x01-准备训练数据和测试数据"><a href="#0x01-准备训练数据和测试数据" class="headerlink" title="0x01 准备训练数据和测试数据"></a>0x01 准备训练数据和测试数据</h2><p>准备训练数据，数据从哪里来呢？从百度来。我们从百度抓取大约 5 组图片，每组图片大约 1000 张图片，并且从每组里面留下 900 组作为训练数据，抽出 100 作为测试数据。</p>
<h3 id="1-1-抓取图片"><a href="#1-1-抓取图片" class="headerlink" title="1.1 抓取图片"></a>1.1 抓取图片</h3><p>抓取代码放在代码仓库中，比较简单，下载即可用。</p>
<p>在 crawl_baidu_images.py 中填入五美的姓名，运行脚本即可。<br>脚本会请求百度图片的图片，然后下载下来，程序跑完会有如下的图片数据。<br>好，抓取图片我们就完成了。</p>
<h3 id="1-2-归类训练数据"><a href="#1-2-归类训练数据" class="headerlink" title="1.2 归类训练数据"></a>1.2 归类训练数据</h3><p>归类训练数据，其实就是把刚刚下载下来的图片，分类为五美，也就是把刘涛的照片放到刘涛文件夹中。看一下现在的文件夹，似乎已经分类完毕了，是不是这样呢？显然不是，因为：</p>
<ul>
<li>下载下来的图片貌似 JPG 结尾的图片，但是文件内容是不是 JPEG 的格式就不好说了，也可 GIF 也可能是 PNG.</li>
<li>当你搜索刘涛的时候，百度图片给出的不仅仅是刘涛。也可能有胡歌《琅琊榜》, 也可能有胡军《天龙八部》</li>
</ul>
<p>所以下面需要做的是：</p>
<ol>
<li>移除非 JPG 的文件格式</li>
<li>人工确 (jian) 定 (huang) 文件夹中的图片。</li>
</ol>
<p>在做上面这两步之前，我们先新建文件夹 image_classifier_train ( 笔者放在 /Users/twocucao/Codes/Repos/image_classifier_train ), 注意，这个文件夹不要放在代码下面，把五美的文件夹放到这个文件夹下面的 data 文件夹下。并且用拼音命名。</p>
<p>如下：</p>
<p><img src="http://oriw7hkjj.bkt.clouddn.com/WX20170529-160220@2x.png" alt=""></p>
<p>我们先移除非 JPEG 的图片。如果是 mac 系统需要先安装 jpeginfo , brew install jpeginfo 即可。<br>进入 /Users/twocucao/Codes/Repos/image_classifier_train 执行下面脚本 <strong>去除非 JPG 的图片</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">find . -iname &quot;*.jpg&quot; -exec jpeginfo -c &#123;&#125; \; | grep -E &quot;WARNING|ERROR&quot; &gt; need_delete.sh</div><div class="line">cat need_delete.sh | awk &apos;&#123;print $1&#125;&apos; | xargs rm</div><div class="line">rm need_delete.sh</div></pre></td></tr></table></figure>
<p>好了接下来，我们需要到每一个文件夹下进行人工<del>鉴黄</del>检验图片是不是五美，比如，到 liutao 文件夹下检查，删除图片基本上没有清晰面容的照片。<br>为了速度，我们把图片转成缩略图大致看一下,去除明显不是五美的照片,我们进行下一步的筛选.</p>
<h3 id="1-3-找出对应的头像"><a href="#1-3-找出对应的头像" class="headerlink" title="1.3 找出对应的头像"></a>1.3 找出对应的头像</h3><p>我们需要从图片库中选出五美的头像来</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pyenv global system</div><div class="line"></div><div class="line">brew reinstall boost-python --with-python3 --without-python</div><div class="line">conda install -c menpo dlib=19.4</div></pre></td></tr></table></figure>
<h2 id="0x02-TensorFlow-环境配置"><a href="#0x02-TensorFlow-环境配置" class="headerlink" title="0x02 TensorFlow 环境配置"></a>0x02 TensorFlow 环境配置</h2><h3 id="2-1-Docker-的安装和镜像加速"><a href="#2-1-Docker-的安装和镜像加速" class="headerlink" title="2.1 Docker 的安装和镜像加速"></a>2.1 Docker 的安装和镜像加速</h3><p>本文需要使用 Docker 作为环境配置，也正是因为如此，我们可以在很快的时间内搭建起来 tensorflow 的运行环境。目测，Docker 也是未来几年内搭建环境分发环境的首选。<br>Docker 下载不必多说，需要补充一句的是，我们可以在阿里云账户上使用一个 registry 对 Docker 镜像进行加速。<br>在阿里云的容器界面获取加速链接填到 docker 里面即可。如图。</p>
<p><img src="http://oriw7hkjj.bkt.clouddn.com/WX20170529-162953@2x.png" alt=""></p>
<h3 id="2-2-构建镜像文件并且构建镜像"><a href="#2-2-构建镜像文件并且构建镜像" class="headerlink" title="2.2 构建镜像文件并且构建镜像"></a>2.2 构建镜像文件并且构建镜像</h3><p>建议在执行构建镜像之前，务必先完成本文的第二小节的图片准备。然后执行下面的命令，将镜像文件构建成镜像。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /Users/twocucao/Codes/Repos/the-machine</div><div class="line">docker build <span class="_">-f</span> compose/tensorflow/Dockerfile-dev -t twocucao/tensorflow .</div></pre></td></tr></table></figure></p>
<p>该行命令使用 compose/tensorflow/Dockerfile-dev 作为 Dockerfile 文件，构建镜像名称为 twocucao/tensorflow , 传入的 context 为 当前路径。</p>
<h3 id="2-3-测试-Tensorflow-容器"><a href="#2-3-测试-Tensorflow-容器" class="headerlink" title="2.3 测试 Tensorflow 容器"></a>2.3 测试 Tensorflow 容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run -it twocucao/tensorflow /bin/bash</div><div class="line"><span class="built_in">echo</span> <span class="string">'hello tensorflow'</span></div></pre></td></tr></table></figure>
<p>如果运行正常，则一切正常。可以进行下一步骤了。</p>
<h2 id="0x03-开始训练"><a href="#0x03-开始训练" class="headerlink" title="0x03 开始训练"></a>0x03 开始训练</h2><p>执行命令开始训练。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./train.sh /Users/twocucao/Codes/Repos/image_classifier_train</div></pre></td></tr></table></figure>
<p>我设置的训练次数为 20000, 在我的本子上基本两个小时，可能时间有些长，没有耐心的童鞋可以吧训练次数调整低一些。然后重新构建镜像。</p>
<blockquote>
<p>那么，当 TensorFlow 在训练的时候，我们要谈些什么？</p>
</blockquote>
<p>Google 开源了 Inception 模型，这个模型从 ImageNet 的上千个分类的图片训练而来，而我们所做的工作，便是在此基础上做最后的增量训练。然而，我们只用来区分女明星，似乎这个 Inception 的模型有点大材小用？<br>好，训练结束之后我们查看一下文件夹 /Users/twocucao/Codes/Repos/image_classifier_train 下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">├── bottlenecks</div><div class="line">│   ├── jiangxin</div><div class="line">│   ├── liutao</div><div class="line">│   ├── qiaoxin</div><div class="line">│   ├── wangziwen</div><div class="line">│   └── yangzi</div><div class="line">├── data</div><div class="line">│   ├── jiangxin</div><div class="line">│   ├── liutao</div><div class="line">│   ├── qiaoxin</div><div class="line">│   ├── wangziwen</div><div class="line">│   └── yangzi</div><div class="line">├── inception</div><div class="line">│   ├── LICENSE</div><div class="line">│   ├── classify_image_graph_def.pb</div><div class="line">│   ├── cropped_panda.jpg</div><div class="line">│   ├── imagenet_2012_challenge_label_map_proto.pbtxt</div><div class="line">│   ├── imagenet_synset_to_human_label_map.txt</div><div class="line">│   └── inception-2015-12-05.tgz</div><div class="line">├── retrained_graph.pb</div><div class="line">├── retrained_labels.txt</div><div class="line">└── test_data</div><div class="line">    ├── src</div><div class="line">    └── target</div></pre></td></tr></table></figure></p>
<p>Bottlenecks 文件夹为我们将每一张 JPG 转成矩阵的文本<br>Inception 为 Google 开源的模型文件。<br>retrained_graph.pb 为训练出来的图的模型文件。<br>retrained_labels.txt 为标签。</p>
<p>如下图不断刷出的一坨坨的文字是什么呢?</p>
<ul>
<li>时间 , 无需多说</li>
<li>当前训练次数</li>
<li>Train accuracy = 87.0%</li>
<li>Cross entropy = 0.499145</li>
<li>Validation accuracy = 52.0% (N=100)</li>
</ul>
<p>看到 Train accuracy &gt;&gt; Validation accuracy 估计是模型过度拟合了,嗯,看来这个模型还是有点问题的.</p>
<h2 id="0x04-对图片进行分类"><a href="#0x04-对图片进行分类" class="headerlink" title="0x04 对图片进行分类"></a>0x04 对图片进行分类</h2><h3 id="4-1-开始分类"><a href="#4-1-开始分类" class="headerlink" title="4.1 开始分类"></a>4.1 开始分类</h3><h3 id="4-2-对分类结果进行评估"><a href="#4-2-对分类结果进行评估" class="headerlink" title="4.2 对分类结果进行评估"></a>4.2 对分类结果进行评估</h3><h2 id="0x05-文章回顾"><a href="#0x05-文章回顾" class="headerlink" title="0x05 文章回顾"></a>0x05 文章回顾</h2><h2 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h2><ul>
<li><a href="https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/index.html" target="_blank" rel="external">https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/index.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;这年头，不会写爬虫不会写网站，那基本上不能算是一个 Python 程序员，但是 2017 年的 Google IO 之后，作为一个 Pythonist 你不会点数据分析和机器学习，也不好见人了。&lt;br&gt;所以，本文教你在什么机器学习概念都不懂的情况下，做出一个基于 TensorFlow 的图片分类功能，入个门。仅此而已。&lt;br&gt;本文的代码和文章内容主要源于我在 Github 上无意间翻到的一个 Repo, 链接地址，我所做的功夫就是在这基础上将代码改为了 Python 3 / TensorFlow 1.1.0 的环境，将这个流程梳理一下，不算是代码的生产者最多搬运工，仅此而已。&lt;/p&gt;
&lt;p&gt;本文的目的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过 TensorFlow 训练一个小型的分类器，用这个分类器通过照片识别出明星的姓名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即我们要训练一个小 AI, 这个小 AI 能分辨欢乐颂里面的五美：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;乔欣&lt;/li&gt;
&lt;li&gt;刘涛&lt;/li&gt;
&lt;li&gt;王子文&lt;/li&gt;
&lt;li&gt;杨紫&lt;/li&gt;
&lt;li&gt;蒋欣&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>VSCode CheatSheet</title>
    <link href="http://twocucao.xyz/2017/05/27/VSCodeCheatSheet/"/>
    <id>http://twocucao.xyz/2017/05/27/VSCodeCheatSheet/</id>
    <published>2017-05-27T00:46:00.000Z</published>
    <updated>2017-05-27T01:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我使用 VSCode 的一些开发小技巧。</p>
<p>不定期更新。</p>
<a id="more"></a>
<p>VSCode 是一种编辑器，这显然是一句废话。</p>
<p>这个问题应该是，我为什么要使用 VSCode 作为主力编辑器。有人说：微软出品一定是精品。这个理由很软粉，但是不能打动我更换编辑器的欲望。</p>
<p>使用编辑器自然是求其轻量，高效的文字处理，以及编程的相关环境的支持，以及跨平台和可扩展性。</p>
<ul>
<li><strong>轻量</strong>是求其打开速度快，编辑不卡顿。这一点，用 Vim , Emacs , Sublime Text 完全都可以。</li>
<li><strong>高效的文字处理</strong>是因为满足日常编写文字和代码的需求。</li>
<li><strong>编程相关环境的支持</strong>是因为作为一个学习东西很杂乱的人来说，最痛苦的事情就在于 IDE 常常来不及给一些新技术予以足够的支持，比如说 Docker, 比如说 ansible。</li>
<li><strong>跨平台和可扩展性</strong> 跨平台是必须的，可扩展性则是从插件资源和编写插件的难度考虑。</li>
</ul>
<p>本文的目录结构如下：</p>
<ul>
<li>VSCode 常用命令</li>
</ul>
<h2 id="0x01-VSCode-相关配置"><a href="#0x01-VSCode-相关配置" class="headerlink" title="0x01 VSCode 相关配置"></a>0x01 VSCode 相关配置</h2><p>安装完毕之后，cmd-s-p shell command install</p>
<h2 id="0x02-VSCode-常用命令"><a href="#0x02-VSCode-常用命令" class="headerlink" title="0x02 VSCode 常用命令"></a>0x02 VSCode 常用命令</h2><ul>
<li><strong>Command Palette</strong> : cmd-s-p</li>
<li><strong>cmd-p</strong> : cmd-p</li>
<li><strong>显示状态</strong> : cmd-s-m</li>
<li><strong>下一个错误</strong> : F8 / shift-F8</li>
<li><em>**</em> : c-s-p</li>
<li><em>**</em> : c-s-p</li>
<li><em>**</em> : c-s-p</li>
<li><em>**</em> : c-s-p</li>
<li><em>**</em> : c-s-p</li>
<li><em>**</em> : c-s-p</li>
<li><em>**</em> : c-s-p<h2 id="0x03-VS-扩展相关"><a href="#0x03-VS-扩展相关" class="headerlink" title="0x03 VS 扩展相关"></a>0x03 VS 扩展相关</h2></li>
</ul>
<h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我使用 VSCode 的一些开发小技巧。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Docker CheatSheet</title>
    <link href="http://twocucao.xyz/2017/05/21/DockerCheatSheet/"/>
    <id>http://twocucao.xyz/2017/05/21/DockerCheatSheet/</id>
    <published>2017-05-21T02:57:00.000Z</published>
    <updated>2017-06-10T02:23:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Docker 相关和命令。</p>
<ul>
<li>Docker 相关概念</li>
<li>Docker 配套工具</li>
<li>Django PostgreSQL RabbitMQ Redis ElasticSearch Sentry 集群 Docker 化</li>
<li>Docker 踩坑记录</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>
<h2 id="0x01-Docker-相关概念"><a href="#0x01-Docker-相关概念" class="headerlink" title="0x01 Docker 相关概念"></a>0x01 Docker 相关概念</h2><h3 id="1-1-Docker-是什么？"><a href="#1-1-Docker-是什么？" class="headerlink" title="1.1 Docker 是什么？"></a>1.1 Docker 是什么？</h3><p>在认知 Docker 这种相对而言比较新概念的时候，只要从以往的经验中拿出一个词语来概括新词汇即可。</p>
<p>于是，我们便可以这么理解：</p>
<blockquote>
<p>Docker 是一种比虚拟机轻量的用来存放职责比较单一的应用的容器。</p>
</blockquote>
<p>也就是三点：</p>
<ul>
<li>比虚拟机轻量</li>
<li>用来存放职责单一的应用</li>
<li>容器</li>
</ul>
<p>显然这是一种理解，而不是一种定义。</p>
<h3 id="1-2-Docker-是用来做什么的？"><a href="#1-2-Docker-是用来做什么的？" class="headerlink" title="1.2 Docker 是用来做什么的？"></a>1.2 Docker 是用来做什么的？</h3><p>新技术本质是什么？工具也。<br>每一个新的技术都是为了提升效率才被创造出来，那么，究竟 Docker 可以从哪些方面提升我们的效率呢？</p>
<p>我们知道开发一个有些规模的网站的话，需要严格遵守如下的开发流程：</p>
<ul>
<li>编码</li>
<li>测试</li>
<li>集成到系统中</li>
<li>部署</li>
</ul>
<p>但如果人员比较多，则会出现问题，有的人喜欢用 MacOS, 有的人喜欢用 Ubuntu, 开发测试环境怎么统一呢？如果开发人员明明使用的是某个版本的 PostgreSQL, 用了最新的功能，但是测试和运维用的就是老版本的功能怎么办？</p>
<p>部署环境也会有问题，比如，开发部突然想使用更高版本的软件，比如突然需要更多的 Django 应用来负担海量请求的怎么办？Hadoop 不够用怎么办？</p>
<p>当然，思路很简单，开发的时候使用虚拟机，拷贝给大家一起用，部署的时候多创建一些机器，然后上 Ansible 远程操控。即可。</p>
<p>并不是不行，但是 Docker 由于更加轻量，操作粒度更加细腻，我可以销毁镜像，上传镜像，定制镜像，很轻松调整镜像包并且安装挂载文件。</p>
<h2 id="0x02-Docker-配套工具"><a href="#0x02-Docker-配套工具" class="headerlink" title="0x02 Docker 配套工具"></a>0x02 Docker 配套工具</h2><h2 id="0x03-Django-技术栈-Docker-化"><a href="#0x03-Django-技术栈-Docker-化" class="headerlink" title="0x03 Django 技术栈 Docker 化"></a>0x03 Django 技术栈 Docker 化</h2><h2 id="0x04-Docker-踩坑记录"><a href="#0x04-Docker-踩坑记录" class="headerlink" title="0x04 Docker 踩坑记录"></a>0x04 Docker 踩坑记录</h2><h3 id="4-1-PostgreSQL-的初始化"><a href="#4-1-PostgreSQL-的初始化" class="headerlink" title="4.1 PostgreSQL 的初始化"></a>4.1 PostgreSQL 的初始化</h3><p>当 Docker 化 PostgreSQL 的时候，必须要把一些初始化脚本放在 docker-entrypoint-initdb.d 中，才能初始化，笔者在进行测试的时候多次发现无法进行初始化，究其原因，经过查找，如果没有及时删除 Volume 的话，则无论怎么初始化，或者 Build, 每一次都会挂载原来的文件夹。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ADD init_django_db.sh /docker-entrypoint-initdb.d/init_django_db.sh</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Docker 相关和命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 相关概念&lt;/li&gt;
&lt;li&gt;Docker 配套工具&lt;/li&gt;
&lt;li&gt;Django PostgreSQL RabbitMQ Redis ElasticSearch Sentry 集群 Docker 化&lt;/li&gt;
&lt;li&gt;Docker 踩坑记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库与消息队列" scheme="http://twocucao.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>MacBook Pro 15.4 Multi-Touch Bar</title>
    <link href="http://twocucao.xyz/2017/05/01/OhMyNewMac/"/>
    <id>http://twocucao.xyz/2017/05/01/OhMyNewMac/</id>
    <published>2017-05-01T13:45:00.000Z</published>
    <updated>2017-05-07T05:55:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个月前换了这台新电脑 MacBook Pro 15.4 Multi-Touch Bar (Core i7/16GB/512GB)，感觉每天打字都很舒服，也算是实现了一个梦寐以求的小目标吧。<br><a id="more"></a></p>
<p>在此之前，用我的<strong>前任</strong>有下面几款：</p>
<ul>
<li>大一时候从网吧买的 400 块钱的台式机</li>
<li>大一时候从淘宝买的 700 块钱的笔记本</li>
<li>大二上学期买的 1200 块钱的笔记本</li>
<li>大三上学期买的 3200 块钱的笔记本，后来花了 2000 块升级了一下下</li>
<li>大四上学期买的 5000 块的二手 MacBook Pro</li>
</ul>
<p>后来手贱买了降噪耳机，机械键盘，手机，pad , 这些都没有花家人的钱。</p>
<p>能把一手烂牌打出不错的结果，这才是让人自豪的事情啊！</p>
<p>晚安，以及劳动节快乐。</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>2017-05-01: 初始化本文的开头</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一个月前换了这台新电脑 MacBook Pro 15.4 Multi-Touch Bar (Core i7/16GB/512GB)，感觉每天打字都很舒服，也算是实现了一个梦寐以求的小目标吧。&lt;br&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="效率" scheme="http://twocucao.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="碎碎念" scheme="http://twocucao.xyz/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="编程工具" scheme="http://twocucao.xyz/tags/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>『Fluent Python』读书笔记</title>
    <link href="http://twocucao.xyz/2017/04/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_FluentPython/"/>
    <id>http://twocucao.xyz/2017/04/18/读书笔记_FluentPython/</id>
    <published>2017-04-18T12:16:37.000Z</published>
    <updated>2017-06-11T15:04:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Fluent Python 适用于中级 Pythoner。</p>
<blockquote>
<p>以 Python 作为主力编程语言已经 1 年多了，读这本书，希望写的代码可以更加的 Pythonic。</p>
</blockquote>
<a id="more"></a>
<h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><h2 id="本书结构"><a href="#本书结构" class="headerlink" title="本书结构"></a>本书结构</h2><ul>
<li>P1. Prologue<ul>
<li>C01. The Python Data Model<ul>
<li>A Pythonic Card Deck</li>
<li>How Special Methods Are Used</li>
<li>Overview of Special Methods</li>
<li>Why len Is Not a Method</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P2. Data Structure<ul>
<li>C02. An Array of Sequences<ul>
<li>Overview of Built-in Sequences</li>
<li>List Comprehensions and Generator Expressions</li>
<li>Tuples Are Not Just Immutable Lists</li>
<li>Slicing</li>
<li>Using plus and star with Sequences</li>
<li>Augmented Assignment with Sequences</li>
<li>list.sort and the sorted Built-In Function</li>
<li>Managing Ordered Sequences with bisect</li>
<li>When a List Is Not the Answer</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C03. Dictionaries and Sets<ul>
<li>Generic Mapping Types</li>
<li>Dict Comprehensions</li>
<li>Common Mapping Methods</li>
<li>Mappings with Flexiable Key Lookup</li>
<li>Variations of Dict</li>
<li>Subclassing UserDict</li>
<li>Immutable Mappings</li>
<li>Set Theory</li>
<li>Dict and Set Under the Hood</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C04. Text VS Bytes<ul>
<li>Character Issues</li>
<li>Byte Essentials</li>
<li>Basic Encoders/Decoders</li>
<li>Understanding Encode/Decode Problems</li>
<li>Handling Text Files</li>
<li>Normalizng Unicode for Saner Comparisons</li>
<li>Sorting Unicode Text</li>
<li>The Unicode Database</li>
<li>Dual-Mode str and bytes APIs</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P3. Function as Objects<ul>
<li>C05. First-Class Function<ul>
<li>Treating a Function Like an Object</li>
<li>Higher-Order Functions</li>
<li>Anonymous Functions</li>
<li>The Seven Flavors of Callable Objects</li>
<li>User-Defined Callable Types</li>
<li>Function Introspection</li>
<li>From Positional to Keyword-Only Parameters</li>
<li>Function Annotations</li>
<li>Packages for Functional Programming</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C06. Design Patterns with First-Class Functions<ul>
<li>Refactoring Strategy</li>
<li>Command</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C07. Function Decorators and Closures<ul>
<li>Decorators 101</li>
<li>When Python Executes Decorators</li>
<li>Decorator-Enhanced Strategy Pattern</li>
<li>Variable Scope Rules</li>
<li>Closures</li>
<li>The nonlocal Declaration</li>
<li>Implementing a Simple Decorator</li>
<li>Decorators In the Standard Library</li>
<li>Stacked Decorators</li>
<li>Parameterized Decorators</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P4. Object-Oriented Idioms<ul>
<li>C08. Object References, Mutability, and Recycling<ul>
<li>Variables Are Not Boxes</li>
<li>Identity, Equality , and Aliases</li>
<li>Copies Are Shallow by Default</li>
<li>Function Parameters as References</li>
<li>del and Garbage Collection</li>
<li>Weak References</li>
<li>Tricts Python Plays with Immutables</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C09. A Pythonic Object<ul>
<li>Object Representations</li>
<li>Vector Class Redux</li>
<li>An Alternative Constructor</li>
<li>classmethod VS staticmethod</li>
<li>Formatted Displays</li>
<li>A Hashable Vector2d</li>
<li>Private and “Protected” Attributes in Python</li>
<li>Saving Space with the slots Class Attribute</li>
<li>Overriding Class Attributes</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C10. Sequence Hacking , Hashing , and Slicing<ul>
<li>Vector: A User-Defined Sequence Type</li>
<li>Vector Take #1: Vector2d Compatible</li>
<li>Protocols and Duck Typing</li>
<li>Vector Take #2: A Sliceable Sequence</li>
<li>Vector Take #3: Dynamic Attribute Access</li>
<li>Vector Take #4: Hashing and a Faster ==</li>
<li>Vector Take #5: Formatting</li>
<li>Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C11. Interfaces: From Protocols to ABCs<ul>
<li>Interfaces and Protocols in Python Culture</li>
<li>Python Digs Sequences</li>
<li>Monkey-Patching to Implement a Protocol at Runtime</li>
<li>Alex Martelli’s Waterfowl</li>
<li>Subclassing an ABC</li>
<li>ABCs in the Standard Library</li>
<li>Defining and Using an ABC</li>
<li>How the Tombola Subclasses Were Tested</li>
<li>Usage of register in Practice</li>
<li>Geese Can Behave as Ducks</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C12. Inheritance: For Good or For Worse<ul>
<li>Subclassing Built-In Types Is Tricty</li>
<li>Multiple Inheritance and Method Resolution Order</li>
<li>Multiple Inheritance in the Real World</li>
<li>Coping with Multiple Inheritance</li>
<li>A Modern Example: Mixins in Django Generic Views</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C13. Operator Overloading: Doing It Right<ul>
<li>Operator Overloading 101</li>
<li>Unary Operators</li>
<li>Overloading plus for Verctor Addtion</li>
<li>Overloading star for Scalar Multiplication</li>
<li>Rich Comparison Operators</li>
<li>Augmented Assignment Operator</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P5. Control Flow<ul>
<li>C14. Iterables, Iterators , and Generators<ul>
<li>Sentence Take #1 : A Sequence of Words Iterables VS Iterators</li>
<li>Iterables Versus Itertors</li>
<li>Sentence Take #2 : A Classic Iterator</li>
<li>Sentence Take #3 : A Generator Function</li>
<li>Sentence Take #4 : A Lazy Implementation</li>
<li>Sentence Take #5 : A Generator Expression</li>
<li>Generator Expressions : When to Use Them</li>
<li>Another Example : Arithmetic Progression Generator</li>
<li>Generator Functions in the Standard Library</li>
<li>New Syntax In Python 3.3 : yield from</li>
<li>Iterable Reducing Functions</li>
<li>A Closer Look at the iter Function</li>
<li>Case Study : Generators in a Databse Conversion Utility</li>
<li>Generators as Coroutines</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C15. Context Managers and else Blocks<ul>
<li>Do This , Then That: else Blocks Beyond if</li>
<li>Context Managers and with Blocks</li>
<li>The contextlib Utilities</li>
<li>Using @contextmanager</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C16. Coroutines<ul>
<li>How Coroutines Evolved from Generators</li>
<li>Basic Behavior of a Generator Used as a Coroutine</li>
<li>Example: Coroutine to Compute a Running Average</li>
<li>Decorators for Conroutine Priming</li>
<li>Coroutine Termination and Exception Handing</li>
<li>Returning a Value from a Coroutine</li>
<li>Using Yield from</li>
<li>The Meaning of yield from</li>
<li>Use Case: Coroutines for Discrete Event Simulation</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C17. Concurrency with Futures<ul>
<li>e.g. Web Downloads in Three Styles</li>
<li>Blocking I/O and the GIL</li>
<li>Launching Processes with concurrent.futures</li>
<li>Experimenting with Executor.map</li>
<li>Downloads with Progress Display and Error Handling</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C18. Concurrency with asyncio<ul>
<li>Thread VS Coroutine : A Comparison</li>
<li>Downloading with asyncio and aiohttp</li>
<li>Running Circling Around Blocking Calls</li>
<li>Enhancing the asyncio downloader Script</li>
<li>From Callbacks to Futures and Coroutines</li>
<li>Writing asyncio Servers</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
<li>P6. Metaprogramming<ul>
<li>C19. Dynamic Attributes and Properties<ul>
<li>Data Wrangling with Dynamic Attributes</li>
<li>Using a Property for Attribute Validation</li>
<li>A Proper Look at Properties</li>
<li>Coding a Property Factory</li>
<li>Handling Attribute Deletion</li>
<li>Essential Attributes and Functions For Attribute Handling</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C20. Attribute Descriptors<ul>
<li>Desciptor Example: Attribute Validation</li>
<li>Overriding VS Nonoverriding Descriptors</li>
<li>Methods Are Descriptors</li>
<li>Descriptor Usage Tips</li>
<li>Descriptor docstring and Overriding Deletion</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
<li>C21. Class Metaprogramming<ul>
<li>A Class Factory</li>
<li>A Class Decorator for Customizing Descriptors</li>
<li>What Happens When: Import Time VS Runtime</li>
<li>Metaclasses 101</li>
<li>A Metaclass for Customizing Descriptors</li>
<li>The Metaclass prepare Special Method</li>
<li>Classes as Objects</li>
<li>Chapter Summary</li>
<li>Further Reading</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="P1-Prologue"><a href="#P1-Prologue" class="headerlink" title="P1. Prologue"></a>P1. Prologue</h2><p>序言部分讲了很重要的一点，Python 最优秀的地方就是其统一性。</p>
<p>Pythonic 体现在使用的 Python Data Model 来表述，其途径主要编写<strong>特殊方法 (Special/Magic Method)</strong></p>
<ul>
<li>Iteration</li>
<li>Collections</li>
<li>Attribute access</li>
<li>Operator overloading</li>
<li>Function and method invocation</li>
<li>Object creation and destruction</li>
<li>String representation and formatting</li>
<li>Managed contexts (i.e., with blocks)</li>
</ul>
<h3 id="C01-The-Python-Data-Model"><a href="#C01-The-Python-Data-Model" class="headerlink" title="C01. The Python Data Model"></a>C01. The Python Data Model</h3><p>扩展阅读：<a href="http://zopeinterface.readthedocs.io/en/latest/" target="_blank" rel="external">http://zopeinterface.readthedocs.io/en/latest/</a></p>
<h4 id="A-Pythonic-Card-Deck"><a href="#A-Pythonic-Card-Deck" class="headerlink" title="A Pythonic Card Deck"></a>A Pythonic Card Deck</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#### 1. 案例一：纸牌 nametuple</span></div><div class="line">Card = collections.namedtuple(<span class="string">'Card'</span>, [<span class="string">'rank'</span>, <span class="string">'suit'</span>])</div><div class="line"><span class="comment"># Card 是一个类</span></div><div class="line"><span class="comment"># 重载到 Cards(object) 的 __init__ , __len__ , __getitem__</span></div><div class="line"><span class="comment"># 重载可以之后可以使用 [] 语法 ( [0] [-1] random.choice(cards) [:3] [12::13] for in sorted reversed,sorted(cards, key=calc_score) card in cards ),</span></div><div class="line"><span class="comment"># 还可以重载 __setitem__, 之后就可以 shuffle</span></div><div class="line"><span class="comment"># 重载 __repr__ , __abs__ , __bool__ , __add__ , __mul__ 可以 repr() abs() bool() + *</span></div></pre></td></tr></table></figure>
<h4 id="How-Special-Methods-Are-Used"><a href="#How-Special-Methods-Are-Used" class="headerlink" title="How Special Methods Are Used"></a>How Special Methods Are Used</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">obj.__len__()</div><div class="line">len()</div><div class="line"></div><div class="line">obj.__</div></pre></td></tr></table></figure>
<h4 id="Overview-of-Special-Methods"><a href="#Overview-of-Special-Methods" class="headerlink" title="Overview of Special Methods"></a>Overview of Special Methods</h4><p>对于内置类型 (list, str , bytearray) 解释器在调用特殊方法的时候调用 C 库，比如 CPython 实现的 len 方法一般直接会调用 PyVarObject C Struct ob_size</p>
<p>特殊方法往往并不是显示调用，而是被隐式调用。比如 init 在 new 中的作用，比如 for item in items 世界上会调用 iter(items), 这也会隐式调用 items.<strong>iter</strong>() .</p>
<p>一般当大量使用特殊方法的时候，都是在进行元编程。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bool(x) 先调用 x.__bool__() , 如果 x.__bool__() 没有实现，则调用 x.__len__(), 如果为 <span class="number">0</span> 则返回 <span class="keyword">False</span></div><div class="line">sorted(arr) 可以直接返回 arr，arr.sort() 是排序内部。</div></pre></td></tr></table></figure>
<p>特殊方法名 （有操作符）</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>方法名</th>
</tr>
</thead>
<tbody>
<tr>
<td>String/Bytes</td>
<td>repr , str , format , bytes</td>
</tr>
<tr>
<td>Conversion to number</td>
<td>abs , bool , complex , init , float , hash , index</td>
</tr>
<tr>
<td>Emulating collections</td>
<td>len , getitem , setitem , delitem , contains</td>
</tr>
<tr>
<td>Iteration</td>
<td>iter, reversed , next</td>
</tr>
<tr>
<td>Emulating callables</td>
<td>call</td>
</tr>
<tr>
<td>Context management</td>
<td>enter, exit</td>
</tr>
<tr>
<td>Instance creation &amp; destruction</td>
<td>new , init , del</td>
</tr>
<tr>
<td>Attribute management</td>
<td>getattr , getattribute , setattr , delattr, dir</td>
</tr>
<tr>
<td>Attribute descriptors</td>
<td>get , set ,delete</td>
</tr>
<tr>
<td>Class service</td>
<td>prepare , instancecheck , subclasscheck</td>
</tr>
</tbody>
</table>
<p>特殊方法名 （无操作符）</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>方法名</th>
</tr>
</thead>
<tbody>
<tr>
<td>Unary numeric operators</td>
<td>neg  , pos  , abs</td>
</tr>
<tr>
<td>Rich comparison operators</td>
<td>lt  , le  , eq  , ne  , gt  , ge</td>
</tr>
<tr>
<td>Arithmetic operators</td>
<td>add  ,sub  , mul  ,truediv  ,floordiv  ,mod , divmod , pow , round round</td>
</tr>
<tr>
<td>Reversed arithmetic operators</td>
<td>radd , rsub , rmul , rtruediv, rfloordiv , rmod , rdivmod, rpow</td>
</tr>
<tr>
<td>Augmented assignment mathmatic</td>
<td>iadd , isub , imul , itruediv, ifloordiv</td>
</tr>
<tr>
<td>Bitwise operators</td>
<td>invert  , lshift  , rshift  , and  , or</td>
</tr>
<tr>
<td>Reversed bitwise operators</td>
<td>rlshift , rrshift , rand , rxor , ror</td>
</tr>
<tr>
<td>Augmented assignment bitwise</td>
<td>ilshift , irshift , iand , ixor , ior</td>
</tr>
</tbody>
</table>
<h4 id="Why-len-Is-Not-a-Method"><a href="#Why-len-Is-Not-a-Method" class="headerlink" title="Why len Is Not a Method"></a>Why len Is Not a Method</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">因为对 不同类型并不是一定调用 __len__ , 对于基本类型查看 c struct 中长度，对于其他类型直接调用 __len__ , 这种区分对待</div></pre></td></tr></table></figure>
<h2 id="P2-Data-Structure"><a href="#P2-Data-Structure" class="headerlink" title="P2. Data Structure"></a>P2. Data Structure</h2><h3 id="C02-An-Array-of-Sequences"><a href="#C02-An-Array-of-Sequences" class="headerlink" title="C02. An Array of Sequences"></a>C02. An Array of Sequences</h3><p>Strings, lists, byte se‐ quences, arrays, XML elements, and database results share a rich set of common oper‐ ations including iteration, slicing, sorting, and concatenation.</p>
<h4 id="Overview-of-Built-in-Sequences"><a href="#Overview-of-Built-in-Sequences" class="headerlink" title="Overview of Built-in Sequences"></a>Overview of Built-in Sequences</h4><p>C 实现的按照 item 是否为同一类型分为：</p>
<ul>
<li><strong>Container sequences</strong>:  list, tuple, and collections.deque can hold items of different types.</li>
<li><strong>Flat sequences</strong>: str, bytes, bytearray, memoryview, and array.array hold items of one type.</li>
</ul>
<p>C 实现按照 item 是否可修改分为：</p>
<ul>
<li><strong>Mutable sequences</strong>: list, bytearray, array.array, collections.deque, and memoryview</li>
<li><strong>Immutable sequences</strong>: tuple, str, and bytes</li>
</ul>
<h4 id="List-Comprehensions-and-Generator-Expressions"><a href="#List-Comprehensions-and-Generator-Expressions" class="headerlink" title="List Comprehensions and Generator Expressions"></a>List Comprehensions and Generator Expressions</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">new_items = [func(a) <span class="keyword">for</span> item <span class="keyword">in</span> items]</div><div class="line">new_items = [ str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">new_items = list(map(str,list(filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> , list(range(<span class="number">100</span>))))))</div><div class="line"><span class="comment"># 可写成</span></div><div class="line">new_items = list(map(str,filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> , range(<span class="number">100</span>))))</div></pre></td></tr></table></figure>
<p>list 往往和 map filter 以及 listcomp 用于创建简单的序列</p>
<h4 id="Tuples-Are-Not-Just-Immutable-Lists"><a href="#Tuples-Are-Not-Just-Immutable-Lists" class="headerlink" title="Tuples Are Not Just Immutable Lists"></a>Tuples Are Not Just Immutable Lists</h4><ul>
<li>解包赋值</li>
<li>不要手贱加逗号</li>
<li><p>下划线可以用作临时变量 （但是 django 中下划线用于中英文）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a, b, *rest = range(<span class="number">5</span>) <span class="comment"># (0, 1, [2, 3, 4])</span></div><div class="line">a, b, *rest = range(<span class="number">3</span>) <span class="comment"># (0, 1, [2])</span></div><div class="line">a, b, *rest = range(<span class="number">2</span>) <span class="comment"># (0, 1, [])</span></div><div class="line"></div><div class="line">a, *body, c, d = range(<span class="number">5</span>) <span class="comment"># (0, [1, 2], 3, 4)</span></div><div class="line">*head, b, c, d = range(<span class="number">5</span>) <span class="comment"># ([0, 1], 2, 3, 4)</span></div></pre></td></tr></table></figure>
</li>
<li><p>namedtuple</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">City = namedtuple(<span class="string">'City'</span>, <span class="string">'name country population coordinates'</span>)</div><div class="line">tokyo = City(<span class="string">'Tokyo'</span>, <span class="string">'JP'</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>))</div><div class="line">tokyo.population</div><div class="line">tokyo.coordinates</div><div class="line">tokyo[<span class="number">1</span>]</div><div class="line">City._fields <span class="comment"># tuple</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Slicing"><a href="#Slicing" class="headerlink" title="Slicing"></a>Slicing</h4><p>为何 Slice 和 Range 会排除 最后一个 Item?</p>
<p>书中讲的太复杂，其实这个和尺子是一个作用，尺子从 0 刻度开始，这样方便丈量。</p>
<p>比如说：</p>
<ul>
<li>items[0:10] 为 10 厘米</li>
<li>items[10] 为 10 刻度后一个单位，即 items[10:11]</li>
<li>items[2:] 为 2 刻度后面若干个单位</li>
<li>items[::3] 以三为单位，从 0 刻度开始，最后为结尾，每三个</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a[i, j] # 调用 a.__getitem__((i, j))</div></pre></td></tr></table></figure>
<h4 id="Augmented-Assignment-with-Sequences"><a href="#Augmented-Assignment-with-Sequences" class="headerlink" title="Augmented Assignment with Sequences"></a>Augmented Assignment with Sequences</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">对于不可变类型 赋值 l *= <span class="number">2</span> 在内存中则是创建了新的两个长度的元祖，然后赋值</div><div class="line">而由于字符串则需要注意，str_a += <span class="string">"str b"</span> , 虽然为不可变变量，但并不需要拷贝整个字符串（特殊情况）, 但字符串的拼接建议还是<span class="string">""</span>.join()</div><div class="line"></div><div class="line">t = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</div><div class="line">t[<span class="number">2</span>] += [<span class="number">50</span>, <span class="number">60</span>]</div><div class="line"><span class="comment"># 结果为既赋值成功，又报错</span></div><div class="line"><span class="comment"># 但 t[2].extend([50, 60]) 可以赋值成功</span></div><div class="line"><span class="keyword">import</span> dis</div><div class="line">dis.dis(<span class="string">'s[a] += b'</span>) <span class="comment"># 可以查看字节码</span></div></pre></td></tr></table></figure>
<ol>
<li>尽量不要在不可变变量内保存可变变量</li>
<li>t[2] += [50,60] 并不是原子操作，因为，当做了一半的时候，抛出的错误。</li>
</ol>
<h4 id="list-sort-and-the-sorted-Built-In-Function"><a href="#list-sort-and-the-sorted-Built-In-Function" class="headerlink" title="list.sort and the sorted Built-In Function"></a>list.sort and the sorted Built-In Function</h4><p>对于 sort 和 sorted 来说，reverse 代表 desc,key 为单参数用于计算每一个值的结果的函数。<br>list.sort 直接针对列表排序，并且返回 None（出于编程习惯的问题，直接返回 None 的函数大多是对程序有一定的修改）</p>
<h4 id="Managing-Ordered-Sequences-with-bisect"><a href="#Managing-Ordered-Sequences-with-bisect" class="headerlink" title="Managing Ordered Sequences with bisect"></a>Managing Ordered Sequences with bisect</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import bisect</div><div class="line">bisect -&gt; bisect_right</div><div class="line">bisect_left</div><div class="line">insort -&gt; insort_left</div><div class="line">insort_right</div><div class="line"># 搜索可以用来划分档次</div><div class="line">def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):</div><div class="line">    i = bisect.bisect(breakpoints, score)</div><div class="line">    return grades[i]</div><div class="line"></div><div class="line">[grade(score) for score in [33, 99, 77, 70, 89, 90, 100]] # ['F', 'A', 'C', 'C', 'B', 'A', 'A']</div></pre></td></tr></table></figure>
<h4 id="When-a-List-Is-Not-the-Answer"><a href="#When-a-List-Is-Not-the-Answer" class="headerlink" title="When a List Is Not the Answer"></a>When a List Is Not the Answer</h4><p>list 是一种 mix-typed 的数据结构，即可以存放不同种类型的数据结构，由此带来的问题自然是性能问题：</p>
<ul>
<li>list 第一是 mix-typed 的数据结构</li>
<li>动态数组，并非数组</li>
</ul>
<p>当考虑性能的时候，则需要考虑是不是要换一个更好的数据结构：</p>
<ul>
<li>适用于类型单一的 array</li>
<li>增删比较多，或者需要使用 FIFO,LIFO, 则使用 deque (double-ended queue)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Arrays</span></div><div class="line">floats = array(<span class="string">'d'</span>, (random() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>**<span class="number">7</span>)))</div><div class="line"><span class="comment"># NumPy and SciPy</span></div><div class="line"></div><div class="line"><span class="comment"># Deques and Other Queue</span></div></pre></td></tr></table></figure>
<h4 id="Deques-and-Other-Queue"><a href="#Deques-and-Other-Queue" class="headerlink" title="Deques and Other Queue"></a>Deques and Other Queue</h4><ul>
<li>Deque</li>
<li>queue 线程安全 Queue, LifoQueue, and PriorityQueue</li>
<li>multiprocessing Queue 和 JoinableQueue</li>
<li>asyncio Queue, LifoQueue, PriorityQueue, and JoinableQueue</li>
</ul>
<h3 id="C03-Dictionaries-and-Sets"><a href="#C03-Dictionaries-and-Sets" class="headerlink" title="C03. Dictionaries and Sets"></a>C03. Dictionaries and Sets</h3><p>本章内容：</p>
<ul>
<li>Common dictionary methods</li>
<li>Special handling for missing keys</li>
<li>Variations of dict in the standard library</li>
<li>The set and frozenset types</li>
<li>How hash tables work</li>
<li>Implications of hash tables (key type limitations, unpredictable ordering, etc.)</li>
</ul>
<h5 id="Generic-Mapping-Types"><a href="#Generic-Mapping-Types" class="headerlink" title="Generic Mapping Types"></a>Generic Mapping Types</h5><p>Hashable ?  一个 obj 的 hash value 在他生命周期内 hash value 是不变的。一个 frozen set 也是 hashable 的（包括每个子元素）.</p>
<blockquote>
<p>All of Python’s immutable built-in objects are hashable , except that tuple<br>如果一个 tuple 是每个子元素都是 hashable 的话，则该 tuple 也是 hashable 的。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 直接在 dict 上面进行操作</span></div><div class="line">index.setdefault(word, []).append(location)</div></pre></td></tr></table></figure>
<h5 id="missing-方法"><a href="#missing-方法" class="headerlink" title="missing 方法"></a>missing 方法</h5><p>keyerror 会触发 missing 方法</p>
<h5 id="Variations-of-Dict"><a href="#Variations-of-Dict" class="headerlink" title="Variations of Dict"></a>Variations of Dict</h5><p>OrderedDict - 有序字典<br>ChainMap - 组装多个字典，按照次序搜索<br>Counter - COUNTER</p>
<h5 id="Immutable-Mappings"><a href="#Immutable-Mappings" class="headerlink" title="Immutable Mappings"></a>Immutable Mappings</h5><h5 id="Set-Theory"><a href="#Set-Theory" class="headerlink" title="Set Theory"></a>Set Theory</h5><p>交差并补</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 1. 交集</div><div class="line">s &amp; z</div><div class="line">z &amp; s</div><div class="line">s &amp;= z</div><div class="line"># 2. 差集</div><div class="line">s - z</div><div class="line">z - s</div><div class="line">s -= z</div><div class="line"># 3. 并集</div><div class="line">s | z</div><div class="line">z | s</div><div class="line">s |= z</div><div class="line"># 4. 补集</div><div class="line">s ^ z</div><div class="line">z ^ s</div><div class="line">s ^= z</div><div class="line"></div><div class="line"># 被包含</div><div class="line">e in z</div><div class="line"></div><div class="line"># 子集</div><div class="line">s &lt;= z</div><div class="line">s =&gt; z</div></pre></td></tr></table></figure>
<h5 id="Dict-and-Set-Under-the-Hood"><a href="#Dict-and-Set-Under-the-Hood" class="headerlink" title="Dict and Set Under the Hood"></a>Dict and Set Under the Hood</h5><h3 id="C04-Text-VS-Bytes"><a href="#C04-Text-VS-Bytes" class="headerlink" title="C04. Text VS Bytes"></a>C04. Text VS Bytes</h3><pre><code>- Character Issues
- Byte Essentials
- Basic Encoders/Decoders
- Understanding Encode/Decode Problems
- Handling Text Files
- Normalizng Unicode for Saner Comparisons
- Sorting Unicode Text
- The Unicode Database
- Dual-Mode str and bytes APIs
- Summary
- Further Reading
</code></pre><h2 id="P3-Function-as-Objects"><a href="#P3-Function-as-Objects" class="headerlink" title="P3. Function as Objects"></a>P3. Function as Objects</h2><p>function is the first-class object</p>
<p>Higher-Order Functions</p>
<ul>
<li>设计模式</li>
<li>装饰器</li>
<li>callables</li>
<li>function attributes</li>
<li>introspection</li>
<li>parameter annotations</li>
<li><p>nonlocal declaration</p>
</li>
<li><p>references, mutability, 实例生命周期，定制自己集合类 collections and ABCs, 多继承，重载操作符。</p>
</li>
<li><p>生成器</p>
</li>
<li>上下文管理器</li>
<li>协程 （包括 Yield)</li>
<li>concurrency</li>
<li><p>event-oriented IO asyncio</p>
</li>
<li><p>动态创建类</p>
</li>
<li>descriptors</li>
<li>class decorators</li>
<li>metaclasses</li>
</ul>
<h3 id="C05-First-Class-Function"><a href="#C05-First-Class-Function" class="headerlink" title="C05. First-Class Function"></a>C05. First-Class Function</h3><pre><code>- Treating a Function Like an Object
- Higher-Order Functions
- Anonymous Functions
- The Seven Flavors of Callable Objects
- User-Defined Callable Types
- Function Introspection
- From Positional to Keyword-Only Parameters
- Function Annotations
- Packages for Functional Programming
- Summary
- Further Reading
</code></pre><h3 id="C06-Design-Patterns-with-First-Class-Functions"><a href="#C06-Design-Patterns-with-First-Class-Functions" class="headerlink" title="C06. Design Patterns with First-Class Functions"></a>C06. Design Patterns with First-Class Functions</h3><pre><code>- Refactoring Strategy
- Command
- Summary
- Further Reading
</code></pre><h3 id="C07-Function-Decorators-and-Closures"><a href="#C07-Function-Decorators-and-Closures" class="headerlink" title="C07. Function Decorators and Closures"></a>C07. Function Decorators and Closures</h3><pre><code>- Decorators 101
- When Python Executes Decorators
- Decorator-Enhanced Strategy Pattern
- Variable Scope Rules
- Closures
- The nonlocal Declaration
- Implementing a Simple Decorator
- Decorators In the Standard Library
- Stacked Decorators
- Parameterized Decorators
- Summary
- Further Reading
</code></pre><h2 id="P4-Object-Oriented-Idioms"><a href="#P4-Object-Oriented-Idioms" class="headerlink" title="P4. Object-Oriented Idioms"></a>P4. Object-Oriented Idioms</h2><h3 id="C08-Object-References-Mutability-and-Recycling"><a href="#C08-Object-References-Mutability-and-Recycling" class="headerlink" title="C08. Object References, Mutability, and Recycling"></a>C08. Object References, Mutability, and Recycling</h3><p>reference variable : variable 不是盒子,贴在盒子上的标签.</p>
<p>赋值并非创建Copy<br>赋值给一个值并非改变之前绑定的值,而仅仅是重新绑定<br>函数由于参数为reference,所以可以修改mutable的变量<br>函数参数不应当初始化为可修改的值.</p>
<p>id 与 == </p>
<pre><code>- Identity, Equality , and Aliases
- Copies Are Shallow by Default
- Function Parameters as References
- del and Garbage Collection
- Weak References
- Tricts Python Plays with Immutables
- Summary
- Further Reading
</code></pre><h3 id="C09-A-Pythonic-Object"><a href="#C09-A-Pythonic-Object" class="headerlink" title="C09. A Pythonic Object"></a>C09. A Pythonic Object</h3><pre><code>- Object Representations
- Vector Class Redux
- An Alternative Constructor
- classmethod VS staticmethod
- Formatted Displays
- A Hashable Vector2d
- Private and &quot;Protected&quot; Attributes in Python
- Saving Space with the slots Class Attribute
- Overriding Class Attributes
- Summary
- Further Reading
</code></pre><h3 id="C10-Sequence-Hacking-Hashing-and-Slicing"><a href="#C10-Sequence-Hacking-Hashing-and-Slicing" class="headerlink" title="C10. Sequence Hacking , Hashing , and Slicing"></a>C10. Sequence Hacking , Hashing , and Slicing</h3><pre><code>- Vector: A User-Defined Sequence Type
- Vector Take #1: Vector2d Compatible
- Protocols and Duck Typing
- Vector Take #2: A Sliceable Sequence
- Vector Take #3: Dynamic Attribute Access
- Vector Take #4: Hashing and a Faster ==
- Vector Take #5: Formatting
- Summary
- Further Reading
</code></pre><h3 id="C11-Interfaces-From-Protocols-to-ABCs"><a href="#C11-Interfaces-From-Protocols-to-ABCs" class="headerlink" title="C11. Interfaces: From Protocols to ABCs"></a>C11. Interfaces: From Protocols to ABCs</h3><pre><code>- Interfaces and Protocols in Python Culture
- Python Digs Sequences
- Monkey-Patching to Implement a Protocol at Runtime
- Alex Martelli&apos;s Waterfowl
- Subclassing an ABC
- ABCs in the Standard Library
- Defining and Using an ABC
- How the Tombola Subclasses Were Tested
- Usage of register in Practice
- Geese Can Behave as Ducks
- Chapter Summary
- Further Reading
</code></pre><h3 id="C12-Inheritance-For-Good-or-For-Worse"><a href="#C12-Inheritance-For-Good-or-For-Worse" class="headerlink" title="C12. Inheritance: For Good or For Worse"></a>C12. Inheritance: For Good or For Worse</h3><pre><code>- Subclassing Built-In Types Is Tricty
- Multiple Inheritance and Method Resolution Order
- Multiple Inheritance in the Real World
- Coping with Multiple Inheritance
- A Modern Example: Mixins in Django Generic Views
- Chapter Summary
- Further Reading
</code></pre><h3 id="C13-Operator-Overloading-Doing-It-Right"><a href="#C13-Operator-Overloading-Doing-It-Right" class="headerlink" title="C13. Operator Overloading: Doing It Right"></a>C13. Operator Overloading: Doing It Right</h3><pre><code>- Operator Overloading 101
- Unary Operators
- Overloading plus for Verctor Addtion
- Overloading star for Scalar Multiplication
- Rich Comparison Operators
- Augmented Assignment Operator
- Chapter Summary
- Further Reading
</code></pre><h2 id="P5-Control-Flow"><a href="#P5-Control-Flow" class="headerlink" title="P5. Control Flow"></a>P5. Control Flow</h2><h3 id="C14-Iterables-Iterators-and-Generators"><a href="#C14-Iterables-Iterators-and-Generators" class="headerlink" title="C14. Iterables, Iterators , and Generators"></a>C14. Iterables, Iterators , and Generators</h3><pre><code>- Sentence Take #1 : A Sequence of Words Iterables VS Iterators
- Iterables Versus Itertors
- Sentence Take #2 : A Classic Iterator
- Sentence Take #3 : A Generator Function
- Sentence Take #4 : A Lazy Implementation
- Sentence Take #5 : A Generator Expression
- Generator Expressions : When to Use Them
- Another Example : Arithmetic Progression Generator
- Generator Functions in the Standard Library
- New Syntax In Python 3.3 : yield from
- Iterable Reducing Functions
- A Closer Look at the iter Function
- Case Study : Generators in a Databse Conversion Utility
- Generators as Coroutines
- Chapter Summary
- Further Reading
</code></pre><h3 id="C15-Context-Managers-and-else-Blocks"><a href="#C15-Context-Managers-and-else-Blocks" class="headerlink" title="C15. Context Managers and else Blocks"></a>C15. Context Managers and else Blocks</h3><pre><code>- Do This , Then That: else Blocks Beyond if
- Context Managers and with Blocks
- The contextlib Utilities
- Using @contextmanager
- Chapter Summary
- Further Reading
</code></pre><h3 id="C16-Coroutines"><a href="#C16-Coroutines" class="headerlink" title="C16. Coroutines"></a>C16. Coroutines</h3><pre><code>- How Coroutines Evolved from Generators
- Basic Behavior of a Generator Used as a Coroutine
- Example: Coroutine to Compute a Running Average
- Decorators for Conroutine Priming
- Coroutine Termination and Exception Handing
- Returning a Value from a Coroutine
- Using Yield from
- The Meaning of yield from
- Use Case: Coroutines for Discrete Event Simulation
- Chapter Summary
- Further Reading
</code></pre><h3 id="C17-Concurrency-with-Futures"><a href="#C17-Concurrency-with-Futures" class="headerlink" title="C17. Concurrency with Futures"></a>C17. Concurrency with Futures</h3><pre><code>- e.g. Web Downloads in Three Styles
- Blocking I/O and the GIL
- Launching Processes with concurrent.futures
- Experimenting with Executor.map
- Downloads with Progress Display and Error Handling
- Chapter Summary
- Further Reading
</code></pre><h3 id="C18-Concurrency-with-asyncio"><a href="#C18-Concurrency-with-asyncio" class="headerlink" title="C18. Concurrency with asyncio"></a>C18. Concurrency with asyncio</h3><pre><code>- Thread VS Coroutine : A Comparison
- Downloading with asyncio and aiohttp
- Running Circling Around Blocking Calls
- Enhancing the asyncio downloader Script
- From Callbacks to Futures and Coroutines
- Writing asyncio Servers
- Chapter Summary
- Further Reading
</code></pre><h2 id="P6-Metaprogramming"><a href="#P6-Metaprogramming" class="headerlink" title="P6. Metaprogramming"></a>P6. Metaprogramming</h2><h3 id="C19-Dynamic-Attributes-and-Properties"><a href="#C19-Dynamic-Attributes-and-Properties" class="headerlink" title="C19. Dynamic Attributes and Properties"></a>C19. Dynamic Attributes and Properties</h3><pre><code>- Data Wrangling with Dynamic Attributes
- Using a Property for Attribute Validation
- A Proper Look at Properties
- Coding a Property Factory
- Handling Attribute Deletion
- Essential Attributes and Functions For Attribute Handling
- Chapter Summary
- Further Reading
</code></pre><h3 id="C20-Attribute-Descriptors"><a href="#C20-Attribute-Descriptors" class="headerlink" title="C20. Attribute Descriptors"></a>C20. Attribute Descriptors</h3><pre><code>- Desciptor Example: Attribute Validation
- Overriding VS Nonoverriding Descriptors
- Methods Are Descriptors
- Descriptor Usage Tips
- Descriptor docstring and Overriding Deletion
- Chapter Summary
- Further Reading
</code></pre><h3 id="C21-Class-Metaprogramming"><a href="#C21-Class-Metaprogramming" class="headerlink" title="C21. Class Metaprogramming"></a>C21. Class Metaprogramming</h3><pre><code>- A Class Factory
- A Class Decorator for Customizing Descriptors
- What Happens When: Import Time VS Runtime
- Metaclasses 101
- A Metaclass for Customizing Descriptors
- The Metaclass prepare Special Method
- Classes as Objects
- Chapter Summary
- Further Reading
</code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="https://docs.python.org/3/reference/datamodel.html" target="_blank" rel="external">https://docs.python.org/3/reference/datamodel.html</a></li>
<li>Python Cookbook</li>
<li>Python Essential Reference, 4th Edition</li>
<li>The Art of the Metaobject Protocol</li>
</ul>
<p>UPDATE:</p>
<table>
<thead>
<tr>
<th>日期</th>
<th>类型</th>
<th>详细操作</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>2017-04-18</strong></td>
<td>动笔</td>
<td>初始化本文结构</td>
</tr>
<tr>
<td><strong>2017-04-26</strong></td>
<td>重构</td>
<td>添加目录和阅读笔记</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Fluent Python 适用于中级 Pythoner。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以 Python 作为主力编程语言已经 1 年多了，读这本书，希望写的代码可以更加的 Pythonic。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="写在人生的边上" scheme="http://twocucao.xyz/categories/%E5%86%99%E5%9C%A8%E4%BA%BA%E7%94%9F%E7%9A%84%E8%BE%B9%E4%B8%8A/"/>
    
    
      <category term="碎碎念" scheme="http://twocucao.xyz/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="书单与简评" scheme="http://twocucao.xyz/tags/%E4%B9%A6%E5%8D%95%E4%B8%8E%E7%AE%80%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>Full Stack Django DevOps Cheatsheet</title>
    <link href="http://twocucao.xyz/2017/04/06/FullStackDjangoDevOpsCheatsheet/"/>
    <id>http://twocucao.xyz/2017/04/06/FullStackDjangoDevOpsCheatsheet/</id>
    <published>2017-04-06T12:29:00.000Z</published>
    <updated>2017-06-20T00:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Django 全栈开发 的一些小经验和踩坑记录。本文没有安装和常识性配置的介绍，仅仅是一笔带过项目中遇到的一些点点滴滴的小问题。算是踩坑和心得笔记吧。</p>
<p>不仅仅是 Django, 还有 Django 涉及到的：</p>
<ul>
<li>组件：PostgreSQL,RabbitMQ,Redis,MongoDB,Ngnix</li>
<li>技术：爬虫技术，数据库设计，GIS 记录，单页 / 多页 (VueJS+Webpack+DjangoRestFramework), 自动化部署</li>
<li>轮子：Django 紧密关联的可以极大推进项目开发的轮子</li>
</ul>
<a id="more"></a>
<p>于是，本文的内容就如下：</p>
<ul>
<li>前后端分离</li>
<li>自动化部署</li>
<li>数据库相关</li>
<li>其他踩坑经历</li>
</ul>
<!-- more -->
<h2 id="0x01-前后端分离"><a href="#0x01-前后端分离" class="headerlink" title="0x01. 前后端分离"></a>0x01. 前后端分离</h2><p>前后端分离是提高团队开发的一个重要的开发策略，前后端分离之后，后端和前端交流好 JSON 格式，并行开发，局域网中放置一台服务器，后端写好一个功能，推送代码，由 gitlab 触发 Runner 自动交付到局域网的服务器上。这样的话，前后端可以并行开发，从而摆脱每一次开发过程不可避免，前端编写模板，然后由后端套用模板，出了问题，前端修改模板，后端接着修改模板… 循环往复，不曾更改的问题，在这种职责分明的情况下也不会出现背锅侠的问题。</p>
<p>在往常的开发过程中，而如果 Ajax 比较多或者前端写的代码质量稍微低一些，那么倒霉的事情就发生了，后端和前端的沟通成本那是相当的高。推锅的事情也会发生。</p>
<p>而新的开发过程中，如果上级有界面上的需求，基本上只需要前端更新一下代码，推送，就可以立即看到效果。<br>同样的，后端也是如此。</p>
<blockquote>
<p>这就是我选择前后端分离的初衷 – 将主要的精力放在开发上面。而不是套用模板和编辑 Ajax 过程中带来的沟通问题。</p>
</blockquote>
<p>在前后端配合上：</p>
<ul>
<li>后端选择 Django,Restful 框架选择了 DjangoRestFramework, DRF 的优点在于可以自动生成 API 界面，让前端对照着表单进行请求接口的测试。于是局域网的那一台可以配置为 Debug 模式，生产机器就可以关闭 DEBUG 模式。</li>
<li>前端选择 VueJS, 选择这个小而精美的框架一方面是基于团队的开发水平考虑，如果使用太激进的框架 React, 可能遇到问题无法在短时间内解决。由于选用了 VueJS, 也就选用了 Vue 全家桶，通过 Webpack2 进行配置完成基本的打包任务，通过 config 读取环境变量进行生产环境和发布环境的 apiurl 的分离</li>
<li>代码提交选择 Coding.NET 用于提交代码，在局域网中选择 Gitlab 用于提交代码，配上 Gitlab CI 进行持续集成，每次提交代码直接直接构建本地发布。前后端合作亲密无间。</li>
</ul>
<p>前后端分离有什么缺点呢？</p>
<ol>
<li>必须强行升级 Https</li>
<li>开发时候需要关掉 Django 的同源策略</li>
<li>IE8– 不兼容</li>
</ol>
<h3 id="1-1-Django-和-他的小伙伴们"><a href="#1-1-Django-和-他的小伙伴们" class="headerlink" title="1.1. Django 和 他的小伙伴们"></a>1.1. Django 和 他的小伙伴们</h3><p>Django 适用于快速开发，对于创业公司来说，是不错的快速开发语言。</p>
<p>不仅仅是因为 Python 表达力比较强，更重要的是 Django 有很多高质量的包可以使用。</p>
<ul>
<li>Django Debug Toolbar</li>
<li>DjangoRestFramework</li>
<li>Django Extensions</li>
</ul>
<h3 id="1-4-Django-的奇技淫巧"><a href="#1-4-Django-的奇技淫巧" class="headerlink" title="1.4. Django 的奇技淫巧"></a>1.4. Django 的奇技淫巧</h3><h4 id="Django-Model"><a href="#Django-Model" class="headerlink" title="Django Model"></a>Django Model</h4><ul>
<li><a href="http://stackoverflow.com/questions/1355150/django-when-saving-how-can-you-check-if-a-field-has-changed" target="_blank" rel="external">Save If Changed</a></li>
</ul>
<h2 id="0x02-自动化部署"><a href="#0x02-自动化部署" class="headerlink" title="0x02. 自动化部署"></a>0x02. 自动化部署</h2><p>写程序 一般就是开发测试部署。</p>
<p>话虽然这么时候，但是在具体的实践过程中，还是有很多很多坑需要注意的。</p>
<p>比如，仅仅就开发环节来说，团队协作怎么搞？你说可以用 GIT 作为版本管理工具，代码托管。那我问你，这个 Web 开发过程中前端开发模板，后端套用模板怎么搞？你说，前后端分离，那前后端分离后 Http 请求被劫持怎么办，跨站攻击怎么搞……<br>甚至如果是一个人开发的话，直接拉一台服务器做做部署，定期更新到网站上就行了。但如果是团队协作呢？前端提交了代码，产品经理过来说，你更新一下服务器，后端提交了代码，前端过来说，你更新一下服务器，过程琐碎而耗时。大量的时间就浪费在了这种枯燥的事情上了。两个后端，一个前端的情况下，每天本地发布（交付）的次数就已经是相当惊人（大概是前后端每天提交 5 次左右），如果以后是 3 个后端，三个前端，那我作为主程，每天就写不了代码了，这种情况是断不能忍的。</p>
<p>这个时候，就需要想着把团队协作开发流程优化好：</p>
<p>在我刚开始进行开发的时候，使用 bash 配合 Ansible 在本地和上线的 Ubuntu 16.04 上面自动化能够自动化的大部分工作,程序员在本地开发的时候,只需要进行开发,然后推送代码到repo,剩下的诸如自动化测试集成到系统中,则全部自动化.</p>
<h3 id="2-1-使用场景"><a href="#2-1-使用场景" class="headerlink" title="2.1. 使用场景"></a>2.1. 使用场景</h3><p>经过研究，我确定了理想中的使用场景：</p>
<blockquote>
<p>前端与后端提交代码到代码托管上面的时候，直接集成，构建，Stage 到服务器。</p>
<p>到上线的时候，由我执行 Ansible 进行上线。</p>
</blockquote>
<h3 id="2-2-实施方案"><a href="#2-2-实施方案" class="headerlink" title="2.2. 实施方案"></a>2.2. 实施方案</h3><p>在这个流程中，我需要安装如下的软件：</p>
<ul>
<li>Gitlab Gitlab-CI-Runner : 用于解决代码托管，项目的基本成长，以及持续化集成</li>
<li>PostgreSQL</li>
<li>MongoDB</li>
<li>Redis</li>
<li>RabbitMQ</li>
<li>Nginx</li>
<li>Python 以及 Python 扩展的依赖包</li>
<li>其他</li>
</ul>
<p>配置文件为 3 类：</p>
<ul>
<li>test</li>
<li>stage</li>
<li>production</li>
</ul>
<p>硬件设备 3 台：</p>
<ol>
<li>第一台为 Gitlab 部署的软件</li>
<li>第二台为 Stage 环境 （本地局域网持续交付）的机器</li>
<li>第三台为 Server （阿里云） 机器</li>
</ol>
<blockquote>
<p>注：最初使用 Ubuntu 机器，最终确定使用 Docker 镜像进行构建</p>
</blockquote>
<h3 id="2-3-持续交付"><a href="#2-3-持续交付" class="headerlink" title="2.3. 持续交付"></a>2.3. 持续交付</h3><p>当前端工程师 Push Master 分支到 Repo 上的时候，执行 Job 更新网站<br>当后端工程师 Push Master 分支到 Repo 上的时候，执行 Job 更新网站</p>
<p>Push Master 分支，这个自然无需多说，问题是怎么执行 Job 呢？</p>
<blockquote>
<p><strong>Gitlab CI Multi Runner</strong></p>
</blockquote>
<p>在一台 stage 的机器上安装 gitlab ci multi runner , 并且在该机器上注册 runner 为 shell , 这意味着 runner 会以 gitlab-runner 用户的权限进行测试 , 你需要 uninstall<br>然后 install –user=root 一下，然后重启，即可在 gitlab-ci.yml 上。</p>
<p>修改文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gitlab-runner register <span class="comment"># 然后填入相关信息</span></div><div class="line">vim /etc/gitlab-runner/config.toml <span class="comment"># 接着进行修改</span></div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">concurrent = 1</div><div class="line">check_interval = 0</div><div class="line"></div><div class="line">[[runners]]</div><div class="line">  name = <span class="string">"yadjangoweb"</span></div><div class="line">  url = <span class="string">"http://192.168.1.139/ci"</span></div><div class="line">  token = <span class="string">"325asd65f4e7xa9faasda8da"</span></div><div class="line">  executor = <span class="string">"shell"</span></div><div class="line">  [runners.cache]</div></pre></td></tr></table></figure>
<h3 id="2-4-Dockerize-Application"><a href="#2-4-Dockerize-Application" class="headerlink" title="2.4. Dockerize Application"></a>2.4. Dockerize Application</h3><p>Docker 以其轻量级和类似于版本管理的软件方式吸引了我。于是，准备将所有的 Service 都 Docker 化。</p>
<p>拿 Django 程序来说，首先 Django 程序依赖三个组件 redis / postgresql / rabbitmq , 完成这些组件的安装之后才能进行下一步的操作。</p>
<h2 id="0x03-数据库相关"><a href="#0x03-数据库相关" class="headerlink" title="0x03 数据库相关"></a>0x03 数据库相关</h2><h3 id="1-数据库设计"><a href="#1-数据库设计" class="headerlink" title="1. 数据库设计"></a>1. 数据库设计</h3><p>PostgreSQL Array 在爬虫方面可以用来标记一个 Record 的处理状态<br>PostgreSQL Range 用来判断范围也是一个比较高效的选择（用空间 gist 索引取代两个索引）</p>
<p>GeoDjango 和 PostGIS 非常配</p>
<h3 id="2-数据迁移"><a href="#2-数据迁移" class="headerlink" title="2. 数据迁移"></a>2. 数据迁移</h3><h4 id="1-1-第一次数据迁移之-MySQL-转-PostgreSQL"><a href="#1-1-第一次数据迁移之-MySQL-转-PostgreSQL" class="headerlink" title="1.1. 第一次数据迁移之 MySQL 转 PostgreSQL"></a>1.1. 第一次数据迁移之 MySQL 转 PostgreSQL</h4><p>第一次数据迁移的时候基于 PostgreSQL 社区里面有个大杀器，叫做 PostGIS, 通过 PostGIS, 可以很方便的拥有和国内一些地图公司匹敌的算法。抛开算法实现的效率问题，基本上可以满足日常的开发需求，当时数据量不算大，使用 mysqldump 下来也就 500M 左右，而且行数大约 700W 条，于是使用了一个很笨的方法，就是将数据库使用 Django 命令 dump 成 json, 接着修改配置重新导入新数据库。</p>
<p>这种方式的缺点就是效率低而且太吃内存了，当时 16G 的服务器满内存，满交换内存地搞了一个上午。</p>
<h4 id="1-2-第二次数据迁移之重新-makemigrations"><a href="#1-2-第二次数据迁移之重新-makemigrations" class="headerlink" title="1.2. 第二次数据迁移之重新 makemigrations"></a>1.2. 第二次数据迁移之重新 makemigrations</h4><p>为什么要重新 makemigrations 呢，因为糟糕的事情发生了。</p>
<p>有个需求，需要重新定制用户登录认证系统。用户登录认证系统是最最应该在项目开始的时候编写的，这就是项目的基石，这个需求就恰似在房子盖到第三层的时候突然要把地基给加固。</p>
<p>Django 中如果使用了 auth 模块，则 auth.user 是最先被迁移到数据库中的，而如果你经过权衡继承 AbstractUser 并且 makemigrations 生成个迁移文件 0001_initial.py 后，在正常的情况下不容易将 migration 修改应用到数据库中。</p>
<blockquote>
<p>如果我偏要勉强呢？</p>
</blockquote>
<p>当然是可以勉强的，删掉数据库中已经记录下来的 auth.user migration 的相关记录即可。</p>
<p>那我为什么还是需要重新编写 migration 呢？</p>
<ol>
<li>因为之前对数据库的结构调整比较频繁，多达 138 次，而在 138 次调整数据结构之后，再去撤销第一次数据表的迁移操作的时候，则无异于厨子做菜要把牛排做 8 分熟，但是厨子做到 7 分熟的时候，突然顾客说，我要 5 分熟的牛排。那只能重新来了。</li>
<li>顺手精简掉 138 个文件。</li>
</ol>
<p>如何做呢？</p>
<ol>
<li>数据的迁移在没有表与表之间的关联的时候是很好办的，CSV, 标准 SQL 文件。</li>
<li>有表关联的情况下则需要权衡数据量来进行迁移，假如数据量在 10 来个 G 的时候，读到内存中，按照数据表的依赖关系，自下而上逐层迁移即可。</li>
<li>数据量大的时候，则需要去约束，去索引，然后转 CSV/SQL, 迁移到数据表中。如果表依赖不复杂的话，直接 psql 命令重定向数据也可以。</li>
</ol>
<p>但是呢，由于使用了 Django, 在数据量不大的时候，完全可以使用 Django 的 ORM 来做迁移。</p>
<p>我在 Google 了一下，发现下面一个脚本，于是设置数据库为新数据库 default 和 depressed</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_migrate</span><span class="params">(model)</span>:</span></div><div class="line">    <span class="comment"># remove data from destination db before copying</span></div><div class="line">    <span class="comment"># to avoid primary key conflicts or mismatches</span></div><div class="line">    <span class="keyword">if</span> model.objects.using(<span class="string">'default'</span>).exists():</div><div class="line">        model.objects.using(<span class="string">'default'</span>).all().delete()</div><div class="line"></div><div class="line">    <span class="comment"># get data form the source database</span></div><div class="line">    items = model.objects.using(<span class="string">'depressed'</span>).order_by(<span class="string">"pk"</span>).all()</div><div class="line">    count = len(items)</div><div class="line">    <span class="comment"># process in chunks, to handle models with lots of data</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count, <span class="number">10000</span>):</div><div class="line">        chunk_items = items[i:i + <span class="number">10000</span>]</div><div class="line">        print(<span class="string">"已经迁移数据"</span>, i)</div><div class="line">        model.objects.using(<span class="string">'default'</span>).bulk_create(chunk_items)</div><div class="line"></div><div class="line">    <span class="comment"># many-to-many fields are NOT handled by bulk create; check for</span></div><div class="line">    <span class="comment"># them and use the existing implicit through models to copy them</span></div><div class="line">    <span class="keyword">for</span> m2mfield <span class="keyword">in</span> model._meta.many_to_many:</div><div class="line">        m2m_model = getattr(model, m2mfield.name).through</div><div class="line">        batch_migrate(m2m_model)</div></pre></td></tr></table></figure>
<p>按照表与表之间的依赖关系，逐个迁移到数据库中搞定。</p>
<h3 id="1-3-sequence-问题"><a href="#1-3-sequence-问题" class="headerlink" title="1.3 sequence 问题"></a>1.3 sequence 问题</h3><p>在写 Django 的时候发现的时候无论如何都无法保存新的 item.</p>
<p>原来的代码为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">item = Item.objects.get_or_create()</div><div class="line">item.foo = <span class="number">1</span></div><div class="line">item.save()</div></pre></td></tr></table></figure>
<p>报错信息是 Integrety, 报 duplicated 错误（下面的代码当然是打了马赛克了）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">django.db.utils.IntegrityError: duplicate key value violates unique constraint <span class="string">"foo_item_pkey"</span></div><div class="line">DETAIL:  Key (id)=(<span class="number">111111</span>) already exists.</div></pre></td></tr></table></figure>
<p>那么，问题来了：</p>
<blockquote>
<p><del>挖掘技术哪家强？</del></p>
</blockquote>
<p>啊，不是</p>
<blockquote>
<p>How To Solve This?</p>
</blockquote>
<p>经过猜测，而 get 到已有的 item 设置并且保存的话，并不会出现这个问题。问题主要出在 create 上面。</p>
<p>于是编写代码验证一下是不是猜想正确</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    item = Item.objects.get()</div><div class="line"><span class="keyword">except</span> Exception:</div><div class="line">    item = Item.objects.create()</div><div class="line"></div><div class="line"><span class="comment"># do something</span></div><div class="line"></div><div class="line">item.save()</div></pre></td></tr></table></figure>
<p>duplicate 的问题肯定是多次存同样的不能重复的字段。</p>
<p><strong>但尼玛，我之前做测试的时候考虑过这个逻辑呀？</strong>换而言之，这种问题不应该出现，如果出现了问题，八成是 ORM 用的不对。</p>
<p>印象中这种问题 Google 一下 Integrety Duplicate Django PostgreSQL 一般就能出来了。</p>
<p>最后找到解决方案：<a href="http://centoshowtos.org/web-services/django-and-postgres-duplicate-key/" target="_blank" rel="external">http://centoshowtos.org/web-services/django-and-postgres-duplicate-key/</a></p>
<p>在终端进入 psql 查询 sequence 最新值</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> start_value, <span class="keyword">last_value</span>, max_value <span class="keyword">from</span> dt_crawler_item_item_id_seq;</div><div class="line"></div><div class="line"> start_value | last_value |      max_value</div><div class="line"><span class="comment">-------------|------------|---------------------</span></div><div class="line">           1 |    111110 | 9223372036854775807</div></pre></td></tr></table></figure>
<p>而我们查看一下 item_id 的最大值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select max(item_id) from app_model_item;</div><div class="line"></div><div class="line">   max</div><div class="line">---------</div><div class="line"> 111111</div></pre></td></tr></table></figure>
<p>重置 sequence last_value 值到最新即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter sequence app_model_item_item_id_seq restart with 111111;</div></pre></td></tr></table></figure>
<blockquote>
<p>当数据库每次插入一条非指定主键的记录，则获取 last_value(111110), 加 1 得到当前的主键接着插入。但这个过程无异于数据库中已经有了一个 pk 为 111111 的记录，再插入一条。于是报错。</p>
</blockquote>
<p>回顾这个问题，该问题是由于 PostGres 的 sequence 造成 pkey 相等，换而言之，postgres 应该在有一个 pk 值为 111111 的时候，插入一个无主键的记录，PostgreSQL 获取 sequence+1(111110 + 1) 得到它认为当前的主键值，接着再一次插入了主键为 111111 的这个值。</p>
<p>这个过程相当于依次插入两个条 ID 相同的记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>(<span class="keyword">id</span>, column2, …) <span class="keyword">VALUES</span> (<span class="number">111111</span>, value2, …);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>(<span class="keyword">id</span>, column2, …) <span class="keyword">VALUES</span> (<span class="number">111111</span>, value2, …);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>sequence 避免了每一次 max 查找带来的性能损失，一方面带来了方便，也带来了隐藏的坑。</p>
</blockquote>
<p>如果以后这个问题比较多的话，参考下面的源码对文本进行修改。</p>
<p><a href="https://github.com/ASKBOT/django-postgresql-fix-sequences/blob/master/postgresql_sequence_utils/utils.py" target="_blank" rel="external">https://github.com/ASKBOT/django-postgresql-fix-sequences/blob/master/postgresql_sequence_utils/utils.py</a></p>
<h2 id="WebServer"><a href="#WebServer" class="headerlink" title="WebServer"></a>WebServer</h2><p>目前使用的 WebServer 是用 Nginx 做反向代理，将请求通过 unix socket 转发到 gunicorn，gunicorn 作为 django 实际上的 webserver。</p>
<h3 id="unix-socket-和-gunicorn-的-REMOTE-ADDR-问题"><a href="#unix-socket-和-gunicorn-的-REMOTE-ADDR-问题" class="headerlink" title="unix socket 和 gunicorn 的 REMOTE_ADDR 问题"></a>unix socket 和 gunicorn 的 REMOTE_ADDR 问题</h3><p>Django Admin 模块在访问 某个页面的时候特别特别慢，而在我的机器上一切正常，我怀疑的是数据库的问题，于是，那么首先要知道数据库的查询语句，于是想借用 django debug toolbar 来 profiling, 于是问题来了，我在局域网模拟真机环境，结果无论如何都无法呈现 Django Debug Toolbar,</p>
<p>问题八成出现在 Django 配置环境 或者 Nginx 上面（当然，最后发现是 Gunicorn 的锅）. 在</p>
<p>经过一段时间的排查，认为是 Nginx 的问题，在相关配置添加下面设置 Header,</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxy_set_header X-Forwarded-For $remote_addr;</div></pre></td></tr></table></figure>
<p>结果依旧无法获取 request.Meta[“REMOTE-ADDR”]</p>
<p>经过搜索发现不止我一个人的问题：<a href="https://github.com/benoitc/gunicorn/issues/797" target="_blank" rel="external">https://github.com/benoitc/gunicorn/issues/797</a></p>
<p>最后发现是 Http 请求从 nginx 这儿经过 unix socket 转发到 gunicorn.sock 下默认是没有赋值 REMOTE-ADDR 的，</p>
<p>那么，这个在 HTTP Header 层次的东西，没有在 gunicorn 层次解决，那就只能在 django 层次解决。</p>
<p>给 Django 添加中间件如下，放在 djangodebugtools 的前面。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XForwardedForMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="keyword">if</span> request.META.get(<span class="string">"HTTP_X_FORWARDED_FOR"</span>, <span class="keyword">False</span>):</div><div class="line">            request.META[<span class="string">"HTTP_X_PROXY_REMOTE_ADDR"</span>] = request.META[<span class="string">"REMOTE_ADDR"</span>]</div><div class="line">            parts = request.META[<span class="string">"HTTP_X_FORWARDED_FOR"</span>].split(<span class="string">","</span>, <span class="number">1</span>)</div><div class="line">            request.META[<span class="string">"REMOTE_ADDR"</span>] = parts[<span class="number">0</span>]</div></pre></td></tr></table></figure></p>
<p>解决。</p>
<h3 id="Nginx-Gzip-压缩"><a href="#Nginx-Gzip-压缩" class="headerlink" title="Nginx Gzip 压缩"></a>Nginx Gzip 压缩</h3><p>当 json 数据量比较大的时候，则必须要考虑开启压缩。一般情况下，虽然这个可以在 Django 层次完成，但是这么做还不如在 nginx 层次完成。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gzip on;</div><div class="line">gzip_disable <span class="string">"msie6"</span>;</div><div class="line">gzip_vary on;</div><div class="line">gzip_proxied any;</div><div class="line">gzip_comp_level <span class="number">6</span>;</div><div class="line">gzip_buffers <span class="number">16</span> <span class="number">8</span>k;</div><div class="line">gzip_http_version <span class="number">1.1</span>;</div><div class="line">gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</div></pre></td></tr></table></figure>
<p>开启之后，我这边的 一个 220k 的数据缩减到 54k</p>
<h2 id="0x04-其他踩坑相关"><a href="#0x04-其他踩坑相关" class="headerlink" title="0x04. 其他踩坑相关"></a>0x04. 其他踩坑相关</h2><h3 id="4-1-诊断思路"><a href="#4-1-诊断思路" class="headerlink" title="4.1 诊断思路"></a>4.1 诊断思路</h3><p>在某一天遇到了一个问题 往常的时候，当文件上传到 Django 中的时候，都可以正常的解析，但是这两天居然不能用了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 问题代码出现在</span></div><div class="line">df = pd.read_excel(file_obj)</div><div class="line"><span class="comment"># 报这个问题 google 几乎没有什么解决方案</span></div><div class="line">Invalid file path <span class="keyword">or</span> buffer object type</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">django</span>.<span class="title">core</span>.<span class="title">files</span>.<span class="title">uploadedfile</span>.<span class="title">InMemoryUploadedFile</span>'&gt;</span></div></pre></td></tr></table></figure>
<p>更加糟糕的问题出现了，我本人的开发环境和服务器的开发环境基本一致，但，但，但为什么不能用呢？</p>
<p>分别回滚代码,Nginx设置,在线上打Log,最终确定了是Pandas从0.19升级到了0.20之后出现的一个小问题.最终还原线上python安装环境,搞定.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Django 全栈开发 的一些小经验和踩坑记录。本文没有安装和常识性配置的介绍，仅仅是一笔带过项目中遇到的一些点点滴滴的小问题。算是踩坑和心得笔记吧。&lt;/p&gt;
&lt;p&gt;不仅仅是 Django, 还有 Django 涉及到的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组件：PostgreSQL,RabbitMQ,Redis,MongoDB,Ngnix&lt;/li&gt;
&lt;li&gt;技术：爬虫技术，数据库设计，GIS 记录，单页 / 多页 (VueJS+Webpack+DjangoRestFramework), 自动化部署&lt;/li&gt;
&lt;li&gt;轮子：Django 紧密关联的可以极大推进项目开发的轮子&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Django" scheme="http://twocucao.xyz/categories/Django/"/>
    
    
      <category term="Pandas" scheme="http://twocucao.xyz/tags/Pandas/"/>
    
      <category term="效率" scheme="http://twocucao.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="工作自动化" scheme="http://twocucao.xyz/tags/%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
  </entry>
  
  <entry>
    <title>Thinking In Programming Language</title>
    <link href="http://twocucao.xyz/2017/03/21/LearnProgrammingLanguage/"/>
    <id>http://twocucao.xyz/2017/03/21/LearnProgrammingLanguage/</id>
    <published>2017-03-21T12:05:00.000Z</published>
    <updated>2017-06-13T08:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文的内容都是一些个人的比较虚的经验。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍，我从 Autohotkey 开始学习编程开始，陆陆续续学习了 C , C++ , Java 6,Delphi 7 , Ruby , Python , JavaScript , 学的很多，很杂，我觉得我上手一门编程语言是完全没有什么心理上的障碍的，可是我觉得我应该是还有很大提升的空间的。</p>
<a id="more"></a>
<p>因为：</p>
<ul>
<li>玩得多，不代表玩的深入</li>
<li>很快的上手一门语言并不代表很快深入一门语言。</li>
</ul>
<p>这就是我准备连同本文写三篇文章来回顾 Python 和 JavaScript 的点点滴滴，并且总结出超出编程语言之外的东西。</p>
<p>我常常听到人家说：所有编程语言都是一样的。话语之间还带着一丝丝的这玩意都挺简单的感觉。这让我很是困惑。</p>
<p>如果这句话出自于掌握好几门编程语言的人来说，这倒是的确有他想强调的道理。可把这些东西挂在嘴边的往往是一些新手。</p>
<p>在我看来，一个人说他会且精通一门编程语言是很让我不能理解的事情，在我看来，什么编程语言框架上手两三天就能去写，但是这严格意义上应该叫做能用，和精通相差甚远。那是不是说写的时间长的人经验就老道了呢？也不见得. 下棋下了一辈子是烂棋篓子的人比比皆是。</p>
<p>那我认为什么样子的人才是懂写代码的人。</p>
<blockquote>
<p>拥有良好的组织代码的能力。</p>
</blockquote>
<p>无论是使用哪种编程语言组织代码</p>
<p>恩，组织能力，一个文件排布混乱的人，不太可能写出整齐严谨的代码，当然，人也可能是复杂的，比如，这个人写的代码挺好，但是生活住处一团糟。</p>
<p>当然这是题外话了，依个人经验而言，学习任何一个复杂的系统，也需要像组织一个东西一样，系统性的学习。</p>
<p>系统化的东西往往像《如何阅读一本书》里面描述一本书的复杂架构那样。</p>
<blockquote>
<p>没有一种物质或产品是绝对简单的。所有的东西都是复杂的组合体。当你看一个整体组成复杂的东西的时候，如果只看它如何呈现一体的面貌，那是还没有掌握精髓，你还必须要明白它怎样呈现多个的面貌，但不是各自为政、互不相干的多个面貌，而是互相融合成有机体的多个面貌。如果组成的各个部分没有有机的关联，仅仅是一个集合体罢了。</p>
<p>这就像是一堆砖头跟一栋又砖头建造起来的房子是有区别的。而单一的房子与建造的房子也不相同。一本书就像是一栋单一的房子。一栋大厦，拥有许多房间，每层楼都有房间，有不同的尺寸和形状，不同的外观，不同的用途，这些房间是独立的，分离的，每个房间都有自己的架构和装潢设计，但却不是完全独立与分离的，这些房间使用普通门 / 拱门 / 走廊 / 楼梯串联起来的，即建筑师错位的动线架构，因为这些架构师彼此联结的，因此每一个部分在整体的使用功能上要贡献出自己的力量。否则这栋房子便是不适合居住的。</p>
</blockquote>
<p>我的学一个东西的思路就是</p>
<blockquote>
<p>先模块化，用一个快速的方式获得全貌，接着不断分解模块为知识单元，最后连接各个子模块和知识单元</p>
</blockquote>
<p>下面的内容就是我组织入手学习编程语言思路。</p>
<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><h3 id="1-出生与成长"><a href="#1-出生与成长" class="headerlink" title="1. 出生与成长"></a>1. 出生与成长</h3><p>有的人认为所有的编程语言都是一样的，我不这么认为。</p>
<p>我觉得这种想法很初级，所有的编程语言都是有特点的，也是有优缺点的。</p>
<p>用一个朋友的爱说的很粗俗的例子：</p>
<blockquote>
<p>虽然说关了灯全都一个样，但是每一个女孩子都有是独一无二的存在。</p>
</blockquote>
<p>这个例子即便是我这种 23 年丰富单身经验的人，依然可以在第一时间捕捉到我这个段子手朋友的意思。</p>
<p>有的偏向于运行效率，有的偏向于开发效率。<br>有的据说是让人编程时候感到快乐 (ruby)，有的说你生命苦短，为什么不用 Python。<br>有的偏向于 Web 开发 (PHP)，有的偏向于并发操作<br>有的是 Windows 上面自动化的小白工具 (Autohotkey)<br>有的是据说是一次编译，到处运行 (Java)</p>
<p>编程语言往往是上面这些因素的取舍。偏向于运行效率的编程语言，往往开发效率就会打折。</p>
<h3 id="2-工具链"><a href="#2-工具链" class="headerlink" title="2. 工具链"></a>2. 工具链</h3><p>工欲善其事必先利其器，而这个器就是工具链。</p>
<p>工具链往往分为多种，有的是集成开发环境，有的是开发环境里面的 shell 脚本。</p>
<h3 id="4-文档"><a href="#4-文档" class="headerlink" title="4. 文档"></a>4. 文档</h3><p>官网的文档是最应该反复查看的东西，这是我现在依然喜欢强调的。</p>
<p>而官网的文档也分为四种</p>
<ul>
<li>一种是 tutorial      – 用于<strong>上手</strong>对应的软件 / 编程语言</li>
<li>一种是 guide         – 用于<strong> Topic Reading </strong></li>
<li>一种是 api document  – 用于<strong>查看细节</strong></li>
<li>一种是 RTFSC ( Read The Fucking Source Code ) 阅读源码</li>
</ul>
<blockquote>
<p>注: 把StackOverFlow中某个标签的Most Votes的答案,是除了大略看看tutorial之外的另一种快速熟悉入门时候的痛点的手段.</p>
</blockquote>
<p>当然，其实代码写的足够好的话本身就是一种注释。</p>
<h3 id="5-社区"><a href="#5-社区" class="headerlink" title="5. 社区"></a>5. 社区</h3><p>社区一般情况下都会有的，但有几个网站特别值得提出来</p>
<ul>
<li>官网上一般都会放一些比较出色的社区</li>
<li>Github</li>
<li>reddit</li>
<li>某个技术对应的 Weekly 订阅</li>
</ul>
<h3 id="6-书籍"><a href="#6-书籍" class="headerlink" title="6. 书籍"></a>6. 书籍</h3><p>特别值得一提的是有一个持续不断阅读到有趣的文章的方法 – Google 出对应的 书 / Weekly 周报 / 博客，比如 Python Weekly 然后订阅，接着不断的查看列入优质文章的作者的文章，Github 地址啦，他关注的 Repo 啦等等等等。</p>
<h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><blockquote>
<p> 程序 = 算法 + 数据结构</p>
</blockquote>
<p>这句话当然是不全面的，但并不影响这句话在计算机世界里面的地位。</p>
<p>依我看来，对我的启发大致是：</p>
<blockquote>
<p>我会把 API 的调用和数据结构以及算法想清楚，然后才动手把代码分解成伪代码。</p>
</blockquote>
<h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h3><p>数据类型按照不同的划分标准可以进行不同的划分：</p>
<p>按照复杂性可以这么划分：</p>
<ul>
<li>简单类型</li>
<li>复杂类型</li>
</ul>
<p>按照复杂性可以这么划分：</p>
<ul>
<li>基本类型</li>
<li>引用类型</li>
</ul>
<p>按照数据结构可以这么划分：</p>
<ul>
<li>集合结构 : 串</li>
<li>线性结构 : 线性表 （单链表，静态链表，循环链表，双向链表，<strong>栈，队列</strong>)</li>
<li>树形结构 : 树（二叉树，B+ 树，红黑树）</li>
<li>图形结构 : 图</li>
</ul>
<h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>对于一些基本的数据类型，操作为 加减乘除取余数位运算等等</p>
<p>对于复杂的一些数据类型，则需要对数据结构多一些了解。</p>
<p>比如，对队列而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对 hash 而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字典而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字符串而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？</p>
<p>那字符串来说，Java 推荐使用 StringBuilder 来合并多个字符串，Python 推荐 join 多个字符串等等。</p>
<h3 id="3-语句"><a href="#3-语句" class="headerlink" title="3. 语句"></a>3. 语句</h3><p>声明语句</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a</div><div class="line">String a</div><div class="line">let a</div></pre></td></tr></table></figure>
<blockquote>
<p>有的语言是无需声明的，但其实这有利有弊</p>
</blockquote>
<p>赋值语句</p>
<p>a = b 即是赋值语句，赋值比较简单。</p>
<blockquote>
<p>但，执行了赋值语句，编程经验丰富的人可能就会开各种各样的脑洞，比如，这个 b 值是不是一定赋值成功了呢？是不是引用了外部作用域的变量？</p>
</blockquote>
<p>条件语句</p>
<p>if else 语句，比较简单，需要注意的仅仅是有两点：</p>
<ol>
<li>判断的时候不确定操作符优先级的时候，加括号</li>
<li>尽量显式判断，不要用隐式判断。</li>
</ol>
<p>循环语句</p>
<ol>
<li>注意 Break 和 Continue</li>
</ol>
<h2 id="0x02-中级概念"><a href="#0x02-中级概念" class="headerlink" title="0x02 中级概念"></a>0x02 中级概念</h2><blockquote>
<p>代码组织</p>
</blockquote>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数或者叫做方法，叫法不同。</p>
<p>函数，我有个很私人的称呼，称它为最小操作模块。</p>
<p>实际上，在编程的过程中，程序员用面向对象的思想进行编码的人可能真的不是很多. 把一段长程序按照自己的需求进行切分成若干个函数的倒是比比皆是。</p>
<p>不过按照什么样子的标准来切分一段程序为多个函数，仁者见仁智者见智。</p>
<p>这里面需要注意的事情是：</p>
<ul>
<li><ol>
<li>注意传值（基本类型）和传引用（引用类型）</li>
</ol>
</li>
<li><ol>
<li>函数重载</li>
</ol>
</li>
</ul>
<p>对于不同的编程语言，传值（基本类型）和传引用（引用类型）基本上达成了共识。<br>但在实现函数重载的时候则是有所不同，</p>
<p>比如，Java 里面选择了多写几个函数，Python 则没有这个机制，不过，通过默认参数却可以曲线救国，实现这个机制。</p>
<p>递归<br>函数式编程<br>高阶函数 mapreduce/ filter / sorted / 返回函数 / 匿名函数 / 装饰器 / 偏函数</p>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">1</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        a = <span class="number">2</span></div><div class="line">    print(a)</div><div class="line"></div><div class="line">outer()</div><div class="line"><span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">1</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        a = <span class="number">2</span></div><div class="line">    print(a)</div><div class="line">    inner()</div><div class="line">    print(a)</div><div class="line"></div><div class="line">outer()</div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></div><div class="line">    a = [<span class="number">1</span>]</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        a.append(<span class="number">2</span>)</div><div class="line">    print(a)</div><div class="line">    inner()</div><div class="line">    print(a)</div><div class="line"></div><div class="line">outer()</div><div class="line"><span class="comment"># [1]</span></div><div class="line"><span class="comment"># [1, 2]</span></div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">var outer = function()&#123;</div><div class="line">    var a = 1;</div><div class="line">    var inner = function()&#123;</div><div class="line">        a = 2</div><div class="line">    &#125;;</div><div class="line">    console.log(a);</div><div class="line">    inner();</div><div class="line">    console.log(a);</div><div class="line">&#125;</div><div class="line">outer()</div><div class="line"># 1</div><div class="line"># 2</div><div class="line"></div><div class="line">var outer = function()&#123;</div><div class="line">    var a = 1;</div><div class="line">    var inner = function()&#123;</div><div class="line">        var a = 2</div><div class="line">    &#125;;</div><div class="line">    console.log(a);</div><div class="line">    inner();</div><div class="line">    console.log(a);</div><div class="line">&#125;</div><div class="line">outer()</div><div class="line"># 1</div><div class="line"># 1</div></pre></td></tr></table></figure>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块，这个概念，可大可小，大的时候，把一个程序说成是模块，小的时候，可以把一个文件，甚至你说这一个函数是一个模块，也行。</p>
<p>这里的模块指的是一个包下的函数。</p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象有三大概念：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
<h3 id="错误-调试测试"><a href="#错误-调试测试" class="headerlink" title="错误 / 调试测试"></a>错误 / 调试测试</h3><p>异常处理实际上可以考验一个程序员编写代码的健壮性。</p>
<p>事实上来说，代码写的健壮是一个程序员必备的素养. 但其实在开发过程中，出于对项目进行赶工上线，需要对程序的健壮性做出一定的取舍. 并且，在编写客户端，服务端，网页前端的时候基本上都会遇到这个问题. 什么时候选择健壮的程序，什么时候选择是还可以的程序. 需要自己的经验。</p>
<h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h2 id="0x03-高级技巧"><a href="#0x03-高级技巧" class="headerlink" title="0x03 高级技巧"></a>0x03 高级技巧</h2><h2 id="0x04-标准库"><a href="#0x04-标准库" class="headerlink" title="0x04 标准库"></a>0x04 标准库</h2><h3 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h3><h3 id="系统化模块"><a href="#系统化模块" class="headerlink" title="系统化模块"></a>系统化模块</h3><ol>
<li>Introduction</li>
<li>Built-in Functions</li>
<li>Built-in Constants</li>
<li>Built-in Types</li>
<li>Built-in Exceptions</li>
<li>Text Processing Services</li>
<li>Binary Data Services</li>
<li>Data Types</li>
<li>Numeric and Mathematical Modules</li>
<li>Functional Programming Modules</li>
<li>File and Directory Access</li>
<li>Data Persistence</li>
<li>Data Compression and Archiving</li>
<li>File Formats</li>
<li>Cryptographic Services</li>
<li>Generic Operating System Services</li>
<li>Concurrent Execution</li>
<li>Interprocess Communication and Networking</li>
<li>Internet Data Handling</li>
<li>Structured Markup Processing Tools</li>
<li>Internet Protocols and Support</li>
<li>Multimedia Services</li>
<li>Internationalization</li>
<li>Program Frameworks</li>
<li>Graphical User Interfaces with Tk</li>
<li>Development Tools</li>
<li>Debugging and Profiling</li>
<li>Software Packaging and Distribution</li>
<li>Python Runtime Services</li>
<li>Custom Python Interpreters</li>
<li>Importing Modules</li>
<li>Python Language Services</li>
<li>Miscellaneous Services</li>
<li>MS Windows Specific Services</li>
<li>Unix Specific Services</li>
<li>Superseded Modules</li>
<li>Undocumented Modules</li>
</ol>
<h2 id="0x05-第三方库"><a href="#0x05-第三方库" class="headerlink" title="0x05 第三方库"></a>0x05 第三方库</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文的内容都是一些个人的比较虚的经验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍，我从 Autohotkey 开始学习编程开始，陆陆续续学习了 C , C++ , Java 6,Delphi 7 , Ruby , Python , JavaScript , 学的很多，很杂，我觉得我上手一门编程语言是完全没有什么心理上的障碍的，可是我觉得我应该是还有很大提升的空间的。&lt;/p&gt;
    
    </summary>
    
      <category term="学习资源" scheme="http://twocucao.xyz/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="编程工具" scheme="http://twocucao.xyz/tags/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Thinking In Python Language</title>
    <link href="http://twocucao.xyz/2017/03/21/ThinkingInPython/"/>
    <id>http://twocucao.xyz/2017/03/21/ThinkingInPython/</id>
    <published>2017-03-21T12:05:00.000Z</published>
    <updated>2017-06-04T00:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文的内容都是一些简略的笔记。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍这个过程中结合自己的开发常见场景记录下来的一些笔记。</p>
<a id="more"></a>
<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><h3 id="1-为什么是-Python"><a href="#1-为什么是-Python" class="headerlink" title="1. 为什么是 Python"></a>1. 为什么是 Python</h3><p>选 Python, 很大程度上是因为 Python 的快速开发。</p>
<p>当然，快速开发（这里的开发包含部署）这个词也往往会被误解。什么叫做快速？我用一个 CMS 框架快速搭建出一个网站这是否叫做快速？</p>
<ul>
<li>每一次部署的时候，如果使用 Java 或者是 Go, 部署的时候直接 maven 编译打包，接着把 War 包直接上传到 Tomcat 就结束了。而用 Python 则需要各种虚拟环境，各种稀里哗啦的配置。这种情况下是哪一种快速呢？</li>
</ul>
<p>Python 有什么好处呢？</p>
<ul>
<li>写代码效率高</li>
<li>生态圈好</li>
</ul>
<p>写代码效率高，这指的是写 Python 代码，而不是运行时。</p>
<p>生态圈好，Web 开发用 Django/Flask , 数据抓取用 Requests , 数据分析清洗用 Pandas, 数据</p>
<h3 id="2-工具链"><a href="#2-工具链" class="headerlink" title="2. 工具链"></a>2. 工具链</h3><h3 id="4-文档"><a href="#4-文档" class="headerlink" title="4. 文档"></a>4. 文档</h3><h3 id="5-社区"><a href="#5-社区" class="headerlink" title="5. 社区"></a>5. 社区</h3><h3 id="6-书籍"><a href="#6-书籍" class="headerlink" title="6. 书籍"></a>6. 书籍</h3><h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><blockquote>
<p> 程序 = 算法 + 数据结构</p>
</blockquote>
<p>这句话当然是不全面的，但并不影响这句话在计算机世界里面的地位。</p>
<p>依我看来，对我的启发大致是：</p>
<blockquote>
<p>我会把 API 的调用和数据结构以及算法想清楚，然后才动手把代码分解成伪代码。</p>
</blockquote>
<h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h3><p>数据类型按照不同的划分标准可以进行不同的划分：</p>
<p>按照复杂性可以这么划分：</p>
<ul>
<li>简单类型</li>
<li>复杂类型</li>
</ul>
<p>按照复杂性可以这么划分：</p>
<ul>
<li>基本类型</li>
<li>引用类型</li>
</ul>
<p>按照数据结构可以这么划分：</p>
<ul>
<li>集合结构 : 串</li>
<li>线性结构 : 线性表 （单链表，静态链表，循环链表，双向链表，<strong>栈，队列</strong>)</li>
<li>树形结构 : 树（二叉树，B+ 树，红黑树）</li>
<li>图形结构 : 图</li>
</ul>
<h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>对于一些基本的数据类型，操作为 加减乘除取余数位运算等等</p>
<p>对于复杂的一些数据类型，则需要对数据结构多一些了解。</p>
<p>比如，对队列而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对 hash 而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字典而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字符串而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？</p>
<p>那字符串来说，Java 推荐使用 StringBuilder 来合并多个字符串，Python 推荐 join 多个字符串等等。</p>
<h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><h3 id="3-语句"><a href="#3-语句" class="headerlink" title="3. 语句"></a>3. 语句</h3><h2 id="0x02-中级概念"><a href="#0x02-中级概念" class="headerlink" title="0x02 中级概念"></a>0x02 中级概念</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块，这个概念，可大可小，大的时候，把一个程序说成是模块，小的时候，可以把一个文件，甚至你说这一个函数是一个模块，也行。</p>
<p>这里的模块指的是一个包下的函数。</p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象有三大概念：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
<h3 id="错误-调试测试"><a href="#错误-调试测试" class="headerlink" title="错误 / 调试测试"></a>错误 / 调试测试</h3><p>异常处理实际上可以考验一个程序员编写代码的健壮性。</p>
<p>事实上来说，代码写的健壮是一个程序员必备的素养。但其实在开发过程中，出于对项目进行赶工上线，需要对程序的健壮性做出一定的取舍。并且，在编写客户端，服务端，网页前端的时候基本上都会遇到这个问题。什么时候选择健壮的程序，什么时候选择是还可以的程序。需要自己的经验。</p>
<h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><blockquote>
<p>Python 多线程约等于并发。</p>
</blockquote>
<h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><h4 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h4><p>Global Interpreter Lock</p>
<p>并不是所有的解释器语言都有 GIL （尽管 Python 和 Ruby 里面都有）, 也并不是没有尝试过去除 GIL, 但是每次去除都会导致单线程性能的下降。所以暂时保留。</p>
<p>GIL 对程序中的影响：</p>
<blockquote>
<p>一个线程运行 Python , 而其他 N 个睡眠或者等待 I/O - <strong>同一时刻只有一个线程对共享资源进行存取</strong> , Python 线程也可以等待 threading.Lock 或者线程模块中的其他同步对象；</p>
</blockquote>
<h5 id="协同式多任务处理"><a href="#协同式多任务处理" class="headerlink" title="协同式多任务处理"></a>协同式多任务处理</h5><p>如果有两个线程，同时进行 IO 请求，当其中一个线程连接之后，立即会<strong>主动让出 GIL</strong>, 其他线程就可以运行。</p>
<blockquote>
<p>当 N 个线程在网络 I/O 堵塞，或等待重新获取 GIL，而一个线程运行 Python。</p>
</blockquote>
<p>让出之后还要执行代码呀，所以要有个收回 GIL 的动作。</p>
<h5 id="抢占式多任务处理"><a href="#抢占式多任务处理" class="headerlink" title="抢占式多任务处理"></a>抢占式多任务处理</h5><p>Python 2 GIL , 尝试收回GIL为 执行 1000 字节码。<br>Python 3 GIL , 尝试收回GIL检测间隔为 15ms</p>
<h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>原子操作：sort 之类不需要<br>非原子操作：n=n+2 的字节码分为 加载 n , 加载 2 , 相加，存储 n, 四个步骤，由于不是原子性，很可能被由于 15 ms 而被打断。</p>
<p>当然，懒人一向是 : <strong>优先级不决加括号，线程不决加 lock</strong></p>
<p>对于 Java, 程序员努力在尽可能短的时间内加锁存取共享数据，减轻线程的争夺，实现最大并行。但 Python 中，线程无法并行运行，细粒度的锁就没有了优势。</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h2 id="0x03-高级技巧"><a href="#0x03-高级技巧" class="headerlink" title="0x03 高级技巧"></a>0x03 高级技巧</h2><h2 id="0x04-标准库"><a href="#0x04-标准库" class="headerlink" title="0x04 标准库"></a>0x04 标准库</h2><h3 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h3><h3 id="系统化模块"><a href="#系统化模块" class="headerlink" title="系统化模块"></a>系统化模块</h3><ol>
<li>Introduction</li>
<li>Built-in Functions</li>
<li>Built-in Constants</li>
<li>Built-in Types</li>
<li>Built-in Exceptions</li>
<li>Text Processing Services</li>
<li>Binary Data Services</li>
<li>Data Types</li>
<li>Numeric and Mathematical Modules</li>
<li>Functional Programming Modules</li>
<li>File and Directory Access</li>
<li>Data Persistence</li>
<li>Data Compression and Archiving</li>
<li>File Formats</li>
<li>Cryptographic Services</li>
<li>Generic Operating System Services</li>
<li>Concurrent Execution</li>
<li>Interprocess Communication and Networking</li>
<li>Internet Data Handling</li>
<li>Structured Markup Processing Tools</li>
<li>Internet Protocols and Support</li>
<li>Multimedia Services</li>
<li>Internationalization</li>
<li>Program Frameworks</li>
<li>Graphical User Interfaces with Tk</li>
<li>Development Tools</li>
<li>Debugging and Profiling</li>
<li>Software Packaging and Distribution</li>
<li>Python Runtime Services</li>
<li>Custom Python Interpreters</li>
<li>Importing Modules</li>
<li>Python Language Services</li>
<li>Miscellaneous Services</li>
<li>MS Windows Specific Services</li>
<li>Unix Specific Services</li>
<li>Superseded Modules</li>
<li>Undocumented Modules</li>
</ol>
<h2 id="0x05-第三方库"><a href="#0x05-第三方库" class="headerlink" title="0x05 第三方库"></a>0x05 第三方库</h2><ul>
<li>Requests : API 人性化</li>
</ul>
<h2 id="0x06-代码质量"><a href="#0x06-代码质量" class="headerlink" title="0x06 代码质量"></a>0x06 代码质量</h2><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><ul>
<li>外部<strong>不该</strong>引用 protected member （单下划线）</li>
<li>lambda 为一次使用，最好不要赋值。</li>
<li>不要给 buildin 函数赋值</li>
<li>py3 直接 super()</li>
<li>for in else 如果不内置 break 则出会在最后 for in 为 empty 的时候再执行 else 中的语句</li>
<li>context exit 如果不 catch 掉异常让其自然向上一级抛出错误的话，必须为 (self, exception_type, exception_value, traceback):</li>
<li>不要在 init 里面 return 数据</li>
<li>不要混用 tab 和 space</li>
<li>4 个 space 缩进</li>
<li>staticmethod 直接是 参数，classmethod 第一个参数为 cls</li>
<li>可变的 default value 是不能作为 参数的。（可能是解释器在确定函数的定义的时候完成赋值？)</li>
<li>遵循 exception hierachy <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" target="_blank" rel="external">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></li>
<li>defaultdict defaultdict(lambda : 6) , 必须 callable</li>
<li>尽量 unpack 赋值</li>
<li>字典用获取用 get(“myk”,None) , 赋值用 dictionary.setdefault(“list”, []).append(“list_item”)</li>
</ul>
<h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><ul>
<li>避免使用 import * , 我觉得这点值得商榷 , 如果是某个模块下，完全可以先把模块拆分成多个，最后 import 进来，接着使用 all.</li>
<li>getxxx 获取实际值，如果不为实际值，返回 None 显然不如 try catch 来的实在。</li>
<li>避免使用 global</li>
<li>命名要注意</li>
<li>动态创建方法 , 我觉得这点值得商榷。</li>
</ul>
<h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><ul>
<li>不要检查，如果可能有异常，尽量抛出异常来 trycatch 解决。</li>
<li>a is None , if flag</li>
<li>isinstance , not type(r) is types.ListType</li>
<li>“{name}{city}”.format(**info_dict)</li>
<li>for k , v in infodict.items()</li>
<li>使用 poiinfo = namedtuple(“poiinfo”,[“name”,”lng”,”lat”]) 返回 poiinfo[‘上海’,121.00,23] 最后返回值打印 poi.name , poi.lng , poi lat</li>
<li>for numbers_value, letters_value in zip(numbers, letters):</li>
<li>enumerate</li>
<li>如果能用 listcomp 则不使用 map 和 filter</li>
</ul>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ul>
<li>用 set</li>
<li>d.iteritems() 比 items() 省内存</li>
</ul>
<h2 id="0xEE-文章更新"><a href="#0xEE-文章更新" class="headerlink" title="0xEE 文章更新"></a>0xEE 文章更新</h2><ul>
<li><strong>2017-05-11 19:43:00</strong> : 增加代码质量模块</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文的内容都是一些简略的笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍这个过程中结合自己的开发常见场景记录下来的一些笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="学习资源" scheme="http://twocucao.xyz/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="编程工具" scheme="http://twocucao.xyz/tags/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>『如何阅读一本书』读书笔记</title>
    <link href="http://twocucao.xyz/2017/02/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    <id>http://twocucao.xyz/2017/02/10/读书笔记_如何阅读一本书/</id>
    <published>2017-02-10T15:54:00.000Z</published>
    <updated>2017-03-14T02:31:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>选择了这本书进行精读是有原因的：</p>
<blockquote>
<p>在一个需要大量阅读的时代里，读东西更加有策略。</p>
</blockquote>
<p>记得大约是初三的考试比赛，监考老师发了卷子，我们这些人拿到卷子捋起袖子就是写，而监考老师说了一句话：</p>
<blockquote>
<p>先看看卷子，然后再写，不要上来就做题。</p>
</blockquote>
<p>虽然那次考试并不算理想，最大的收获应该就是这句话。</p>
<blockquote>
<p>通过’先预估，然后再做’的意识，我应该是少走了一些弯路的。至少工作效率稍微提升了一些。</p>
</blockquote>
<p>但，有了这个先预估一下，然后再做的意识可以减少很多问题，然而并不能更好解决的问题。因为意识这玩意，不是方法，不是策略。知道考虑火候，不懂得把握火候照样做不出好菜。</p>
<a id="more"></a>
<p>对应到我看这本书的目的，即是，当需要我能在捋起袖子干之前，找到一个更好的策略，对读书，有一个更好的方法。而不是仅仅是埋下头一通看。</p>
<p>也是为了给自己更好的啃源码，看文档激发一些更好的灵感。</p>
<p>这是从非专业领域里面找灵感的一种方式，即所谓：汝果欲学诗，工夫在诗外。</p>
<h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again -->
<p><strong>Table of Contents</strong></p>
<ul>
<li><a href="#-">-</a></li>
<li><a href="#本文目录">本文目录</a></li>
<li><a href="#如何阅读一本书目录简评">《如何阅读一本书》目录简评</a></li>
<li><a href="#问与答">问与答</a><ul>
<li><a href="#cq1- 本书整体讲了什么">CQ1: 本书整体讲了什么？</a></li>
<li><a href="#sq1- 较好的阅读一本书的步骤">SQ1: 较好的阅读一本书的步骤</a><ul>
<li><a href="#确定要补充那些知识 -- 技能体系">确定要补充那些知识 / 技能体系</a></li>
<li><a href="#筛选书籍阶段 -- 过滤不适合的书">筛选书籍阶段 : 过滤不适合的书</a></li>
<li><a href="#检视阅读阶段 -- 判断一本书的质量">检视阅读阶段 : 判断一本书的质量</a><ul>
<li><a href="#检视阅读阶段 -step1-- 大体定位这本书">检视阅读阶段 STEP1 : 大体定位这本书。</a></li>
<li><a href="#检视阅读阶段 -step2-">检视阅读阶段 STEP2 :</a></li>
<li><a href="#检视阅读的一些误区：">检视阅读的一些误区：</a></li>
<li><a href="#分析阅读阶段 -- 全方位吃透这本书">分析阅读阶段 : 全方位吃透这本书</a><ul>
<li><a href="#分析阅读第一阶段：找出一本书在谈写什么的规则">分析阅读第一阶段：找出一本书在谈写什么的规则</a></li>
<li><a href="#分析阅读第二阶段：诠释一本书的内容的规则">分析阅读第二阶段：诠释一本书的内容的规则。</a></li>
<li><a href="#分析阅读第三阶段：评论一本书的规则">分析阅读第三阶段：评论一本书的规则</a></li>
</ul>
</li>
<li><a href="#主题阅读阶段 -- 纳入自己的知识体系">主题阅读阶段 : 纳入自己的知识体系</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sq2- 上面关于阅读一本书的步骤是适用于所有书即使通用的步骤吗">SQ2: 上面关于阅读一本书的步骤是适用于所有书，即使通用的步骤吗？</a><ul>
<li><a href="#分析阅读之如何阅读实用型的书">分析阅读之如何阅读实用型的书</a></li>
<li><a href="#分析阅读之如何阅读历史书">分析阅读之如何阅读历史书</a></li>
</ul>
</li>
<li><a href="#sq3- 关于读书的有哪些误区">SQ3: 关于读书的有哪些误区</a><ul>
<li><a href="#速读">速读</a></li>
<li><a href="#随便翻翻">随便翻翻</a></li>
<li><a href="#陷入细枝末节">陷入细枝末节</a></li>
</ul>
</li>
<li><a href="#eq1- 为什么要重新学习如何阅读书籍的策略与方法">EQ1: 为什么要<strong>重新学习</strong>如何阅读书籍的策略与方法</a></li>
</ul>
</li>
<li><a href="#相关链接">相关链接</a></li>
</ul>
<!-- markdown-toc end -->
<h2 id="《如何阅读一本书》目录简评"><a href="#《如何阅读一本书》目录简评" class="headerlink" title="《如何阅读一本书》目录简评"></a>《如何阅读一本书》目录简评</h2><p>本书的翻译版书籍的目录如下：</p>
<ul>
<li>第一篇：阅读的层次<ul>
<li>ch01: 阅读的活力与艺术</li>
<li>ch02: 阅读的层次</li>
<li>ch03: 阅读的第一个层次：基础阅读</li>
<li>ch04: 阅读的第二个层次：检视阅读</li>
<li>ch05: 如何做一个自我要求的读者</li>
</ul>
</li>
<li>第二篇：阅读的第三个层次：分析阅读<ul>
<li>ch06: 一本书的分类</li>
<li>ch07: 透视一本书</li>
<li>ch08: 与作者找出共通的词义</li>
<li>ch09: 判断作者的主旨</li>
<li>ch10: 公正的评断一本书</li>
<li>ch11: 赞同或反对作者</li>
<li>ch12: 辅助阅读</li>
</ul>
</li>
<li>第三篇：阅读不同读物的方法<ul>
<li>ch13: 如何阅读实用型的书</li>
<li>ch14: 如何阅读想象文学</li>
<li>ch15: 阅读故事，戏剧，诗的一些建议</li>
<li>ch16: 如何阅读历史书</li>
<li>ch17: 如何阅读科学和数学</li>
<li>ch18: 如何阅读哲学书</li>
<li>ch19: 如何阅读社会科学</li>
</ul>
</li>
<li>第四篇：阅读的最终目标<ul>
<li>ch20: 阅读的第四个层次：主题阅读</li>
<li>ch21: 阅读与心智的成长</li>
</ul>
</li>
</ul>
<p>这本书的目录看起来比较奇怪，分为四个部分，但是第一篇和第二篇分类比较混乱，ch03,ch04, 第二篇，ch20 不是应该是同一级嘛？</p>
<p>以为找英文原版的目录拿来对照，译者还是严格的遵守了原文目录的排布。</p>
<p>译者把<strong>Part</strong>翻译为<strong>篇</strong>, 我觉得就直接翻译为<strong>部分</strong>比较好。整理目录，补充一部分 Part,Chapter,Section 的标题。</p>
<p>于是做了点体力活，把英文书籍的目录部分搬运过来。</p>
<ul>
<li>第一篇：阅读的层次 <the dimensions="" of="" reading=""><ul>
<li>ch01: 阅读的活力与艺术 <the activity="" and="" art="" of="" reading=""><ol>
<li>Active Reading</li>
<li>The Goals of Reading: Reading for Information and Reading for Understanding</li>
<li>Reading as Learning: The Difference Betweenn Learning By Instruction and Learning by Instruction and Learning by Discovery</li>
<li>Present and Absent Teachers</li>
</ol>
</the></li>
<li>ch02: 阅读的层次 <the levels="" of="" reading=""></the></li>
<li>ch03: 阅读的第一个层次：基础阅读 <the first="" level="" of="" reading:="" elementary="" reading=""><ol>
<li>Stages Of Learning to Read</li>
<li>Stages and Levels</li>
<li>Higher Levels of Reading and Higher Education</li>
<li>Reading and the Democratic Ideal of Education</li>
</ol>
</the></li>
<li>ch04: 阅读的第二个层次：检视阅读 <the second="" level="" of="" reading:="" inspectional="" reading=""><ol>
<li>Inspectional Reading I: Systemmatic Skimming or Pre-reading</li>
<li>Inspectional Reading II: Superficial Reading</li>
<li>On Reading Speeds</li>
<li>Fixations and Regressions</li>
<li>The Problem of Comprehension</li>
<li>Summary of Inspectional Reading</li>
</ol>
</the></li>
<li>ch05: 如何做一个自我要求的读者 <how to="" be="" a="" demanding="" reader=""><ol>
<li>The Essence of Active Reading: The Four Basic Questions a Reader Asks</li>
<li>How to Make a Book Your Own</li>
<li>The Three Kinds of Note-making</li>
<li>Forming the Habit of Reading</li>
<li>From Many Rules to One Habit</li>
</ol>
</how></li>
</ul>
</the></li>
<li>第二篇：阅读的第三个层次：分析阅读 <the third="" level="" of="" reading:="" analytical="" reading=""><ul>
<li>ch06: 分类一本书 <pigeonholing a="" book=""><ol>
<li>The Importance of Classifying Books</li>
<li>What You Can Learn from the Title of a Book</li>
<li>Practical vs. Theoretical Books</li>
<li>Kinds of Theoretical Books</li>
</ol>
</pigeonholing></li>
<li>ch07: 透视一本书 <x-raying a="" book=""><ol>
<li>Of Plots and Plans: Stating the Unity of a Book</li>
<li>Mastering the Multiplicity: The Art of Outlining a Book</li>
<li>The Reciprocal Arts of Reading and Writing</li>
<li>Discovering the Author’s Intentions</li>
<li>The First Stage of Analytical Reading</li>
</ol>
</x-raying></li>
<li>ch08: 与作者找出共通的词义 <coming to="" terms="" with="" and="" author=""><ol>
<li>Words vs. Terms</li>
<li>Finding the Key Words</li>
<li>Technical Words and Special Vocabularies</li>
<li>Finding the Meanings</li>
</ol>
</coming></li>
<li>ch09: 判断作者的主旨 &lt;Determing an Author’s Message&gt;<ol>
<li>Sentences vs. Propositions</li>
<li>Finding the Key Sentences</li>
<li>Finding the Arguments</li>
<li>Finding the Solutions</li>
<li>The Second Stage of Analytical Reading</li>
</ol>
</li>
<li>ch10: 公正的评断一本书 <critizing a="" book="" fairly=""><ol>
<li>Teachability as a Virtue</li>
<li>The Role of Rhetoric</li>
<li>The importance of Suspending Judgement</li>
<li>The Importance of Avoiding Contentiousness</li>
<li>On the Resolution of Disagreements</li>
</ol>
</critizing></li>
<li>ch11: 赞同或反对作者 <agreeing or="" disagreeing="" with="" an="" author=""><ol>
<li>Prejudice and Judgment</li>
<li>Judging the Author’s Soundness</li>
<li>Judging the Author’s Completeness</li>
<li>The Third Stage of Analytical Reading</li>
</ol>
</agreeing></li>
<li>ch12: 辅助阅读 <aids to="" reading=""><ol>
<li>The Role Of Relevant Experience</li>
<li>Other Books as Extrinsic Aids to Reading</li>
<li>How to Use Commentaries and Abstracts</li>
<li>How to Reference Books</li>
<li>How to Use a Dictionary</li>
<li>How to Use an Encyclopedia</li>
</ol>
</aids></li>
</ul>
</the></li>
<li>第三篇：阅读不同读物的方法 <approaches to="" different="" kinds="" of="" reading="" matter=""><ul>
<li>ch13: 如何阅读实用型的书 <how to="" read="" practical="" books=""><ol>
<li>The Two Kinds of Practical Books</li>
<li>The Role of Persuation</li>
<li>What Does Agreement Entail in the Case of a Practical Book?</li>
</ol>
</how></li>
<li>ch14: 如何阅读想象文学 <how to="" read="" imaginative="" literature=""><ol>
<li>How Not to Read Imageinative Literature</li>
<li>Genaral Rules for Reading Imaginative Literature</li>
</ol>
</how></li>
<li>ch15: 阅读故事，戏剧，诗的一些建议 <suggestion for="" reading="" stories="" ,="" plays="" and="" poems=""><ol>
<li>How to Read Stories</li>
<li>A Note About Epics</li>
<li>How to Read Plays</li>
<li>A Note About Tragedy</li>
<li>How to Read Lyric Poetry</li>
</ol>
</suggestion></li>
<li>ch16: 如何阅读历史书 <how to="" read="" history=""><ol>
<li>The Elusiveness of Historial Facts</li>
<li>Theories of History</li>
<li>Questions to Ask of Historical Book</li>
<li>How to Reading Biography and Autobiography</li>
<li>How to Read About Current Events</li>
<li>A Note on Digests</li>
</ol>
</how></li>
<li>ch17: 如何阅读科学和数学 <how to="" read="" science="" and="" mathematics=""><ol>
<li>Understanding the Scientific Enterprise</li>
<li>Suggestions for Reading Classical Scientific Books</li>
<li>Facing the Problem of Mathematics</li>
<li>Handlding the Mathematics in Scientific Books</li>
<li>A Note on Popular Science</li>
</ol>
</how></li>
<li>ch18: 如何阅读哲学书 <how to="" read="" philosophy=""><ol>
<li>The Questions Philosophers Ask</li>
<li>Modern Philosophy and the Great Tradition</li>
<li>On Philosophical Method</li>
<li>On Philosophical Styles</li>
<li>Hints for Reading Philosophy</li>
<li>On Making Up Your Own Mind</li>
<li>A Note on Theology</li>
<li>How to Read “Canoncial”</li>
</ol>
</how></li>
<li>ch19: 如何阅读社会科学 <how to="" read="" social="" science=""><ol>
<li>What Is Social Science?</li>
<li>The Apparent Ease of Reading Social Science</li>
<li>Didfficulties of Reading Social Science</li>
<li>Reading Social Science Literature</li>
</ol>
<ul>
<li>第四篇：阅读的最终目标 <the ultimate="" goals="" of="" reading=""></the></li>
</ul>
</how></li>
<li>ch20: 阅读的第四个层次：主题阅读 <the fourth="" level="" of="" reading:="" syntopical="" reading=""><ol>
<li>The Role of Inspection in Syntopical Reading</li>
<li>The Five Steps in Syntopical Reading</li>
<li>The Need for Objectivity</li>
<li>An Example of an Exercise in Syntopical Reading: The Idea of Progress</li>
<li>The Syntopicon and How to Use It</li>
<li>On the Principles That Underlie Syntopical Reading</li>
<li>Summary of Syntopical Reading</li>
</ol>
</the></li>
<li>ch21: 阅读与心智的成长 <reading and="" the="" growth="" of="" mind=""><ol>
<li>What Good Books Can Do For Us</li>
<li>The Pyramid of Books</li>
<li>The Life and Growth of the Mind</li>
</ol>
</reading></li>
</ul>
</approaches></li>
</ul>
<h2 id="问与答"><a href="#问与答" class="headerlink" title="问与答"></a>问与答</h2><p>如何阅读一本书里面有很多技巧，其中有个就是通过<strong>提问</strong>的方式来使得读书效率更高。</p>
<p>下文是我在读这本书之前和读这本书之后提出的部分问题，挑选一部分写出来作为自己的读书笔记。</p>
<p>我把提问类型标记为如下：</p>
<ul>
<li>CQ  Common Question   : 所有书提问。</li>
<li>SQ  Specific Question : 本类书提问。</li>
<li>EQ  Extended Question : 脑洞类提问。</li>
</ul>
<h3 id="CQ1-本书整体讲了什么？"><a href="#CQ1-本书整体讲了什么？" class="headerlink" title="CQ1: 本书整体讲了什么？"></a>CQ1: 本书整体讲了什么？</h3><blockquote>
<p>You see, but you do not observe. The distinction is clear.</p>
<ul>
<li>Sherlock Holmes/Arthur Conan Doyle, A Scandal in Bohemia (1891)</li>
</ul>
</blockquote>
<p>一句话概括：</p>
<blockquote>
<p>本书讲的是读书的策略与技巧 (HOW).</p>
</blockquote>
<p>再详细一些：</p>
<blockquote>
<p>本书讲的是，当面对不同层次的书，不同种类的书，同一本书的不同部分，挑书，看书，读书，吃透书的策略与技巧。</p>
</blockquote>
<p>作者从阅读的活力与艺术入手，介绍了阅读的必要性，然后介绍了阅读的四种层次，接着点出了阅读层次的进入一些阅读层次的要求，方法，技巧。着重介绍了分析阅读，以及面对各种各样的读物的阅读技巧。</p>
<p>第一部分 花了一章简单的介绍了基础阅读。花了一章介绍了检视阅读，附加另一章介绍做一个自我要求的读者。</p>
<p>接着是第二部分重点介绍阅读的第三个层次，分析阅读：</p>
<p>这个层次需要</p>
<ul>
<li>『分类这本书』</li>
<li>『透视这本书』</li>
<li>『判断作者主旨』</li>
<li>『评断一本书』</li>
<li>『赞同或者反对』</li>
</ul>
<p>PS: 译者把 Pigeonholing a Book 翻译为一本书的分类，这个放在标题上和分类一本书意思相差大了。</p>
<p>也介绍了辅助阅读的通用的一些方法和手段。</p>
<p>接着进入第三部分，作者用自己的经验来分享对于每一种不同类型（阅读使用类书籍，想象文学，故事 / 戏剧 / 诗篇，历史，科学与数学，哲学，社科）的书籍，有哪些注意点（抓重点）, 有哪些技巧。</p>
<p>第四个部分则是介绍了阅读的终极目的：</p>
<p>其实每一个人的读书都是主题阅读</p>
<p>挑选《沟通的艺术》基本上都是为了提升沟通上的技巧。换而言之，其实我们都是为了丰富自己在沟通上面的知识体系从而选择了看这本书。</p>
<p>当然，作者并不是新造一个概念，然后一本正经的说没有干货的道理，作者还举了一个例子用于如何在主题之间作取舍，更加有条理的去看某些类别的书。</p>
<h3 id="SQ1-较好的阅读一本书的步骤"><a href="#SQ1-较好的阅读一本书的步骤" class="headerlink" title="SQ1: 较好的阅读一本书的步骤"></a>SQ1: 较好的阅读一本书的步骤</h3><h4 id="确定要补充那些知识-技能体系"><a href="#确定要补充那些知识-技能体系" class="headerlink" title="确定要补充那些知识 / 技能体系"></a>确定要补充那些知识 / 技能体系</h4><blockquote>
<p>“Some books are to be tasted, others to be swallowed, and some few to be chewed and digested” - Francis Bacon</p>
</blockquote>
<p>有的书适合浅尝，有的书适合吞咽，只有少部分适合咀嚼和消化到变为身体的一部分。 培根对书归类的这句话相当形象。</p>
<p>看书除非是热爱读书，否则随便拿起一本书，实在是难以激发自己探索这本书的冲动。</p>
<p>而，这里面有一个隐藏的问题，就是<strong>要补充哪些知识 / 技能体系</strong>, 首先是要知道有哪些知识体系。</p>
<ul>
<li>维护健康</li>
<li>高效自学</li>
<li>逻辑思考</li>
<li>规划管理</li>
<li>沟通表达</li>
<li>团队协作</li>
<li>……</li>
</ul>
<h4 id="筛选书籍阶段-过滤不适合的书"><a href="#筛选书籍阶段-过滤不适合的书" class="headerlink" title="筛选书籍阶段 : 过滤不适合的书"></a>筛选书籍阶段 : 过滤不适合的书</h4><blockquote>
<p>目的：用一些比较通用的技巧筛选出书籍。然后进入下一阶段</p>
</blockquote>
<p>技巧：</p>
<ul>
<li>泛读书衣：书衣和封面是重要的宣传点，书衣没有亮点。基本上这本书也不会有太大亮点。</li>
<li>泛读封面：<ul>
<li>出版社不行，基本上这本书也不行，出版社的可能在某个领域特别牛，比如图灵 / 机械在计算机方面特别牛，我就特别青睐于选这两家的新出来的技术书籍。但不管外面怎么说，反正我自从不考试了之后，我就拒绝看清华大学出版社的所有计算机相关的书籍。清华大学出版社的计算机类作者就几乎进入了我的计算机不读书籍作者的黑名单。</li>
<li>作者的其他书不行，新书八成也不怎么样。作者有一本书写的巨牛无比，他的其他书籍也不会差到哪里去。假如《母猪的产后护理》质量很高甚至连高科技养猪的网易老总都专门给这本书作序，那作者的《世界如此残酷，你一定要内心强大》一定是另一本仙风道骨的自传。</li>
<li>一本精心构造的书的内容，插画都是有一定的寓意的。很少有作家出一本书是忍心让自己的书封面长的巨丑。</li>
<li>这也需要注意的是：有的烂作品也会在封面下一番功夫，这就需要进入下一阶段的的探索了。</li>
<li>版次越高，则越好。</li>
<li>印次越高，则越好。</li>
<li>首印数量很少，则出版社对这本书没有多大信心。</li>
<li>编著，著是原创，编则是整合。</li>
<li>如果可以的话，优先阅读英文书。</li>
<li>豆瓣和亚马逊的书评。</li>
</ul>
</li>
<li>泛读目录：好的书籍的目录一定是（注意是一定是）逻辑清晰，结构层次分明，足以概括该章节的，甚至对如果稍微懂一点点的人，仅仅凭着目录就可以脑补出整本书的结构。</li>
<li>其他技巧：比如，直接买某个社群推荐的书单。我在不懂编程的时候就是这么做的。当然，后来稍微入了编程的大门才发现当初买了很多烂书。当然，用别人的书单也会逐渐让自己挑选书的能力退化。</li>
</ul>
<p>如果不适合口味，比如你想看《面向对象编程思想》过程中的翻到了一本《找对象，就这么做》的书，果断换一本；或者这书质量实在是太差，比如你翻到了《公猪在母猪的产后护理过程中不得不做的 138 件小事》, 书总共就 350 页，居然讲什么是母猪花了 147.6 页，果断换一本书。这样你就节约了看一本不合适的书的时间。</p>
<h4 id="检视阅读阶段-判断一本书的质量"><a href="#检视阅读阶段-判断一本书的质量" class="headerlink" title="检视阅读阶段 : 判断一本书的质量"></a>检视阅读阶段 : 判断一本书的质量</h4><blockquote>
<p>目的：判断一本书的质量，以及评估当前的书本是否值得进入下一阶段。然后进入下一阶段。</p>
<p>适用场景：不知道这本书适不适合进行更高质量的阅读。或者时间有限并且急于挖掘书中的知识。</p>
</blockquote>
<p>经过上个阶段的过滤，不合适的书基本上也就差不了多少了，这时候就需要对这本书进行检视阅读了：</p>
<h5 id="检视阅读阶段-STEP1-大体定位这本书。"><a href="#检视阅读阶段-STEP1-大体定位这本书。" class="headerlink" title="检视阅读阶段 STEP1 : 大体定位这本书。"></a>检视阅读阶段 STEP1 : 大体定位这本书。</h5><ol>
<li>看书名页 / 序 : 了解这本书的主题，归类这本书的类型。</li>
<li>研究目录页  : 对这本书的基本架构做概括性的理解。</li>
<li>查看索引</li>
<li>出版者的介绍</li>
<li>挑选几个和主题相关的篇章，着重看篇章的开头或结尾。</li>
<li>把书打开，随意翻，有时候连续看几页，但不要太多。</li>
</ol>
<p>定位这本书的用途：</p>
<ol>
<li>弃而不看。</li>
<li>放着做参考书。</li>
<li>进行检视阅读的第二阶段</li>
</ol>
<h5 id="检视阅读阶段-STEP2"><a href="#检视阅读阶段-STEP2" class="headerlink" title="检视阅读阶段 STEP2 :"></a>检视阅读阶段 STEP2 :</h5><p>这篇作者 / 译者使用了一个很容易被误会词，粗读。</p>
<p>即：</p>
<blockquote>
<p>头一次面对一本难读的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或者思索。</p>
</blockquote>
<p>那什么标准的读才叫粗读呢？</p>
<blockquote>
<p>把握主干，不拘泥于细枝末节，把握大原则，不拘泥于细微的重点，而不是那种随便翻翻的”粗读”.</p>
</blockquote>
<h5 id="检视阅读的一些误区："><a href="#检视阅读的一些误区：" class="headerlink" title="检视阅读的一些误区："></a>检视阅读的一些误区：</h5><blockquote>
<p>速读也只能回答出”这是在说什么的”的问题。对深入理解，回答更深层次的问题没有大帮助。</p>
</blockquote>
<h4 id="分析阅读阶段-全方位吃透这本书"><a href="#分析阅读阶段-全方位吃透这本书" class="headerlink" title="分析阅读阶段 : 全方位吃透这本书"></a>分析阅读阶段 : 全方位吃透这本书</h4><p>经过筛选与检视，剩下的书则是很有价值的书。</p>
<blockquote>
<p>而，读一本书的阅读技巧，明显是高于比书本长度少，比书本难度易的读物。即 <strong>这些阅读技巧也同样适用于非书籍的读物上</strong></p>
</blockquote>
<h5 id="分析阅读第一阶段：找出一本书在谈写什么的规则"><a href="#分析阅读第一阶段：找出一本书在谈写什么的规则" class="headerlink" title="分析阅读第一阶段：找出一本书在谈写什么的规则"></a>分析阅读第一阶段：找出一本书在谈写什么的规则</h5><p>步骤：</p>
<ol>
<li>依照书的种类与主题来分类</li>
<li>使用最简短的文字说明整本书在谈些什么</li>
<li>将主要部分按顺序和关联性列举出来。将全书的大纲列举出来，并将各个部分的大纲也列出来。</li>
<li>确定作者想要解决的问题。</li>
</ol>
<blockquote>
<p>如果心中没有一个分类的标准，再清楚的书名也没有用。</p>
<p>每一本书都有一个骨架，作为一个合格的读者，目的就是找出这个骨架。</p>
</blockquote>
<ol>
<li>掌握一本书的架构</li>
<li>使用单一的句子，或者最多几句话来叙述整本书的内容。</li>
<li>将书中的重要篇章列举出来，说明他们如何按照顺序组成一个整体的架构。</li>
</ol>
<blockquote>
<p>PS: 建筑架构与书本架构的那个比方真的是精彩。</p>
</blockquote>
<p>第三点可以用列提纲来解决：</p>
<ul>
<li>作者将全数分为五个部分，第 1/2/3/4/5 部分讲的是什么</li>
<li>第一部分的第一节（注：Section, 译者翻译为段落）, 有 X/Y/Z 节 /</li>
<li>X 节作者做出四个观点 (Point),I/II/III</li>
</ul>
<blockquote>
<p>由于纸笔速度跟不上大脑运转速度，对每一本书这样读并且列提纲的话相当耗费精力，但是具备这样的意识还是很重要的。</p>
</blockquote>
<h5 id="分析阅读第二阶段：诠释一本书的内容的规则。"><a href="#分析阅读第二阶段：诠释一本书的内容的规则。" class="headerlink" title="分析阅读第二阶段：诠释一本书的内容的规则。"></a>分析阅读第二阶段：诠释一本书的内容的规则。</h5><p>步骤：</p>
<ol>
<li>诠释作者的关键字，与他达成共识。</li>
<li>由最重要的句子中，抓住作者的重要主旨。</li>
<li>知道作者的论述是什么，从内容中找出相关的句子，再重新架构出来。</li>
<li>确定作者已经解决了哪些问题，还有哪些问题是没有解决的，在判断那些是作者知道他没有解决的问题。</li>
</ol>
<blockquote>
<ol>
<li>作者的主旨如果没有理论的支持，只是在书法个人想法罢了。2. 为什么他认为我们应该被说服，以接受这样的观点。</li>
</ol>
</blockquote>
<ol>
<li>找出关键句</li>
<li>找出主旨</li>
<li>找出论述</li>
<li>找出解答</li>
</ol>
<p>他沟通的主要核心是他所辖的肯定与否定的判断，以及他为什么会这么做的立构。</p>
<blockquote>
<p>不能用他们自己的话，重述你的观点。则是代表不理解。</p>
</blockquote>
<h5 id="分析阅读第三阶段：评论一本书的规则"><a href="#分析阅读第三阶段：评论一本书的规则" class="headerlink" title="分析阅读第三阶段：评论一本书的规则"></a>分析阅读第三阶段：评论一本书的规则</h5><p>规则：</p>
<p>A. 智慧礼节的一般规则</p>
<ol>
<li>除非你已经完成了大纲架构，也能诠释整本书了，否则不要轻易评断。</li>
<li>不要争强好胜，非辩到底不可。</li>
<li>在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同。<br>B. 批评观点的特别标准<ol>
<li>证明作者的知识不足。</li>
<li>证明作者的知识错误。</li>
<li>证明作者不合逻辑。</li>
<li>证明作者的分析与理由是不完整的。</li>
</ol>
</li>
</ol>
<p>甚至，可以用于其他的类型的学习。</p>
<h4 id="主题阅读阶段-纳入自己的知识体系"><a href="#主题阅读阶段-纳入自己的知识体系" class="headerlink" title="主题阅读阶段 : 纳入自己的知识体系"></a>主题阅读阶段 : 纳入自己的知识体系</h4><p>主题阅读其实就是对同一个主题挑选几本书进行查看。</p>
<p>多问问自己：这本书谈的内容对我研究的主题内容道理有没有帮助？</p>
<p>主题阅读 STEP1. 找到与主题相关的章节。只看与该章节相关的内容。<br>主题阅读 STEP2. 带领作者与你达成共识。与检视阅读的第二步骤相反。<br>主题阅读 STEP3. 理清问题。<br>主题阅读 STEP4. 界定议题。<br>主题阅读 STEP5. 分析讨论。</p>
<h3 id="SQ2-上面关于阅读一本书的步骤是适用于所有书，即是通用的步骤吗？"><a href="#SQ2-上面关于阅读一本书的步骤是适用于所有书，即是通用的步骤吗？" class="headerlink" title="SQ2: 上面关于阅读一本书的步骤是适用于所有书，即是通用的步骤吗？"></a>SQ2: 上面关于阅读一本书的步骤是适用于所有书，即是通用的步骤吗？</h3><blockquote>
<p>不是</p>
</blockquote>
<p>作者在书中介绍了四个问题，用来帮助读者进行更好的阅读，这些问题除了不适合小说类的书籍，基本上可以适用于绝大部分的书籍。</p>
<ul>
<li>CQ1 : <strong>本书整体讲了什么？</strong> （主题，作者如何依次发展主题，如何逐步从核心主题分解出从属的关键议题来）</li>
<li>CQ2 : <strong>作者细说了什么？怎么说的？</strong> （找出主要的 ideas,assertions,arguments, 汗，译者翻译为了 想法，声明，论点，实际上应该翻译为想法，主张，论据……)</li>
<li>CQ3 : <strong>这本书说的有道理吗？是全部有道理，还是部分有道理？</strong></li>
<li>CQ4 : <strong>这本书跟我有什么关系？</strong> 如果是资讯，则询问是否有意义。是否值得有更深入的了解。这本书可以补充我哪些知识体系</li>
</ul>
<p>作者在书中已经介绍完分析阅读，按理来说应该进入的是下一部分，即主题阅读。</p>
<p>但是第三部分<strong>莫名其妙</strong>硬塞了一部分内容叫做<strong>阅读不同读物的方法</strong></p>
<p>内容是如何阅读下面的读物：</p>
<ul>
<li>实用型的书</li>
<li>想象文学</li>
<li>故事，戏剧，诗</li>
<li>历史书</li>
<li>科学与数学</li>
<li>哲学书</li>
<li>社会科学</li>
</ul>
<p>而这么做的答案在第十三章的开头（不是应该在第三部分的开头嘛？).</p>
<blockquote>
<p>在任何艺术或实务领域，规则太通用是一件令人扫兴的事情。少量的通用性规则是优势。越通用的规则也就意味着越易懂，而与此同时当遇到真实案例的时候，往往通用规则太宽泛而难以应用。</p>
<p>即，尽管作者做了抽象的总结的经验，但还是要具体落实到具体的案例上。</p>
</blockquote>
<h5 id="分析阅读之如何阅读实用型的书"><a href="#分析阅读之如何阅读实用型的书" class="headerlink" title="分析阅读之如何阅读实用型的书"></a>分析阅读之如何阅读实用型的书</h5><blockquote>
<p>注：由于时间有限，仅仅对阅读实用类和历史书籍做了笔记，以后补上。</p>
<p>注意：<strong>任何一本实用性的书不能解决该书所关心的实际问题.</strong></p>
</blockquote>
<p>就像学会<strong>如何阅读一本书</strong>, 看完做好笔记并不意味着<strong>你不会阅读一本书</strong>这个问题<strong>消失了</strong>, 只有行动才能解决问题。</p>
<blockquote>
<p><strong>听过那么多道理，却不行动，不能过好这一生</strong>也没有那必要怪道理。</p>
<p><strong>Just Do It</strong></p>
</blockquote>
<ul>
<li>如果是阅读数学类的书，可能了解作者本人是没有任何必要的。</li>
<li>如果是阅读道德论述，经济论文和经济论著，则非常有必要了解作者的人格，生活所处的时代背景。</li>
</ul>
<p>第一个问题：这本书是在谈些什么。<br>第二个问题：这本书的意义或内容，共识，主旨，论述。<br>第三个问题：内容真实吗？<br>第四个问题：这本书与我何干？</p>
<h5 id="分析阅读之如何阅读历史书"><a href="#分析阅读之如何阅读历史书" class="headerlink" title="分析阅读之如何阅读历史书"></a>分析阅读之如何阅读历史书</h5><p>这部分刚开始就通过法庭陪审团的车祸事件来说明，在严格规范的证据之下，加上详细检验之后，身为陪审员都很难百分之百的确定一件事情的真相。</p>
<p>而，一个人连一件单纯的事都难以确知真相，遑论历史？</p>
<p>由于历史的理论不同，历史学家对历史事件的描述则不同。</p>
<p>阅读历史的两个要点：</p>
<ol>
<li>对你感兴趣的时间或者时期，尽量阅读一种以上的历史书</li>
<li>不要只关心在过去某个时间地点真正发生了什么事情，还要读懂在任何时空中，尤其是现在，人们为什么会有这般行动的原因。</li>
</ol>
<h3 id="SQ3-关于读书的有哪些误区"><a href="#SQ3-关于读书的有哪些误区" class="headerlink" title="SQ3: 关于读书的有哪些误区"></a>SQ3: 关于读书的有哪些误区</h3><h4 id="速读"><a href="#速读" class="headerlink" title="速读"></a>速读</h4><ol>
<li>许多书连略读都是不值得的，另外一些书只需要快速读过就行了。有少数的书需要用某种速度，通常是相当慢的速度，才能完全理解。</li>
<li>一本只需要快速阅读的书，却用很慢的速度来读，就是在浪费时间，这时速读的技巧就能帮你解决问题。</li>
</ol>
<p>PS: 无论是多么难读的书，在无关精要的间隙部分都可以读快一些。而那些比较困难的部分，应该慢慢阅读。</p>
<blockquote>
<p>核心的注意点应该放在：理解了多少。<br>恰似沟通需要注意的：不是你说了多少，说的多快，而是对方理解了多少。</p>
</blockquote>
<h4 id="随便翻翻"><a href="#随便翻翻" class="headerlink" title="随便翻翻"></a>随便翻翻</h4><p>读书如果不是为了娱乐消遣，切忌进行在很松散的状态下随便拿一本书看看。</p>
<blockquote>
<p>为了解决很随便的看一本书，我的技巧就是带着问题去看。</p>
</blockquote>
<h4 id="陷入细枝末节"><a href="#陷入细枝末节" class="headerlink" title="陷入细枝末节"></a>陷入细枝末节</h4><blockquote>
<p>头一次面对一本难读的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或者思索。</p>
</blockquote>
<p>不停的停下来查一些陌生的知识会不断的破坏兴趣。并且会忽略掉一些大的原则性的东西。<br>比如：当你努力的去了解那些细微的重点时，就会错过大原则：关于成本中包含的薪水，租金，利润与利息种种因素，市场在定价中的角色，垄断专卖的害处，自由贸易的理由等等。</p>
<blockquote>
<p>作者的意思其实就是从枝干再到树叶。不要上来就陷入一些细小的琐碎事物中。</p>
</blockquote>
<h3 id="EQ1-为什么要重新学习如何阅读书籍的策略与方法"><a href="#EQ1-为什么要重新学习如何阅读书籍的策略与方法" class="headerlink" title="EQ1: 为什么要重新学习如何阅读书籍的策略与方法"></a>EQ1: 为什么要<strong>重新学习</strong>如何阅读书籍的策略与方法</h3><blockquote>
<p>初学者的无知在于未学，而学者的无知在于学后</p>
</blockquote>
<p>以上。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://en.wikipedia.org/wiki/How_to_Read_A_Book" target="_blank" rel="external">https://en.wikipedia.org/wiki/How_to_Read_A_Book</a><br><a href="https://en.wikipedia.org/wiki/How_to_Read_Literature_Like_a_Professor" target="_blank" rel="external">https://en.wikipedia.org/wiki/How_to_Read_Literature_Like_a_Professor</a><br><a href="https://www.amazon.com/How-Read-Book-Intelligent-Touchstone/dp/0671212095/ref=pd_bxgy_14_2?_encoding=UTF8&amp;psc=1&amp;refRID=MMHSVKSVYBBGSMZRWDQE" target="_blank" rel="external">亚马逊地址《如何阅读一本书》</a></p>
<p>UPDATE:</p>
<table>
<thead>
<tr>
<th>日期</th>
<th>类型</th>
<th>详细操作</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>2017-02-13</strong></td>
<td>创建</td>
<td>初始化本文</td>
</tr>
<tr>
<td><strong>2017-02-17</strong></td>
<td>重构</td>
<td>删除零散笔记，重新组织本文结构</td>
</tr>
<tr>
<td><strong>2017-02-26</strong></td>
<td>重构</td>
<td>调整部分内容</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;选择了这本书进行精读是有原因的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在一个需要大量阅读的时代里，读东西更加有策略。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记得大约是初三的考试比赛，监考老师发了卷子，我们这些人拿到卷子捋起袖子就是写，而监考老师说了一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先看看卷子，然后再写，不要上来就做题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然那次考试并不算理想，最大的收获应该就是这句话。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过’先预估，然后再做’的意识，我应该是少走了一些弯路的。至少工作效率稍微提升了一些。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但，有了这个先预估一下，然后再做的意识可以减少很多问题，然而并不能更好解决的问题。因为意识这玩意，不是方法，不是策略。知道考虑火候，不懂得把握火候照样做不出好菜。&lt;/p&gt;
    
    </summary>
    
      <category term="写在人生的边上" scheme="http://twocucao.xyz/categories/%E5%86%99%E5%9C%A8%E4%BA%BA%E7%94%9F%E7%9A%84%E8%BE%B9%E4%B8%8A/"/>
    
    
      <category term="碎碎念" scheme="http://twocucao.xyz/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="书单与简评" scheme="http://twocucao.xyz/tags/%E4%B9%A6%E5%8D%95%E4%B8%8E%E7%AE%80%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>『好好说话』读书笔记</title>
    <link href="http://twocucao.xyz/2017/01/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E5%A5%BD%E5%A5%BD%E8%AF%B4%E8%AF%9D/"/>
    <id>http://twocucao.xyz/2017/01/27/读书笔记_好好说话/</id>
    <published>2017-01-27T10:40:59.000Z</published>
    <updated>2017-03-14T02:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>当时看到奇葩说这个节目就深深的喜欢上了这群打辩论的顶级高手们。</p>
<p>于是，当这些奇葩的辩论王者们出了『好好说话』的语音教程的时候，就非常开心的入手了. 现在出了纸质书，像我这种不是特别聪明的人自然是要好好的拿来研究一番，于是诞生了本文. 本文是我的公开的笔记，私人的笔记就不分享了。</p>
<p>好好说话有语音版和文字版。建议购买。很多技能都不重要，早一点学迟一点学基本上都没有问题，但是说话是为数不多的，不学就非常可惜的早学可以少走很多麻烦的。</p>
<blockquote>
<p>真心建议买正版，为优秀的知识付费是追求上进的人的基本素质。</p>
</blockquote>
<p>世界上需要交智商税的东西真的特别多，但是说话这种东西一般情况下交的智商税的特别的高：</p>
<a id="more"></a>
<p>就像在书籍第一章开头所说，说话之伤都是暗伤。</p>
<blockquote>
<p>能意识到你问题所在的，通常都不会告诉你。心大点的，察人之过笑而不言，但是私下里知道你这个人不靠谱，以后有重要的事不能指望你，就会疏远你；心稍微小点的，不跟你计较，但是客客气气找个别的由头举了你；等而下之的人的，甚至会一边给你穿小鞋一边装大度，让你死都没有四个明白。</p>
</blockquote>
<p>回想起我前 25 年的很多糟糕的言行，现在想想，当时总归是可以有更优解的。</p>
<p>但仔细一想，似乎寻常人总会去踩这些坑，吃过很多教训，才能明白。</p>
<h3 id="说话是权利的游戏"><a href="#说话是权利的游戏" class="headerlink" title="说话是权利的游戏"></a>说话是权利的游戏</h3><p>五维话术：演讲，沟通，说服，谈判，辩论。</p>
<ul>
<li>演讲 A – 权力的形成（吸引，聚焦，引导）</li>
<li>沟通 B – 权力的流动（避免冲突与协调转向）</li>
<li>说服 C – 权力在对方（无权的一方要改变有权的一方）</li>
<li>谈判 D – 权力在双方（双方要合作，才能解决问题）</li>
<li>辩论 E – 权力在他方（双方无权决定胜负，通常由中立第三方裁决）</li>
</ul>
<p>这里面的纬度，并不是每一个场景下就对应某一纬度的，比如说，当你在沟通的时候，有的时候就也需要说服，有的时候又需要辩论，甚至谈判。</p>
<p>所以，每一场复杂的说话场景实际上是在不断的变化当中，甚至可以用矢量 (A,B,C,D,E,T) 其中 T 表示的是 Times 次数. 即以 A 为演讲值，MAX 为 10,MIN 为 0 的情况下，第 T 次演讲的说法应该为 (A,B,C,D,E), 比如 (2,3,4,9,0) 表示此次对话应该着重于谈判.P20 有一个非常有趣的说明叫做色有三原，光分七彩。</p>
<p>温和的的沟通，可能蕴含着辩论的机锋和谈判的策略；<br>娓娓道来的说服可能需要演讲的华彩的沟通的诀窍。</p>
<p>而好好说话的工作流就是</p>
<p>S1. 倾听 For 收集信息<br>S2. 判断 For 权力棍术<br>S3. 思考 For 应对之策 说话策略需要依据权力（大小）, 态度（反对 / 赞同）, 成本（低 / 高）, 方向（单向 / 双向）, 受众（多 / 少）<br>S4. 表达 For 语言输出，然后转 S1</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当时看到奇葩说这个节目就深深的喜欢上了这群打辩论的顶级高手们。&lt;/p&gt;
&lt;p&gt;于是，当这些奇葩的辩论王者们出了『好好说话』的语音教程的时候，就非常开心的入手了. 现在出了纸质书，像我这种不是特别聪明的人自然是要好好的拿来研究一番，于是诞生了本文. 本文是我的公开的笔记，私人的笔记就不分享了。&lt;/p&gt;
&lt;p&gt;好好说话有语音版和文字版。建议购买。很多技能都不重要，早一点学迟一点学基本上都没有问题，但是说话是为数不多的，不学就非常可惜的早学可以少走很多麻烦的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真心建议买正版，为优秀的知识付费是追求上进的人的基本素质。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;世界上需要交智商税的东西真的特别多，但是说话这种东西一般情况下交的智商税的特别的高：&lt;/p&gt;
    
    </summary>
    
      <category term="写在人生的边上" scheme="http://twocucao.xyz/categories/%E5%86%99%E5%9C%A8%E4%BA%BA%E7%94%9F%E7%9A%84%E8%BE%B9%E4%B8%8A/"/>
    
    
      <category term="碎碎念" scheme="http://twocucao.xyz/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="书单与简评" scheme="http://twocucao.xyz/tags/%E4%B9%A6%E5%8D%95%E4%B8%8E%E7%AE%80%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>『把时间当做朋友』读书笔记</title>
    <link href="http://twocucao.xyz/2017/01/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E4%B8%8E%E6%97%B6%E9%97%B4%E5%81%9A%E6%9C%8B%E5%8F%8B/"/>
    <id>http://twocucao.xyz/2017/01/27/读书笔记_与时间做朋友/</id>
    <published>2017-01-27T10:40:59.000Z</published>
    <updated>2017-03-14T02:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我大一的时候看到的这本书的第一版。转眼大四毕业半年了。</p>
<p>这本书对我有很大积极的作用，大一时候很庆幸读到这本书籍，当时一读这本书，就像一个溺水的人抓到了一个水面上的一根稻草，以为『明白一个道理，于是突然间就主角光环加深，从此走向人生巅峰』。当时可能是因为年轻气盛见识少，待我见识稍稍多了那么一点点之后，也就逐渐可以对成功学类的鸡汤脱敏。这里的脱敏指的是可以减少过度情绪化的理解，从句子中逐渐剥离感性的煽情的句子，慢慢的从稍稍理性的一些角度进行理解。</p>
<p>这本书放在公网上，并不需要购买即可免费查看，但，值得一提的是，第三版在排版上下足了功夫。阅读体验很好。推荐购买纸质书。</p>
<p>我是一个认为『术』重于『道』的人。『道』意味着对『术』进行抽象总结，并且艺术化的语言进行诠释，这个过程难保没有信息的损失。</p>
<p>这本书在四年后看的今天，依然读出了很多不一样的味道，这种惊喜恰如第一次读到这本书的时候那般惊奇。</p>
<a id="more"></a>
<blockquote>
<p>四年前，我看了这本书，相信自己的积累终究会有一天有所回报。</p>
</blockquote>
<p>现在想想，很多李老师说的道理也有道理本身的局限性，道理一旦脱离于扎根这些道理的土壤，就显得很没有道理，李笑来提到：</p>
<ul>
<li>速成绝无可能</li>
<li>交换才是硬道理</li>
<li>完美永不存在</li>
<li>未知永远存在</li>
<li>现状永远无法摆脱</li>
</ul>
<p>这些话的正确性在于如何定义速成，如何定义交换，如何定义完美，如何定义未知，如何定义摆脱现状。放在李老师列举的几个例子来说是成立的，但是放在其他的例子里面则是不成立的。</p>
<p>比如说，『速成绝无可能』：</p>
<blockquote>
<p>拿我自己举例子，我本身已经学会了几门编程语言，再学另一门编程语言，那仅仅是多看几天编程手册的事情。几天学会一门编程语言这叫不叫速成呢？一两天学会另一个数据库这叫不叫速成呢？有的人可是要花好几周呢？你会说，这并不见得，你这是主场，你这是在同一个领域里面学习。这种情况不应该叫做速成。那，举个其他的例子，写代码这个过程涉及到大量的推导和不断的修正自己的方法，这让我学一门新的编程类技术或者非编程类技术的过程中有很强的 common sense, 这个过程也是事半功倍的，那这算不算速成呢？</p>
</blockquote>
<p>在本书中，对于『时间管理』, 这个词本来就不是管理时间的流动的，而是管理自己对于时间的开销。可，李老师反倒说：时间本来就不服从于每个人的管理，你只能选择和时间做朋友。</p>
<blockquote>
<p>可，我只想对<strong>我的时间开销</strong>进行合理安排.<strong>我没有控制时间的想法呀</strong>!</p>
</blockquote>
<p>当然，瑕不掩瑜，我认为这本书除了重要的内容是那些『术』而非那些『道』. 没有人不懂道，也没有人不懂道理，只是道理本身具备相当大的局限性罢了。</p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>通常情况下，看一本『自我成长』类书籍，看他的目录就能了解这本书的讲解思路。</p>
<p>困境 - 醒悟 - 现实 - 管理 - 学习 - 思考 - 交流 - 应用 - 积累</p>
<p>几天读下来，私以为最有价值的部分为<strong>管理 - 学习 - 思考 - 交流</strong>这四个章节，这四个章节多看几遍，其他大略看看便好。</p>
<p>以下便是我的一些零散的笔记。</p>
<h3 id="第-0-章：困境"><a href="#第-0-章：困境" class="headerlink" title="第 0 章：困境"></a>第 0 章：困境</h3><p>首先是发现时间不够用（问题）, 接着是尝试改变但却时间压力导致自己即勤奋又懒惰（慌乱）显得『用战术上的勤劳掩盖战略上的懒惰』, 我们尝试去管理时间，但是却无法管理好时间，于是李老师提出『我们无法管理时间，只能管理自己』，怎么管理自己？李老师给出的答案是『必须要看清楚、想明白『问题出在自己身上』, 而解决就只能靠积累』。</p>
<blockquote>
<p>番外：为什么是第 0 章呢？因为程序员从零计数，而李笑来老师是一个 Geek 范十足的人。而且，概述放在第 0 章，我觉得也蛮有意义的。</p>
</blockquote>
<p>从第 0 章可以看出这本书围绕着：运用心智获得解放</p>
<p>其实个人觉得这本书的这个副标题 – 运用心智获得解放倒是非常适合作为本书的标题，因为论概括性比把时间当做朋友显得更加的契合本书的内容。当然，做销售出身的李老师肯定也知道，这个副标题没有多大吸引力，至少没有把时间当做朋友那么有吸引力。</p>
<h3 id="第-1-章：醒悟"><a href="#第-1-章：醒悟" class="headerlink" title="第 1 章：醒悟"></a>第 1 章：醒悟</h3><p>定义了孰主孰仆：不要跟着感觉走，翻身做大脑的主人</p>
<blockquote>
<p>举了『一个锤子不能砸自身，钉子不能砸自身，但人脑可以修正自身的想法（元思考）来说明人脑的高级』的例子。放在一起总觉得怪怪的。举一个不恰当的例子：耳机可以通过不断的播放音乐来使得耳机音质得到大量的提升，这个过程叫做煲耳机，而超过一定使用期限之后，耳机的音质就会有所下降。我觉得耳机也是一个通过不同使用自身进行发声并且使得自己的发出的声音更加美妙的东西呢。</p>
</blockquote>
<p>定义了何为心智：一个人心智就是其过往获得的一切的知识与经验的总和。</p>
<blockquote>
<p>举了一个聪明人办傻事，还振振有词，义正辞严，双目炯炯的例子。我甚至会怀疑是否本来人家能接受意见，反而因为当众揭露出来，因而在内心里抵触别人意见。当然，缺乏具体的场景，我也无从判断。只能假设，这个倒霉的聪明蛋说的是那种很大的自以为振振有词的话了。</p>
</blockquote>
<p>李老师举了自己学了计算机，盲打，统计，做销售，英语的例子来说明一些道理。PS: 不得不说，在 90 年代学到了这些先进的，time saving 的东西真的是让人非常的羡慕。</p>
<blockquote>
<p>然后说了一个和乔布斯学习书法一样的道理，并且加以升华：『因为不知道那东西有什么用而决定去学』和『因为不知道那东西有什么用而决定不去学』, 前者在实践中越发相信技多不压身，后者只能感叹技到用时方恨少。（当然，与此同时，相信技多不压身的人往往也会陷入同时学习多个技能从而导致处处平庸的误区.)</p>
</blockquote>
<h3 id="第-2-章：现实"><a href="#第-2-章：现实" class="headerlink" title="第 2 章：现实"></a>第 2 章：现实</h3><ul>
<li>速成绝无可能</li>
<li>交换才是硬道理</li>
<li>完美永不存在</li>
<li>未知永远存在</li>
<li>现状无法马上摆脱</li>
</ul>
<p>关于速成，李老师这么说：人本质上就容易对那些在<strong>短时间</strong>内能让自己满足的事物产生依赖，并且全然不顾事实上对自己的影响是好是坏，比如：</p>
<ul>
<li>依赖打游戏来满足自己的成就感</li>
<li>『今天那么累了就大吃一顿吧』</li>
</ul>
<p>然而，在很多领域，之所以相信有速成之法，多少因为之前的老师教的太烂。相信速成之法的聪明人，只是寻找一个更好的学习路径而已。相反，很多人看书不去看一下评论，不 Google 一下，不去征求一下该领域的牛人的意见，上来就一阵瞎折腾，这不也是一种『既勤劳又懒惰』的人么？</p>
<p>第二章总结：</p>
<ul>
<li>你得有耐心接受现状有耐心，接受自己的不完美，有耐心接受未知。</li>
<li>你得有所积累才能有资本。</li>
<li>相信我，你并不孤独。</li>
</ul>
<p>其实整本书籍讲的都是不要急，慢慢来。</p>
<h3 id="第-3-章：管理"><a href="#第-3-章：管理" class="headerlink" title="第 3 章：管理"></a>第 3 章：管理</h3><p>第三章叫做管理，一本书终于进入了干货期，特别是打电话这个流程总结的相当不错，不是很清楚打电话这个是不是商务人士的常识，但的的确确让我也注意到了一些细节其实可以处理的更加完美。</p>
<ol>
<li>凭什么确定现在就可以接电话？发条短信问问对方是否方便</li>
<li>想清楚，对照着清单进行沟通。防止漏掉关键信息。</li>
<li>工作电话，对方未接，显示的是工作总机。应该发消息到对方手机。</li>
<li>交代自己是谁！</li>
<li>对方没有纸和笔怎么办？善意提醒对方可以邮件发个备忘。</li>
</ol>
<blockquote>
<p>处处留心皆学问。</p>
</blockquote>
<p>至于记录时间的方法，曾经尝试过一段时间，没有坚持下来，个人觉得并不适用于我。</p>
<p>至于制定计划的注意点，其实李老师说的其实就是 SMART 法则吧：</p>
<ol>
<li>目标是具体的 (Specific)</li>
<li>可以衡量的 (Measurable)</li>
<li>可以达到的 (Attainable)</li>
<li>要与其他目标具有一定的相关性 (Relevant)</li>
<li>具有明确的截止期限 (Time-bound)</li>
</ol>
<h3 id="第-4-章：学习"><a href="#第-4-章：学习" class="headerlink" title="第 4 章：学习"></a>第 4 章：学习</h3><ul>
<li><ol>
<li>效率本质<ul>
<li>1.2. 学习有效率的东西才是王道</li>
</ul>
</li>
</ol>
</li>
<li><ol>
<li>基本途径<ul>
<li>2.1. 体验 / 试错 / 观察 / 阅读</li>
</ul>
</li>
</ol>
</li>
<li><ol>
<li>主要手段<ul>
<li>3.1. 科学方法</li>
</ul>
</li>
</ol>
</li>
<li><ol>
<li>经验局限<ul>
<li>4.1. 个体经验有限</li>
<li>4.2. 群体经验有限</li>
<li>4.3. 与现有知识相悖的知识</li>
</ul>
</li>
</ol>
</li>
<li><ol>
<li>自学能力<ul>
<li>5.1. 基础阅读能力</li>
<li>5.2. 检索能力（基于阅读能力）</li>
<li>5.3. 写作能力（写出简洁，有效，准确，朴素，具体的文字记录自己的只是和经验）</li>
<li>5.4. 实践能力是自学能力最终转化为真正价值的根本。</li>
<li>5.5. 保持开放的心态 记录下不能苟同的言论，定期想想原因</li>
</ul>
</li>
</ol>
</li>
</ul>
<p>学习，就是为了提高效率。这与李老师主张的实用主义非常吻合。从四个基本途径（体验 / 试错 / 观察 / 阅读）入手，并介绍了主要手段即科学方法。接着介绍经验局限如何自学能力。</p>
<p>有趣的东西在于科学方法。</p>
<p>所谓科学方法，用于求索科学问题还是很有意义的，可是用于解决日常生活中的问题，多多少少显得过于书生气。</p>
<blockquote>
<p>对于科学界已经确定的结论，经过严密的科学方法来验证，那些是值得相信的。比如进化论，现代医学，科学结论。</p>
</blockquote>
<p>能不能说科学探索出来的就一定是正确的呢？不见得，但是经过严密推导后或者是严谨的双盲测试的结论则是非常值得去相信的，如果错了，那就只能认了。如果严谨的科学探究都能出错，那也属于”天亡我，我何辞为？”.</p>
<blockquote>
<p>然而，遗憾的是，更多的问题则是没有足够的素材来验证这个道理是否属于真理，我们遵循<strong>科学方法</strong>估计得出的也就是假想。甚至来不及验证，机会就溜走了。</p>
</blockquote>
<h3 id="第-5-章：思考"><a href="#第-5-章：思考" class="headerlink" title="第 5 章：思考"></a>第 5 章：思考</h3><p>第五章是最有意义的一章，这是李老师特别擅长的思考，所以每次读都可以发现有趣的东西，比如，李老师定义的勤于思考 – <strong>只不过是从别人那里知道一个结论的时候，自己动脑重新推演一遍，看看得出的结论的过程有没有漏洞和不合理的地方，衡量一下结论到底有没有道理的过程。</strong></p>
<blockquote>
<p>至于勤于思考的原因却是，我们也处于一个信任成本极高的社会。</p>
</blockquote>
<p>接着李老师举出两个思维陷阱：</p>
<ul>
<li>概念不清</li>
<li>拒绝接受不确定性</li>
</ul>
<p>概念不清的人往往分不清目标与计划、 科学科普与科普作者 \ 历史与历史课 \ 上学与学习</p>
<p>拒绝接受不确定性的人就会往两个方向发展要么选择相信鬼神要么擅长使用二分法强行得出答案。</p>
<p>很多人也分不清相关性和因果性：</p>
<p>其实确立思考的方案也很简单，如果别人给了你一个<strong>因为 A, 所以 B</strong>：</p>
<ul>
<li>A 不一定是 B 的理由</li>
<li>A 不一定是 B 唯一的理由</li>
<li>A 不一定是 B 最重要的理由</li>
<li>A 可能是促进了 B ,B 也反过来促进了 A, 两者相互促进，互为因果。</li>
</ul>
<p>举个例子：</p>
<blockquote>
<p>有个人说：程序员只能去北京才能混得好。</p>
</blockquote>
<p>想清楚这句话有没有道理很简单：</p>
<p>STEP1. 确立他说的因果关系：因为程序员去北京混，所以混得好。<br>STEP2. 想想混的好的原因真的是因为去北京混吗？去上海就一定不行咯？北京的程序员就一定混得好咯？<br>STEP3. 想想混的好的原因的唯一理由是因为去北京混吗？不去北京就一定不行咯？<br>STEP4. 想想混的好的原因的最重要的理由是因为去北京混吗？如果不去北京还想混得好，还有什么方法呢？</p>
<p>命题的四种概念：</p>
<ol>
<li>因为 A, 所以 B</li>
<li>因为~A, 所以~B</li>
<li>因为~B, 所以~A</li>
<li>因为 B, 所以 A</li>
</ol>
<blockquote>
<p>很早接触这个概念，虽然至今用的还是不熟，但这四个概念真的是写段子的强行混淆概念的好概念啊。</p>
</blockquote>
<h3 id="第-6-章-交流"><a href="#第-6-章-交流" class="headerlink" title="第 6 章 交流"></a>第 6 章 交流</h3><ul>
<li>学会倾听</li>
<li>说与不说</li>
<li>交流守则</li>
<li>正确复述</li>
<li>勤于反思</li>
</ul>
<p>这一章也值得反复多看几遍，即便不能理解，一本正经的引用牛人的话也是提升谈资，满足自身小虚荣的重要手段。</p>
<p>有趣的是交流守则：</p>
<ul>
<li>对话的目的是寻求真理，不是为了斗争。</li>
<li>不做人身攻击。</li>
<li>保持主题。</li>
<li>辩论时要用证据。</li>
<li>不要坚持错误不改。</li>
<li>要分清对话与只准自己讲话的区别。</li>
<li>对话要有记录。</li>
<li>尽量理解对方。</li>
</ul>
<p>当然，有的时候别人会进行反驳，而注意双方的反驳层次也是很有用的（书中未提）:</p>
<p>Paul Graham《How to Disagree》值得一看 <a href="http://www.zreading.cn/archives/4137.html" target="_blank" rel="external">http://www.zreading.cn/archives/4137.html</a></p>
<p>引用李老师的话：</p>
<blockquote>
<p>如果我们作为讨论的一方，发现对方已经不再“遵守理性讨论基本原则”，那么就马上停止讨论吧，因为我们已经失去了讨论的对象。就算对方不依不饶，我们也应该回避回避再回避，因为任何接下去的过程都已经不再是“讨论”，而更可能是仅仅为争而争的“争论”了。这种争论的害处很多，比如浪费时间，比如影响情绪，比如把对方变成敌人，比如失去更多朋友……</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>读到这本书之后，确实让我不安宁了好一阵子，因为这让我真真确确的感受到了自己对时间的浪费，对自己精力的浪费。这些东西原本可以使我变得更好。</p>
<p>四年后，重读这本书，依旧让我收获颇深，至于前面部分的挑刺，也仅仅是耍耍小聪明而已，挑刺很容易，建立体系并不那么简单。</p>
<p>遇见有趣的书，就如同遇见一个有趣的人一样。</p>
<p>所有的遇见，都是久别重逢，只叹相见恨晚。</p>
<p>感谢毕业后的第一个春节假期的都让我不断补充新知识不停止学习的步伐的公司，让我在大年初二完成这篇读书笔记。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我大一的时候看到的这本书的第一版。转眼大四毕业半年了。&lt;/p&gt;
&lt;p&gt;这本书对我有很大积极的作用，大一时候很庆幸读到这本书籍，当时一读这本书，就像一个溺水的人抓到了一个水面上的一根稻草，以为『明白一个道理，于是突然间就主角光环加深，从此走向人生巅峰』。当时可能是因为年轻气盛见识少，待我见识稍稍多了那么一点点之后，也就逐渐可以对成功学类的鸡汤脱敏。这里的脱敏指的是可以减少过度情绪化的理解，从句子中逐渐剥离感性的煽情的句子，慢慢的从稍稍理性的一些角度进行理解。&lt;/p&gt;
&lt;p&gt;这本书放在公网上，并不需要购买即可免费查看，但，值得一提的是，第三版在排版上下足了功夫。阅读体验很好。推荐购买纸质书。&lt;/p&gt;
&lt;p&gt;我是一个认为『术』重于『道』的人。『道』意味着对『术』进行抽象总结，并且艺术化的语言进行诠释，这个过程难保没有信息的损失。&lt;/p&gt;
&lt;p&gt;这本书在四年后看的今天，依然读出了很多不一样的味道，这种惊喜恰如第一次读到这本书的时候那般惊奇。&lt;/p&gt;
    
    </summary>
    
      <category term="写在人生的边上" scheme="http://twocucao.xyz/categories/%E5%86%99%E5%9C%A8%E4%BA%BA%E7%94%9F%E7%9A%84%E8%BE%B9%E4%B8%8A/"/>
    
    
      <category term="碎碎念" scheme="http://twocucao.xyz/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="书单与简评" scheme="http://twocucao.xyz/tags/%E4%B9%A6%E5%8D%95%E4%B8%8E%E7%AE%80%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>写给 Pythoner 的 Spacemacs 入门指北</title>
    <link href="http://twocucao.xyz/2017/01/15/Spacemacs/"/>
    <id>http://twocucao.xyz/2017/01/15/Spacemacs/</id>
    <published>2017-01-15T10:40:59.000Z</published>
    <updated>2017-05-03T13:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最开始，使用 Sublime Text 编码，后来用 Vim 混合 PyCharm 写 Python。</p>
<p>前几天，Github 上的 Spacemacs 已经成功的突破一万 Star, 听说几个我非常佩服的 Pythoner（比如『Python Web 开发实战』的作者董伟明） 也是非常喜欢 Spacemacs, 我就萌生了从 Vim 切换到 Spacemacs 的想法，说做就做。</p>
<blockquote>
<p>注：本文所有内容基于 macOS 10.11, 软件环境为 zsh , pyenv , python3.5.2 , node5.12.0. 其他类 Unix 平台略作修改即可使用。至于 Windows 平台，建议安装 Ubuntu 虚拟机。本文也需要读者具备基本的 VIM 基本常识和 Python 常识。</p>
</blockquote>
<a id="more"></a>
<p>迁移到一个编辑器需要找到一些操作的 Emacs 替代操作。于是我安排文章结构如下：</p>
<ul>
<li><a href="#0x00- 基本软件环境安装">0x00. 基本软件环境安装</a><ul>
<li><a href="#01-zsh- 与 -ohmyzsh">0.1 zsh 与 ohmyzsh</a></li>
<li><a href="#02-pyenv- 与 -pyenv-virtualenv">0.2 pyenv 与 pyenv virtualenv</a></li>
<li><a href="#03-nvm- 以及常用 -npm- 包">0.3 nvm 以及常用 npm 包</a></li>
<li><a href="#04-spacemacs- 安装以及基本配置">0.4 Spacemacs 安装以及基本配置</a></li>
</ul>
</li>
<li><a href="#0x01- 日常的编辑">0x01. 日常的编辑</a><ul>
<li><a href="#11- 文件导航">1.1 文件导航</a></li>
<li><a href="#12- 文件编辑">1.2 文件编辑</a></li>
<li><a href="#13-markdown-writing">1.3 Markdown Writing</a></li>
</ul>
</li>
<li><a href="#0x02-python- 编程">0x02. Python 编程</a><ul>
<li><a href="#21- 代码补全">2.1 代码补全</a></li>
<li><a href="#22- 代码跳转">2.2 代码跳转</a></li>
<li><a href="#23-pytest- 测试">2.3 pytest 测试</a></li>
</ul>
</li>
<li><a href="#0x03-ipython-notebook">0x03. IPython Notebook</a><ul>
<li><a href="#31-ipython-notebook- 基本配置">3.1 IPython Notebook 基本配置</a></li>
<li><a href="#32-emacs-ipython-notebook">3.2 Emacs IPython Notebook</a></li>
</ul>
</li>
<li><a href="#0x04- 扩展">0x04. 扩展</a></li>
</ul>
<p>本文只负责把读者带入 Spacemacs 的世界中，而不是涉及到 Spacemacs 的方方面面，所以此文为指北。而非详细的指南 (Guide).</p>
<h2 id="0x00-基本软件环境安装"><a href="#0x00-基本软件环境安装" class="headerlink" title="0x00. 基本软件环境安装"></a>0x00. 基本软件环境安装</h2><h3 id="0-1-zsh-与-ohmyzsh"><a href="#0-1-zsh-与-ohmyzsh" class="headerlink" title="0.1 zsh 与 ohmyzsh"></a>0.1 zsh 与 ohmyzsh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">brew install zsh</div><div class="line">chsh <span class="_">-s</span> /bin/zsh</div><div class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<h3 id="0-2-pyenv-与-pyenv-virtualenv"><a href="#0-2-pyenv-与-pyenv-virtualenv" class="headerlink" title="0.2 pyenv 与 pyenv virtualenv"></a>0.2 pyenv 与 pyenv virtualenv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv.git ~/.pyenv</div><div class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv</div><div class="line"><span class="built_in">echo</span> <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'eval "$(pyenv virtualenv-init -)"'</span> &gt;&gt; ~/.zshrc</div><div class="line"></div><div class="line"><span class="comment"># 不喜写兼容代码，所有代码均向 3.5+ 靠拢</span></div><div class="line">v=3.5.2|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></div><div class="line">v=3.6.0|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></div><div class="line">v=2.7.11|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></div><div class="line"></div><div class="line"><span class="comment"># 设置 Global Python 为 2.7.11, 备注：尽量不要把 Py3 设置为全局，否则由于 Homebrew 本身有一些依赖是依赖于 Py2 的，这样容易出现一些奇怪的问题。</span></div><div class="line">pyenv global 2.7.11</div><div class="line">pip install -i https://pypi.doubanio.com/simple requests</div><div class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></div><div class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">"jedi&gt;=0.9.0"</span> <span class="string">"json-rpc&gt;=1.8.1"</span> <span class="string">"service_factory&gt;=0.1.5"</span> flake8 pytest autoflake hy</div><div class="line"></div><div class="line">pyenv virtualenv 3.5.2 py3-daily</div><div class="line">pyenv activate py3-daily</div><div class="line">pip install -i https://pypi.doubanio.com/simple requests</div><div class="line">pip install -i https://pypi.doubanio.com/simple beatutifulsoup4</div><div class="line">pip install -i https://pypi.doubanio.com/simple ipython[notebook]</div><div class="line">pip install -i https://pypi.doubanio.com/simple jupyter</div><div class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></div><div class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">"jedi&gt;=0.9.0"</span> <span class="string">"json-rpc&gt;=1.8.1"</span> <span class="string">"service_factory&gt;=0.1.5"</span> flake8 pytest autoflake hy</div><div class="line">pyenv deactivate</div><div class="line"><span class="comment"># pyenv uninstall py3-daily</span></div></pre></td></tr></table></figure>
<h3 id="0-3-nvm-以及常用-npm-包"><a href="#0-3-nvm-以及常用-npm-包" class="headerlink" title="0.3 nvm 以及常用 npm 包"></a>0.3 nvm 以及常用 npm 包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 nvm</span></div><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</div><div class="line">nvm install 5.12.0</div><div class="line"><span class="built_in">echo</span> <span class="string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></div><div class="line">  --cache=$HOME/.npm/.cache/cnpm \</div><div class="line">  --disturl=https://npm.taobao.org/dist \</div><div class="line">  --userconfig=$HOME/.cnpmrc"' &gt;&gt; ~/.zshrc &amp;&amp; <span class="built_in">source</span> ~/.zshrc</div><div class="line">npm install -g vmd</div><div class="line">npm install -g gitbook-cli</div><div class="line">npm install -g hexo-cli</div><div class="line">npm install -g tern</div><div class="line">npm install -g js-beautify</div><div class="line">npm install -g js-hint</div></pre></td></tr></table></figure>
<h3 id="0-4-Spacemacs-安装以及基本配置"><a href="#0-4-Spacemacs-安装以及基本配置" class="headerlink" title="0.4 Spacemacs 安装以及基本配置"></a>0.4 Spacemacs 安装以及基本配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">brew install ag</div><div class="line">brew install grep</div><div class="line">brew tap d12frosted/emacs-plus</div><div class="line">brew install emacs-plus</div><div class="line"><span class="comment"># 安装完毕之后，克隆我的配置 repo, 有一些基本的配置用于解决墙的问题。解决方案来自于子龙山人</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/syl20bnr/spacemacs ~/.emacs.d</div><div class="line">mv ~/.spacemacs .spacemacs.bak</div><div class="line">git <span class="built_in">clone</span> https://github.com/twocucao/spacemacs.d.git ~/.spacemacs.d</div><div class="line"><span class="comment"># 输入 emacs 进行初始化，如果你可以正常访问 Github 的话时间在半小时之内。</span></div><div class="line">emacs</div></pre></td></tr></table></figure>
<p>安装 Spacemacs 过程中画面如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-d5c8171294ec9f3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装 Spacemacs 过程中画面"></p>
<p>安装前，Emacs 长这个样子：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-4e6026d213191939.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装前"></p>
<p>安装后，Emacs 长这个样子：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-45747c68366ef275.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装后.png"></p>
<p><strong>在正式进入，请牢牢记住下面几个按键已经功能，以备不时之需</strong></p>
<ul>
<li>spc : 跳出命令面板</li>
<li>spc-spc : 跳出命令列表，可运行命令，也可以查找快捷键</li>
<li>spc-h-spc : 查找包的用途与定义</li>
</ul>
<p>嗯，可以谈下一话题了！</p>
<h2 id="0x01-日常的编辑"><a href="#0x01-日常的编辑" class="headerlink" title="0x01. 日常的编辑"></a>0x01. 日常的编辑</h2><h3 id="1-1-文件导航"><a href="#1-1-文件导航" class="headerlink" title="1.1 文件导航"></a>1.1 文件导航</h3><ul>
<li>(VIM 流）hjkloOaA zz</li>
<li>(VIM 流）查找 * /words</li>
<li>spc-f-j 开发 neotree</li>
<li>spc-tab 切换到上一个 buffer</li>
<li>spc-f-f 打开文件 spc-p-f fuzzfind 类似于 ctrlp spc-s-g-p grep 搜索项目  spc-s-a-p ag 搜索项目</li>
</ul>
<p>搜索项目如图 (spc-s-a-p ag 搜索项目）:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-b2ce54f91a91e9d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="按照关键字搜索项目"></p>
<blockquote>
<p>实在是方便至极</p>
</blockquote>
<h3 id="1-2-文件编辑"><a href="#1-2-文件编辑" class="headerlink" title="1.2 文件编辑"></a>1.2 文件编辑</h3><p>文件内容编辑</p>
<ul>
<li>(VIM 流）u 与 c-r d c 等</li>
<li>有趣的是查找替换功能也是自带预览的。比如 :%s/foo/bar/g</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-e37a81a2a399e5f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查找替换预览"></p>
<p>文件本身编辑</p>
<ul>
<li>在 dired mode 下：copy - C , delete - D, new folder - +</li>
<li>也可以 spc-f-t 在 neotree 下进行编辑</li>
</ul>
<blockquote>
<p>除去这些和 Vim 相似的文件编辑功能之外，甚至窗口管理都和 Vim 一致了，使用 c-w+hjkl 直接跳转。<br>强烈建议在读者抽空过一遍基本的 Vimtutor</p>
</blockquote>
<h3 id="1-3-Markdown-Writing"><a href="#1-3-Markdown-Writing" class="headerlink" title="1.3 Markdown Writing"></a>1.3 Markdown Writing</h3><ul>
<li>spc-spc-markdown-generate-to 回车即可生成本文的 Toc(Table Of Content)</li>
<li>spc-b-i 打开 buffer 的 imenu（类似于 Vim 的 Tagbar 插件），enter 跳转</li>
</ul>
<p>搜索项目如图 (spc-b-i 开启 buffer imenu ，enter 跳转）:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-250852ddc15bd7a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IMenu"></p>
<h2 id="0x02-Python-编程"><a href="#0x02-Python-编程" class="headerlink" title="0x02. Python 编程"></a>0x02. Python 编程</h2><h3 id="2-1-代码补全"><a href="#2-1-代码补全" class="headerlink" title="2.1 代码补全"></a>2.1 代码补全</h3><p>当你按照前面的所有配置走一圈下来，基本上就已经可以完美的进行补全了。<br>比如，当我编辑一个 py 文件的时候，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先激活虚拟环境</span></div><div class="line">pyenv activate 3.5.2/envs/py3-daily</div><div class="line">emacs py.py</div></pre></td></tr></table></figure></p>
<p>如图所示，因为 requests,numpy 这种第三方库都可以完美补全，其他自然不在话下。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-7516130bb7fe70c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码补全"></p>
<p>代码补全还有另一个神器，就是可以内嵌 lisp 的 Snippet 模板 – yasnippet, 由于模板功能基本上和其他编辑器相同，而使用 elisp 语言进行编写动态 Snippet 模板则需要会 elisp, 这以后有机会再学学。</p>
<h3 id="2-2-代码跳转"><a href="#2-2-代码跳转" class="headerlink" title="2.2 代码跳转"></a>2.2 代码跳转</h3><ul>
<li>文件代码跳转 spc-spc-helm-imenu 查看文件结构</li>
<li>文件跳转 在 normal-mode 下，gd 即可跳转到函数定义上，但是不能跨文件跳转。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-4a2b2df1e6be0dfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="单文件使用 helm_imenu 进行浏览"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-3406b060737bffa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用 ag 进行代码搜索"></p>
<h3 id="2-3-pytest-测试"><a href="#2-3-pytest-测试" class="headerlink" title="2.3 pytest 测试"></a>2.3 pytest 测试</h3><ul>
<li>spc-m-s-py3-daily enter 选择 py3-daily 虚拟环境</li>
<li>spc-spc-pytest-all enter 即可运行所有 pytest 测试。</li>
</ul>
<p>测试过程：</p>
<p>运行测试失败，运行测试失败，使用 c-w-j 跳转到下面窗口，对红色标记处 enter, 即可跳转到出错文件行。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-8ef2bac3163f166c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pytest 运行测试失败"></p>
<p>修正运行测试成功，如图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-b90176c2e97df7dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pytest 运行测试成功"></p>
<h2 id="0x03-IPython-Notebook"><a href="#0x03-IPython-Notebook" class="headerlink" title="0x03. IPython Notebook"></a>0x03. IPython Notebook</h2><p>通常情况下我使用 IPython Notebook 都是在 Web 端，因为是 Web 端，实际上大量的 Dom 渲染对浏览器的渲染速度还是有一定的影响的，我还是比较喜欢客户端，因为客户端的快捷键可以定制，而 Web 端的快捷键实在是相当的不方便。</p>
<p>是不是 IPython Notebook 的 web 端没有好处呢？有的，比如我可以借用外部的 JS 可视化图表对 js 进行可视化呀。</p>
<p>比如我发在简书上的这篇技术文 <a href="http://www.jianshu.com/p/609193efee1a" target="_blank" rel="external">IPython Notebook 引入 ECharts 做可视化</a></p>
<p>但，如果不需要 js 功能的话，还是用客户端舒服一些。</p>
<h3 id="3-1-IPython-Notebook-基本配置"><a href="#3-1-IPython-Notebook-基本配置" class="headerlink" title="3.1 IPython Notebook 基本配置"></a>3.1 IPython Notebook 基本配置</h3><p>spacemacs 貌似只支持密码访问 IPython Notebook, 那么我们就生成密码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先激活 py3-daily 环境</span></div><div class="line">python -c <span class="string">"from notebook.auth import passwd;print(passwd())"</span> | pbcopy</div><div class="line"><span class="comment"># 恩，于是剪切板上就有如下的字符串</span></div><div class="line">sha1:9bf4c48a6b83:26bc24a78a1e4aea7baa36874f5e86bafac0dbb9</div><div class="line"><span class="comment"># 打开 config 文件取消注释并修改 c.NotebookApp.password</span></div><div class="line">vim ~/.jupyter/jupyter_notebook_config.py</div><div class="line">c.NotebookApp.password = <span class="string">'sha1:35543659622f:f9a78f0b20132f3e04aa1d4ed4060f9fd9eb7663'</span></div></pre></td></tr></table></figure>
<h3 id="3-2-Emacs-IPython-Notebook"><a href="#3-2-Emacs-IPython-Notebook" class="headerlink" title="3.2 Emacs IPython Notebook"></a>3.2 Emacs IPython Notebook</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先在终端打开 IPython Notebook</span></div><div class="line">ipython notebook</div></pre></td></tr></table></figure>
<p>接着打开 emacs, 输入 spc-a-i-n, 默认端口，然后输入密码即可。首次登陆后还需要在输入一次 spc-a-i-n 即可看到 IPython Notebook 的主界面。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-86a9a546e350994c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IPYNB 的主界面"></p>
<p>光标移到 [New Notebook] 键击 enter 新建 IPython Notebook.</p>
<p>输入如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The %... is an iPython thing, and is not part of the Python language.</span></div><div class="line"><span class="comment"># In this case we're just telling the plotting library to draw things on</span></div><div class="line"><span class="comment"># the notebook, instead of on a separate window.</span></div><div class="line">%matplotlib inline</div><div class="line"><span class="comment"># See all the "as ..." contructs? They're just aliasing the package names.</span></div><div class="line"><span class="comment"># That way we can call methods like plt.plot() instead of matplotlib.pyplot.plot().</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp</div><div class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</div><div class="line"><span class="keyword">import</span> matplotlib.cm <span class="keyword">as</span> cm</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> time</div><div class="line">pd.set_option(<span class="string">'display.width'</span>, <span class="number">1000</span>)</div><div class="line">pd.set_option(<span class="string">'display.max_columns'</span>, <span class="number">100</span>)</div><div class="line">pd.set_option(<span class="string">'display.notebook_repr_html'</span>, <span class="keyword">True</span>)</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line">sns.set_style(<span class="string">"darkgrid"</span>)</div><div class="line">sns.set_context(<span class="string">"poster"</span>)</div><div class="line">sns.set()</div><div class="line"></div><div class="line"><span class="comment"># Load the example flights dataset and conver to long-form</span></div><div class="line">flights_long = sns.load_dataset(<span class="string">"flights"</span>)</div><div class="line">flights = flights_long.pivot(<span class="string">"month"</span>, <span class="string">"year"</span>, <span class="string">"passengers"</span>)</div><div class="line"></div><div class="line"><span class="comment"># Draw a heatmap with the numeric values in each cell</span></div><div class="line">sns.heatmap(flights, annot=<span class="keyword">True</span>, fmt=<span class="string">"d"</span>, linewidths=<span class="number">.5</span>)</div></pre></td></tr></table></figure>
<p>shift+enter , 咣</p>
<p>热力图就出来了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-aec8c9f278f74600.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="热力图"></p>
<h2 id="0x04-扩展"><a href="#0x04-扩展" class="headerlink" title="0x04. 扩展"></a>0x04. 扩展</h2><p>看完上文，就可以深入文档进行探索了。</p>
<ul>
<li>打开 Vim, 输入：help vimtutor 熟悉基本的 Vim 操作。</li>
<li><a href="https://github.com/syl20bnr/spacemacs/tree/master/layers" target="_blank" rel="external">Spacemacs Layer 文档</a></li>
<li><a href="http://spacemacs.org/doc/DOCUMENTATION.html" target="_blank" rel="external">Spacemacs 文档</a></li>
<li><a href="https://github.com/twocucao/spacemacs.d" target="_blank" rel="external">我的 Spacemacs 配置页面</a></li>
<li><a href="https://github.com/emacs-china/Spacemacs-rocks" target="_blank" rel="external">Spacemacs 达人子龙山人的教程</a></li>
</ul>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-01-15 18:53:45</strong> 重修文字</li>
<li><strong>2017-01-16 12:49:19</strong> 润饰文字，增加可读性，首发简书。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最开始，使用 Sublime Text 编码，后来用 Vim 混合 PyCharm 写 Python。&lt;/p&gt;
&lt;p&gt;前几天，Github 上的 Spacemacs 已经成功的突破一万 Star, 听说几个我非常佩服的 Pythoner（比如『Python Web 开发实战』的作者董伟明） 也是非常喜欢 Spacemacs, 我就萌生了从 Vim 切换到 Spacemacs 的想法，说做就做。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：本文所有内容基于 macOS 10.11, 软件环境为 zsh , pyenv , python3.5.2 , node5.12.0. 其他类 Unix 平台略作修改即可使用。至于 Windows 平台，建议安装 Ubuntu 虚拟机。本文也需要读者具备基本的 VIM 基本常识和 Python 常识。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="沟通交流" scheme="http://twocucao.xyz/tags/%E6%B2%9F%E9%80%9A%E4%BA%A4%E6%B5%81/"/>
    
      <category term="Linux Shell" scheme="http://twocucao.xyz/tags/Linux-Shell/"/>
    
      <category term="IPynb" scheme="http://twocucao.xyz/tags/IPynb/"/>
    
  </entry>
  
  <entry>
    <title>从一个小问题来说 Python 的作用域</title>
    <link href="http://twocucao.xyz/2017/01/14/OneQuestionToSeePythonScope/"/>
    <id>http://twocucao.xyz/2017/01/14/OneQuestionToSeePythonScope/</id>
    <published>2017-01-14T12:48:31.000Z</published>
    <updated>2017-06-04T00:38:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>整理工具字符类的时候，想借助正则表达式来实现一部分的文字判断抽取等操作。</p>
<p>比如实现：</p>
<ul>
<li>判断文字是否为 UUID</li>
<li>判断文字是否包含 UUID</li>
<li>抽取文字是中第一个 UUID</li>
<li>抽取文字是中所有 UUID</li>
</ul>
<a id="more"></a>
<h3 id="一个暴力的实现方法"><a href="#一个暴力的实现方法" class="headerlink" title="一个暴力的实现方法"></a>一个暴力的实现方法</h3><p>如果正则表达式比较少，就只一个 UUID，我们就不需要思考什么，我们分别编写四个函数：</p>
<ul>
<li>is_uuid(_str)</li>
<li>has_uuid(_str)</li>
<li>extract_first_uuid(_str)</li>
<li>extract_all_uuid(_str)</li>
</ul>
<blockquote>
<p>没错，过早优化是万恶之源</p>
</blockquote>
<p>但很显然，手动方法显得很弱智，当我需要编写判断 QQ 号的时候，我又必须编写四个函数：</p>
<ul>
<li>is_qq_num(_str)</li>
<li>has_qq_num(_str)</li>
<li>extract_first_qq_num(_str)</li>
<li>extract_all_qq_num(_str)</li>
</ul>
<p>然而：</p>
<ul>
<li>如果，我还需要判断手机号、日期、时间等等，这手动复制粘贴的过程就比较痛苦了。</li>
<li>如果，我去要添加一个方法，给 QQ 号码，uuid 等打码 那就必须要给所有的 uuid, 手机，邮箱都添加一个 dama_xxx(_str) 方法</li>
</ul>
<p>有没有好一点的解决方法呢？</p>
<!-- more -->
<h3 id="两个方法"><a href="#两个方法" class="headerlink" title="两个方法"></a>两个方法</h3><p>第一种，比如把函数修改为：</p>
<ul>
<li>is(_str,QQ_NUM_PATTEN)</li>
<li>has(_str,QQ_NUM_PATTEN)</li>
<li>extract_first(_str,QQ_NUM_PATTEN)</li>
<li>extract_all(_str,QQ_NUM_PATTEN)</li>
</ul>
<p>第二种，Python 中动态添加工具方法，我个人比较喜欢这种：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一个优雅的错误实现方式</span></div><div class="line"><span class="keyword">for</span> regex, regex_pattern <span class="keyword">in</span> REGEXES.items():</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_regex_func</span><span class="params">(_str)</span>:</span></div><div class="line">        <span class="keyword">return</span> has_pattern(_str, regex_pattern)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_regex_func</span><span class="params">(_str)</span>:</span></div><div class="line">        <span class="keyword">return</span> match_pattern(_str, regex_pattern)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extract_first_regex_func</span><span class="params">(_str)</span>:</span></div><div class="line">        <span class="keyword">return</span> find_first_matched_pattern(_str, regex_pattern)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extract_all_regex_func</span><span class="params">(_str)</span>:</span></div><div class="line">        <span class="keyword">return</span> find_all_matched_pattern(_str, regex_pattern)</div><div class="line"></div><div class="line">    setattr(sys.modules[__name__], <span class="string">'has_&#123;regex_suffix&#125;'</span>.format(regex_suffix=regex), has_regex_func)</div><div class="line">    setattr(sys.modules[__name__], <span class="string">'is_&#123;regex_suffix&#125;'</span>.format(regex_suffix=regex), is_regex_func)</div><div class="line">    setattr(sys.modules[__name__], <span class="string">'extract_first_&#123;regex_suffix&#125;'</span>.format(regex_suffix=regex), extract_first_regex_func)</div><div class="line">    setattr(sys.modules[__name__], <span class="string">'extract_all_&#123;regex_suffix&#125;'</span>.format(regex_suffix=regex), extract_all_regex_func)</div></pre></td></tr></table></figure>
<p>于是我添加了测试方法：</p>
<blockquote>
<p>一个不对稍微有些复杂的逻辑的程序进行测试的程序员不是一个称职的老司机。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">@pytest.mark.parametrize(&apos;test_input,expected&apos;, [</div><div class="line">    (&quot;321323199509234453&quot;, False),</div><div class="line">    (&quot;000528-332222&quot;, False),</div><div class="line">    (&quot;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&quot;, True),</div><div class="line">])</div><div class="line">def test_is_uuid(test_input, expected):</div><div class="line">    assert is_uuid(test_input) == expected</div><div class="line"></div><div class="line">@pytest.mark.parametrize(&apos;test_input,expected&apos;, [</div><div class="line">    (&quot;321323199509234453&quot;, False),</div><div class="line">    (&quot;000528-332222&quot;, False),</div><div class="line">    (&quot;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&quot;, True),</div><div class="line">])</div><div class="line">def test_has_uuid(test_input, expected):</div><div class="line">    assert has_uuid(test_input) == expected</div><div class="line"></div><div class="line">@pytest.mark.parametrize(&apos;test_input,expected&apos;, [</div><div class="line">    (&quot;321323199509234453&quot;, None),</div><div class="line">    (&quot;000528-332222&quot;, None),</div><div class="line">    (&quot;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&quot;, &quot;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&quot;),</div><div class="line">])</div><div class="line">def test_extract_first_uuid(test_input, expected):</div><div class="line">    assert extract_first_uuid(test_input) == expected</div><div class="line"></div><div class="line">@pytest.mark.parametrize(&apos;test_input,expected&apos;, [</div><div class="line">    (&quot;321323199509234453&quot;, None),</div><div class="line">    (&quot;000528-332222&quot;, None),</div><div class="line">    (</div><div class="line">            &quot;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&quot;,</div><div class="line">            [&apos;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&apos;, &apos;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&apos;,</div><div class="line">             &apos;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&apos;, &apos;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&apos;]),</div><div class="line">    (</div><div class="line">            &quot;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4   521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4   521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4   aslakdj 521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&quot;,</div><div class="line">            [&apos;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&apos;, &apos;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&apos;,</div><div class="line">             &apos;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&apos;, &apos;521e7bb0-d8d5-4f49-a5c2-fee1aaf9e8c4&apos;]),</div><div class="line">])</div><div class="line">def test_extract_all_uuid(test_input, expected):</div><div class="line">    assert extract_all_uuid(test_input) == expected</div></pre></td></tr></table></figure>
<p>测试未通过：</p>
<p>怎么查看代码本身都没有什么逻辑问题，那么问题出在哪里？</p>
<p>对程序植入一些 print 代码来 Debug 一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">for regex, regex_pattern in REGEXES.items():</div><div class="line">    def has_regex_func(_str, regex_pattern=regex_pattern):</div><div class="line">        # 当函数被调用之后，打印 regex_pattern 查看对应的字符串</div><div class="line">        print(regex_pattern)</div><div class="line">        return has_pattern(_str, regex_pattern)</div><div class="line"></div><div class="line">    def is_regex_func(_str, regex_pattern=regex_pattern):</div><div class="line">        return match_pattern(_str, regex_pattern)</div><div class="line"></div><div class="line">    def extract_first_regex_func(_str, regex_pattern=regex_pattern):</div><div class="line">        return find_first_matched_pattern(_str, regex_pattern)</div><div class="line"></div><div class="line">    def extract_all_regex_func(_str, regex_pattern=regex_pattern):</div><div class="line">        return find_all_matched_pattern(_str, regex_pattern)</div><div class="line"></div><div class="line">    # 查看是否为同一个函数</div><div class="line">    print(id(has_regex_func))</div><div class="line"></div><div class="line">    setattr(sys.modules[__name__], &apos;has_&#123;regex_suffix&#125;&apos;.format(regex_suffix=regex), has_regex_func)</div><div class="line">    setattr(sys.modules[__name__], &apos;is_&#123;regex_suffix&#125;&apos;.format(regex_suffix=regex), is_regex_func)</div><div class="line">    setattr(sys.modules[__name__], &apos;extract_first_&#123;regex_suffix&#125;&apos;.format(regex_suffix=regex), extract_first_regex_func)</div><div class="line">    setattr(sys.modules[__name__], &apos;extract_all_&#123;regex_suffix&#125;&apos;.format(regex_suffix=regex), extract_all_regex_func)</div></pre></td></tr></table></figure>
<p>于是发现问题，所有打印出来的 regex_pattern 都是一致的。也就是，不管是 has_uuid 还是 has_qq_num 还是其他，最后 regex_pattern 都是我在字典中实现的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;整理工具字符类的时候，想借助正则表达式来实现一部分的文字判断抽取等操作。&lt;/p&gt;
&lt;p&gt;比如实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断文字是否为 UUID&lt;/li&gt;
&lt;li&gt;判断文字是否包含 UUID&lt;/li&gt;
&lt;li&gt;抽取文字是中第一个 UUID&lt;/li&gt;
&lt;li&gt;抽取文字是中所有 UUID&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python 黑魔法" scheme="http://twocucao.xyz/categories/Python-%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
    
      <category term="Metaprogramming" scheme="http://twocucao.xyz/tags/Metaprogramming/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL CheatSheet</title>
    <link href="http://twocucao.xyz/2017/01/05/PostgreSQLCheatSheet/"/>
    <id>http://twocucao.xyz/2017/01/05/PostgreSQLCheatSheet/</id>
    <published>2017-01-05T12:48:31.000Z</published>
    <updated>2017-06-20T00:27:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 PostgreSQL 相关和命令。</p>
<ul>
<li>安装与基本配置</li>
<li>PostgreSQL 配套工具</li>
<li>PostgreSQL SQL 常用代码片段</li>
<li>Python Driver : psycopg2 , 与两个 ORM ( Django ORM / SQLAlchemy )</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>
<h2 id="0x01-安装，配置，基本-shell-命令"><a href="#0x01-安装，配置，基本-shell-命令" class="headerlink" title="0x01 安装，配置，基本 shell 命令"></a>0x01 安装，配置，基本 shell 命令</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h3 id="基本-Shell-命令"><a href="#基本-Shell-命令" class="headerlink" title="基本 Shell 命令"></a>基本 Shell 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 开启关闭</div><div class="line">pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start</div><div class="line">pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log stop</div><div class="line">pg_ctl -D /usr/local/var/postgres start</div><div class="line">pg_ctl -D /usr/local/var/postgres stop -s -m fast</div></pre></td></tr></table></figure>
<h3 id="数据的导入导出"><a href="#数据的导入导出" class="headerlink" title="数据的导入导出"></a>数据的导入导出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pg_dump -C -Fp <span class="_">-f</span> dump.sql -U twocucao QCS -h 192.168.2.175</div><div class="line">pg_dump -C -Fp <span class="_">-f</span> 20160602-150144-dump.sql -U twocucao QCS --column-inserts --data-only --table=users_table -h 192.168.2.175</div><div class="line"><span class="comment"># 插入数据</span></div><div class="line">psql -U twocucao <span class="_">-d</span> QCS <span class="_">-a</span> <span class="_">-f</span> insert_doc_ids.sql -h 192.168.2.175</div><div class="line">pg_restore --verbose --clean --no-acl --no-owner -h localhost example.dump</div></pre></td></tr></table></figure>
<h2 id="0x02-PostgreSQL-配套工具"><a href="#0x02-PostgreSQL-配套工具" class="headerlink" title="0x02 PostgreSQL 配套工具"></a>0x02 PostgreSQL 配套工具</h2><ul>
<li>JetBrain 的 Datagrip 作为 编写大段 SQL 语句的 IDE</li>
<li>通过网络或者 Dash 查看文档</li>
<li>PostgreSQL 官方自带工具</li>
</ul>
<h2 id="0x03-PostgreSQL-SQL-常用代码"><a href="#0x03-PostgreSQL-SQL-常用代码" class="headerlink" title="0x03 PostgreSQL SQL 常用代码"></a>0x03 PostgreSQL SQL 常用代码</h2><h3 id="3-1-PostgreSQL-相关"><a href="#3-1-PostgreSQL-相关" class="headerlink" title="3.1 PostgreSQL 相关"></a>3.1 PostgreSQL 相关</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 强行中断连接到此数据库的 session</span></div><div class="line"><span class="keyword">SELECT</span></div><div class="line">    pg_terminate_backend(pid)</div><div class="line"><span class="keyword">FROM</span></div><div class="line">    pg_stat_activity</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">    <span class="comment">-- don't kill my own connection!</span></div><div class="line">    pid &lt;&gt; pg_backend_pid()</div><div class="line">    <span class="comment">-- don't kill the connections to other databases</span></div><div class="line">    <span class="keyword">AND</span> datname = <span class="string">'demoweb'</span> ;</div></pre></td></tr></table></figure>
<h3 id="3-2-DCL-Data-Control-Languge"><a href="#3-2-DCL-Data-Control-Languge" class="headerlink" title="3.2 DCL ( Data Control Languge )"></a>3.2 DCL ( Data Control Languge )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-- 创建只读用户</div><div class="line">\c demoweb</div><div class="line">CREATE ROLE ro_user WITH LOGIN ENCRYPTED PASSWORD &apos;xxx123456&apos;;</div><div class="line">GRANT CONNECT ON DATABASE demoweb TO ro_user;</div><div class="line">-- This assumes you&apos;re actually connected to mydb..</div><div class="line">GRANT USAGE ON SCHEMA public TO ro_user;</div><div class="line">GRANT SELECT ON ALL TABLES IN SCHEMA public TO ro_user;</div><div class="line">GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO ro_user;</div><div class="line"></div><div class="line">-- 撤销数据库连接 ()</div><div class="line">REVOKE CONNECT ON DATABASE demoweb FROM PUBLIC, demoweb;</div></pre></td></tr></table></figure>
<h3 id="3-3-DDL-Data-Definition-Language"><a href="#3-3-DDL-Data-Definition-Language" class="headerlink" title="3.3 DDL ( Data Definition Language )"></a>3.3 DDL ( Data Definition Language )</h3><p>CREATE<br>ALTER<br>DROP<br>TRUNCATE<br>COMMENT<br>RENAME</p>
<h3 id="3-4-DML-Data-Manipulation-Languge"><a href="#3-4-DML-Data-Manipulation-Languge" class="headerlink" title="3.4 DML ( Data Manipulation Languge )"></a>3.4 DML ( Data Manipulation Languge )</h3><p>SELECT<br>INSERT<br>UPDATE<br>DELETE<br>MERGE<br>CALL<br>EXPLAIN PLAN<br>LOCK TABLE</p>
<h3 id="3-5-TCL-Transaction-Control-Languge"><a href="#3-5-TCL-Transaction-Control-Languge" class="headerlink" title="3.5 TCL ( Transaction Control Languge )"></a>3.5 TCL ( Transaction Control Languge )</h3><h2 id="0x04-常用代码片段"><a href="#0x04-常用代码片段" class="headerlink" title="0x04. 常用代码片段"></a>0x04. 常用代码片段</h2><h3 id="4-1-Tips-And-Hacks"><a href="#4-1-Tips-And-Hacks" class="headerlink" title="4.1. Tips And Hacks"></a>4.1. Tips And Hacks</h3><h4 id="Recursive-Query"><a href="#Recursive-Query" class="headerlink" title="Recursive Query"></a>Recursive Query</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WITH cte_name(</div><div class="line">    CTE_query_definition -- non-recursive term</div><div class="line">    UNION [ALL]</div><div class="line">    CTE_query_definition -- recursive term</div><div class="line">) SELECT * FROM cte_name;</div></pre></td></tr></table></figure>
<h3 id="4-2-大数据量运算技巧"><a href="#4-2-大数据量运算技巧" class="headerlink" title="4.2. 大数据量运算技巧"></a>4.2. 大数据量运算技巧</h3><h3 id="4-3-PostGIS-相关"><a href="#4-3-PostGIS-相关" class="headerlink" title="4.3. PostGIS 相关"></a>4.3. PostGIS 相关</h3><h2 id="0x05-Python-Driver-psycopg2-与两个-ORM-Django-ORM-SQLAlchemy"><a href="#0x05-Python-Driver-psycopg2-与两个-ORM-Django-ORM-SQLAlchemy" class="headerlink" title="0x05. Python Driver : psycopg2 , 与两个 ORM ( Django ORM / SQLAlchemy )"></a>0x05. Python Driver : psycopg2 , 与两个 ORM ( Django ORM / SQLAlchemy )</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 PostgreSQL 相关和命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装与基本配置&lt;/li&gt;
&lt;li&gt;PostgreSQL 配套工具&lt;/li&gt;
&lt;li&gt;PostgreSQL SQL 常用代码片段&lt;/li&gt;
&lt;li&gt;Python Driver : psycopg2 , 与两个 ORM ( Django ORM / SQLAlchemy )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库与消息队列" scheme="http://twocucao.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Geoprocessing With Python</title>
    <link href="http://twocucao.xyz/2016/12/28/GeoProcessingWithPython/"/>
    <id>http://twocucao.xyz/2016/12/28/GeoProcessingWithPython/</id>
    <published>2016-12-28T12:42:00.000Z</published>
    <updated>2017-06-13T05:10:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>16 年 12 月研究部分资料用于处理基本的 GIS 问题，最后完成了基本的 GIS 功能。17 年 5 月初需要进阶 GIS 地图相关概念。主要的资料来自于：</p>
<ul>
<li>书籍：<ul>
<li>Geoprocessing With Python</li>
<li>PostGIS In Action 2rd</li>
</ul>
</li>
<li>框架：<ul>
<li>前端 D3, 高德地图</li>
<li>后端 GeoDjango</li>
</ul>
</li>
<li>其他零零碎碎的资料</li>
</ul>
<p>特此记录。</p>
<h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><h3 id="1-Types-of-spatial-data"><a href="#1-Types-of-spatial-data" class="headerlink" title="1. Types of spatial data"></a>1. Types of spatial data</h3><ul>
<li>vector : points, lines, and polygons 以及其组合，适用于矢量图，地形边界，路线等。</li>
<li>raster : 2d/3d 包含数值的数组，适用于连续性数据，不仅仅适用于图片</li>
</ul>
<p>raster 的 digital elevation model(DEM), 即每一个像素值包含一个 elevation value</p>
<p>GDAL/OGR</p>
<a id="more"></a>
<h2 id="0x01-几种独有的坐标系"><a href="#0x01-几种独有的坐标系" class="headerlink" title="0x01 几种独有的坐标系"></a>0x01 几种独有的坐标系</h2><p>国内由于特殊的国情，导致技术上面的一些瓶颈。比如坐标与坐标之间的运算就是一个很麻烦的事情。</p>
<p>我们都知道一个坐标 (x,y) 可以表示为经纬度，甚至放在坐标系上，我们可以这么运算两点 (x1,y1) , (x2,y2) 之间的距离</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># z 表示比例系数</span></div><div class="line">distance = math.sqrt((x1-x2) ** <span class="number">2</span> + (y1-y2) ** <span class="number">2</span>) * z</div></pre></td></tr></table></figure>
<p>在近距离的时候的确是可以这么做的比如计算村里小芳和隔壁老王家的距离。当距离过大的时候，比如计算上海 A 区和 B 区的两个写字楼的距离的时候，则有相当大的误差。</p>
<p>那么问题来了：</p>
<p><del>挖掘技术哪家强</del></p>
<p>啊不是，是<strong>国内有哪些常用坐标标准呢？又是如何计算的呢？</strong></p>
<ul>
<li><ol>
<li>GPS WGS-84 国际标准（原始）</li>
</ol>
</li>
<li><ol>
<li>GCJ-02 国内标准（原始数据混淆）</li>
</ol>
</li>
<li><ol>
<li>其他坐标比如 BD-09（原始数据混淆再混淆）</li>
</ol>
</li>
</ul>
<p>对于小公司而言，我们是没有任何方法来通过 BD-09 以及 GCJ-02 这种坐标系进行运算的：</p>
<p>因为坐标点非线性偏移核心计算方法掌握在 GCJ-02 / BD-09 的公司里面，比如 Google 中国，高德地图，百度地图，腾讯地图。所以，为了研究，则必须要有<strong>能够对坐标进行运算的算法</strong>, 那这个东西有没有呢？答案是肯定的，因为国外使用的 WGS-84 标准，并且，计算坐标的算法早就开源。</p>
<p>那么，我们的思路就确定下来了。</p>
<ol>
<li>各种地图的经纬度坐标比如 BD-09 或 GCJ-02 标转换成 WGS-84 坐标。</li>
<li>使用开源 GIS 软件进行对 WGS-84 进行运算。</li>
</ol>
<p>感谢诸多在 GIS 运算上开源的中国先辈，我们轻而易举的获取到了坐标之间相互转化的方法：</p>
<p><a href="https://github.com/wandergis/coordTransform_py" target="_blank" rel="external">https://github.com/wandergis/coordTransform_py</a></p>
<p>也感谢在 GIS 上进行开源的程序员们搞出的 PostGIS 解决了运算的问题。</p>
<p>而我今日所做，不过是站在前人的肩膀上做一些搬运与整理分享的工作罢了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># ubuntu 下直接执行，然后配置好相关环境即可</div><div class="line">sudo apt install postgis -y</div></pre></td></tr></table></figure>
<h2 id="0x02-一些数据"><a href="#0x02-一些数据" class="headerlink" title="0x02 一些数据"></a>0x02 一些数据</h2><p>城市数据团的群里更新了一大批关于中国各类的 shp 图，但是这些图大多是 shp 类型，并且还有 GBK 这种令人猝不及防的文件编码，我一脸懵逼。</p>
<p>需要导入到数据库中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">PGSQL_SERVER=&apos;127.0.0.1&apos;</div><div class="line">PGSQL_PORT=5432</div><div class="line">PGSQL_USER=twocucao</div><div class="line">DB_NAME=basicgis;</div><div class="line">SHP_FILES_FOLDER=/Users/twocucao/Codes/GIS_DATA/china_basic_shps_data</div><div class="line">SRID=4326</div><div class="line"></div><div class="line">cd $SHP_FILES_FOLDER</div><div class="line">echo $SHP_FILES_FOLDER</div><div class="line"># 创建</div><div class="line"></div><div class="line">for f in *.shp</div><div class="line">do</div><div class="line">    shp_basename=`basename $f .shp`</div><div class="line">    echo $shp_basename</div><div class="line">    shp2pgsql -W GBK -I -s $SRID $f public.$shp_basename  | psql -U $PGSQL_USER -d $DB_NAME</div><div class="line">done</div></pre></td></tr></table></figure>
<p>导入完毕之后，编写脚本迁移数据到 django, 就可以从后台看数据了，使用 QGIS 查看中国地图，对比省层 / 市层 / 县区层，缺少数据或者数据缺失则进行补充。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/52890-e01da69c8cfaf777.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="导入完毕的北京地图数据"></p>
<h2 id="PostGIS-的一些概念"><a href="#PostGIS-的一些概念" class="headerlink" title="PostGIS 的一些概念"></a>PostGIS 的一些概念</h2><h3 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h3><ul>
<li>Point</li>
<li>LineString</li>
<li><p>Polygon</p>
</li>
<li><p>MultiPoint</p>
</li>
<li>MultiLineString</li>
<li>MultiPolygon</li>
</ul>
<h3 id="中级概念"><a href="#中级概念" class="headerlink" title="中级概念"></a>中级概念</h3><ul>
<li>Raster / Tile (Bands 是什么鬼）</li>
</ul>
<h3 id="PostGIS-MetaTable"><a href="#PostGIS-MetaTable" class="headerlink" title="PostGIS MetaTable"></a>PostGIS MetaTable</h3><ul>
<li>spatial_ref_sys</li>
<li>geography_columns</li>
<li>geometry_columns</li>
<li>raster_columns</li>
<li>raster_overviews</li>
</ul>
<h3 id="PostGIS-常用函数"><a href="#PostGIS-常用函数" class="headerlink" title="PostGIS 常用函数"></a>PostGIS 常用函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">ST_AsText(geom) 用于查看 WKT</div><div class="line">ST_GeometryType(geometry) returns the type of the geometry</div><div class="line">ST_NDims(geometry) returns the number of dimensions of the geometry</div><div class="line">ST_SRID(geometry) returns the spatial reference identifier number of the geometry</div><div class="line">ST_X(geometry) returns the X ordinate , 如果作用在 Point 上，则返回经度</div><div class="line">ST_Y(geometry) returns the Y ordinate , 如果作用在 Point 上，则返回纬度</div><div class="line"></div><div class="line">ST_Length(geometry) returns the length of the linestring</div><div class="line">ST_StartPoint(geometry) returns the first coordinate as a point</div><div class="line">ST_EndPoint(geometry) returns the last coordinate as a point</div><div class="line">ST_NPoints(geometry) returns the number of coordinates in the linestring</div><div class="line"></div><div class="line">ST_Area(geometry) returns the area of the polygons</div><div class="line">ST_NRings(geometry) returns the number of rings (usually 1, more of there are holes)</div><div class="line">ST_ExteriorRing(geometry) returns the outer ring as a linestring</div><div class="line">ST_InteriorRingN(geometry,n) returns a specified interior ring as a linestring</div><div class="line">ST_Perimeter(geometry) returns the length of all the rings</div><div class="line"></div><div class="line">ST_NumGeometries(geometry) returns the number of parts in the collection</div><div class="line">ST_GeometryN(geometry,n) returns the specified part</div><div class="line">ST_Area(geometry) returns the total area of all polygonal parts</div><div class="line">ST_Length(geometry) returns the total length of all linear parts</div></pre></td></tr></table></figure>
<h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-- 合并多个区域并返回 multipoly</div><div class="line">UPDATE areas as A</div><div class="line">SET &quot;Boundary&quot; = ST_Multi(st_union(ARRAY(SELECT geom FROM county_boundary_region WHERE gid in ( &apos;foo_id&apos;,&apos;bar_id)&apos;)</div><div class="line">)))</div><div class="line">WHERE A.&quot;ID&quot; = &apos;xxxxxx&apos;</div></pre></td></tr></table></figure>
<h3 id="其他参考链接"><a href="#其他参考链接" class="headerlink" title="其他参考链接"></a>其他参考链接</h3><ol>
<li><a href="http://gis.stackexchange.com/questions/6681/what-are-the-pros-and-cons-of-postgis-geography-and-geometry-types" target="_blank" rel="external">http://gis.stackexchange.com/questions/6681/what-are-the-pros-and-cons-of-postgis-geography-and-geometry-types</a></li>
<li>Geo Processing with Python</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;16 年 12 月研究部分资料用于处理基本的 GIS 问题，最后完成了基本的 GIS 功能。17 年 5 月初需要进阶 GIS 地图相关概念。主要的资料来自于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;书籍：&lt;ul&gt;
&lt;li&gt;Geoprocessing With Python&lt;/li&gt;
&lt;li&gt;PostGIS In Action 2rd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;框架：&lt;ul&gt;
&lt;li&gt;前端 D3, 高德地图&lt;/li&gt;
&lt;li&gt;后端 GeoDjango&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他零零碎碎的资料&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特此记录。&lt;/p&gt;
&lt;h2 id=&quot;0x01-基本概念&quot;&gt;&lt;a href=&quot;#0x01-基本概念&quot; class=&quot;headerlink&quot; title=&quot;0x01 基本概念&quot;&gt;&lt;/a&gt;0x01 基本概念&lt;/h2&gt;&lt;h3 id=&quot;1-Types-of-spatial-data&quot;&gt;&lt;a href=&quot;#1-Types-of-spatial-data&quot; class=&quot;headerlink&quot; title=&quot;1. Types of spatial data&quot;&gt;&lt;/a&gt;1. Types of spatial data&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;vector : points, lines, and polygons 以及其组合，适用于矢量图，地形边界，路线等。&lt;/li&gt;
&lt;li&gt;raster : 2d/3d 包含数值的数组，适用于连续性数据，不仅仅适用于图片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;raster 的 digital elevation model(DEM), 即每一个像素值包含一个 elevation value&lt;/p&gt;
&lt;p&gt;GDAL/OGR&lt;/p&gt;
    
    </summary>
    
      <category term="数据库与消息队列" scheme="http://twocucao.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="可视化" scheme="http://twocucao.xyz/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="GIS" scheme="http://twocucao.xyz/tags/GIS/"/>
    
      <category term="Django" scheme="http://twocucao.xyz/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Python 解法</title>
    <link href="http://twocucao.xyz/2016/12/21/LeetCodePythonSolution/"/>
    <id>http://twocucao.xyz/2016/12/21/LeetCodePythonSolution/</id>
    <published>2016-12-21T14:35:30.000Z</published>
    <updated>2017-06-14T06:34:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刷刷简单的算法问题，顺手提升一下编程的裸写代码的能力。</p>
<p>本文为 LeetCode 的 Easy 算法的解法集合。</p>
<a id="more"></a>
<h2 id="Easy-集合"><a href="#Easy-集合" class="headerlink" title="Easy 集合"></a>Easy 集合</h2><h3 id="1-Two-Sum-29-4"><a href="#1-Two-Sum-29-4" class="headerlink" title="1. Two Sum 29.4%"></a>1. Two Sum 29.4%</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 尝试：暴力解决</span></div><div class="line"><span class="comment"># 结果：超时</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        begin = <span class="number">0</span></div><div class="line">        end = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i,len(nums)):</div><div class="line">                <span class="keyword">if</span> i != j <span class="keyword">and</span> target == nums[i] + nums[j]:</div><div class="line">                    <span class="keyword">return</span> [i,j]</div><div class="line"></div><div class="line"><span class="comment"># 尝试：字典也就是 HashMap 解决</span></div><div class="line"><span class="comment"># 结果：读题不准确，数组不行</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        nums_dict = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> i,num <span class="keyword">in</span> enumerate(nums):</div><div class="line">            nums_dict[num] = i</div><div class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</div><div class="line">            item_num_1st = nums_dict.get(num)</div><div class="line">            item_num_2st = nums_dict.get(target-num)</div><div class="line">            <span class="keyword">if</span> item_num_2st <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> item_num_1st != item_num_2st:</div><div class="line">                <span class="keyword">return</span> [item_num_1st,item_num_2st]</div><div class="line"><span class="comment"># 尝试：其他</span></div><div class="line"><span class="comment"># 结果：其他</span></div></pre></td></tr></table></figure>
<h3 id="6-ZigZag-Conversion-25-8"><a href="#6-ZigZag-Conversion-25-8" class="headerlink" title="6. ZigZag Conversion 25.8%"></a>6. ZigZag Conversion 25.8%</h3><h3 id="7-Reverse-Integer-23-7-Easy"><a href="#7-Reverse-Integer-23-7-Easy" class="headerlink" title="7    Reverse Integer          23.7%    Easy"></a>7    Reverse Integer          23.7%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def reverse(self, x):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type x: int</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        preffix = &quot;&quot;</div><div class="line">        if &quot;-&quot; in str(x):</div><div class="line">            num = int(str(x).strip(&quot;-&quot;)[::-1])</div><div class="line">            preffix = &quot;-&quot;</div><div class="line">        else:</div><div class="line">            num = int(str(x)[::-1])</div><div class="line">        if num &gt;= 2147483648 or num &lt;= -2147483647:</div><div class="line">            return 0</div><div class="line">        return  int(preffix+str(num))</div></pre></td></tr></table></figure>
<h3 id="8-String-to-Integer-atoi-13-8-Easy"><a href="#8-String-to-Integer-atoi-13-8-Easy" class="headerlink" title="8    String to Integer (atoi)          13.8%    Easy"></a>8    String to Integer (atoi)          13.8%    Easy</h3><h3 id="9-Palindrome-Number-34-0-Easy"><a href="#9-Palindrome-Number-34-0-Easy" class="headerlink" title="9    Palindrome Number          34.0%    Easy"></a>9    Palindrome Number          34.0%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 使用了额外的存储，亟待优化</div><div class="line">class Solution(object):</div><div class="line">    def isPalindrome(self, x):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type x: int</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        l_x = list(str(x))</div><div class="line">        return l_x == l_x[::-1]</div></pre></td></tr></table></figure>
<h3 id="13-Roman-to-Integer-43-2-Easy"><a href="#13-Roman-to-Integer-43-2-Easy" class="headerlink" title="13    Roman to Integer          43.2%    Easy"></a>13    Roman to Integer          43.2%    Easy</h3><h3 id="14-Longest-Common-Prefix-30-4-Easy"><a href="#14-Longest-Common-Prefix-30-4-Easy" class="headerlink" title="14    Longest Common Prefix          30.4%    Easy"></a>14    Longest Common Prefix          30.4%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def longestCommonPrefix(self, strs):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type strs: List[str]</div><div class="line">        :rtype: str</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if len(strs) == 0:</div><div class="line">            return &quot;&quot;</div><div class="line">        current_clip = &quot;&quot;</div><div class="line">        len_strs = [len(_str) for _str in strs]</div><div class="line">        min_strs_len = min(len_strs)</div><div class="line">        has_common_flag = False</div><div class="line">        for _len in range(min_strs_len,0,-1):</div><div class="line">            cliped_strs_set = set()</div><div class="line">            for _str in strs:</div><div class="line">                current_clip = _str[0:_len]</div><div class="line">                cliped_strs_set.add(current_clip)</div><div class="line">            if len(cliped_strs_set) == 1:</div><div class="line">                has_common_flag = True</div><div class="line">                break</div><div class="line">        if has_common_flag:</div><div class="line">            return current_clip</div><div class="line">        else:</div><div class="line">            return &quot;&quot;</div></pre></td></tr></table></figure>
<h3 id="19-Remove-Nth-Node-From-End-of-List-32-0-Easy"><a href="#19-Remove-Nth-Node-From-End-of-List-32-0-Easy" class="headerlink" title="19    Remove Nth Node From End of List          32.0%    Easy"></a>19    Remove Nth Node From End of List          32.0%    Easy</h3><h3 id="20-Valid-Parentheses-31-9-Easy"><a href="#20-Valid-Parentheses-31-9-Easy" class="headerlink" title="20    Valid Parentheses          31.9%    Easy"></a>20    Valid Parentheses          31.9%    Easy</h3><h3 id="21-Merge-Two-Sorted-Lists-37-7-Easy"><a href="#21-Merge-Two-Sorted-Lists-37-7-Easy" class="headerlink" title="21    Merge Two Sorted Lists          37.7%    Easy"></a>21    Merge Two Sorted Lists          37.7%    Easy</h3><h3 id="24-Swap-Nodes-in-Pairs-37-0-Easy"><a href="#24-Swap-Nodes-in-Pairs-37-0-Easy" class="headerlink" title="24    Swap Nodes in Pairs          37.0%    Easy"></a>24    Swap Nodes in Pairs          37.0%    Easy</h3><h3 id="26-Remove-Duplicates-from-Sorted-Array-35-2-Easy"><a href="#26-Remove-Duplicates-from-Sorted-Array-35-2-Easy" class="headerlink" title="26    Remove Duplicates from Sorted Array          35.2%    Easy"></a>26    Remove Duplicates from Sorted Array          35.2%    Easy</h3><h3 id="27-Remove-Element-36-7-Easy"><a href="#27-Remove-Element-36-7-Easy" class="headerlink" title="27    Remove Element          36.7%    Easy"></a>27    Remove Element          36.7%    Easy</h3><h3 id="28-Implement-strStr-26-8-Easy"><a href="#28-Implement-strStr-26-8-Easy" class="headerlink" title="28    Implement strStr()          26.8%    Easy"></a>28    Implement strStr()          26.8%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def strStr(self, haystack, needle):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type haystack: str</div><div class="line">        :type needle: str</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        cur = -1</div><div class="line">        try:</div><div class="line">            cur = haystack.index(needle)</div><div class="line">        except Exception:</div><div class="line">            pass</div><div class="line">        return cur</div></pre></td></tr></table></figure>
<h3 id="36-Valid-Sudoku-33-7-Easy"><a href="#36-Valid-Sudoku-33-7-Easy" class="headerlink" title="36    Valid Sudoku          33.7%    Easy"></a>36    Valid Sudoku          33.7%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def isValidSudoku(self, board):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type board: List[List[str]]</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        # 横向</div></pre></td></tr></table></figure>
<h3 id="38-Count-and-Say-32-3-Easy"><a href="#38-Count-and-Say-32-3-Easy" class="headerlink" title="38    Count and Say          32.3%    Easy"></a>38    Count and Say          32.3%    Easy</h3><h3 id="58-Length-of-Last-Word-31-0-Easy"><a href="#58-Length-of-Last-Word-31-0-Easy" class="headerlink" title="58    Length of Last Word          31.0%    Easy"></a>58    Length of Last Word          31.0%    Easy</h3><h3 id="66-Plus-One-36-7-Easy"><a href="#66-Plus-One-36-7-Easy" class="headerlink" title="66    Plus One          36.7%    Easy"></a>66    Plus One          36.7%    Easy</h3><h3 id="67-Add-Binary-30-2-Easy"><a href="#67-Add-Binary-30-2-Easy" class="headerlink" title="67    Add Binary          30.2%    Easy"></a>67    Add Binary          30.2%    Easy</h3><h3 id="70-Climbing-Stairs-38-5-Easy"><a href="#70-Climbing-Stairs-38-5-Easy" class="headerlink" title="70    Climbing Stairs          38.5%    Easy"></a>70    Climbing Stairs          38.5%    Easy</h3><h3 id="83-Remove-Duplicates-from-Sorted-List-38-7-Easy"><a href="#83-Remove-Duplicates-from-Sorted-List-38-7-Easy" class="headerlink" title="83    Remove Duplicates from Sorted List          38.7%    Easy"></a>83    Remove Duplicates from Sorted List          38.7%    Easy</h3><h3 id="88-Merge-Sorted-Array-31-3-Easy"><a href="#88-Merge-Sorted-Array-31-3-Easy" class="headerlink" title="88    Merge Sorted Array          31.3%    Easy"></a>88    Merge Sorted Array          31.3%    Easy</h3><h3 id="100-Same-Tree-45-1-Easy"><a href="#100-Same-Tree-45-1-Easy" class="headerlink" title="100    Same Tree          45.1%    Easy"></a>100    Same Tree          45.1%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># Definition for a binary tree node.</div><div class="line"># class TreeNode(object):</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line"></div><div class="line">class Solution(object):</div><div class="line">    def isSameTree(self, p, q):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type p: TreeNode</div><div class="line">        :type q: TreeNode</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if p is None and q is None:</div><div class="line">            return True</div><div class="line">        elif p is not None and q is not None:</div><div class="line">            return p.val == q.val and self.isSameTree(p.left,q.left) and  self.isSameTree(p.right,q.right)</div><div class="line">        else:</div><div class="line">            return False</div></pre></td></tr></table></figure>
<h3 id="101-Symmetric-Tree-36-7-Easy"><a href="#101-Symmetric-Tree-36-7-Easy" class="headerlink" title="101    Symmetric Tree          36.7%    Easy"></a>101    Symmetric Tree          36.7%    Easy</h3><h3 id="102-Binary-Tree-Level-Order-Traversal-36-7-Easy"><a href="#102-Binary-Tree-Level-Order-Traversal-36-7-Easy" class="headerlink" title="102    Binary Tree Level Order Traversal          36.7%    Easy"></a>102    Binary Tree Level Order Traversal          36.7%    Easy</h3><h3 id="104-Maximum-Depth-of-Binary-Tree-50-6-Easy"><a href="#104-Maximum-Depth-of-Binary-Tree-50-6-Easy" class="headerlink" title="104    Maximum Depth of Binary Tree          50.6%    Easy"></a>104    Maximum Depth of Binary Tree          50.6%    Easy</h3><h3 id="107-Binary-Tree-Level-Order-Traversal-II-37-5-Easy"><a href="#107-Binary-Tree-Level-Order-Traversal-II-37-5-Easy" class="headerlink" title="107    Binary Tree Level Order Traversal II          37.5%    Easy"></a>107    Binary Tree Level Order Traversal II          37.5%    Easy</h3><h3 id="110-Balanced-Binary-Tree-36-1-Easy"><a href="#110-Balanced-Binary-Tree-36-1-Easy" class="headerlink" title="110    Balanced Binary Tree          36.1%    Easy"></a>110    Balanced Binary Tree          36.1%    Easy</h3><h3 id="111-Minimum-Depth-of-Binary-Tree-32-2-Easy"><a href="#111-Minimum-Depth-of-Binary-Tree-32-2-Easy" class="headerlink" title="111    Minimum Depth of Binary Tree          32.2%    Easy"></a>111    Minimum Depth of Binary Tree          32.2%    Easy</h3><h3 id="112-Path-Sum-32-8-Easy"><a href="#112-Path-Sum-32-8-Easy" class="headerlink" title="112    Path Sum          32.8%    Easy"></a>112    Path Sum          32.8%    Easy</h3><h3 id="118-Pascal’s-Triangle-36-5-Easy"><a href="#118-Pascal’s-Triangle-36-5-Easy" class="headerlink" title="118    Pascal’s Triangle          36.5%    Easy"></a>118    Pascal’s Triangle          36.5%    Easy</h3><h3 id="119-Pascal’s-Triangle-II-34-8-Easy"><a href="#119-Pascal’s-Triangle-II-34-8-Easy" class="headerlink" title="119    Pascal’s Triangle II          34.8%    Easy"></a>119    Pascal’s Triangle II          34.8%    Easy</h3><h3 id="121-Best-Time-to-Buy-and-Sell-Stock-38-9-Easy"><a href="#121-Best-Time-to-Buy-and-Sell-Stock-38-9-Easy" class="headerlink" title="121    Best Time to Buy and Sell Stock          38.9%    Easy"></a>121    Best Time to Buy and Sell Stock          38.9%    Easy</h3><h3 id="125-Valid-Palindrome-25-2-Easy"><a href="#125-Valid-Palindrome-25-2-Easy" class="headerlink" title="125    Valid Palindrome          25.2%    Easy"></a>125    Valid Palindrome          25.2%    Easy</h3><h3 id="136-Single-Number-52-6-Easy"><a href="#136-Single-Number-52-6-Easy" class="headerlink" title="136    Single Number          52.6%    Easy"></a>136    Single Number          52.6%    Easy</h3><h3 id="141-Linked-List-Cycle-35-9-Easy"><a href="#141-Linked-List-Cycle-35-9-Easy" class="headerlink" title="141    Linked List Cycle          35.9%    Easy"></a>141    Linked List Cycle          35.9%    Easy</h3><h3 id="155-Min-Stack-26-0-Easy"><a href="#155-Min-Stack-26-0-Easy" class="headerlink" title="155    Min Stack          26.0%    Easy"></a>155    Min Stack          26.0%    Easy</h3><h3 id="157-Read-N-Characters-Given-Read4-29-4-Easy"><a href="#157-Read-N-Characters-Given-Read4-29-4-Easy" class="headerlink" title="157    Read N Characters Given Read4          29.4%    Easy"></a>157    Read N Characters Given Read4          29.4%    Easy</h3><h3 id="160-Intersection-of-Two-Linked-Lists-30-0-Easy"><a href="#160-Intersection-of-Two-Linked-Lists-30-0-Easy" class="headerlink" title="160    Intersection of Two Linked Lists          30.0%    Easy"></a>160    Intersection of Two Linked Lists          30.0%    Easy</h3><h3 id="165-Compare-Version-Numbers-19-1-Easy"><a href="#165-Compare-Version-Numbers-19-1-Easy" class="headerlink" title="165    Compare Version Numbers          19.1%    Easy"></a>165    Compare Version Numbers          19.1%    Easy</h3><h3 id="168-Excel-Sheet-Column-Title-24-2-Easy"><a href="#168-Excel-Sheet-Column-Title-24-2-Easy" class="headerlink" title="168    Excel Sheet Column Title          24.2%    Easy"></a>168    Excel Sheet Column Title          24.2%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def titleToNumber(self, s):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type s: str</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        result = 0</div><div class="line">        for i,c in enumerate(s[::-1]):</div><div class="line">            result += (ord(c) - ord(&quot;A&quot;) + 1) * (26 ** i)</div><div class="line">        return result</div></pre></td></tr></table></figure>
<h3 id="169-Majority-Element-44-6-Easy"><a href="#169-Majority-Element-44-6-Easy" class="headerlink" title="169    Majority Element          44.6%    Easy"></a>169    Majority Element          44.6%    Easy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line">        <span class="keyword">return</span> Counter(nums).most_common()[<span class="number">0</span>][<span class="number">0</span>]</div></pre></td></tr></table></figure>
<h3 id="170-Two-Sum-III-Data-structure-design-22-6-Easy"><a href="#170-Two-Sum-III-Data-structure-design-22-6-Easy" class="headerlink" title="170    Two Sum III - Data structure design          22.6%    Easy"></a>170    Two Sum III - Data structure design          22.6%    Easy</h3><h3 id="171-Excel-Sheet-Column-Number-45-0-Easy"><a href="#171-Excel-Sheet-Column-Number-45-0-Easy" class="headerlink" title="171    Excel Sheet Column Number          45.0%    Easy"></a>171    Excel Sheet Column Number          45.0%    Easy</h3><h3 id="172-Factorial-Trailing-Zeroes-34-7-Easy"><a href="#172-Factorial-Trailing-Zeroes-34-7-Easy" class="headerlink" title="172    Factorial Trailing Zeroes          34.7%    Easy"></a>172    Factorial Trailing Zeroes          34.7%    Easy</h3><h3 id="189-Rotate-Array-23-3-Easy"><a href="#189-Rotate-Array-23-3-Easy" class="headerlink" title="189    Rotate Array          23.3%    Easy"></a>189    Rotate Array          23.3%    Easy</h3><h3 id="190-Reverse-Bits-29-5-Easy"><a href="#190-Reverse-Bits-29-5-Easy" class="headerlink" title="190    Reverse Bits          29.5%    Easy"></a>190    Reverse Bits          29.5%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Solution:</div><div class="line">    # @param n, an integer</div><div class="line">    # @return an integer</div><div class="line">    def reverseBits(self, n):</div><div class="line">        return int(bin(n).replace(&quot;0b&quot;,&quot;&quot;).zfill(32)[::-1],2)</div></pre></td></tr></table></figure>
<h3 id="191-Number-of-1-Bits-38-4-Easy"><a href="#191-Number-of-1-Bits-38-4-Easy" class="headerlink" title="191    Number of 1 Bits          38.4%    Easy"></a>191    Number of 1 Bits          38.4%    Easy</h3><h3 id="198-House-Robber-37-2-Easy"><a href="#198-House-Robber-37-2-Easy" class="headerlink" title="198    House Robber          37.2%    Easy"></a>198    House Robber          37.2%    Easy</h3><h3 id="202-Happy-Number-39-0-Easy"><a href="#202-Happy-Number-39-0-Easy" class="headerlink" title="202    Happy Number          39.0%    Easy"></a>202    Happy Number          39.0%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def isHappy(self, n):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type n: int</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return self.isHappyNum(self,n,[])</div><div class="line"></div><div class="line">    def isHappyNum(self,n,result_list):</div><div class="line">        result = reduce(lambda x , y : x+ y,map(lambda x : int(x) ** 2 ,str(n).split()))</div><div class="line">        if result in result_list:</div><div class="line">            return False</div><div class="line">        else:</div><div class="line">            result_list.append(result)</div><div class="line">            self.isHappyNum(result,result_list)</div></pre></td></tr></table></figure>
<h3 id="203-Remove-Linked-List-Elements-30-8-Easy"><a href="#203-Remove-Linked-List-Elements-30-8-Easy" class="headerlink" title="203    Remove Linked List Elements          30.8%    Easy"></a>203    Remove Linked List Elements          30.8%    Easy</h3><h3 id="204-Count-Primes-26-0-Easy"><a href="#204-Count-Primes-26-0-Easy" class="headerlink" title="204    Count Primes          26.0%    Easy"></a>204    Count Primes          26.0%    Easy</h3><h3 id="205-Isomorphic-Strings-32-3-Easy"><a href="#205-Isomorphic-Strings-32-3-Easy" class="headerlink" title="205    Isomorphic Strings          32.3%    Easy"></a>205    Isomorphic Strings          32.3%    Easy</h3><h3 id="206-Reverse-Linked-List-43-2-Easy"><a href="#206-Reverse-Linked-List-43-2-Easy" class="headerlink" title="206    Reverse Linked List          43.2%    Easy"></a>206    Reverse Linked List          43.2%    Easy</h3><h3 id="217-Contains-Duplicate-43-5-Easy"><a href="#217-Contains-Duplicate-43-5-Easy" class="headerlink" title="217    Contains Duplicate          43.5%    Easy"></a>217    Contains Duplicate          43.5%    Easy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> nums <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> len(nums) &gt;= <span class="number">1</span> <span class="keyword">and</span> len(nums) &gt; len(set(nums))</div></pre></td></tr></table></figure>
<h3 id="219-Contains-Duplicate-II-31-3-Easy"><a href="#219-Contains-Duplicate-II-31-3-Easy" class="headerlink" title="219    Contains Duplicate II          31.3%    Easy"></a>219    Contains Duplicate II          31.3%    Easy</h3><h3 id="223-Rectangle-Area-31-8-Easy"><a href="#223-Rectangle-Area-31-8-Easy" class="headerlink" title="223    Rectangle Area          31.8%    Easy"></a>223    Rectangle Area          31.8%    Easy</h3><h3 id="225-Implement-Stack-using-Queues-31-0-Easy"><a href="#225-Implement-Stack-using-Queues-31-0-Easy" class="headerlink" title="225    Implement Stack using Queues          31.0%    Easy"></a>225    Implement Stack using Queues          31.0%    Easy</h3><h3 id="226-Invert-Binary-Tree-49-5-Easy"><a href="#226-Invert-Binary-Tree-49-5-Easy" class="headerlink" title="226    Invert Binary Tree          49.5%    Easy"></a>226    Invert Binary Tree          49.5%    Easy</h3><h3 id="231-Power-of-Two-39-1-Easy"><a href="#231-Power-of-Two-39-1-Easy" class="headerlink" title="231    Power of Two          39.1%    Easy"></a>231    Power of Two          39.1%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def isPowerOfTwo(self, n):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type n: int</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if n % 2 == 1 and n &gt; 1:</div><div class="line">            return False</div><div class="line">        elif n &lt;= 0:</div><div class="line">            return False</div><div class="line">        elif n in (2,1):</div><div class="line">            return True</div><div class="line">        else:</div><div class="line">            return self.isPowerOfTwo(n / 2)</div></pre></td></tr></table></figure>
<h3 id="232-Implement-Queue-using-Stacks-34-9-Easy"><a href="#232-Implement-Queue-using-Stacks-34-9-Easy" class="headerlink" title="232    Implement Queue using Stacks          34.9%    Easy"></a>232    Implement Queue using Stacks          34.9%    Easy</h3><h3 id="234-Palindrome-Linked-List-31-4-Easy"><a href="#234-Palindrome-Linked-List-31-4-Easy" class="headerlink" title="234    Palindrome Linked List          31.4%    Easy"></a>234    Palindrome Linked List          31.4%    Easy</h3><h3 id="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree-38-0-Easy"><a href="#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree-38-0-Easy" class="headerlink" title="235    Lowest Common Ancestor of a Binary Search Tree          38.0%    Easy"></a>235    Lowest Common Ancestor of a Binary Search Tree          38.0%    Easy</h3><h3 id="237-Delete-Node-in-a-Linked-List-45-2-Easy"><a href="#237-Delete-Node-in-a-Linked-List-45-2-Easy" class="headerlink" title="237    Delete Node in a Linked List          45.2%    Easy"></a>237    Delete Node in a Linked List          45.2%    Easy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(self, node)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type node: ListNode</div><div class="line">        :rtype: void Do not return anything, modify node in-place instead.</div><div class="line">        这个方法是可以 Get 到 node 点的，但是题目的要求应该不是这个意思</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> node.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            node = node.next</div></pre></td></tr></table></figure>
<h3 id="242-Valid-Anagram-44-6-Easy"><a href="#242-Valid-Anagram-44-6-Easy" class="headerlink" title="242    Valid Anagram          44.6%    Easy"></a>242    Valid Anagram          44.6%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def isAnagram(self, s, t):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type s: str</div><div class="line">        :type t: str</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        from collections import Counter</div><div class="line">        return Counter(s) == Counter(t)</div></pre></td></tr></table></figure>
<h3 id="243-Shortest-Word-Distance-50-5-Easy"><a href="#243-Shortest-Word-Distance-50-5-Easy" class="headerlink" title="243    Shortest Word Distance          50.5%    Easy"></a>243    Shortest Word Distance          50.5%    Easy</h3><h3 id="246-Strobogrammatic-Number-38-7-Easy"><a href="#246-Strobogrammatic-Number-38-7-Easy" class="headerlink" title="246    Strobogrammatic Number          38.7%    Easy"></a>246    Strobogrammatic Number          38.7%    Easy</h3><h3 id="249-Group-Shifted-Strings-38-1-Easy"><a href="#249-Group-Shifted-Strings-38-1-Easy" class="headerlink" title="249    Group Shifted Strings          38.1%    Easy"></a>249    Group Shifted Strings          38.1%    Easy</h3><h3 id="252-Meeting-Rooms-45-2-Easy"><a href="#252-Meeting-Rooms-45-2-Easy" class="headerlink" title="252    Meeting Rooms          45.2%    Easy"></a>252    Meeting Rooms          45.2%    Easy</h3><h3 id="257-Binary-Tree-Paths-34-3-Easy"><a href="#257-Binary-Tree-Paths-34-3-Easy" class="headerlink" title="257    Binary Tree Paths          34.3%    Easy"></a>257    Binary Tree Paths          34.3%    Easy</h3><h3 id="258-Add-Digits-50-1-Easy"><a href="#258-Add-Digits-50-1-Easy" class="headerlink" title="258    Add Digits          50.1%    Easy"></a>258    Add Digits          50.1%    Easy</h3><h3 id="263-Ugly-Number-38-3-Easy"><a href="#263-Ugly-Number-38-3-Easy" class="headerlink" title="263    Ugly Number          38.3%    Easy"></a>263    Ugly Number          38.3%    Easy</h3><h3 id="266-Palindrome-Permutation-54-8-Easy"><a href="#266-Palindrome-Permutation-54-8-Easy" class="headerlink" title="266    Palindrome Permutation          54.8%    Easy"></a>266    Palindrome Permutation          54.8%    Easy</h3><h3 id="270-Closest-Binary-Search-Tree-Value-37-8-Easy"><a href="#270-Closest-Binary-Search-Tree-Value-37-8-Easy" class="headerlink" title="270    Closest Binary Search Tree Value          37.8%    Easy"></a>270    Closest Binary Search Tree Value          37.8%    Easy</h3><h3 id="276-Paint-Fence-33-7-Easy"><a href="#276-Paint-Fence-33-7-Easy" class="headerlink" title="276    Paint Fence          33.7%    Easy"></a>276    Paint Fence          33.7%    Easy</h3><h3 id="278-First-Bad-Version-24-2-Easy"><a href="#278-First-Bad-Version-24-2-Easy" class="headerlink" title="278    First Bad Version          24.2%    Easy"></a>278    First Bad Version          24.2%    Easy</h3><h3 id="283-Move-Zeroes-47-5-Easy"><a href="#283-Move-Zeroes-47-5-Easy" class="headerlink" title="283    Move Zeroes          47.5%    Easy"></a>283    Move Zeroes          47.5%    Easy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 首先想到的这个答案</span></div><div class="line"><span class="comment"># 然后 leetcode 上面居然还是打印的原来的值，我猜测肯定是用后台进行 id 比对内存地址。好吧，这个方式最好。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: void Do not return anything, modify nums in-place instead.</div><div class="line">        """</div><div class="line">        zero_count = nums.count(<span class="number">0</span>)</div><div class="line">        new_nums = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums <span class="keyword">if</span> num != <span class="number">0</span>]</div><div class="line">        new_nums.extend([<span class="number">0</span>]*zero_count)</div><div class="line">        nums = new_nums</div><div class="line"></div><div class="line"><span class="comment">## 蛋疼，三重排序</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: void Do not return anything, modify nums in-place instead.</div><div class="line">        """</div><div class="line">        begin_cur = <span class="number">0</span></div><div class="line">        end_cur = len(nums) - <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i,len(nums)):</div><div class="line">                <span class="keyword">if</span> nums[j] == <span class="number">0</span> <span class="keyword">and</span> nums[j+<span class="number">1</span>] != <span class="number">0</span>:</div><div class="line">                    nums[j] , nums[j+<span class="number">1</span>] = nums[j+<span class="number">1</span>] , nums[j]</div><div class="line">        print(nums)</div></pre></td></tr></table></figure>
<h3 id="288-Unique-Word-Abbreviation-15-3-Easy"><a href="#288-Unique-Word-Abbreviation-15-3-Easy" class="headerlink" title="288    Unique Word Abbreviation          15.3%    Easy"></a>288    Unique Word Abbreviation          15.3%    Easy</h3><h3 id="290-Word-Pattern-31-9-Easy"><a href="#290-Word-Pattern-31-9-Easy" class="headerlink" title="290    Word Pattern          31.9%    Easy"></a>290    Word Pattern          31.9%    Easy</h3><h3 id="292-Nim-Game-54-6-Easy"><a href="#292-Nim-Game-54-6-Easy" class="headerlink" title="292    Nim Game          54.6%    Easy"></a>292    Nim Game          54.6%    Easy</h3><h3 id="293-Flip-Game-53-7-Easy"><a href="#293-Flip-Game-53-7-Easy" class="headerlink" title="293    Flip Game          53.7%    Easy"></a>293    Flip Game          53.7%    Easy</h3><h3 id="299-Bulls-and-Cows-33-0-Easy"><a href="#299-Bulls-and-Cows-33-0-Easy" class="headerlink" title="299    Bulls and Cows          33.0%    Easy"></a>299    Bulls and Cows          33.0%    Easy</h3><h3 id="303-Range-Sum-Query-Immutable-26-1-Easy"><a href="#303-Range-Sum-Query-Immutable-26-1-Easy" class="headerlink" title="303    Range Sum Query - Immutable          26.1%    Easy"></a>303    Range Sum Query - Immutable          26.1%    Easy</h3><h3 id="326-Power-of-Three-39-1-Easy"><a href="#326-Power-of-Three-39-1-Easy" class="headerlink" title="326    Power of Three          39.1%    Easy"></a>326    Power of Three          39.1%    Easy</h3><h3 id="339-Nested-List-Weight-Sum-59-5-Easy"><a href="#339-Nested-List-Weight-Sum-59-5-Easy" class="headerlink" title="339    Nested List Weight Sum          59.5%    Easy"></a>339    Nested List Weight Sum          59.5%    Easy</h3><h3 id="342-Power-of-Four-37-2-Easy"><a href="#342-Power-of-Four-37-2-Easy" class="headerlink" title="342    Power of Four          37.2%    Easy"></a>342    Power of Four          37.2%    Easy</h3><h3 id="344-Reverse-String-57-4-Easy"><a href="#344-Reverse-String-57-4-Easy" class="headerlink" title="344    Reverse String          57.4%    Easy"></a>344    Reverse String          57.4%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def reverseString(self, s):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type s: str</div><div class="line">        :rtype: str</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return s[::-1]</div></pre></td></tr></table></figure>
<h3 id="345-Reverse-Vowels-of-a-String-37-1-Easy"><a href="#345-Reverse-Vowels-of-a-String-37-1-Easy" class="headerlink" title="345    Reverse Vowels of a String          37.1%    Easy"></a>345    Reverse Vowels of a String          37.1%    Easy</h3><h3 id="346-Moving-Average-from-Data-Stream-57-1-Easy"><a href="#346-Moving-Average-from-Data-Stream-57-1-Easy" class="headerlink" title="346    Moving Average from Data Stream          57.1%    Easy"></a>346    Moving Average from Data Stream          57.1%    Easy</h3><h3 id="349-Intersection-of-Two-Arrays-45-4-Easy"><a href="#349-Intersection-of-Two-Arrays-45-4-Easy" class="headerlink" title="349    Intersection of Two Arrays          45.4%    Easy"></a>349    Intersection of Two Arrays          45.4%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def intersection(self, nums1, nums2):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums1: List[int]</div><div class="line">        :type nums2: List[int]</div><div class="line">        :rtype: List[int]</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return list(set(nums1) &amp; set(nums2))</div></pre></td></tr></table></figure>
<h3 id="350-Intersection-of-Two-Arrays-II-43-4-Easy"><a href="#350-Intersection-of-Two-Arrays-II-43-4-Easy" class="headerlink" title="350    Intersection of Two Arrays II          43.4%    Easy"></a>350    Intersection of Two Arrays II          43.4%    Easy</h3><h3 id="359-Logger-Rate-Limiter-58-0-Easy"><a href="#359-Logger-Rate-Limiter-58-0-Easy" class="headerlink" title="359    Logger Rate Limiter          58.0%    Easy"></a>359    Logger Rate Limiter          58.0%    Easy</h3><h3 id="371-Sum-of-Two-Integers-51-5-Easy"><a href="#371-Sum-of-Two-Integers-51-5-Easy" class="headerlink" title="371    Sum of Two Integers          51.5%    Easy"></a>371    Sum of Two Integers          51.5%    Easy</h3><h3 id="374-Guess-Number-Higher-or-Lower-33-2-Easy"><a href="#374-Guess-Number-Higher-or-Lower-33-2-Easy" class="headerlink" title="374    Guess Number Higher or Lower          33.2%    Easy"></a>374    Guess Number Higher or Lower          33.2%    Easy</h3><h3 id="383-Ransom-Note-45-9-Easy"><a href="#383-Ransom-Note-45-9-Easy" class="headerlink" title="383    Ransom Note          45.9%    Easy"></a>383    Ransom Note          45.9%    Easy</h3><h3 id="387-First-Unique-Character-in-a-String-45-1-Easy"><a href="#387-First-Unique-Character-in-a-String-45-1-Easy" class="headerlink" title="387    First Unique Character in a String          45.1%    Easy"></a>387    First Unique Character in a String          45.1%    Easy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">firstUniqChar</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        flag = <span class="number">-1</span></div><div class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line">        uniq_chars_set = set([k <span class="keyword">for</span> k , v <span class="keyword">in</span> Counter(s).items() <span class="keyword">if</span> v == <span class="number">1</span>])</div><div class="line">        <span class="keyword">for</span> i,c <span class="keyword">in</span> enumerate(s):</div><div class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> uniq_chars_set:</div><div class="line">                <span class="keyword">return</span> i</div><div class="line">        <span class="keyword">return</span> flag</div></pre></td></tr></table></figure>
<h3 id="389-Find-the-Difference-50-3-Easy"><a href="#389-Find-the-Difference-50-3-Easy" class="headerlink" title="389    Find the Difference          50.3%    Easy"></a>389    Find the Difference          50.3%    Easy</h3><h3 id="396-Rotate-Function-30-1-Easy"><a href="#396-Rotate-Function-30-1-Easy" class="headerlink" title="396    Rotate Function          30.1%    Easy"></a>396    Rotate Function          30.1%    Easy</h3><h3 id="400-Nth-Digit-30-6-Easy"><a href="#400-Nth-Digit-30-6-Easy" class="headerlink" title="400    Nth Digit          30.6%    Easy"></a>400    Nth Digit          30.6%    Easy</h3><h3 id="401-Binary-Watch-43-1-Easy"><a href="#401-Binary-Watch-43-1-Easy" class="headerlink" title="401    Binary Watch          43.1%    Easy"></a>401    Binary Watch          43.1%    Easy</h3><h3 id="404-Sum-of-Left-Leaves-45-6-Easy"><a href="#404-Sum-of-Left-Leaves-45-6-Easy" class="headerlink" title="404    Sum of Left Leaves          45.6%    Easy"></a>404    Sum of Left Leaves          45.6%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"># Definition for a binary tree node.</div><div class="line"></div><div class="line"># class TreeNode(object):</div><div class="line"></div><div class="line">#     def __init__(self, x):</div><div class="line"></div><div class="line">#         self.val = x</div><div class="line"></div><div class="line">#         self.left = None</div><div class="line"></div><div class="line">#         self.right = None</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">class Solution(object):</div><div class="line"></div><div class="line">    def sumOfLeftLeaves(self, root):</div><div class="line"></div><div class="line">        &quot;&quot;&quot;</div><div class="line"></div><div class="line">        :type root: TreeNode</div><div class="line"></div><div class="line">        :rtype: int</div><div class="line"></div><div class="line">        &quot;&quot;&quot;</div><div class="line"></div><div class="line">        if root is None:</div><div class="line"></div><div class="line">            return 0</div><div class="line"></div><div class="line">        return self.newSumOfLeftLeaves(root.left,-1) + self.newSumOfLeftLeaves(root.right,1)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    def newSumOfLeftLeaves(self,root,flag):</div><div class="line"></div><div class="line">        if root is None:</div><div class="line"></div><div class="line">            return 0</div><div class="line"></div><div class="line">        elif root.left is not None and root.right is not None:</div><div class="line"></div><div class="line">            return self.newSumOfLeftLeaves(root.left,-1) + self.newSumOfLeftLeaves(root.right,1)</div><div class="line"></div><div class="line">        elif root.left is None and root.right is None:</div><div class="line"></div><div class="line">            if flag == -1: </div><div class="line"></div><div class="line">                return root.val + self.newSumOfLeftLeaves(root.right,1)</div><div class="line"></div><div class="line">            else:</div><div class="line"></div><div class="line">                return 0</div><div class="line"></div><div class="line">        elif root.left is None and root.right is not None:</div><div class="line"></div><div class="line">            return self.newSumOfLeftLeaves(root.right,1)</div><div class="line"></div><div class="line">        elif root.left is not None and root.right is None:</div><div class="line"></div><div class="line">            return self.newSumOfLeftLeaves(root.left,-1)</div></pre></td></tr></table></figure>
<h3 id="405-Convert-a-Number-to-Hexadecimal-40-6-Easy"><a href="#405-Convert-a-Number-to-Hexadecimal-40-6-Easy" class="headerlink" title="405    Convert a Number to Hexadecimal          40.6%    Easy"></a>405    Convert a Number to Hexadecimal          40.6%    Easy</h3><h3 id="408-Valid-Word-Abbreviation-27-2-Easy"><a href="#408-Valid-Word-Abbreviation-27-2-Easy" class="headerlink" title="408    Valid Word Abbreviation          27.2%    Easy"></a>408    Valid Word Abbreviation          27.2%    Easy</h3><h3 id="409-Longest-Palindrome-44-1-Easy"><a href="#409-Longest-Palindrome-44-1-Easy" class="headerlink" title="409    Longest Palindrome          44.1%    Easy"></a>409    Longest Palindrome          44.1%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def longestPalindrome(self, s):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type s: str</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        from collections import Counter</div><div class="line">        max_len = 0</div><div class="line">        odd_count = 0</div><div class="line">        for _chr,_chrs_len in Counter(s).items():</div><div class="line">            if _chrs_len % 2 == 1:</div><div class="line">                odd_count = 1</div><div class="line">                max_len += _chrs_len - 1</div><div class="line">            else:</div><div class="line">                max_len += _chrs_len</div><div class="line"></div><div class="line">        return max_len + odd_count</div></pre></td></tr></table></figure>
<h3 id="412-Fizz-Buzz-58-0-Easy"><a href="#412-Fizz-Buzz-58-0-Easy" class="headerlink" title="412    Fizz Buzz          58.0%    Easy"></a>412    Fizz Buzz          58.0%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def fizzBuzz(self, n):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type n: int</div><div class="line">        :rtype: List[str]</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        arr = []</div><div class="line">        for i in range(1,n+1):</div><div class="line">            item = None</div><div class="line">            if i % 3 == 0 and i % 5 == 0:</div><div class="line">                item = &quot;FizzBuzz&quot;</div><div class="line">                arr.append(item)</div><div class="line">                continue</div><div class="line">            if i % 3 == 0:</div><div class="line">                item = &quot;Fizz&quot;</div><div class="line">                arr.append(item)</div><div class="line">                continue</div><div class="line">            if i % 5 == 0:</div><div class="line">                item = &quot;Buzz&quot;</div><div class="line">                arr.append(item)</div><div class="line">                continue</div><div class="line">            arr.append(str(i))</div><div class="line">        return arr</div></pre></td></tr></table></figure>
<h3 id="414-Third-Maximum-Number-26-7-Easy"><a href="#414-Third-Maximum-Number-26-7-Easy" class="headerlink" title="414    Third Maximum Number          26.7%    Easy"></a>414    Third Maximum Number          26.7%    Easy</h3><h3 id="415-Add-Strings-41-1-Easy"><a href="#415-Add-Strings-41-1-Easy" class="headerlink" title="415    Add Strings          41.1%    Easy"></a>415    Add Strings          41.1%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 哼，让我不用，我偏偏要用转 int</div><div class="line">class Solution(object):</div><div class="line">    def addStrings(self, num1, num2):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type num1: str</div><div class="line">        :type num2: str</div><div class="line">        :rtype: str</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return str(int(num1) + int(num2))</div><div class="line"></div><div class="line"># 我就不用 int 都可以 one line</div><div class="line">class Solution(object):</div><div class="line">    def addStrings(self, num1, num2):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type num1: str</div><div class="line">        :type num2: str</div><div class="line">        :rtype: str</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return str(eval(&quot;&#123;&#125; + &#123;&#125;&quot;.format(num1,num2)))</div></pre></td></tr></table></figure>
<h3 id="422-Valid-Word-Square-36-2-Easy"><a href="#422-Valid-Word-Square-36-2-Easy" class="headerlink" title="422    Valid Word Square          36.2%    Easy"></a>422    Valid Word Square          36.2%    Easy</h3><h3 id="434-Number-of-Segments-in-a-String-39-0-Easy"><a href="#434-Number-of-Segments-in-a-String-39-0-Easy" class="headerlink" title="434    Number of Segments in a String          39.0%    Easy"></a>434    Number of Segments in a String          39.0%    Easy</h3><h3 id="437-Path-Sum-III-38-6-Easy"><a href="#437-Path-Sum-III-38-6-Easy" class="headerlink" title="437    Path Sum III          38.6%    Easy"></a>437    Path Sum III          38.6%    Easy</h3><h3 id="438-Find-All-Anagrams-in-a-String-33-4-Easy"><a href="#438-Find-All-Anagrams-in-a-String-33-4-Easy" class="headerlink" title="438    Find All Anagrams in a String          33.4%    Easy"></a>438    Find All Anagrams in a String          33.4%    Easy</h3><h3 id="441-Arranging-Coins-36-2-Easy"><a href="#441-Arranging-Coins-36-2-Easy" class="headerlink" title="441    Arranging Coins          36.2%    Easy"></a>441    Arranging Coins          36.2%    Easy</h3><h3 id="447-Number-of-Boomerangs-41-8-Easy"><a href="#447-Number-of-Boomerangs-41-8-Easy" class="headerlink" title="447    Number of Boomerangs          41.8%    Easy"></a>447    Number of Boomerangs          41.8%    Easy</h3><h3 id="448-Find-All-Numbers-Disappeared-in-an-Array-61-3-Easy"><a href="#448-Find-All-Numbers-Disappeared-in-an-Array-61-3-Easy" class="headerlink" title="448    Find All Numbers Disappeared in an Array          61.3%    Easy"></a>448    Find All Numbers Disappeared in an Array          61.3%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def findDisappearedNumbers(self, nums):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[int]</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        len_nums = len(nums)</div><div class="line">        if len_nums &lt; 1:</div><div class="line">            return []</div><div class="line">        l = list(set(range(1,len_nums + 1)) - set(nums))</div><div class="line">        return l</div></pre></td></tr></table></figure>
<h3 id="453-Minimum-Moves-to-Equal-Array-Elements-45-9-Easy"><a href="#453-Minimum-Moves-to-Equal-Array-Elements-45-9-Easy" class="headerlink" title="453    Minimum Moves to Equal Array Elements          45.9%    Easy"></a>453    Minimum Moves to Equal Array Elements          45.9%    Easy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def minMoves(self, nums):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        n - 1 个元素 ++ 等同于 1 个元素 --</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return sum(nums) - len(nums) * min(nums)</div></pre></td></tr></table></figure>
<h3 id="455-Assign-Cookies-48-7-Easy"><a href="#455-Assign-Cookies-48-7-Easy" class="headerlink" title="455    Assign Cookies          48.7%    Easy"></a>455    Assign Cookies          48.7%    Easy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 二叉树？</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findContentChildren</span><span class="params">(self, g, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type g: List[int]</div><div class="line">        :type s: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> len(g) == <span class="number">0</span> <span class="keyword">or</span> len(s) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        g.sort()</div><div class="line">        s.sort()</div><div class="line">        satisfied_count = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> len(s) &gt; <span class="number">0</span>:</div><div class="line">            max_cookie = s.pop()</div><div class="line">            <span class="keyword">while</span> len(g) &gt; <span class="number">0</span>:</div><div class="line">                max_child = g.pop()</div><div class="line">                <span class="keyword">if</span> max_child &lt;= max_cookie:</div><div class="line">                    satisfied_count += <span class="number">1</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">        <span class="keyword">return</span> satisfied_count</div></pre></td></tr></table></figure>
<h3 id="459-Repeated-Substring-Pattern-39-6-Easy"><a href="#459-Repeated-Substring-Pattern-39-6-Easy" class="headerlink" title="459    Repeated Substring Pattern          39.6%    Easy"></a>459    Repeated Substring Pattern          39.6%    Easy</h3><h3 id="461-Hamming-Distance-74-8-Easy"><a href="#461-Hamming-Distance-74-8-Easy" class="headerlink" title="461    Hamming Distance          74.8%    Easy"></a>461    Hamming Distance          74.8%    Easy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingDistance</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type x: int</div><div class="line">        :type y: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        ma = str(bin(max(x,y))).replace(<span class="string">"0b"</span>,<span class="string">""</span>).zfill(<span class="number">31</span>)</div><div class="line">        ma_len = len(ma)</div><div class="line">        mi = str(bin(min(x,y))).replace(<span class="string">"0b"</span>,<span class="string">""</span>).zfill(<span class="number">31</span>)</div><div class="line">        print(mi)</div><div class="line">        print(ma)</div><div class="line">        count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> i, chr <span class="keyword">in</span> enumerate(mi):</div><div class="line">            <span class="keyword">if</span> ma[i] != chr:</div><div class="line">                count += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> count</div></pre></td></tr></table></figure>
<h3 id="463-Island-Perimeter-56-3-Easy"><a href="#463-Island-Perimeter-56-3-Easy" class="headerlink" title="463    Island Perimeter          56.3%    Easy"></a>463    Island Perimeter          56.3%    Easy</h3><h3 id="475-Heaters-30-3-Easy"><a href="#475-Heaters-30-3-Easy" class="headerlink" title="475    Heaters          30.3%    Easy"></a>475    Heaters          30.3%    Easy</h3><h3 id="566-Reshape-the-Matrix"><a href="#566-Reshape-the-Matrix" class="headerlink" title="566. Reshape the Matrix"></a>566. Reshape the Matrix</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">matrixReshape</span><span class="params">(self, nums, r, c)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[List[int]]</div><div class="line">        :type r: int</div><div class="line">        :type c: int</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        """</div><div class="line">        row_len = len(nums)</div><div class="line">        col_len = len(nums[<span class="number">0</span>])</div><div class="line">        <span class="keyword">if</span> row_len * col_len != r * c:</div><div class="line">            <span class="keyword">return</span> nums</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            new_nums = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(c)] <span class="keyword">for</span> j <span class="keyword">in</span> range(r)]</div><div class="line">            cur = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> row_nu <span class="keyword">in</span> range(row_len):</div><div class="line">                <span class="keyword">for</span> col_nu <span class="keyword">in</span> range(col_len):</div><div class="line">                    cur += <span class="number">1</span></div><div class="line">                    new_row_nu = (cur - <span class="number">1</span>) // c</div><div class="line">                    new_col_nu = cur - new_row_nu * c - <span class="number">1</span></div><div class="line">                    new_nums[new_row_nu][new_col_nu] = nums[row_nu][col_nu]</div><div class="line">        <span class="keyword">return</span> new_nums</div></pre></td></tr></table></figure>
<h2 id="Medium-集合"><a href="#Medium-集合" class="headerlink" title="Medium 集合"></a>Medium 集合</h2><h3 id="2-Add-Two-Numbers-26-1-Medium"><a href="#2-Add-Two-Numbers-26-1-Medium" class="headerlink" title="2    Add Two Numbers          26.1%    Medium"></a>2    Add Two Numbers          26.1%    Medium</h3><h3 id="3-Longest-Substring-Without-Repeating-Characters-23-6-Medium"><a href="#3-Longest-Substring-Without-Repeating-Characters-23-6-Medium" class="headerlink" title="3    Longest Substring Without Repeating Characters          23.6%    Medium"></a>3    Longest Substring Without Repeating Characters          23.6%    Medium</h3><h3 id="5-Longest-Palindromic-Substring-24-4-Medium"><a href="#5-Longest-Palindromic-Substring-24-4-Medium" class="headerlink" title="5    Longest Palindromic Substring          24.4%    Medium"></a>5    Longest Palindromic Substring          24.4%    Medium</h3><h3 id="11-Container-With-Most-Water-36-0-Medium"><a href="#11-Container-With-Most-Water-36-0-Medium" class="headerlink" title="11    Container With Most Water          36.0%    Medium"></a>11    Container With Most Water          36.0%    Medium</h3><h3 id="12-Integer-to-Roman-42-6-Medium"><a href="#12-Integer-to-Roman-42-6-Medium" class="headerlink" title="12    Integer to Roman          42.6%    Medium"></a>12    Integer to Roman          42.6%    Medium</h3><h3 id="15-3Sum-20-7-Medium"><a href="#15-3Sum-20-7-Medium" class="headerlink" title="15    3Sum          20.7%    Medium"></a>15    3Sum          20.7%    Medium</h3><h3 id="16-3Sum-Closest-30-4-Medium"><a href="#16-3Sum-Closest-30-4-Medium" class="headerlink" title="16    3Sum Closest          30.4%    Medium"></a>16    3Sum Closest          30.4%    Medium</h3><h3 id="17-Letter-Combinations-of-a-Phone-Number-32-1-Medium"><a href="#17-Letter-Combinations-of-a-Phone-Number-32-1-Medium" class="headerlink" title="17    Letter Combinations of a Phone Number          32.1%    Medium"></a>17    Letter Combinations of a Phone Number          32.1%    Medium</h3><h3 id="18-4Sum-25-5-Medium"><a href="#18-4Sum-25-5-Medium" class="headerlink" title="18    4Sum          25.5%    Medium"></a>18    4Sum          25.5%    Medium</h3><h3 id="22-Generate-Parentheses-41-5-Medium"><a href="#22-Generate-Parentheses-41-5-Medium" class="headerlink" title="22    Generate Parentheses          41.5%    Medium"></a>22    Generate Parentheses          41.5%    Medium</h3><h3 id="29-Divide-Two-Integers-15-9-Medium"><a href="#29-Divide-Two-Integers-15-9-Medium" class="headerlink" title="29    Divide Two Integers          15.9%    Medium"></a>29    Divide Two Integers          15.9%    Medium</h3><h3 id="31-Next-Permutation-28-0-Medium"><a href="#31-Next-Permutation-28-0-Medium" class="headerlink" title="31    Next Permutation          28.0%    Medium"></a>31    Next Permutation          28.0%    Medium</h3><h3 id="34-Search-for-a-Range-30-8-Medium"><a href="#34-Search-for-a-Range-30-8-Medium" class="headerlink" title="34    Search for a Range          30.8%    Medium"></a>34    Search for a Range          30.8%    Medium</h3><h3 id="35-Search-Insert-Position-38-8-Medium"><a href="#35-Search-Insert-Position-38-8-Medium" class="headerlink" title="35    Search Insert Position          38.8%    Medium"></a>35    Search Insert Position          38.8%    Medium</h3><h3 id="39-Combination-Sum-35-4-Medium"><a href="#39-Combination-Sum-35-4-Medium" class="headerlink" title="39    Combination Sum          35.4%    Medium"></a>39    Combination Sum          35.4%    Medium</h3><h3 id="40-Combination-Sum-II-31-0-Medium"><a href="#40-Combination-Sum-II-31-0-Medium" class="headerlink" title="40    Combination Sum II          31.0%    Medium"></a>40    Combination Sum II          31.0%    Medium</h3><h3 id="43-Multiply-Strings-25-8-Medium"><a href="#43-Multiply-Strings-25-8-Medium" class="headerlink" title="43    Multiply Strings          25.8%    Medium"></a>43    Multiply Strings          25.8%    Medium</h3><h3 id="46-Permutations-40-1-Medium"><a href="#46-Permutations-40-1-Medium" class="headerlink" title="46    Permutations          40.1%    Medium"></a>46    Permutations          40.1%    Medium</h3><h3 id="47-Permutations-II-30-8-Medium"><a href="#47-Permutations-II-30-8-Medium" class="headerlink" title="47    Permutations II          30.8%    Medium"></a>47    Permutations II          30.8%    Medium</h3><h3 id="48-Rotate-Image-36-9-Medium"><a href="#48-Rotate-Image-36-9-Medium" class="headerlink" title="48    Rotate Image          36.9%    Medium"></a>48    Rotate Image          36.9%    Medium</h3><h3 id="49-Group-Anagrams-31-5-Medium"><a href="#49-Group-Anagrams-31-5-Medium" class="headerlink" title="49    Group Anagrams          31.5%    Medium"></a>49    Group Anagrams          31.5%    Medium</h3><h3 id="50-Pow-x-n-27-1-Medium"><a href="#50-Pow-x-n-27-1-Medium" class="headerlink" title="50    Pow(x, n)          27.1%    Medium"></a>50    Pow(x, n)          27.1%    Medium</h3><h3 id="53-Maximum-Subarray-38-6-Medium"><a href="#53-Maximum-Subarray-38-6-Medium" class="headerlink" title="53    Maximum Subarray          38.6%    Medium"></a>53    Maximum Subarray          38.6%    Medium</h3><h3 id="54-Spiral-Matrix-24-4-Medium"><a href="#54-Spiral-Matrix-24-4-Medium" class="headerlink" title="54    Spiral Matrix          24.4%    Medium"></a>54    Spiral Matrix          24.4%    Medium</h3><h3 id="55-Jump-Game-29-1-Medium"><a href="#55-Jump-Game-29-1-Medium" class="headerlink" title="55    Jump Game          29.1%    Medium"></a>55    Jump Game          29.1%    Medium</h3><h3 id="59-Spiral-Matrix-II-37-8-Medium"><a href="#59-Spiral-Matrix-II-37-8-Medium" class="headerlink" title="59    Spiral Matrix II          37.8%    Medium"></a>59    Spiral Matrix II          37.8%    Medium</h3><h3 id="60-Permutation-Sequence-27-0-Medium"><a href="#60-Permutation-Sequence-27-0-Medium" class="headerlink" title="60    Permutation Sequence          27.0%    Medium"></a>60    Permutation Sequence          27.0%    Medium</h3><h3 id="61-Rotate-List-24-0-Medium"><a href="#61-Rotate-List-24-0-Medium" class="headerlink" title="61    Rotate List          24.0%    Medium"></a>61    Rotate List          24.0%    Medium</h3><h3 id="62-Unique-Paths-39-0-Medium"><a href="#62-Unique-Paths-39-0-Medium" class="headerlink" title="62    Unique Paths          39.0%    Medium"></a>62    Unique Paths          39.0%    Medium</h3><h3 id="63-Unique-Paths-II-30-8-Medium"><a href="#63-Unique-Paths-II-30-8-Medium" class="headerlink" title="63    Unique Paths II          30.8%    Medium"></a>63    Unique Paths II          30.8%    Medium</h3><h3 id="64-Minimum-Path-Sum-37-0-Medium"><a href="#64-Minimum-Path-Sum-37-0-Medium" class="headerlink" title="64    Minimum Path Sum          37.0%    Medium"></a>64    Minimum Path Sum          37.0%    Medium</h3><h3 id="69-Sqrt-x-26-8-Medium"><a href="#69-Sqrt-x-26-8-Medium" class="headerlink" title="69    Sqrt(x)          26.8%    Medium"></a>69    Sqrt(x)          26.8%    Medium</h3><h3 id="71-Simplify-Path-23-9-Medium"><a href="#71-Simplify-Path-23-9-Medium" class="headerlink" title="71    Simplify Path          23.9%    Medium"></a>71    Simplify Path          23.9%    Medium</h3><h3 id="73-Set-Matrix-Zeroes-35-0-Medium"><a href="#73-Set-Matrix-Zeroes-35-0-Medium" class="headerlink" title="73    Set Matrix Zeroes          35.0%    Medium"></a>73    Set Matrix Zeroes          35.0%    Medium</h3><h3 id="74-Search-a-2D-Matrix-35-6-Medium"><a href="#74-Search-a-2D-Matrix-35-6-Medium" class="headerlink" title="74    Search a 2D Matrix          35.6%    Medium"></a>74    Search a 2D Matrix          35.6%    Medium</h3><h3 id="75-Sort-Colors-36-5-Medium"><a href="#75-Sort-Colors-36-5-Medium" class="headerlink" title="75    Sort Colors          36.5%    Medium"></a>75    Sort Colors          36.5%    Medium</h3><h3 id="77-Combinations-37-6-Medium"><a href="#77-Combinations-37-6-Medium" class="headerlink" title="77    Combinations          37.6%    Medium"></a>77    Combinations          37.6%    Medium</h3><h3 id="78-Subsets-36-2-Medium"><a href="#78-Subsets-36-2-Medium" class="headerlink" title="78    Subsets          36.2%    Medium"></a>78    Subsets          36.2%    Medium</h3><h3 id="79-Word-Search-25-2-Medium"><a href="#79-Word-Search-25-2-Medium" class="headerlink" title="79    Word Search          25.2%    Medium"></a>79    Word Search          25.2%    Medium</h3><h3 id="80-Remove-Duplicates-from-Sorted-Array-II-34-7-Medium"><a href="#80-Remove-Duplicates-from-Sorted-Array-II-34-7-Medium" class="headerlink" title="80    Remove Duplicates from Sorted Array II          34.7%    Medium"></a>80    Remove Duplicates from Sorted Array II          34.7%    Medium</h3><h3 id="81-Search-in-Rotated-Sorted-Array-II-32-9-Medium"><a href="#81-Search-in-Rotated-Sorted-Array-II-32-9-Medium" class="headerlink" title="81    Search in Rotated Sorted Array II          32.9%    Medium"></a>81    Search in Rotated Sorted Array II          32.9%    Medium</h3><h3 id="82-Remove-Duplicates-from-Sorted-List-II-28-5-Medium"><a href="#82-Remove-Duplicates-from-Sorted-List-II-28-5-Medium" class="headerlink" title="82    Remove Duplicates from Sorted List II          28.5%    Medium"></a>82    Remove Duplicates from Sorted List II          28.5%    Medium</h3><h3 id="86-Partition-List-31-4-Medium"><a href="#86-Partition-List-31-4-Medium" class="headerlink" title="86    Partition List          31.4%    Medium"></a>86    Partition List          31.4%    Medium</h3><h3 id="89-Gray-Code-39-1-Medium"><a href="#89-Gray-Code-39-1-Medium" class="headerlink" title="89    Gray Code          39.1%    Medium"></a>89    Gray Code          39.1%    Medium</h3><h3 id="90-Subsets-II-33-6-Medium"><a href="#90-Subsets-II-33-6-Medium" class="headerlink" title="90    Subsets II          33.6%    Medium"></a>90    Subsets II          33.6%    Medium</h3><h3 id="91-Decode-Ways-18-8-Medium"><a href="#91-Decode-Ways-18-8-Medium" class="headerlink" title="91    Decode Ways          18.8%    Medium"></a>91    Decode Ways          18.8%    Medium</h3><h3 id="92-Reverse-Linked-List-II-29-7-Medium"><a href="#92-Reverse-Linked-List-II-29-7-Medium" class="headerlink" title="92    Reverse Linked List II          29.7%    Medium"></a>92    Reverse Linked List II          29.7%    Medium</h3><h3 id="93-Restore-IP-Addresses-25-7-Medium"><a href="#93-Restore-IP-Addresses-25-7-Medium" class="headerlink" title="93    Restore IP Addresses          25.7%    Medium"></a>93    Restore IP Addresses          25.7%    Medium</h3><h3 id="94-Binary-Tree-Inorder-Traversal-43-5-Medium"><a href="#94-Binary-Tree-Inorder-Traversal-43-5-Medium" class="headerlink" title="94    Binary Tree Inorder Traversal          43.5%    Medium"></a>94    Binary Tree Inorder Traversal          43.5%    Medium</h3><h3 id="95-Unique-Binary-Search-Trees-II-30-5-Medium"><a href="#95-Unique-Binary-Search-Trees-II-30-5-Medium" class="headerlink" title="95    Unique Binary Search Trees II          30.5%    Medium"></a>95    Unique Binary Search Trees II          30.5%    Medium</h3><h3 id="96-Unique-Binary-Search-Trees-39-6-Medium"><a href="#96-Unique-Binary-Search-Trees-39-6-Medium" class="headerlink" title="96    Unique Binary Search Trees          39.6%    Medium"></a>96    Unique Binary Search Trees          39.6%    Medium</h3><h3 id="98-Validate-Binary-Search-Tree-22-2-Medium"><a href="#98-Validate-Binary-Search-Tree-22-2-Medium" class="headerlink" title="98    Validate Binary Search Tree          22.2%    Medium"></a>98    Validate Binary Search Tree          22.2%    Medium</h3><h3 id="103-Binary-Tree-Zigzag-Level-Order-Traversal-32-0-Medium"><a href="#103-Binary-Tree-Zigzag-Level-Order-Traversal-32-0-Medium" class="headerlink" title="103    Binary Tree Zigzag Level Order Traversal          32.0%    Medium"></a>103    Binary Tree Zigzag Level Order Traversal          32.0%    Medium</h3><h3 id="105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal-30-6-Medium"><a href="#105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal-30-6-Medium" class="headerlink" title="105    Construct Binary Tree from Preorder and Inorder Traversal          30.6%    Medium"></a>105    Construct Binary Tree from Preorder and Inorder Traversal          30.6%    Medium</h3><h3 id="106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal-30-8-Medium"><a href="#106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal-30-8-Medium" class="headerlink" title="106    Construct Binary Tree from Inorder and Postorder Traversal          30.8%    Medium"></a>106    Construct Binary Tree from Inorder and Postorder Traversal          30.8%    Medium</h3><h3 id="108-Convert-Sorted-Array-to-Binary-Search-Tree-40-2-Medium"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree-40-2-Medium" class="headerlink" title="108    Convert Sorted Array to Binary Search Tree          40.2%    Medium"></a>108    Convert Sorted Array to Binary Search Tree          40.2%    Medium</h3><h3 id="109-Convert-Sorted-List-to-Binary-Search-Tree-32-6-Medium"><a href="#109-Convert-Sorted-List-to-Binary-Search-Tree-32-6-Medium" class="headerlink" title="109    Convert Sorted List to Binary Search Tree          32.6%    Medium"></a>109    Convert Sorted List to Binary Search Tree          32.6%    Medium</h3><h3 id="113-Path-Sum-II-31-2-Medium"><a href="#113-Path-Sum-II-31-2-Medium" class="headerlink" title="113    Path Sum II          31.2%    Medium"></a>113    Path Sum II          31.2%    Medium</h3><h3 id="114-Flatten-Binary-Tree-to-Linked-List-33-4-Medium"><a href="#114-Flatten-Binary-Tree-to-Linked-List-33-4-Medium" class="headerlink" title="114    Flatten Binary Tree to Linked List          33.4%    Medium"></a>114    Flatten Binary Tree to Linked List          33.4%    Medium</h3><h3 id="116-Populating-Next-Right-Pointers-in-Each-Node-36-8-Medium"><a href="#116-Populating-Next-Right-Pointers-in-Each-Node-36-8-Medium" class="headerlink" title="116    Populating Next Right Pointers in Each Node          36.8%    Medium"></a>116    Populating Next Right Pointers in Each Node          36.8%    Medium</h3><h3 id="120-Triangle-32-3-Medium"><a href="#120-Triangle-32-3-Medium" class="headerlink" title="120    Triangle          32.3%    Medium"></a>120    Triangle          32.3%    Medium</h3><h3 id="122-Best-Time-to-Buy-and-Sell-Stock-II-45-3-Medium"><a href="#122-Best-Time-to-Buy-and-Sell-Stock-II-45-3-Medium" class="headerlink" title="122    Best Time to Buy and Sell Stock II          45.3%    Medium"></a>122    Best Time to Buy and Sell Stock II          45.3%    Medium</h3><h3 id="127-Word-Ladder-19-3-Medium"><a href="#127-Word-Ladder-19-3-Medium" class="headerlink" title="127    Word Ladder          19.3%    Medium"></a>127    Word Ladder          19.3%    Medium</h3><h3 id="129-Sum-Root-to-Leaf-Numbers-35-0-Medium"><a href="#129-Sum-Root-to-Leaf-Numbers-35-0-Medium" class="headerlink" title="129    Sum Root to Leaf Numbers          35.0%    Medium"></a>129    Sum Root to Leaf Numbers          35.0%    Medium</h3><h3 id="130-Surrounded-Regions-17-4-Medium"><a href="#130-Surrounded-Regions-17-4-Medium" class="headerlink" title="130    Surrounded Regions          17.4%    Medium"></a>130    Surrounded Regions          17.4%    Medium</h3><h3 id="131-Palindrome-Partitioning-30-6-Medium"><a href="#131-Palindrome-Partitioning-30-6-Medium" class="headerlink" title="131    Palindrome Partitioning          30.6%    Medium"></a>131    Palindrome Partitioning          30.6%    Medium</h3><h3 id="133-Clone-Graph-25-0-Medium"><a href="#133-Clone-Graph-25-0-Medium" class="headerlink" title="133    Clone Graph          25.0%    Medium"></a>133    Clone Graph          25.0%    Medium</h3><h3 id="134-Gas-Station-28-5-Medium"><a href="#134-Gas-Station-28-5-Medium" class="headerlink" title="134    Gas Station          28.5%    Medium"></a>134    Gas Station          28.5%    Medium</h3><h3 id="137-Single-Number-II-40-0-Medium"><a href="#137-Single-Number-II-40-0-Medium" class="headerlink" title="137    Single Number II          40.0%    Medium"></a>137    Single Number II          40.0%    Medium</h3><h3 id="139-Word-Break-28-0-Medium"><a href="#139-Word-Break-28-0-Medium" class="headerlink" title="139    Word Break          28.0%    Medium"></a>139    Word Break          28.0%    Medium</h3><h3 id="142-Linked-List-Cycle-II-31-2-Medium"><a href="#142-Linked-List-Cycle-II-31-2-Medium" class="headerlink" title="142    Linked List Cycle II          31.2%    Medium"></a>142    Linked List Cycle II          31.2%    Medium</h3><h3 id="143-Reorder-List-24-5-Medium"><a href="#143-Reorder-List-24-5-Medium" class="headerlink" title="143    Reorder List          24.5%    Medium"></a>143    Reorder List          24.5%    Medium</h3><h3 id="144-Binary-Tree-Preorder-Traversal-42-8-Medium"><a href="#144-Binary-Tree-Preorder-Traversal-42-8-Medium" class="headerlink" title="144    Binary Tree Preorder Traversal          42.8%    Medium"></a>144    Binary Tree Preorder Traversal          42.8%    Medium</h3><h3 id="147-Insertion-Sort-List-31-6-Medium"><a href="#147-Insertion-Sort-List-31-6-Medium" class="headerlink" title="147    Insertion Sort List          31.6%    Medium"></a>147    Insertion Sort List          31.6%    Medium</h3><h3 id="148-Sort-List-27-2-Medium"><a href="#148-Sort-List-27-2-Medium" class="headerlink" title="148    Sort List          27.2%    Medium"></a>148    Sort List          27.2%    Medium</h3><h3 id="150-Evaluate-Reverse-Polish-Notation-25-7-Medium"><a href="#150-Evaluate-Reverse-Polish-Notation-25-7-Medium" class="headerlink" title="150    Evaluate Reverse Polish Notation          25.7%    Medium"></a>150    Evaluate Reverse Polish Notation          25.7%    Medium</h3><h3 id="151-Reverse-Words-in-a-String-15-7-Medium"><a href="#151-Reverse-Words-in-a-String-15-7-Medium" class="headerlink" title="151    Reverse Words in a String          15.7%    Medium"></a>151    Reverse Words in a String          15.7%    Medium</h3><h3 id="152-Maximum-Product-Subarray-24-3-Medium"><a href="#152-Maximum-Product-Subarray-24-3-Medium" class="headerlink" title="152    Maximum Product Subarray          24.3%    Medium"></a>152    Maximum Product Subarray          24.3%    Medium</h3><h3 id="153-Find-Minimum-in-Rotated-Sorted-Array-38-4-Medium"><a href="#153-Find-Minimum-in-Rotated-Sorted-Array-38-4-Medium" class="headerlink" title="153    Find Minimum in Rotated Sorted Array          38.4%    Medium"></a>153    Find Minimum in Rotated Sorted Array          38.4%    Medium</h3><h3 id="156-Binary-Tree-Upside-Down-42-4-Medium"><a href="#156-Binary-Tree-Upside-Down-42-4-Medium" class="headerlink" title="156    Binary Tree Upside Down          42.4%    Medium"></a>156    Binary Tree Upside Down          42.4%    Medium</h3><h3 id="161-One-Edit-Distance-30-3-Medium"><a href="#161-One-Edit-Distance-30-3-Medium" class="headerlink" title="161    One Edit Distance          30.3%    Medium"></a>161    One Edit Distance          30.3%    Medium</h3><h3 id="162-Find-Peak-Element-35-6-Medium"><a href="#162-Find-Peak-Element-35-6-Medium" class="headerlink" title="162    Find Peak Element          35.6%    Medium"></a>162    Find Peak Element          35.6%    Medium</h3><h3 id="163-Missing-Ranges-28-5-Medium"><a href="#163-Missing-Ranges-28-5-Medium" class="headerlink" title="163    Missing Ranges          28.5%    Medium"></a>163    Missing Ranges          28.5%    Medium</h3><h3 id="166-Fraction-to-Recurring-Decimal-16-7-Medium"><a href="#166-Fraction-to-Recurring-Decimal-16-7-Medium" class="headerlink" title="166    Fraction to Recurring Decimal          16.7%    Medium"></a>166    Fraction to Recurring Decimal          16.7%    Medium</h3><h3 id="167-Two-Sum-II-Input-array-is-sorted-47-9-Medium"><a href="#167-Two-Sum-II-Input-array-is-sorted-47-9-Medium" class="headerlink" title="167    Two Sum II - Input array is sorted          47.9%    Medium"></a>167    Two Sum II - Input array is sorted          47.9%    Medium</h3><h3 id="173-Binary-Search-Tree-Iterator-38-7-Medium"><a href="#173-Binary-Search-Tree-Iterator-38-7-Medium" class="headerlink" title="173    Binary Search Tree Iterator          38.7%    Medium"></a>173    Binary Search Tree Iterator          38.7%    Medium</h3><h3 id="179-Largest-Number-21-3-Medium"><a href="#179-Largest-Number-21-3-Medium" class="headerlink" title="179    Largest Number          21.3%    Medium"></a>179    Largest Number          21.3%    Medium</h3><h3 id="186-Reverse-Words-in-a-String-II-28-5-Medium"><a href="#186-Reverse-Words-in-a-String-II-28-5-Medium" class="headerlink" title="186    Reverse Words in a String II          28.5%    Medium"></a>186    Reverse Words in a String II          28.5%    Medium</h3><h3 id="187-Repeated-DNA-Sequences-29-3-Medium"><a href="#187-Repeated-DNA-Sequences-29-3-Medium" class="headerlink" title="187    Repeated DNA Sequences          29.3%    Medium"></a>187    Repeated DNA Sequences          29.3%    Medium</h3><h3 id="199-Binary-Tree-Right-Side-View-38-4-Medium"><a href="#199-Binary-Tree-Right-Side-View-38-4-Medium" class="headerlink" title="199    Binary Tree Right Side View          38.4%    Medium"></a>199    Binary Tree Right Side View          38.4%    Medium</h3><h3 id="200-Number-of-Islands-32-0-Medium"><a href="#200-Number-of-Islands-32-0-Medium" class="headerlink" title="200    Number of Islands          32.0%    Medium"></a>200    Number of Islands          32.0%    Medium</h3><h3 id="201-Bitwise-AND-of-Numbers-Range-33-0-Medium"><a href="#201-Bitwise-AND-of-Numbers-Range-33-0-Medium" class="headerlink" title="201    Bitwise AND of Numbers Range          33.0%    Medium"></a>201    Bitwise AND of Numbers Range          33.0%    Medium</h3><h3 id="207-Course-Schedule-30-2-Medium"><a href="#207-Course-Schedule-30-2-Medium" class="headerlink" title="207    Course Schedule          30.2%    Medium"></a>207    Course Schedule          30.2%    Medium</h3><h3 id="208-Implement-Trie-Prefix-Tree-25-6-Medium"><a href="#208-Implement-Trie-Prefix-Tree-25-6-Medium" class="headerlink" title="208    Implement Trie (Prefix Tree)          25.6%    Medium"></a>208    Implement Trie (Prefix Tree)          25.6%    Medium</h3><h3 id="209-Minimum-Size-Subarray-Sum-28-4-Medium"><a href="#209-Minimum-Size-Subarray-Sum-28-4-Medium" class="headerlink" title="209    Minimum Size Subarray Sum          28.4%    Medium"></a>209    Minimum Size Subarray Sum          28.4%    Medium</h3><h3 id="210-Course-Schedule-II-25-3-Medium"><a href="#210-Course-Schedule-II-25-3-Medium" class="headerlink" title="210    Course Schedule II          25.3%    Medium"></a>210    Course Schedule II          25.3%    Medium</h3><h3 id="211-Add-and-Search-Word-Data-structure-design-20-1-Medium"><a href="#211-Add-and-Search-Word-Data-structure-design-20-1-Medium" class="headerlink" title="211    Add and Search Word - Data structure design          20.1%    Medium"></a>211    Add and Search Word - Data structure design          20.1%    Medium</h3><h3 id="213-House-Robber-II-32-9-Medium"><a href="#213-House-Robber-II-32-9-Medium" class="headerlink" title="213    House Robber II          32.9%    Medium"></a>213    House Robber II          32.9%    Medium</h3><h3 id="215-Kth-Largest-Element-in-an-Array-37-2-Medium"><a href="#215-Kth-Largest-Element-in-an-Array-37-2-Medium" class="headerlink" title="215    Kth Largest Element in an Array          37.2%    Medium"></a>215    Kth Largest Element in an Array          37.2%    Medium</h3><h3 id="216-Combination-Sum-III-41-5-Medium"><a href="#216-Combination-Sum-III-41-5-Medium" class="headerlink" title="216    Combination Sum III          41.5%    Medium"></a>216    Combination Sum III          41.5%    Medium</h3><h3 id="220-Contains-Duplicate-III-19-5-Medium"><a href="#220-Contains-Duplicate-III-19-5-Medium" class="headerlink" title="220    Contains Duplicate III          19.5%    Medium"></a>220    Contains Duplicate III          19.5%    Medium</h3><h3 id="221-Maximal-Square-26-8-Medium"><a href="#221-Maximal-Square-26-8-Medium" class="headerlink" title="221    Maximal Square          26.8%    Medium"></a>221    Maximal Square          26.8%    Medium</h3><h3 id="222-Count-Complete-Tree-Nodes-26-9-Medium"><a href="#222-Count-Complete-Tree-Nodes-26-9-Medium" class="headerlink" title="222    Count Complete Tree Nodes          26.9%    Medium"></a>222    Count Complete Tree Nodes          26.9%    Medium</h3><h3 id="227-Basic-Calculator-II-27-9-Medium"><a href="#227-Basic-Calculator-II-27-9-Medium" class="headerlink" title="227    Basic Calculator II          27.9%    Medium"></a>227    Basic Calculator II          27.9%    Medium</h3><h3 id="228-Summary-Ranges-27-8-Medium"><a href="#228-Summary-Ranges-27-8-Medium" class="headerlink" title="228    Summary Ranges          27.8%    Medium"></a>228    Summary Ranges          27.8%    Medium</h3><h3 id="229-Majority-Element-II-27-6-Medium"><a href="#229-Majority-Element-II-27-6-Medium" class="headerlink" title="229    Majority Element II          27.6%    Medium"></a>229    Majority Element II          27.6%    Medium</h3><h3 id="230-Kth-Smallest-Element-in-a-BST-41-7-Medium"><a href="#230-Kth-Smallest-Element-in-a-BST-41-7-Medium" class="headerlink" title="230    Kth Smallest Element in a BST          41.7%    Medium"></a>230    Kth Smallest Element in a BST          41.7%    Medium</h3><h3 id="236-Lowest-Common-Ancestor-of-a-Binary-Tree-29-2-Medium"><a href="#236-Lowest-Common-Ancestor-of-a-Binary-Tree-29-2-Medium" class="headerlink" title="236    Lowest Common Ancestor of a Binary Tree          29.2%    Medium"></a>236    Lowest Common Ancestor of a Binary Tree          29.2%    Medium</h3><h3 id="238-Product-of-Array-Except-Self-46-8-Medium"><a href="#238-Product-of-Array-Except-Self-46-8-Medium" class="headerlink" title="238    Product of Array Except Self          46.8%    Medium"></a>238    Product of Array Except Self          46.8%    Medium</h3><h3 id="240-Search-a-2D-Matrix-II-37-8-Medium"><a href="#240-Search-a-2D-Matrix-II-37-8-Medium" class="headerlink" title="240    Search a 2D Matrix II          37.8%    Medium"></a>240    Search a 2D Matrix II          37.8%    Medium</h3><h3 id="241-Different-Ways-to-Add-Parentheses-40-9-Medium"><a href="#241-Different-Ways-to-Add-Parentheses-40-9-Medium" class="headerlink" title="241    Different Ways to Add Parentheses          40.9%    Medium"></a>241    Different Ways to Add Parentheses          40.9%    Medium</h3><h3 id="244-Shortest-Word-Distance-II-34-8-Medium"><a href="#244-Shortest-Word-Distance-II-34-8-Medium" class="headerlink" title="244    Shortest Word Distance II          34.8%    Medium"></a>244    Shortest Word Distance II          34.8%    Medium</h3><h3 id="245-Shortest-Word-Distance-III-49-2-Medium"><a href="#245-Shortest-Word-Distance-III-49-2-Medium" class="headerlink" title="245    Shortest Word Distance III          49.2%    Medium"></a>245    Shortest Word Distance III          49.2%    Medium</h3><h3 id="247-Strobogrammatic-Number-II-38-0-Medium"><a href="#247-Strobogrammatic-Number-II-38-0-Medium" class="headerlink" title="247    Strobogrammatic Number II          38.0%    Medium"></a>247    Strobogrammatic Number II          38.0%    Medium</h3><h3 id="250-Count-Univalue-Subtrees-40-0-Medium"><a href="#250-Count-Univalue-Subtrees-40-0-Medium" class="headerlink" title="250    Count Univalue Subtrees          40.0%    Medium"></a>250    Count Univalue Subtrees          40.0%    Medium</h3><h3 id="251-Flatten-2D-Vector-38-5-Medium"><a href="#251-Flatten-2D-Vector-38-5-Medium" class="headerlink" title="251    Flatten 2D Vector          38.5%    Medium"></a>251    Flatten 2D Vector          38.5%    Medium</h3><h3 id="253-Meeting-Rooms-II-38-0-Medium"><a href="#253-Meeting-Rooms-II-38-0-Medium" class="headerlink" title="253    Meeting Rooms II          38.0%    Medium"></a>253    Meeting Rooms II          38.0%    Medium</h3><h3 id="254-Factor-Combinations-40-0-Medium"><a href="#254-Factor-Combinations-40-0-Medium" class="headerlink" title="254    Factor Combinations          40.0%    Medium"></a>254    Factor Combinations          40.0%    Medium</h3><h3 id="255-Verify-Preorder-Sequence-in-Binary-Search-Tree-38-7-Medium"><a href="#255-Verify-Preorder-Sequence-in-Binary-Search-Tree-38-7-Medium" class="headerlink" title="255    Verify Preorder Sequence in Binary Search Tree          38.7%    Medium"></a>255    Verify Preorder Sequence in Binary Search Tree          38.7%    Medium</h3><h3 id="256-Paint-House-45-7-Medium"><a href="#256-Paint-House-45-7-Medium" class="headerlink" title="256    Paint House          45.7%    Medium"></a>256    Paint House          45.7%    Medium</h3><h3 id="259-3Sum-Smaller-40-5-Medium"><a href="#259-3Sum-Smaller-40-5-Medium" class="headerlink" title="259    3Sum Smaller          40.5%    Medium"></a>259    3Sum Smaller          40.5%    Medium</h3><h3 id="260-Single-Number-III-48-9-Medium"><a href="#260-Single-Number-III-48-9-Medium" class="headerlink" title="260    Single Number III          48.9%    Medium"></a>260    Single Number III          48.9%    Medium</h3><h3 id="261-Graph-Valid-Tree-36-3-Medium"><a href="#261-Graph-Valid-Tree-36-3-Medium" class="headerlink" title="261    Graph Valid Tree          36.3%    Medium"></a>261    Graph Valid Tree          36.3%    Medium</h3><h3 id="264-Ugly-Number-II-31-3-Medium"><a href="#264-Ugly-Number-II-31-3-Medium" class="headerlink" title="264    Ugly Number II          31.3%    Medium"></a>264    Ugly Number II          31.3%    Medium</h3><h3 id="267-Palindrome-Permutation-II-30-8-Medium"><a href="#267-Palindrome-Permutation-II-30-8-Medium" class="headerlink" title="267    Palindrome Permutation II          30.8%    Medium"></a>267    Palindrome Permutation II          30.8%    Medium</h3><h3 id="268-Missing-Number-43-3-Medium"><a href="#268-Missing-Number-43-3-Medium" class="headerlink" title="268    Missing Number          43.3%    Medium"></a>268    Missing Number          43.3%    Medium</h3><h3 id="271-Encode-and-Decode-Strings-26-5-Medium"><a href="#271-Encode-and-Decode-Strings-26-5-Medium" class="headerlink" title="271    Encode and Decode Strings          26.5%    Medium"></a>271    Encode and Decode Strings          26.5%    Medium</h3><h3 id="274-H-Index-31-9-Medium"><a href="#274-H-Index-31-9-Medium" class="headerlink" title="274    H-Index          31.9%    Medium"></a>274    H-Index          31.9%    Medium</h3><h3 id="275-H-Index-II-33-5-Medium"><a href="#275-H-Index-II-33-5-Medium" class="headerlink" title="275    H-Index II          33.5%    Medium"></a>275    H-Index II          33.5%    Medium</h3><h3 id="277-Find-the-Celebrity-35-4-Medium"><a href="#277-Find-the-Celebrity-35-4-Medium" class="headerlink" title="277    Find the Celebrity          35.4%    Medium"></a>277    Find the Celebrity          35.4%    Medium</h3><h3 id="279-Perfect-Squares-34-7-Medium"><a href="#279-Perfect-Squares-34-7-Medium" class="headerlink" title="279    Perfect Squares          34.7%    Medium"></a>279    Perfect Squares          34.7%    Medium</h3><h3 id="280-Wiggle-Sort-54-5-Medium"><a href="#280-Wiggle-Sort-54-5-Medium" class="headerlink" title="280    Wiggle Sort          54.5%    Medium"></a>280    Wiggle Sort          54.5%    Medium</h3><h3 id="281-Zigzag-Iterator-47-9-Medium"><a href="#281-Zigzag-Iterator-47-9-Medium" class="headerlink" title="281    Zigzag Iterator          47.9%    Medium"></a>281    Zigzag Iterator          47.9%    Medium</h3><h3 id="284-Peeking-Iterator-35-0-Medium"><a href="#284-Peeking-Iterator-35-0-Medium" class="headerlink" title="284    Peeking Iterator          35.0%    Medium"></a>284    Peeking Iterator          35.0%    Medium</h3><h3 id="285-Inorder-Successor-in-BST-36-2-Medium"><a href="#285-Inorder-Successor-in-BST-36-2-Medium" class="headerlink" title="285    Inorder Successor in BST          36.2%    Medium"></a>285    Inorder Successor in BST          36.2%    Medium</h3><h3 id="286-Walls-and-Gates-42-0-Medium"><a href="#286-Walls-and-Gates-42-0-Medium" class="headerlink" title="286    Walls and Gates          42.0%    Medium"></a>286    Walls and Gates          42.0%    Medium</h3><h3 id="289-Game-of-Life-36-2-Medium"><a href="#289-Game-of-Life-36-2-Medium" class="headerlink" title="289    Game of Life          36.2%    Medium"></a>289    Game of Life          36.2%    Medium</h3><h3 id="294-Flip-Game-II-44-9-Medium"><a href="#294-Flip-Game-II-44-9-Medium" class="headerlink" title="294    Flip Game II          44.9%    Medium"></a>294    Flip Game II          44.9%    Medium</h3><h3 id="298-Binary-Tree-Longest-Consecutive-Sequence-39-7-Medium"><a href="#298-Binary-Tree-Longest-Consecutive-Sequence-39-7-Medium" class="headerlink" title="298    Binary Tree Longest Consecutive Sequence          39.7%    Medium"></a>298    Binary Tree Longest Consecutive Sequence          39.7%    Medium</h3><h3 id="300-Longest-Increasing-Subsequence-37-2-Medium"><a href="#300-Longest-Increasing-Subsequence-37-2-Medium" class="headerlink" title="300    Longest Increasing Subsequence          37.2%    Medium"></a>300    Longest Increasing Subsequence          37.2%    Medium</h3><h3 id="304-Range-Sum-Query-2D-Immutable-22-7-Medium"><a href="#304-Range-Sum-Query-2D-Immutable-22-7-Medium" class="headerlink" title="304    Range Sum Query 2D - Immutable          22.7%    Medium"></a>304    Range Sum Query 2D - Immutable          22.7%    Medium</h3><h3 id="306-Additive-Number-27-1-Medium"><a href="#306-Additive-Number-27-1-Medium" class="headerlink" title="306    Additive Number          27.1%    Medium"></a>306    Additive Number          27.1%    Medium</h3><h3 id="307-Range-Sum-Query-Mutable-18-5-Medium"><a href="#307-Range-Sum-Query-Mutable-18-5-Medium" class="headerlink" title="307    Range Sum Query - Mutable          18.5%    Medium"></a>307    Range Sum Query - Mutable          18.5%    Medium</h3><h3 id="309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown-39-4-Medium"><a href="#309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown-39-4-Medium" class="headerlink" title="309    Best Time to Buy and Sell Stock with Cooldown          39.4%    Medium"></a>309    Best Time to Buy and Sell Stock with Cooldown          39.4%    Medium</h3><h3 id="310-Minimum-Height-Trees-28-3-Medium"><a href="#310-Minimum-Height-Trees-28-3-Medium" class="headerlink" title="310    Minimum Height Trees          28.3%    Medium"></a>310    Minimum Height Trees          28.3%    Medium</h3><h3 id="311-Sparse-Matrix-Multiplication-50-4-Medium"><a href="#311-Sparse-Matrix-Multiplication-50-4-Medium" class="headerlink" title="311    Sparse Matrix Multiplication          50.4%    Medium"></a>311    Sparse Matrix Multiplication          50.4%    Medium</h3><h3 id="313-Super-Ugly-Number-36-8-Medium"><a href="#313-Super-Ugly-Number-36-8-Medium" class="headerlink" title="313    Super Ugly Number          36.8%    Medium"></a>313    Super Ugly Number          36.8%    Medium</h3><h3 id="314-Binary-Tree-Vertical-Order-Traversal-34-9-Medium"><a href="#314-Binary-Tree-Vertical-Order-Traversal-34-9-Medium" class="headerlink" title="314    Binary Tree Vertical Order Traversal          34.9%    Medium"></a>314    Binary Tree Vertical Order Traversal          34.9%    Medium</h3><h3 id="318-Maximum-Product-of-Word-Lengths-41-9-Medium"><a href="#318-Maximum-Product-of-Word-Lengths-41-9-Medium" class="headerlink" title="318    Maximum Product of Word Lengths          41.9%    Medium"></a>318    Maximum Product of Word Lengths          41.9%    Medium</h3><h3 id="319-Bulb-Switcher-41-8-Medium"><a href="#319-Bulb-Switcher-41-8-Medium" class="headerlink" title="319    Bulb Switcher          41.8%    Medium"></a>319    Bulb Switcher          41.8%    Medium</h3><h3 id="320-Generalized-Abbreviation-43-0-Medium"><a href="#320-Generalized-Abbreviation-43-0-Medium" class="headerlink" title="320    Generalized Abbreviation          43.0%    Medium"></a>320    Generalized Abbreviation          43.0%    Medium</h3><h3 id="322-Coin-Change-25-9-Medium"><a href="#322-Coin-Change-25-9-Medium" class="headerlink" title="322    Coin Change          25.9%    Medium"></a>322    Coin Change          25.9%    Medium</h3><h3 id="323-Number-of-Connected-Components-in-an-Undirected-Graph-46-2-Medium"><a href="#323-Number-of-Connected-Components-in-an-Undirected-Graph-46-2-Medium" class="headerlink" title="323    Number of Connected Components in an Undirected Graph          46.2%    Medium"></a>323    Number of Connected Components in an Undirected Graph          46.2%    Medium</h3><h3 id="324-Wiggle-Sort-II-25-0-Medium"><a href="#324-Wiggle-Sort-II-25-0-Medium" class="headerlink" title="324    Wiggle Sort II          25.0%    Medium"></a>324    Wiggle Sort II          25.0%    Medium</h3><h3 id="325-Maximum-Size-Subarray-Sum-Equals-k-41-4-Medium"><a href="#325-Maximum-Size-Subarray-Sum-Equals-k-41-4-Medium" class="headerlink" title="325    Maximum Size Subarray Sum Equals k          41.4%    Medium"></a>325    Maximum Size Subarray Sum Equals k          41.4%    Medium</h3><h3 id="328-Odd-Even-Linked-List-41-6-Medium"><a href="#328-Odd-Even-Linked-List-41-6-Medium" class="headerlink" title="328    Odd Even Linked List          41.6%    Medium"></a>328    Odd Even Linked List          41.6%    Medium</h3><h3 id="331-Verify-Preorder-Serialization-of-a-Binary-Tree-34-9-Medium"><a href="#331-Verify-Preorder-Serialization-of-a-Binary-Tree-34-9-Medium" class="headerlink" title="331    Verify Preorder Serialization of a Binary Tree          34.9%    Medium"></a>331    Verify Preorder Serialization of a Binary Tree          34.9%    Medium</h3><h3 id="332-Reconstruct-Itinerary-27-7-Medium"><a href="#332-Reconstruct-Itinerary-27-7-Medium" class="headerlink" title="332    Reconstruct Itinerary          27.7%    Medium"></a>332    Reconstruct Itinerary          27.7%    Medium</h3><h3 id="333-Largest-BST-Subtree-29-6-Medium"><a href="#333-Largest-BST-Subtree-29-6-Medium" class="headerlink" title="333    Largest BST Subtree          29.6%    Medium"></a>333    Largest BST Subtree          29.6%    Medium</h3><h3 id="334-Increasing-Triplet-Subsequence-37-6-Medium"><a href="#334-Increasing-Triplet-Subsequence-37-6-Medium" class="headerlink" title="334    Increasing Triplet Subsequence          37.6%    Medium"></a>334    Increasing Triplet Subsequence          37.6%    Medium</h3><h3 id="337-House-Robber-III-41-3-Medium"><a href="#337-House-Robber-III-41-3-Medium" class="headerlink" title="337    House Robber III          41.3%    Medium"></a>337    House Robber III          41.3%    Medium</h3><h3 id="338-Counting-Bits-59-3-Medium"><a href="#338-Counting-Bits-59-3-Medium" class="headerlink" title="338    Counting Bits          59.3%    Medium"></a>338    Counting Bits          59.3%    Medium</h3><h3 id="341-Flatten-Nested-List-Iterator-38-2-Medium"><a href="#341-Flatten-Nested-List-Iterator-38-2-Medium" class="headerlink" title="341    Flatten Nested List Iterator          38.2%    Medium"></a>341    Flatten Nested List Iterator          38.2%    Medium</h3><h3 id="343-Integer-Break-44-6-Medium"><a href="#343-Integer-Break-44-6-Medium" class="headerlink" title="343    Integer Break          44.6%    Medium"></a>343    Integer Break          44.6%    Medium</h3><h3 id="347-Top-K-Frequent-Elements-45-6-Medium"><a href="#347-Top-K-Frequent-Elements-45-6-Medium" class="headerlink" title="347    Top K Frequent Elements          45.6%    Medium"></a>347    Top K Frequent Elements          45.6%    Medium</h3><h3 id="348-Design-Tic-Tac-Toe-45-0-Medium"><a href="#348-Design-Tic-Tac-Toe-45-0-Medium" class="headerlink" title="348    Design Tic-Tac-Toe          45.0%    Medium"></a>348    Design Tic-Tac-Toe          45.0%    Medium</h3><h3 id="351-Android-Unlock-Patterns-42-3-Medium"><a href="#351-Android-Unlock-Patterns-42-3-Medium" class="headerlink" title="351    Android Unlock Patterns          42.3%    Medium"></a>351    Android Unlock Patterns          42.3%    Medium</h3><h3 id="353-Design-Snake-Game-25-1-Medium"><a href="#353-Design-Snake-Game-25-1-Medium" class="headerlink" title="353    Design Snake Game          25.1%    Medium"></a>353    Design Snake Game          25.1%    Medium</h3><h3 id="355-Design-Twitter-24-1-Medium"><a href="#355-Design-Twitter-24-1-Medium" class="headerlink" title="355    Design Twitter          24.1%    Medium"></a>355    Design Twitter          24.1%    Medium</h3><h3 id="356-Line-Reflection-29-7-Medium"><a href="#356-Line-Reflection-29-7-Medium" class="headerlink" title="356    Line Reflection          29.7%    Medium"></a>356    Line Reflection          29.7%    Medium</h3><h3 id="357-Count-Numbers-with-Unique-Digits-44-8-Medium"><a href="#357-Count-Numbers-with-Unique-Digits-44-8-Medium" class="headerlink" title="357    Count Numbers with Unique Digits          44.8%    Medium"></a>357    Count Numbers with Unique Digits          44.8%    Medium</h3><h3 id="360-Sort-Transformed-Array-43-0-Medium"><a href="#360-Sort-Transformed-Array-43-0-Medium" class="headerlink" title="360    Sort Transformed Array          43.0%    Medium"></a>360    Sort Transformed Array          43.0%    Medium</h3><h3 id="361-Bomb-Enemy-37-8-Medium"><a href="#361-Bomb-Enemy-37-8-Medium" class="headerlink" title="361    Bomb Enemy          37.8%    Medium"></a>361    Bomb Enemy          37.8%    Medium</h3><h3 id="362-Design-Hit-Counter-52-4-Medium"><a href="#362-Design-Hit-Counter-52-4-Medium" class="headerlink" title="362    Design Hit Counter          52.4%    Medium"></a>362    Design Hit Counter          52.4%    Medium</h3><h3 id="364-Nested-List-Weight-Sum-II-50-2-Medium"><a href="#364-Nested-List-Weight-Sum-II-50-2-Medium" class="headerlink" title="364    Nested List Weight Sum II          50.2%    Medium"></a>364    Nested List Weight Sum II          50.2%    Medium</h3><h3 id="365-Water-and-Jug-Problem-25-9-Medium"><a href="#365-Water-and-Jug-Problem-25-9-Medium" class="headerlink" title="365    Water and Jug Problem          25.9%    Medium"></a>365    Water and Jug Problem          25.9%    Medium</h3><h3 id="366-Find-Leaves-of-Binary-Tree-56-7-Medium"><a href="#366-Find-Leaves-of-Binary-Tree-56-7-Medium" class="headerlink" title="366    Find Leaves of Binary Tree          56.7%    Medium"></a>366    Find Leaves of Binary Tree          56.7%    Medium</h3><h3 id="367-Valid-Perfect-Square-37-2-Medium"><a href="#367-Valid-Perfect-Square-37-2-Medium" class="headerlink" title="367    Valid Perfect Square          37.2%    Medium"></a>367    Valid Perfect Square          37.2%    Medium</h3><h3 id="368-Largest-Divisible-Subset-32-7-Medium"><a href="#368-Largest-Divisible-Subset-32-7-Medium" class="headerlink" title="368    Largest Divisible Subset          32.7%    Medium"></a>368    Largest Divisible Subset          32.7%    Medium</h3><h3 id="369-Plus-One-Linked-List-52-2-Medium"><a href="#369-Plus-One-Linked-List-52-2-Medium" class="headerlink" title="369    Plus One Linked List          52.2%    Medium"></a>369    Plus One Linked List          52.2%    Medium</h3><h3 id="370-Range-Addition-52-8-Medium"><a href="#370-Range-Addition-52-8-Medium" class="headerlink" title="370    Range Addition          52.8%    Medium"></a>370    Range Addition          52.8%    Medium</h3><h3 id="372-Super-Pow-32-9-Medium"><a href="#372-Super-Pow-32-9-Medium" class="headerlink" title="372    Super Pow          32.9%    Medium"></a>372    Super Pow          32.9%    Medium</h3><h3 id="373-Find-K-Pairs-with-Smallest-Sums-29-5-Medium"><a href="#373-Find-K-Pairs-with-Smallest-Sums-29-5-Medium" class="headerlink" title="373    Find K Pairs with Smallest Sums          29.5%    Medium"></a>373    Find K Pairs with Smallest Sums          29.5%    Medium</h3><h3 id="375-Guess-Number-Higher-or-Lower-II-34-7-Medium"><a href="#375-Guess-Number-Higher-or-Lower-II-34-7-Medium" class="headerlink" title="375    Guess Number Higher or Lower II          34.7%    Medium"></a>375    Guess Number Higher or Lower II          34.7%    Medium</h3><h3 id="376-Wiggle-Subsequence-34-3-Medium"><a href="#376-Wiggle-Subsequence-34-3-Medium" class="headerlink" title="376    Wiggle Subsequence          34.3%    Medium"></a>376    Wiggle Subsequence          34.3%    Medium</h3><h3 id="377-Combination-Sum-IV-41-5-Medium"><a href="#377-Combination-Sum-IV-41-5-Medium" class="headerlink" title="377    Combination Sum IV          41.5%    Medium"></a>377    Combination Sum IV          41.5%    Medium</h3><h3 id="378-Kth-Smallest-Element-in-a-Sorted-Matrix-42-9-Medium"><a href="#378-Kth-Smallest-Element-in-a-Sorted-Matrix-42-9-Medium" class="headerlink" title="378    Kth Smallest Element in a Sorted Matrix          42.9%    Medium"></a>378    Kth Smallest Element in a Sorted Matrix          42.9%    Medium</h3><h3 id="379-Design-Phone-Directory-29-1-Medium"><a href="#379-Design-Phone-Directory-29-1-Medium" class="headerlink" title="379    Design Phone Directory          29.1%    Medium"></a>379    Design Phone Directory          29.1%    Medium</h3><h3 id="382-Linked-List-Random-Node-46-1-Medium"><a href="#382-Linked-List-Random-Node-46-1-Medium" class="headerlink" title="382    Linked List Random Node          46.1%    Medium"></a>382    Linked List Random Node          46.1%    Medium</h3><h3 id="384-Shuffle-an-Array-44-7-Medium"><a href="#384-Shuffle-an-Array-44-7-Medium" class="headerlink" title="384    Shuffle an Array          44.7%    Medium"></a>384    Shuffle an Array          44.7%    Medium</h3><h3 id="385-Mini-Parser-29-4-Medium"><a href="#385-Mini-Parser-29-4-Medium" class="headerlink" title="385    Mini Parser          29.4%    Medium"></a>385    Mini Parser          29.4%    Medium</h3><h3 id="386-Lexicographical-Numbers-39-0-Medium"><a href="#386-Lexicographical-Numbers-39-0-Medium" class="headerlink" title="386    Lexicographical Numbers          39.0%    Medium"></a>386    Lexicographical Numbers          39.0%    Medium</h3><h3 id="388-Longest-Absolute-File-Path-34-4-Medium"><a href="#388-Longest-Absolute-File-Path-34-4-Medium" class="headerlink" title="388    Longest Absolute File Path          34.4%    Medium"></a>388    Longest Absolute File Path          34.4%    Medium</h3><h3 id="390-Elimination-Game-37-4-Medium"><a href="#390-Elimination-Game-37-4-Medium" class="headerlink" title="390    Elimination Game          37.4%    Medium"></a>390    Elimination Game          37.4%    Medium</h3><h3 id="392-Is-Subsequence-44-1-Medium"><a href="#392-Is-Subsequence-44-1-Medium" class="headerlink" title="392    Is Subsequence          44.1%    Medium"></a>392    Is Subsequence          44.1%    Medium</h3><h3 id="393-UTF-8-Validation-35-2-Medium"><a href="#393-UTF-8-Validation-35-2-Medium" class="headerlink" title="393    UTF-8 Validation          35.2%    Medium"></a>393    UTF-8 Validation          35.2%    Medium</h3><h3 id="394-Decode-String-39-7-Medium"><a href="#394-Decode-String-39-7-Medium" class="headerlink" title="394    Decode String          39.7%    Medium"></a>394    Decode String          39.7%    Medium</h3><h3 id="395-Longest-Substring-with-At-Least-K-Repeating-Characters-35-3-Medium"><a href="#395-Longest-Substring-with-At-Least-K-Repeating-Characters-35-3-Medium" class="headerlink" title="395    Longest Substring with At Least K Repeating Characters          35.3%    Medium"></a>395    Longest Substring with At Least K Repeating Characters          35.3%    Medium</h3><h3 id="397-Integer-Replacement-28-9-Medium"><a href="#397-Integer-Replacement-28-9-Medium" class="headerlink" title="397    Integer Replacement          28.9%    Medium"></a>397    Integer Replacement          28.9%    Medium</h3><h3 id="398-Random-Pick-Index-39-0-Medium"><a href="#398-Random-Pick-Index-39-0-Medium" class="headerlink" title="398    Random Pick Index          39.0%    Medium"></a>398    Random Pick Index          39.0%    Medium</h3><h3 id="399-Evaluate-Division-39-2-Medium"><a href="#399-Evaluate-Division-39-2-Medium" class="headerlink" title="399    Evaluate Division          39.2%    Medium"></a>399    Evaluate Division          39.2%    Medium</h3><h3 id="402-Remove-K-Digits-25-9-Medium"><a href="#402-Remove-K-Digits-25-9-Medium" class="headerlink" title="402    Remove K Digits          25.9%    Medium"></a>402    Remove K Digits          25.9%    Medium</h3><h3 id="406-Queue-Reconstruction-by-Height-54-1-Medium"><a href="#406-Queue-Reconstruction-by-Height-54-1-Medium" class="headerlink" title="406    Queue Reconstruction by Height          54.1%    Medium"></a>406    Queue Reconstruction by Height          54.1%    Medium</h3><h3 id="413-Arithmetic-Slices-54-2-Medium"><a href="#413-Arithmetic-Slices-54-2-Medium" class="headerlink" title="413    Arithmetic Slices          54.2%    Medium"></a>413    Arithmetic Slices          54.2%    Medium</h3><h3 id="416-Partition-Equal-Subset-Sum-37-2-Medium"><a href="#416-Partition-Equal-Subset-Sum-37-2-Medium" class="headerlink" title="416    Partition Equal Subset Sum          37.2%    Medium"></a>416    Partition Equal Subset Sum          37.2%    Medium</h3><h3 id="417-Pacific-Atlantic-Water-Flow-32-7-Medium"><a href="#417-Pacific-Atlantic-Water-Flow-32-7-Medium" class="headerlink" title="417    Pacific Atlantic Water Flow          32.7%    Medium"></a>417    Pacific Atlantic Water Flow          32.7%    Medium</h3><h3 id="418-Sentence-Screen-Fitting-26-9-Medium"><a href="#418-Sentence-Screen-Fitting-26-9-Medium" class="headerlink" title="418    Sentence Screen Fitting          26.9%    Medium"></a>418    Sentence Screen Fitting          26.9%    Medium</h3><h3 id="419-Battleships-in-a-Board-59-8-Medium"><a href="#419-Battleships-in-a-Board-59-8-Medium" class="headerlink" title="419    Battleships in a Board          59.8%    Medium"></a>419    Battleships in a Board          59.8%    Medium</h3><h3 id="421-Maximum-XOR-of-Two-Numbers-in-an-Array-40-6-Medium"><a href="#421-Maximum-XOR-of-Two-Numbers-in-an-Array-40-6-Medium" class="headerlink" title="421    Maximum XOR of Two Numbers in an Array          40.6%    Medium"></a>421    Maximum XOR of Two Numbers in an Array          40.6%    Medium</h3><h3 id="423-Reconstruct-Original-Digits-from-English-41-7-Medium"><a href="#423-Reconstruct-Original-Digits-from-English-41-7-Medium" class="headerlink" title="423    Reconstruct Original Digits from English          41.7%    Medium"></a>423    Reconstruct Original Digits from English          41.7%    Medium</h3><h3 id="424-Longest-Repeating-Character-Replacement-39-6-Medium"><a href="#424-Longest-Repeating-Character-Replacement-39-6-Medium" class="headerlink" title="424    Longest Repeating Character Replacement          39.6%    Medium"></a>424    Longest Repeating Character Replacement          39.6%    Medium</h3><h3 id="435-Non-overlapping-Intervals-39-8-Medium"><a href="#435-Non-overlapping-Intervals-39-8-Medium" class="headerlink" title="435    Non-overlapping Intervals          39.8%    Medium"></a>435    Non-overlapping Intervals          39.8%    Medium</h3><h3 id="436-Find-Right-Interval-41-9-Medium"><a href="#436-Find-Right-Interval-41-9-Medium" class="headerlink" title="436    Find Right Interval          41.9%    Medium"></a>436    Find Right Interval          41.9%    Medium</h3><h3 id="439-Ternary-Expression-Parser-49-3-Medium"><a href="#439-Ternary-Expression-Parser-49-3-Medium" class="headerlink" title="439    Ternary Expression Parser          49.3%    Medium"></a>439    Ternary Expression Parser          49.3%    Medium</h3><h3 id="442-Find-All-Duplicates-in-an-Array-45-6-Medium"><a href="#442-Find-All-Duplicates-in-an-Array-45-6-Medium" class="headerlink" title="442    Find All Duplicates in an Array          45.6%    Medium"></a>442    Find All Duplicates in an Array          45.6%    Medium</h3><h3 id="444-Sequence-Reconstruction-20-1-Medium"><a href="#444-Sequence-Reconstruction-20-1-Medium" class="headerlink" title="444    Sequence Reconstruction          20.1%    Medium"></a>444    Sequence Reconstruction          20.1%    Medium</h3><h3 id="445-Add-Two-Numbers-II-44-5-Medium"><a href="#445-Add-Two-Numbers-II-44-5-Medium" class="headerlink" title="445    Add Two Numbers II          44.5%    Medium"></a>445    Add Two Numbers II          44.5%    Medium</h3><h3 id="449-Serialize-and-Deserialize-BST-40-1-Medium"><a href="#449-Serialize-and-Deserialize-BST-40-1-Medium" class="headerlink" title="449    Serialize and Deserialize BST          40.1%    Medium"></a>449    Serialize and Deserialize BST          40.1%    Medium</h3><h3 id="450-Delete-Node-in-a-BST-32-4-Medium"><a href="#450-Delete-Node-in-a-BST-32-4-Medium" class="headerlink" title="450    Delete Node in a BST          32.4%    Medium"></a>450    Delete Node in a BST          32.4%    Medium</h3><h3 id="451-Sort-Characters-By-Frequency-50-3-Medium"><a href="#451-Sort-Characters-By-Frequency-50-3-Medium" class="headerlink" title="451    Sort Characters By Frequency          50.3%    Medium"></a>451    Sort Characters By Frequency          50.3%    Medium</h3><h3 id="452-Minimum-Number-of-Arrows-to-Burst-Balloons-41-9-Medium"><a href="#452-Minimum-Number-of-Arrows-to-Burst-Balloons-41-9-Medium" class="headerlink" title="452    Minimum Number of Arrows to Burst Balloons          41.9%    Medium"></a>452    Minimum Number of Arrows to Burst Balloons          41.9%    Medium</h3><h3 id="454-4Sum-II-41-2-Medium"><a href="#454-4Sum-II-41-2-Medium" class="headerlink" title="454    4Sum II          41.2%    Medium"></a>454    4Sum II          41.2%    Medium</h3><h3 id="456-132-Pattern-27-3-Medium"><a href="#456-132-Pattern-27-3-Medium" class="headerlink" title="456    132 Pattern          27.3%    Medium"></a>456    132 Pattern          27.3%    Medium</h3><h3 id="462-Minimum-Moves-to-Equal-Array-Elements-II-50-3-Medium"><a href="#462-Minimum-Moves-to-Equal-Array-Elements-II-50-3-Medium" class="headerlink" title="462    Minimum Moves to Equal Array Elements II          50.3%    Medium"></a>462    Minimum Moves to Equal Array Elements II          50.3%    Medium</h3><h3 id="464-Can-I-Win-21-4-Medium"><a href="#464-Can-I-Win-21-4-Medium" class="headerlink" title="464    Can I Win          21.4%    Medium"></a>464    Can I Win          21.4%    Medium</h3><h3 id="467-Unique-Substrings-in-Wraparound-String-28-4-Medium"><a href="#467-Unique-Substrings-in-Wraparound-String-28-4-Medium" class="headerlink" title="467    Unique Substrings in Wraparound String          28.4%    Medium"></a>467    Unique Substrings in Wraparound String          28.4%    Medium</h3><h3 id="468-Validate-IP-Address-21-8-Medium"><a href="#468-Validate-IP-Address-21-8-Medium" class="headerlink" title="468    Validate IP Address          21.8%    Medium"></a>468    Validate IP Address          21.8%    Medium</h3><h3 id="469-Convex-Polygon-24-6-Medium"><a href="#469-Convex-Polygon-24-6-Medium" class="headerlink" title="469    Convex Polygon          24.6%    Medium"></a>469    Convex Polygon          24.6%    Medium</h3><h3 id="473-Matchsticks-to-Square-27-5-Medium"><a href="#473-Matchsticks-to-Square-27-5-Medium" class="headerlink" title="473    Matchsticks to Square          27.5%    Medium"></a>473    Matchsticks to Square          27.5%    Medium</h3><h3 id="474-Ones-and-Zeroes-32-7-Medium"><a href="#474-Ones-and-Zeroes-32-7-Medium" class="headerlink" title="474    Ones and Zeroes          32.7%    Medium"></a>474    Ones and Zeroes          32.7%    Medium</h3><h3 id="477-Total-Hamming-Distance-40-1-Medium"><a href="#477-Total-Hamming-Distance-40-1-Medium" class="headerlink" title="477    Total Hamming Distance          40.1%    Medium"></a>477    Total Hamming Distance          40.1%    Medium</h3><h2 id="Hard-集合"><a href="#Hard-集合" class="headerlink" title="Hard 集合"></a>Hard 集合</h2><h3 id="4-Median-of-Two-Sorted-Arrays-20-7-Hard"><a href="#4-Median-of-Two-Sorted-Arrays-20-7-Hard" class="headerlink" title="4    Median of Two Sorted Arrays          20.7%    Hard"></a>4    Median of Two Sorted Arrays          20.7%    Hard</h3><h3 id="10-Regular-Expression-Matching-23-4-Hard"><a href="#10-Regular-Expression-Matching-23-4-Hard" class="headerlink" title="10    Regular Expression Matching          23.4%    Hard"></a>10    Regular Expression Matching          23.4%    Hard</h3><h3 id="23-Merge-k-Sorted-Lists-25-7-Hard"><a href="#23-Merge-k-Sorted-Lists-25-7-Hard" class="headerlink" title="23    Merge k Sorted Lists          25.7%    Hard"></a>23    Merge k Sorted Lists          25.7%    Hard</h3><h3 id="25-Reverse-Nodes-in-k-Group-29-6-Hard"><a href="#25-Reverse-Nodes-in-k-Group-29-6-Hard" class="headerlink" title="25    Reverse Nodes in k-Group          29.6%    Hard"></a>25    Reverse Nodes in k-Group          29.6%    Hard</h3><h3 id="30-Substring-with-Concatenation-of-All-Words-21-6-Hard"><a href="#30-Substring-with-Concatenation-of-All-Words-21-6-Hard" class="headerlink" title="30    Substring with Concatenation of All Words          21.6%    Hard"></a>30    Substring with Concatenation of All Words          21.6%    Hard</h3><h3 id="32-Longest-Valid-Parentheses-23-0-Hard"><a href="#32-Longest-Valid-Parentheses-23-0-Hard" class="headerlink" title="32    Longest Valid Parentheses          23.0%    Hard"></a>32    Longest Valid Parentheses          23.0%    Hard</h3><h3 id="33-Search-in-Rotated-Sorted-Array-31-8-Hard"><a href="#33-Search-in-Rotated-Sorted-Array-31-8-Hard" class="headerlink" title="33    Search in Rotated Sorted Array          31.8%    Hard"></a>33    Search in Rotated Sorted Array          31.8%    Hard</h3><h3 id="37-Sudoku-Solver-27-8-Hard"><a href="#37-Sudoku-Solver-27-8-Hard" class="headerlink" title="37    Sudoku Solver          27.8%    Hard"></a>37    Sudoku Solver          27.8%    Hard</h3><h3 id="41-First-Missing-Positive-24-9-Hard"><a href="#41-First-Missing-Positive-24-9-Hard" class="headerlink" title="41    First Missing Positive          24.9%    Hard"></a>41    First Missing Positive          24.9%    Hard</h3><h3 id="42-Trapping-Rain-Water-35-1-Hard"><a href="#42-Trapping-Rain-Water-35-1-Hard" class="headerlink" title="42    Trapping Rain Water          35.1%    Hard"></a>42    Trapping Rain Water          35.1%    Hard</h3><h3 id="44-Wildcard-Matching-18-9-Hard"><a href="#44-Wildcard-Matching-18-9-Hard" class="headerlink" title="44    Wildcard Matching          18.9%    Hard"></a>44    Wildcard Matching          18.9%    Hard</h3><h3 id="45-Jump-Game-II-26-0-Hard"><a href="#45-Jump-Game-II-26-0-Hard" class="headerlink" title="45    Jump Game II          26.0%    Hard"></a>45    Jump Game II          26.0%    Hard</h3><h3 id="51-N-Queens-28-8-Hard"><a href="#51-N-Queens-28-8-Hard" class="headerlink" title="51    N-Queens          28.8%    Hard"></a>51    N-Queens          28.8%    Hard</h3><h3 id="52-N-Queens-II-42-5-Hard"><a href="#52-N-Queens-II-42-5-Hard" class="headerlink" title="52    N-Queens II          42.5%    Hard"></a>52    N-Queens II          42.5%    Hard</h3><h3 id="56-Merge-Intervals-28-2-Hard"><a href="#56-Merge-Intervals-28-2-Hard" class="headerlink" title="56    Merge Intervals          28.2%    Hard"></a>56    Merge Intervals          28.2%    Hard</h3><h3 id="57-Insert-Interval-26-2-Hard"><a href="#57-Insert-Interval-26-2-Hard" class="headerlink" title="57    Insert Interval          26.2%    Hard"></a>57    Insert Interval          26.2%    Hard</h3><h3 id="65-Valid-Number-12-6-Hard"><a href="#65-Valid-Number-12-6-Hard" class="headerlink" title="65    Valid Number          12.6%    Hard"></a>65    Valid Number          12.6%    Hard</h3><h3 id="68-Text-Justification-17-9-Hard"><a href="#68-Text-Justification-17-9-Hard" class="headerlink" title="68    Text Justification          17.9%    Hard"></a>68    Text Justification          17.9%    Hard</h3><h3 id="72-Edit-Distance-30-5-Hard"><a href="#72-Edit-Distance-30-5-Hard" class="headerlink" title="72    Edit Distance          30.5%    Hard"></a>72    Edit Distance          30.5%    Hard</h3><h3 id="76-Minimum-Window-Substring-23-6-Hard"><a href="#76-Minimum-Window-Substring-23-6-Hard" class="headerlink" title="76    Minimum Window Substring          23.6%    Hard"></a>76    Minimum Window Substring          23.6%    Hard</h3><h3 id="84-Largest-Rectangle-in-Histogram-25-5-Hard"><a href="#84-Largest-Rectangle-in-Histogram-25-5-Hard" class="headerlink" title="84    Largest Rectangle in Histogram          25.5%    Hard"></a>84    Largest Rectangle in Histogram          25.5%    Hard</h3><h3 id="85-Maximal-Rectangle-25-8-Hard"><a href="#85-Maximal-Rectangle-25-8-Hard" class="headerlink" title="85    Maximal Rectangle          25.8%    Hard"></a>85    Maximal Rectangle          25.8%    Hard</h3><h3 id="87-Scramble-String-28-1-Hard"><a href="#87-Scramble-String-28-1-Hard" class="headerlink" title="87    Scramble String          28.1%    Hard"></a>87    Scramble String          28.1%    Hard</h3><h3 id="97-Interleaving-String-23-9-Hard"><a href="#97-Interleaving-String-23-9-Hard" class="headerlink" title="97    Interleaving String          23.9%    Hard"></a>97    Interleaving String          23.9%    Hard</h3><h3 id="99-Recover-Binary-Search-Tree-28-6-Hard"><a href="#99-Recover-Binary-Search-Tree-28-6-Hard" class="headerlink" title="99    Recover Binary Search Tree          28.6%    Hard"></a>99    Recover Binary Search Tree          28.6%    Hard</h3><h3 id="115-Distinct-Subsequences-30-5-Hard"><a href="#115-Distinct-Subsequences-30-5-Hard" class="headerlink" title="115    Distinct Subsequences          30.5%    Hard"></a>115    Distinct Subsequences          30.5%    Hard</h3><h3 id="117-Populating-Next-Right-Pointers-in-Each-Node-II-33-4-Hard"><a href="#117-Populating-Next-Right-Pointers-in-Each-Node-II-33-4-Hard" class="headerlink" title="117    Populating Next Right Pointers in Each Node II          33.4%    Hard"></a>117    Populating Next Right Pointers in Each Node II          33.4%    Hard</h3><h3 id="123-Best-Time-to-Buy-and-Sell-Stock-III-28-1-Hard"><a href="#123-Best-Time-to-Buy-and-Sell-Stock-III-28-1-Hard" class="headerlink" title="123    Best Time to Buy and Sell Stock III          28.1%    Hard"></a>123    Best Time to Buy and Sell Stock III          28.1%    Hard</h3><h3 id="124-Binary-Tree-Maximum-Path-Sum-24-9-Hard"><a href="#124-Binary-Tree-Maximum-Path-Sum-24-9-Hard" class="headerlink" title="124    Binary Tree Maximum Path Sum          24.9%    Hard"></a>124    Binary Tree Maximum Path Sum          24.9%    Hard</h3><h3 id="126-Word-Ladder-II-13-6-Hard"><a href="#126-Word-Ladder-II-13-6-Hard" class="headerlink" title="126    Word Ladder II          13.6%    Hard"></a>126    Word Ladder II          13.6%    Hard</h3><h3 id="128-Longest-Consecutive-Sequence-35-1-Hard"><a href="#128-Longest-Consecutive-Sequence-35-1-Hard" class="headerlink" title="128    Longest Consecutive Sequence          35.1%    Hard"></a>128    Longest Consecutive Sequence          35.1%    Hard</h3><h3 id="132-Palindrome-Partitioning-II-23-3-Hard"><a href="#132-Palindrome-Partitioning-II-23-3-Hard" class="headerlink" title="132    Palindrome Partitioning II          23.3%    Hard"></a>132    Palindrome Partitioning II          23.3%    Hard</h3><h3 id="135-Candy-23-8-Hard"><a href="#135-Candy-23-8-Hard" class="headerlink" title="135    Candy          23.8%    Hard"></a>135    Candy          23.8%    Hard</h3><h3 id="138-Copy-List-with-Random-Pointer-26-5-Hard"><a href="#138-Copy-List-with-Random-Pointer-26-5-Hard" class="headerlink" title="138    Copy List with Random Pointer          26.5%    Hard"></a>138    Copy List with Random Pointer          26.5%    Hard</h3><h3 id="140-Word-Break-II-22-0-Hard"><a href="#140-Word-Break-II-22-0-Hard" class="headerlink" title="140    Word Break II          22.0%    Hard"></a>140    Word Break II          22.0%    Hard</h3><h3 id="145-Binary-Tree-Postorder-Traversal-38-2-Hard"><a href="#145-Binary-Tree-Postorder-Traversal-38-2-Hard" class="headerlink" title="145    Binary Tree Postorder Traversal          38.2%    Hard"></a>145    Binary Tree Postorder Traversal          38.2%    Hard</h3><h3 id="146-LRU-Cache-16-0-Hard"><a href="#146-LRU-Cache-16-0-Hard" class="headerlink" title="146    LRU Cache          16.0%    Hard"></a>146    LRU Cache          16.0%    Hard</h3><h3 id="149-Max-Points-on-a-Line-15-5-Hard"><a href="#149-Max-Points-on-a-Line-15-5-Hard" class="headerlink" title="149    Max Points on a Line          15.5%    Hard"></a>149    Max Points on a Line          15.5%    Hard</h3><h3 id="154-Find-Minimum-in-Rotated-Sorted-Array-II-36-0-Hard"><a href="#154-Find-Minimum-in-Rotated-Sorted-Array-II-36-0-Hard" class="headerlink" title="154    Find Minimum in Rotated Sorted Array II          36.0%    Hard"></a>154    Find Minimum in Rotated Sorted Array II          36.0%    Hard</h3><h3 id="158-Read-N-Characters-Given-Read4-II-Call-multiple-times-24-2-Hard"><a href="#158-Read-N-Characters-Given-Read4-II-Call-multiple-times-24-2-Hard" class="headerlink" title="158    Read N Characters Given Read4 II - Call multiple times          24.2%    Hard"></a>158    Read N Characters Given Read4 II - Call multiple times          24.2%    Hard</h3><h3 id="159-Longest-Substring-with-At-Most-Two-Distinct-Characters-39-3-Hard"><a href="#159-Longest-Substring-with-At-Most-Two-Distinct-Characters-39-3-Hard" class="headerlink" title="159    Longest Substring with At Most Two Distinct Characters          39.3%    Hard"></a>159    Longest Substring with At Most Two Distinct Characters          39.3%    Hard</h3><h3 id="164-Maximum-Gap-28-5-Hard"><a href="#164-Maximum-Gap-28-5-Hard" class="headerlink" title="164    Maximum Gap          28.5%    Hard"></a>164    Maximum Gap          28.5%    Hard</h3><h3 id="174-Dungeon-Game-22-8-Hard"><a href="#174-Dungeon-Game-22-8-Hard" class="headerlink" title="174    Dungeon Game          22.8%    Hard"></a>174    Dungeon Game          22.8%    Hard</h3><h3 id="188-Best-Time-to-Buy-and-Sell-Stock-IV-23-7-Hard"><a href="#188-Best-Time-to-Buy-and-Sell-Stock-IV-23-7-Hard" class="headerlink" title="188    Best Time to Buy and Sell Stock IV          23.7%    Hard"></a>188    Best Time to Buy and Sell Stock IV          23.7%    Hard</h3><h3 id="212-Word-Search-II-22-1-Hard"><a href="#212-Word-Search-II-22-1-Hard" class="headerlink" title="212    Word Search II          22.1%    Hard"></a>212    Word Search II          22.1%    Hard</h3><h3 id="214-Shortest-Palindrome-22-7-Hard"><a href="#214-Shortest-Palindrome-22-7-Hard" class="headerlink" title="214    Shortest Palindrome          22.7%    Hard"></a>214    Shortest Palindrome          22.7%    Hard</h3><h3 id="218-The-Skyline-Problem-25-3-Hard"><a href="#218-The-Skyline-Problem-25-3-Hard" class="headerlink" title="218    The Skyline Problem          25.3%    Hard"></a>218    The Skyline Problem          25.3%    Hard</h3><h3 id="224-Basic-Calculator-25-3-Hard"><a href="#224-Basic-Calculator-25-3-Hard" class="headerlink" title="224    Basic Calculator          25.3%    Hard"></a>224    Basic Calculator          25.3%    Hard</h3><h3 id="233-Number-of-Digit-One-27-2-Hard"><a href="#233-Number-of-Digit-One-27-2-Hard" class="headerlink" title="233    Number of Digit One          27.2%    Hard"></a>233    Number of Digit One          27.2%    Hard</h3><h3 id="239-Sliding-Window-Maximum-31-2-Hard"><a href="#239-Sliding-Window-Maximum-31-2-Hard" class="headerlink" title="239    Sliding Window Maximum          31.2%    Hard"></a>239    Sliding Window Maximum          31.2%    Hard</h3><h3 id="248-Strobogrammatic-Number-III-30-2-Hard"><a href="#248-Strobogrammatic-Number-III-30-2-Hard" class="headerlink" title="248    Strobogrammatic Number III          30.2%    Hard"></a>248    Strobogrammatic Number III          30.2%    Hard</h3><h3 id="265-Paint-House-II-37-0-Hard"><a href="#265-Paint-House-II-37-0-Hard" class="headerlink" title="265    Paint House II          37.0%    Hard"></a>265    Paint House II          37.0%    Hard</h3><h3 id="269-Alien-Dictionary-22-5-Hard"><a href="#269-Alien-Dictionary-22-5-Hard" class="headerlink" title="269    Alien Dictionary          22.5%    Hard"></a>269    Alien Dictionary          22.5%    Hard</h3><h3 id="272-Closest-Binary-Search-Tree-Value-II-37-2-Hard"><a href="#272-Closest-Binary-Search-Tree-Value-II-37-2-Hard" class="headerlink" title="272    Closest Binary Search Tree Value II          37.2%    Hard"></a>272    Closest Binary Search Tree Value II          37.2%    Hard</h3><h3 id="273-Integer-to-English-Words-20-9-Hard"><a href="#273-Integer-to-English-Words-20-9-Hard" class="headerlink" title="273    Integer to English Words          20.9%    Hard"></a>273    Integer to English Words          20.9%    Hard</h3><h3 id="282-Expression-Add-Operators-28-3-Hard"><a href="#282-Expression-Add-Operators-28-3-Hard" class="headerlink" title="282    Expression Add Operators          28.3%    Hard"></a>282    Expression Add Operators          28.3%    Hard</h3><h3 id="287-Find-the-Duplicate-Number-41-6-Hard"><a href="#287-Find-the-Duplicate-Number-41-6-Hard" class="headerlink" title="287    Find the Duplicate Number          41.6%    Hard"></a>287    Find the Duplicate Number          41.6%    Hard</h3><h3 id="291-Word-Pattern-II-37-4-Hard"><a href="#291-Word-Pattern-II-37-4-Hard" class="headerlink" title="291    Word Pattern II          37.4%    Hard"></a>291    Word Pattern II          37.4%    Hard</h3><h3 id="295-Find-Median-from-Data-Stream-23-2-Hard"><a href="#295-Find-Median-from-Data-Stream-23-2-Hard" class="headerlink" title="295    Find Median from Data Stream          23.2%    Hard"></a>295    Find Median from Data Stream          23.2%    Hard</h3><h3 id="296-Best-Meeting-Point-50-0-Hard"><a href="#296-Best-Meeting-Point-50-0-Hard" class="headerlink" title="296    Best Meeting Point          50.0%    Hard"></a>296    Best Meeting Point          50.0%    Hard</h3><h3 id="297-Serialize-and-Deserialize-Binary-Tree-31-3-Hard"><a href="#297-Serialize-and-Deserialize-Binary-Tree-31-3-Hard" class="headerlink" title="297    Serialize and Deserialize Binary Tree          31.3%    Hard"></a>297    Serialize and Deserialize Binary Tree          31.3%    Hard</h3><h3 id="301-Remove-Invalid-Parentheses-34-5-Hard"><a href="#301-Remove-Invalid-Parentheses-34-5-Hard" class="headerlink" title="301    Remove Invalid Parentheses          34.5%    Hard"></a>301    Remove Invalid Parentheses          34.5%    Hard</h3><h3 id="302-Smallest-Rectangle-Enclosing-Black-Pixels-43-3-Hard"><a href="#302-Smallest-Rectangle-Enclosing-Black-Pixels-43-3-Hard" class="headerlink" title="302    Smallest Rectangle Enclosing Black Pixels          43.3%    Hard"></a>302    Smallest Rectangle Enclosing Black Pixels          43.3%    Hard</h3><h3 id="305-Number-of-Islands-II-37-9-Hard"><a href="#305-Number-of-Islands-II-37-9-Hard" class="headerlink" title="305    Number of Islands II          37.9%    Hard"></a>305    Number of Islands II          37.9%    Hard</h3><h3 id="308-Range-Sum-Query-2D-Mutable-19-9-Hard"><a href="#308-Range-Sum-Query-2D-Mutable-19-9-Hard" class="headerlink" title="308    Range Sum Query 2D - Mutable          19.9%    Hard"></a>308    Range Sum Query 2D - Mutable          19.9%    Hard</h3><h3 id="312-Burst-Balloons-41-4-Hard"><a href="#312-Burst-Balloons-41-4-Hard" class="headerlink" title="312    Burst Balloons          41.4%    Hard"></a>312    Burst Balloons          41.4%    Hard</h3><h3 id="315-Count-of-Smaller-Numbers-After-Self-33-4-Hard"><a href="#315-Count-of-Smaller-Numbers-After-Self-33-4-Hard" class="headerlink" title="315    Count of Smaller Numbers After Self          33.4%    Hard"></a>315    Count of Smaller Numbers After Self          33.4%    Hard</h3><h3 id="316-Remove-Duplicate-Letters-28-3-Hard"><a href="#316-Remove-Duplicate-Letters-28-3-Hard" class="headerlink" title="316    Remove Duplicate Letters          28.3%    Hard"></a>316    Remove Duplicate Letters          28.3%    Hard</h3><h3 id="317-Shortest-Distance-from-All-Buildings-33-2-Hard"><a href="#317-Shortest-Distance-from-All-Buildings-33-2-Hard" class="headerlink" title="317    Shortest Distance from All Buildings          33.2%    Hard"></a>317    Shortest Distance from All Buildings          33.2%    Hard</h3><h3 id="321-Create-Maximum-Number-23-8-Hard"><a href="#321-Create-Maximum-Number-23-8-Hard" class="headerlink" title="321    Create Maximum Number          23.8%    Hard"></a>321    Create Maximum Number          23.8%    Hard</h3><h3 id="327-Count-of-Range-Sum-28-6-Hard"><a href="#327-Count-of-Range-Sum-28-6-Hard" class="headerlink" title="327    Count of Range Sum          28.6%    Hard"></a>327    Count of Range Sum          28.6%    Hard</h3><h3 id="329-Longest-Increasing-Path-in-a-Matrix-35-1-Hard"><a href="#329-Longest-Increasing-Path-in-a-Matrix-35-1-Hard" class="headerlink" title="329    Longest Increasing Path in a Matrix          35.1%    Hard"></a>329    Longest Increasing Path in a Matrix          35.1%    Hard</h3><h3 id="330-Patching-Array-31-3-Hard"><a href="#330-Patching-Array-31-3-Hard" class="headerlink" title="330    Patching Array          31.3%    Hard"></a>330    Patching Array          31.3%    Hard</h3><h3 id="335-Self-Crossing-23-7-Hard"><a href="#335-Self-Crossing-23-7-Hard" class="headerlink" title="335    Self Crossing          23.7%    Hard"></a>335    Self Crossing          23.7%    Hard</h3><h3 id="336-Palindrome-Pairs-24-3-Hard"><a href="#336-Palindrome-Pairs-24-3-Hard" class="headerlink" title="336    Palindrome Pairs          24.3%    Hard"></a>336    Palindrome Pairs          24.3%    Hard</h3><h3 id="340-Longest-Substring-with-At-Most-K-Distinct-Characters-38-6-Hard"><a href="#340-Longest-Substring-with-At-Most-K-Distinct-Characters-38-6-Hard" class="headerlink" title="340    Longest Substring with At Most K Distinct Characters          38.6%    Hard"></a>340    Longest Substring with At Most K Distinct Characters          38.6%    Hard</h3><h3 id="352-Data-Stream-as-Disjoint-Intervals-38-7-Hard"><a href="#352-Data-Stream-as-Disjoint-Intervals-38-7-Hard" class="headerlink" title="352    Data Stream as Disjoint Intervals          38.7%    Hard"></a>352    Data Stream as Disjoint Intervals          38.7%    Hard</h3><h3 id="354-Russian-Doll-Envelopes-31-4-Hard"><a href="#354-Russian-Doll-Envelopes-31-4-Hard" class="headerlink" title="354    Russian Doll Envelopes          31.4%    Hard"></a>354    Russian Doll Envelopes          31.4%    Hard</h3><h3 id="358-Rearrange-String-k-Distance-Apart-31-7-Hard"><a href="#358-Rearrange-String-k-Distance-Apart-31-7-Hard" class="headerlink" title="358    Rearrange String k Distance Apart          31.7%    Hard"></a>358    Rearrange String k Distance Apart          31.7%    Hard</h3><h3 id="363-Max-Sum-of-Rectangle-No-Larger-Than-K-32-0-Hard"><a href="#363-Max-Sum-of-Rectangle-No-Larger-Than-K-32-0-Hard" class="headerlink" title="363    Max Sum of Rectangle No Larger Than K          32.0%    Hard"></a>363    Max Sum of Rectangle No Larger Than K          32.0%    Hard</h3><h3 id="380-Insert-Delete-GetRandom-O-1-38-0-Hard"><a href="#380-Insert-Delete-GetRandom-O-1-38-0-Hard" class="headerlink" title="380    Insert Delete GetRandom O(1)          38.0%    Hard"></a>380    Insert Delete GetRandom O(1)          38.0%    Hard</h3><h3 id="381-Insert-Delete-GetRandom-O-1-Duplicates-allowed-27-7-Hard"><a href="#381-Insert-Delete-GetRandom-O-1-Duplicates-allowed-27-7-Hard" class="headerlink" title="381    Insert Delete GetRandom O(1) - Duplicates allowed          27.7%    Hard"></a>381    Insert Delete GetRandom O(1) - Duplicates allowed          27.7%    Hard</h3><h3 id="391-Perfect-Rectangle-23-3-Hard"><a href="#391-Perfect-Rectangle-23-3-Hard" class="headerlink" title="391    Perfect Rectangle          23.3%    Hard"></a>391    Perfect Rectangle          23.3%    Hard</h3><h3 id="403-Frog-Jump-30-2-Hard"><a href="#403-Frog-Jump-30-2-Hard" class="headerlink" title="403    Frog Jump          30.2%    Hard"></a>403    Frog Jump          30.2%    Hard</h3><h3 id="407-Trapping-Rain-Water-II-35-0-Hard"><a href="#407-Trapping-Rain-Water-II-35-0-Hard" class="headerlink" title="407    Trapping Rain Water II          35.0%    Hard"></a>407    Trapping Rain Water II          35.0%    Hard</h3><h3 id="410-Split-Array-Largest-Sum-31-1-Hard"><a href="#410-Split-Array-Largest-Sum-31-1-Hard" class="headerlink" title="410    Split Array Largest Sum          31.1%    Hard"></a>410    Split Array Largest Sum          31.1%    Hard</h3><h3 id="411-Minimum-Unique-Word-Abbreviation-30-9-Hard"><a href="#411-Minimum-Unique-Word-Abbreviation-30-9-Hard" class="headerlink" title="411    Minimum Unique Word Abbreviation          30.9%    Hard"></a>411    Minimum Unique Word Abbreviation          30.9%    Hard</h3><h3 id="420-Strong-Password-Checker-21-5-Hard"><a href="#420-Strong-Password-Checker-21-5-Hard" class="headerlink" title="420    Strong Password Checker          21.5%    Hard"></a>420    Strong Password Checker          21.5%    Hard</h3><h3 id="425-Word-Squares-42-0-Hard"><a href="#425-Word-Squares-42-0-Hard" class="headerlink" title="425    Word Squares          42.0%    Hard"></a>425    Word Squares          42.0%    Hard</h3><h3 id="432-All-O-one-Data-Structure-28-4-Hard"><a href="#432-All-O-one-Data-Structure-28-4-Hard" class="headerlink" title="432    All O`one Data Structure          28.4%    Hard"></a>432    All O`one Data Structure          28.4%    Hard</h3><h3 id="440-K-th-Smallest-in-Lexicographical-Order-21-4-Hard"><a href="#440-K-th-Smallest-in-Lexicographical-Order-21-4-Hard" class="headerlink" title="440    K-th Smallest in Lexicographical Order          21.4%    Hard"></a>440    K-th Smallest in Lexicographical Order          21.4%    Hard</h3><h3 id="446-Arithmetic-Slices-II-Subsequence-22-0-Hard"><a href="#446-Arithmetic-Slices-II-Subsequence-22-0-Hard" class="headerlink" title="446    Arithmetic Slices II - Subsequence          22.0%    Hard"></a>446    Arithmetic Slices II - Subsequence          22.0%    Hard</h3><h3 id="465-Optimal-Account-Balancing-27-5-Hard"><a href="#465-Optimal-Account-Balancing-27-5-Hard" class="headerlink" title="465    Optimal Account Balancing          27.5%    Hard"></a>465    Optimal Account Balancing          27.5%    Hard</h3><h3 id="466-Count-The-Repetitions-24-6-Hard"><a href="#466-Count-The-Repetitions-24-6-Hard" class="headerlink" title="466    Count The Repetitions          24.6%    Hard"></a>466    Count The Repetitions          24.6%    Hard</h3><h3 id="471-Encode-String-with-Shortest-Length-45-9-Hard"><a href="#471-Encode-String-with-Shortest-Length-45-9-Hard" class="headerlink" title="471    Encode String with Shortest Length          45.9%    Hard"></a>471    Encode String with Shortest Length          45.9%    Hard</h3><h3 id="472-Concatenated-Words-28-2-Hard"><a href="#472-Concatenated-Words-28-2-Hard" class="headerlink" title="472    Concatenated Words          28.2%    Hard"></a>472    Concatenated Words          28.2%    Hard</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;刷刷简单的算法问题，顺手提升一下编程的裸写代码的能力。&lt;/p&gt;
&lt;p&gt;本文为 LeetCode 的 Easy 算法的解法集合。&lt;/p&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="算法与数据结构" scheme="http://twocucao.xyz/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="LeetCode" scheme="http://twocucao.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Redis Cheatsheet</title>
    <link href="http://twocucao.xyz/2016/12/11/RedisCheatSheet/"/>
    <id>http://twocucao.xyz/2016/12/11/RedisCheatSheet/</id>
    <published>2016-12-11T10:41:47.000Z</published>
    <updated>2017-06-10T01:12:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 MongoDB 相关命令。</p>
<ul>
<li>Redis Shell</li>
<li>Redis 配套工具</li>
<li>Redis-Py</li>
<li>Django 中使用Redis进行缓存</li>
<li>踩坑记录</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>
<h2 id="0x01-Redis-Shell"><a href="#0x01-Redis-Shell" class="headerlink" title="0x01. Redis Shell"></a>0x01. Redis Shell</h2><ul>
<li>RedisClient</li>
<li>通过网络或者 Dash 查看文档</li>
<li>Redis 官方自带工具</li>
</ul>
<h2 id="0x02-Redis-配套工具"><a href="#0x02-Redis-配套工具" class="headerlink" title="0x02. Redis 配套工具"></a>0x02. Redis 配套工具</h2><h2 id="0x03-Redis-Py"><a href="#0x03-Redis-Py" class="headerlink" title="0x03. Redis-Py"></a>0x03. Redis-Py</h2><h2 id="0x04-踩坑记录"><a href="#0x04-踩坑记录" class="headerlink" title="0x04. 踩坑记录"></a>0x04. 踩坑记录</h2><h3 id="1-无法磁盘持久化"><a href="#1-无法磁盘持久化" class="headerlink" title="1. 无法磁盘持久化"></a>1. 无法磁盘持久化</h3><p>用 scrapy 配合 scrapy-redis 抓取网页并且存储到 MongoDB 里面。</p>
<p>由于 scrapy-redis 重写了 scrapy 的几个核心模块，借助 redis 来实现多个 scrapy 节点从而实现分布式。</p>
<p>默认的 scrapy 设置会把 items 放在 redis 从而方便程序对 items 进行后续处理。这个设计很完美，只是美中不足的是，我常常需要抓取大量页面直接缓存到数据库中。这就导致了 redis 很快就满了。</p>
<p>于是很容易报出这么一个错误。</p>
<blockquote>
<p>(error) MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.</p>
</blockquote>
<p>出错原因如同提示所言，无法磁盘持久化。</p>
<p>基本上问题可能就是：</p>
<ol>
<li>磁盘满了。</li>
<li>redis 本身在某个地方配置了磁盘缓存的大小。</li>
<li>其他权限之类的问题。</li>
</ol>
<p>最快的解决方式就是删除占用磁盘的部分。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 进入 redis-cli 删除 items</span></div><div class="line">config <span class="built_in">set</span> stop-writes-on-bgsave-error no</div><div class="line">del xxx_html:items</div><div class="line">config <span class="built_in">set</span> stop-writes-on-bgsave-error yes</div><div class="line"><span class="comment"># 到 bash 下面检查磁盘，我的机器瞬间释放了 3GB 的磁盘空间</span></div><div class="line">df -hl</div></pre></td></tr></table></figure>
<p>备注：del 一次即可，因为有程序正在运行，所以当 del 之后，原来阻塞的程序接着开始运行。 xxx_html:items 会不断出现新的值。</p>
<p>Scrapy 立马就开始工作了（无需重启）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 MongoDB 相关命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis Shell&lt;/li&gt;
&lt;li&gt;Redis 配套工具&lt;/li&gt;
&lt;li&gt;Redis-Py&lt;/li&gt;
&lt;li&gt;Django 中使用Redis进行缓存&lt;/li&gt;
&lt;li&gt;踩坑记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="PC/MAC 使用心得技巧" scheme="http://twocucao.xyz/categories/PC-MAC-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="效率" scheme="http://twocucao.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="工作自动化" scheme="http://twocucao.xyz/tags/%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
      <category term="Redis" scheme="http://twocucao.xyz/tags/Redis/"/>
    
  </entry>
  
</feed>
