<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MG的编程小屋</title>
  
  <subtitle>Get Busy Living, Or Get Busy Dying</subtitle>
  <link href="http://twocucao.xyz/atom.xml" rel="self"/>
  
  <link href="http://twocucao.xyz/"/>
  <updated>2020-11-29T15:57:47.816Z</updated>
  <id>http://twocucao.xyz/</id>
  
  <author>
    <name>Micheal Gardner</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开源认证基础服务</title>
    <link href="http://twocucao.xyz/2020/11/29/_ory/"/>
    <id>http://twocucao.xyz/2020/11/29/_ory/</id>
    <published>2020-11-29T15:57:32.000Z</published>
    <updated>2020-11-29T15:57:47.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>随着业务的增长，往往需要统一体系内的服务的账户。<br>经过一番调研，决定尝试一下 ory 的开源认证基础服务</p><h2 id="0x01-ORY-尝试解决问题？"><a href="#0x01-ORY-尝试解决问题？" class="headerlink" title="0x01 ORY 尝试解决问题？"></a>0x01 ORY 尝试解决问题？</h2><p>ORY 提供了四个主要项目，每个项目着力于解决一个边界清晰的认证 / 鉴权问题</p><ul><li>ORY Kratos 提供了用户认证服务</li><li>ORY Hydra 提供了 OAuth 2.0 &amp; OpenID Connect provider.</li><li>ORY Keto 提供了 访问控制</li><li>ORY Oathkeeper 提供了认证访问代理</li></ul><h2 id="0x02-用户认证服务-Kratos"><a href="#0x02-用户认证服务-Kratos" class="headerlink" title="0x02 用户认证服务 Kratos"></a>0x02 用户认证服务 Kratos</h2><h3 id="常见方案"><a href="#常见方案" class="headerlink" title="常见方案"></a>常见方案</h3><ol><li>方案 1, 选择全栈式解决方案 - 比如 Java 社区的 JGroups</li><li>方案 2, 选择 IDaas - 比如 Login With Apple, Google</li><li>方案 3, 选择自己来 - 比如 Java 社区的 JGroups</li></ol><p>三种方案各有利弊</p><ol><li><p>全栈式解决方案上手极快，但</p><ul><li>扩展性不强</li><li>绑定 Java 技术栈</li><li>数据模型固定</li><li>登陆流程固定<br>  - 更新迭代慢</li></ul></li><li><p>Login With Google 虽然方便，但是并没有解决如下的问题<br>  - 更新 Profile</p><ul><li>添加第二个恢复邮箱</li><li>2FA</li><li>存储管理 Sessions<br>  - 全局登出</li></ul></li><li><p>自己来，需要处理事情也挺多</p></li></ol><p>  - 方案二遇到的问题，一个不会少<br>  - 加密算法<br>    - 流程可能较为复杂，比如先用邮箱注册，然后用 Sign Up Using Google, 或者先用 Sign Up Google, 然后使用邮箱登陆。(PS: 我国的登陆姿势就更多了）</p><p>是不是某种方案是最好的呢？其实未必<br>就我个人经验来说，</p><ul><li>第一种方案比较适合稳定的，技术栈相同的团队使用。如果对原先应用进行少量裁剪就可以使用，其实未尝不可。</li><li>第二种方案如果登陆入口仅是 Login With Google, 并且内网服务数量就几个，也不需要做全局登出，那么其实做起来比较省事。我工作过的一个公司就喜欢这么干。</li><li>第三种方案虽然处理的问题看起来比较多，但是社区现有的 Building Block 已经比较多了。如果流程没有特别复杂，一手打造的非常容易往自己的项目发展情况发展。</li></ul><h3 id="Kratos-的方案"><a href="#Kratos-的方案" class="headerlink" title="Kratos 的方案"></a>Kratos 的方案</h3><p>Kratos 提供了如下的解决方案</p><ul><li>登陆与注册</li><li>track sesison/devices</li><li>MFA/2FA</li><li>账户验证</li><li>账户恢复</li><li>Profile &amp; Account Management</li><li>管理后台接口 API</li><li>消费 OAuth2 and OpenID Connect</li></ul><h2 id="0x03-Ory-Hydra"><a href="#0x03-Ory-Hydra" class="headerlink" title="0x03 Ory Hydra"></a>0x03 Ory Hydra</h2><blockquote><p>You May Not Need It</p></blockquote><ul><li>Provider OAuth2 and OpenID Connect via <a href="https://github.com/ory/hydra">https://github.com/ory/hydra</a></li></ul><h2 id="0x03-Ory-Keto"><a href="#0x03-Ory-Keto" class="headerlink" title="0x03 Ory Keto"></a>0x03 Ory Keto</h2><p>权限系统一般放在按照产品需求，最好跟着产品走。而不是随随便便提取出来做一个权限系统。</p><blockquote><p>You May Not Need It</p></blockquote><h2 id="0x04-Ory-Oathkeeper"><a href="#0x04-Ory-Oathkeeper" class="headerlink" title="0x04 Ory Oathkeeper"></a>0x04 Ory Oathkeeper</h2><p>同样，如果你不是有做 zero trust</p><blockquote><p>You May Not Need It</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;随着业务的增长，往往需要统一体系内的服务的账户。&lt;br&gt;经过一番调研，决定尝试一下 ory 的开源认</summary>
      
    
    
    
    <category term="Go" scheme="http://twocucao.xyz/categories/Go/"/>
    
    
    <category term="后端开发" scheme="http://twocucao.xyz/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>写给 Pythonista 的 Golang 入门指北</title>
    <link href="http://twocucao.xyz/2019/05/15/GoLang/"/>
    <id>http://twocucao.xyz/2019/05/15/GoLang/</id>
    <published>2019-05-15T13:02:20.000Z</published>
    <updated>2019-05-15T14:07:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>原计划是去年 8 月份入 Golang 大法的，然后开一篇帖子进行写个入门指北来着。这一拖就拖到了今年。</p><p>同样是快速上手教程，这篇文章和其他的文章的不同点在于，完全假设你是 Pythonista 的入门。</p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><h2 id="0x01-安装"><a href="#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h2><p>Golang 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 如果你是在 mac 上，建议先安装下面的 SDK 以防不测</span><br><span class="line">open &#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F;Packages&#x2F;macOS_SDK_headers_for_macOS_10.14.pkg</span><br><span class="line"># 安装 golang</span><br><span class="line">brew install golang</span><br><span class="line"># 配置环境变量</span><br><span class="line">echo $GOPATH # &#x2F;Users&#x2F;twocucao&#x2F;Codes&#x2F;ReposGo</span><br><span class="line"></span><br><span class="line">cd &#x2F;Users&#x2F;twocucao&#x2F;Codes&#x2F;ReposPublic&#x2F;</span><br><span class="line"></span><br><span class="line">mkcd thanos # mkdir &amp;&amp; cd</span><br><span class="line">go mod init github.com&#x2F;twocucao&#x2F;thanos</span><br><span class="line">git remote add origin git@github.com:twocucao&#x2F;thanos.git</span><br></pre></td></tr></table></figure><p>接下来，需要解决卡 golang.org 的网络问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.io</span><br><span class="line">go get -v -u github.com&#x2F;hqpko&#x2F;go-mod-tidy</span><br><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><p>接下来就是随便找一些带有依赖库的代码。放到该文件夹下面。</p><p>你也可以直接从这里 <a href="https://github.com/twocucao/thanos.git">https://github.com/twocucao/thanos.git</a> 拉取代码</p><h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><h3 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h3><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><h3 id="内置简单类型"><a href="#内置简单类型" class="headerlink" title="内置简单类型"></a>内置简单类型</h3><p>对于一些基本的数据类型，操作为 加减乘除取余数位运算等等</p><ul><li>数字类型</li><li>布尔类型</li><li>字符串类型</li><li>数组 / 列表</li><li>字典</li></ul><h3 id="内置复杂类型"><a href="#内置复杂类型" class="headerlink" title="内置复杂类型"></a>内置复杂类型</h3><ul><li>集合结构 : 串</li><li>线性结构 : 线性表 （单链表，静态链表，循环链表，双向链表，<strong>栈，队列</strong>)</li><li>树形结构 : 树（二叉树，B+ 树，红黑树）</li><li>图形结构 : 图</li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h2 id="0x02-中级概念"><a href="#0x02-中级概念" class="headerlink" title="0x02 中级概念"></a>0x02 中级概念</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块，这个概念，可大可小，大的时候，把一个程序说成是模块，小的时候，可以把一个文件，甚至你说这一个函数是一个模块，也行。</p><p>这里的模块指的是一个包下的函数。</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象有三大概念：</p><ul><li>封装</li><li>继承</li><li>多态</li></ul><h3 id="错误-调试测试"><a href="#错误-调试测试" class="headerlink" title="错误 / 调试测试"></a>错误 / 调试测试</h3><p>异常处理实际上可以考验一个程序员编写代码的健壮性。</p><p>事实上来说，代码写的健壮是一个程序员必备的素养。但其实在开发过程中，出于对项目进行赶工上线，需要对程序的健壮性做出一定的取舍。并且，在编写客户端，服务端，网页前端的时候基本上都会遇到这个问题。什么时候选择健壮的程序，什么时候选择是还可以的程序。需要自己的经验。</p><h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><blockquote><p>Go 多线程约等于并发。</p></blockquote><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><h5 id="协同式多任务处理"><a href="#协同式多任务处理" class="headerlink" title="协同式多任务处理"></a>协同式多任务处理</h5><p>如果有两个线程，同时进行 IO 请求，当其中一个线程连接之后，立即会<strong>主动让出 GIL</strong>, 其他线程就可以运行。</p><blockquote><p>当 N 个线程在网络 I/O 堵塞，或等待重新获取 GIL，而一个线程运行 Python。</p></blockquote><p>让出之后还要执行代码呀，所以要有个收回 GIL 的动作。</p><h5 id="抢占式多任务处理"><a href="#抢占式多任务处理" class="headerlink" title="抢占式多任务处理"></a>抢占式多任务处理</h5><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>原子操作：sort 之类不需要<br>非原子操作：n=n+2 的字节码分为 加载 n , 加载 2 , 相加，存储 n, 四个步骤，由于不是原子性，很可能被由于 15 ms 而被打断。</p><p>当然，懒人一向是 : <strong>优先级不决加括号，线程不决加 lock</strong></p><p>对于 Java, 程序员努力在尽可能短的时间内加锁存取共享数据，减轻线程的争夺，实现最大并行。但 Python 中，线程无法并行运行，细粒度的锁就没有了优势。</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h2 id="0x03-高级技巧"><a href="#0x03-高级技巧" class="headerlink" title="0x03 高级技巧"></a>0x03 高级技巧</h2><h2 id="0x04-标准库"><a href="#0x04-标准库" class="headerlink" title="0x04 标准库"></a>0x04 标准库</h2><h3 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h3><h3 id="系统化模块"><a href="#系统化模块" class="headerlink" title="系统化模块"></a>系统化模块</h3><h2 id="0x05-第三方库"><a href="#0x05-第三方库" class="headerlink" title="0x05 第三方库"></a>0x05 第三方库</h2><ul><li>Requests : API 人性化</li></ul><h2 id="0x06-代码质量"><a href="#0x06-代码质量" class="headerlink" title="0x06 代码质量"></a>0x06 代码质量</h2><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><h2 id="0x07-常用命令"><a href="#0x07-常用命令" class="headerlink" title="0x07 常用命令"></a>0x07 常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">go build</span><br><span class="line">go install -v</span><br><span class="line">go clean</span><br><span class="line">go fmt</span><br><span class="line">go get</span><br><span class="line">go test</span><br><span class="line">go tool fix . # 修复老代码到新版本</span><br><span class="line">go tool vet directory|files</span><br><span class="line">go tool yacc -o gopher.go -p parser gopher.y</span><br><span class="line">godoc -http&#x3D;:8080</span><br><span class="line">go version 查看 go 当前的版本</span><br><span class="line">go env 查看当前 go 的环境变量</span><br><span class="line">go list 列出当前全部安装的 package</span><br><span class="line">go run 编译并运行 Go 程序</span><br></pre></td></tr></table></figure><h2 id="0xEE-文章更新"><a href="#0xEE-文章更新" class="headerlink" title="0xEE 文章更新"></a>0xEE 文章更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 如果你是在 mac 上，建议先安装下面的 SDK 以防不测</span><br><span class="line">open &#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F;Packages&#x2F;macOS_SDK_headers_for_macOS_10.14.pkg</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>ChangeLog:</p><ul><li><strong>2018-08-22</strong> 初始化接口</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原计划是去年 8 月份入 Golang 大法的，然后开一篇帖子进行写个入门指北来着。这一拖就拖到了今年。&lt;/p&gt;
&lt;p&gt;同样是快速上手教程，这篇文章和其他的文章的不同点在于，完全假设你是 Pythonista 的入门。&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="Go" scheme="http://twocucao.xyz/categories/Go/"/>
    
    
    <category term="后端开发" scheme="http://twocucao.xyz/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的使用 Windows 10</title>
    <link href="http://twocucao.xyz/2019/04/13/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8Windows10/"/>
    <id>http://twocucao.xyz/2019/04/13/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8Windows10/</id>
    <published>2019-04-13T05:21:44.000Z</published>
    <updated>2019-04-13T06:33:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近入手了 SP6, 于是把 2015 年写的这篇文章修订为 2019 版</p><blockquote><p>笔者已过了爱折腾的年纪，仅从提升工作效率方面来说。</p></blockquote><p>背景：</p><ol start="0"><li>Pythonista &amp;&amp; Nodejs</li><li>工作机 MBP 2017 款机器</li><li>生活机 Surface Pro 6, 轻办公，有时也用来调试 Windows 上的程序。</li></ol><p>本文目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">▼ 0x00 前言 : section</span><br><span class="line">0x01 文件整理 : section</span><br><span class="line">▼ 0x02 自带功能 : section</span><br><span class="line">2.1 快捷键 : section</span><br><span class="line">2.2 触摸板 : section</span><br><span class="line">2.3 Win+R -- 运行 : section</span><br><span class="line">▼ 0x03 必备软件 : section</span><br><span class="line">3.1 文件管理 : section</span><br><span class="line">3.2 资讯浏览 : section</span><br><span class="line">3.3 学习软件 : section</span><br><span class="line">3.4 播放器 : section</span><br><span class="line">0x04 Autohotkey : section</span><br><span class="line">▼ 0x05 编程配置 : section</span><br><span class="line">5.1 Windows Subsystem Linux : section</span><br><span class="line">5.2 终端 : section</span><br><span class="line">5.3 Python : section</span><br><span class="line">5.4 Node : section</span><br><span class="line">5.5 其他 : section</span><br><span class="line">0x06 实用主义的工具论 : section</span><br><span class="line">0xEE 后续 : section</span><br></pre></td></tr></table></figure><h2 id="0x01-文件整理"><a href="#0x01-文件整理" class="headerlink" title="0x01 文件整理"></a>0x01 文件整理</h2><p>文件整理一般从类型上进行划分子文件夹。</p><p>贴上我的几张图来看一下我的文件夹命名：</p><p>一级文件夹如下：<br><img src="http://upload-images.jianshu.io/upload_images/52890-b6a5322beca48d2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>二级文件夹如下：<br><img src="http://upload-images.jianshu.io/upload_images/52890-656d90e16abaff66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>三级或者三级以上文件夹</p><p><img src="http://upload-images.jianshu.io/upload_images/52890-bdf7349fccedda52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>文件命名规范（因为涉及到后面使用 Everything，所以我们的命名尽量追求便于搜索）</p><p>举个例子，对于读书笔记 ：读书笔记、_设计模式、_20150303_v2.1.xmind</p><p>对于照片这种文件比较多的，优先命名文件夹，其次按照地址人物日期命名，比如：大明湖胖、_夏雨荷、_20150101</p><blockquote><p>无需刻意追求命名，方便搜索，方便管理就好。</p></blockquote><p>不妨参考下面文章：</p><p><a href="http://www.zhihu.com/question/21537488">电脑上的文件夹该如何命名（整理）才能做到很久都不用重新整理的那种？ - 文件整理</a></p><p>由于 Windows 的文件没有标签系统。则可以从命名上强行打上标签，比如加上年份。</p><p>嗯这样你在搜索笔记的时候在 Everything 里面只需要键入 2015 笔记就可以查看 2015 笔记文件。</p><p>是不是很方便？</p><p><img src="http://upload-images.jianshu.io/upload_images/52890-f4a815755900d627.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><img src="http://upload-images.jianshu.io/upload_images/52890-1fb3ac3766e59044.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>当然桌面上尽量少放或者不放文件夹，我的桌面上仅仅有一个链接到 OneDrive 里面的 TEMP 文件夹的快捷方式，用于存放临时没有整理的文件。</p><p><img src="http://upload-images.jianshu.io/upload_images/52890-be22e9252b149d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="0x02-自带功能"><a href="#0x02-自带功能" class="headerlink" title="0x02 自带功能"></a>0x02 自带功能</h2><h3 id="2-1-快捷键"><a href="#2-1-快捷键" class="headerlink" title="2.1 快捷键"></a>2.1 快捷键</h3><p>能看到本文的读者应该都可以搜索到这些东西。就不赘述了。</p><p>仅仅说一些重点快捷键。Win+ 数字键 把常用的软件附在任务栏上。</p><p>建议四个以内，方便单手操作。Win+X Alt+tab 切换窗口 Win+R 运行</p><h3 id="2-2-触摸板"><a href="#2-2-触摸板" class="headerlink" title="2.2 触摸板"></a>2.2 触摸板</h3><p>嗯，没有苹果的触摸板好用。但 Windows 的快捷键好用多了。</p><h3 id="2-3-Win-R-–-运行"><a href="#2-3-Win-R-–-运行" class="headerlink" title="2.3 Win+R – 运行"></a>2.3 Win+R – 运行</h3><p>主要用于启动一些程序或者一些 DOS 小命令。</p><p><img src="http://upload-images.jianshu.io/upload_images/52890-d39ea3f078f1d800.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>我将所有的便携与非便携软件的快捷方式放在这里并且配置环境变量。</p><p>比如，我需要启动为知笔记，我就仅仅需要闭上眼睛输入 Win+R + wz +<Enter></p><p>PS: 景观</p><p>其他软件同理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sublime text 打开需要输入 </span></span><br><span class="line">Win+R + st +&lt;Enter&gt;</span><br><span class="line"><span class="comment"># 欧路词典 打开需要输入 </span></span><br><span class="line">Win+R + ol +&lt;Enter&gt;</span><br><span class="line"><span class="comment"># 这里省去若干软件打开方式。</span></span><br></pre></td></tr></table></figure><p>关于 Win+R 你可以参考善用佳软 <a href="http://xbeta.info/win-run.htm">最绿色最高效，用 win+r 启动常用程序和文档</a> 的介绍。</p><h2 id="0x03-必备软件"><a href="#0x03-必备软件" class="headerlink" title="0x03 必备软件"></a>0x03 必备软件</h2><h3 id="3-1-文件管理"><a href="#3-1-文件管理" class="headerlink" title="3.1 文件管理"></a>3.1 文件管理</h3><ul><li><p>图片方面，如果不是 RAW 格式，可以考虑使用 Eagle 这个神器</p></li><li><p>文字方面，如果是简单的图文素材，可以直接丢到印象笔记 / 有道云笔记里。</p></li><li><p>文档管理，如果是比较 Geek 一些的话，可以考虑用 TotalCMD 管理文档，Everything 快速搜索</p></li><li><p>PS: 没有足够的需求，不要搞 TC.</p></li><li><p>PS2: 无坚不摧，为快不破。 everything 是搜索效率最快的软件。没有之一。</p></li></ul><h3 id="3-2-资讯浏览"><a href="#3-2-资讯浏览" class="headerlink" title="3.2 资讯浏览"></a>3.2 资讯浏览</h3><ul><li>浏览器 Chrome / 新版 Edge 浏览器</li><li>欧陆词典：可以外挂其他的开源词库，查词速度超级快。</li></ul><h3 id="3-3-学习软件"><a href="#3-3-学习软件" class="headerlink" title="3.3 学习软件"></a>3.3 学习软件</h3><ul><li>Xmind</li><li>OneNote</li><li>Office</li></ul><h3 id="3-4-播放器"><a href="#3-4-播放器" class="headerlink" title="3.4 播放器"></a>3.4 播放器</h3><ul><li>PotPlayer</li><li>foobar2000 – 逼格提升必备</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/52890-1d8bc57d69948d60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><ul><li>网易云音乐 – 这货真的不错。</li></ul><h2 id="0x04-Autohotkey"><a href="#0x04-Autohotkey" class="headerlink" title="0x04 Autohotkey"></a>0x04 Autohotkey</h2><p>早年刚接触这个软件的时候，是为了在魔兽争霸里面快速输入文本….</p><p>但这个软件可以帮你少装很多软件，</p><p>比如：</p><ol><li>可以针对快捷键进行编程，</li><li>节省大量的时间，比如一大段文字中有一个网址，你需要访问它，我的解决方法就是选中那些文字，然后一个 Win+b，直接打开 chrome 进行搜索，如果文字中没有网址，那么对选中文字进行百度。同理可以推淘宝，京东 github 等等。</li><li>你需要大量的文本编辑，但是上下左右离自己的工作区比较远，你可以小拇指按住大写锁定按键，然后使用 HJKL 进行移动。</li></ol><p>而且，作为曾经的 Geek , 不写点代码定制一下使用流程，你都不好意思说优雅。</p><p>教程参考 <a href="http://zhuanlan.zhihu.com/autohotkey">AutoHotkey 之美 - 知乎专栏</a></p><p>新手可以先拿我搜刮整理的 AHK 代码看看。<a href="https://github.com/twocucao/ChortHotKey">twocucao/ChortHotKey · GitHub</a></p><p>PS：AHK/TotalCMD 神级软件，都是入门容易精通难的深坑，想调教好也不是想象中呢么简单的，但，书到用时方恨少，你可以先挑一些使用。如果你以后有不少的文件需要管理，在未来，你一定会用到。</p><blockquote><p>PS: 站在 2019 年回头看，其实 AHK 的语法还是蛮糟糕的。相比于顺手打出很多快捷键。倒不如先优化自己的工作流程。甚至，很多 AHK 的场景完全可以用 Python 之类的语言来写。当我在 Windows 上的时候一味追求 APM, 即高效的操作，但其实最高效的还是自己的思路清晰，想好了再动手。</p></blockquote><p>毕竟，AHK 作为脚本语言，确实语法不美，数据结构也少，没有主流编程语言的社区支持。</p><p>嗯，其实还是推荐学 Python</p><h2 id="0x05-编程配置"><a href="#0x05-编程配置" class="headerlink" title="0x05 编程配置"></a>0x05 编程配置</h2><h3 id="5-1-Windows-Subsystem-Linux"><a href="#5-1-Windows-Subsystem-Linux" class="headerlink" title="5.1 Windows Subsystem Linux"></a>5.1 Windows Subsystem Linux</h3><p>如何配置 WSL （我死了？哈哈哈哈好逗的缩写）</p><p><a href="https://zhuanlan.zhihu.com/p/49227132">https://zhuanlan.zhihu.com/p/49227132</a></p><p><a href="https://zhuanlan.zhihu.com/p/47733615">https://zhuanlan.zhihu.com/p/47733615</a></p><h3 id="5-2-终端"><a href="#5-2-终端" class="headerlink" title="5.2 终端"></a>5.2 终端</h3><p>cmder 相当于 windows 上的 iterm</p><p><a href="https://github.com/cmderdev/cmder">https://github.com/cmderdev/cmder</a></p><h3 id="5-3-Python"><a href="#5-3-Python" class="headerlink" title="5.3 Python"></a>5.3 Python</h3><p><a href="https://www.anaconda.com/distribution/#download-section">https://www.anaconda.com/distribution/#download-section</a></p><p>由于笔者要调试 Win32 程序，而大部分这些 dll 文件都是在 32 位的情况下编译出来的。</p><h3 id="5-4-Node"><a href="#5-4-Node" class="headerlink" title="5.4 Node"></a>5.4 Node</h3><p><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><h3 id="5-5-其他"><a href="#5-5-其他" class="headerlink" title="5.5 其他"></a>5.5 其他</h3><ul><li>beyond compare 代码比对</li><li>jetbrain</li><li>vscode</li></ul><h2 id="0x06-实用主义的工具论"><a href="#0x06-实用主义的工具论" class="headerlink" title="0x06 实用主义的工具论"></a>0x06 实用主义的工具论</h2><p>当你选择用一个工具的时候，务必把精力放在解决问题上。</p><p>能满足你的要求，就是好工具，须知『梅须逊雪三分白，雪却输梅一段香』</p><p>孰高孰下取决于使用者。</p><blockquote><p>你是张三丰，你就能徒手夺来灭绝师太的倚天剑。</p></blockquote><p>并不是说用了一个操作系统，用了某个软件，就会显得自己多么高明，如果不能给日常工作生活提高效率，让自己节省时间，再好的工具，那又有什么意义呢？</p><blockquote><p>抓到老鼠的猫才是好猫呀！</p></blockquote><h2 id="0xEE-后续"><a href="#0xEE-后续" class="headerlink" title="0xEE 后续"></a>0xEE 后续</h2><blockquote><p>2016-01-04 已换 Macbook Pro, 依然挂念 Windows.<br>2017-05-01 已换 2016 年 Macbook Pro With Multi-Touchbar.<br>2019-04-13 新增 SP6 作为生活机。</p></blockquote><p>ChangeLog:</p><ul><li>2017-03-08 09:32:15 整理知乎回答，搬运到博客上。</li><li>2017-05-01 09:32:15 补充现在使用的电脑信息</li><li>2017-06-10 09:32:15 重新排版，增加后续章节。</li><li>2019-04-13 13:57:02 重新排版</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;最近入手了 SP6, 于是把 2015 年写的这篇文章修订为 2019 版&lt;/p&gt;
&lt;blockqu</summary>
      
    
    
    
    <category term="善用佳软" scheme="http://twocucao.xyz/categories/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
    
    <category term="Windows" scheme="http://twocucao.xyz/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>一文解决你的 Python ORM 选择困难症</title>
    <link href="http://twocucao.xyz/2019/04/12/Mapping/"/>
    <id>http://twocucao.xyz/2019/04/12/Mapping/</id>
    <published>2019-04-12T13:05:00.000Z</published>
    <updated>2019-04-12T09:19:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Python 圈内三大 ORM SQLAlchemy VS Django ORM VS Peewee</p><ol><li>SQLAlchemy 复杂程度最高，同时，这也意味着 SQLAlchemy 可以做更多的事情。使用 DataMapper 方式实现</li><li>Django ORM 个人最喜欢，使用 ActiveRecord 实现 如果不是因为现在 Flask 项目已经是用了 SQLAlchemy , 否则的话我甚至会考虑将 Django ORM 配置到 Flask 项目中。当然，也有蛋疼的 SqlAlchemy 使用者已经移植给 django 配置了 SQLAlchemy 的库。</li><li>Peewee 没用过，不好评论。以后有机会试试。</li></ol><h2 id="0x01-如何访问数据库"><a href="#0x01-如何访问数据库" class="headerlink" title="0x01 如何访问数据库"></a>0x01 如何访问数据库</h2><p>那，既然已经可以访问数据库，本着『如无必要，勿增实体』的原则，为什么要不辞劳苦的用个库呢？</p><h2 id="0x02-数据库抽象的两种理论"><a href="#0x02-数据库抽象的两种理论" class="headerlink" title="0x02 数据库抽象的两种理论"></a>0x02 数据库抽象的两种理论</h2><h3 id="理论一：Active-Record"><a href="#理论一：Active-Record" class="headerlink" title="理论一：Active Record"></a>理论一：Active Record</h3><h3 id="理论二：Data-Mapper"><a href="#理论二：Data-Mapper" class="headerlink" title="理论二：Data Mapper"></a>理论二：Data Mapper</h3><h2 id="0x03-数据库抽象的两种实现"><a href="#0x03-数据库抽象的两种实现" class="headerlink" title="0x03 数据库抽象的两种实现"></a>0x03 数据库抽象的两种实现</h2><h3 id="实现一：Django-ORM"><a href="#实现一：Django-ORM" class="headerlink" title="实现一：Django ORM"></a>实现一：Django ORM</h3><h3 id="实现二：Sqlalchemy"><a href="#实现二：Sqlalchemy" class="headerlink" title="实现二：Sqlalchemy"></a>实现二：Sqlalchemy</h3><h2 id="0x04-工具的强弱"><a href="#0x04-工具的强弱" class="headerlink" title="0x04 工具的强弱"></a>0x04 工具的强弱</h2><p><a href="https://www.thoughtfulcode.com/orm-active-record-vs-data-mapper/">https://www.thoughtfulcode.com/orm-active-record-vs-data-mapper/</a></p><h3 id="2-0-SQLAlchemy-VS-DjangoORM"><a href="#2-0-SQLAlchemy-VS-DjangoORM" class="headerlink" title="2.0 SQLAlchemy VS DjangoORM"></a>2.0 SQLAlchemy VS DjangoORM</h3><p>ORM 通常有 DataMapper 实现和 ActiveRecord 实现两种。</p><p>依照我的经验，ActiveRecord 使用起来的更接近对象 (Object) 的操作，DataMapper 使用起来更接近 (Table) 的操作。</p><blockquote><p>SQLAlchemy 是 DataMapper 模式的实现，在该模式下，session 会暴露出来，即 Model 与 session 并不耦合。</p></blockquote><blockquote><p>DjangoORM 是 ActivityRecord 模式的一种实现，在该模式下，session 并不暴露出来，即 Model 与 session 耦合。</p></blockquote><p>使用 Django ORM 的时候，往往是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b &#x3D; Blog(**data)</span><br><span class="line">b.save()</span><br></pre></td></tr></table></figure><p>使用 SQLAlchemy 的时候，往往是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b &#x3D; Blog(**data)</span><br><span class="line">session.add(b)</span><br><span class="line">session.session(b)</span><br></pre></td></tr></table></figure><p>由于 Django 帮你屏蔽了 session 的操作。</p><p>在通常情况下，</p><ol><li>DjangoORM 使用起来更加接近 Object 的操作。</li><li>SQLAlchemy 使用起来更加接近 Table 的操作。</li></ol><p>举个例子，</p><p>一对多，Father 添加两个小孩（其中一个小孩是已经存在的）</p><p>在 DjangoORM 里面， 这里更像是一个 Set 的 add 操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">father.children.add(new_child,exsit_child)</span><br></pre></td></tr></table></figure><p>在 SQLAlchemy 里面，这里更像是一个 table 的 insert 操作。（麻蛋，你要说是一个 list 的 append 操作也行）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for child in (new_child,exsit_child):</span><br><span class="line">    if child in father.children:</span><br><span class="line">        father.children.append(child)</span><br></pre></td></tr></table></figure><blockquote><p>写 SQLAlchemy 更接近操作放在数据库里面的数据记录，而 DjangoORM 更接近操作一批放在数据库里面的对象。</p></blockquote><p>由于 session 的使用姿势不同，所以往往会有很多使用上面的区别。</p><p>至于孰优孰劣，难以评判。</p><ul><li><p>技术老大 (Flask 和 React 大神）倾向于使用 SQLAlchemy, 他认为</p><ul><li>对于一个技术『知其然，知其所以然』</li><li>对于 ORM<ul><li>操作数据库，操作最好要落实在成 SQL</li><li>如果有可能的话，每一个 SQL 语句都要经过推敲，而且写这个 SQL 和 ORM 过程要反复练习</li></ul></li><li>对于 Migration 机制<ul><li>Alembic 这个迁移工具是为了省事用的，甚至在某些情况下没必要用。完全可以写 SQL 代替</li></ul></li></ul></li><li><p>我 (Django 和 Vue 弱鸡）倾向于使用 DjangoORM, 我认为</p><ul><li>对于一个技术『先知其大致然，需要深入的时候知其所以然』</li><li>对于 ORM<ul><li>操作数据，最好抽象为对对象的操作。</li><li>测试到位的情况下，快糙狠先出东西。到需要优化的时候该怎么 Profile 怎么 Profile</li></ul></li><li>对于 Migration 机制<ul><li>用起来啊，能操作对象为什么还要强行到数据库操作？</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Active Record, properly defined, is a design pattern where an object is represented as a record on a table in a relational database.</span><br></pre></td></tr></table></figure><h3 id="2-1-模型定义"><a href="#2-1-模型定义" class="headerlink" title="2.1 模型定义"></a>2.1 模型定义</h3><p>先看一组模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line">Base = declarative_base() <span class="comment"># 模型基类</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>) <span class="comment"># 主键</span></span><br><span class="line">    name = Column(String)</span><br><span class="line">    fullname = Column(String)</span><br><span class="line">    password = Column(String)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;&lt;User(name=&#x27;%s&#x27;, fullname=&#x27;%s&#x27;, password=&#x27;%s&#x27;)&gt;&quot;</span> % (</span><br><span class="line">                            self.name, self.fullname, self.password)</span><br><span class="line">Base.metadata.create_all(engine)</span><br></pre></td></tr></table></figure><p>可以看出，包含如下的部分：</p><ol><li>Model 与 Model 内部的 Meta</li><li>Field 与 Field 内部的 Options</li><li>Model 与 Model 之间的关系</li><li>其他，比如索引</li></ol><h4 id="Models-与-Meta"><a href="#Models-与-Meta" class="headerlink" title="Models 与 Meta"></a>Models 与 Meta</h4><p><a href="https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/sql/schema.py#L3685">https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/sql/schema.py#L3685</a></p><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><h5 id="One-To-Many"><a href="#One-To-Many" class="headerlink" title="One To Many"></a>One To Many</h5><p>母亲有若干个孩子，外键在孩子上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Parent(Base):</span><br><span class="line">    #...</span><br><span class="line">    children &#x3D; relationship(&quot;Child&quot;, backref&#x3D;&quot;parent&quot;)</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    #...</span><br><span class="line">    parent_id &#x3D; Column(Integer, ForeignKey(&#39;parent.id&#39;))</span><br></pre></td></tr></table></figure><h5 id="Many-To-One"><a href="#Many-To-One" class="headerlink" title="Many To One"></a>Many To One</h5><p>多个母亲共享一个孩子，外键在母亲上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Parent(Base):</span><br><span class="line">    child_id &#x3D; Column(Integer, ForeignKey(&#39;child.id&#39;))</span><br><span class="line">    child &#x3D; relationship(&quot;Child&quot;)</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    # ...</span><br></pre></td></tr></table></figure><h5 id="One-To-One"><a href="#One-To-One" class="headerlink" title="One To One"></a>One To One</h5><p>One to One 是 One to Many 或者是 Many to One 的简化版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Many To One</span><br><span class="line">class Parent(Base):</span><br><span class="line">    # ...</span><br><span class="line">    child_id &#x3D; Column(Integer, ForeignKey(&#39;child.id&#39;))</span><br><span class="line">    child &#x3D; relationship(&quot;Child&quot;, backref&#x3D;backref(&quot;parent&quot;, uselist&#x3D;False))</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    # ...</span><br><span class="line"></span><br><span class="line"># One To Many 改 One To One</span><br><span class="line">class Parent(Base):</span><br><span class="line">    # ...</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    # ...</span><br><span class="line">    parent_id &#x3D; Column(Integer, ForeignKey(&#39;parent.id&#39;))</span><br><span class="line">    parent &#x3D; relationship(&quot;Parent&quot;, backref&#x3D;backref(&quot;child&quot;, uselist&#x3D;False))</span><br></pre></td></tr></table></figure><h5 id="Many-To-Many"><a href="#Many-To-Many" class="headerlink" title="Many To Many"></a>Many To Many</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">association_table &#x3D; Table(&#39;association&#39;, Base.metadata,</span><br><span class="line">    Column(&#39;left_id&#39;, Integer, ForeignKey(&#39;left.id&#39;)),</span><br><span class="line">    Column(&#39;right_id&#39;, Integer, ForeignKey(&#39;right.id&#39;))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">class Parent(Base):</span><br><span class="line">    # ...</span><br><span class="line">    children &#x3D; relationship(&quot;Child&quot;,</span><br><span class="line">                    secondary&#x3D;association_table,</span><br><span class="line">                    backref&#x3D;&quot;parents&quot;)</span><br><span class="line"></span><br><span class="line">class Child(Base):</span><br><span class="line">    # ...</span><br></pre></td></tr></table></figure><p>注意事项</p><p>执行删除 mapping 表的时候尽量这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myparent.children.remove(somechild)</span><br></pre></td></tr></table></figure><p>当你想干掉 somechild 的时候，会执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.delete(somechild)</span><br></pre></td></tr></table></figure><ol><li>假如 Child 没有 ref Parent 的话，Secondary Table 无删除，则无法删除。</li><li>假如 ref 了的话，则删除 secondary 里面的记录。</li><li>TODO</li></ol><h5 id="邻接列表关系"><a href="#邻接列表关系" class="headerlink" title="邻接列表关系"></a>邻接列表关系</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Node(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;node&#39;</span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    parent_id &#x3D; Column(Integer, ForeignKey(&#39;node.id&#39;))</span><br><span class="line">    data &#x3D; Column(String(50))</span><br><span class="line">    children &#x3D; relationship(&quot;Node&quot;,</span><br><span class="line">                backref&#x3D;backref(&#39;parent&#39;, remote_side&#x3D;[id])</span><br><span class="line">            )</span><br></pre></td></tr></table></figure><h5 id="relationship-详解"><a href="#relationship-详解" class="headerlink" title="relationship 详解"></a>relationship 详解</h5><h3 id="2-1-Query"><a href="#2-1-Query" class="headerlink" title="2.1 Query"></a>2.1 Query</h3><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c1 &#x3D; Child(name&#x3D;&quot;苏轼&quot;)</span><br><span class="line">session.add(c1)</span><br><span class="line">session.flush()</span><br><span class="line">p &#x3D; Parent(name&#x3D;&quot;苏辙&quot;)</span><br><span class="line">p.best_child &#x3D; c1</span><br><span class="line">for c in [c1,c2,c3,c4]:</span><br><span class="line">    p.children.append(c)</span><br><span class="line">session.add(c1)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><h4 id="Retrieve"><a href="#Retrieve" class="headerlink" title="Retrieve"></a>Retrieve</h4><p>过滤</p><p>filter(**kwargs)<br>filter(Singer.name == “周杰伦”)<br>filter(Singer.name =! “周杰棍”)</p><h5 id="跨关系（跨表）查询"><a href="#跨关系（跨表）查询" class="headerlink" title="跨关系（跨表）查询"></a>跨关系（跨表）查询</h5><p>session.query(Entry).join(Blog,Blog.entry_id == Entry.id).filter(Blog.name = “SqlAlchemy CheatSheet”)</p><h5 id="Limit-Offset-分页"><a href="#Limit-Offset-分页" class="headerlink" title="Limit / Offset / 分页"></a>Limit / Offset / 分页</h5><ul><li>limit()</li><li>offset()</li></ul><h5 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query &#x3D; session.query(Order) # query &#x3D; session.query(Order)</span><br><span class="line">query &#x3D; query.filter(Order.name.like(f&quot;%name%&quot;))</span><br></pre></td></tr></table></figure><h5 id="二进制表达式"><a href="#二进制表达式" class="headerlink" title="二进制表达式"></a>二进制表达式</h5><p>我们先 type 一下表达式，找到 eq 的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(model.column_name == <span class="string">&#x27;asdf&#x27;</span>) → sqlalchemy.sql.elements.BinaryExpression</span><br></pre></td></tr></table></figure><p>是一个二进制表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等于</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name == <span class="string">&#x27;ed&#x27;</span>)</span><br><span class="line"><span class="comment"># 不等于</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name != <span class="string">&#x27;ed&#x27;</span>)</span><br><span class="line"><span class="comment"># Like（有的数据库不区分大小写）</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.like(<span class="string">&#x27;%ed%&#x27;</span>))</span><br><span class="line"><span class="comment"># ILIKE (case-insensitive LIKE)</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.ilike(<span class="string">&#x27;%ed%&#x27;</span>))</span><br><span class="line"><span class="comment"># IN</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.in_([<span class="string">&#x27;ed&#x27;</span>, <span class="string">&#x27;wendy&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]))</span><br><span class="line"><span class="comment"># Not in</span></span><br><span class="line">query.<span class="built_in">filter</span>(~User.name.in_([<span class="string">&#x27;ed&#x27;</span>, <span class="string">&#x27;wendy&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]))</span><br><span class="line"><span class="comment"># IS NULL</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name == <span class="literal">None</span>)</span><br><span class="line"><span class="comment">## 如果你用了 pep8/linter 的话</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.is_(<span class="literal">None</span>))</span><br><span class="line"><span class="comment"># IS NOT NULL:</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name != <span class="literal">None</span>)</span><br><span class="line"><span class="comment">## 如果你用了 pep8/linter 的话</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.isnot(<span class="literal">None</span>))</span><br><span class="line"><span class="comment"># AND</span></span><br><span class="line"><span class="comment">## use and_()</span></span><br><span class="line">query.<span class="built_in">filter</span>(and_(User.name == <span class="string">&#x27;ed&#x27;</span>, User.fullname == <span class="string">&#x27;Ed Jones&#x27;</span>))</span><br><span class="line"><span class="comment">## or send multiple expressions to .filter()</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name == <span class="string">&#x27;ed&#x27;</span>, User.fullname == <span class="string">&#x27;Ed Jones&#x27;</span>)</span><br><span class="line"><span class="comment">## or chain multiple filter()/filter_by() calls</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name == <span class="string">&#x27;ed&#x27;</span>).<span class="built_in">filter</span>(User.fullname == <span class="string">&#x27;Ed Jones&#x27;</span>)</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">query.<span class="built_in">filter</span>(or_(User.name == <span class="string">&#x27;ed&#x27;</span>, User.name == <span class="string">&#x27;wendy&#x27;</span>))</span><br><span class="line"><span class="comment"># MATCH</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.name.match(<span class="string">&#x27;wendy&#x27;</span>))</span><br></pre></td></tr></table></figure><h5 id="执行查询"><a href="#执行查询" class="headerlink" title="执行查询"></a>执行查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">all()</span><br><span class="line">first()</span><br><span class="line">one()</span><br><span class="line">one_or_none()</span><br><span class="line">scalar()</span><br></pre></td></tr></table></figure><p>YourModel.query.get((pk1, pk2))</p><h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><blockquote><p>同一个 Session 下面，取到的某一条数据对应的 objects 应该是一样的？</p></blockquote><h5 id="复制-实例"><a href="#复制-实例" class="headerlink" title="复制 实例"></a>复制 实例</h5><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 查询的是 SomeModel 里面所有的字段 即 select *</span><br><span class="line">query &#x3D; session.query(SomeModel)</span><br><span class="line"># 查询的是 SomeModel 里面部分的字段 即 select acol, bcol</span><br><span class="line">query &#x3D; session.query(SomeModel.acol,SomeModel.bcol)</span><br><span class="line"># 即 select acol , bcol</span><br><span class="line"># alias</span><br><span class="line">user_alias &#x3D; aliased(User, name&#x3D;&#39;user_alias&#39;)</span><br><span class="line">for row in session.query(user_alias, user_alias.name).all():</span><br><span class="line">    # 即相当于 select name as name_label</span><br><span class="line">    print(row.user_alias)</span><br><span class="line"></span><br><span class="line"># limit 和 offset</span><br><span class="line">for u in session.query(User).order_by(User.id)[1:3]:</span><br><span class="line">    print(u)</span><br><span class="line"></span><br><span class="line"># distinct</span><br><span class="line">session.query(model.Name).distinct(model.Name.value).order_by(model.Name.value)</span><br><span class="line"># order_by</span><br><span class="line">User.query.order_by(User.popularity.desc(),User.date_created.desc()).limit(10).all()</span><br></pre></td></tr></table></figure><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><p>单个 object 更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">blog.title &#x3D; &quot;大宝天天见&quot;</span><br><span class="line">session.add(blog)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><p>批量更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.query.filter(Blog.content.like(&quot;% 敏感词 %&quot;)).update(&#123;</span><br><span class="line">    Blog.content: &quot;依照相关 XX 无法查看&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一对多的更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">append</span><br></pre></td></tr></table></figure><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><p>query.delete()</p><h4 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h4><p><a href="https://stackoverflow.com/questions/6044309/sqlalchemy-how-to-join-several-tables-by-one-query">https://stackoverflow.com/questions/6044309/sqlalchemy-how-to-join-several-tables-by-one-query</a></p><h5 id="两表-InnerJoin"><a href="#两表-InnerJoin" class="headerlink" title="两表 InnerJoin"></a>两表 InnerJoin</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> u, a <span class="keyword">in</span> session.query(User, Address).\</span><br><span class="line">                    <span class="built_in">filter</span>(User.<span class="built_in">id</span>==Address.user_id).\</span><br><span class="line">                    <span class="built_in">filter</span>(Address.email_address==<span class="string">&#x27;jack@google.com&#x27;</span>).\</span><br><span class="line">                    <span class="built_in">all</span>():</span><br><span class="line">    print(u)</span><br><span class="line">    print(a)</span><br><span class="line"><span class="comment"># &lt;User(name=&#x27;jack&#x27;, fullname=&#x27;Jack Bean&#x27;, password=&#x27;gjffdd&#x27;)&gt;</span></span><br><span class="line"><span class="comment"># &lt;Address(email_address=&#x27;jack@google.com&#x27;)&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="多表-InnerJoin-LeftJoin"><a href="#多表-InnerJoin-LeftJoin" class="headerlink" title="多表 InnerJoin + LeftJoin"></a>多表 InnerJoin + LeftJoin</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query.outerjoin(User.addresses)   # LEFT OUTER JOIN</span><br></pre></td></tr></table></figure><h4 id="聚集查询"><a href="#聚集查询" class="headerlink" title="聚集查询"></a>聚集查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.query(User).filter(User.name.like(&#39;%ed&#39;)).count()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from sqlalchemy import func</span><br><span class="line">session.query(Table.column, func.count(Table.column)).group_by(Table.column).all()</span><br><span class="line"></span><br><span class="line">self.session.query(func.count(Table.column1),Table.column1, Table.column2).group_by(Table.column1, Table.column2).all()</span><br><span class="line"></span><br><span class="line">from sqlalchemy.sql import func</span><br><span class="line">session.query(func.avg(Rating.field2).label(&#39;average&#39;)).filter(Rating.url&#x3D;&#x3D;url_string.netloc)</span><br></pre></td></tr></table></figure><h4 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h4><p>Query 对象，下文中，我会聊到这个 Query 对象。这里先跳过。</p><h3 id="2-2-原生查询"><a href="#2-2-原生查询" class="headerlink" title="2.2 原生查询"></a>2.2 原生查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from sqlalchemy import text</span><br><span class="line"></span><br><span class="line">sql &#x3D; text(&#39;select name from penguins&#39;)</span><br><span class="line">result &#x3D; db.engine.execute(sql)</span><br><span class="line">names &#x3D; []</span><br><span class="line">for row in result:</span><br><span class="line">    names.append(row[0])</span><br><span class="line"></span><br><span class="line">print names</span><br><span class="line"></span><br><span class="line">from collections import namedtuple</span><br><span class="line"></span><br><span class="line">Record &#x3D; namedtuple(&#39;Record&#39;, result.keys())</span><br><span class="line">records &#x3D; [Record(*r) for r in result.fetchall()]</span><br><span class="line">for r in records:</span><br><span class="line">    print(r)</span><br><span class="line"></span><br><span class="line">from sqlalchemy.sql import text</span><br><span class="line"></span><br><span class="line">connection &#x3D; engine.connect()</span><br><span class="line"></span><br><span class="line"># recommended</span><br><span class="line">cmd &#x3D; &#39;select * from Employees where EmployeeGroup &#x3D;&#x3D; :group&#39;</span><br><span class="line">employeeGroup &#x3D; &#39;Staff&#39;</span><br><span class="line">employees &#x3D; connection.execute(text(cmd), group &#x3D; employeeGroup)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>get_or_create</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def get_or_create(session, model, defaults&#x3D;None, **kwargs):</span><br><span class="line">    instance &#x3D; session.query(model).filter_by(**kwargs).first()</span><br><span class="line">    if instance:</span><br><span class="line">        return instance, False</span><br><span class="line">    else:</span><br><span class="line">        params &#x3D; dict((k, v) for k, v in kwargs.iteritems() if not isinstance(v, ClauseElement))</span><br><span class="line">        params.update(defaults or &#123;&#125;)</span><br><span class="line">        instance &#x3D; model(**params)</span><br><span class="line">        session.add(instance)</span><br><span class="line">        return instance, True</span><br></pre></td></tr></table></figure><h3 id="2-3-更新查询"><a href="#2-3-更新查询" class="headerlink" title="2.3 更新查询"></a>2.3 更新查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.query(Stuff).update(&#123;Stuff.foo: Stuff.foo + 1&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1) for c in session.query(Stuff).all():</span><br><span class="line">       c.foo +&#x3D; 1</span><br><span class="line">   session.commit()</span><br><span class="line"></span><br><span class="line">2) session.query().\</span><br><span class="line">       update(&#123;&quot;foo&quot;: (Stuff.foo + 1)&#125;)</span><br><span class="line">   session.commit()</span><br><span class="line"></span><br><span class="line">3) conn &#x3D; engine.connect()</span><br><span class="line">   stmt &#x3D; Stuff.update().\</span><br><span class="line">       values(Stuff.foo &#x3D; (Stuff.foo + 1))</span><br><span class="line">   conn.execute(stmt)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1) user.no_of_logins +&#x3D; 1</span><br><span class="line">   session.commit()</span><br><span class="line"></span><br><span class="line">2) session.query().\</span><br><span class="line">       filter(User.username &#x3D;&#x3D; form.username.data).\</span><br><span class="line">       update(&#123;&quot;no_of_logins&quot;: (User.no_of_logins +1)&#125;)</span><br><span class="line">   session.commit()</span><br><span class="line"></span><br><span class="line">3) conn &#x3D; engine.connect()</span><br><span class="line">   stmt &#x3D; User.update().\</span><br><span class="line">       values(no_of_logins&#x3D;(User.no_of_logins + 1)).\</span><br><span class="line">       where(User.username &#x3D;&#x3D; form.username.data)</span><br><span class="line">   conn.execute(stmt)</span><br><span class="line"></span><br><span class="line">4) setattr(user, &#39;no_of_logins&#39;, user.no_of_logins+1)</span><br><span class="line">   session.commit()</span><br></pre></td></tr></table></figure><h3 id="2-4-删除"><a href="#2-4-删除" class="headerlink" title="2.4 删除"></a>2.4 删除</h3><p><a href="https://stackoverflow.com/questions/5033547/sqlalchemy-cascade-delete">https://stackoverflow.com/questions/5033547/sqlalchemy-cascade-delete</a></p><h4 id="OnDelete"><a href="#OnDelete" class="headerlink" title="OnDelete"></a>OnDelete</h4><p>ondelete=’CASCADE’))</p><h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><p>models.User.query.delete()</p><h3 id="如何从-Object-到一个-ORM"><a href="#如何从-Object-到一个-ORM" class="headerlink" title="如何从 Object 到一个 ORM"></a>如何从 Object 到一个 ORM</h3><p>如何追踪 Object 的变化？</p><h2 id="0x03-SQLAlchemy-的高级特性"><a href="#0x03-SQLAlchemy-的高级特性" class="headerlink" title="0x03 SQLAlchemy 的高级特性"></a>0x03 SQLAlchemy 的高级特性</h2><h3 id="表继承"><a href="#表继承" class="headerlink" title="表继承"></a>表继承</h3><p><a href="https://stackoverflow.com/questions/1337095/sqlalchemy-inheritance">https://stackoverflow.com/questions/1337095/sqlalchemy-inheritance</a></p><h3 id="啥玩意"><a href="#啥玩意" class="headerlink" title="啥玩意"></a>啥玩意</h3><p>Flush 和 commit</p><p><a href="https://stackoverflow.com/questions/4201455/sqlalchemy-whats-the-difference-between-flush-and-commit">https://stackoverflow.com/questions/4201455/sqlalchemy-whats-the-difference-between-flush-and-commit</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; Foo(bar&#x3D;1)</span><br><span class="line">print x.id</span><br><span class="line"># None</span><br><span class="line">session.add(x)</span><br><span class="line">session.flush()</span><br><span class="line"># BEGIN</span><br><span class="line"># INSERT INTO foo (bar) VALUES(1)</span><br><span class="line"># COMMIT</span><br><span class="line">print x.id</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qry &#x3D; DBSession.query(User).filter(</span><br><span class="line">        and_(User.birthday &lt;&#x3D; &#39;1988-01-17&#39;, User.birthday &gt;&#x3D; &#39;1985-01-17&#39;))</span><br></pre></td></tr></table></figure><h2 id="0x04-SQLAlchemy-的基础特性-Under-The-Hood"><a href="#0x04-SQLAlchemy-的基础特性-Under-The-Hood" class="headerlink" title="0x04 SQLAlchemy 的基础特性 Under The Hood"></a>0x04 SQLAlchemy 的基础特性 Under The Hood</h2><h3 id="Loading-策略"><a href="#Loading-策略" class="headerlink" title="Loading 策略"></a>Loading 策略</h3><h4 id="Lazy-Loading"><a href="#Lazy-Loading" class="headerlink" title="Lazy Loading"></a>Lazy Loading</h4><h4 id="Eager-Loading"><a href="#Eager-Loading" class="headerlink" title="Eager Loading"></a>Eager Loading</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from sqlalchemy.dialects import postgresql</span><br><span class="line">&gt;&gt;&gt; print str(q.statement.compile(dialect&#x3D;postgresql.dialect()))</span><br><span class="line">Where q is defined as:</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x05-SQLAlchemy-的高级特性-Under-The-Hood"><a href="#0x05-SQLAlchemy-的高级特性-Under-The-Hood" class="headerlink" title="0x05 SQLAlchemy 的高级特性 Under The Hood"></a>0x05 SQLAlchemy 的高级特性 Under The Hood</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p><a href="https://stackoverflow.com/questions/6297404/multi-threaded-use-of-sqlalchemy">https://stackoverflow.com/questions/6297404/multi-threaded-use-of-sqlalchemy</a><br><a href="https://stackoverflow.com/questions/9619789/sqlalchemy-proper-session-handling-in-multi-thread-applications">https://stackoverflow.com/questions/9619789/sqlalchemy-proper-session-handling-in-multi-thread-applications</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;34322471&#x2F;sqlalchemy-engine-connection-and-session-difference</span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;11769366&#x2F;why-is-sqlalchemy-insert-with-sqlite-25-times-slower-than-using-sqlite3-directly</span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;12223335&#x2F;sqlalchemy-creating-vs-reusing-a-session</span><br><span class="line">session 是个容器</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;18199053&#x2F;example-of-what-sqlalchemy-can-do-and-django-orm-cannot</span><br><span class="line">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;7389759&#x2F;memory-efficient-built-in-sqlalchemy-iterator-generator</span><br><span class="line"></span><br><span class="line"># 日志</span><br><span class="line">import logging</span><br><span class="line">logging.basicConfig()</span><br><span class="line">logging.getLogger(&#39;sqlalchemy.engine&#39;).setLevel(logging.INFO)</span><br></pre></td></tr></table></figure><h2 id="0x06-DEBUG-和-Profile-技巧"><a href="#0x06-DEBUG-和-Profile-技巧" class="headerlink" title="0x06 DEBUG 和 Profile 技巧"></a>0x06 DEBUG 和 Profile 技巧</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS &#x3D; False</span><br></pre></td></tr></table></figure><h3 id="6-1-查看技巧"><a href="#6-1-查看技巧" class="headerlink" title="6.1 查看技巧"></a>6.1 查看技巧</h3><p>dict(u)<br>u.<strong>dict</strong></p><p><a href="https://stackoverflow.com/questions/1171166/how-can-i-profile-a-sqlalchemy-powered-application">https://stackoverflow.com/questions/1171166/how-can-i-profile-a-sqlalchemy-powered-application</a></p><p>如果用上 Flask+SQLAlchemy 一般也要带上，Flask-Migration 与 Flask-SQLAlchemy, 这两个库也是对 Alembic 和 SQLAlchemy 的浅封装。</p><p>那么，对于这个 ORM 库还有那些通用性的知识需要了解？</p><p>嗯，是时候了解本质了。</p><p><a href="http://derrickgilland.com/posts/demystifying-flask-sqlalchemy/">http://derrickgilland.com/posts/demystifying-flask-sqlalchemy/</a></p><h2 id="0x07-ORM-的本质"><a href="#0x07-ORM-的本质" class="headerlink" title="0x07 ORM 的本质"></a>0x07 ORM 的本质</h2><p>ORM 的本质是 Data Access Layer 上的一层封装。如果你写原生 SQL, 即手写 DAL 的话，开发效率可能会大打折扣。</p><h3 id="ORM-的两种类型-Active-Record-与-Data-Mappers"><a href="#ORM-的两种类型-Active-Record-与-Data-Mappers" class="headerlink" title="ORM 的两种类型 Active Record 与 Data Mappers"></a>ORM 的两种类型 Active Record 与 Data Mappers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># ActiveRecord 风格写起来类似于 Django ORM, 大致是这样的</span><br><span class="line"></span><br><span class="line">## AR 的模型定义</span><br><span class="line"></span><br><span class="line">class User(db.models):</span><br><span class="line">    name &#x3D; db.StringField(verbose&#x3D;&quot;xyz&quot;)</span><br><span class="line"></span><br><span class="line">## AR 的新增</span><br><span class="line">user &#x3D; User()</span><br><span class="line">user.name &#x3D; &quot;123456&quot;</span><br><span class="line">user.save() ## 正好对应数据库中的一行</span><br><span class="line"></span><br><span class="line">## AR 的查询</span><br><span class="line"></span><br><span class="line">users &#x3D; User.objects.filter(Q(name&#x3D;&quot;黄老板的小姨子&quot;)).all()</span><br><span class="line"></span><br><span class="line"># Data Mappers 风格写起来类似于 SQLAlchemy ORM, 大致是这样的</span><br><span class="line"></span><br><span class="line">## SA 的定义</span><br><span class="line"></span><br><span class="line">from sqlalchemy.ext.declarative import declarative_base</span><br><span class="line"></span><br><span class="line">Base &#x3D; declarative_base()</span><br><span class="line"></span><br><span class="line">from sqlalchemy import Column, Integer, String</span><br><span class="line">class User(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;users&#39;</span><br><span class="line"></span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String)</span><br><span class="line"></span><br><span class="line">Base.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line">## SA 的新增</span><br><span class="line"></span><br><span class="line">user &#x3D; User()</span><br><span class="line">user.name &#x3D; &quot;123456&quot;</span><br><span class="line">session.add(user)</span><br><span class="line">sessoon.commit() ## 嗯？其实也是对应数据库中的一行。</span><br><span class="line"></span><br><span class="line">## SA 的查询</span><br><span class="line"></span><br><span class="line">session.query(User).filter(User.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题来了，这两者到底是什么，看起来似乎相差不大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line"></span><br><span class="line">    lastname</span><br><span class="line">    firstname</span><br><span class="line">    children</span><br><span class="line"></span><br><span class="line">    # 数据操作</span><br><span class="line">    def findone(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def insert(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def update(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def delete(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # 业务逻辑</span><br><span class="line">    def getChildrenTax(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>lastName firstName numberOfDependents</p><p>insert update delete</p><p>getExemption isFlaggedForAudit getTaxableEarnings</p><p>An object that wraps a row in a database table or view, encapsulates the database access, and adds domain logic on that data.</p><p>The essence of an Active Record is a Domain Model (116) in which the classes match very closely the record structure of an underlying database. Each Active Record is responsible for saving and loading to the database and also for any domain logic that acts on the data. This may be all the domain logic in the application, or you may ﬁnd that some domain logic is held in Transaction Scripts (110) with common and data-oriented code in the Active Record.</p><p>The data structure of the Active Record should exactly match that of the database: one ﬁeld in the class for each column in the table. Type the ﬁelds the way the SQL interface gives you the data—don’t do any conversion at this stage. You may consider Foreign Key Mapping (236), but you may also leave the foreign keys as they are. You can use views or tables with Active Record, although updates through views are obviously harder. Views are particularly useful for reporting purposes.</p><p>objects correspond directly to the database tables: an isomorphic schema. If your business logic is complex, you’ll soon want to use your object’s direct relationships, collections, inheritance, and so forth. These don’t map easily onto Active Record, and adding them piecemeal gets very messy. That’s what will lead you to use Data Mapper (165) instead.</p><p>Another argument against Active Record is the fact that it couples the object design to the database design. This makes it more difﬁcult to refactor either design as a project goes forward.</p><p>Active Record is a good pattern to consider if you’re using Transaction Script (110) and are beginning to feel the pain of code duplication and the difﬁculty in updating scripts and tables that Transaction Script (110) often brings. In this case you can gradually start creating Active Records and then slowly refactor behavior into them. It often helps to wrap the tables as a Gateway (466) ﬁrst, and then start moving behavior so that the tables evolve to a Active Record.</p><p>其实为什么不选择设计成 ActiveRecord , 而是选择设计成 Data Mapper, 其实就可以回答这个问题：</p><blockquote><p>虽然要设计成 ORM, 考虑到数量和性能因素，SQL 数据库（多个表）并不应该是表现像 Object 集合那样（换言之，也就是 AR 表现的像 Object 的集合一样）。<br>同时，出于更好的抽象，object 集合也应该表现的像表以及行</p></blockquote><p>于是我们可以得出结论，可以在 SQLAlchemy 上面进行一定的封装，使得最后用起来非常的 Django ORM like，其实 SQLAlchemy 稍加定制还是可以很 Django ORM-like 的。</p><p>:TODO: 有机会看看那本书再修改一下本小节</p><p>这不，果然有人就这么搞了 <a href="https://github.com/absent1706/sqlalchemy-mixins">https://github.com/absent1706/sqlalchemy-mixins</a></p><h2 id="0x09-踩坑集"><a href="#0x09-踩坑集" class="headerlink" title="0x09 踩坑集"></a>0x09 踩坑集</h2><h3 id="关系持久化坑"><a href="#关系持久化坑" class="headerlink" title="关系持久化坑"></a>关系持久化坑</h3><ol><li>Rows that point to themselves : 比如一个 insert 一个推荐自己的用户，则需要保存 id / ref_id , 但是在这个 user 插入之前，并不存在 id. 所以，一般情况下是先 insert, 然后保存 ref_id</li><li>Mutually Dependent Rows</li></ol><h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><p>session.query(MyClass).filter(“foo={}”.format(getArgs[‘val’]))</p><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul><li><p><a href="https://www.eversql.com/django-vs-sqlalchemy-which-python-orm-is-better/">https://www.eversql.com/django-vs-sqlalchemy-which-python-orm-is-better/</a></p></li><li><p><a href="https://stackoverflow.com/questions/2546207/does-sqlalchemy-have-an-equivalent-of-djangos-get-or-create">https://stackoverflow.com/questions/2546207/does-sqlalchemy-have-an-equivalent-of-djangos-get-or-create</a></p></li><li><p>除了文档本身，作者在 Stack Overflow 上的回答都是非常值得阅读的。<a href="https://stackoverflow.com/users/34549/zzzeek">https://stackoverflow.com/users/34549/zzzeek</a></p></li><li><p>Patterns of Enterprise Application Architecture - Martin Fowler</p></li><li><p><a href="http://aosabook.org/en/sqlalchemy.html">http://aosabook.org/en/sqlalchemy.html</a></p><p>  <a href="http://techspot.zzzeek.org/">http://techspot.zzzeek.org/</a></p></li></ul><hr><p>ChangeLog:</p><ul><li><strong>2018-03-09</strong> 重修文字</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;Python 圈内三大 ORM SQLAlchemy VS Django ORM VS Peewee</summary>
      
    
    
    
    <category term="后端开发" scheme="http://twocucao.xyz/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
    <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
    <category term="RestAPI" scheme="http://twocucao.xyz/tags/RestAPI/"/>
    
    <category term="Flask" scheme="http://twocucao.xyz/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>秒杀系统的一些注意点</title>
    <link href="http://twocucao.xyz/2019/02/10/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>http://twocucao.xyz/2019/02/10/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9/</id>
    <published>2019-02-10T04:17:17.000Z</published>
    <updated>2019-02-10T04:57:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><h2 id="秒杀常见问题"><a href="#秒杀常见问题" class="headerlink" title="秒杀常见问题"></a>秒杀常见问题</h2><h3 id="01-卖超问题"><a href="#01-卖超问题" class="headerlink" title="01 卖超问题"></a>01 卖超问题</h3><p>假设有 20 个商品要卖，1W 个请求打过来。</p><ol><li>SQL 加上数量判断，防止数量超掉</li></ol><p>应用层的检查，并发量上来，肯定要加行级锁，开销比较大。</p><ol start="2"><li>redis 集合预先缓存好相关的数量，然后从 redis 上进行应用层的数量检查。</li></ol><p>然后走异步队列。</p><p>因为对于数据库来说，我只要 20 个请求即可，redis 起到了一个阻挡多余的请求穿透到 DB 中的作用。</p><p>即便如此，redis 依然可能会出现一些意外的情况，比如为负数，这个时候多打进去几个请求，变成 24 个，这个时候 MQ 的作用就出来了。排好队伍。</p><ol start="3"><li>唯一索引</li></ol><p>数据库层的检查，可以从根本上防止问题</p><h3 id="02-缓存问题"><a href="#02-缓存问题" class="headerlink" title="02 缓存问题"></a>02 缓存问题</h3><ol><li>page 级别的缓存，由于 wsgi 协议本身在 flask 中返回的就是文本，所以，当作文本处理即可</li><li>obj 级别的缓存</li></ol><p>能走内存的走内存，能走 redis 就走 redis, 能通过 mq 削减峰值的就走 mq, 能走 mongodb 的走 mongodb, 最后是数据库。</p><h3 id="03-安全"><a href="#03-安全" class="headerlink" title="03 安全"></a>03 安全</h3><ol><li>验证码</li><li>接口防刷限流</li><li>秒杀接口隐藏</li></ol><h3 id="04-分布式锁"><a href="#04-分布式锁" class="headerlink" title="04 分布式锁"></a>04 分布式锁</h3><ol><li>不加锁，并发起来资源浪费</li><li>加锁，然而，线路抖动会导致不能及时释放锁</li><li>加过期锁，或者加带有时间的锁，然后重新获取锁。</li><li>redisson 封装好的方法</li></ol><h3 id="06-减少数据库访问时间"><a href="#06-减少数据库访问时间" class="headerlink" title="06 减少数据库访问时间"></a>06 减少数据库访问时间</h3><ol><li>首先考虑在 where 和 order by 设计的列上建立索引</li><li>索引越多，插入越慢，这个要做好平衡</li><li>避免过长的事务级操作，提高并发能力</li></ol><p>其他的可以参考 MySQL 的一些优化原则，油管上很多。</p><h3 id="07-分布式事务"><a href="#07-分布式事务" class="headerlink" title="07 分布式事务"></a>07 分布式事务</h3><p>分布式事务，准确来说，是分布式</p><h2 id="0xEE-参考"><a href="#0xEE-参考" class="headerlink" title="0xEE 参考"></a>0xEE 参考</h2><h3 id="PEP"><a href="#PEP" class="headerlink" title="PEP"></a>PEP</h3><ul><li><p>PEP 3107</p></li><li><p>PEP 483</p></li><li><p>PEP 3107</p></li><li><p>PEP 3107</p></li><li><p><a href="http://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/">关于 gradual typing</a></p></li></ul><p><a href="https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html">https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html</a></p><p><a href="https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/">https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/</a></p><hr><p>ChangeLog:</p><ul><li><strong>2018-11-25</strong> 初始化本文</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;h2 id=&quot;秒杀常见问题&quot;&gt;&lt;a href=&quot;#秒杀常见问题&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="系统设计" scheme="http://twocucao.xyz/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="Python" scheme="http://twocucao.xyz/tags/Python/"/>
    
    <category term="Java" scheme="http://twocucao.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>旅拍 Vlog CheatSheet</title>
    <link href="http://twocucao.xyz/2018/12/23/VlogCheatSheet/"/>
    <id>http://twocucao.xyz/2018/12/23/VlogCheatSheet/</id>
    <published>2018-12-23T12:44:09.000Z</published>
    <updated>2018-12-23T13:16:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近剪辑了几个 Vlog, 借着这个机会复盘一下几次从拍摄到出片的流程。</p><h2 id="0x01-拍摄准备"><a href="#0x01-拍摄准备" class="headerlink" title="0x01 拍摄准备"></a>0x01 拍摄准备</h2><p>目前笔者的拍摄装备如下：</p><p>主力拍摄器材：</p><ol><li>Sony A6500</li></ol><p>辅助拍摄器材：</p><ol><li>GoPro Hero 7 Black</li></ol><p>相机的设备还氛围 + 三块电池 + 充电宝</p><ol><li>辅助 IPhone 8P</li><li>充电宝</li></ol><h2 id="0x02-工作流"><a href="#0x02-工作流" class="headerlink" title="0x02 工作流"></a>0x02 工作流</h2><p>可以找司机询问最佳的视角</p><h2 id="0xEE-参考"><a href="#0xEE-参考" class="headerlink" title="0xEE 参考"></a>0xEE 参考</h2><hr><p>ChangeLog:</p><ul><li><strong>2018-11-25</strong> 初始化本文</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;最近剪辑了几个 Vlog, 借着这个机会复盘一下几次从拍摄到出片的流程。&lt;/p&gt;
&lt;h2 id=&quot;0</summary>
      
    
    
    
    <category term="写在人生的边上" scheme="http://twocucao.xyz/categories/%E5%86%99%E5%9C%A8%E4%BA%BA%E7%94%9F%E7%9A%84%E8%BE%B9%E4%B8%8A/"/>
    
    
    <category term="随笔" scheme="http://twocucao.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>用 Type Anotation 提升你的 Python 代码健壮性</title>
    <link href="http://twocucao.xyz/2018/12/10/PythonTypeAnotation/"/>
    <id>http://twocucao.xyz/2018/12/10/PythonTypeAnotation/</id>
    <published>2018-12-10T02:32:31.000Z</published>
    <updated>2019-02-16T03:52:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文是《提升你的 Python 项目代码健壮性和性能》系列的第一篇文章。</p><p>本系列仅仅从笔者的项目经历来讲解一些提升代码健壮性的姿势和小技巧。</p><p>本文目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">▼ 0x00 前言 : section</span><br><span class="line">▼ 0x01 Gradual Typing : section</span><br><span class="line">静态类型 VS 动态类型 : section</span><br><span class="line">Gradual Typing &#x3D; 静态类型 + 动态类型 : section</span><br><span class="line">▼ 0x02 Python Typing 实战 - MyPY : section</span><br><span class="line">MyPy : section</span><br><span class="line">快速入门 : section</span><br><span class="line">▼ 0x03 常见问题 : section</span><br><span class="line">如何忽略 mypy 警告 : section</span><br><span class="line">循环导入 : section</span><br><span class="line">0x04 Typing Anotation 项目最佳实践 : section</span><br><span class="line">▼ 0xEE 参考 : section</span><br><span class="line">PEP : section</span><br><span class="line">扩展文章 : section</span><br></pre></td></tr></table></figure><p>当我刚知道 Python 要添加类型的时候，我的内心是拒绝的。</p><p>但是，尝试了俩个疗程之后，腰也不疼了，腿也不疼了，走起路来都有劲了，嗯，真香。</p><p>为啥需要 Type Anotation?</p><p>因为软件开发需要协作，动态类型给人极大的灵活性，写的时候很爽，但如果解放了双手，撸起袖子一通写，自己写起来爽了，自己重构的时候或者其他人来看代码的时候，头发就会加速掉落。</p><p>加了 Typing 能解决这个问题嘛？不能，但适当的使用可以极大的提升代码的健壮性。</p><p>在如下的场景中，Typing 可以发挥作用</p><ol><li>在程序运行前进行类型检查</li><li>提供 typing 信息，当然，这带来的另一个巨大的优点就是让 IDE 可以分析出函数的参数类型以及返回值</li></ol><p>这样大大提升了代码量上来之后的类型检查不足带来的返工问题。</p><h2 id="0x01-Gradual-Typing"><a href="#0x01-Gradual-Typing" class="headerlink" title="0x01 Gradual Typing"></a>0x01 Gradual Typing</h2><p>在你刚入门一门编程语言的时候，我们常常说，Java 是强类型（静态类型）语言，Python 是弱类型（动态类型）语言</p><p>从这两位诞生开始，静态类型和动态类型就一直进行旷日持久的圣战。</p><p>然而，而现在的发展趋势是：</p><ul><li>静态类型的语言觉得自己太过静态，以至于写起来很啰嗦。于是引入了很多类型推断。 Java / Go</li><li>动态类型的语言觉得自己太过动态，以至于协作的过程中总是出现低级错误。于是引入了 Gradual Typing , Typescript / Flow / Python Type Annotation</li></ul><p>什么是 Gradual Typing?</p><p>Gradual typing 允许开发者仅在程序的部分地区使用 Annotate/Type. 即，既不是黑猫（静态）, 也不是白猫（动态），从而诞生了熊猫（动静结合）。</p><p>话说回来，要知道为什么这么搞，首先要知道动态类型和静态类型会给程序带来什么。</p><h3 id="静态类型-VS-动态类型"><a href="#静态类型-VS-动态类型" class="headerlink" title="静态类型 VS 动态类型"></a>静态类型 VS 动态类型</h3><p>静态类型的语言，比如在写 Java 的时候，如果你把一个 int 赋值给了 string 的变量，IDE 会通过<strong>类型检查器</strong>立即报错并告诉你，你这个值赋值错啦。这个就是 Java 程序的检查阶段。<br>动态类型的语言，比如在写 Python 的时候，如果不用一些额外的手段，这种低级的错误，并不会在检查时爆出来，只会在运行时爆出来。如果线上还是出这个问题，就蛋疼了。</p><p>为了进行友好的讨论，本人将精分成 Javaer 和 Pythonist, 通过两人对话的方式，来讨论类型。</p><ul><li><p>Javaer: 我先喝杯咖啡</p></li><li><p>Pythonist: 生命苦短，我用 Python。</p></li><li><p>Javaer: P 哥，请（为什么叫 P 哥？Python 1989 年出生，Java 1995 年）</p></li><li><p>Pythonist: J 弟，请</p></li><li><p>Javaer: 静态类型可以较低成本的提早捕获 BUG, 比如：</p><ol><li>你在写 Python 的时候，如果不用一些额外的手段，这种低级的错误，并不会在检查时爆出来，只会在运行时爆出来。</li><li>如果线上还是出这个问题，就蛋疼了。我这个类型检查可以在<strong>使用 IDE 的时候给我分析出方法参数的类型和返回值</strong>。所谓『上医治未病，中医治已病，下医治大病』, 防范于未然，善之善者也。</li></ol></li><li><p>Python: 等等，你小子还广征博引了还，首先，提早捕获 Bug, 我这里也有呀，比如我这里可以通过 flake8 来检查出有些没有定义的变量，<strong>仅仅是类型没有检查而已</strong>。其次，IDE 给我的补全又不是完全无法补全。弱一点罢了。你说的类型检查的问题：</p><ol><li>可以通过<strong>提升程序员的素质</strong>来解决这个问题，或者让他们长点脑子，别特么在这种低级错误上犯错误。</li><li>写测试来<strong>提升测试代码的代码覆盖率</strong>（这个我会在本系列的第二篇文章里深入讲解）来解决这个问题</li><li>看看写的代码检查时出现问题，我完全可以<strong>把代码拖到 IPython 里面跑一遍</strong>。这可不仅仅能解决类型不正确带来的问题，还能快速解决代码的逻辑问题</li></ol></li><li><p>Java: 关于你说的第三点，我完全可以提升测试代码的覆盖率。哎？似乎我这个开发测试成本也上来了。看来<strong>类型检查也不能解决这个问题</strong></p></li><li><p>Javaer: 来 P 哥</p><ol><li>静态类型确实以<strong>较低的成本</strong>解决了这种类型的问题，不是么？</li><li>并且，如果我其中一小块功能进行了修改，我总不能每次都跑 IPython 吧？我也不能因为想检查一下类型这种小操作就写测试代码覆盖一下？</li></ol></li><li><p>Python: 你每次修改，都要加类型，加类型，改类型，直到类型检查器完全接受。不麻烦嘛？面向类型检查器编程？</p></li><li><p>Javaer: 来，</p><ol><li>每次改代码的时候，又不是改一大推，你是小部分改的，能有多少项目是海量海量改？高内聚，低耦合，模块化开发。</li><li>好的代码是重构出来的，修改你的类型来让类型检查器通过。你的代码会被更好的组织起来。</li><li>我大 Java 就是面向重构的语言！我有 Jetbrain 的 IDE, 重构代码我怕谁</li></ol></li><li><p>Python: 来，你说的没错，</p><ol><li><strong>每次改代码的时候，又不是改一大推，你是小部分改的</strong>。这话你说的没错，我也能用啊，因为代码总是一小部分一小部分改的，所以，改完了跑一下 IPython 就结了。</li><li>好的代码是重构出来的，修改你的类型来让类型检查器通过。你的代码会被更好的组织起来。这话你说的也没错，可<strong>我重构的时候没有写测试就重构</strong>，是不是有点莽撞？写了测试了，我还要花时间在类型检查器上，不啰嗦么？</li><li>我也有 Jetbrain 的 IDE, 重构代码我又不是不能重构。</li></ol></li><li><p>Python: 再来，</p><ol><li>需求变更上来了，结果往往会出现，你本来是想专注于业务逻辑的更改的，但最后变成了大型<strong>为了让类型检查器通过类型检查而艰苦奋斗的现场</strong>, 我这个场景直接传 int/str/ 字典 / 传对象就很方便，你非要让我写四个函数来 override 方法。</li><li>虽然说，好代码确实可以通过重构出来，但动态语言表达能力强呀，你 Java HashMap 啰啰嗦嗦 put 写了半天，我 Python 一个 Dict 一把梭，看起来，清晰，改起来方便。</li></ol></li></ul><p>再比如说，</p><p>LeetCode 上面有一道题目，叫做最长连续 1</p><p>Input 是 [1,1,0,1,1,1] Output 是 3</p><p>我们尝试用 Python 来看下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_max_consecutive_ones</span>(<span class="params">num</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x), <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> nums]).split(<span class="string">&#x27;0&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>我们尝试用 Java 来看下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] == <span class="number">0</span>)</span><br><span class="line">tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tmp += <span class="number">1</span>;</span><br><span class="line">result = Math.max(tmp, result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Javaer: 啊咧？P 哥你确实有点短啊！</li><li>Pythonist: 你敢说我短？你看看 java 的创始人的头发！</li></ul><p>『贴图』</p><ul><li><p>Javaer: 我不是那个意思，浓缩就是精华嘛，表达能力弱又怎么样，我 Javaer 可以直接封装好这个功能当成工具类用，从外部使用上用起来差不多好吧，从项目角度表达力并不是决定性因素，静态类型检查可以提早在编译阶段做字节码优化。你的 GIL…</p></li><li><p>Pythonist: 好了，咱就不要提 GIL 了</p></li><li><p>Pythonist: 动态类型不需要花时间写 type annotation, 写起来速度杠杠的。</p></li><li><p>Javaer: 静态语言一时爽，动态类型火葬场好伐？举个例子，太动态的东西，就是不好做类型推断，比如贵圈的著名的 sqlalchemy 做的那么动态，query.get() 结合 flask 来用，YouModel.query.get() 出来的 YouModel 你还要点进去查看一下具体属性，你要用 title 还是 name, 拼错了，怎么办？都不报错的。</p></li><li><p>Javaer: 静态类型迫使你思考程序的时候更加严谨认真，这将会提升你的代码质量。</p></li><li><p>Pythonist: 这点我是不服的，你只是花费了大量的时间在类型检查上，写的认不认真不完全取决于你编程的水平和态度好伐？假如你的观点成立，语言只是武器，峨眉师太拿一把倚天剑，不还是被张三丰空手取来？</p></li><li><p>Javaer: 但你不能否认，峨眉师太拿着倚天剑确实可以秒杀很多人。</p></li></ul><blockquote><p>旁白君：有道是，梅须逊雪三分白，雪却输梅一段香。</p></blockquote><ul><li>Guido van Rossum: 好了，我觉得类型不错，我在 dropbox 带领团队实现了 python 的 typing，python 3.7 内置哦。</li><li>Pythonist: 我自己打脸一下，动态类型花点时间写 type annotation 代码健壮性杠杠的。</li><li>Javaer: 你走开… 你怎么不去解决 GIL 的问题。</li></ul><h3 id="Gradual-Typing-静态类型-动态类型"><a href="#Gradual-Typing-静态类型-动态类型" class="headerlink" title="Gradual Typing = 静态类型 + 动态类型"></a>Gradual Typing = 静态类型 + 动态类型</h3><p>Gradual Typing 就是在动态语言的基础上，增加了可选的类型声明 (Type Annotation)</p><p>这对于我这种人是福音，</p><p>对于我个人而言，我是希望 Python 是有类型的</p><ol><li>作为某段程序的开发者和维护者，我可以提升我重构的速度。</li><li>作为某段程序的调用方，可以快速的知道我调用后得到的东西究竟是什么。</li></ol><p>但我又不希望这个声明不是强制性的</p><ol><li>我在构思程序的时候，想专注于接口的设计。在落实编码并且把代码写的足够的 dry 之后，在被调用的一些地方加上类型声明，这样可以提升我写代码的速度。</li></ol><h2 id="0x02-Python-Typing-实战-MyPY"><a href="#0x02-Python-Typing-实战-MyPY" class="headerlink" title="0x02 Python Typing 实战 - MyPY"></a>0x02 Python Typing 实战 - MyPY</h2><h3 id="MyPy"><a href="#MyPy" class="headerlink" title="MyPy"></a>MyPy</h3><p>mypy 是一个可选的静态分析器，官网介绍上说，mypy 将使你的程序更加易懂，调试和维护。</p><p>这个程序</p><ul><li>对于 PHP 有 Hack , 对 JavaScript 有 Flow 和 TypeScript, 对于 Python 有 MyPy</li><li>对于 Python, 则有 MyPy , MyPy 彼时还不是很成熟 (2016 年 10 之前）。</li></ul><p>Dropbox 的团队开发，Guido van Rossum 领导开发</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>本小节部分摘录 Type hints cheat sheet</p><p>建议读者收藏原网址 <a href="https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html">https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内置类型</span></span><br><span class="line">x: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">x: <span class="built_in">float</span> = <span class="number">1.0</span></span><br><span class="line">x: <span class="built_in">bool</span> = <span class="literal">True</span></span><br><span class="line">x: <span class="built_in">str</span> = <span class="string">&quot;test&quot;</span></span><br><span class="line">x: <span class="built_in">bytes</span> = <span class="string">b&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line">child: <span class="built_in">bool</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    child = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    child = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stringify</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; str:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; Iterable[int]:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>直接看起来似乎，加不加 typing 对现在的代码改善并不是很明显嘛。</p><p>我们可以给复杂类型起别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">比如：</span><br><span class="line">def f() -&gt; Union[List[Dict[Tuple[int, str], Set[int]]], Tuple[str, List[str]]]:</span><br><span class="line">def b() -&gt; Union[List[Dict[Tuple[int, str], Set[int]]], Tuple[str, List[str]]]:</span><br><span class="line"></span><br><span class="line">AliasType &#x3D; Union[List[Dict[Tuple[int, str], Set[int]]], Tuple[str, List[str]]]</span><br><span class="line">def f() -&gt; AliasType:</span><br><span class="line">    ...</span><br><span class="line">def b() -&gt; AliasType:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>看起来还行，但还是没有感觉到很明显的代码质量改善。</p><p>好，再看一例，使用 ClassVar 禁止属性无法在实例上设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from typing import ClassVar</span><br><span class="line"></span><br><span class="line">class A:</span><br><span class="line">    x: ClassVar[int] &#x3D; 0  # Class variable only</span><br><span class="line"></span><br><span class="line">A.x +&#x3D; 1  # OK</span><br><span class="line"></span><br><span class="line">a &#x3D; A()</span><br><span class="line">a.x &#x3D; 1  # Error: Cannot assign to class variable &quot;x&quot; via instance</span><br><span class="line">print(a.x)  # OK -- can be read through an instance</span><br></pre></td></tr></table></figure><p>举个例子，flask-sqlalchemy, 可以通过 YouModel.query.get(id) 来拿到 YouModel 的实例，但 IDE 不能推断出这个实例是什么。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 方法一，Cast</span><br><span class="line">you_model_ins: YouModel &#x3D; YouModel.query.get(id)</span><br><span class="line"># 方法二，包装一下 get 方法</span><br><span class="line"></span><br><span class="line">class YouModel(base):</span><br><span class="line">def get(id) -&gt; &quot;YouModel&quot;: # 注意这里的字符串</span><br><span class="line">pass</span><br><span class="line">you_model_ins &#x3D; YouModel.get(id)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>细心的读者可能看到这里的 YouModel 的返回值类型居然使用了 YouModel 的字符串，如果是 Java 的话，是可以直接写 YouModel 的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 加上类型延迟求值</span><br><span class="line">from __future__ import annotations</span><br><span class="line"></span><br><span class="line">class YouModel(base):</span><br><span class="line">def get(id) -&gt; YouModel:</span><br><span class="line">pass</span><br><span class="line">you_model_ins &#x3D; YouModel.get(id)</span><br></pre></td></tr></table></figure><p>还有其他的用法，请参考 MyPY 的官方文档</p><h2 id="0x03-常见问题"><a href="#0x03-常见问题" class="headerlink" title="0x03 常见问题"></a>0x03 常见问题</h2><h3 id="如何忽略-mypy-警告"><a href="#如何忽略-mypy-警告" class="headerlink" title="如何忽略 mypy 警告"></a>如何忽略 mypy 警告</h3><p>有的地方的代码不进行检查的话会方便很多。</p><p>与 flake8 类似，在注释后面写上标志就可以忽略了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youcode  # type: igonre</span><br></pre></td></tr></table></figure><h3 id="循环导入"><a href="#循环导入" class="headerlink" title="循环导入"></a>循环导入</h3><p>我现在有两个文件，一个是 user.py 另一个是 order.py</p><p>在 user 里面有个方法需要返回 order 里面的 Order 列表，order 里面有个 order.owner 需要返回 User 实例。</p><p>如果不用类型声明的话，在 user 需要 order 的时候 import 进来即可规避循环导入。</p><p>在使用类型声明之后，建议在 user 里面这么写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if TYPE_CHECKING:</span><br><span class="line">    from project.models.order import Order # noqa</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x04-Typing-Anotation-项目最佳实践"><a href="#0x04-Typing-Anotation-项目最佳实践" class="headerlink" title="0x04 Typing Anotation 项目最佳实践"></a>0x04 Typing Anotation 项目最佳实践</h2><p>通过本文了解了基本的 Typing Anotation 的用法，其实效果还不够，本着对爱学习的读者老爷的负责的态度。</p><p>所谓『纸上得来终觉浅，绝知此事要宫刑』, 哦不『躬行』</p><p>推荐一个超级牛的大项目来让大家了解一下 typing annotation 的最佳实践。</p><p><a href="https://github.com/zulip/zulip/">https://github.com/zulip/zulip/</a></p><p>当然，从这个项目里面不仅仅能学到 typing annotation, 还能学到大项目下，牛 X 的公司的做法</p><ol><li>如何组织和划分模块</li><li>如何帮助开发者快速启用开发环境。</li><li>如何做测试，如何做 CI</li><li>如何优化自己的 Workflow</li></ol><p>有机会的话，我会挑其中的一小部分讲解一下。</p><h2 id="0xEE-参考"><a href="#0xEE-参考" class="headerlink" title="0xEE 参考"></a>0xEE 参考</h2><h3 id="PEP"><a href="#PEP" class="headerlink" title="PEP"></a>PEP</h3><ul><li>PEP 3107</li><li>PEP 483</li></ul><h3 id="扩展文章"><a href="#扩展文章" class="headerlink" title="扩展文章"></a>扩展文章</h3><ul><li><a href="http://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/">关于 gradual typing</a></li><li><a href="https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html">https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html</a></li><li><a href="https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/">https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/</a></li><li><a href="https://www.zhihu.com/question/21017354/answer/589574939">https://www.zhihu.com/question/21017354/answer/589574939</a></li></ul><hr><p>ChangeLog:</p><ul><li><strong>2018-11-25</strong> 初始化本文</li><li><strong>2019-02-16</strong> 重新整理文章</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文是《提升你的 Python 项目代码健壮性和性能》系列的第一篇文章。&lt;/p&gt;
&lt;p&gt;本系列仅仅从</summary>
      
    
    
    
    <category term="Python 黑魔法" scheme="http://twocucao.xyz/categories/Python-%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
    
    <category term="Python" scheme="http://twocucao.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Final Cut Pro X CheatSheet</title>
    <link href="http://twocucao.xyz/2018/11/25/FinalCutProX/"/>
    <id>http://twocucao.xyz/2018/11/25/FinalCutProX/</id>
    <published>2018-11-25T02:01:06.000Z</published>
    <updated>2018-12-23T12:43:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文诞生于用 Final Cut Pro X 剪了几次视频之后的复盘总结</p><p>部分内容来自于</p><ul><li>Final Cut Pro X 10.1 非线性编辑高级教程</li><li>Final Cut Pro X 影视包装剪辑完全自学教程</li></ul><h2 id="0x01-剪辑流程"><a href="#0x01-剪辑流程" class="headerlink" title="0x01 剪辑流程"></a>0x01 剪辑流程</h2><p>所有的剪辑流程都是想法的具体实现，这意味着在剪辑之前，需要做好前期准备</p><pre><code>1. 确定大致思路2. 调好参数摄影</code></pre><p>然后</p><ol><li>素材导入</li><li>片段整理</li><li>前期剪辑</li><li>精剪</li><li>分享</li></ol><h2 id="0x01-前期准备"><a href="#0x01-前期准备" class="headerlink" title="0x01 前期准备"></a>0x01 前期准备</h2><p>本文复盘的是古墓丽影暗影假预告片剪辑。</p><p>热血的预告片通常具有如下的特征：</p><ol><li>有一条主线，但不剧透，通常这个主线往往是有人在说话，引出了整个故事</li><li>霸气磅礴的背景音乐</li><li>频繁而不冗余的镜头切换</li><li>踩节奏踩的非常精准</li></ol><h2 id="0x02-素材导入"><a href="#0x02-素材导入" class="headerlink" title="0x02 素材导入"></a>0x02 素材导入</h2><ol><li>建立 Library 游戏</li><li>建立 Event 古墓丽影暗影，导入游戏视频</li><li>建立 Project 古墓丽影暗影盗梦空间预告片</li></ol><p>素材导入没什么好说的，因为 PS4 里录制成什么样子，就是什么样子。</p><p>开启转码和分析的话，可以分析出更多的片段类型。</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>建议开启『创建优化的媒体』</li><li>看存储情况如果存储不是很足的话，开启『创建优化的代理文件』</li></ul><p>尽量将素材管理的任务交给 FCPX 来做，所以，如果可能的话，直接拷贝进资料库最好。</p><p>对于个人剪辑的话，比较适合两个 Library, 即一个常用 Library, 另一个是本项目的 Library 当然，其实也可以</p><h2 id="0x03-片段整理"><a href="#0x03-片段整理" class="headerlink" title="0x03 片段整理"></a>0x03 片段整理</h2><p>对于不同类型的影片，需要不同类型的整理方式</p><ol><li>对于预告片来说，两三秒的镜头可以带出大量的信息，引人遐想。</li><li>而对于普通综艺 / 电视剧 / 电影来说，如果遵循着预告片的节奏的话，则会交代不清楚事情。</li></ol><p>对于预告片来说，就仅仅剩下挑选中上片段这一个选项了。</p><ol><li>快速浏览片段内容</li><li>挑选片段里面的片段打上关键字</li><li>进入了某个关键字的视频列表，对它进行评价 (f/u/del)</li></ol><p>快速浏览</p><ol><li>FCPX 提供了缩略图模式，可以按 1s/5s/10s 的间隔显示视频内容，合理使用的话，可<br>以达到事半功倍的效果。</li><li>善用 jkl 快速浏览视频</li></ol><p>打关键字</p><ol><li>调出关键词管理器，然后设置关键词的快捷键，FCPX 可以快速选中一个片段中的片段（也可以通过 i/o 快捷键进行选择），选择 ctrl + num 打一个关键字。</li><li>这里也不需要把关键词的片段弄的特别的精准。因为其实放到视频里面还是可以前后拖拽的。（这只是个浅拷贝）</li></ol><p>评价系统</p><p>嗯？上了关键字的都是不错的镜头，似乎评价体系就没那么重要了</p><p>经过这些操作，之后，可以快捷的进行搜索。筛选出自己需要的片段。</p><p>嗯，由于项目本身并不算复杂。就关键字一波流搞定好了。</p><p>当然，题外话，如果我后期会基于这些素材做很多其他的事情的话，我就会认真的重新给片段<br>划分精细的关键字。</p><h2 id="0x04-前期剪辑"><a href="#0x04-前期剪辑" class="headerlink" title="0x04 前期剪辑"></a>0x04 前期剪辑</h2><p>笔者遇到的剪辑基本分为两种：</p><ol><li><p>踩情节类型</p></li><li><p>踩节奏类型</p></li><li><p>踩情节类型的剪辑只需要往上怼素材，然后依据磁力线调整即可。比如采访类，比如综艺。</p></li><li><p>踩节奏类型的剪辑这比较繁琐，因为要不断的增加，修改，删除片段。</p></li></ol><p>本次的剪辑就遇到了这个偏移问题，对于音乐的几个转节奏的地方，把视频 / 字幕放在磁力线上，删掉调整节奏前的片段，则导致后面的片段发生偏移。</p><p>为了解决偏移带来的踩节奏问题：</p><ol><li>设定一个标尺，奈何 FCPX 没有这个概念。于是，我采用了通过字幕来进行项目骨架的构建和注释。在音频的关键的地方，Marker 来注释.（经过仔细思考后，我认为可以弃用字幕的方式了，直接加一个调整层，在调整层上做 marker 来注释就好了）</li><li>当我要先空着预告片的前面，直接到后面编辑需要踩节奏的点位，则先 Q 放一个片段到这个踩节奏的点，然后创建故事线。在故事线里调整完毕之后，合并到主线上。</li><li>当我现在转到前面进行编辑的时候，Q 放一个片段到这个踩节奏的点，然后创建故事线，同上。</li><li>当我需要修改的时候把多个视频片段提出来，在视频上方调整好片段，合并到主线上。</li></ol><p>于是，骨架搭好，进入精细剪辑阶段吧。</p><h2 id="0x05-精细剪辑"><a href="#0x05-精细剪辑" class="headerlink" title="0x05 精细剪辑"></a>0x05 精细剪辑</h2><p>在精细剪辑的时候，记得先复制当前项目的一个快照。给快照名称升级个版本。</p><h3 id="5-1-调整片段"><a href="#5-1-调整片段" class="headerlink" title="5.1 调整片段"></a>5.1 调整片段</h3><ol><li>视频长度太长可以剪掉 (B)</li><li>速度过快过慢可以调整速度 (cmd+r)</li><li>滑动编辑 (Trim)</li><li>1 时间范围对了，似乎需要该片段的更前或者更后的部分.(T trim 一下） PS: 可以搭配 Marker 在细节上踩节奏。</li><li>2 片段和片段之间需要前面少点，后面多点 (T trim 一下）</li><li>移动故事线的片段而不发生位移 (postion 拖动 / lift + select 拖动）</li></ol><p>PS: 调整速度上 blade speed 是个利器</p><h3 id="5-2-调整效果"><a href="#5-2-调整效果" class="headerlink" title="5.2 调整效果"></a>5.2 调整效果</h3><h4 id="色彩改变-调色"><a href="#色彩改变-调色" class="headerlink" title="色彩改变 - 调色"></a>色彩改变 - 调色</h4><ol><li>苹果自带了平衡颜色。</li><li>手动调整</li></ol><h4 id="画面聚焦-晕影"><a href="#画面聚焦-晕影" class="headerlink" title="画面聚焦 - 晕影"></a>画面聚焦 - 晕影</h4><h4 id="关键帧动画"><a href="#关键帧动画" class="headerlink" title="关键帧动画"></a>关键帧动画</h4><h3 id="5-3-调整转场"><a href="#5-3-调整转场" class="headerlink" title="5.3 调整转场"></a>5.3 调整转场</h3><p>少用转场，尽量保持转场的一致性。</p><h3 id="5-5-调音"><a href="#5-5-调音" class="headerlink" title="5.5 调音"></a>5.5 调音</h3><h2 id="0x06-分享文件"><a href="#0x06-分享文件" class="headerlink" title="0x06 分享文件"></a>0x06 分享文件</h2><ol><li>直接输出 cmd + e</li><li>调用 Compressor 制定更多的输出规则</li></ol><h3 id="分享技巧"><a href="#分享技巧" class="headerlink" title="分享技巧"></a>分享技巧</h3><ol><li>素材很重要 – 『保留 Library』</li><li>作品已定型 – 『输出模板文件』</li><li>Compressor – 输出多格式的文件</li></ol><h2 id="0x07-其他"><a href="#0x07-其他" class="headerlink" title="0x07 其他"></a>0x07 其他</h2><h3 id="7-1-插入的四种方式"><a href="#7-1-插入的四种方式" class="headerlink" title="7.1 插入的四种方式"></a>7.1 插入的四种方式</h3><ol><li>连接：放置在磁力线上方，磁力线上方可以使用 N 进行片段之间的吸附</li><li>插入</li><li>追加</li><li>覆盖</li></ol><p>当 range 选中在主故事线选中时间范围内的话，可以插入某个时间段的视频</p><h3 id="7-2-提升格调"><a href="#7-2-提升格调" class="headerlink" title="7.2 提升格调"></a>7.2 提升格调</h3><p>提升格调的两种方法：</p><ol><li>镜头感</li><li>电影感</li></ol><h2 id="0xEE-参考"><a href="#0xEE-参考" class="headerlink" title="0xEE 参考"></a>0xEE 参考</h2><hr><p>ChangeLog:</p><ul><li><strong>2018-11-25</strong> 初始化本文</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文诞生于用 Final Cut Pro X 剪了几次视频之后的复盘总结&lt;/p&gt;
&lt;p&gt;部分内容来自</summary>
      
    
    
    
    <category term="写在人生的边上" scheme="http://twocucao.xyz/categories/%E5%86%99%E5%9C%A8%E4%BA%BA%E7%94%9F%E7%9A%84%E8%BE%B9%E4%B8%8A/"/>
    
    
    <category term="随笔" scheme="http://twocucao.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Thinking In Programming Language</title>
    <link href="http://twocucao.xyz/2018/09/17/ThinkingInProgrammingLanguage/"/>
    <id>http://twocucao.xyz/2018/09/17/ThinkingInProgrammingLanguage/</id>
    <published>2018-09-17T02:42:25.000Z</published>
    <updated>2018-11-13T02:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>笔者对于涉猎的语言都是草草了解，深入不敢谈。能用罢了。</p><p>即便是用过几种语言，得出的经验依然是片面的。</p><p>很多人得出一些结论，往往是样本就一个。比如说一个只用过 PHP 的人叫嚣 PHP 是最好的语言。</p><p>所以，我得出的结论，不过是一家之言罢了。</p><p>本文文章就是总结一下，我使用的一些语言的经验，我整理出一个大致的框架，方便我以后切换到其他编程语言可以更顺滑一些。</p><h2 id="0x01-语言胡论"><a href="#0x01-语言胡论" class="headerlink" title="0x01 语言胡论"></a>0x01 语言胡论</h2><p>在我看来，一个人说他会且只精通一门编程语言是很让我不能理解的事情，在我看来，什么编程语言框架上手两三天就能去写，但是这严格意义上应该叫做能用，和精通相差甚远。那是不是说写的时间长的人经验就老道了呢？也不见得。下棋下了一辈子是烂棋篓子的人比比皆是。</p><p>那我认为什么样子的人才是懂写代码的人。</p><pre><code>拥有良好的组织代码的能力的人。</code></pre><p>恩，组织代码的能力，一个文件排布混乱的人，不太可能写出整齐严谨的代码，当然，人也可能是复杂的，比如，这个人写的代码挺好，但是生活住处一团糟。</p><p>当然这是题外话了，依个人经验而言，学习任何一个复杂的系统，也需要像组织一个东西一样，系统性的学习。</p><p>系统化的东西往往像《如何阅读一本书》里面描述一本书的复杂架构那样。</p><pre><code>没有一种物质或产品是绝对简单的。所有的东西都是复杂的组合体。当你看一个整体组成复杂的东西的时候，如果只看它如何呈现一体的面貌，那是还没有掌握精髓，你还必须要明白它怎样呈现多个的面貌，但不是各自为政、互不相干的多个面貌，而是互相融合成有机体的多个面貌。如果组成的各个部分没有有机的关联，仅仅是一个集合体罢了。这就像是一堆砖头跟一栋又砖头建造起来的房子是有区别的。而单一的房子与建造的房子也不相同。一本书就像是一栋单一的房子。一栋大厦，拥有许多房间，每层楼都有房间，有不同的尺寸和形状，不同的外观，不同的用途，这些房间是独立的，分离的，每个房间都有自己的架构和装潢设计，但却不是完全独立与分离的，这些房间使用普通门 / 拱门 / 走廊 / 楼梯串联起来的，即建筑师错位的动线架构，因为这些架构师彼此联结的，因此每一个部分在整体的使用功能上要贡献出自己的力量。否则这栋房子便是不适合居住的。</code></pre><h3 id="独一无二"><a href="#独一无二" class="headerlink" title="独一无二"></a>独一无二</h3><p>有的人认为所有的编程语言都是一样的。</p><p>依我看，所有的编程语言都是有特点的，也是有优缺点的。</p><p>举一个我朋友的爱说的很粗俗的例子：</p><pre><code>虽然说关了灯全都一个样，但是每一个女孩子都有是独一无二的存在。</code></pre><p>编程语言也是一样。</p><ul><li>有的偏向于运行效率，有的偏向于开发效率。</li><li>有的据说是让人编程时候感到快乐 (ruby)，有的说你生命苦短，为什么不用 Python。</li><li>有的偏向于 Web 开发 (PHP)，有的偏向于并发操作</li><li>有的是 Windows 上面自动化的小白工具 (Autohotkey)</li><li>有的是据说是一次编译，到处运行 (Java)</li><li>有的是亲妈平台万金油 (C#), 当然，最近也在亲妈的带领下往其他方向前进了。</li></ul><p>编程语言往往是上面这些因素的取舍。</p><ul><li>你要运行效率，往往开发效率就会打折。</li><li>你要开发效率，往往就需要堆更多的机器来提升性能。</li><li>你要充分利用某个平台，往往就没有极高兼容性。</li><li>你要编程语言帮你处理掉不需要考虑的问题，有的程序员就站出来了，你是不相信我控制<br>  内存的能力么？</li></ul><p>有的语言生态好，比如 对于我定位于全栈工程师（其实是全干工程师）的程序员来说：</p><p>  文能写虫爬数据<br>  武能后端写网站<br>  进能数据搞 AI<br>  退能机器跑运维</p><p>十八般武艺武艺样样稀疏的 API 搬运工，那，那就 Python 好了。你还要啥自行车？</p><h2 id="0x02-语言的工具链"><a href="#0x02-语言的工具链" class="headerlink" title="0x02 语言的工具链"></a>0x02 语言的工具链</h2><p>工欲善其事必先利其器</p><h3 id="编辑器-amp-amp-IDE"><a href="#编辑器-amp-amp-IDE" class="headerlink" title="编辑器 &amp;&amp; IDE"></a>编辑器 &amp;&amp; IDE</h3><p>大学里有个老师喜欢用 Notepad 手撸 Pascal 代码，然后拖到 IDE 里面运行。</p><p>集成开发环境 (IDE) = 编辑器 + 编译器 + 构建系统 + 调试 + 其他编辑提升（补全，重构，格式化）</p><p>到底是 IDE 好，还是 Editor 好。其实你看到这里就差不多明白了。一般情况下，选择<br>JetBrain 的 IDE 总是没问题的。</p><p>那么什么情况下，会选择编辑器呢？</p><p>多个</p><p>对于，这个经典的问题，可以这么回答：抓到好猫的猫，你管他是黑猫还是白猫。</p><p>那么，这个问题就变成了另一个问题。编辑器或者 IDE 可以满足我当前的开发工作流么？</p><h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><p>那么，我们从编辑器 + 集成环境</p><ul><li>Mac Homebrew</li><li>开发环境里面的 shell</li><li>cmake</li></ul><h2 id="0x03-语言的学习资源"><a href="#0x03-语言的学习资源" class="headerlink" title="0x03 语言的学习资源"></a>0x03 语言的学习资源</h2><p>官网的文档是最应该反复查看的东西，这是我现在依然喜欢强调的。</p><p>而官网的文档也分为四种</p><ul><li>一种是 tutorial      – 用于<strong>上手</strong>对应的软件 / 编程语言</li><li>一种是 guide         – 用于** Topic Reading **</li><li>一种是 api document  – 用于<strong>查看细节</strong></li><li>一种是 RTFSC ( Read The Fucking Source Code ) 阅读源码</li></ul><blockquote><p>注：把 StackOverFlow 中某个标签的 Most Votes 的答案，是除了大略看看 tutorial 之外的另一种快速熟悉入门时候的痛点的手段。</p></blockquote><p>当然，其实代码写的足够好的话本身就是一种注释。</p><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><p>社区一般情况下都会有的，但有几个网站特别值得提出来</p><ul><li>官网上一般都会放一些比较出色的社区</li><li>Github</li><li>reddit</li><li>某个技术对应的 Weekly 订阅</li></ul><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><p>特别值得一提的是有一个持续不断阅读到有趣的文章的方法：</p><ol><li>Google 出对应的 书 / Weekly 周报 / 博客，比如 Python Weekly 然后订阅</li><li>接着不断的查看列入优质文章的作者的文章，Github 地址啦，他关注的 Repo 啦等等等等。</li><li>然后去阅读他的代码 / 博客。</li></ol><h2 id="0x04-基础概念"><a href="#0x04-基础概念" class="headerlink" title="0x04 基础概念"></a>0x04 基础概念</h2><blockquote><p> 程序 = 算法 + 数据结构</p></blockquote><p>这句话当然是不全面的，这句话经典就经典在高度概括了程序中算法和数据结构的重要性，但并不影响这句话在计算机世界里面的地位。</p><p>依我看来，对我的启发是：</p><blockquote><p>我会把 API 的调用和数据结构以及算法想清楚，然后才动手把代码分解成伪代码。最后写成代码。</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>按照复杂性可划分为：</p><ul><li>简单类型</li><li>复杂类型</li></ul><p>按照复杂性可划分为：</p><ul><li>基本类型</li><li>引用类型</li></ul><p>按照数据结构可划分为：</p><ul><li>集合结构 : 串</li><li>线性结构 : 线性表 （单链表，静态链表，循环链表，双向链表，<strong>栈，队列</strong>)</li><li>树形结构 : 树（二叉树，B+ 树，红黑树）</li><li>图形结构 : 图</li></ul><p>对于一些基本的数据类型，操作为 加减乘除取余数位运算等等</p><p>对于复杂的一些数据类型，则需要对数据结构多一些了解。</p><p>比如，对队列而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对 hash 而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字典而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>比如，对字符串而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？</p><p>那字符串来说，Java 推荐使用 StringBuilder 来合并多个字符串，Python 推荐 join 多个字符串等等。</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ul><li><p>声明语句</p></li><li><p>赋值语句</p></li><li><p>条件语句</p><ol><li>判断的时候不确定操作符优先级的时候，加括号</li><li>尽量显式判断，不要用隐式判断。</li></ol></li><li><p>循环语句</p><ol><li>Break 和 Continue</li></ol></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li>传值还是传引用</li><li>参数</li></ol><p>函数或者叫做方法，叫法不同。</p><p>函数，我有个很私人的称呼，称它为最小操作模块。</p><p>实际上，在编程的过程中，程序员用面向对象的思想进行编码的人可能真的不是很多。把一段长程序按照自己的需求进行切分成若干个函数的倒是比比皆是。</p><p>不过按照什么样子的标准来切分一段程序为多个函数，仁者见仁智者见智。</p><p>这里面需要注意的事情是：</p><ul><li><ol><li>注意传值（基本类型）和传引用（引用类型）</li></ol></li><li><ol start="2"><li>函数重载</li></ol></li></ul><p>对于不同的编程语言，传值（基本类型）和传引用（引用类型）基本上达成了共识。<br>但在实现函数重载的时候则是有所不同，</p><p>比如，Java 里面选择了多写几个函数，Python 则没有这个机制，不过，通过默认参数却可以曲线救国，实现这个机制。</p><p>递归<br>函数式编程<br>高阶函数 mapreduce/ filter / sorted / 返回函数 / 匿名函数 / 装饰器 / 偏函数</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">    print(a)</span><br><span class="line">    inner()</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    a = [<span class="number">1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        a.append(<span class="number">2</span>)</span><br><span class="line">    print(a)</span><br><span class="line">    inner()</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># [1]</span></span><br><span class="line"><span class="comment"># [1, 2]</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    inner();</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">outer()</span><br><span class="line"># 1</span><br><span class="line"># 2</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> outer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    inner();</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">outer()</span><br><span class="line"># 1</span><br><span class="line"># 1</span><br></pre></td></tr></table></figure><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><ul><li>map</li><li>reduce</li><li>filter</li></ul><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><h2 id="0x05-中级概念"><a href="#0x05-中级概念" class="headerlink" title="0x05 中级概念"></a>0x05 中级概念</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>面向对象有三大概念：</p><ul><li>封装</li><li>继承</li><li>多态</li></ul><h3 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h3><p>模块，这个概念，可大可小，大的时候，把一个程序说成是模块，小的时候，可以把一个文件，甚至你说这一个函数是一个模块，也行。</p><p>这里的模块指的是一个包下的函数。</p><h3 id="错误-调试测试"><a href="#错误-调试测试" class="headerlink" title="错误 / 调试测试"></a>错误 / 调试测试</h3><p>异常处理实际上可以考验一个程序员编写代码的健壮性。</p><p>事实上来说，代码写的健壮是一个程序员必备的素养。但其实在开发过程中，出于对项目进行赶工上线，需要对程序的健壮性做出一定的取舍。并且，在编写客户端，服务端，网页前端的时候基本上都会遇到这个问题。什么时候选择健壮的程序，什么时候选择是还可以的程序。需要自己的经验。</p><h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h2 id="0x06-高级概念"><a href="#0x06-高级概念" class="headerlink" title="0x06 高级概念"></a>0x06 高级概念</h2><h3 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h3><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>Spawn - 产卵，为什么叫做产卵呢，因为生出大量的 child process<br>Spawn = fork + exec</p><h3 id="并发-并行"><a href="#并发-并行" class="headerlink" title="并发 / 并行"></a>并发 / 并行</h3><h4 id="并行架构"><a href="#并行架构" class="headerlink" title="并行架构"></a>并行架构</h4><p>并行并不完全等同与多核并行</p><ol><li>bit-level 并行 : 即 8bit 与 32bit 的区别</li><li>instrction-level 并行：CPU 的并行度：流水线，乱序执行，猜测执行</li><li>data-level 并行：比如 GPU 在调整图像亮度的时候。</li><li>task-level 并行：即多处理器，按照内存模型氛围共享内存模型与分布式内存模型</li></ol><h4 id="七个并发-并行模型"><a href="#七个并发-并行模型" class="headerlink" title="七个并发 / 并行模型"></a>七个并发 / 并行模型</h4><ol><li>线程与锁</li><li>函数式编程</li><li>分离标志与状态</li><li>Actor</li><li>通信顺序进程 (CSP)</li><li>数据级并行</li><li>Lambda 架构</li></ol><h4 id="模型-1-线程与锁"><a href="#模型-1-线程与锁" class="headerlink" title="模型 1. 线程与锁"></a>模型 1. 线程与锁</h4><p>互斥<br>竞态条件<br>死锁</p><h5 id="内置锁"><a href="#内置锁" class="headerlink" title="内置锁"></a>内置锁</h5><p>当若干个线程进行对某个变量进行一个非原子性的操作的时候，比如<br>(read-modify-write), 就吹出现竞态条件。解决方式就是进行对某个变量使用同步访问 (java 中的 synchronized)。</p><p>内存可见性</p><p>当一个线程使用了多把锁的时候，就可能出现死锁。简单避开死锁的方式就是总是按照一个<br>全局的固定思路获取多把锁</p><p>哲学家进餐：五个哲学家围绕着桌子，两边五双筷子，如果饿了，就拿起两边的筷子吃饭。则迟早会出现一个情<br>况，所有的哲学家在同一时刻决定吃饭。于是两边都拿不到筷子。</p><p>最终的解决方案就是按照全局的顺序来获取多把锁。</p><h5 id="可重入锁-Reentrant-Lock"><a href="#可重入锁-Reentrant-Lock" class="headerlink" title="可重入锁 Reentrant Lock"></a>可重入锁 Reentrant Lock</h5><p>可以用 try lock 来和超时时间来避免无尽死锁。</p><p>交替锁，避免锁整个链表，而是锁上下结点。</p><h4 id="模型-2-函数式编程"><a href="#模型-2-函数式编程" class="headerlink" title="模型 2. 函数式编程"></a>模型 2. 函数式编程</h4><h4 id="模型-3-分离标志与状态"><a href="#模型-3-分离标志与状态" class="headerlink" title="模型 3. 分离标志与状态"></a>模型 3. 分离标志与状态</h4><h4 id="模型-4-Actor"><a href="#模型-4-Actor" class="headerlink" title="模型 4. Actor"></a>模型 4. Actor</h4><h4 id="模型-5-通信顺序进程-CSP"><a href="#模型-5-通信顺序进程-CSP" class="headerlink" title="模型 5. 通信顺序进程 (CSP)"></a>模型 5. 通信顺序进程 (CSP)</h4><h4 id="模型-6-数据级并行"><a href="#模型-6-数据级并行" class="headerlink" title="模型 6. 数据级并行"></a>模型 6. 数据级并行</h4><h4 id="模型-7-Lambda-架构"><a href="#模型-7-Lambda-架构" class="headerlink" title="模型 7. Lambda 架构"></a>模型 7. Lambda 架构</h4><h2 id="0x05-标准库"><a href="#0x05-标准库" class="headerlink" title="0x05 标准库"></a>0x05 标准库</h2><h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><h3 id="字符串与文本"><a href="#字符串与文本" class="headerlink" title="字符串与文本"></a>字符串与文本</h3><h3 id="数字日期与时间"><a href="#数字日期与时间" class="headerlink" title="数字日期与时间"></a>数字日期与时间</h3><h3 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h3><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><h2 id="0x07-番外篇"><a href="#0x07-番外篇" class="headerlink" title="0x07 番外篇"></a>0x07 番外篇</h2><h2 id="0x08-调试和-Profile"><a href="#0x08-调试和-Profile" class="headerlink" title="0x08 调试和 Profile"></a>0x08 调试和 Profile</h2><h3 id="8-1-测试"><a href="#8-1-测试" class="headerlink" title="8.1 测试"></a>8.1 测试</h3><p>hash 算法</p><p>rehash | redis 渐进式 rehash</p><h2 id="0xEE-参考"><a href="#0xEE-参考" class="headerlink" title="0xEE 参考"></a>0xEE 参考</h2><ul><li><a href="http://www.yinwang.org/blog-cn/2017/07/06/master-pl">http://www.yinwang.org/blog-cn/2017/07/06/master-pl</a></li></ul><hr><p>ChangeLog:</p><ul><li><strong>2017-03-21</strong> 初始化本文</li><li><strong>2017-05-11</strong> 增加代码质量模块</li><li><strong>2018-08-29</strong> 重修文字</li><li><strong>2018-09-08</strong> 阅读七周七并发之后，针对并发章节做了补充</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;笔者对于涉猎的语言都是草草了解，深入不敢谈。能用罢了。&lt;/p&gt;
&lt;p&gt;即便是用过几种语言，得出的经验</summary>
      
    
    
    
    <category term="编程思索" scheme="http://twocucao.xyz/categories/%E7%BC%96%E7%A8%8B%E6%80%9D%E7%B4%A2/"/>
    
    
    <category term="随笔" scheme="http://twocucao.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="重构技巧" scheme="http://twocucao.xyz/tags/%E9%87%8D%E6%9E%84%E6%8A%80%E5%B7%A7/"/>
    
    <category term="编程语言" scheme="http://twocucao.xyz/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Thinking In Web Developing</title>
    <link href="http://twocucao.xyz/2018/09/04/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://twocucao.xyz/2018/09/04/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2018-09-04T02:39:45.000Z</published>
    <updated>2018-09-17T11:15:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><h2 id="0x02-前端"><a href="#0x02-前端" class="headerlink" title="0x02 前端"></a>0x02 前端</h2><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>代理服务器分布式网络，它从靠近用户的位置提供内容</p><h4 id="更新方式"><a href="#更新方式" class="headerlink" title="更新方式"></a>更新方式</h4><p>推送 PUSH</p><p>当服务器内容发生变动，推送 CDN 接受新的内容。</p><ul><li>更新最快</li><li>流量最小化</li><li>存储最大化</li></ul><p>拉取 PULL</p><p>当用户请求该资源的时候，从服务器拉取资源。</p><ul><li>更新有延迟</li><li>存储最小化</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>CDN 成本可能会很高</li><li>TTL 过期之前更新内容，CDN 缓存内容可能会过时</li></ol><h2 id="0x02-后端组件"><a href="#0x02-后端组件" class="headerlink" title="0x02 后端组件"></a>0x02 后端组件</h2><h3 id="负载均衡器"><a href="#负载均衡器" class="headerlink" title="负载均衡器"></a>负载均衡器</h3><p>负载均衡起到了一个均衡负载的作用</p><ol><li>防止请求进入运行情况糟糕的服务器。</li><li>防止资源过载。</li><li>帮助消除单一故障点。</li></ol><p>额外的功能：</p><ol><li>SSL 终结：解密传入的请求，并加密服务器响应。</li></ol><p>工作-备用 / 双工作</p><h4 id="选-Worker"><a href="#选-Worker" class="headerlink" title="选 Worker"></a>选 Worker</h4><ul><li>Random</li><li>Round Robin</li><li>Least Busy</li><li>Sticky session / Cookie</li><li>By request paramters</li></ul><h4 id="路由流量"><a href="#路由流量" class="headerlink" title="路由流量"></a>路由流量</h4><ul><li>随机</li><li>最少负载</li><li>Session/Cookie</li><li>轮询调度或加权轮询调度</li><li>四层负载均衡</li><li>七层负载均衡</li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><ul><li>安全性：隐藏后端服务器信息</li><li>可扩展性和灵活性：客户端只能看到服务器，服务端</li><li>本地终结 SSL 会话：</li><li>压缩：</li><li>缓存：</li><li>静态内容：</li></ul><h2 id="0x08-Http-Server-Model"><a href="#0x08-Http-Server-Model" class="headerlink" title="0x08 Http Server Model"></a>0x08 Http Server Model</h2><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>主进程监听不同的进程信号，并且作出反馈。</p><ul><li>TTIN TTOU 告诉 master 升高或者降低运行的 worker</li><li>CHLD 子进程已结束</li></ul><h3 id="四种-Worker"><a href="#四种-Worker" class="headerlink" title="四种 Worker"></a>四种 Worker</h3><h4 id="同步-Workers"><a href="#同步-Workers" class="headerlink" title="同步 Workers"></a>同步 Workers</h4><p>单请求单 worker, 并且不支持 persistent connections</p><p>在 CPU 和网络贷款上资源有限。（啥意思，,,,)</p><p>即请求时间不定的情况应该是要避免的。</p><h4 id="异步-Workers"><a href="#异步-Workers" class="headerlink" title="异步 Workers"></a>异步 Workers</h4><p>异步场景</p><ul><li>Applications making long blocking calls (Ie, external web services)</li><li>Serving requests directly to the internet</li><li>Streaming requests and responses</li><li>Long polling</li><li>Web sockets</li><li>Comet （其实就是推送）</li></ul><p>通过 eventlet / gevent 使用 Greenlets</p><h4 id="Tornado-Workers"><a href="#Tornado-Workers" class="headerlink" title="Tornado Workers"></a>Tornado Workers</h4><p>tornado</p><h4 id="AsyncIO-Workers"><a href="#AsyncIO-Workers" class="headerlink" title="AsyncIO Workers"></a>AsyncIO Workers</h4><ul><li>gthread</li><li>gaiohttp</li></ul><h3 id="Pre-fork-Web-Server"><a href="#Pre-fork-Web-Server" class="headerlink" title="Pre-fork Web Server"></a>Pre-fork Web Server</h3><p><a href="https://stackoverflow.com/questions/25834333/what-exactly-is-a-pre-fork-web-server-model">https://stackoverflow.com/questions/25834333/what-exactly-is-a-pre-fork-web-server-model</a></p><p>pre-forking 意味着 一个 master 创建了多个 fork 来处理请求。每一个分叉意味着一个独立的 *nix 进程（不一定吧，异步 worker 怎么算？)。</p><p>The pre in pre-fork means that these processes are forked before a request comes in. They can however usually be increased or decreased as the load goes up and down.</p><p>libev / libuv</p><p>epoll or kqueue, it is always indispensable to the asynchronous topic.</p><p>asyncio</p><p>sanic<br>libuv<br>uvloop</p><h2 id="0xEE-结论"><a href="#0xEE-结论" class="headerlink" title="0xEE 结论"></a>0xEE 结论</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;h2 id=&quot;0x02-前端&quot;&gt;&lt;a href=&quot;#0x02-前端&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="编程思索" scheme="http://twocucao.xyz/categories/%E7%BC%96%E7%A8%8B%E6%80%9D%E7%B4%A2/"/>
    
    
    <category term="后端开发" scheme="http://twocucao.xyz/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何写出整洁的 Python 代码 中</title>
    <link href="http://twocucao.xyz/2018/08/29/2019-clean-code-part02/"/>
    <id>http://twocucao.xyz/2018/08/29/2019-clean-code-part02/</id>
    <published>2018-08-29T00:35:21.000Z</published>
    <updated>2020-11-29T15:40:50.729Z</updated>
    
    <content type="html"><![CDATA[<p>本文是《提升你的 Python 项目代码健壮性和性能》系列的第七篇文章。</p><p>第一篇，讲的是如何 用 Type Annotation 提升你的 Python 代码健壮性<br>第二篇，讲的是 如何通过测试提升 Python 代码的健壮性<br>第三篇，讲的是在一定并发量的情况下，如何保证 Django 项目的数据一致性<br>第四篇，讲的是如何定位性能问题 这几招，让你快速提升 Python 项目的性能<br>第五篇，讲的是 为你的项目快速搭建 ELKFA 日志系统<br>第六篇，《如何写出整洁的代码 上》 从变量命名 / 函数 / 注释整洁 / 格式整洁上写出干净的代码</p><p>目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">▼ 如何写出整洁的 Python 代码 中 : section</span><br><span class="line">    0x00 前言 : section</span><br><span class="line">    0x01 避免过深的缩进 : section</span><br><span class="line">    0x02 使用异常 : section</span><br><span class="line">    0x03 类与 OOP : section</span><br><span class="line">  ▼ 0x04 SOLID 设计原则 : section</span><br><span class="line">      单一职责 : section</span><br><span class="line">      开闭原则 : section</span><br><span class="line">      里氏替换原则 : section</span><br><span class="line">      接口隔离原则 : section</span><br><span class="line">      依赖反转原则 : section</span><br><span class="line">    0x05 边界和第三方库的挑选 : section</span><br><span class="line">    0xDD 结论 : section</span><br><span class="line">    0xEE 参考 : section</span><br></pre></td></tr></table></figure><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>上篇地址在这里 <a href="https://zhuanlan.zhihu.com/p/59510165">https://zhuanlan.zhihu.com/p/59510165</a></p><p>还是通过代码上的一些小技巧和一些原则来让代码更加整齐。</p><h2 id="0x01-避免过深的缩进"><a href="#0x01-避免过深的缩进" class="headerlink" title="0x01 避免过深的缩进"></a>0x01 避免过深的缩进</h2><p>场景，你在做一个 B2B2C 的商城系统。商家的活动需要在某些比较严格的条件下才能参与（假设有五个字段吧）。</p><p>如果不动手捋一捋判断的路径，上来就动手写代码，则很容易写出如下的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">if cond1:</span><br><span class="line">dosomething()</span><br><span class="line">if cond2:</span><br><span class="line">dosomething()</span><br><span class="line">if cond3 and cond4:</span><br><span class="line">dosomething()</span><br><span class="line">else:</span><br><span class="line">dosomething()</span><br><span class="line">if condx:</span><br><span class="line">dosomething()</span><br><span class="line">else:</span><br><span class="line">if cond2:</span><br><span class="line">dosomething()</span><br><span class="line">if cond3 and cond4:</span><br><span class="line">dosomething()</span><br><span class="line">if condx:</span><br><span class="line">dosomething()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>想想你这个时候才判断了 5 个字段… 如果想都不想就开始写这种代码的话，就做好修改的时候崩溃吧。</p><p>当你写出 if 超过两层缩进的时候，代码的复杂度就值得注意了。</p><p>这个时候，应该火速的拿出纸和笔出来，快速的捋一捋所有的变量和情况，</p><p>『以减少缩进为目标』</p><p>能提前判断掉的就提前判断掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 能提前判断掉的就提前判断掉</span><br><span class="line">if cond2:</span><br><span class="line">raise AlreadPaid():</span><br><span class="line">if cond3:</span><br><span class="line">raise ActivityExhaused():</span><br><span class="line">if cond4:</span><br><span class="line">raise ActivityCancel():</span><br></pre></td></tr></table></figure><p>代码的缩进越浅，代表着代码越容易维护，用学长的话说，老手才知道『九浅一深』的奥妙……</p><h2 id="0x02-使用异常"><a href="#0x02-使用异常" class="headerlink" title="0x02 使用异常"></a>0x02 使用异常</h2><p>使用异常而不是状态码，这点重点点名一下 Go 语言的状态码….</p><p>遇到异常返回状态码写业务的话，很容易抓狂。如果你在深层抛出一个错误，使用状态码的话，必须一层一层的返回状态码。</p><ol><li>遇到问题，抛出异常，raise ApiException 。就可以在上层捕获错误进行处理。这样的<br>  话，就没有必要每次都在函数签名上返回状态码了。</li><li>让代码更佳清晰的是 try except finally 机制。try 块定义了一个范围，try 中的结果可以看执行中有没有遇到一些奇奇怪怪的情况，然后把 try 块里面的东西取消掉。甚至抛出一个错误，丢到 catch 里面执行。这种接近于事务的做法是状态码机制没法比的。</li></ol><p>拿第一小节的代码来说，可以在最深层抛出异常，然后在最外面统一处理异常，有些异常可能只是报 apiexception, 有的异常可能还要针对情况打日志，或者有的情况是你在写代码的时候没有考虑到的情况，都可以进行各种灵活的处理。</p><p>这样的话，代码就非常的清晰了。</p><h2 id="0x03-类与-OOP"><a href="#0x03-类与-OOP" class="headerlink" title="0x03 类与 OOP"></a>0x03 类与 OOP</h2><p>注意！</p><ol><li>OOP 语言让封装 / 继承 / 多态更佳方便快捷安全。</li><li>封装 / 多态 / 继承 并不是 OOP 对象的专利，实际上利用指针 C 也可以写出来具备封装 / 继承 / 多态的程序。只是相对危险一些罢了。</li></ol><p>比如，你有这么个场景，计算购物车里面东西的价格：</p><ol><li>面向过程思考方式，用户我选了一些商品，然后把商品放到购物车里，然后我算一下物品价格。</li><li>OOP 思考方式，用户我需要一个购物车，帮我把这些物品放到购物车里面，购物车告诉我价格。这个时候，你封装一个购物车类会比较合适。</li></ol><p>你这个时候就问了，这不就是一个 calcPrice(cart) 和 cart.calcPrice 的区别么？</p><p>区别在哪？</p><ol><li>『真实世界建模』购物车的是一个对真实世界的建模。</li><li>『职责转移』。计算价格这件事情就是『购物车』这个 Object 的事情了。</li><li>封装性：我不需要维护一个物品集合。都交给购物车来做这件事情。</li></ol><p>什么情况下需要类，用 OOP 的方式思考是合理的，明显的，清晰的，就可以了。</p><p>当然，采用了 OOP, 可以更快的结合继承 / 多态来完成『依赖反转』。</p><p>这个名词听起来不明觉厉，但其实很简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># base.py</span><br><span class="line">class Human:</span><br><span class="line">def perform(self):</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line"># foo&#x2F;man.py</span><br><span class="line">class Man(Human):</span><br><span class="line">def perform(self):</span><br><span class="line">print(&quot;大哥，真不会唱歌&quot;)</span><br><span class="line"></span><br><span class="line"># bar&#x2F;woman.py</span><br><span class="line">class Woman(Human):</span><br><span class="line">def perform(self):</span><br><span class="line">print(&quot;大哥，真不会跳舞&quot;)</span><br></pre></td></tr></table></figure><p>如果老大哥让你跳舞，就必须要把你的代码给 import 到老大哥的源代码里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># bar&#x2F;bigbother.py</span><br><span class="line">from foo.man import man_instance</span><br><span class="line">from bar.woman import woman_instance</span><br><span class="line"></span><br><span class="line">man_instance.perform()</span><br><span class="line">woman_instance.perform()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样会带来一个问题，产生了源代码上面的依赖。这样带来结果是老大哥依赖于几个具体 man 和 woman, 这是不合理的，应该是铁打的老大哥，流水的 man 和 woman</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 源码不依赖 bigbother.py</span><br><span class="line"></span><br><span class="line">def order_perform(h):</span><br><span class="line">h.perform()</span><br><span class="line"></span><br><span class="line">humans &#x3D; scan_humans()</span><br><span class="line"></span><br><span class="line">for human in humans:</span><br><span class="line">order_perform(human)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用多态，则将这个问题完美的解决了。当然，考虑到动态语言，本身就可以很『多态』…. 你甚至<br>都不需要继承了…</p><p>策略层与实现完美分离。甚至可以分开进行独立部署。</p><p>结论：</p><ol><li>对真实世界的建模</li><li>代码清晰为主，如果能用简单函数解决的事情，就不要封装成类。</li><li>以多态为手段对源代码中的依赖关系进行控制的能力。借此，可以构建<br>  出插件式架构，让高层策略性组件和底层实现性组件分离。底层实现可以编译成插件，实<br>  现独立于高层组件的开发和部署。</li></ol><h2 id="0x04-SOLID-设计原则"><a href="#0x04-SOLID-设计原则" class="headerlink" title="0x04 SOLID 设计原则"></a>0x04 SOLID 设计原则</h2><ul><li>SRP 单一职责 原则</li><li>OCP 开闭原则</li><li>LSP 里式替换原则</li><li>ISP 接口隔离原则</li><li>DIP 依赖反转原则</li></ul><p>原则是原则，是追求，是启迪思路的思想，但也要随机应变。</p><ol><li>假如你不了解业务，强行用依赖反转原则写了抽象层，后面 PM 过来说，我有这么一个思路。那么，你的代码写起来就很痛苦了。</li><li>假如你不了解场景，在使用单一职责的时候，往往就会业务区分不明确。</li></ol><p>在现实场景中，往往是先保持足够的清晰简单的代码，随着代码的演进，用上面的原则再次思<br>考一下可不可以做的更好。</p><h3 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h3><p>比如说，单一职责原则听起来很简单，一个函数只完成一个功能（事情）。</p><p>但现实情况是这种往往只是一个追求，站在不同的角度有不同的看法：</p><p>比如说，</p><ol><li>你说，你今天想学习。这是一件事情。</li><li>你说，你今天上午想学习数学。这是一件事情。</li><li>你说，你今天上午想学习高数第三章，接着做完笔记，回头抽卡默背一遍公式。这是三<br>  件事情，并且也可以是一件事情。</li></ol><p>你的拆分粒度决定了一件事情的指代范围。</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>开闭原则强调的事情是计算机系统应该在不需要修改的前提下被扩展。将系统划分为一系列组件，并且将这些组件的依赖关系按照层次结构进行组织，使得高阶组件不会因为低阶组件被修改而受到影响</p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>在不改变软件行为的基础上，衍生类可以替换掉基类</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>任何层次的软件设计如果依赖了它并不需要的东西的时候，就会带来意料之外的麻烦。</p><h3 id="依赖反转原则"><a href="#依赖反转原则" class="headerlink" title="依赖反转原则"></a>依赖反转原则</h3><p>什么叫做依赖反转？</p><p>依赖反转就是设计软件的时候设计稳定的抽象层。针对抽象的东西编程。</p><h2 id="0x05-边界和第三方库的挑选"><a href="#0x05-边界和第三方库的挑选" class="headerlink" title="0x05 边界和第三方库的挑选"></a>0x05 边界和第三方库的挑选</h2><p>在软件包膨胀的今天，应该如何挑选第三方库呢？</p><p>我给出几个挑选的原则。</p><ol><li>靠谱依赖原则：如果 flask 是靠谱的，那么，flask 依赖的 click 包，werkzeuk 包一定是靠谱的。</li><li>浓缩精华原则：如果一个库依赖少，代码清晰简单，那么可以采用。</li><li>活跃维护原则：如果维护很活跃，证明前景相对较好。</li><li>多人维护原则：如果是多人维护，则不会因一个人的喜好和个人状态而断了维护。别问我怎么知道的，都是泪</li></ol><p>挑选有这个原则，那么，使用有什么原则么？</p><p>就一条，尽量减少依赖库对你现有代码的侵入性。</p><p>比如，你用了 cryptography 之后，应该封装一个接口用来调用 cryptography 防止以后这个项目挂了，这样你可以只修改该接口，和 pycrypto 对接。</p><p>这和里氏替换的思路也是比较类似的</p><h2 id="0xDD-结论"><a href="#0xDD-结论" class="headerlink" title="0xDD 结论"></a>0xDD 结论</h2><blockquote><p>所谓『不能谋万世者不能谋一时，不能谋全局者不能谋一隅』</p></blockquote><p>在软件开发中，其实最重要的过程是梳理流程，流程梳理的足够清楚，代码就足够简单。</p><p>不管是避免深缩进，还是使用异常，还是 Solid 原则。都是建立在全局观足够高，对当前的流程非常熟悉的基础上的。</p><p>当然，考虑到需求变更的不确定性，代码还是足够简单清晰为上策。</p><h2 id="0xEE-参考"><a href="#0xEE-参考" class="headerlink" title="0xEE 参考"></a>0xEE 参考</h2><ul><li>《架构整洁之道》</li><li>《代码整洁之道》</li><li>Photo by Joseph Kellner on Unsplash</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是《提升你的 Python 项目代码健壮性和性能》系列的第七篇文章。&lt;/p&gt;
&lt;p&gt;第一篇，讲的是如何 用 Type Annotation 提升你的 Python 代码健壮性&lt;br&gt;第二篇，讲的是 如何通过测试提升 Python 代码的健壮性&lt;br&gt;第三篇，讲的是在一定</summary>
      
    
    
    
    <category term="Python" scheme="http://twocucao.xyz/categories/Python/"/>
    
    
    <category term="后端开发" scheme="http://twocucao.xyz/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Shell CheatSheet</title>
    <link href="http://twocucao.xyz/2018/08/28/ShellCheatSheet/"/>
    <id>http://twocucao.xyz/2018/08/28/ShellCheatSheet/</id>
    <published>2018-08-28T11:58:02.000Z</published>
    <updated>2018-09-17T11:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Shell 单行命令。</p><p>脚本主要适用于 BASH 环境，因为 Server 端的 Bash 主要还是 Bash 脚本居多。</p><p>不定期更新。</p><blockquote><p>声明：Bash 命令适合那些十来行代码可以搞定的比较简单的逻辑，一般情况下用于处理一些服务的开启。至于部署，强烈推荐 Ansible. 目前在项目中使用 Ansible 从零开始无人值守部署一台机器。基本上完美到极致。</p></blockquote><a id="more"></a><h2 id="0x01-快捷键操作"><a href="#0x01-快捷键操作" class="headerlink" title="0x01. 快捷键操作"></a>0x01. 快捷键操作</h2><ul><li>「<strong>c-c</strong>」  : 中断当前命令。</li><li>「<strong>c-z</strong>」  : 当前程序暂停，bg 切换后台运行，使用 fg 可以调回</li><li>「<strong>tab</strong>」  : 补全</li><li>「<strong>tabx2</strong>」  : 补全提示</li><li>「<strong>c-r</strong>」  : 搜索命令行</li><li>「<strong>c-w</strong>」  : 同 vim</li><li>「<strong>c-u</strong>」  : 删除整行</li><li>「<strong>a-b/a-f</strong>」  : 移动一个词</li><li>「<strong>c-a</strong>」  : 移动至行首</li><li>「<strong>c-e</strong>」  : 移动至行尾</li><li>「<strong>c-k</strong>」  : 删除光标到行尾</li><li>「<strong>c-l</strong>」  : 清屏</li><li>「<strong>c-x,c-e</strong>」  : 用默认编辑器编辑当前命令（这样就可以把其他文本移动扔掉了。)</li></ul><h2 id="0x02-Linux-命令"><a href="#0x02-Linux-命令" class="headerlink" title="0x02. Linux 命令"></a>0x02. Linux 命令</h2><p>如果你和我一样使用的是 mac 系统，请先参考下面的链接</p><p><a href="https://github.com/twocucao/dotfiles/blob/master/install_brew_packages.sh">https://github.com/twocucao/dotfiles/blob/master/install_brew_packages.sh</a></p><blockquote><p>经过上面一步，则基本上 find sed tar which 这些命令使用的 gnu 版本 (linux 版本）, 而非系统自带的 unix 版本了。</p></blockquote><blockquote><p>如何查找帮助</p></blockquote><ol><li>找男人 man 一下</li><li>whatis / which / where</li><li>tldr</li></ol><p>值得一提的就是 tldr, 直接可以在上面查看命令的常规使用。实在是碉堡了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Secure Shell is a protocol used to securely <span class="built_in">log</span> onto remote systems.</span><br><span class="line">It can be used <span class="keyword">for</span> logging or executing commands on a remote server.</span><br><span class="line"></span><br><span class="line">- Connect to a remote server:</span><br><span class="line">    ssh username@remote_host</span><br><span class="line"></span><br><span class="line">- Connect to a remote server with a specific identity (private key):</span><br><span class="line">    ssh -i path/to/key_file username@remote_host</span><br><span class="line"></span><br><span class="line">- Connect to a remote server using a specific port:</span><br><span class="line">    ssh username@remote_host -p 2222</span><br><span class="line"></span><br><span class="line">- Run a <span class="built_in">command</span> on a remote server:</span><br><span class="line">    ssh remote_host <span class="built_in">command</span> -with -flags</span><br><span class="line"></span><br><span class="line">- SSH tunneling: Dynamic port forwarding (SOCKS proxy on localhost:9999):</span><br><span class="line">    ssh -D 9999 -C username@remote_host</span><br><span class="line"></span><br><span class="line">- SSH tunneling: Forward a specific port (localhost:9999 to slashdot.org:80) along with disabling pseudo-[t]ty allocation and executio[n] of remote commands:</span><br><span class="line">    ssh -L 9999:slashdot.org:80 -N -T username@remote_host</span><br><span class="line"></span><br><span class="line">- SSH jumping: Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters):</span><br><span class="line">    ssh -J username@jump_host username@remote_host</span><br><span class="line"></span><br><span class="line">- Agent forwarding: Forward the authentication information to the remote machine (see `man ssh_config` <span class="keyword">for</span> available options):</span><br><span class="line">    ssh -A username@remote_host</span><br></pre></td></tr></table></figure><h2 id="0x03-Tips-amp-amp-Hacks"><a href="#0x03-Tips-amp-amp-Hacks" class="headerlink" title="0x03 Tips &amp;&amp; Hacks"></a>0x03 Tips &amp;&amp; Hacks</h2><h3 id="文件-目录"><a href="#文件-目录" class="headerlink" title="文件 / 目录"></a>文件 / 目录</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>mkdir</li><li>rm</li><li>cd</li><li>cp</li><li>pwd</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建和删除</span></span><br><span class="line">mkdir</span><br><span class="line">mkdir -p a/b/c</span><br><span class="line">rm</span><br><span class="line">rm -rf dir/file/regex</span><br><span class="line">rm *<span class="built_in">log</span></span><br><span class="line"><span class="comment"># 等价</span></span><br><span class="line">find ./ -name <span class="string">&quot;*log&quot;</span> -<span class="built_in">exec</span> rm &#123;&#125;;</span><br><span class="line">mv</span><br><span class="line"></span><br><span class="line"><span class="comment">## mv 可以用于移动文件，也可以进行重命名</span></span><br><span class="line"></span><br><span class="line">cp</span><br><span class="line"></span><br><span class="line">find ./ | wc -l</span><br><span class="line">cp -r source_dir dest_dir</span><br><span class="line">rsync --progress -a source_dir dest_dir</span><br><span class="line">rsync -vr --progress you_folder_here twocucao@192.168.2.151:/Users/twocucao/Codes/</span><br><span class="line"><span class="comment"># 目录切换</span></span><br><span class="line">ls -lrt</span><br><span class="line"></span><br><span class="line">find ./ -name <span class="string">&quot;*.o&quot;</span> -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">more</span><br><span class="line">head</span><br><span class="line">tail</span><br><span class="line">tail -f filename</span><br><span class="line">diff</span><br><span class="line"></span><br><span class="line">chown</span><br><span class="line">chmod</span><br><span class="line">chown -R tuxapp <span class="built_in">source</span>/</span><br><span class="line">chmod a+x myscript</span><br><span class="line"></span><br><span class="line">ln cc ccA</span><br><span class="line">ln -s cc ccTo</span><br><span class="line"></span><br><span class="line">cat -v record.log | grep AAA | grep -v BBB | wc -l</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查找文件之-find-gfind"><a href="#查找文件之-find-gfind" class="headerlink" title="查找文件之 find (gfind)"></a>查找文件之 find (gfind)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Find</span></span><br><span class="line"></span><br><span class="line">find . \( -name <span class="string">&quot;*.txt&quot;</span> -o -name <span class="string">&quot;*.pdf&quot;</span> \) -<span class="built_in">print</span></span><br><span class="line"><span class="comment"># 正则方式查找。txt 和。pdf</span></span><br><span class="line">find . -regex  <span class="string">&quot;.*\(\.txt|\.pdf\)$&quot;</span></span><br><span class="line">find . ! -name <span class="string">&quot;*.txt&quot;</span> -<span class="built_in">print</span></span><br><span class="line">find . -maxdepth 1 -<span class="built_in">type</span> f</span><br><span class="line"><span class="comment"># 定制搜索</span></span><br><span class="line"><span class="comment">## 按照类型搜索</span></span><br><span class="line">find . -<span class="built_in">type</span> f -<span class="built_in">print</span>  <span class="comment">#只列出所有文件</span></span><br><span class="line">find . -<span class="built_in">type</span> d -<span class="built_in">print</span>  <span class="comment">#只列出所有目录</span></span><br><span class="line">find . -<span class="built_in">type</span> l -<span class="built_in">print</span>  <span class="comment">#只列出所有符号链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 按照时间搜索</span></span><br><span class="line">find . -atime 7 -<span class="built_in">type</span> f -<span class="built_in">print</span> <span class="comment"># 最近第 7 天被访问过的所有文件：</span></span><br><span class="line">find . -atime -7 -<span class="built_in">type</span> f -<span class="built_in">print</span> <span class="comment"># 最近 7 天内被访问过的所有文件：</span></span><br><span class="line">find . -atime +7 <span class="built_in">type</span> f -<span class="built_in">print</span> <span class="comment"># 查询 7 天前被访问过的所有文件：</span></span><br><span class="line"><span class="comment"># w,k,M,G</span></span><br><span class="line">find . -<span class="built_in">type</span> f -size +2k</span><br><span class="line">find . -<span class="built_in">type</span> f -perm 644 -<span class="built_in">print</span>  <span class="comment"># 找具有可执行权限的所有文件</span></span><br><span class="line">find . -<span class="built_in">type</span> f -user weber -<span class="built_in">print</span> <span class="comment"># 找用户 weber 所拥有的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后续动作</span></span><br><span class="line"><span class="comment">## 删除</span></span><br><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.swp&quot;</span> -delete</span><br><span class="line"><span class="comment">## 执行动作</span></span><br><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.swp&quot;</span> | xargs rm</span><br><span class="line">find . -<span class="built_in">type</span> f -user root -<span class="built_in">exec</span> chown weber &#123;&#125; \;</span><br><span class="line"><span class="comment">## eg: copy 到另一个目录</span></span><br><span class="line">find . -<span class="built_in">type</span> f -mtime +10 -name <span class="string">&quot;*.txt&quot;</span> -<span class="built_in">exec</span> cp &#123;&#125; OLD \;</span><br><span class="line"><span class="comment">##  -exec ./commands.sh &#123;&#125; \;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 删除内部为空的文件夹</span></span><br><span class="line"><span class="comment"># 递归删除 a/b/c</span></span><br><span class="line">find . -<span class="built_in">type</span> d -empty -delete</span><br><span class="line"><span class="comment">#    使用.gitkeep 进行填充</span></span><br><span class="line">find . -<span class="built_in">type</span> d -empty -<span class="built_in">exec</span> touch &#123;&#125;/.gitkeep \;</span><br><span class="line">find . -<span class="built_in">type</span> d -empty -not -path <span class="string">&#x27;*/\.*&#x27;</span> -<span class="built_in">exec</span> touch &#123;&#125;/.gitkeep \; <span class="comment"># 不初始化.git/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 寻找 TOP 10</span></span><br><span class="line">find . -<span class="built_in">type</span> f -<span class="built_in">printf</span> <span class="string">&#x27;%s %p\n&#x27;</span>| sort -nr | head -10 | awk <span class="string">&#x27;&#123;$1/=1024*1024;printf &quot;%.2fMB - %s\n&quot;,$1,$2&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 寻找文件夹 TOP 10</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;: A placeholder token that will be replaced with the path of the search result (documents/images/party.jpg).</span><br><span class="line">&#123;.&#125;: Like &#123;&#125;, but without the file extension (documents/images/party).</span><br><span class="line">&#123;/&#125;: A placeholder that will be replaced by the basename of the search result (party.jpg).</span><br><span class="line">&#123;//&#125;: Uses the parent of the discovered path (documents/images).</span><br><span class="line">&#123;/.&#125;: Uses the basename, with the extension removed (party).</span><br><span class="line"><span class="comment"># Convert all jpg files to png files:</span></span><br><span class="line">fd -e jpg -x convert &#123;&#125; &#123;.&#125;.png</span><br><span class="line"></span><br><span class="line"><span class="comment"># Unpack all zip files (if no placeholder is given, the path is appended):</span></span><br><span class="line">fd -e zip -x unzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert all flac files into opus files:</span></span><br><span class="line">fd -e flac -x ffmpeg -i &#123;&#125; -c:a libopus &#123;.&#125;.opus</span><br><span class="line"></span><br><span class="line"><span class="comment"># Count the number of lines in Rust files (the command template can be terminated with &#x27;;&#x27;):</span></span><br><span class="line">fd -x wc -l \; -e rs</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="压缩-解压缩"><a href="#压缩-解压缩" class="headerlink" title="压缩 / 解压缩"></a>压缩 / 解压缩</h4><ul><li>7z</li><li>7za</li><li>7zr</li><li>tar</li><li>gzip</li><li>unzip</li><li>unrar</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打包</span></span><br><span class="line">tar -cvf</span><br><span class="line"><span class="comment">#解包</span></span><br><span class="line">tar -xvf</span><br><span class="line"><span class="comment">#压缩</span></span><br><span class="line">gzip</span><br><span class="line"><span class="comment">#解压缩 gunzip bzip</span></span><br></pre></td></tr></table></figure><ul><li>tar 是将多个文件放在一起变成一个 tar 文件 (Tape Archiver)</li><li>gzip 是讲一个文件变成一个压缩文件</li></ul><blockquote><p>则 foo.tar.gz 指的是 先把文件转为 tar 文件，然后 gzip 之</p></blockquote><h3 id="文本篇"><a href="#文本篇" class="headerlink" title="文本篇"></a>文本篇</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">grep match_pattern file</span><br><span class="line"></span><br><span class="line">-o 只输出匹配的文本行</span><br><span class="line">-v 只输出没有匹配的文本行</span><br><span class="line">-c 统计文件中包含文本的次数</span><br><span class="line"></span><br><span class="line">-n 打印匹配行号</span><br><span class="line">-i 搜索时符合大小写</span><br><span class="line">-l 之打印文件名</span><br><span class="line"></span><br><span class="line">grep <span class="string">&quot;class&quot;</span> . -R -n <span class="comment"># 多级目录中对文本递归搜索</span></span><br><span class="line">grep -e <span class="string">&quot;class&quot;</span> -e <span class="string">&quot;vitural&quot;</span> file <span class="comment"># 匹配多个模式</span></span><br><span class="line">grep <span class="string">&quot;test&quot;</span> file* -lZ| xargs -0 rm <span class="comment"># grep 输出以、0 作为结尾符的文件名：（-z）</span></span><br><span class="line"></span><br><span class="line">-d 定义定界符</span><br><span class="line">-n 输出为多行</span><br><span class="line">-l &#123;&#125; 指定替换字符串</span><br><span class="line">cat file.txt | xargs <span class="comment"># 打印多行</span></span><br><span class="line">cat file.txt | xargs -n 3 <span class="comment"># 分割多行</span></span><br><span class="line">cat file.txt | xargs -I &#123;&#125; ./command.sh -p &#123;&#125; -1</span><br><span class="line">-0 指定、0 为输入定界符</span><br><span class="line">find source_dir/ -<span class="built_in">type</span> f -name <span class="string">&quot;*.cpp&quot;</span> -print0 |xargs -0 wc -l</span><br><span class="line"></span><br><span class="line">sort 排序</span><br><span class="line">-n 按数字进行排序</span><br><span class="line">-d 按字典序进行排序</span><br><span class="line">-r 逆序排序</span><br><span class="line">-k N 指定按照第 N 列排序</span><br><span class="line"></span><br><span class="line">sort -nrk 1 data.txt</span><br><span class="line">sort -bd data // 忽略像空格之类的前导空白字符</span><br><span class="line"></span><br><span class="line">sort unsort.txt | uniq &gt; sorted.txt <span class="comment"># 消除重复行</span></span><br><span class="line">sort unsort.txt | uniq -c <span class="comment"># 统计各行在文件中出现的次数</span></span><br><span class="line">sort unsort.txt | uniq -d <span class="comment"># 找出重复行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 tr 进行转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cut 按列切分文本</span></span><br><span class="line">cut -f2,4 filename <span class="comment">#截取文件的第 2 列和第 4 列</span></span><br><span class="line">cut -f3 --complement filename <span class="comment">#去文件除第 3 列的所有列</span></span><br><span class="line">cut -f2 -d<span class="string">&quot;;&quot;</span> filename -d <span class="comment">#指定定界符</span></span><br><span class="line">cut -c1-5 file <span class="comment">#打印第一到 5 个字符</span></span><br><span class="line">cut -c-2 file  <span class="comment">#打印前 2 个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># paste 按列拼接文本</span></span><br><span class="line">paste file1 file2 -d <span class="string">&quot;,&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wc 统计行和字符的工具</span></span><br><span class="line">wc -l file <span class="comment"># 统计行数</span></span><br><span class="line">wc -w file <span class="comment"># 统计单词数</span></span><br><span class="line">wc -c file <span class="comment"># 统计字符数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sed 文本替换利器</span></span><br><span class="line">sed <span class="string">&#x27;s/text/replace_text/&#x27;</span> file  <span class="comment"># 首处替换</span></span><br><span class="line">sed <span class="string">&#x27;s/text/replace_text/g&#x27;</span> file  <span class="comment"># 全局替换</span></span><br><span class="line">sed -i <span class="string">&#x27;s/text/repalce_text/g&#x27;</span> file <span class="comment"># 替换文件</span></span><br><span class="line">sed <span class="string">&#x27;/^$/d&#x27;</span> file  <span class="comment"># 移除空白行</span></span><br><span class="line">sed -i <span class="string">&#x27;s/twocucao/micheal/g&#x27;</span> xx.dump.sql</span><br><span class="line">sed -n 634428,887831p insert_doc_ids_new.sql &gt; uninserted_sql.sql</span><br></pre></td></tr></table></figure><h3 id="用户篇"><a href="#用户篇" class="headerlink" title="用户篇"></a>用户篇</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 yaweb 为 sudo 用户</span></span><br><span class="line">usermod -aG sudo yaweb</span><br></pre></td></tr></table></figure><p>所有用户和用户组信息保存在：/etc/passwd , /etc/group</p><p>用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m yaweb <span class="comment"># 创建相关账号，和用户目录 /home/yaweb</span></span><br><span class="line">passwd yaweb</span><br><span class="line">userdel -r yaweb <span class="comment"># 删除</span></span><br></pre></td></tr></table></figure><p>用户组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usermod -g groupName username <span class="comment"># 变更组</span></span><br><span class="line">usermod -G groupName username <span class="comment"># 添加到组</span></span><br><span class="line">usermod -aG sudo yaweb <span class="comment"># 添加 yaweb 到 sudo 组</span></span><br></pre></td></tr></table></figure><p>用户权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown userMark(+|-)PermissionsMark</span><br></pre></td></tr></table></figure><p>userMark 取值：</p><ul><li>u：用户</li><li>g：组</li><li>o：其它用户</li><li>a：所有用户</li></ul><p>PermissionsMark 取值：</p><ul><li>r: 读</li><li>w：写</li><li>x：执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x main         对所有用户给文件 main 增加可执行权限</span><br><span class="line">chmod g+w blogs        对组用户给文件 blogs 增加可写权限</span><br><span class="line">chown -R weber server/</span><br></pre></td></tr></table></figure><p>远程登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -l root 192.168.2.253</span><br><span class="line">ssh-copy-id root@192.168.2.253</span><br></pre></td></tr></table></figure><h3 id="网络篇"><a href="#网络篇" class="headerlink" title="网络篇"></a>网络篇</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;hostname &#x2F;etc&#x2F;hosts</span><br><span class="line">netstat -a</span><br></pre></td></tr></table></figure><h3 id="磁盘篇"><a href="#磁盘篇" class="headerlink" title="磁盘篇"></a>磁盘篇</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前目录大小</span></span><br><span class="line">du -sh</span><br><span class="line">du -sh `ls` | sort</span><br><span class="line"><span class="comment"># 查看当前目录的下一级文件和子目录的磁盘容量</span></span><br><span class="line">du -lh --max-depth=1</span><br></pre></td></tr></table></figure><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep twocucao</span><br><span class="line">ps -lu twocucao</span><br><span class="line"># 完整显示</span><br><span class="line">ps -ajx</span><br><span class="line">ps au | grep phantomjs | awk &#39;&#123; print $2 &#125;&#39; | xargs kill -9</span><br><span class="line"></span><br><span class="line">top</span><br><span class="line">htop</span><br><span class="line"></span><br><span class="line">lsof -i:3306</span><br><span class="line">lsof -u twocucao</span><br><span class="line"></span><br><span class="line">kill -9 pidnum</span><br><span class="line"></span><br><span class="line"># 将用户 colin115 下的所有进程名以 av_开头的进程终止：</span><br><span class="line"></span><br><span class="line">ps -u colin115 |  awk &#39;&#x2F;av_&#x2F; &#123;print &quot;kill -9 &quot; $1&#125;&#39; | sh</span><br><span class="line"># 将用户 colin115 下所有进程名中包含 HOST 的进程终止：</span><br><span class="line"></span><br><span class="line">ps -fe| grep colin115|grep HOST |awk &#39;&#123;print $2&#125;&#39; | xargs kill -9;</span><br></pre></td></tr></table></figure><h4 id="Systemd"><a href="#Systemd" class="headerlink" title="Systemd"></a>Systemd</h4><p>创建一个 Systemd 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;gunicorn.service:</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;gunicorn daemon</span><br><span class="line">Requires&#x3D;gunicorn.socket</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">PIDFile&#x3D;&#x2F;run&#x2F;gunicorn&#x2F;pid</span><br><span class="line">User&#x3D;someuser</span><br><span class="line">Group&#x3D;someuser</span><br><span class="line">RuntimeDirectory&#x3D;gunicorn</span><br><span class="line">WorkingDirectory&#x3D;&#x2F;home&#x2F;someuser&#x2F;applicationroot</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;gunicorn --pid &#x2F;run&#x2F;gunicorn&#x2F;pid   \</span><br><span class="line">          --bind unix:&#x2F;run&#x2F;gunicorn&#x2F;socket applicationname.wsgi</span><br><span class="line">ExecReload&#x3D;&#x2F;bin&#x2F;kill -s HUP $MAINPID</span><br><span class="line">ExecStop&#x3D;&#x2F;bin&#x2F;kill -s TERM $MAINPID</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><p>内存瓶颈</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htop</span><br><span class="line">free <span class="comment"># 从 /proc/meminfo 读取数据</span></span><br></pre></td></tr></table></figure><p>IO 瓶颈</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu 下 可以 mac 下不可以</span></span><br><span class="line">iostat -d -x -k 1 1</span><br></pre></td></tr></table></figure><p>如果 %iowait 的值过高，表示硬盘存在 I/O 瓶颈。<br>如果 %util 接近 100%，说明产生的 I/O 请求太多，I/O 系统已经满负荷，该磁盘可能存在瓶颈。<br>如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；<br>如果 await 远大于 svctm，说明 I/O 队列太长，io 响应太慢，则需要进行必要优化。<br>如果 avgqu-sz 比较大，也表示有大量 io 在等待。</p><h2 id="增强版软件"><a href="#增强版软件" class="headerlink" title="增强版软件"></a>增强版软件</h2><h3 id="外部检查"><a href="#外部检查" class="headerlink" title="外部检查"></a>外部检查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 域名与 IP 分析</span><br><span class="line">dig</span><br><span class="line"></span><br><span class="line"># 端口分析</span><br><span class="line">nmap -v -sS -O 192.168.2.0&#x2F;24</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="FTP-Client-提交文件"><a href="#FTP-Client-提交文件" class="headerlink" title="FTP Client 提交文件"></a>FTP Client 提交文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">lftp &lt;&lt;SCRIPT</span><br><span class="line">set ftps:initial-prot &quot;&quot;</span><br><span class="line">set ftp:ssl-force true</span><br><span class="line">set ftp:ssl-protect-data true</span><br><span class="line">set ssl:verify-certificate no</span><br><span class="line">open ftp:&#x2F;&#x2F;xxx.xxx.xxx.xxx:21</span><br><span class="line">user ftpuser ftppass</span><br><span class="line">lcd &#x2F;Users&#x2F;&lt;username&gt;&#x2F;Ftps&#x2F;Workspace&#x2F;libs</span><br><span class="line">put &#x2F;Users&#x2F;&lt;username&gt;&#x2F;Ftps&#x2F;Workspace&#x2F;repos&#x2F;xxx.jar</span><br><span class="line">exit</span><br><span class="line">SCRIPT</span><br></pre></td></tr></table></figure><h3 id="媒体编辑"><a href="#媒体编辑" class="headerlink" title="媒体编辑"></a>媒体编辑</h3><h4 id="抽取视频中的音乐"><a href="#抽取视频中的音乐" class="headerlink" title="抽取视频中的音乐"></a>抽取视频中的音乐</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 抽取 mp4 中的音频并保存为 mp3</span><br><span class="line">mkdir outputs</span><br><span class="line">for f in *.mp4; do ffmpeg -i &quot;$f&quot; -c:a libmp3lame &quot;outputs&#x2F;$&#123;f%.mp4&#125;.mp3&quot;; done</span><br></pre></td></tr></table></figure><h4 id="批量获取"><a href="#批量获取" class="headerlink" title="批量获取"></a>批量获取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert &#123;&#123;image1.png&#125;&#125; &#123;&#123;image2.png&#125;&#125; &#123;&#123;image3.png&#125;&#125; -delay &#123;&#123;100&#125;&#125; &#123;&#123;animation.gif&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="有趣的重命名"><a href="#有趣的重命名" class="headerlink" title="有趣的重命名"></a>有趣的重命名</h3><p>常用 mv 进行重命名，有的时候这个功能显得很不实用，比如，我要把当前的文件夹内的所有图片命名为 0001.png-9999.png, 这个 mv 时候就相当的鸡肋。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install renameutils mmv rename</span><br></pre></td></tr></table></figure><p>如果对于大批的文件需要重命名，比如有接近 10000 个文件，大量乱码文件改为 0001.jpg - 9999.jpg</p><p>这种东西放在 IPython 里面写 Python 脚本也还 OK, 但是总想直接一行命令解决</p><h3 id="常用组合技"><a href="#常用组合技" class="headerlink" title="常用组合技"></a>常用组合技</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 windows txt 文件中的查看二字的数量</span></span><br><span class="line">cat * | iconv -f GBK | grep 查看 | wc -l</span><br></pre></td></tr></table></figure><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bat</span><br><span class="line">exa</span><br><span class="line">json_pp</span><br><span class="line">python -m json.tool</span><br><span class="line">tig</span><br><span class="line">tokei</span><br></pre></td></tr></table></figure><h3 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tmux</span><br><span class="line"></span><br><span class="line">tmux new -s you_tmux_name</span><br><span class="line">tmux ls</span><br><span class="line">tmux a</span><br><span class="line">tmux a -t you_tmux_name</span><br><span class="line">c-b + d</span><br><span class="line">tmux kill-session -t you_tmux_name</span><br></pre></td></tr></table></figure><p>进阶工具 tmuxp</p><h2 id="部署工具"><a href="#部署工具" class="headerlink" title="部署工具"></a>部署工具</h2><h3 id="进程守护-supervisor"><a href="#进程守护-supervisor" class="headerlink" title="进程守护 supervisor"></a>进程守护 supervisor</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl tail -f you_app_name stdout</span><br><span class="line">supervisorctl tail -100 you_app_name stderr</span><br></pre></td></tr></table></figure><h2 id="资料推荐"><a href="#资料推荐" class="headerlink" title="资料推荐"></a>资料推荐</h2><ol><li>一个关于 Linux 命令的各种奇技的网站 <a href="http://www.commandlinefu.com/commands/browse">http://www.commandlinefu.com/commands/browse</a></li><li>Linux 工具快速教程 <a href="http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html">http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html</a></li><li>一个 Awesome List, <a href="https://github.com/jaywcjlove/linux-command">https://github.com/jaywcjlove/linux-command</a></li><li>命令行的艺术  <a href="https://github.com/jlevy/the-art-of-command-line">https://github.com/jlevy/the-art-of-command-line</a></li><li>man command 需要好好研读，特别是 man bash 至少要研读几遍</li></ol><hr><p>ChangeLog:</p><ul><li><strong>2015-04-18</strong> 初始化本文</li><li><strong>2018-08-28</strong> 重修文字</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Shell 单行命令。&lt;/p&gt;
&lt;p&gt;脚本主要适用于 BASH 环境，因为 Server 端的 Bash 主要还是 Bash 脚本居多。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;声明：Bash 命令适合那些十来行代码可以搞定的比较简单的逻辑，一般情况下用于处理一些服务的开启。至于部署，强烈推荐 Ansible. 目前在项目中使用 Ansible 从零开始无人值守部署一台机器。基本上完美到极致。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="善用佳软" scheme="http://twocucao.xyz/categories/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
    
    <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
    <category term="macOS" scheme="http://twocucao.xyz/tags/macOS/"/>
    
    <category term="Ubuntu" scheme="http://twocucao.xyz/tags/Ubuntu/"/>
    
    <category term="Linux" scheme="http://twocucao.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Vue 项目漫谈 2018 版</title>
    <link href="http://twocucao.xyz/2018/08/01/VueProjectTalking/"/>
    <id>http://twocucao.xyz/2018/08/01/VueProjectTalking/</id>
    <published>2018-08-01T12:06:05.000Z</published>
    <updated>2018-08-01T09:23:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前草草整理过一些 Vue 的小技巧，最近温习了一遍文档，重聊一遍。</p><p>鉴于 VueCLI 越做越臃肿，我最后还是选择了自己搭架子。</p><p><a href="https://github.com/twocucao/vue-starter-kit">https://github.com/twocucao/vue-starter-kit</a></p><h2 id="0x01-项目结构"><a href="#0x01-项目结构" class="headerlink" title="0x01 项目结构"></a>0x01 项目结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根文件</span></span><br><span class="line">public/ <span class="comment"># 部署文件</span></span><br><span class="line">src/ <span class="comment"># 源码</span></span><br><span class="line">.babelrc</span><br><span class="line">.editorconfig</span><br><span class="line">.eslintignore</span><br><span class="line">.eslintrc</span><br><span class="line">.gitignore</span><br><span class="line">.postcssrc.js</span><br><span class="line">LICENSE</span><br><span class="line">README.md</span><br><span class="line">jsconfig.json</span><br><span class="line">package-lock.json</span><br><span class="line">package.json</span><br><span class="line">webpack.common.js</span><br><span class="line">webpack.dev.js</span><br><span class="line">webpack.dll.js</span><br><span class="line">webpack.prod.js</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 src 文件夹下面</span></span><br><span class="line"></span><br><span class="line">api <span class="comment"># 相关的 Web API 定义</span></span><br><span class="line">assets <span class="comment"># 静态资源，对于已经压缩的，还是直接放在 Static 下面</span></span><br><span class="line">components <span class="comment"># 公用组件</span></span><br><span class="line">mixins <span class="comment"># mixin</span></span><br><span class="line">directives <span class="comment"># 定义指令，比如 v-loading</span></span><br><span class="line">pages <span class="comment"># 页面</span></span><br><span class="line">store <span class="comment"># Store</span></span><br><span class="line">App.vue <span class="comment"># CORE 组件</span></span><br><span class="line">consts.js <span class="comment">#定义常量名称</span></span><br><span class="line">index.js <span class="comment"># 用于初始化项目，注册组件等等</span></span><br><span class="line">routes.js <span class="comment"># 路由</span></span><br><span class="line">utils <span class="comment"># 工具方法</span></span><br></pre></td></tr></table></figure><p>值得一提的就是 index.js 应该要做的事情</p><ul><li>注册全局组件和过滤器</li><li>给 Vue 实例加戏，哦，说错了，给实例加一些全局性的方法，比如 $comfirm 等对话框 $verbose $warning 等日志</li><li>完成刷新界面之后的从 localStorage 的重新赋值</li><li>注册路由切换的时候的调用的各类方法</li></ul><h2 id="0x02-开发技巧"><a href="#0x02-开发技巧" class="headerlink" title="0x02 开发技巧"></a>0x02 开发技巧</h2><h3 id="1-登录，登录校验以及权限"><a href="#1-登录，登录校验以及权限" class="headerlink" title="1. 登录，登录校验以及权限"></a>1. 登录，登录校验以及权限</h3><p>通过路由的 meta 属性来区分</p><h3 id="8-日志管理"><a href="#8-日志管理" class="headerlink" title="8. 日志管理"></a>8. 日志管理</h3><p>我觉得日志管理也应该是比较重要的部分，不管是调试程序，还是用于检查用户浏览器这块的错误日志，甚至是埋点。</p><p>依据具体技术栈可以考虑上个 sentry 或者 ELK</p><h3 id="7-首屏-Loading"><a href="#7-首屏-Loading" class="headerlink" title="7. 首屏 Loading"></a>7. 首屏 Loading</h3><p>这个可以放在 index.html 里面</p><h3 id="4-路由管理与嵌套路由"><a href="#4-路由管理与嵌套路由" class="headerlink" title="4. 路由管理与嵌套路由"></a>4. 路由管理与嵌套路由</h3><p>路由管理</p><p>嵌套路由有什么优点？</p><ol><li>使得子路由里的页面可以复用父级路由的页面的组件</li><li>减少手动硬编码 meta 和 props 的代码量</li><li>便于定制面包屑组件</li><li>其他</li></ol><h2 id="0x03-构建技巧"><a href="#0x03-构建技巧" class="headerlink" title="0x03 构建技巧"></a>0x03 构建技巧</h2><h3 id="3-1-离线-IconFont"><a href="#3-1-离线-IconFont" class="headerlink" title="3.1 离线 IconFont"></a>3.1 离线 IconFont</h3><p>经常需要离线调试网页，顺手写了这个脚本。</p><p>之前在研究某个网站的反爬机制的时候发现时动态生成 iconfont, 然后通过 unicode 码来实现数字的显示，从而让爬虫小白无法爬取。研究了一下他们的 iconfont, 知道了 font-carrier, 然后调用 node 脚本打包字体文件，并在这个过程中自动生成对应的 iconfont.css</p><p>最后的结果就是，当我放一个文件到 svg 文件夹下面的时候，比如 bank.svg , 我执行一下脚本，生成对应的字体文件，在 html 里面编写脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;iconfont iconfont-bank&quot; &gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p>然后对应图标就呈现出来了。</p><h3 id="3-2-Webpack-构建工具"><a href="#3-2-Webpack-构建工具" class="headerlink" title="3.2 Webpack 构建工具"></a>3.2 Webpack 构建工具</h3><p>日常开发用的是 VueCli, 配置还是非常人性化的。开箱即用。</p><h4 id="开发环境与部署环境"><a href="#开发环境与部署环境" class="headerlink" title="开发环境与部署环境"></a>开发环境与部署环境</h4><p>VueCLI 内置了变量的管理，你可以定义 config/dev.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">&#x27;&quot;development&quot;&#x27;</span>,</span><br><span class="line">  API_ROOT: <span class="string">&#x27;&quot;http://dev-data.twocucao.xyz&quot;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其实，开发的环境用一组变量是不行的。比如，开发的人分为纯前端，纯后端，我这样的前后都会一些的人，每个对于环境的配置都是不太一样的。</p><ul><li>对于前端 Windowser 直接执行 npm run dev 对接到局域网服务器</li><li>对于单个人同时调试后端和前端的时候，一般要把 Web API 对应到本地的机器上。可是使用环境便来配置不同的 DEBUG_MODE=True npm run dev</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### DLL 打包</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">大约在半年前，开发过程中突然在使用 ECharts 后，仅仅不到 10M 大小的项目居然开发 build 的时间需要 5MIN, 打包出来的文件超级大。居然接近了 100 多 M</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">震惊之余，差点准备写一篇骗点击量的文章：**看完震惊了！！前端和后端男程序员都无法忍受的大小！**, 然后文章内就介绍 Webpack 打包文件居然没有避免重复引入依赖库导致打包文件太大提出抗议。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">回到主题，使用 npm run analyze 发现问题出现在 ECharts 上， 每一个图表组件都是依赖于 ECharts, 而每一个组件都包含了一个完整的 ECharts 库的大小。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">于是，我一边吐槽 webpack 考虑不周，另一方面寻找解决方案。最后找到了 DLL 方案</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这个方案的原理大致是：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 编写独立的脚本，把几个需要复用的库一个配置文件 (manifest.json), 以及打包库到一个 JS 文件中。</span></span><br><span class="line"><span class="string">- 然后从 index.html 引入这个 JS 文件。</span></span><br><span class="line"><span class="string">- 接着在 webpack 配置中使之每次引入一个库的时候，避免重复引入。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; 但这不应该是 Webpack 本身就应该做的吗？为嘛还要配置，还要不伦不类的生成一个配置文件和一个 JS 文件，再从 index.html 里面导入？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当然，Webpack 生态还是很丰富的，后来出来了一个 https://github.com/asfktz/autodll-webpack-plugin 尝试了之后。感觉很赞。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br></pre></td></tr></table></figure><p>可惜在 mac 上一切安好，Windows 上晴天霹雳，debug 了一下，发现是这个库的一个依赖库对 windows 的路径处理好像还有点小问题。而公司的前端小伙伴是 Windowser, 只好作罢。</p><p>Macer 可以先用试试，至于 Windowser, 那就去这个 ISSUE 下面催催作者吧… 哈哈哈</p><blockquote><p>update: 现在 windows 已经可以用了。</p></blockquote><h2 id="0x03-代码质量工程管理"><a href="#0x03-代码质量工程管理" class="headerlink" title="0x03 代码质量工程管理"></a>0x03 代码质量工程管理</h2><h3 id="1-语义化与可读性"><a href="#1-语义化与可读性" class="headerlink" title="1. 语义化与可读性"></a>1. 语义化与可读性</h3><h3 id="2-提取公共逻辑（通过-Service-Mixin-来）"><a href="#2-提取公共逻辑（通过-Service-Mixin-来）" class="headerlink" title="2. 提取公共逻辑（通过 Service, Mixin 来）"></a>2. 提取公共逻辑（通过 Service, Mixin 来）</h3><h3 id="3-CSS-管理"><a href="#3-CSS-管理" class="headerlink" title="3. CSS 管理"></a>3. CSS 管理</h3><p>在项目中，我采用 SCSS 来管理 CSS 代码，</p><p>过去的时候有两种 css 的代码命名方法</p><p>第一种，我管他叫做<strong>配置式写法</strong>，通过将 CSS 语法的几个片段转化成名称，从而实现快速配置出效果的的 CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fl</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fr</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mr10</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pb10</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>这种写法对于简单页面来说确实也是可以使用的。缺点就是当页面变得复杂一些的时候，则比较难控制这种短小精捍（不直观）的变量。比如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tmd01</span>&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span></span><br><span class="line">  font-size: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2d3c48</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请脑补一下我的黄人问号脸</p></blockquote><p>当然，如果用得好的话，自然是 OK, 如果用不好的话，</p><p>后来进入了嵌套写法时代（感谢伟大的 Rails 社区出的 SASS）, 下面的语法都是 SCSS.</p><p>第二种写法就变成了这样</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.actions</span> &#123;</span><br><span class="line">  <span class="selector-class">.card_wrapper</span> &#123;</span><br><span class="line">    <span class="selector-class">.card</span> &#123;</span><br><span class="line">      <span class="selector-class">.title</span> &#123;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.content</span> &#123;</span><br><span class="line">        <span class="selector-class">.list</span> &#123;</span><br><span class="line">          <span class="selector-class">.fa</span> &#123;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外加变量和 mixin 以及函数的话，基本上就可以完成代码的组织了。</p><p>这种写法倒是比原来不知道高到哪里去了，但问题依旧存在，比如 title,content 这些玩意太多，完完全全的看不懂。更加糟糕的事情是，有的小伙伴直接是乱用嵌套，也不用伪类和伪选择器，从而达到单页面调出来小伙比较快，但因为代码不能重用，调多个页面的时候速度巨慢无比。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.apage &#123;</span><br><span class="line">  bbizlogic &#123;</span><br><span class="line">    .actions &#123;</span><br><span class="line">      .card_wrapper &#123;</span><br><span class="line">        .card &#123;</span><br><span class="line">          .title &#123;</span><br><span class="line">          &#125;</span><br><span class="line">          .content &#123;</span><br><span class="line">            .list &#123;</span><br><span class="line">              .fa &#123;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我本人推荐（其实我是写 Python Web 后端的，逃… ) 代码风格比较倾向于 BEM 命名，关于 BEM 的介绍，请参考简单心理团队的教程。</p><ul><li><a href="https://jiandanxinli.github.io/2016-08-11.html">https://jiandanxinli.github.io/2016-08-11.html</a></li><li><a href="https://juejin.im/post/58d0e5caa22b9d00643e8b51">https://juejin.im/post/58d0e5caa22b9d00643e8b51</a></li></ul><p>然而，最好的方式，就是读一个非常使用 SCSS 来组织项目的 CSS 代码的成熟项目。</p><p>我推荐两个：</p><ul><li>BOOTSTRAP V4: Bootstrap V4 使用 SCSS 来写</li><li>ELEMENT UI: 饿了么的团队出的，前段时间从 v1 版本升级到 v2 版本，发现网站大部分样式都没有出现大变动，在这里给个赞。</li></ul><h4 id="0-先从整体上设计好骨架"><a href="#0-先从整体上设计好骨架" class="headerlink" title="0. 先从整体上设计好骨架"></a>0. 先从整体上设计好骨架</h4><p>接着才是 HTML, 然后才是 CSS</p><p>现在前端入行的人越来越多，很多的新手前端 er 会用比较快的思维来编写，这就导致代码质量奇差无比。</p><ul><li>哎，我看看，面粉加多了，我加点水，水加多了，我再加点面粉。</li><li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li><li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li><li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li><li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li></ul><p>当设计出来的网页本身的 HTML 写的就很混乱，CSS 能写的好在哪里呢？</p><p>命名都很混乱，遑论代码可维护性？</p><p>可以多去参考一些成熟的项目的 CSS 是怎么命名的呀，HTML 是怎么设计的呀</p><h4 id="1-Scoped-的滥用"><a href="#1-Scoped-的滥用" class="headerlink" title="1. Scoped 的滥用"></a>1. Scoped 的滥用</h4><p>我印象中，有个小伙伴把一个比较大的 CSS 库多次 import 到被 Scoped 的组件中，于是开发时猛然发现 head 处多了大量的 style 标签，除了 css 选择器后面随机的属性 hash, 文件内容都一样。</p><blockquote><p>公共组件往往可以通过嵌套和加前缀的方式来防止污染。如果 scoped 的属性里面有成吨的 style, 慎用 import.</p></blockquote><p>还有小伙伴喜欢在很多七七八八的组件各种 import scss. 其实对于中小型项目，完全可以直接全局一个文件 style 即可。</p><p>我现在的做法，是直接在 src 的上方直接用 gulp 搭建一个只用来编译 SCSS 到 CSS 的项目，每次编译后输出到页面里面。</p><p>如果项目是小项目，建议直接在 app.vue 里面 import pages</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── common</span><br><span class="line">├── fonts</span><br><span class="line">├── global.scss</span><br><span class="line">├── index.scss</span><br><span class="line">├── mixins</span><br><span class="line">├── pages.scss</span><br><span class="line">└── reset.scss</span><br></pre></td></tr></table></figure><h4 id="2-保持代码的通用性"><a href="#2-保持代码的通用性" class="headerlink" title="2. 保持代码的通用性"></a>2. 保持代码的通用性</h4><p>一般，当同一段逻辑出现三次的时候，是要停下来重构一下的，这样的话，就可以节省很多时间。</p><p>套用在 CSS 的样式上也是如此。</p><h2 id="0x04-Tmux-和-Tmuxnator-打造工作流"><a href="#0x04-Tmux-和-Tmuxnator-打造工作流" class="headerlink" title="0x04 Tmux 和 Tmuxnator 打造工作流"></a>0x04 Tmux 和 Tmuxnator 打造工作流</h2><p>具体参考我的文章 <a href="l">用 Tmux 和 Tmuxnator 打造工作流</a></p><hr><p>ChangeLog:</p><ul><li><strong>2017-09-25</strong> 初始化本文</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;之前草草整理过一些 Vue 的小技巧，最近温习了一遍文档，重聊一遍。&lt;/p&gt;
&lt;p&gt;鉴于 VueCLI 越做越臃肿，我最后还是选择了自己搭架子。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/twocucao/vue-starter-kit&quot;&gt;https://github.com/twocucao/vue-starter-kit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x01-项目结构&quot;&gt;&lt;a href=&quot;#0x01-项目结构&quot; class=&quot;headerlink&quot; title=&quot;0x01 项目结构&quot;&gt;&lt;/a&gt;0x01 项目结构&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 根文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public/ &lt;span class=&quot;comment&quot;&gt;# 部署文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;src/ &lt;span class=&quot;comment&quot;&gt;# 源码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.babelrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.editorconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.eslintignore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.eslintrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.gitignore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.postcssrc.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LICENSE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jsconfig.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;package-lock.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;package.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webpack.common.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webpack.dev.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webpack.dll.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webpack.prod.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端开发" scheme="http://twocucao.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
    <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
    <category term="项目经验" scheme="http://twocucao.xyz/tags/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Tone Color</title>
    <link href="http://twocucao.xyz/2018/07/27/ToneColor/"/>
    <id>http://twocucao.xyz/2018/07/27/ToneColor/</id>
    <published>2018-07-27T14:02:16.000Z</published>
    <updated>2018-09-17T15:20:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>不定期更新。</p><a id="more"></a><h2 id="0x01-摄影与录像"><a href="#0x01-摄影与录像" class="headerlink" title="0x01 摄影与录像"></a>0x01 摄影与录像</h2><h2 id="0x02-接口"><a href="#0x02-接口" class="headerlink" title="0x02 接口"></a>0x02 接口</h2><h2 id="0x03-Sony-录像-Picture-Profile"><a href="#0x03-Sony-录像-Picture-Profile" class="headerlink" title="0x03 Sony 录像 Picture Profile"></a>0x03 Sony 录像 Picture Profile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PP1: &quot;Movie&quot;</span><br><span class="line">PP2: &quot;Still&quot;</span><br><span class="line">PP3: &quot;Natural&quot;</span><br><span class="line">PP4: &quot;Faithful&quot;</span><br><span class="line">PP5: &quot;Cine1&quot;</span><br><span class="line">PP6: &quot;Cine2&quot;</span><br><span class="line">PP7: &quot;S-Log2&quot;</span><br><span class="line">PP8: &quot;S-Log3&quot; [S-Gamut3.Cine]</span><br><span class="line">PP9: &quot;S-Log3&quot; [S-Gamut3]</span><br></pre></td></tr></table></figure><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><hr><p>ChangeLog:</p><ul><li><strong>2018-07-27</strong> 初始化本文</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;不定期更新。&lt;/p&gt;</summary>
    
    
    
    <category term="摄影" scheme="http://twocucao.xyz/categories/%E6%91%84%E5%BD%B1/"/>
    
    
    <category term="Vlog" scheme="http://twocucao.xyz/tags/Vlog/"/>
    
  </entry>
  
  <entry>
    <title>人像摄影指北</title>
    <link href="http://twocucao.xyz/2018/07/17/Portrait/"/>
    <id>http://twocucao.xyz/2018/07/17/Portrait/</id>
    <published>2018-07-17T12:17:32.000Z</published>
    <updated>2018-09-17T15:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><h3 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h3><h2 id="0x01-风格特点"><a href="#0x01-风格特点" class="headerlink" title="0x01 风格特点"></a>0x01 风格特点</h2><h3 id="小清新"><a href="#小清新" class="headerlink" title="小清新"></a>小清新</h3><ul><li>安静</li><li>温暖</li><li>舒适</li><li>平缓</li><li>清新</li><li>淡雅</li><li>自然</li><li>干净</li><li>随意</li><li>青春的小故事，小情绪</li></ul><h3 id="色调"><a href="#色调" class="headerlink" title="色调"></a>色调</h3><p>冷色系</p><p>蓝天<br>大海<br>白色窗纱</p><p>青色 / 蓝色 / 绿色</p><p>衣服：白衬衫<br>背景：白色窗纱<br>曝光补偿</p><h2 id="0x02-拍摄场景和服装搭配"><a href="#0x02-拍摄场景和服装搭配" class="headerlink" title="0x02 拍摄场景和服装搭配"></a>0x02 拍摄场景和服装搭配</h2><h2 id="0x03-器材与参数设置"><a href="#0x03-器材与参数设置" class="headerlink" title="0x03 器材与参数设置"></a>0x03 器材与参数设置</h2><h2 id="0x04-学会用光"><a href="#0x04-学会用光" class="headerlink" title="0x04 学会用光"></a>0x04 学会用光</h2><p>最佳时间：日出日落前后两小时。</p><h3 id="直射光"><a href="#直射光" class="headerlink" title="直射光"></a>直射光</h3><h4 id="顺光角度"><a href="#顺光角度" class="headerlink" title="顺光角度"></a>顺光角度</h4><p>优点：面部充分受光，皮肤细腻，光滑，水嫩。背景细节丰富，颜色亮丽。<br>缺点：面部扁平</p><h4 id="侧光角度"><a href="#侧光角度" class="headerlink" title="侧光角度"></a>侧光角度</h4><p>优点：五官非常有立体感<br>缺点：容易造成阴阳脸</p><p>PS: 白种人五官立体，高鼻梁，高眉骨，眼神深邃，立体感强，而黄种人一般面部比较平，一般需要借助侧面打光的的效果。</p><p>一般选择 30 度左右即可，看模特身材，要么拍摄对象偏向光源或者摄影师移动。</p><h4 id="逆光角度"><a href="#逆光角度" class="headerlink" title="逆光角度"></a>逆光角度</h4><p>优点：主体的轮廓光，以及画面中的光晕。</p><p>注意点：</p><ul><li>避免选择比较明亮的天空作为背景</li><li>如果正逆光太过明亮，则选择侧逆光，或者主体部分遮挡光晕</li><li>大黑脸的问题：设置相机曝光补偿 / 点测光。闪光灯，反光板，白色的墙面，书籍。</li></ul><h3 id="散射光"><a href="#散射光" class="headerlink" title="散射光"></a>散射光</h3><p>阴天，树荫</p><p>画面比较单调，人物缺乏立体感，可以通过增加主体的颜色鲜艳度或者加上背景的一些对比（但不要喧宾夺主）</p><h3 id="夜晚人造灯"><a href="#夜晚人造灯" class="headerlink" title="夜晚人造灯"></a>夜晚人造灯</h3><p>商店的微侧面灯光，加上后面的光斑</p><h3 id="室内光"><a href="#室内光" class="headerlink" title="室内光"></a>室内光</h3><ol><li>避免直射光。选择散射光。</li><li>跳闪，反光板</li></ol><h3 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h3><ol><li>让模特走动，然后观察光线，可以先拍一下，查看照片情况</li><li>偏色可以考虑调整白平衡</li><li>杂色过多可以调整</li><li>单光源的，可以考虑墙面 / 闪光灯塑造人瘦脸胖，或者直接暴力点，拿手或者其他东西遮挡。</li></ol><h2 id="0x05-摆姿技巧"><a href="#0x05-摆姿技巧" class="headerlink" title="0x05 摆姿技巧"></a>0x05 摆姿技巧</h2><h2 id="0x06-取景技巧"><a href="#0x06-取景技巧" class="headerlink" title="0x06 取景技巧"></a>0x06 取景技巧</h2><h3 id="跟着光线走"><a href="#跟着光线走" class="headerlink" title="跟着光线走"></a>跟着光线走</h3><p>逆光<br>局部光</p><h3 id="跟着背景走"><a href="#跟着背景走" class="headerlink" title="跟着背景走"></a>跟着背景走</h3><p>颜色单一的背景，墙面 / 卷帘门 / 复古色墙壁 / 橙色墙壁 / 蓝天 / 草坪<br>颜色单一 + 基本点缀的背景，在单一背景的基础上加上另一个单一颜色，对比强烈，但是又不喧宾夺主</p><h3 id="跟着线条走"><a href="#跟着线条走" class="headerlink" title="跟着线条走"></a>跟着线条走</h3><ul><li>栏杆 / 护栏<ul><li>模特坐 / 靠 / 趴</li></ul></li><li>台阶 / 窗台</li><li>两排树 / 过道 / 走廊</li></ul><h3 id="巧用前景遮挡物"><a href="#巧用前景遮挡物" class="headerlink" title="巧用前景遮挡物"></a>巧用前景遮挡物</h3><ul><li>虚化掉墙 / 栏杆 / 护栏之类的遮挡物可以引导视线</li></ul><h3 id="花卉绿植"><a href="#花卉绿植" class="headerlink" title="花卉绿植"></a>花卉绿植</h3><p>上下结构，也包括了构图<br>单簇，也包括了构图</p><h2 id="0x08-人像后期"><a href="#0x08-人像后期" class="headerlink" title="0x08 人像后期"></a>0x08 人像后期</h2><h3 id="磨皮"><a href="#磨皮" class="headerlink" title="磨皮"></a>磨皮</h3><p>磨皮包含：</p><p>去污<br>明度<br>饱和度<br>色相</p><h4 id="简易磨皮-HSL-清晰度"><a href="#简易磨皮-HSL-清晰度" class="headerlink" title="简易磨皮 HSL + 清晰度"></a>简易磨皮 HSL + 清晰度</h4><p>使用场景</p><p>具体操作</p><ol><li>降低清晰度 = 磨皮</li><li>提升 HSL 橙色 明度 = 提亮皮肤</li><li>降低 HSL 橙色 饱和度 = 皮肤更白</li><li>微调 HSL 橙色 色相 = 皮肤更粉或者黄一些</li><li>提亮 相机校准-蓝色-饱和度 = 让皮肤更加粉嫩通透</li></ol><h4 id="插件磨皮"><a href="#插件磨皮" class="headerlink" title="插件磨皮"></a>插件磨皮</h4><p>Portraiture</p><h4 id="高反差保留磨皮"><a href="#高反差保留磨皮" class="headerlink" title="高反差保留磨皮"></a>高反差保留磨皮</h4><p>高反差保留磨皮，通过通道计算，选出皮肤中脏点污点，然后曲线提亮。</p><h4 id="高低频磨皮"><a href="#高低频磨皮" class="headerlink" title="高低频磨皮"></a>高低频磨皮</h4><p>高底频 = 图层分为高频图层与低频图层，高频就是所谓的质感（头发，纹理，细节等）, 低频就是光影，也就是皮肤的明暗。在低频图层用插件磨皮或者污点修复，图层工具随意涂抹，也不会影响皮肤的纹路。</p><p>复制两个图层，命名为高频和低频。</p><ul><li>低频启用滤镜-模糊-高斯模糊，值 =6</li><li>高频启用图像-应用图像，图层 = 低频，混合 = 相加，缩放 =2</li><li>高频混合模式改为线性光，然后污点去除。</li></ul><h4 id="中性灰磨皮"><a href="#中性灰磨皮" class="headerlink" title="中性灰磨皮"></a>中性灰磨皮</h4><h4 id="双曲线磨皮"><a href="#双曲线磨皮" class="headerlink" title="双曲线磨皮"></a>双曲线磨皮</h4><h3 id="胶片风格-VSCO"><a href="#胶片风格-VSCO" class="headerlink" title="胶片风格 VSCO"></a>胶片风格 VSCO</h3><h4 id="Modern-Films"><a href="#Modern-Films" class="headerlink" title="Modern Films"></a>Modern Films</h4><p>Modern Films is an excellent all-around pack, emulating the look of contemporary, popular film stocks. Classic, clean, and universal, this collection is well-balanced and ideal for an array of settings, from wedding photography to editorial, and everything in between.</p><h4 id="Classic-Films"><a href="#Classic-Films" class="headerlink" title="Classic Films"></a>Classic Films</h4><p>Classic Films is a diverse pack of film emulations that recreates the look of many discontinued and expired film stocks. With a vintage-inspired and slightly gritty aesthetic, this collection is perfect for lifestyle, wedding, and portrait photography.</p><h4 id="Instant-Films"><a href="#Instant-Films" class="headerlink" title="Instant Films"></a>Instant Films</h4><p>Instant Films features digital emulations of beautiful tones and magical tints. Classic and nostalgic, this highly-stylized collection recreates the looks of traditional instant films.</p><h4 id="Slide-Films"><a href="#Slide-Films" class="headerlink" title="Slide Films"></a>Slide Films</h4><p>Slide Films features digital emulations of positive film — a slide film that produces a positive image when developed. With high contrasts and bold colors, this collection is ideal for travel, landscape, street, and fashion photography.</p><h4 id="Archetype-Films"><a href="#Archetype-Films" class="headerlink" title="Archetype Films"></a>Archetype Films</h4><p>Archetype Films is a collection of mass market, consumer film emulations from the golden era of analog. With familiar fade and grit aesthetics, VSCO Film 05 captures the nostalgia of old childhood photos, and is great for portraits, weddings, and lifestyle photography.</p><h4 id="Alternative-Process-Films"><a href="#Alternative-Process-Films" class="headerlink" title="Alternative Process Films"></a>Alternative Process Films</h4><p>Alternative Process Films is a well-balanced pack that includes a wide range of push and pull processed looks, which alter grain, contrast, and richness. It also includes cross processed looks, which are best suited for dramatic color effects and vibrancy. From subtle enhancements to bold stylistic editing, this collection is ideal for outdoor and lifestyle photography, modern portraiture, and sunwashed settings.</p><h4 id="Eclectic-Films"><a href="#Eclectic-Films" class="headerlink" title="Eclectic Films"></a>Eclectic Films</h4><p>Eclectic Films features a wide range of looks in our largest release to date, with 18 films and over 100 presets in total. The spectrum of this collection translates to versatility in use and includes muted, vivid, tungsten-balanced, and black and white films — all of which embody an elegant and modern aesthetic. This pack is ideal for most settings and subjects, particularly portraits, night photography, and architecture.</p><h3 id="小清新日系"><a href="#小清新日系" class="headerlink" title="小清新日系"></a>小清新日系</h3><h3 id="港系风格"><a href="#港系风格" class="headerlink" title="港系风格"></a>港系风格</h3><p>高对比，欠曝光，部分过曝光</p><p>图层 1 高斯模糊 screen 25% 复制一层 soften light 50%</p><hr><p>ChangeLog:</p><ul><li><strong>2018-07-17</strong> 初始化本文</li><li><strong>2018-09-17</strong> 重修文字</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;h3 id=&quot;本文目录&quot;&gt;&lt;a href=&quot;#本文目录&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="写在人生的边上" scheme="http://twocucao.xyz/categories/%E5%86%99%E5%9C%A8%E4%BA%BA%E7%94%9F%E7%9A%84%E8%BE%B9%E4%B8%8A/"/>
    
    
    <category term="摄影" scheme="http://twocucao.xyz/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>摄影入门指北</title>
    <link href="http://twocucao.xyz/2018/07/10/PhotographyDevice/"/>
    <id>http://twocucao.xyz/2018/07/10/PhotographyDevice/</id>
    <published>2018-07-09T23:38:19.000Z</published>
    <updated>2018-11-24T05:04:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><h3 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h3><h2 id="0x01-硬件选择"><a href="#0x01-硬件选择" class="headerlink" title="0x01 硬件选择"></a>0x01 硬件选择</h2><h3 id="机身"><a href="#机身" class="headerlink" title="机身"></a>机身</h3><p>a6000 是笔者的第一款相机，a6500 是第二款相机。</p><p>之所以这么选择，其实原因很简单 — 因为贫穷限制了我的设备。</p><p>如果觉得花在机身和镜头的钱可以在 3W-4W 左右，出门右转索尼 A7RM3 + 中高端镜头配置。</p><p>在预算不足的情况下，为什么是 A6000 和 A6500？</p><blockquote><p>A6000 基本上入门微单的性价比之王。</p></blockquote><p>所以，我刚入门的时候，选择的是 A6000，当然，如果站在现在的需求角度来说的话，肯定应该是一步到位，直接 A6500 合适（因为现在舍得花这个钱了，当时不舍得）。</p><p>当时选择 a6000</p><ol><li>具备足够使用的基本功能</li><li>对焦速度快</li><li>性价比高</li><li>WIFI/NFC 导图，Sony Play Memory 还是很实用的。</li></ol><p>当然，其实这些特点往往都会有个前提，即：</p><p>比如说对焦速度快，我实际想说的是，在这个价位下，对焦速度快。</p><p>机身往往代表的是机身性能和操作体验上的不同。也就是说，如果只是基本的拍照，比如说只拍人物小清新，A6500 和 A6000 都可以胜任。</p><p>我觉得有什么是 A6500 做得到但是 A6000 做不到的呢</p><p>但比如说，你拍运动场景或者是拍视频，A6000 的对焦速度明显就跟不上了。究其原因，无非是对焦点位数量少，机器处理性能也不足。究其本质经济原因，无非就是一个字 – 穷。<br>但比如说，你拍完照片相机需要写照片到 SD 卡中。这个过程对于 A6000 是同步的，也就是等待写入完毕才可以进行操作。但是对于 A6500 几乎算是异步的（我猜应该是图片渲染是同步，写入是异步，但由于渲染速度比较快，写入速度比较慢，所以将写入做成了异步）</p><p>我觉得有什么是 A6500 改善了我的拍照工作流，但是 A6000 没有改善我的工作流呢？</p><ul><li>更加流畅：机身性能摆在那</li><li>无脑的对焦：触屏对焦 + 加上更加强悍的追焦系统</li><li>更好的防抖：在不带三脚架的情况下，五轴防抖的功能可以减少我拍糊掉的几率，特别是光线不够好的情况下。可以让我在一些场景里不需要动用三脚架，轻装上阵。拥有更好的防抖时候可以在 M 档选择更慢的快门，弥补光线上的不足。</li></ul><p>笔者比较倾向于抓拍，这两点可以让笔者显著提升抓拍数量和质量，从而选出高质量照片。</p><p>摄影是一个综合性的技能，如果你的目的是拍出好看的照片，而不是尝试各种风格 / 场景。 笔者认为选一个超出预算的器材会让你的工作流更加顺畅一些，但并不是必须要换个。</p><ol><li>机身性能不足，防抖功能不足的情况下，可以通过预先在心里构思好拍摄。心里多做些推演工作，就好了。</li><li>光线亮度不够，一来可以通过提升周围环境的亮度来解决（打光，闪光灯加柔光罩之类），二来可以提升光圈大小，带上三脚架来提升曝光。三来比如你在夜景下，可以找选择一个比较好场景来拍。比如借助商场的灯完全可以拍个人像大片出来。天时地利人和就没得调整么？非要选个乌漆麻黑的伸手不见五指的拍夜景？</li></ol><p>虽然说，一般是越贵的机身越好。</p><p>但机身真的那么万能嘛：</p><ul><li>能解决烂手骚操作么？</li><li>能解决烂场景强行拍好片么？</li><li>能解决审美问题么？</li><li>能引导模特的摆姿么？</li><li>能解决外部光线么？</li><li>能解决构图么？</li><li>能解决后期不会调整么？</li></ul><p>帮助真的很有限。</p><h3 id="镜头"><a href="#镜头" class="headerlink" title="镜头"></a>镜头</h3><p>我入手了几款镜头，用下来觉得还行的镜头如下：</p><h4 id="适马-E-16"><a href="#适马-E-16" class="headerlink" title="适马 E 16"></a>适马 E 16</h4><ul><li>根本目标：夜拍</li><li>优点：画质好，光学防抖，夜景强行压 ISO</li></ul><h4 id="索尼-E-18135"><a href="#索尼-E-18135" class="headerlink" title="索尼 E 18135"></a>索尼 E 18135</h4><ul><li>根本目标：用于覆盖焦距</li><li>优点：画质好，光学防抖</li><li>使用状况： 带出</li></ul><h4 id="索尼-E-50-1-8"><a href="#索尼-E-50-1-8" class="headerlink" title="索尼 E 50 1.8"></a>索尼 E 50 1.8</h4><ul><li>根本目标：人像室外专用</li><li>优点：近中距离拍妹子好看拍妹子好看拍妹子好看</li><li>缺点：小室内拍摄距离比较不好控制。</li><li>使用状况： 带出</li></ul><h4 id="适马-E-30-1-4"><a href="#适马-E-30-1-4" class="headerlink" title="适马 E 30 1.4"></a>适马 E 30 1.4</h4><ul><li>根本目标：室内人像、室外人像纪实</li><li>优点：近距拍妹子好看拍妹子好看拍妹子好看</li><li>缺点：近中距内拍摄容易乱入路人甲。</li><li>使用状况： 带出</li></ul><h4 id="七巧匠-E-12-2-8"><a href="#七巧匠-E-12-2-8" class="headerlink" title="七巧匠 E 12 2.8"></a>七巧匠 E 12 2.8</h4><ul><li>根本目标：覆盖广角</li><li>优点：经济</li><li>使用状况： 带出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 自带头 E 16-50相对而言一般般闲置（不过录像效果还是不错滴）</span><br><span class="line"># 索尼 E 55-210远距离拍摄 &#x2F; 小动物看情况（不过拍出来的画面比较肉）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="灯光"><a href="#灯光" class="headerlink" title="灯光"></a>灯光</h3><p>布光是摄影师必备技能之一</p><p>我入手了一款闪光灯 + 柔光罩，用于弥补某些暗场景下的光线不足的问题。毕竟笔者是业余爱好者，也懒得动用专业的设备了，太折腾。</p><p>光线过强的时候，也不是无解，比如阴凉地，透光物体遮挡（透光白色伞 / 镂空的帽子）</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>摄影包</li><li>充电器</li><li>存储卡</li><li>其他牌子的电池</li></ul><h2 id="0x02-摄影参数"><a href="#0x02-摄影参数" class="headerlink" title="0x02 摄影参数"></a>0x02 摄影参数</h2><p>曝光正常的参数</p><h3 id="曝光三要素"><a href="#曝光三要素" class="headerlink" title="曝光三要素"></a>曝光三要素</h3><h4 id="光圈"><a href="#光圈" class="headerlink" title="光圈"></a>光圈</h4><h5 id="如何影响照片"><a href="#如何影响照片" class="headerlink" title="如何影响照片"></a>如何影响照片</h5><p>通关孔的大小影响：<br>        - 进光量</p><h5 id="影响照片参数"><a href="#影响照片参数" class="headerlink" title="影响照片参数"></a>影响照片参数</h5><p>亮度<br>景深</p><h5 id="使用基本方法"><a href="#使用基本方法" class="headerlink" title="使用基本方法"></a>使用基本方法</h5><ol><li>大光圈</li></ol><ul><li>背景虚化</li><li>提升快门速度</li></ul><ol start="2"><li>小光圈</li></ol><ul><li>整体清晰</li><li>降低快门速度</li></ul><h4 id="快门"><a href="#快门" class="headerlink" title="快门"></a>快门</h4><h5 id="如何影响照片-1"><a href="#如何影响照片-1" class="headerlink" title="如何影响照片"></a>如何影响照片</h5><p>进光时间</p><h5 id="影响照片参数-1"><a href="#影响照片参数-1" class="headerlink" title="影响照片参数"></a>影响照片参数</h5><h5 id="使用基本方法-1"><a href="#使用基本方法-1" class="headerlink" title="使用基本方法"></a>使用基本方法</h5><h4 id="感光度"><a href="#感光度" class="headerlink" title="感光度"></a>感光度</h4><h5 id="如何影响照片-2"><a href="#如何影响照片-2" class="headerlink" title="如何影响照片"></a>如何影响照片</h5><pre><code>CCD 感光敏感度</code></pre><h5 id="影响照片参数-2"><a href="#影响照片参数-2" class="headerlink" title="影响照片参数"></a>影响照片参数</h5><pre><code>1. 亮度2. 噪点</code></pre><h5 id="使用基本方法-2"><a href="#使用基本方法-2" class="headerlink" title="使用基本方法"></a>使用基本方法</h5><pre><code>1. 通常情况下设置比较低2. 除非是光圈和快门被限制</code></pre><h4 id="曝光三要素综合应用"><a href="#曝光三要素综合应用" class="headerlink" title="曝光三要素综合应用"></a>曝光三要素综合应用</h4><pre><code>1. 大光圈2. 大长焦3. 镜头离主体要近4. 主体离背景要远</code></pre><h3 id="曝光模式"><a href="#曝光模式" class="headerlink" title="曝光模式"></a>曝光模式</h3><p>自动 / 手动控制曝光</p><ol><li>智能自动</li><li>P 档：光圈和快门由相机设置，但是 ISO/ 对焦区域 / 测光模式 （比如夜景，当然，可能需要三脚架）</li><li>A 档：快门由相机设置，光圈和 ISO 可以自己调节 （比如大光圈的人像，小光圈的风景）</li><li>S 档：快门和 ISO 由相机设置，快门 /ISO 由自己调节。（比如快速移动的物品 / 慢速快门拍尾灯拉丝）</li><li>M 档：手动档位，可以用于更加细腻的操作。</li></ol><h3 id="测光模式"><a href="#测光模式" class="headerlink" title="测光模式"></a>测光模式</h3><ol><li>多重测光 （多重测光的弊病在于如果整体较亮，而主体较暗，就容易拍不亮主体）</li><li>点测光 （适用于拍摄夕阳 / 逆光人像，缺点就是 ISO 的值会比较高）</li></ol><h3 id="曝光补偿"><a href="#曝光补偿" class="headerlink" title="曝光补偿"></a>曝光补偿</h3><p>笔者一般会用 LR 做一个简单的后期，所以用 RAW 作为图片格式。</p><p>RAW 格式要设好曝光参数，一定要曝光相对准确，因为 raw 里面的曝光参数受相机设置直接影响。曝光不准确，特别是曝光过度，希望通过 raw 里面调整，是很难做到曝光准确的画面层次的。</p><h2 id="0x03-拍清照片"><a href="#0x03-拍清照片" class="headerlink" title="0x03 拍清照片"></a>0x03 拍清照片</h2><h3 id="对焦错误"><a href="#对焦错误" class="headerlink" title="对焦错误"></a>对焦错误</h3><pre><code>1. 半按快门对焦2. 对焦对偏了    a. 拍人对焦不准 : 笑脸 / 人脸检测    b. 拍静物 / 风景时对焦不准 : 自由点对焦    c. 给自己打光3. 对焦模式不对    a. AF-S 单次自动对焦 - 静物    b. AF-C 连续自动对焦 - 动物    c. AF-A 智能自动对焦 - 对方可能动 / 可能不动</code></pre><h3 id="手抖了"><a href="#手抖了" class="headerlink" title="手抖了"></a>手抖了</h3><pre><code>1. 拍照姿势不对2. 安全快门时间 = 1 / （焦距 * 1.5)3. 光线比较暗导致快门低于 1/30 s</code></pre><h2 id="0x04-布光"><a href="#0x04-布光" class="headerlink" title="0x04 布光"></a>0x04 布光</h2><h2 id="0xEE-结论"><a href="#0xEE-结论" class="headerlink" title="0xEE 结论"></a>0xEE 结论</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;h3 id=&quot;本文目录&quot;&gt;&lt;a href=&quot;#本文目录&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="写在人生的边上" scheme="http://twocucao.xyz/categories/%E5%86%99%E5%9C%A8%E4%BA%BA%E7%94%9F%E7%9A%84%E8%BE%B9%E4%B8%8A/"/>
    
    
    <category term="摄影" scheme="http://twocucao.xyz/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>记一个有趣的 Python ZipInfo 的副作用</title>
    <link href="http://twocucao.xyz/2018/06/29/PythonBugWithZipfile/"/>
    <id>http://twocucao.xyz/2018/06/29/PythonBugWithZipfile/</id>
    <published>2018-06-29T00:31:11.000Z</published>
    <updated>2018-06-29T01:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>昨天修了一个有趣的 BUG，顺手分享出来。</p><h3 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">▼ 0x00 前言 : section</span><br><span class="line">    本文目录 : section</span><br><span class="line">▼ 0x01 场景 1 - 空文件打包问题 : section</span><br><span class="line">▼ 0x02 场景 2 - zipinfo 带来的一个副作用 : section</span><br><span class="line">▼ 0x03 处理 BUG 的一种姿势 : section</span><br><span class="line">▼ 0xEE 结论 : section</span><br></pre></td></tr></table></figure><h2 id="0x01-场景-1-空文件打包问题"><a href="#0x01-场景-1-空文件打包问题" class="headerlink" title="0x01 场景 1 - 空文件打包问题"></a>0x01 场景 1 - 空文件打包问题</h2><p>原始场景是这样的，在打包文件夹的时候，一切正常，但如果打包空文件夹的时候，就出问题了。</p><p><img src="https://user-gold-cdn.xitu.io/2018/6/29/164492147450b039?w=756&h=256&f=png&s=37953"></p><p>精简了这一段代码，当打包空文件夹的时候，大致逻辑如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">zfile &#x3D; zipfile.ZipFile(&quot;tmp.zip&quot;,&#39;w&#39;)</span><br><span class="line"># 递归打包所有子文件</span><br><span class="line">zfile.close()</span><br></pre></td></tr></table></figure><p>这段代码很明显是造了一个空 zip 文件。</p><p>这个和我要的效果还不太一样。我要的是这个 zip 文件包含空目录 tmp/ 好，调整了一下代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">zfile &#x3D; zipfile.ZipFile(&quot;tmp.zip&quot;,&#39;w&#39;)</span><br><span class="line">zif &#x3D; zipfile.ZipInfo(&quot;tmp&#x2F;&quot;)</span><br><span class="line">zfile.writestr(zif,&quot;&quot;)</span><br><span class="line"># 递归打包所有子文件</span><br><span class="line">zfile.close()</span><br></pre></td></tr></table></figure><p>嗯，现在下载成功了。解压缩也正常。</p><h2 id="0x02-场景-2-zipinfo-带来的一个副作用"><a href="#0x02-场景-2-zipinfo-带来的一个副作用" class="headerlink" title="0x02 场景 2 - zipinfo 带来的一个副作用"></a>0x02 场景 2 - zipinfo 带来的一个副作用</h2><p>显然，如果上面的东西皆大欢喜的结束了，我就没必要写这篇文章了。</p><p>问题来了，当我递归打包子文件的时候，文件会莫名其妙多了一个文件夹出来。</p><p>比如我打包文件夹 tmp，tmp 的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tree tmp</span><br><span class="line">tmp</span><br><span class="line">├── test.md</span><br><span class="line"></span><br><span class="line">1 file</span><br></pre></td></tr></table></figure><p>打包完毕多出了一个 tmp 文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tree tmp</span><br><span class="line">tmp</span><br><span class="line">├── test.md</span><br><span class="line">└── tmp</span><br><span class="line"></span><br><span class="line">1 directory, 1 file</span><br></pre></td></tr></table></figure><p>这种多出一个 tmp 的文件夹就是按照我这种方式使用 zipinfo 副作用。</p><p>WTF，怀着老鹿蹒跚的内心，打开了《伤心太平洋》：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一波还未平息</span><br><span class="line">一波又来侵袭</span><br><span class="line">茫茫人海 狂风暴雨</span><br></pre></td></tr></table></figure><p>用代码复现一波场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 先造一个测试文件夹</span><br><span class="line">mkdir &#x2F;tmp&#x2F;test_folder&#x2F;</span><br><span class="line">touch &#x2F;tmp&#x2F;test_folder&#x2F;test.md</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import zipfile</span><br><span class="line">file_path &#x3D; &quot;&#x2F;tmp&#x2F;test_folder&#x2F;test.md&quot;</span><br><span class="line">rel_name &#x3D; &quot;test.md&quot;</span><br><span class="line">zfile &#x3D; zipfile.ZipFile(&quot;tmp.zip&quot;,&#39;w&#39;)</span><br><span class="line">zif &#x3D; zipfile.ZipInfo(&quot;tmp&#x2F;&quot;)</span><br><span class="line">zfile.writestr(zif,&quot;&quot;)</span><br><span class="line">zfile.write(file_path, rel_name)</span><br><span class="line">zfile.close()</span><br></pre></td></tr></table></figure><h2 id="0x03-处理-BUG-的一种姿势"><a href="#0x03-处理-BUG-的一种姿势" class="headerlink" title="0x03 处理 BUG 的一种姿势"></a>0x03 处理 BUG 的一种姿势</h2><ol><li>场景能否描述出来 - 描述不出来的就没法准确定位问题</li><li>能否复现 - 复现不出来的 BUG 最难调试</li><li>业务问题还是技术问题 - 业务问题可能要和别人打交道，技术问题可能要多翻翻文档之类的。</li><li>时间是否来得及 - 如果时间来的及，就想办法弄懂，填坑；时间来不及就想办法规避，绕坑。</li></ol><p>前三点自然不用说了，直接第四点，时间上还算充裕，</p><ol><li>我翻了半天 zipfile 模块，并没有理解这个 BUG 的出现原因。</li><li>好，退后一步是人生，用代码规避掉这个问题。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">if 是空文件夹：</span><br><span class="line">    zfile &#x3D; zipfile.ZipFile(&quot;tmp.zip&quot;,&#39;w&#39;)</span><br><span class="line">    zif &#x3D; zipfile.ZipInfo(&quot;tmp&#x2F;&quot;)</span><br><span class="line">else 不是空文件夹：</span><br><span class="line">    zfile.writestr(zif,&quot;&quot;)</span><br><span class="line">    zfile.write(file_path, rel_name)</span><br><span class="line">zfile.close()</span><br></pre></td></tr></table></figure><h2 id="0xEE-结论"><a href="#0xEE-结论" class="headerlink" title="0xEE 结论"></a>0xEE 结论</h2><p>其实处理大部分的 BUG 基本上就是这么个思路：</p><ul><li>往前一步是黄昏：打破沙锅问到底的去探究，填坑</li><li>退后一步是人生：没那么多时间搞明白细枝末节，用代码规避掉这个神奇 BUG，先让业务可以跑通，绕坑。</li></ul><p>最后，欢迎关注我的知乎专栏，咱们聊聊我所知道的 Python / NodeJS/ Mac / DevOps 全栈（干）工程师的一些有趣的技术</p><ul><li><a href="https://zhuanlan.zhihu.com/twocucao">MG 的编程小屋</a></li><li><a href="https://github.com/twocucao">MG 的 Github</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;昨天修了一个有趣的 BUG，顺手分享出来。&lt;/p&gt;
&lt;h3 id=&quot;本文目录&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="后端开发" scheme="http://twocucao.xyz/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Nas" scheme="http://twocucao.xyz/tags/Nas/"/>
    
  </entry>
  
  <entry>
    <title>Synology 群晖 NAS 入门指北</title>
    <link href="http://twocucao.xyz/2018/06/10/SynologyNas/"/>
    <id>http://twocucao.xyz/2018/06/10/SynologyNas/</id>
    <published>2018-06-10T03:52:36.000Z</published>
    <updated>2018-06-17T00:22:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>百度云的人工智障总是误删我的文件，于是开始寻找其他存储方案。决定入手一台 NAS.</p><h3 id="组装机-品牌机"><a href="#组装机-品牌机" class="headerlink" title="组装机 / 品牌机"></a>组装机 / 品牌机</h3><p>视具体情况，笔者缺乏足够的精力去折腾，如果精力足够，我还是很倾向于自己组装一台 nas 的。不过，现在年纪大了，还是老老实实买个品牌的 NAS 好了，折腾大抵是年轻人的事情。</p><p>为啥买群晖？因为看到很多喜欢折腾的人都安装黑群晖，所以直接买了个白群晖。</p><h3 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">▼ 0x00 前言 : section</span><br><span class="line">    组装机 &#x2F; 品牌机 : section</span><br><span class="line">  ▼ 0x01 安装 &#x2F; 配置 : section</span><br><span class="line">      STEP-0 设备 : section</span><br><span class="line">      STEP-1 组装 : section</span><br><span class="line">      STEP-2 组网 : section</span><br><span class="line">      STEP-3 安装系统 : section</span><br><span class="line">  ▼ 0x02 一些私人化的需求 : section</span><br><span class="line">      2.1 内网 NAS 使用 : section</span><br><span class="line">      2.2 外网 NAS 使用 : section</span><br><span class="line">    ▼ 2.3 与百度云结合 : section</span><br><span class="line">        如何同步数据 : section</span><br><span class="line">      2.3 Time Machine : section</span><br><span class="line">    0xEE 结论 : section</span><br></pre></td></tr></table></figure><h2 id="0x01-安装-配置"><a href="#0x01-安装-配置" class="headerlink" title="0x01 安装 / 配置"></a>0x01 安装 / 配置</h2><h3 id="STEP-0-设备"><a href="#STEP-0-设备" class="headerlink" title="STEP-0 设备"></a>STEP-0 设备</h3><ul><li>路由器一台</li><li>网线一根</li><li>Synology 一台，笔者使用的是 DS218j 2 盘位 NAS （这款家用基本上够用了）</li><li>硬盘两个，推荐 WD 的红盘或者希捷的狼盘。</li></ul><h3 id="STEP-1-组装"><a href="#STEP-1-组装" class="headerlink" title="STEP-1 组装"></a>STEP-1 组装</h3><p>把硬盘安装在 nas 里需要三个步骤</p><ol><li>打开 nas 外壳</li><li>把硬盘塞进去</li><li>把盒子盖上</li></ol><h3 id="STEP-2-组网"><a href="#STEP-2-组网" class="headerlink" title="STEP-2 组网"></a>STEP-2 组网</h3><ol><li>如果你的路由器可以直连宽带接口的话，则直接连接。</li><li>如果你的路由器上一级有个路由器的话，可以使用桥接模式，把这台路由器连到上一台路由器上。</li></ol><p>nas 建议直接用网线连接到路由器上。</p><p>那么，现在你的手机 / 笔记本 / 平板等等放到该局域网中。</p><blockquote><p>PS: 为什么需要这么做？因为所有环境放在一个局域网内的话，安全性和速度较好。</p></blockquote><h3 id="STEP-3-安装系统"><a href="#STEP-3-安装系统" class="headerlink" title="STEP-3 安装系统"></a>STEP-3 安装系统</h3><p>打开群晖机器开关，在同一局域网内的访问</p><p><a href="http://find.synology.com/">http://find.synology.com/</a></p><p>然后按照要求进行注册登陆</p><p>期间需要注册群晖的账号，以及本台机器的用户名和密码。</p><h2 id="0x02-一些私人化的需求"><a href="#0x02-一些私人化的需求" class="headerlink" title="0x02 一些私人化的需求"></a>0x02 一些私人化的需求</h2><h3 id="2-1-内网-NAS-使用"><a href="#2-1-内网-NAS-使用" class="headerlink" title="2.1 内网 NAS 使用"></a>2.1 内网 NAS 使用</h3><p>笔者使用的是 Mac 电脑，在 Finder 中直接链接服务器，输入 smb://mynas 即可访问。剩下的操作基本上和本地磁盘使用起来没有什么大的差别。</p><p>对于手机和平板，安装群晖对应的 Drive 即可。</p><h3 id="2-2-外网-NAS-使用"><a href="#2-2-外网-NAS-使用" class="headerlink" title="2.2 外网 NAS 使用"></a>2.2 外网 NAS 使用</h3><p>外网可以直接使用群晖的账号登录群晖的官网，接着控制这台群晖的机器进行下载。但速度不够。</p><p>使用下来感觉效果并不好。建议阅读下一章和百度云配合使用。</p><h3 id="2-3-与百度云结合"><a href="#2-3-与百度云结合" class="headerlink" title="2.3 与百度云结合"></a>2.3 与百度云结合</h3><p>百度云这个东西让人又爱又恨。</p><ul><li>爱的是，容量不错，部分热门资源的下载速度也可。</li><li>恨的是，老是莫名其妙删掉我的文件。冷门资源那下载速度真的是….</li></ul><p>而现在，现在我的文件就分为两种：</p><ul><li>一种是合规的不可丢失的文件</li><li>一种是合规的可丢失的文件</li></ul><p>像我这样贯彻社会主义核心价值观的人，所有文件都是合法合规的。接受文件的审查倒也能接受，但人工智障老是误删我的合法文件这尼玛给我工作生活带来困扰啊。</p><p>所以，</p><ul><li>对于丢失零容忍的文件可以考虑放在 Nas 中。</li><li>对于丢失可容忍的文件可以考虑放在百度云中。</li><li>对于日常使用的文档可以放在百度云中。</li></ul><h4 id="如何同步数据"><a href="#如何同步数据" class="headerlink" title="如何同步数据"></a>如何同步数据</h4><p>鉴于百度云开放了应用接口，群晖的 Nas 也可以实现百度云同步数据到 Nas 上。</p><p>安装 CloudSync 选择第三方供应商。百度云，完成授权。</p><p>设置双向同步到 DMS 的某个文件夹下。比如，笔者同步百度云的文件到本地 DSM /CloudDrive/BaiduPan/ 即完成最基本的设置了。</p><p><strong>如何同步本地数据到云端呢？</strong></p><p>然后随便复制一个文件到该文件夹下，然后在百度云的 Web 端的『我的应用数据 /Cloud Sync 』 文件夹下就可以看到资源了。</p><p><strong>那么，如何同步云端的数据到本地呢？</strong></p><p>把云端的数据（文件 / 文件夹）拖动到 『我的应用数据 /Cloud Sync 』里即可。</p><p>像一些非私密性的文件，扔百度云就好了。</p><p>这个 Nas 就相当于一个远程的拥有高容量的弱鸡服务器，可以用来跑跑一些下载任务之类。</p><h3 id="2-3-Time-Machine"><a href="#2-3-Time-Machine" class="headerlink" title="2.3 Time Machine"></a>2.3 Time Machine</h3><p>Nas 另一个吸引我的地方就是可以 Time Machine 进行备份了。步骤大致如下。</p><ol><li>『共享文件夹』里面新建文件夹 Time Machine</li><li>『文件服务』中开启 SMB/AFP 服务，在高级设置中启用 Bonjour , 启用 SMB/AFP 的 TimeMachine 播送，指定为 Time Machine 文件夹</li><li>『用户管理』里新建用户 TimeMachine, 容量限制一下，建议 1TB 即可。</li><li>打开 Mac 电脑，选择磁盘，然后开始备份。</li></ol><p>PS: 但我这边初次备份 TM 的时候，需要备份 300+GB 的文件，速度确实堪忧。和直接外接接口连接硬盘完全没法比。但慢慢备份下来，其实速度也能接受。</p><h2 id="0xEE-结论"><a href="#0xEE-结论" class="headerlink" title="0xEE 结论"></a>0xEE 结论</h2><p>NAS 解决了我的几个痛点。</p><ul><li>跨平台共享文件</li><li>文件集中化管理</li><li>硬盘容量大</li><li>私密性较好</li><li>不会有人工智障来删我东西</li><li>速度在可接受范围内。我在用 LR 修图的时候只是稍微比本地的慢一点。</li></ul><p>不过似乎还有一些其他的功能可以继续发掘一下。以后有机会再分享一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;百度云的人工智障总是误删我的文件，于是开始寻找其他存储方案。决定入手一台 NAS.&lt;/p&gt;
&lt;h3 </summary>
      
    
    
    
    <category term="后端开发" scheme="http://twocucao.xyz/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Nas" scheme="http://twocucao.xyz/tags/Nas/"/>
    
  </entry>
  
  <entry>
    <title>CPython 源码初步阅读笔记</title>
    <link href="http://twocucao.xyz/2018/06/06/CPython/"/>
    <id>http://twocucao.xyz/2018/06/06/CPython/</id>
    <published>2018-06-06T02:08:12.000Z</published>
    <updated>2018-06-06T14:23:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>先挖坑，以后有机会填</p><p>├── Grammar # 语法<br>├── Include # C 语言头文件，如果需要自定义模块扩展 Python, 也需要这块。<br>├── Modules # C 语言编写的模块，对速度要求高，比如 random<br>├── Objects # 内建对象 包含整数，list,dict 等。<br>├── Parser # Scanner 和 parser<br>├── Python # 各种 Python 共享库<br>├── Lib # Python 自带的所有标准库<br>├── Doc # 文档<br>├── Tools # 一些 Python 程序，方便扩展 Python<br>├── Misc # 不清楚放哪，就放这里好了<br>├── PC # Windows 编译姿势<br>├── PCbuild # Windows 编译姿势<br>├── Mac # Mac 上编译姿势<br>├── Programs<br>├── README.rst<br>├── aclocal.m4<br>├── config.guess<br>├── config.sub<br>├── configure<br>├── configure.ac<br>├── install-sh<br>├── m4<br>├── pyconfig.h.in<br>├── setup.py<br>├── LICENSE<br>├── Makefile.pre.in</p><h2 id="Ch01-Python-对象初探"><a href="#Ch01-Python-对象初探" class="headerlink" title="Ch01 Python 对象初探"></a>Ch01 Python 对象初探</h2><p>一切都是对象</p><p>类型对象</p><ul><li>内置对象：int / string / dict</li><li>自定义对象：class A</li></ul><p>实例对象</p><h3 id="1-1-Python-内的对象"><a href="#1-1-Python-内的对象" class="headerlink" title="1.1 Python 内的对象"></a>1.1 Python 内的对象</h3><p>Python 里的对象就是 C 中结构体在堆上申请的一块内存。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;先挖坑，以后有机会填&lt;/p&gt;
&lt;p&gt;├── Grammar # 语法&lt;br&gt;├── Include </summary>
      
    
    
    
    <category term="后端开发" scheme="http://twocucao.xyz/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="CPython" scheme="http://twocucao.xyz/tags/CPython/"/>
    
  </entry>
  
  <entry>
    <title>Python 自动化工具 Fabric 支持 Python3 了</title>
    <link href="http://twocucao.xyz/2018/05/22/Fabric2/"/>
    <id>http://twocucao.xyz/2018/05/22/Fabric2/</id>
    <published>2018-05-22T13:11:03.000Z</published>
    <updated>2018-09-15T08:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>当大家还在纠结 Python2 与 Python3 的时候，我其实早就入了 python3 的门了。</p><p>后来</p><ul><li><del>我总算学会了如何去爱。<del></li><li>我喜欢的工具陆陆续续支持了 Python3</li><li>Scrapy 支持了 Python3</li><li>Ansible 支持了 Python3</li></ul><p>只有 Fabric 这个工具，死撑着没有支持 Python3 的的迹象。</p><p>2018-05-08 的时候，Fabric 悄悄升级了 2.0 版本。</p><p>而就在前两天，我升级网站的时候，突然发现 fabric (1.14 版本） 不能用了。</p><p>查了一下版本，发现 fabric 更新到了 2.0 版本，支持了 python3.4</p><p>在发现这个问题之后，火速刷了一波官方文档，把手头 Fabric 1.14 版本的脚本做了一些升级。</p><h3 id="从-V1-到-V2"><a href="#从-V1-到-V2" class="headerlink" title="从 V1 到 V2"></a>从 V1 到 V2</h3><p>Fabric v2 基于 invoke 和 paramiko 两个库构建而成。</p><ul><li>invoke 库提供了 subprocess command execution 和 command-line</li><li>paramiko 提供了 ssh 协议实现</li></ul><p>在这两者的基础上，做了一些扩展。</p><p>甚至，如果你只用其中的本地功能，你都完全不需要使用 fabric, 直接用 invoke 即可。没错，我已经打算把我的本地脚本全部使用 invoke Python3 化了。</p><p>v1 版本和 v2 版本初步用起来，个人觉得 v1 用起来 API 更加符合直觉一些。</p><p>这东西怎么用呢？</p><p>我们先定义 fabfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># fabfile.py</span><br><span class="line">from invoke import task</span><br><span class="line"></span><br><span class="line">def expand_path(c, path):</span><br><span class="line">    return &#39;&quot;$(echo %s)&quot;&#39; % path</span><br><span class="line"></span><br><span class="line">def exists(c, path):</span><br><span class="line">    cmd &#x3D; &#39;stat %s&#39; % expand_path(c, path)</span><br><span class="line">    return c.run(cmd, warn&#x3D;True, hide&#x3D;True).ok</span><br><span class="line"></span><br><span class="line">@task</span><br><span class="line">def deploy(c):</span><br><span class="line">    c.local(&quot;youcmd&quot;)</span><br><span class="line">    c.put()</span><br><span class="line">    c.get()</span><br><span class="line">    c.run()</span><br><span class="line">    c.run(&quot;sudo youcmd&quot;)</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">@task</span><br><span class="line">def other_stuff(c):</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>需要注意的是，invoke 里面默认的 replace_env 设置为了 False ,fabric 里面给 runner 设置了 replace_env 为 True , 这也就意味着默认情况下，执行 c.local 的时候会找不到自定义的环境变量，这意味着：</p><ol><li>你的 PATH 被重置了，这意味着你用 brew 安装的软件可能已经完全找不到了。</li><li>你的环境变量 LANG 并不一定是 en_US.UTF-8 了</li></ol><p>于是设置一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># ~&#x2F;.fabric.py</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line">run &#x3D; &#123;</span><br><span class="line">    &quot;replace_env&quot;: False</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我要部署的时候直接执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fab -H webserver01,webserver02,webserver03,webserver04 deploy</span><br></pre></td></tr></table></figure><p>到这里大家基本上看出来了，我并没有在文件中 import fabric 只是简单了配置了一个配置文件和执行一下 fab 命令。</p><p>这个 v2 版本的 fabric 相当于 invoke 的包装。但我们也可以显式的 import fabric 里面的东西进行更加进阶的操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;当大家还在纠结 Python2 与 Python3 的时候，我其实早就入了 python3 的门了。</summary>
      
    
    
    
    <category term="后端开发" scheme="http://twocucao.xyz/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Django" scheme="http://twocucao.xyz/tags/Django/"/>
    
    <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
    <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
    <category term="RestAPI" scheme="http://twocucao.xyz/tags/RestAPI/"/>
    
  </entry>
  
</feed>
