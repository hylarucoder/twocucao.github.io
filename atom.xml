<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MG的编程小屋</title>
  <subtitle>Get Busy Living, Or Get Busy Dying</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://twocucao.xyz/"/>
  <updated>2018-02-15T02:51:44.248Z</updated>
  <id>http://twocucao.xyz/</id>
  
  <author>
    <name>Micheal Gardner</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticSearch CheatSheet</title>
    <link href="http://twocucao.xyz/2018/02/10/ElasticSearchCheatSheet/"/>
    <id>http://twocucao.xyz/2018/02/10/ElasticSearchCheatSheet/</id>
    <published>2018-02-10T02:25:39.000Z</published>
    <updated>2018-02-15T02:51:44.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 ElasticSearch 相关和命令。</p>
<p>不定期更新。</p>
<p>最早使用 ElasticSearch 是两年前了。最近准备用 Django 写一个全栈式的应用，借用强大的 ES 来做搜索。这是我在写程序之余写这篇文章的原因。</p>
<p>官网介绍 ElasticSearch 不仅仅是全文搜索，也可以结构化搜索（这里用结构化查询会更准确一些），分析，处理人类语言，地理位置，以及关系。</p>
<p>然而，我在项目使用过程中还是主要用到了全文搜索以及推荐。</p>
<p>不用其他的主要原因是因为 ES 尺有所短寸有所长：</p>
<ol>
<li>geo 处理方面 postgis 完全就是神一般的存在。为什么还要用 ES 呢？</li>
<li>关系型数据库的核心不就是处理关系？复杂的关系肯定还是放在关系数据库里面。</li>
</ol>
<p>highlighted search snippets, and search-as-you-type and did-you-mean suggestions.</p>
<p>我对 ElasticSearch 在后台组件里的作用在于搜索与推荐：</p>
<ol>
<li>整站的搜索功能<ul>
<li>全文搜索</li>
</ul>
</li>
<li>推荐<ul>
<li>依据某几个维度的数据进行排序</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h2 id="0x01-安装，配置，基本-shell-命令"><a href="#0x01-安装，配置，基本-shell-命令" class="headerlink" title="0x01 安装，配置，基本 shell 命令"></a>0x01 安装，配置，基本 shell 命令</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 执行如下的命令</div><div class="line">curl &apos;http://localhost:9200/?pretty&apos;</div><div class="line"># 输出结果</div><div class="line">&#123;</div><div class="line">  &quot;name&quot; : &quot;XOGvo8a&quot;,</div><div class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</div><div class="line">  &quot;cluster_uuid&quot; : &quot;fAwp341bQzalzBxRFyD1YA&quot;,</div><div class="line">  &quot;version&quot; : &#123;</div><div class="line">    &quot;number&quot; : &quot;6.2.1&quot;,</div><div class="line">    &quot;build_hash&quot; : &quot;7299dc3&quot;,</div><div class="line">    &quot;build_date&quot; : &quot;2018-02-07T19:34:26.990113Z&quot;,</div><div class="line">    &quot;build_snapshot&quot; : false,</div><div class="line">    &quot;lucene_version&quot; : &quot;7.2.1&quot;,</div><div class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</div><div class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><h3 id="3-插件"><a href="#3-插件" class="headerlink" title="3. 插件"></a>3. 插件</h3><p>ES 的插件有很多，比这使用现在最新的版本是 6.2.1 版本。</p>
<blockquote>
<p>PS: 两年前我用的还是 2.3.3 版本。新版本有很多插件配置起来已经有所不同了。比如说 head 现在已经被独立出来作为一个单纯的网页，chrome 商店可以直接下载。</p>
</blockquote>
<h2 id="0x02-ElasticSearch-配套工具"><a href="#0x02-ElasticSearch-配套工具" class="headerlink" title="0x02 ElasticSearch 配套工具"></a>0x02 ElasticSearch 配套工具</h2><p>建议使用 Head 插件来进行简单的查询与调试。</p>
<h2 id="0x03-ElasticSearch-基础概念"><a href="#0x03-ElasticSearch-基础概念" class="headerlink" title="0x03 ElasticSearch 基础概念"></a>0x03 ElasticSearch 基础概念</h2><h3 id="3-1-Elasticsearch-CRUDE-以及基本操作"><a href="#3-1-Elasticsearch-CRUDE-以及基本操作" class="headerlink" title="3.1 Elasticsearch CRUDE 以及基本操作"></a>3.1 Elasticsearch CRUDE 以及基本操作</h3><p>ES 使用的是 RESTFUL API 接口</p>
<p>这也就意味着：</p>
<ul>
<li>PUT 创建记录</li>
<li>GET 获取记录</li>
<li>POST 更新记录</li>
<li>DELETE 删除记录</li>
<li>HEAD 是否存在</li>
</ul>
<h2 id="0x04-全文搜索的基本概念"><a href="#0x04-全文搜索的基本概念" class="headerlink" title="0x04 全文搜索的基本概念"></a>0x04 全文搜索的基本概念</h2><h3 id="4-1-全文搜索遇到的挑战"><a href="#4-1-全文搜索遇到的挑战" class="headerlink" title="4.1 全文搜索遇到的挑战"></a>4.1 全文搜索遇到的挑战</h3><p>在最初开源搜索引擎技术还不是很成熟的时候，我们一般都会使用 RDBMS 进行简单搜索。</p>
<p>简单搜索，也就是我们常常使用的 like 查询（当然，有的数据库可以使用正则表达式）</p>
<p>这种方式是简单暴力的查询方式，优点是实现起来简单暴力。缺点是在这个场景下性能和准确度很差。</p>
<p>举例：</p>
<ul>
<li>假如站点里文章数量比较大，并且文章内容比较长，则进行一次全表查询，效率可想而知。当然，做好分库分表读写分离也是能用的。</li>
<li>如果我要对搜索到的词语进行高亮，则实现方式就只能是把查询到的文章放在应用层里面进行批量替换。</li>
<li>RDBMS 似乎完全不懂各种语言之间的区别。<ul>
<li>『停止词 / 常用词』有的字我是不需要的，比如南京的狗，其实我想搜的是南京狗，这里的『的』就不是我需要的。</li>
<li>『同义词』有的字我需要的是他的同义词，比如日本黄狗，其实我想搜的是柴犬。</li>
<li>『附加符号』假如说我们搜索一个声调 [nǐ], 总不能让用户打出 [nǐ] 进行搜索吧？总归要转为 ni 才能方便搜索</li>
<li>『词根形式』对于一个单词，假如是动词可能有时态上的区分，如果是名词，可能有单复数的区分。假如我搜 mice, 其实同样的 mouse 也应该被搜索出来。但有事用这种方式也会矫枉过正，比如 organizations 的 原型其实并不是 organization 而是，organ. （当然，overstemming 和 understemming 也是两个不可忽视的问题）<ul>
<li>Number: fox, foxes</li>
<li>Tense: pay, paid, paying</li>
<li>Gender: waiter, waitress</li>
<li>Person: hear, hears</li>
<li>Case: I, me, my</li>
<li>Aspect: ate, eaten</li>
<li>Mood: so be it, were it so</li>
<li>PS: 万幸的是，中文处理中木词根这个概念。我也就不深入这块了。</li>
</ul>
</li>
<li>『拼写问题』 周杰棍与周杰伦</li>
<li>『分词 / 识别词』中文不像英文，词和词之间是完全没有空格的，也就是说，中文天然要比英文多一个关于分词的步骤。</li>
</ul>
</li>
</ul>
<h3 id="4-2-全文搜索的索引时与查询时"><a href="#4-2-全文搜索的索引时与查询时" class="headerlink" title="4.2 全文搜索的索引时与查询时"></a>4.2 全文搜索的索引时与查询时</h3><ul>
<li>索引时，指的是 ElasticSearch 在存储文档的阶段。</li>
<li>查询时，指的是 ElasticSearch 在查询文档的阶段。</li>
</ul>
<h4 id="1-索引时-ES-做了什么？"><a href="#1-索引时-ES-做了什么？" class="headerlink" title="1. 索引时 ES 做了什么？"></a>1. 索引时 ES 做了什么？</h4><blockquote>
<p>这里我们略过定义 index,type,document 仅仅指某个 field 被赋值 document 被保存的时候针对这个被赋值的 text 类型 field 的处理。</p>
</blockquote>
<ul>
<li>第一步：<strong>文本经过 analyzer 处理</strong></li>
<li>第二步：<strong>形成倒排索引</strong></li>
</ul>
<p>先看第一步：</p>
<p>通常在定义 field 的时候显式指定 analyzer（分析器）.</p>
<p>这个 analyzer 一般的作用如下：</p>
<ul>
<li>STEP 1: 令牌化文本为独立的词</li>
<li>STEP 2: 词语转小写</li>
<li>STEP 3: 去除常见的停止词</li>
<li>STEP 4: 获取词的词根的原型</li>
</ul>
<p>不同的 analyzer 作用大同小异，拿我们常用的 <a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="external">https://github.com/medcl/elasticsearch-analysis-ik</a> 的话，则也是类似的步骤（下面步骤是我猜测的，没看源码）</p>
<ol>
<li>令牌化文本为独立的词语 - 分词，并且令牌化文本为独立的词汇</li>
<li>除去常见的停止词</li>
<li>匹配同义词</li>
<li>….</li>
</ol>
<p>先看经过第一步之后，就可以进入第二步形成倒排索引了，此时，倒排索引之于 ElasticSearch 可以类比于 btree 之于 MySQL 或者 Gist 之于 PostgreSQL.</p>
<p>那么，倒排索引包含哪些东西呢？</p>
<ul>
<li><strong>Terms dictionary</strong><ul>
<li>已排序完毕的 terms, 以及包含这些 terms 的 documents 的数量。</li>
</ul>
</li>
<li><strong>Postings List</strong><ul>
<li>哪些 document 包含这些词</li>
</ul>
</li>
<li><strong>Terms frequency</strong><ul>
<li>每个 term 在这些文章的频率</li>
</ul>
</li>
<li><strong>Position</strong><ul>
<li>每个 term 在每个 document 的位置，这是为了便于 phrase query 和 proximity query</li>
<li>高频词的 phrase query 可能导致 上 G 的数据被读取。虽然有 cache, 但是远远不够。</li>
</ul>
</li>
<li><strong>Offsets</strong><ul>
<li>每个 term 在每个 document 的开始和结束，便于高亮</li>
</ul>
</li>
<li><strong>Norms</strong><ul>
<li>用于给短 field 更多权重的因素.(TODO: 啥玩意）</li>
</ul>
</li>
</ul>
<p>减少停止词仅仅可以减少少部分 terms dictionary 和 postings list , 但是 positions 和 offsets data 对 index 的影响则是非常大的。</p>
<h4 id="2-查询时-ES-做了什么？"><a href="#2-查询时-ES-做了什么？" class="headerlink" title="2. 查询时 ES 做了什么？"></a>2. 查询时 ES 做了什么？</h4><ul>
<li>第一步：<strong>文本经过 analyzer 处理</strong></li>
<li>第二步：<strong>查询倒排索引</strong></li>
</ul>
<h4 id="停止词"><a href="#停止词" class="headerlink" title="停止词"></a>停止词</h4><p>使用停止词是减少索引大小的一种方式，那么，哪些词语可以呗当做停止词呢？</p>
<p>低频词语：低频词语具备高权重<br>高频词语：高频词语具备低权重</p>
<p>当然，是否是高频词语依据个人经验主要依据两点来判断：</p>
<ul>
<li>具体情况：比如在英文中，and/the 之类的会比较多，但是中文会比较少。同样的，中文里面其他语言的东西会少一些。正文八经的文章出现不正经的词汇的概率会低。在技术问里面，『数据库』属于高频词汇，但是在比如简书之类的，可能梦想 / 鸡汤 / 超级 / 震惊会多一些。掘金的『前端』两个字绝壁是高频词。</li>
<li>抽样跑新词发现的程序。社区里多的是新词发现的脚本。对文章内容或者从搜索框记录下来的搜索词跑一下新词发现的程序，然后人工筛选，应该可以发现更多的高频和低频的词汇。</li>
</ul>
<p>是不是用上停止词就好了呢？并不是。</p>
<p>比如：</p>
<ul>
<li>假如停止词里面包含了 not , 那么 happy 和 not happy 搜索出来的结果则一致。</li>
<li>假如停止词里面包含了或，那么，如果有个乐队名字叫做『或或』, 则搜索不出来。</li>
<li>假如停止词里面包含了 to / be / not / or , 则莎士比亚的名言 『To be, or not to be』 则搜索不出来。</li>
</ul>
<h4 id="同义词"><a href="#同义词" class="headerlink" title="同义词"></a>同义词</h4><p>同义词也有很多种：</p>
<ol>
<li>平级关系：插、戳、刺、扎</li>
<li>包含关系：成人包含男人和女人</li>
<li>不容易分清楚关系：<ul>
<li>炒，煎，贴，烹，炸，溜<br>　- 汆，涮，煮，炖，煨，焐<br>　- 蒸，鲊<br>　- 卤，酱，熏，烤，炝，腌，拌，焗</li>
</ul>
</li>
</ol>
<p>用法：</p>
<blockquote>
<p>同义词使用自定义 filter , 并且在新建 analyzer 并指定 filter 即可。</p>
</blockquote>
<table>
<thead>
<tr>
<th>-</th>
<th>索引时</th>
<th>查询时</th>
</tr>
</thead>
<tbody>
<tr>
<td>索引大小</td>
<td>耗时变多，同义词被索引，大小更大</td>
<td>耗时几乎不变</td>
</tr>
<tr>
<td>相关性</td>
<td>准确度下降，所有同义词相同 IDF, 则在所有文档的索引记录中，常用词和冷门词权重相同</td>
<td>准确度提升，每个同义词的 IDF 将被校正</td>
</tr>
<tr>
<td>性能</td>
<td>性能下降，查询需要涨到</td>
<td>性能下降，查询被重写，用于查找同义词</td>
</tr>
<tr>
<td>灵活性</td>
<td>变差，同义词法则不改变已存在记录，需重新索引</td>
<td>不变，同义词法则可被更新，无需重新索引</td>
</tr>
</tbody>
</table>
<p>由此可见，大部分场景下的索引时如果没有特别的需求，慎用同义词。</p>
<h4 id="typoes-和拼写错误"><a href="#typoes-和拼写错误" class="headerlink" title="typoes 和拼写错误"></a>typoes 和拼写错误</h4><p>有的时候，用户也会输入错误：</p>
<ul>
<li>口误，把『周杰伦』拼成『周杰棍』</li>
</ul>
<p>这个时候，搜索引擎应该提示一下，您搜索的是不是『周杰伦』呢？</p>
<p>这里面就遇到了一个问题，我们显然知道周杰棍和周杰伦是是相似的，为什么呢？或者说，直观上感知的详细，能用数学方式表达出来吗？</p>
<p>有人说，正则匹配 / 通配符匹配呗。这是一个思路。</p>
<p>Vladimir Levenshtein 和 frederic damerau 给出了一种相似度算法 <a href="https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance" target="_blank" rel="external">https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance</a></p>
<p>一个词组通过转换到另一个词的步数就是其距离：</p>
<ul>
<li>替换：『周杰伦』到『周杰棍』</li>
<li>插入：『周杰』到『周杰棍』</li>
<li>删除：『周杰伦』到『周杰』</li>
<li>相邻字符转换：『周伦杰』和『周杰伦』 , 但是『周杰棍的双节伦』到『周杰伦的双节棍』 并不是相邻字符转换</li>
</ul>
<p>用法：</p>
<blockquote>
<p>指定 “fuzziness”: step 即可</p>
</blockquote>
<p>当 step &gt;=2 的时候，由于每次查询都会遍历 terms 字典，则如果大于 2 的时候遍历 terms 的数量则非常惊人了。</p>
<ul>
<li>方法一：设置 prefix_length, 单词的前面一定长度不进行 fuzzy 匹配。一般设置为 3 （估计这是属于英文的匹配，中文环境做不了参考）;</li>
<li>方法二：设置 max_expansins, 类似于 RDBMS 的 limit, 查询到一定记录之后停止查询。</li>
</ul>
<p>fuzzy match query 也是支持的，比如说，假如你指定 “fuzziness” 为 1, 搜索周杰棍，则将周杰伦，周杰全搜索出来了。似乎搜索的很全面呀，但是问题来了：</p>
<blockquote>
<p>依据 TF/IDF 的高频低权重，低频高权重的计算方式，<strong>周杰棍由于出现次数极少，反而获得了极高的权重。</strong></p>
</blockquote>
<p>所以，一般情况下还是建议作为：</p>
<ul>
<li>search as you type : completion suggester</li>
<li>did you mean : phrase suggester</li>
</ul>
<h3 id="3-3-全文搜索的-ES-解决方案"><a href="#3-3-全文搜索的-ES-解决方案" class="headerlink" title="3.3 全文搜索的 ES 解决方案"></a>3.3 全文搜索的 ES 解决方案</h3><blockquote>
<p>TODO: 全文搜索 RDBMS like 的效率问题。</p>
</blockquote>
<p>全文搜索包含两个重要方面：</p>
<ul>
<li>相关性：通过 TF/IDF , 距离 , 模糊相似度，以及其他算法</li>
<li><p>分析：将大片文字转为 distinct, normalized tokens</p>
</li>
<li><p>Term-Based : term or fuzzy</p>
</li>
<li>Full-Text : match or query_string</li>
</ul>
<p>TERM 查找-&gt;精确查找</p>
<blockquote>
<p>加上 constant_score 和 filter 的话，就成了常亮？麻痹的，这两个又是啥</p>
</blockquote>
<p> inverted index</p>
<p>内部过滤操作：</p>
<p>1.</p>
<h2 id="0x05-调试"><a href="#0x05-调试" class="headerlink" title="0x05 调试"></a>0x05 调试</h2><p>查看 analyzer 的效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /my_index/_analyze</div><div class="line">&#123;</div><div class="line">  <span class="string">"analyzer"</span> : <span class="string">"my_synonyms"</span>,</div><div class="line">  <span class="string">"text"</span> : <span class="string">"Elizabeth is the English queen"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="0x06-Python-SDK"><a href="#0x06-Python-SDK" class="headerlink" title="0x06 Python SDK"></a>0x06 Python SDK</h2><p>官方提供了两个 SDK 方便我们进行日常的开发：</p>
<ul>
<li>elasticsearch</li>
<li>elasticsearch_dsl</li>
</ul>
<h3 id="6-1-与-Python-集成"><a href="#6-1-与-Python-集成" class="headerlink" title="6.1 与 Python 集成"></a>6.1 与 Python 集成</h3><p>前者偏底层一些，后者偏高层一些，高底层关系的有点类似于 sqlalchemy core 和 sqlalchemy orm 之间的关系。</p>
<h3 id="6-2-与-Django-集成"><a href="#6-2-与-Django-集成" class="headerlink" title="6.2 与 Django 集成"></a>6.2 与 Django 集成</h3><h4 id="elasticsearch-analysis-ik-的配置"><a href="#elasticsearch-analysis-ik-的配置" class="headerlink" title="elasticsearch-analysis-ik 的配置"></a>elasticsearch-analysis-ik 的配置</h4><h2 id="0x07-踩坑集"><a href="#0x07-踩坑集" class="headerlink" title="0x07 踩坑集"></a>0x07 踩坑集</h2><ul>
<li>序列问题</li>
</ul>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><a href="https://www.zhihu.com/question/19645541" target="_blank" rel="external">https://www.zhihu.com/question/19645541</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2018-02-15</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 ElasticSearch 相关和命令。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
&lt;p&gt;最早使用 ElasticSearch 是两年前了。最近准备用 Django 写一个全栈式的应用，借用强大的 ES 来做搜索。这是我在写程序之余写这篇文章的原因。&lt;/p&gt;
&lt;p&gt;官网介绍 ElasticSearch 不仅仅是全文搜索，也可以结构化搜索（这里用结构化查询会更准确一些），分析，处理人类语言，地理位置，以及关系。&lt;/p&gt;
&lt;p&gt;然而，我在项目使用过程中还是主要用到了全文搜索以及推荐。&lt;/p&gt;
&lt;p&gt;不用其他的主要原因是因为 ES 尺有所短寸有所长：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;geo 处理方面 postgis 完全就是神一般的存在。为什么还要用 ES 呢？&lt;/li&gt;
&lt;li&gt;关系型数据库的核心不就是处理关系？复杂的关系肯定还是放在关系数据库里面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;highlighted search snippets, and search-as-you-type and did-you-mean suggestions.&lt;/p&gt;
&lt;p&gt;我对 ElasticSearch 在后台组件里的作用在于搜索与推荐：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整站的搜索功能&lt;ul&gt;
&lt;li&gt;全文搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推荐&lt;ul&gt;
&lt;li&gt;依据某几个维度的数据进行排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="后台组件" scheme="http://twocucao.xyz/categories/%E5%90%8E%E5%8F%B0%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="CheatSheet" scheme="http://twocucao.xyz/tags/CheatSheet/"/>
    
      <category term="ElasticSearch" scheme="http://twocucao.xyz/tags/ElasticSearch/"/>
    
      <category term="搜索排序" scheme="http://twocucao.xyz/tags/%E6%90%9C%E7%B4%A2%E6%8E%92%E5%BA%8F/"/>
    
      <category term="搜索引擎" scheme="http://twocucao.xyz/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Docker CheatSheet</title>
    <link href="http://twocucao.xyz/2018/02/10/DockerCheatSheet/"/>
    <id>http://twocucao.xyz/2018/02/10/DockerCheatSheet/</id>
    <published>2018-02-10T01:01:55.000Z</published>
    <updated>2018-02-11T01:14:31.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Docker 相关和命令。</p>
<ul>
<li>Docker 相关概念</li>
<li>Docker 配套工具</li>
<li>Django PostgreSQL RabbitMQ Redis ElasticSearch Sentry 集群 Docker 化</li>
<li>Docker 踩坑记录</li>
</ul>
<p>不定期更新。</p>
<a id="more"></a>
<h2 id="0x01-Docker-相关概念"><a href="#0x01-Docker-相关概念" class="headerlink" title="0x01 Docker 相关概念"></a>0x01 Docker 相关概念</h2><h3 id="1-1-Docker-是什么？"><a href="#1-1-Docker-是什么？" class="headerlink" title="1.1 Docker 是什么？"></a>1.1 Docker 是什么？</h3><p>在认知 Docker 这种相对而言比较新概念的时候，只要从以往的经验中拿出一个词语来概括新词汇即可。</p>
<p>于是，我们便可以这么理解：</p>
<blockquote>
<p>Docker 是一种比虚拟机轻量的用来存放职责比较单一的应用的容器。</p>
</blockquote>
<p>也就是三点：</p>
<ul>
<li>比虚拟机轻量</li>
<li>用来存放职责单一的应用</li>
<li>容器</li>
</ul>
<p>显然这是一种理解，而不是一种定义。</p>
<h3 id="1-2-Docker-是用来做什么的？"><a href="#1-2-Docker-是用来做什么的？" class="headerlink" title="1.2 Docker 是用来做什么的？"></a>1.2 Docker 是用来做什么的？</h3><p>新技术本质是什么？工具也。<br>每一个新的技术都是为了提升效率才被创造出来，那么，究竟 Docker 可以从哪些方面提升我们的效率呢？</p>
<p>我们知道开发一个有些规模的网站的话，需要严格遵守如下的开发流程：</p>
<ul>
<li>编码</li>
<li>测试</li>
<li>集成到系统中</li>
<li>部署</li>
</ul>
<p>但如果人员比较多，则会出现问题，有的人喜欢用 MacOS, 有的人喜欢用 Ubuntu, 开发测试环境怎么统一呢？如果开发人员明明使用的是某个版本的 PostgreSQL, 用了最新的功能，但是测试和运维用的就是老版本的功能怎么办？</p>
<p>部署环境也会有问题，比如，开发部突然想使用更高版本的软件，比如突然需要更多的 Django 应用来负担海量请求的怎么办？Hadoop 不够用怎么办？</p>
<p>当然，思路很简单，开发的时候使用虚拟机，拷贝给大家一起用，部署的时候多创建一些机器，然后上 Ansible 远程操控。即可。</p>
<p>并不是不行，但是 Docker 由于更加轻量，操作粒度更加细腻，我可以销毁镜像，上传镜像，定制镜像，很轻松调整镜像包并且安装挂载文件。</p>
<h2 id="0x02-Docker-初始配置"><a href="#0x02-Docker-初始配置" class="headerlink" title="0x02 Docker 初始配置"></a>0x02 Docker 初始配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker-machine create --driver=virtualbox default</div><div class="line">docker-machine ls</div><div class="line">eval &quot;$(docker-machine env default)&quot;</div></pre></td></tr></table></figure>
<h2 id="0x03-Django-技术栈-Docker-化"><a href="#0x03-Django-技术栈-Docker-化" class="headerlink" title="0x03 Django 技术栈 Docker 化"></a>0x03 Django 技术栈 Docker 化</h2><p>为了理解这个过程，下面我将我 Docker 化 django 应用的流程按照一定步骤演示出来。我将我使用 Django 的部分经验搞出来，做成了一个 django-bpc ，即 django best practice。如果诸位有兴趣研究的话，拿来看看源码倒是倒是非常好。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 演示环境为 MAC, 在此之前，务必安装好 docker for mac 以及 virualbox</span></div><div class="line"><span class="comment"># xxxxxx 为 阿里云分配的容器 registry</span></div><div class="line">docker-machine create --engine-registry-mirror=https://xxxxxx.mirror.aliyuncs.com <span class="_">-d</span> virtualbox default</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">├── AUTHORS.md</div><div class="line">├── HISTORY.md</div><div class="line">├── LICENSE</div><div class="line">├── MANIFEST.in</div><div class="line">├── Makefile</div><div class="line">├── README.md</div><div class="line">├── assets</div><div class="line">├── compose</div><div class="line">│   ├── django</div><div class="line">│   ├── elasticsearch</div><div class="line">│   ├── nginx</div><div class="line">│   ├── postgres</div><div class="line">│   ├── rabbitmq</div><div class="line">│   └── redis</div><div class="line">├── config</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── settings</div><div class="line">│   ├── urls.py</div><div class="line">│   └── wsgi.py</div><div class="line">├── dev.yml</div><div class="line">├── docker-compose.yml</div><div class="line">├── docs</div><div class="line">│   ├── Makefile</div><div class="line">│   ├── exts</div><div class="line">│   ├── make.bat</div><div class="line">│   ├── make_pdf.sh</div><div class="line">│   └── <span class="built_in">source</span></div><div class="line">├── manage.py</div><div class="line">├── pytest.ini</div><div class="line">├── requirements</div><div class="line">│   ├── base.txt</div><div class="line">│   ├── local.txt</div><div class="line">│   ├── production.txt</div><div class="line">│   └── test.txt</div><div class="line">├── scripts</div><div class="line">├── setup.cfg</div><div class="line">├── tests</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── conftest.py</div><div class="line">│   └── test_basics.py</div><div class="line">└── yadjangoblog</div><div class="line">    ├── __init__.py</div><div class="line">    ├── contrib</div><div class="line">    ├── static</div><div class="line">    ├── templates</div><div class="line">    ├── yaaccounts</div><div class="line">    ├── yaadmin</div><div class="line">    ├── yaapi</div><div class="line">    ├── yablog</div><div class="line">    ├── yacommon</div><div class="line">    └── yataskapp</div></pre></td></tr></table></figure>
<h3 id="3-1-开发时"><a href="#3-1-开发时" class="headerlink" title="3.1 开发时"></a>3.1 开发时</h3><h4 id="1-运行所需组件"><a href="#1-运行所需组件" class="headerlink" title="1. 运行所需组件"></a>1. 运行所需组件</h4><p>在开发时候需要使用几个后台的组件</p>
<ul>
<li>PostgreSQL 用于做数据存储</li>
<li>Redis 用于做缓存 和 Session 等等</li>
<li>RedditMQ 用于消息队列</li>
<li>ElasticSearch 用于做搜索与推荐</li>
</ul>
<p>目录中的组件基本上都在这儿了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── compose</div><div class="line">│   ├── django</div><div class="line">│   ├── elasticsearch</div><div class="line">│   ├── nginx</div><div class="line">│   ├── postgres</div><div class="line">│   ├── rabbitmq</div><div class="line">│   └── redis</div></pre></td></tr></table></figure>
<p>进行初步的封装和添加脚本，不直接采用官网的配置需要是因为添加一些的定制版本。</p>
<h4 id="2-Vue-JS-运行环境"><a href="#2-Vue-JS-运行环境" class="headerlink" title="2. Vue.JS 运行环境"></a>2. Vue.JS 运行环境</h4><p>Vue.JS 使用 Vue-Cli 搭建的脚手架还是挺方便的，这个就无需 Docker 化了，需要注意的是，建议配置一下开发时候请求的 API 地址。</p>
<p>我本人用于请求本地地址的 8080 端口，并且 8080 端口映射到 Docker 容器里面的 Django App</p>
<h4 id="3-Django-App"><a href="#3-Django-App" class="headerlink" title="3. Django App"></a>3. Django App</h4><p>配置 Django, 我使用的是 ubuntu 16.04 基础镜像，然后安装必备的依赖。</p>
<p>接着指定 workdir 为当前目录</p>
<p>需要注意的是，Django App 里面需要等待 PostgreSQL 初始化完毕才能进行正常的运行接下来需要运行的命令，比如 runserver 之类的命令。</p>
<p>entrypoint 的左右即是放在命令执行之前，这样的话，重写掉 entrypoint 文件，就可以实现上面的功能了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 本段代码来自 cookiecutter Django</span></div><div class="line">function postgres_ready()&#123;</div><div class="line">python &lt;&lt; END</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> psycopg2</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    conn = psycopg2.connect(dbname=<span class="string">"$POSTGRES_USER"</span>, user=<span class="string">"$POSTGRES_USER"</span>, password=<span class="string">"$POSTGRES_PASSWORD"</span>, host=<span class="string">"postgres"</span>)</div><div class="line"><span class="keyword">except</span> psycopg2.OperationalError:</div><div class="line">    sys.exit(<span class="number">-1</span>)</div><div class="line">sys.exit(<span class="number">0</span>)</div><div class="line">END</div><div class="line">&#125;</div><div class="line"></div><div class="line">until postgres_ready; do</div><div class="line">  &gt;&amp;<span class="number">2</span> echo <span class="string">"Postgres is unavailable - sleeping"</span></div><div class="line">  sleep <span class="number">1</span></div><div class="line">done</div></pre></td></tr></table></figure>
<p>最后封装一些命令到，比如启动 Celery 之类的。</p>
<h4 id="4-Celery-运行环境"><a href="#4-Celery-运行环境" class="headerlink" title="4. Celery 运行环境"></a>4. Celery 运行环境</h4><h4 id="5-其他零散的重要配置"><a href="#5-其他零散的重要配置" class="headerlink" title="5. 其他零散的重要配置"></a>5. 其他零散的重要配置</h4><h3 id="3-2-具体开发"><a href="#3-2-具体开发" class="headerlink" title="3.2 具体开发"></a>3.2 具体开发</h3><p>我编写了一整套 makefile 的命令，我会先进入项目 YaDjangoBlog , 然后执行 make ; 执行 make 之后，显示了我编写的一些便于开发测试的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">sep--sep-a           ========== 开发时命令 ==============</div><div class="line">django-build-up      build and compose up</div><div class="line">force_djnago_build-up django / pg / es</div><div class="line">django-before-up     e.g pg / es / redis</div><div class="line">django-runserver     runserver</div><div class="line">django-celerybeat    celerybeat</div><div class="line">django-celeryworker  celeryworker</div><div class="line">django-just-up       build and up</div><div class="line">django-manager       Enter python manage.py</div><div class="line">django-console       Enter Django Console</div><div class="line">shell                Enter Shell</div><div class="line">dbshell              Enter psql as yadjangoweb</div><div class="line">sep--sep-b           ========== 测试与代码质量 ==============</div><div class="line">lint                 check style with flake8</div><div class="line">test                 run tests quickly with the default Python</div><div class="line">coverage             check code coverage quickly with the default Python</div><div class="line">sep--sep-c           ========== 文档生成相关 ==============</div><div class="line">docs                 generate Sphinx HTML documentation, including API docs</div><div class="line">servedocs            compile the docs watching for changes</div><div class="line">sep--sep-d           ========== 程序发布相关 ==============</div><div class="line">release              package and upload a release</div><div class="line">dist                 builds source and wheel package</div><div class="line">install              install the package to the active Python&apos;s site-packages</div><div class="line">sep--sep-e           ========== Docker 镜像相关 ==============</div><div class="line">build-postgres       &gt; Postgres</div><div class="line">force-build-postgres &gt; Postgres</div><div class="line">build-ubuntu         &gt; base ubuntu</div><div class="line">force_build-ubuntu   &gt; base ubuntu</div><div class="line">build-django         &gt; base django</div><div class="line">force_build-django   &gt; base django</div><div class="line">sep--sep-f           ========== 文件清理相关 ==============</div><div class="line">clean                remove all build, test, coverage and Python artifacts</div><div class="line">clean-build          remove build artifacts</div><div class="line">clean-pyc            remove Python file artifacts</div><div class="line">clean-test           remove test and coverage artifacts</div></pre></td></tr></table></figure>
<h4 id="1-构建镜像"><a href="#1-构建镜像" class="headerlink" title="1. 构建镜像"></a>1. 构建镜像</h4><p>执行 build 命令即可。</p>
<h4 id="2-使用-Tmuxinator-批量运行命令"><a href="#2-使用-Tmuxinator-批量运行命令" class="headerlink" title="2. 使用 Tmuxinator 批量运行命令"></a>2. 使用 Tmuxinator 批量运行命令</h4><p>现在，我有这么一个需求，就是在 iterm 中开启如下的终端：</p>
<ul>
<li>第 1 个终端，运行的命令是 Vue.JS 的启动命令 npm run dev。</li>
<li>第 2 个终端，有两个分屏，其一用于构建 iconfont 字体文件的命令，其二用于 Gulp 动态编译 SCSS 文件的命令。</li>
<li>第 3 个终端，运行的命令是 Django 的 runserver 的命令。</li>
<li>第 4 个终端，有两个分屏，一个是 Django 容器的 bash 环境，另一个是 PostgreSQL 的 命令行环境。</li>
<li>第 5 个终端，有两个分屏，一者运行 Celery Beat，另一者则是运行 Celery Worker.</li>
</ul>
<blockquote>
<p>当然，目前没有添加 redis 和 RabbitMQ 的命令行环境</p>
</blockquote>
<h4 id="3-使用-PyCharm-进行开发"><a href="#3-使用-PyCharm-进行开发" class="headerlink" title="3. 使用 PyCharm 进行开发"></a>3. 使用 PyCharm 进行开发</h4><h3 id="3-3-部署时"><a href="#3-3-部署时" class="headerlink" title="3.3 部署时"></a>3.3 部署时</h3><p>Docker 部署需要解决的问题，是裸机部署的 Docker 化。</p>
<blockquote>
<p>TODO: 目前 Docker 部署的脚本还在编写中，这部分的文字可能后期会调整</p>
</blockquote>
<h4 id="0-Django-生产环境和开发环境之间的区别"><a href="#0-Django-生产环境和开发环境之间的区别" class="headerlink" title="0. Django 生产环境和开发环境之间的区别"></a>0. Django 生产环境和开发环境之间的区别</h4><p>生产环境和开发环境除了一些文字配置上的不同，还有一些不同，比如：</p>
<ol>
<li>新增了 uwsgi / gunicorn 作为新的 web 容器</li>
<li>新增了 Ngnix 作为反向代理</li>
<li>Celery Worker 数量的变化</li>
<li>Supervisor 进程守护</li>
</ol>
<p>首先说第一点带来的区别，我们使用 Django 内置的 runserver 的时候，其实这个命令可以用于做生产环境的 Web 服务器。</p>
<p>比如，只需如此 python manage.py runserver 0.0.0.0:8888</p>
<p>可以用，但不推荐用。没什么负载量。这时候就需要 gunicorn 了。你可以理解 Gunicorn 是进阶的 runserver,</p>
<p>可以参考：<a href="https://docs.djangoproject.com/en/2.0/howto/deployment/wsgi/gunicorn/" target="_blank" rel="external">https://docs.djangoproject.com/en/2.0/howto/deployment/wsgi/gunicorn/</a></p>
<p>同时，Gunicorn 可以进行颗粒度更细致的操作，但负载量不如 uwsgi, 毕竟前者 python 写的，后者是 C 写的。</p>
<p>一般 Gunicorn 也会配上 NGNIX,</p>
<p>简单来说，Nginx 至少可以解决下面的问题：</p>
<ul>
<li>匹配域名</li>
<li>转发请求<ul>
<li>设置请求头</li>
<li>转发本地的静态文件 (static / media）</li>
<li>映射部分请求到 gunicorn , 然后 gunicorn 开启一个线程到 Django</li>
<li>负载均衡</li>
</ul>
</li>
</ul>
<p>需要注意的是 gunicorn 这种关键性的进程，一定要用 Supervisor 进行守护，否则挂掉了就完蛋了，</p>
<h4 id="1-裸机部署-Django-程序"><a href="#1-裸机部署-Django-程序" class="headerlink" title="1. 裸机部署 Django 程序"></a>1. 裸机部署 Django 程序</h4><h4 id="2-Docker-部署"><a href="#2-Docker-部署" class="headerlink" title="2. Docker 部署"></a>2. Docker 部署</h4><h2 id="0x04-Docker-踩坑记录"><a href="#0x04-Docker-踩坑记录" class="headerlink" title="0x04 Docker 踩坑记录"></a>0x04 Docker 踩坑记录</h2><h3 id="4-1-PostgreSQL-的初始化"><a href="#4-1-PostgreSQL-的初始化" class="headerlink" title="4.1 PostgreSQL 的初始化"></a>4.1 PostgreSQL 的初始化</h3><p>当 Docker 化 PostgreSQL 的时候，必须要把一些初始化脚本放在 docker-entrypoint-initdb.d 中，才能初始化，笔者在进行测试的时候多次发现无法进行初始化，究其原因，经过查找，如果没有及时删除 Volume 的话，则无论怎么初始化，或者 Build, 每一次都会挂载原来的文件夹。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ADD init_django_db.sh /docker-entrypoint-initdb.d/init_django_db.sh</div></pre></td></tr></table></figure>
<h3 id="4-2-清空所有-Image"><a href="#4-2-清空所有-Image" class="headerlink" title="4.2 清空所有 Image"></a>4.2 清空所有 Image</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Delete all containers</span></div><div class="line">docker rm $(docker ps <span class="_">-a</span> -q)</div><div class="line"><span class="comment"># Delete all images</span></div><div class="line">docker rmi $(docker images -q)</div><div class="line"><span class="comment"># Force delete</span></div><div class="line">docker rmi $(docker images -q) <span class="_">-f</span></div><div class="line"><span class="comment"># Delete Unused Volume</span></div><div class="line">docker volume prune</div></pre></td></tr></table></figure>
<h1 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h1><ul>
<li><a href="https://github.com/wsargent/docker-cheat-sheet" target="_blank" rel="external">https://github.com/wsargent/docker-cheat-sheet</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-01-20</strong> 初始化本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Docker 相关和命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 相关概念&lt;/li&gt;
&lt;li&gt;Docker 配套工具&lt;/li&gt;
&lt;li&gt;Django PostgreSQL RabbitMQ Redis ElasticSearch Sentry 集群 Docker 化&lt;/li&gt;
&lt;li&gt;Docker 踩坑记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="我的开源项目" scheme="http://twocucao.xyz/categories/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Django" scheme="http://twocucao.xyz/tags/Django/"/>
    
      <category term="Docker" scheme="http://twocucao.xyz/tags/Docker/"/>
    
      <category term="DevOps" scheme="http://twocucao.xyz/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Numpy Cheatsheet</title>
    <link href="http://twocucao.xyz/2018/02/03/NumpyCheatSheet/"/>
    <id>http://twocucao.xyz/2018/02/03/NumpyCheatSheet/</id>
    <published>2018-02-03T02:37:53.000Z</published>
    <updated>2018-02-11T01:19:55.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Numpy 相关语句。</p>
<p>主要包含：</p>
<h1 id="Numpy-库"><a href="#Numpy-库" class="headerlink" title="Numpy 库"></a>Numpy 库</h1><h2 id="0x00-前言-1"><a href="#0x00-前言-1" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Numpy 相关语句。</p>
<p>对于数据分析应用而言，最应该关注：</p>
<ul>
<li>用于数据整理和清理、子集构造和过滤、转换等快速的矢量化数组运算。</li>
<li>常用的数组算法，如排序、唯一化、集合运算等。</li>
<li>高效的描述统计和数据聚合 / 摘要运算。</li>
<li>用于异构数据集的合并 / 连接运算的数据对齐和关系型数据运算。</li>
<li>将条件逻辑表述为数组表达式（而不是带有 if-else-if 分支的循环）</li>
<li>数据的分组运算（聚合、转换、函数应用等）。</li>
</ul>
<blockquote>
<p>学习 Numpy 本质上是为了更好的使用 Pandas</p>
</blockquote>
<h2 id="0x01-ndarray"><a href="#0x01-ndarray" class="headerlink" title="0x01 ndarray"></a>0x01 ndarray</h2><h3 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a>1.1 数据类型</h3><h3 id="1-2-创建-ndarray"><a href="#1-2-创建-ndarray" class="headerlink" title="1.2 创建 ndarray"></a>1.2 创建 ndarray</h3><h3 id="1-3-数组和标量之间的运算"><a href="#1-3-数组和标量之间的运算" class="headerlink" title="1.3 数组和标量之间的运算"></a>1.3 数组和标量之间的运算</h3><p>当我们把数组当做矢量的时候。</p>
<ol>
<li>两个大小相同的矢量将运算到元素级</li>
<li>矢量和标量将作用与每一个元素</li>
<li>不同大小的矢量之间的运算叫做广播</li>
</ol>
<h3 id="1-4-索引和切片"><a href="#1-4-索引和切片" class="headerlink" title="1.4 索引和切片"></a>1.4 索引和切片</h3><h3 id="1-4-1-一般索引和一般切片"><a href="#1-4-1-一般索引和一般切片" class="headerlink" title="1.4.1 一般索引和一般切片"></a>1.4.1 一般索引和一般切片</h3><p>对于一维数组的话，如果没有显式 copy 则会修改原来的值。</p>
<p>切片语法与 Python 相近</p>
<h3 id="1-4-2-切片型索引"><a href="#1-4-2-切片型索引" class="headerlink" title="1.4.2 切片型索引"></a>1.4.2 切片型索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a[:<span class="number">2</span>,<span class="number">1</span>:]</div><div class="line">a[<span class="number">2</span>,<span class="number">1</span>:]</div></pre></td></tr></table></figure>
<h3 id="1-4-3-布尔型索引"><a href="#1-4-3-布尔型索引" class="headerlink" title="1.4.3 布尔型索引"></a>1.4.3 布尔型索引</h3><p>参考 pandas 语法</p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-06-03</strong> 初始化本文</li>
<li><strong>2018-02-03</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Numpy 相关语句。&lt;/
    
    </summary>
    
      <category term="数据科学" scheme="http://twocucao.xyz/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="Pandas" scheme="http://twocucao.xyz/tags/Pandas/"/>
    
      <category term="效率" scheme="http://twocucao.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
      <category term="Numpy" scheme="http://twocucao.xyz/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>用 tmux 与 tmuxinator 打造开发工作流</title>
    <link href="http://twocucao.xyz/2018/01/28/TmuxWithTmuxinatorWorkflow/"/>
    <id>http://twocucao.xyz/2018/01/28/TmuxWithTmuxinatorWorkflow/</id>
    <published>2018-01-28T02:57:41.000Z</published>
    <updated>2018-01-28T08:01:27.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>本文就我最近开发的一个前后端的项目（名字叫做 yavueblog) 来简单介绍两个神器</p>
<ul>
<li>一个是 tmux</li>
<li>一个是 tmuxinator</li>
</ul>
<p>我在开发这个前后端的项目的时候要开启要通过不少的命令来启动服务：</p>
<ul>
<li>（前端开发）运行 npm run dev 进行开发前端页面</li>
<li>（前端开发）运行 npm run dev:theme , 当主题的 SCSS 发生变化的同时，编译 SCSS</li>
<li>（前端开发）运行 npm run dev:iconfont, 当移入了新的 svg 图标的时候，自动构建出新的字体文件与 iconfont.css 。</li>
<li>（后端开发）运行 make dockerup 中开启 Django 应用。启动 Django 服务，PostgreSQL 数据库，Redis 等等，</li>
</ul>
<p>我的需求如下：</p>
<ul>
<li>一键启动这些脚本，前两个任务，放在第一个终端。</li>
<li>后面两个任务放在第二、三个终端里。</li>
</ul>
<p>以前的做法都是新建三个终端选项卡，然后第一个终端分两屏，然后分别到各个终端 cd 或者 autojump 到对应的目录，然后手动运行命令。</p>
<p>加上运行 npm run dev:theme 的时候，我是通过 Python 的 watchdog 来实现对指定目录和指定类型文件的变化进行监听的，所以还要切换 PyEnv 自定义的 Python 的环境中。</p>
<p>这些命令反反复复输入还是挺麻烦的事情，为何不用工具来解决呢？</p>
<h2 id="0x01-tmux-tmuxinator"><a href="#0x01-tmux-tmuxinator" class="headerlink" title="0x01 tmux + tmuxinator"></a>0x01 tmux + tmuxinator</h2><p>先安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">brew install tmux</div><div class="line">brew install ruby</div><div class="line">gem install tmuxinator</div></pre></td></tr></table></figure>
<p>什么是 tmux?  简单而言，就是一个终端复用软件。<br>什么是 tmuxinator? 简单而言，就是为了简化 tmux 操作的软件。只需要编写 yaml 即快速开启一个比较适合你的终端窗口布局。</p>
<p>关于 tmux 的配置，推荐这个 repo</p>
<p><a href="https://github.com/gpakosz/.tmux" target="_blank" rel="external">https://github.com/gpakosz/.tmux</a></p>
<h2 id="0x02-编写-Tmuxinator-配置文件"><a href="#0x02-编写-Tmuxinator-配置文件" class="headerlink" title="0x02 编写 Tmuxinator 配置文件"></a>0x02 编写 Tmuxinator 配置文件</h2><p>输入 tmuxinator new yavueblog</p>
<p>修改文件如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># ~/.tmuxinator/yavueblog.yml</div><div class="line"></div><div class="line">name: yavueblog</div><div class="line">root: ~/Codes/PublicRepos/YaBlogSystem/</div><div class="line"></div><div class="line"># Optional tmux socket</div><div class="line"># socket_name: foo</div><div class="line"></div><div class="line"># Runs before everything. Use it to start daemons etc.</div><div class="line"># pre: sudo /etc/rc.d/mysqld start</div><div class="line"></div><div class="line"># Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.</div><div class="line">pre_window: pyenv activate 3.5.2/envs/py3-daily</div><div class="line"></div><div class="line">windows:</div><div class="line">  - &quot;网站开发&quot;:</div><div class="line">      layout: main-vertical</div><div class="line">      # Synchronize all panes of this window, can be enabled before or after the pane commands run.</div><div class="line">      # &apos;before&apos; represents legacy functionality and will be deprecated in a future release, in favour of &apos;after&apos;</div><div class="line">      # synchronize: after</div><div class="line">      panes:</div><div class="line">        - &quot;cd ./YaVueBlog/ &amp;&amp; npm run dev&quot;</div><div class="line">        - &quot;cd ./YaVueBlog/ &amp;&amp; npm run dev:theme&quot;</div><div class="line">  - &quot;iconfont 构建&quot;: &quot;cd ./YaVueBlog/ &amp;&amp; npm run dev:iconfont&quot;</div><div class="line">  - &quot;DockerizedDjango&quot;: &quot;cd ./YaDjangoBlog/ &amp;&amp; make docker-compose-build-up&quot;</div></pre></td></tr></table></figure>
<p>这样的话，每次开发就只需要运行 tmuxinator start yavueblog，并且打开 IDE 直接捋起袖子就是干就好了。</p>
<h2 id="0x03-玩-tmux-首先要掌握的三个小技巧"><a href="#0x03-玩-tmux-首先要掌握的三个小技巧" class="headerlink" title="0x03 玩 tmux 首先要掌握的三个小技巧"></a>0x03 玩 tmux 首先要掌握的三个小技巧</h2><p>如果你刚用 tmux 的话，火速掌握下面三个小技巧。要不然会抓狂的。</p>
<ol>
<li>切换终端</li>
</ol>
<ul>
<li>c-b + 数字</li>
<li>c-b + n</li>
</ul>
<ol>
<li>滚屏</li>
</ol>
<p><a href="https://superuser.com/questions/209437/how-do-i-scroll-in-tmux" target="_blank" rel="external">https://superuser.com/questions/209437/how-do-i-scroll-in-tmux</a></p>
<ol>
<li>复制文字</li>
</ol>
<p><a href="https://superuser.com/questions/196060/selecting-text-in-tmux-copy-mode" target="_blank" rel="external">https://superuser.com/questions/196060/selecting-text-in-tmux-copy-mode</a></p>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><a href="https://github.com/twocucao" target="_blank" rel="external">我的 Github</a></li>
</ul>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-03-08 09:33:37</strong> 重新润饰文字，弃用 Rails 开发一年。现在主 DjangoRestFrameWork+VueJS</li>
<li><strong>2018-01-28 11:44:00</strong> 重修文字，适配本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;p&gt;本文就我最近开发的一个前后端的项目（名字叫做 yavueblog) 来简单介绍两个神器&lt;/p&gt;

    
    </summary>
    
      <category term="善用佳软" scheme="http://twocucao.xyz/categories/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
    
      <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tmux" scheme="http://twocucao.xyz/tags/Tmux/"/>
    
      <category term="Tmuxinator" scheme="http://twocucao.xyz/tags/Tmuxinator/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的数据压缩和存档</title>
    <link href="http://twocucao.xyz/2018/01/23/PythonCompression/"/>
    <id>http://twocucao.xyz/2018/01/23/PythonCompression/</id>
    <published>2018-01-23T06:56:30.000Z</published>
    <updated>2018-01-28T02:55:03.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在一次数据分析过程中，对方扔过来 40GB 的数据 – data.tar.gz .</p>
<p>我想着能不能直接用 pandas 直接读取这个文件呢？查找了一些资料，于是有了本文。</p>
<p>Python 中支持如下：</p>
<ul>
<li>数据压缩算法：zlib, gzip, bzip2 and lzma</li>
<li>存档格式：zip 以及 tar</li>
</ul>
<h2 id="0x01-压缩是怎么回事？"><a href="#0x01-压缩是怎么回事？" class="headerlink" title="0x01 压缩是怎么回事？"></a>0x01 压缩是怎么回事？</h2><h2 id="0x02-zlib-与-gzip"><a href="#0x02-zlib-与-gzip" class="headerlink" title="0x02 zlib 与 gzip"></a>0x02 zlib 与 gzip</h2><p>gzip 依赖于 zlib</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># 读取压缩文件</div><div class="line">import gzip</div><div class="line">with gzip.open(&apos;/home/joe/file.txt.gz&apos;, &apos;rb&apos;) as f:</div><div class="line">    file_content = f.read()</div><div class="line"></div><div class="line"># 写入压缩文件</div><div class="line">import gzip</div><div class="line">content = b&quot;Lots of content here&quot;</div><div class="line">with gzip.open(&apos;/home/joe/file.txt.gz&apos;, &apos;wb&apos;) as f:</div><div class="line">    f.write(content)</div><div class="line"></div><div class="line"># 拷贝压缩文件</div><div class="line">import gzip</div><div class="line">import shutil</div><div class="line">with open(&apos;/home/joe/file.txt&apos;, &apos;rb&apos;) as f_in:</div><div class="line">    with gzip.open(&apos;/home/joe/file.txt.gz&apos;, &apos;wb&apos;) as f_out:</div><div class="line">        shutil.copyfileobj(f_in, f_out)</div><div class="line"></div><div class="line"># 压缩二进制字符串</div><div class="line">import gzip</div><div class="line">s_in = b&quot;Lots of content here&quot;</div><div class="line">s_out = gzip.compress(s_in)</div></pre></td></tr></table></figure>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-12-20</strong> 初始化本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;在一次数据分析过程中，对方扔过来 40GB 的数据 – data.tar.gz .&lt;/p&gt;
&lt;p&gt;我
    
    </summary>
    
      <category term="Python 黑魔法" scheme="http://twocucao.xyz/categories/Python-%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
    
      <category term="数据压缩" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>关于 CSS 你应该知道的一切</title>
    <link href="http://twocucao.xyz/2017/12/28/AllStuffAboutCSS/"/>
    <id>http://twocucao.xyz/2017/12/28/AllStuffAboutCSS/</id>
    <published>2017-12-28T10:41:47.000Z</published>
    <updated>2018-02-12T05:46:07.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本笔记诞生于很久前零零散散记录的笔记，拿出来发布一下。</p>
<h2 id="0x01-CSS-是如何工作的？"><a href="#0x01-CSS-是如何工作的？" class="headerlink" title="0x01 CSS 是如何工作的？"></a>0x01 CSS 是如何工作的？</h2><p>HTML 是元素的标记语言。</p>
<p>CSS 被用来 样式和网页布局的。</p>
<p>样式和布局都有哪些呢？</p>
<ul>
<li>字体</li>
<li>颜色</li>
<li>大小</li>
<li>内容间距</li>
<li>多列</li>
<li>动画</li>
</ul>
<p>通过 DOM 树的节点和样式节点结合，生成渲染树，然后交给浏览器进行渲染从而使得外观发生变化。</p>
<h2 id="0x02-CSS-基本语法"><a href="#0x02-CSS-基本语法" class="headerlink" title="0x02 CSS 基本语法"></a>0x02 CSS 基本语法</h2><p>CSS 基本语法有三个组成部分：</p>
<ol>
<li>规则</li>
<li>选择器</li>
<li>属性</li>
</ol>
<h3 id="2-1-CSS-规则"><a href="#2-1-CSS-规则" class="headerlink" title="2.1 CSS 规则"></a>2.1 CSS 规则</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">h1 &#123;</div><div class="line">    colour: blue;</div><div class="line">    background-color: yellow;</div><div class="line">    border: 1px solid black;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// @规则</div><div class="line"></div><div class="line">@import</div><div class="line">@charset</div><div class="line">@media</div><div class="line">@font-face</div><div class="line"></div><div class="line">/* in shorthand like padding and margin, the values are applied</div><div class="line">in the order top, right, bottom, left (the same order as an analog clock). There are also other</div><div class="line">shorthand types, for example two values, which set for example</div><div class="line">the padding for top/bottom, then left/right */</div><div class="line">padding: 10px 15px 15px 5px;</div></pre></td></tr></table></figure>
<h3 id="2-2-选择器"><a href="#2-2-选择器" class="headerlink" title="2.2 选择器"></a>2.2 选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">// Simple selectors: Match one or more elements based on element type, class, or id.</div><div class="line">/* All div elements are blue */</div><div class="line">div &#123;</div><div class="line">    color: blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line">h1 &#123;</div><div class="line">    color: red;</div><div class="line">    text-shadow: 1px 1px 1px black;</div><div class="line">    background: linear-gradient(to bottom, rgba(0,0,0,0.25), rgba(0,0,0,0.1));</div><div class="line">    padding: 3px;</div><div class="line">    text-align: center;</div><div class="line">    box-shadow: inset 2px 2px 5px rgba(0,0,0,0.5), inset -2px -2px 5px rgba(255,255,255,0.5);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Attribute selectors: Match one or more elements based on their attributes/attribute values.</div><div class="line">/* All elements with the attribute &quot;data-vegetable&quot;</div><div class="line">are given green text */</div><div class="line"></div><div class="line">[data-vegetable] &#123;</div><div class="line">    color: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* All elements with the attribute &quot;data-vegetable&quot;</div><div class="line">with the exact value &quot;liquid&quot; are given a golden</div><div class="line">background color */</div><div class="line"></div><div class="line">[data-vegetable=&quot;liquid&quot;] &#123;</div><div class="line">    background-color: goldenrod;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* All elements with the attribute &quot;data-vegetable&quot;,</div><div class="line">containing the value &quot;spicy&quot;, even among others,</div><div class="line">are given a red text color */</div><div class="line"></div><div class="line">[data-vegetable~=&quot;spicy&quot;] &#123;</div><div class="line">    color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Pseudo-classes: Match one or more elements that exist in a certain state, such as an element that is being hovered over by the mouse pointer, or a checkbox that is currently disabled or checked, or an element that is the first child of its parent in the DOM tree.</div><div class="line">// Pseudo-elements: Match one or more parts of content that are in a certain position in relation to an element, for example the first word of each paragraph, or generated content appearing just before an element.</div><div class="line"></div><div class="line">:active</div><div class="line">:any</div><div class="line">:checked</div><div class="line">:default</div><div class="line">:dir()</div><div class="line">:disabled</div><div class="line">:empty</div><div class="line">:enabled</div><div class="line">:first</div><div class="line">:first-child</div><div class="line">:first-of-type</div><div class="line">:fullscreen</div><div class="line">:focus</div><div class="line">:focus-within</div><div class="line">:hover</div><div class="line">:indeterminate</div><div class="line">:in-range</div><div class="line">:invalid</div><div class="line">:lang()</div><div class="line">:last-child</div><div class="line">:last-of-type</div><div class="line">:left</div><div class="line">:link</div><div class="line">:not()</div><div class="line">:nth-child()</div><div class="line">:nth-last-child()</div><div class="line">:nth-last-of-type()</div><div class="line">:nth-of-type()</div><div class="line">:only-child</div><div class="line">:only-of-type</div><div class="line">:optional</div><div class="line">:out-of-range</div><div class="line">:read-only</div><div class="line">:read-write</div><div class="line">:required</div><div class="line">:right</div><div class="line">:root</div><div class="line">:scope</div><div class="line">:target</div><div class="line">:valid</div><div class="line">:visited</div><div class="line"></div><div class="line">// Combinators: These are not exactly selectors themselves, but ways of combining two or more selectors in useful ways for very specific selections. So for example, you could select only paragraphs that are direct descendants of divs, or paragraphs that come directly after headings.</div><div class="line"></div><div class="line">A, B	匹配 A 或 B</div><div class="line">A B	    匹配 A 里面的 B</div><div class="line">A &gt; B	匹配 A 里面的直属 B</div><div class="line">A + B	匹配 A 下一个兄弟节点 B</div><div class="line">A ~ B	匹配 A 的下一群兄弟节点 B</div><div class="line"></div><div class="line">// Multiple selectors: Again, these are not separate selectors; the idea is that you can put multiple selectors on the same CSS rule, separated by commas, to apply a single set of declarations to all the elements selected by those selectors.</div></pre></td></tr></table></figure>
<h3 id="2-3-属性"><a href="#2-3-属性" class="headerlink" title="2.3 属性"></a>2.3 属性</h3><h4 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h4><p><a href="http://cssreference.io/positioning/" target="_blank" rel="external">http://cssreference.io/positioning/</a></p>
<h4 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h4><h4 id="Box-Model"><a href="#Box-Model" class="headerlink" title="Box Model"></a>Box Model</h4><p>块级元素 (Block)<br>  新开始一行并且尽可能撑满容器，p,form,header,footer,section<br>  设置块级元素的 width 可以防止它从左到右撑满整个容器<br>行内元素 (inline)<br>  包裹一些文字，而不会打乱段落的布局，a,span<br>none<br>  script 默认 display:none,visibility:hidden 是占据空间</p>
<p>盒模型</p>
<p>属性</p>
<p>三，层叠与继承</p>
<p>既然是层叠，就要有层叠的规律</p>
<h2 id="0x03-CSS-新语法"><a href="#0x03-CSS-新语法" class="headerlink" title="0x03 CSS 新语法"></a>0x03 CSS 新语法</h2><h3 id="3-1-Flex-Layout"><a href="#3-1-Flex-Layout" class="headerlink" title="3.1 Flex Layout"></a>3.1 Flex Layout</h3><ul>
<li><a href="https://github.com/philipwalton/solved-by-flexbox" target="_blank" rel="external">https://github.com/philipwalton/solved-by-flexbox</a></li>
</ul>
<h3 id="3-2-Grid-Layout"><a href="#3-2-Grid-Layout" class="headerlink" title="3.2 Grid Layout"></a>3.2 Grid Layout</h3><h2 id="0x04-SCSS"><a href="#0x04-SCSS" class="headerlink" title="0x04 SCSS"></a>0x04 SCSS</h2><p>这是一种兼容 CSS 语法的新语言。主要用于提升代码的可维护性。</p>
<p>至于其他 less 之类大同小异。只选取了功能最强大的部分进行间接。</p>
<h3 id="4-1-OOCSS-BEM-我的实践"><a href="#4-1-OOCSS-BEM-我的实践" class="headerlink" title="4.1 OOCSS / BEM / 我的实践"></a>4.1 OOCSS / BEM / 我的实践</h3><h3 id="4-1-如何组织-SCSS-代码-—-布局篇"><a href="#4-1-如何组织-SCSS-代码-—-布局篇" class="headerlink" title="4.1 如何组织 SCSS 代码 — 布局篇"></a>4.1 如何组织 SCSS 代码 — 布局篇</h3><h3 id="4-2-如何组织-SCSS-代码-—-组件篇"><a href="#4-2-如何组织-SCSS-代码-—-组件篇" class="headerlink" title="4.2 如何组织 SCSS 代码 — 组件篇"></a>4.2 如何组织 SCSS 代码 — 组件篇</h3><h4 id="4-2-BEM"><a href="#4-2-BEM" class="headerlink" title="4.2 BEM"></a>4.2 BEM</h4><h2 id="0x05-CSS-规范"><a href="#0x05-CSS-规范" class="headerlink" title="0x05 CSS 规范"></a>0x05 CSS 规范</h2><ul>
<li><p><a href="https://github.com/airbnb/css" target="_blank" rel="external">https://github.com/airbnb/css</a></p>
</li>
<li><p>Use soft tabs (2 spaces) for indentation</p>
</li>
<li>Prefer dashes over camelCasing in class names.<ul>
<li>Underscores and PascalCasing are okay if you are using BEM (see OOCSS and BEM below).</li>
</ul>
</li>
<li>Do not use ID selectors</li>
<li>When using multiple selectors in a rule declaration, give each selector its own line.</li>
<li>Put a space before the opening brace { in rule declarations</li>
<li>In properties, put a space after, but not before, the : character.</li>
<li>Put closing braces } of rule declarations on a new line</li>
<li>Put blank lines between rule declarations</li>
</ul>
<p>OOCSS 与 BEM 混用</p>
<blockquote>
<p>只要是可维护的好代码，并不需要拘泥于用什么风格</p>
</blockquote>
<h3 id="5-1-圣杯"><a href="#5-1-圣杯" class="headerlink" title="5.1 圣杯"></a>5.1 圣杯</h3><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><a href="https://github.com/picturepan2/spectre" target="_blank" rel="external">https://github.com/picturepan2/spectre</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-12-20</strong> 初始化本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本笔记诞生于很久前零零散散记录的笔记，拿出来发布一下。&lt;/p&gt;
&lt;h2 id=&quot;0x01-CSS-是
    
    </summary>
    
      <category term="前端开发" scheme="http://twocucao.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="http://twocucao.xyz/tags/CSS/"/>
    
      <category term="SASS" scheme="http://twocucao.xyz/tags/SASS/"/>
    
  </entry>
  
  <entry>
    <title>macOS 的系统与软件</title>
    <link href="http://twocucao.xyz/2017/12/23/macOSInDepth/"/>
    <id>http://twocucao.xyz/2017/12/23/macOSInDepth/</id>
    <published>2017-12-23T10:41:47.000Z</published>
    <updated>2018-02-11T01:14:31.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>折腾了 Windows 很多年，后来出于个人开发需求转投 Mac，使用起来一直很顺手。现在也开始从顺手开始到了解更深一点的东西。</p>
<h2 id="0x01-系统安全架构"><a href="#0x01-系统安全架构" class="headerlink" title="0x01 系统安全架构"></a>0x01 系统安全架构</h2><h3 id="1-1-系统架构概述"><a href="#1-1-系统架构概述" class="headerlink" title="1.1 系统架构概述"></a>1.1 系统架构概述</h3><p>非开发人员分层：</p>
<ul>
<li>User Experience<ul>
<li>Aqua</li>
<li>Dashboard</li>
<li>Spotlight</li>
<li>Dock</li>
<li>输入法</li>
<li>屏保</li>
<li>辅助功能</li>
<li>语音</li>
<li>位置与地图</li>
<li>搜索</li>
<li>etc</li>
</ul>
</li>
<li>Application Framework<ul>
<li>Cocoa</li>
</ul>
</li>
<li>Graphics and Media<ul>
<li>核心框架，OpenAL,Quartz,SceneKit,SpriteKit</li>
</ul>
</li>
<li>Darwin<ul>
<li>系统内核与 Shell 环境</li>
</ul>
</li>
</ul>
<p>开发人员分层：</p>
<ul>
<li>Cocoa Layer: Cocoa 框架层 包括了用于开发界面程序的框架集合。</li>
<li>Foundation Layer: 提供了程序开发室使用到的基础数据类型、数值处理、网络、IO 和 日期等</li>
<li>Media Layer: 提供了图像、声音、视频、动画及游戏开发需要的接口</li>
<li>Core Service Layer: 系统安全、底层内部数据访问以及存储接口。比如 AddressBook,CoreData,QuickLook 用于快速浏览插件开发。CoreFoundation 框架也属于这一层。</li>
<li>Core OS Layer: 加速器，蓝牙，异常处理，网络扩展，系统配置</li>
<li>Kernel &amp; Driver Layer: 内核与驱动层。包括开发设备驱动程序与内核扩展所需的一些框架。</li>
</ul>
<p>应用程序是一个 bundle 文件，一般为 xxx.app 文件夹，</p>
<h3 id="1-1-一些常用软件"><a href="#1-1-一些常用软件" class="headerlink" title="1.1 一些常用软件"></a>1.1 一些常用软件</h3><p>Clang<br>LLVM</p>
<p>HT Editor</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install ht</div></pre></td></tr></table></figure>
<h2 id="0x02-前言"><a href="#0x02-前言" class="headerlink" title="0x02 前言"></a>0x02 前言</h2><h2 id="0x03-前言"><a href="#0x03-前言" class="headerlink" title="0x03 前言"></a>0x03 前言</h2><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li>macOS 软件安全和逆向分析</li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-12-20</strong> 初始化本文</li>
<li><strong>2018-02-10</strong> 添加笔记</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;折腾了 Windows 很多年，后来出于个人开发需求转投 Mac，使用起来一直很顺手。现在也开始从顺
    
    </summary>
    
      <category term="善用佳软" scheme="http://twocucao.xyz/categories/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
    
      <category term="macOS" scheme="http://twocucao.xyz/tags/macOS/"/>
    
      <category term="XCode" scheme="http://twocucao.xyz/tags/XCode/"/>
    
      <category term="App Store" scheme="http://twocucao.xyz/tags/App-Store/"/>
    
      <category term="Apple Store" scheme="http://twocucao.xyz/tags/Apple-Store/"/>
    
      <category term="iTunes Store" scheme="http://twocucao.xyz/tags/iTunes-Store/"/>
    
  </entry>
  
  <entry>
    <title>记一次小机器的 Python 大数据分析</title>
    <link href="http://twocucao.xyz/2017/12/07/ANoteWithSmallMachineAndBigData/"/>
    <id>http://twocucao.xyz/2017/12/07/ANoteWithSmallMachineAndBigData/</id>
    <published>2017-12-07T08:56:12.000Z</published>
    <updated>2018-02-11T01:14:31.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>机缘巧合，最近公司突然要搞一波大量数据的分析。属于客流类的分析。</p>
<p>数据量级也还算不错，经过 gzip 压缩，接近 400 个 点位的 SQL 文件 (MySQL innoDB)，大小接近 100GB 左右，原始记录数据估测在 180 亿左右。</p>
<p>解压后…… 差不多一个 T 吧。</p>
<p>如果是人民币玩家，自然是直接购置几十台高配置机器，做个 mysql shard 或者直接上大数据全家桶比如 hadoop 和 hive 之类，让程序员去往死里折腾吧。</p>
<blockquote>
<p>嗯，然而对于我这种非人民币玩家，就要用单机硬扛。</p>
</blockquote>
<p>那就硬扛呗。</p>
<p>我手上的机器配置如下：</p>
<ul>
<li><p>局域网服务器 （ Ubuntu 16.04 LTS ）</p>
<ul>
<li>Xeon(R) CPU E3-1225 v5 @ 3.30GHz</li>
<li>16G 内存</li>
<li>1T 硬盘</li>
</ul>
</li>
<li><p>苹果电脑 2016 年 15 寸 最高配</p>
<ul>
<li>1T 硬盘</li>
<li>i7 四核</li>
</ul>
</li>
</ul>
<h2 id="0x01-准备数据阶段"><a href="#0x01-准备数据阶段" class="headerlink" title="0x01 准备数据阶段"></a>0x01 准备数据阶段</h2><p>用低配机器分析大数据的<strong>首要原则</strong>，就是<strong>不要分析大数据</strong>。</p>
<p>何也？</p>
<blockquote>
<p>就是<strong>尽可能的抽取所得结论所需分析数据的最小超集</strong></p>
</blockquote>
<p>小机器是无法完成海量计算的，但通过一定的过滤和筛选可以将数据筛选出到一台机器能扛得住的计算量。从而达到可以可以分析海量数据的目的。</p>
<h3 id="1-1-将数据导入-MySQL-中"><a href="#1-1-将数据导入-MySQL-中" class="headerlink" title="1.1 将数据导入 MySQL 中"></a>1.1 将数据导入 MySQL 中</h3><p>我们先不管三七二十一，既然给了 SQL 文件，肯定要入库的，那么问题来了：</p>
<blockquote>
<p><del>将大象关进冰箱要几个步骤</del></p>
</blockquote>
<p>将数据导入数据库中需要几个步骤</p>
<p>或者说，如何更快的导入 400 张不同表的数据。</p>
<p>大致步骤如下：</p>
<ul>
<li>新增硬盘，并初始化</li>
<li>配置 MySQL 的 datadir 到新增硬盘上</li>
<li>导入数据 (PV &amp; MySQL)</li>
</ul>
<h4 id="新增硬盘，并初始化"><a href="#新增硬盘，并初始化" class="headerlink" title="新增硬盘，并初始化"></a>新增硬盘，并初始化</h4><p>首先，<strong>购买并插入硬盘</strong></p>
<p>使用 lshw 查看硬盘信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># lshw -C disk</span></div><div class="line">  *-disk</div><div class="line">       description: SCSI Disk</div><div class="line">       product: My Passport 25E2</div><div class="line">       vendor: WD</div><div class="line">       physical id: 0.0.0</div><div class="line">       bus info: scsi@7:0.0.0</div><div class="line">       logical name: /dev/sdb</div><div class="line">       version: 4004</div><div class="line">       serial: WX888888HALK</div><div class="line">       size: 3725GiB (4TB)</div><div class="line">       capabilities: gpt-1.00 partitioned partitioned:gpt</div><div class="line">       configuration: ansiversion=6 guid=88e88888-422d-49f0-9ba9-221db75fe4b4 logicalsectorsize=512 sectorsize=4096</div><div class="line">  *-disk</div><div class="line">       description: ATA Disk</div><div class="line">       product: WDC WD10EZEX-08W</div><div class="line">       vendor: Western Digital</div><div class="line">       physical id: 0.0.0</div><div class="line">       bus info: scsi@0:0.0.0</div><div class="line">       logical name: /dev/sda</div><div class="line">       version: 1A01</div><div class="line">       serial: WD-WC888888888U</div><div class="line">       size: 931GiB (1TB)</div><div class="line">       capabilities: partitioned partitioned:dos</div><div class="line">       configuration: ansiversion=5 logicalsectorsize=512 sectorsize=4096 signature=f1b42036</div><div class="line">  *-cdrom</div><div class="line">       description: DVD reader</div><div class="line">       product: DVDROM DH1XXX8SH</div><div class="line">       vendor: PLDS</div><div class="line">       physical id: 0.0.0</div><div class="line">       bus info: scsi@5:0.0.0</div><div class="line">       logical name: /dev/cdrom</div><div class="line">       logical name: /dev/dvd</div><div class="line">       logical name: /dev/sr0</div><div class="line">       version: ML31</div><div class="line">       capabilities: removable audio dvd</div><div class="line">       configuration: ansiversion=5 status=nodisc</div></pre></td></tr></table></figure>
<p>使用 fdisk 格式化硬盘，并且分区</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">fdisk /dev/sdb</div><div class="line"><span class="comment">#输入 n</span></div><div class="line"><span class="comment">#输入 p</span></div><div class="line"><span class="comment">#输入 1</span></div><div class="line"><span class="comment">#输入 w</span></div><div class="line">sudo mkfs -t ext4 /dev/sdb1</div><div class="line">mkdir -p /media/mynewdrive</div><div class="line">vim /etc/fstab</div><div class="line"><span class="comment"># /dev/sdb1    /media/mynewdrive   ext4    defaults     0        2</span></div><div class="line"><span class="comment"># 直接挂载所有，或者 reboot</span></div><div class="line">mount <span class="_">-a</span></div></pre></td></tr></table></figure>
<p>至此为止，硬盘就格式化完成了。</p>
<blockquote>
<p>关于安装硬盘，可以参考 <a href="https://help.ubuntu.com/community/InstallingANewHardDrive" target="_blank" rel="external">https://help.ubuntu.com/community/InstallingANewHardDrive</a></p>
</blockquote>
<h4 id="配置-MySQL"><a href="#配置-MySQL" class="headerlink" title="配置 MySQL"></a>配置 MySQL</h4><p>篇幅有限，只简介具体在 Ubuntu 16.04 上面 配置 MySQL 的 DataDIR ，省去安装和基本登录认证的配置。</p>
<p>mysql 在 ubuntu 下面默认的路径如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/var/lib/mysql/</div></pre></td></tr></table></figure>
<p>我们开始配置 DataDIR</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">systemctl stop mysql</div><div class="line">rsync -av /var/lib/mysql /mnt/volume-nyc1-01</div><div class="line">mv /var/lib/mysql /var/lib/mysql.bak</div><div class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</div><div class="line"><span class="comment"># 修改至 datadir=/mnt/volume-nyc1-01/mysql</span></div><div class="line">vim /etc/apparmor.d/tunables/<span class="built_in">alias</span></div><div class="line"><span class="comment"># alias /var/lib/mysql/ -&gt; /mnt/volume-nyc1-01/mysql/</span></div><div class="line">sudo systemctl restart apparmor</div><div class="line">vim /usr/share/mysql/mysql-systemd-start</div><div class="line"><span class="comment"># 修改成</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> /var/lib/mysql ] &amp;&amp; [ ! -L /var/lib/mysql ]; <span class="keyword">then</span></div><div class="line"> <span class="built_in">echo</span> <span class="string">"MySQL data dir not found at /var/lib/mysql. Please create one."</span></div><div class="line"> <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> /var/lib/mysql/mysql ] &amp;&amp; [ ! -L /var/lib/mysql/mysql ]; <span class="keyword">then</span></div><div class="line"> <span class="built_in">echo</span> <span class="string">"MySQL system database not found. Please run mysql_install_db tool."</span></div><div class="line"> <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># 接下来</span></div><div class="line">sudo mkdir /var/lib/mysql/mysql -p</div><div class="line">sudo systemctl restart mysql</div><div class="line"></div><div class="line"><span class="comment"># 最后 my.conf 修改相关文件路径</span></div></pre></td></tr></table></figure>
<blockquote>
<p>详细请参考这篇文章 <a href="https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-16-04" target="_blank" rel="external">https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-16-04</a></p>
</blockquote>
<p>将 DataDIR 配置完成之后，就可以导入数据了。嗯，经过这么麻烦的事情之后，我决定下次遇到这种情况首选 Docker 而不是在 Ubuntu Server 上面搞这个。</p>
<blockquote>
<p>站在现在看，如果重来的话，我肯定会用 Docker 然后把数据盘挂载到新硬盘到。</p>
</blockquote>
<p>比如直接 Docker 命令执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql <span class="_">-e</span> MYSQL_ROOT_PASSWORD=my-secret-pw <span class="_">-d</span> mysql:tag</div></pre></td></tr></table></figure>
<h4 id="导入数据-之-MySQL-PV"><a href="#导入数据-之-MySQL-PV" class="headerlink" title="导入数据 之 MySQL + PV"></a>导入数据 之 MySQL + PV</h4><p>我们使用 mysql 导入脚本的时候，有几种导入方式</p>
<ul>
<li>source 命令，然而这个命令容易在数据量很大的时候直接卡掉。（印象中是直接把 sql 文件加载到内存中，然后执行，然而，只要涉及到大量文本打印出来并且执行，速度一定会变慢很多）</li>
<li>mysql 命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysql 命令的典型导入场景就是这样</span></div><div class="line">mysql -uadmin -p123456 some_db &lt; tb.sql</div></pre></td></tr></table></figure>
<p>加上 PV 命令的话，比较神奇了。有进度条了！!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 附加进度条的导入场景</span></div><div class="line">pv -i 1 -p -t <span class="_">-e</span> ./xxxx_probe.sql | mysql -uadmin -p123456 some_db</div></pre></td></tr></table></figure>
<p>然后，可以查看一下磁盘 CPU 内存的占用情况。如果负载（着重注意 IO，内存）还不够满，使用 tmux 多开几个进程导入数据。</p>
<p>因为每个 SQL 文件对应的表不一样，所以多开几个进程批量 insert 的话并不会锁表，这样可以显著提升导入速度。</p>
<h3 id="1-2-导出数据"><a href="#1-2-导出数据" class="headerlink" title="1.2 导出数据"></a>1.2 导出数据</h3><p>既然已经导入了数据，为什么需要导出数据呢？</p>
<p>因为数据量比较大，需要进行初步清洗。而我们最后肯定使用 Pandas 进行分析，从局域网数据库中读取大量的数据的时候，pandas 速度会非常的慢（具体是因为网络传输速度？)。所以，为了后面分析省事，我批量导出了数据，然后按照我的习惯进行了归类。</p>
<p>在这个过程中，我还进行了一小部分的数据过滤，比如：</p>
<ul>
<li>只选取对自己有用的行与列。</li>
<li>化整为零，拆分数据为最小单元的 CSV 文件</li>
</ul>
<h4 id="只选取对自己有用的行与列"><a href="#只选取对自己有用的行与列" class="headerlink" title="只选取对自己有用的行与列"></a>只选取对自己有用的行与列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> col_a , col_b <span class="keyword">from</span> some_table <span class="keyword">where</span> Acondition <span class="keyword">and</span> bcondition <span class="keyword">and</span> col_c <span class="keyword">in</span> (<span class="string">'xx'</span>,<span class="string">'yy'</span>,<span class="string">'zz'</span>);</div></pre></td></tr></table></figure>
<p>这里面有一些值得注意的地方</p>
<ul>
<li>尽量把简单的判断写在左边。</li>
<li>如果不是反复查询，则没有必要建立索引。直接走全表，筛选出必要的数据存 CSV 即可。</li>
</ul>
<h4 id="尽量拆分数据为最小单元的-CSV-文件"><a href="#尽量拆分数据为最小单元的-CSV-文件" class="headerlink" title="尽量拆分数据为最小单元的 CSV 文件"></a>尽量拆分数据为最小单元的 CSV 文件</h4><p>如果按照某类，某段时间进行拆分可以在分析的时候随时取随时分析那就进行拆分。</p>
<p>比如，某个大的 CSV 包含琼瑶里面各种人物情节地点的位置就可以拆分为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">201712_大明湖畔_夏雨荷_还珠格格_你还记得吗.csv</div><div class="line">201711_老街_可云_情深深雨蒙蒙_谁来救我.csv</div><div class="line">201710_屋子里_云帆_又见一帘幽梦_你的腿不及紫菱的爱情.csv</div></pre></td></tr></table></figure>
<p>当我们需要取这坨数据的时候，可以直接 glob 一下，然后 sort, 接着二分查找。就可以快速读取这块数据了。</p>
<h3 id="1-3-校验数据完备性"><a href="#1-3-校验数据完备性" class="headerlink" title="1.3 校验数据完备性"></a>1.3 校验数据完备性</h3><p>第三方给的数据多多少少会有这些或者那些的问题，一般情况下，可以通过检查数据完备性来尽可能的减少数据的不靠谱性。</p>
<p>我习惯性在这样的表里面详细记录数据完备性的各种参数与进度。</p>
<p>比如：</p>
<ul>
<li>数据的提供情况和实际情况</li>
<li>阶段性的记录条数和点位的统计值</li>
<li>max，min，mean，median 用来避免异常值</li>
<li>如果是分年份，则必须要统计每一天的情况，否则也不知道数据的缺失程度。</li>
</ul>
<h2 id="0x02-分析阶段"><a href="#0x02-分析阶段" class="headerlink" title="0x02 分析阶段"></a>0x02 分析阶段</h2><p>经过上一步处理，数据的文件总大小大约从 1000GB (uncompressed) -&gt; 30GB 左右 （拆分成若干个文件 compressed) 。每个文件大约是几百兆。</p>
<h3 id="2-1-性能要点-1：文件系统"><a href="#2-1-性能要点-1：文件系统" class="headerlink" title="2.1 性能要点 1：文件系统"></a>2.1 性能要点 1：文件系统</h3><p>如果统计逻辑很简单，但是数量多，首选使用读取文件。读取文件进行统计速度是非常快的。（人民币玩家走开）</p>
<p>像 linux 里面的 wc,grep,sort,uniq 在这种场景有时候也能用到。</p>
<blockquote>
<p>注意，如果文件特别大，一定要迭代器一个一个读取。</p>
</blockquote>
<p>对于超大文件，比如说，上百 G 文件，可以先分成小片的文件，然后多进程批量读取并且处理。</p>
<h3 id="2-2-性能要点-2：化整为零，map-reduce-filter"><a href="#2-2-性能要点-2：化整为零，map-reduce-filter" class="headerlink" title="2.2 性能要点 2：化整为零，map reduce filter"></a>2.2 性能要点 2：化整为零，map reduce filter</h3><p>化整为零这个已经在上面的 1.2 节讲过了。</p>
<p>map/reduce/filter 可以极大的减少代码。</p>
<blockquote>
<p>collection 中有个 Counter , 在进行简单代码统计的时候用起来可以极大的减少代码。</p>
</blockquote>
<h3 id="2-3-性能要点-3：进程池的两种作用"><a href="#2-3-性能要点-3：进程池的两种作用" class="headerlink" title="2.3 性能要点 3：进程池的两种作用"></a>2.3 性能要点 3：进程池的两种作用</h3><p>我们都知道，当 用 Python 执行计算密集的任务时，可以考虑使用多进程来加速：</p>
<p>即<strong>为了加速计算</strong>，此为作用一。如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_item_calc</span><span class="params">(item)</span>:</span></div><div class="line">    df = pd.read.....</div><div class="line">    <span class="comment"># complex calc</span></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">with</span> ProcessPoolExecutor(<span class="number">3</span>) <span class="keyword">as</span> pool:</div><div class="line">    result_items = pool.map(per_item_calc,all_tobe_calc_items)</div><div class="line"></div><div class="line">reduce_results = ....</div></pre></td></tr></table></figure>
<p>其实进程的销毁本身就可以给我带来第二个作用<strong>管理内存</strong>。</p>
<p>具体会在 2.6 中的 DataFrame 里面解释。</p>
<h3 id="2-4-性能要点-4：List-和-Set-itertools"><a href="#2-4-性能要点-4：List-和-Set-itertools" class="headerlink" title="2.4 性能要点 4：List 和 Set , itertools"></a>2.4 性能要点 4：List 和 Set , itertools</h3><p>有 400 组 UUID 集合，每个列表数量在 1000000 左右，列表和列表之间重复部分并不是很大。我想拿到去重之后的所有 UUID，应该怎么处理</p>
<p>在去重的时候，自然而然想到了使用集合来处理。</p>
<p>最初的做法是</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list_of_uuid_set = [ set1 , set2 ... set400 ]</div><div class="line">all_uuid_set = reduce(<span class="keyword">lambda</span> x: x | y, list_of_uuid_set)</div></pre></td></tr></table></figure>
<p>1 小时过去了。 突然之间，四下里万籁无声。公司内外聚集数百之众，竟不约而同的谁都没有出声，便有人想说话的，也为这寂静的气氛所慑，话到嘴边都缩了回去。似乎硬盘的指示灯也熄灭了，发出轻柔异常的声音。我心中忽想：</p>
<blockquote>
<p><del>小师妹这时候不知在干甚么？</del> 卧槽，程序是不是又卡死了？</p>
</blockquote>
<p>SSH 上去 htop 一下机器。发现实存和内存都满了。直觉告诉我，CPython 的集合运算应该是挺耗内存的。</p>
<p>嗯，这怎么行，试试用列表吧。列表占用内存应该是比较小的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(list1,list2)</span>:</span></div><div class="line">    list1.append(list2)</div><div class="line">    <span class="keyword">return</span> list1</div><div class="line"></div><div class="line">list_of_uuid_list = [ list1 , list2 ... list400 ]</div><div class="line">all_uuid_set = set(reduce(merge, list_of_uuid_list))</div></pre></td></tr></table></figure>
<p>1 小时过去了。 我一拍大腿，道：</p>
<blockquote>
<p><del>小师妹这时候不知在干甚么？</del> 卧槽，程序是不是又卡死了？</p>
</blockquote>
<p>最后在 StackOverFlow 上找到了更好的解决方案。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list_of_uuid_list = [ list1 , list2 ... list400 ]</div><div class="line">all_uuid_set = set(list(itertools.chain(*list_of_uuid_list)))</div></pre></td></tr></table></figure>
<p>运行一下，5s 不到出了结果（注意，包含了 Set 去重）。</p>
<p>itertools 里还有很多有趣的函数可以使用。</p>
<p><a href="https://docs.python.org/3/library/itertools.html" target="_blank" rel="external">https://docs.python.org/3/library/itertools.html</a></p>
<h3 id="2-5-性能要点-5：IPython-给性能带来的影响"><a href="#2-5-性能要点-5：IPython-给性能带来的影响" class="headerlink" title="2.5 性能要点 5：IPython 给性能带来的影响"></a>2.5 性能要点 5：IPython 给性能带来的影响</h3><p>当我们在分析数据的时候，往往使用的是 IPython, 或者 Jupyter Notebook</p>
<p>但是，方便的同时，如果不加以注意的话，就会带来一点点小问题。</p>
<p>比如下划线和双下划线分别存储上一个 CELL 的返回值，和上上个 CELL 的返回值。</p>
<h3 id="2-6-性能要点-6：DataFrame-带来的-GC-问题"><a href="#2-6-性能要点-6：DataFrame-带来的-GC-问题" class="headerlink" title="2.6 性能要点 6：DataFrame 带来的 GC 问题"></a>2.6 性能要点 6：DataFrame 带来的 GC 问题</h3><p>DataFrame 是我用 Pandas 的原因，在这次使用 DataFrame 的过程中，还是出现一些头疼的问题的。比如莫名的内存泄露。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_item_calc</span><span class="params">(item)</span>:</span></div><div class="line">    df = pd.read.....</div><div class="line">    <span class="comment"># complex calc</span></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line">result_items = []</div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> all_tobe_calc_items:</div><div class="line">    result_items.append(per_item_calc(item))</div><div class="line"></div><div class="line">reduce_results = ....</div></pre></td></tr></table></figure>
<p>我在 For 循环中读取 DataFrame 赋值给 df, 然后统计出一个结果。按理来说，每次只要一个简单的 result, 每次读取的文件大小一致，同样的会占用接近 2G 内存，而，当我赋值 df 的时候，<strong>按理来说，应该是把原先 df 的引用数应该为 0, 会被 gc 掉，又释放了 2G 内存</strong>，所以，是不太可能出现内存不够用的。</p>
<p>运行程序，内存 biubiubiubiu 的增长，当进行到约第 1000 次的循坏的时候，直到 16G 内存占满。</p>
<p>那么显式的 del 一下会不会好一点呢？代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_item_calc</span><span class="params">(item)</span>:</span></div><div class="line">    df = pd.read.....</div><div class="line">    <span class="comment"># complex calc</span></div><div class="line">    <span class="keyword">del</span> df</div><div class="line">    <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<p>似乎好了一点点，但是其实并没有好到哪里去。</p>
<p>然而，和前一次一样，内存 biubiubiubiu 的增长，当进行到约第 1000 次的循坏的时候，直到 16G 内存占满。</p>
<p>只是在读取文件的时候，预先减少了上次循环没有 del 掉的 df. 和上一个想法没有太大区别。除了比上一个方法每次读取文件的提前减少了一个多 G 的内存。</p>
<p>查找相关资料，涉及到 Python 里面的 Pandas GC 的资料并不多，稍微整理一下，如下：</p>
<blockquote>
<p>Python 程序 在 Linux 或者 Mac 中，哪怕是 del 这个对象，Python 依旧 <del>站着茅坑不拉屎</del> 就是不把内存还给系统，自己先占着，<del>有本事你打死我啊</del> 直到进程销毁。</p>
</blockquote>
<p>嗯？这个和我要的东西不一样嘛？具体怎么管理 pandas 里面的 object 的，到底是哪里 GC 不到位呢？还是没有说呀。</p>
<p>参考：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/23183958/python-memory-management-dictionary" target="_blank" rel="external">https://stackoverflow.com/questions/23183958/python-memory-management-dictionary</a></li>
<li><a href="http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm" target="_blank" rel="external">http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm</a></li>
</ul>
<p>不过有一点启示了我。</p>
<blockquote>
<p>直到进程销毁。</p>
</blockquote>
<p>Python 里面不是有个 ProcessPoolExecutor 模块么。</p>
<p>那么问题来了，ProcessPoolExecutor 是动态创建进程并且分配任务的呢，为每一个 item 分配一个进程来运算？还是创建完三个进程之后把 item 分配给空闲进程的进行运算呢？</p>
<ul>
<li>如果是前者，则是正经的进程池。似乎 map 过去，除非任务执行完毕或者异常退出，否则进程不销毁。并不能给我们解决 内存泄露 的问题。</li>
<li>如果是后者，则是并不是线程池。</li>
</ul>
<p>你说，进程池肯定是前者咯。可是你在验证之前，这是进程池只是你的从其他语言带来的想法，这是不是一个线程池，是一个什么样子的进程池，如果进程执行过程中挂掉了，这个时候就少了一个线程，会不会再补充一个进程呢？？</p>
<p>怎么看验证呢？</p>
<ol>
<li>运行程序，进入 Htop 看进程 PID</li>
<li>看源码</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># https://github.com/python/cpython/blob/3.6/Lib/concurrent/futures/process.py#L440</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_adjust_process_count</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(self._processes), self._max_workers):</div><div class="line">        p = multiprocessing.Process(</div><div class="line">                target=_process_worker,</div><div class="line">                args=(self._call_queue,</div><div class="line">                        self._result_queue))</div><div class="line">        p.start()</div><div class="line">        self._processes[p.pid] = p</div></pre></td></tr></table></figure>
<p>从源码得出在主线程创建了管理进程的线程，管理进程的线程创建了 max_workers 个进程（在我的例子里面就只有 3 个 worker).</p>
<blockquote>
<p>是个进程池。</p>
</blockquote>
<p>好，如果是进程池，似乎 map 过去，除非任务执行完毕或者异常退出，否则进程不销毁。并不能给我们解决 内存泄露 的问题。</p>
<blockquote>
<p>等等，如果用多进程池不就好咯？</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_item_calc</span><span class="params">(item)</span>:</span></div><div class="line">    df = pd.read.....</div><div class="line">    <span class="comment"># complex calc</span></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line">result_items = []</div><div class="line">step = <span class="number">300</span></div><div class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">0</span>,len(all_tobe_calc_items),step):</div><div class="line">    pieces_tobe_calc_items = all_tobe_calc_items[idx:idx+step]</div><div class="line">    <span class="keyword">with</span> ProcessPoolExecutor(<span class="number">3</span>) <span class="keyword">as</span> pool:</div><div class="line">        pieces_result_items = pool.map(per_item_calc,pieces_tobe_calc_items)</div><div class="line">        result_items.append(pieces_result_items)</div><div class="line"></div><div class="line">reduce_results = list(itertools.chain(*result_items))</div></pre></td></tr></table></figure>
<blockquote>
<p>当然，这是一种让操作系统帮我 GC 的方法。<strong>即 Python 不能帮我 GC 的，操作系统帮我 GC</strong></p>
<p>PS: 其实用 multiprocessing 模块也行，只是线程池可以稍微控制一下进程创建的数量。</p>
</blockquote>
<p>总结一下，对于大量的 DataFrame 处理：</p>
<ol>
<li>多个进程池是一种处理的方式。</li>
<li>尽量减少 DataFrame 的数量</li>
<li>尽量减少赋值导致的 COPY, 修改时带上 inplace=True</li>
<li>读取 CSV 的时候指定相关列的类型 {‘col_a’: np.float64, ‘col_b’: np.int32}，否则 pandas 会产生大量的 object</li>
</ol>
<h2 id="0xDD-番外篇"><a href="#0xDD-番外篇" class="headerlink" title="0xDD 番外篇"></a>0xDD 番外篇</h2><p>在分析这次的数据过程中，自己的 Mac 主板也坏掉了，幸好还在保修期，送到苹果店维修了一下。给苹果的售后点个赞。</p>
<h2 id="0xEE-更新"><a href="#0xEE-更新" class="headerlink" title="0xEE 更新"></a>0xEE 更新</h2><ul>
<li><strong>2017-12-07</strong> 初始化本文</li>
<li><strong>2017-12-16</strong> 增加分析阶段的文字</li>
<li><strong>2017-12-26</strong> 去掉一些 TODO, 发布到我的小站</li>
<li><strong>2017-12-31</strong> 正式发布</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;机缘巧合，最近公司突然要搞一波大量数据的分析。属于客流类的分析。&lt;/p&gt;
&lt;p&gt;数据量级也还算不错，
    
    </summary>
    
      <category term="Python 黑魔法" scheme="http://twocucao.xyz/categories/Python-%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="性能优化" scheme="http://twocucao.xyz/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="多进程" scheme="http://twocucao.xyz/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的作用域准则</title>
    <link href="http://twocucao.xyz/2017/11/20/PythonClosureAndScopes/"/>
    <id>http://twocucao.xyz/2017/11/20/PythonClosureAndScopes/</id>
    <published>2017-11-20T01:33:58.000Z</published>
    <updated>2018-01-28T01:36:15.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>因为最早用的是 Java 和 C#，写 Python 的时候自然也把 Python 作用域的想的和原有的一致。</p>
<p>Python 的作用域变量遵循在大部分情况下是一致的，但也有例外的情况。</p>
<p>本文着通过遇到的一个作用域的小问题来说说 Python 的作用域</p>
<a id="more"></a>
<h2 id="0x01-作用域的几个实例"><a href="#0x01-作用域的几个实例" class="headerlink" title="0x01 作用域的几个实例"></a>0x01 作用域的几个实例</h2><p>Python 的作用域变量遵循在大部分情况下与其他语言一致，但也有例外的情况。比如：</p>
<h3 id="1-1-第一个例子"><a href="#1-1-第一个例子" class="headerlink" title="1.1 第一个例子"></a>1.1 第一个例子</h3><p>作用域第一版代码如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line">print(a, id(a)) <span class="comment"># 打印 1 4465620064</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></div><div class="line">    print(a, id(a))</div><div class="line">func1()  <span class="comment"># 打印 1 4465620064</span></div></pre></td></tr></table></figure>
<p>作用域第一版对应字节码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">4           0 LOAD_GLOBAL              0 (print)</div><div class="line">            3 LOAD_GLOBAL              1 (a)</div><div class="line">            6 LOAD_GLOBAL              2 (id)</div><div class="line">            9 LOAD_GLOBAL              1 (a)</div><div class="line">           12 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">           15 CALL_FUNCTION            2 (2 positional, 0 keyword pair)</div><div class="line">           18 POP_TOP</div><div class="line">           19 LOAD_CONST               0 (None)</div><div class="line">           22 RETURN_VALUE</div></pre></td></tr></table></figure>
<blockquote>
<p>PS: 行 4 表示 代码行数 0 / 3 / 9 … 不知道是啥，我就先管他叫做<strong>条</strong>吧 是 load global<br>PPS: 注意条 3/6 LOAD_GLOBAL 为从全局变量中加载</p>
</blockquote>
<p>顺手附上本文需要着重理解的几个指令</p>
<pre><code>LOAD_GLOBA          : Loads the global named co_names[namei] onto the stack.
LOAD_FAST(var_num)  : Pushes a reference to the local co_varnames[var_num] onto the stack.
STORE_FAST(var_num) : Stores TOS into the local co_varnames[var_num].
</code></pre><p>这点似乎挺符合我们认知的，那么，再深一点呢？既然这个变量是可以 Load 进来的就可以修改咯？</p>
<h3 id="1-2-第二个例子"><a href="#1-2-第二个例子" class="headerlink" title="1.2 第二个例子"></a>1.2 第二个例子</h3><p>然而并不是，我们看作用域第二版对应代码如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line">print(a, id(a)) <span class="comment"># 打印 1 4465620064</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">2</span></div><div class="line">    print(a, id(a))</div><div class="line">func2() <span class="comment"># 打印 2 4465620096</span></div></pre></td></tr></table></figure>
<p>一看，WTF, 两个 a 内存值不一样。证明这两个变量是完全两个变量。</p>
<p>作用域第二版对应字节码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">4           0 LOAD_CONST               1 (2)</div><div class="line">            3 STORE_FAST               0 (a)</div><div class="line"></div><div class="line">5           6 LOAD_GLOBAL              0 (print)</div><div class="line">            9 LOAD_FAST                0 (a)</div><div class="line">           12 LOAD_GLOBAL              1 (id)</div><div class="line">           15 LOAD_FAST                0 (a)</div><div class="line">           18 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">           21 CALL_FUNCTION            2 (2 positional, 0 keyword pair)</div><div class="line">           24 POP_TOP</div><div class="line">           25 LOAD_CONST               0 (None)</div><div class="line">           28 RETURN_VALUE</div></pre></td></tr></table></figure>
<blockquote>
<p>注意行 4 条 3 (STORE_FAST) 以及行 5 条 9/15 (LOAD_FAST)</p>
</blockquote>
<p>这说明了这里的 a 并不是 LOAD_GLOBAL 而来，而是从该函数的作用域 LOAD_FAST 而来。</p>
<h3 id="1-3-第三个例子"><a href="#1-3-第三个例子" class="headerlink" title="1.3 第三个例子"></a>1.3 第三个例子</h3><p>那我们在函数体重修改一下 a 值看看。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">()</span>:</span></div><div class="line">    print(a, id(a)) <span class="comment"># 注释掉此行不影响结论</span></div><div class="line">    a += <span class="number">1</span></div><div class="line">    print(a, id(a))</div><div class="line">func3() <span class="comment"># 当调用到这里的时候 local variable 'a' referenced before assignment</span></div><div class="line"><span class="comment"># 即 a += 1 =&gt; a = a + 1 这里的第二个 a 报错鸟</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">3           0 LOAD_GLOBAL              0 (print)</div><div class="line">            3 LOAD_FAST                0 (a)</div><div class="line">            6 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">            9 POP_TOP</div><div class="line"></div><div class="line">4          10 LOAD_FAST                0 (a)</div><div class="line">           13 LOAD_CONST               1 (1)</div><div class="line">           16 BINARY_ADD</div><div class="line">           17 STORE_FAST               0 (a)</div><div class="line"></div><div class="line">5          20 LOAD_GLOBAL              0 (print)</div><div class="line">           23 LOAD_FAST                0 (a)</div><div class="line">           26 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">           29 POP_TOP</div><div class="line">           30 LOAD_CONST               0 (None)</div><div class="line">           33 RETURN_VALUE</div></pre></td></tr></table></figure>
<p>那么，func3 也就自然而言由于没有无法 LOAD_FAST 对应的 a 变量，则报了引用错误。</p>
<p>然后问题来了，a 为基本类型的时候是这样的。如果引用类型呢？我们直接仿照 func3 的实例把 a 改成 list 类型。如下</p>
<h3 id="1-4-第四个例子"><a href="#1-4-第四个例子" class="headerlink" title="1.4 第四个例子"></a>1.4 第四个例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span><span class="params">()</span>:</span></div><div class="line">    print(a, id(a)) <span class="comment"># 这条注不注释掉都一样</span></div><div class="line">    a += <span class="number">1</span> <span class="comment"># 这里我故意写错 按理来说应该是 a.append(1)</span></div><div class="line">    print(a, id(a))</div><div class="line">func4()</div><div class="line"></div><div class="line"><span class="comment"># 当调用到这里的时候 local variable 'a' referenced before assignment</span></div></pre></td></tr></table></figure>
<p>╮(╯▽╰)╭ 看来事情那么简单，结果变量 a 依旧是无法修改。</p>
<p>可按理来说跟应该报下面的错误呀</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;int&apos; object is not iterable</div></pre></td></tr></table></figure>
<h3 id="1-5-第五个例子"><a href="#1-5-第五个例子" class="headerlink" title="1.5 第五个例子"></a>1.5 第五个例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func5</span><span class="params">()</span>:</span></div><div class="line">    print(a, id(a))</div><div class="line">    a.append(<span class="number">1</span>)</div><div class="line">    print(a, id(a))</div><div class="line">func5()</div><div class="line"><span class="comment"># [1] 4500243208</span></div><div class="line"><span class="comment"># [1, 1] 4500243208</span></div></pre></td></tr></table></figure>
<p>这下可以修改了。看一下字节码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">3           0 LOAD_GLOBAL              0 (print)</div><div class="line">            3 LOAD_GLOBAL              1 (a)</div><div class="line">            6 LOAD_GLOBAL              2 (id)</div><div class="line">            9 LOAD_GLOBAL              1 (a)</div><div class="line">           12 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">           15 CALL_FUNCTION            2 (2 positional, 0 keyword pair)</div><div class="line">           18 POP_TOP</div><div class="line"></div><div class="line">4          19 LOAD_GLOBAL              1 (a)</div><div class="line">           22 LOAD_ATTR                3 (append)</div><div class="line">           25 LOAD_CONST               1 (1)</div><div class="line">           28 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">           31 POP_TOP</div><div class="line"></div><div class="line">5          32 LOAD_GLOBAL              0 (print)</div><div class="line">           35 LOAD_GLOBAL              1 (a)</div><div class="line">           38 LOAD_GLOBAL              2 (id)</div><div class="line">           41 LOAD_GLOBAL              1 (a)</div><div class="line">           44 CALL_FUNCTION            1 (1 positional, 0 keyword pair)</div><div class="line">           47 CALL_FUNCTION            2 (2 positional, 0 keyword pair)</div><div class="line">           50 POP_TOP</div><div class="line">           51 LOAD_CONST               0 (None)</div><div class="line">           54 RETURN_VALUE</div></pre></td></tr></table></figure>
<p>从全局拿来 a 变量，执行 append 方法。</p>
<h2 id="0x02-作用域准则以及本地赋值准则"><a href="#0x02-作用域准则以及本地赋值准则" class="headerlink" title="0x02 作用域准则以及本地赋值准则"></a>0x02 作用域准则以及本地赋值准则</h2><h3 id="2-1-作用域准则"><a href="#2-1-作用域准则" class="headerlink" title="2.1 作用域准则"></a>2.1 作用域准则</h3><p>看来这是解释器遵循了某种变量查找的法则，似乎就只能从原理上而不是在 CPython 的实现上解释这个问题了。</p>
<p>查找了一些资料，发现 Python 解释器在依据 基于 LEGB 准则 （顺手吐槽一下不是 LGBT）</p>
<p>LEGB 指的变量查找遵循</p>
<ul>
<li>Local</li>
<li>Enclosing-function locals</li>
<li>Global</li>
<li>Built-In</li>
</ul>
<p>StackOverFlow 上 martineau 提供了一个不错的例子用来说明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">100</span></div><div class="line">print(<span class="string">"1. Global x:"</span>, x)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></div><div class="line">    y = x</div><div class="line">    print(<span class="string">"2. Enclosed y:"</span>, y)</div><div class="line">    x = x + <span class="number">1</span></div><div class="line">    print(<span class="string">"3. Enclosed x:"</span>, x)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"4. Enclosed self.x"</span>, self.x)</div><div class="line">        print(<span class="string">"5. Global x"</span>, x)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            print(y)</div><div class="line">        <span class="keyword">except</span> NameError <span class="keyword">as</span> e:</div><div class="line">            print(<span class="string">"6."</span>, e)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method_local_ref</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            print(x)</div><div class="line">        <span class="keyword">except</span> UnboundLocalError <span class="keyword">as</span> e:</div><div class="line">            print(<span class="string">"7."</span>, e)</div><div class="line">        x = <span class="number">200</span> <span class="comment"># causing 7 because has same name</span></div><div class="line">        print(<span class="string">"8. Local x"</span>, x)</div><div class="line"></div><div class="line">inst = Test()</div><div class="line">inst.method()</div><div class="line">inst.method_local_ref()</div></pre></td></tr></table></figure>
<p>我们试着用变量查找准则去解释 <strong>第一个例子</strong> 的时候，是解释的通的。</p>
<p>第二个例子，发现函数体内的 a 变量已经不是那个 a 变量了。要是按照这个查找原则的话，似乎有点说不通了。</p>
<p>但当解释第三个例子的时候，就完全说不通了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">()</span>:</span></div><div class="line">    print(a, id(a)) <span class="comment"># 注释掉此行不影响结论</span></div><div class="line">    a += <span class="number">1</span></div><div class="line">    print(a, id(a))</div><div class="line">func3() <span class="comment"># 当调用到这里的时候 local variable 'a' referenced before assignment</span></div><div class="line"><span class="comment"># 即 a += 1 =&gt; a = a + 1 这里的第二个 a 报错鸟</span></div></pre></td></tr></table></figure>
<p>按照我的猜想，这里的代码执行可能有两种情况：</p>
<ul>
<li>当代码执行到第三行的时候可能是向从 local 找 a, 发现没有，再找 Enclosing-function 发现没有，最后应该在 Global 里面找到才是。注释掉第三行的时候也是同理。</li>
<li>当代码执行到第三行的时候可能是向下从 local 找 a, 发现有，然后代码执行，结束。</li>
</ul>
<p>但如果真的和我的想法接近的话，这两种情况都可以执行，除了变量作用域之外还是有一些其他的考量。我把这个叫做<strong>本地赋值准则</strong> （拍脑袋起的名称）</p>
<p>一般我们管这种考量叫做 <del>Python 作者就是觉得这种编码方式好你爱写不写</del> Python 作者对于变量作用域的权衡。</p>
<p>事实上，当解释器编译函数体为字节码的时候，如果是一个赋值操作 (list.append 之流不是赋值操作），则会被限定这个变量认为是一个 local 变量。如果在 local 中找不到，并不向上查找，就报引用错误。</p>
<pre><code>这不是 BUG
这不是 BUG
这不是 BUG
</code></pre><p>这是一种设计权衡 Python 认为 虽然不强求强制声明类型，但假定被赋值的变量是一个 Local 变量。这样减少避免动态语言比如 JavaScript 动不动就修改掉了全局变量的坑。</p>
<p>这也就解释了第四个例子中赋值操作报错，以及第五个例子 append 为什么可以正常执行。</p>
<p>如果我偏要勉强呢？ 可以通过 global 和 nonlocal 来 引入模块级变量 or 上一级变量。</p>
<blockquote>
<p>PS: JS 也开始使用 let 进行声明，小箭头函数内部赋值查找变量也是向上查找。</p>
</blockquote>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li><a href="https://stackoverflow.com/questions/291978/short-description-of-the-scoping-rules" target="_blank" rel="external">Martineau 的例子</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-11-20</strong> 从原有笔记中抽取本文整理而成</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;因为最早用的是 Java 和 C#，写 Python 的时候自然也把 Python 作用域的想的和原有的一致。&lt;/p&gt;
&lt;p&gt;Python 的作用域变量遵循在大部分情况下是一致的，但也有例外的情况。&lt;/p&gt;
&lt;p&gt;本文着通过遇到的一个作用域的小问题来说说 Python 的作用域&lt;/p&gt;
    
    </summary>
    
      <category term="Python 黑魔法" scheme="http://twocucao.xyz/categories/Python-%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
    
      <category term="作用域" scheme="http://twocucao.xyz/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
      <category term="语言细节" scheme="http://twocucao.xyz/tags/%E8%AF%AD%E8%A8%80%E7%BB%86%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 Cheatsheet</title>
    <link href="http://twocucao.xyz/2017/10/20/UbuntuCheatSheet/"/>
    <id>http://twocucao.xyz/2017/10/20/UbuntuCheatSheet/</id>
    <published>2017-10-20T10:41:47.000Z</published>
    <updated>2018-01-28T11:43:27.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Shell 单行命令。</p>
<p>不定期更新。</p>
<p>桌面版和 Server 版的操作系统版本均为 Ubuntu 16.04 , 数据库为 MySQL / PostgreSQL , Python 3.5.2 开发和运行环境。</p>
<p>由于部分 Mac 上面的配置与 Ubuntu 上配置几乎相同，特别是一些桌面端，跨平台，强烈建议使用。</p>
<p>每次来一个新同事就需要给他们的环境进行配置，配置其实挺麻烦的，虽然可以花一天的时间配置一遍，但总觉得如果多来几个同事的话我基本上就废掉了。<br>于是抛弃 bash 脚本，修改为 Ansible 脚本，将当前的配置任务彻底脚本化。</p>
<a id="more"></a>
<h2 id="0x01-Ubuntu-桌面版开发基本配置"><a href="#0x01-Ubuntu-桌面版开发基本配置" class="headerlink" title="0x01 Ubuntu 桌面版开发基本配置"></a>0x01 Ubuntu 桌面版开发基本配置</h2><p>语言级别配置，请参考我的其他文章，如何优雅的使用 MAC</p>
<h2 id="0x02-Ubuntu-服务器版本基本配置"><a href="#0x02-Ubuntu-服务器版本基本配置" class="headerlink" title="0x02 Ubuntu 服务器版本基本配置"></a>0x02 Ubuntu 服务器版本基本配置</h2><p>第一步，更新源：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span></div><div class="line">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted <span class="comment">#Added by software-properties</span></div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe <span class="comment">#Added by software-properties</span></div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe <span class="comment">#Added by software-properties</span></div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse <span class="comment">#Added by software-properties</span></div><div class="line">deb http://archive.canonical.com/ubuntu xenial partner</div><div class="line">deb-src http://archive.canonical.com/ubuntu xenial partner</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe <span class="comment">#Added by software-properties</span></div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 更换源</span></div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev</div><div class="line">sudo apt-get install zsh tree htop</div><div class="line">sudo apt-get install build-essential acl ntp htop git libpq-dev libmysqlclient-dev libffi-dev libfreetype6-dev libjpeg8-dev liblcms2-dev libtiff5-dev libwebp-dev libxml2-dev libxslt1-dev tcl8.6-dev tk8.6-dev zlib1g-dev python-dev python-pip python-pycurl python-tk ipython supervisor python3.5 python3.5-dev python3-pip python3-lxml python3-tk ipython3</div><div class="line">sudo apt-get install mysql-server mysql-client libmysqlclient-dev slurm</div><div class="line"></div><div class="line"><span class="comment"># GIT 配置</span></div><div class="line">git config --global color.ui <span class="literal">true</span></div><div class="line">git config --global user.name <span class="string">"twocucao"</span></div><div class="line">git config --global user.email <span class="string">"twocucao@gmail.com"</span></div><div class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"twocucao@gmail.com"</span></div></pre></td></tr></table></figure>
<h3 id="2-1-设置无登录密钥"><a href="#2-1-设置无登录密钥" class="headerlink" title="2.1 设置无登录密钥"></a>2.1 设置无登录密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 刚开始用了一个很蠢的方法</span></div><div class="line">scp ~/.ssh/id_rsa.pub twocucao@192.168.2.156:.ssh/id_rsa.pub</div><div class="line">ssh twocucao@192.168.2.156 <span class="string">"mkdir .ssh;chmod 0700 .ssh"</span></div><div class="line"></div><div class="line"><span class="comment"># 现在想想，可以直接 ssh-copy-id</span></div><div class="line">ssh-copy-id twocucao@192.168.2.156</div></pre></td></tr></table></figure>
<p><a href="http://askubuntu.com/questions/46930/how-can-i-set-up-password-less-ssh-login" target="_blank" rel="external">http://askubuntu.com/questions/46930/how-can-i-set-up-password-less-ssh-login</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 服务器</span></div><div class="line"></div><div class="line">sudo apt-get install openssh-server</div><div class="line">sudo vi /etc/ssh/sshd_config <span class="comment"># 找到 PermitRootLogin no 一行，改为 PermitRootLogin yes</span></div><div class="line">sudo service ssh restart</div><div class="line"></div><div class="line">sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev</div><div class="line"></div><div class="line">sudo adduser deploy</div><div class="line">sudo adduser deploy sudo</div><div class="line">su deploy</div><div class="line"></div><div class="line"><span class="comment"># 开发机复制 ssh 公钥。</span></div><div class="line"><span class="comment"># 可以用下面的命令，汗，之前都是在服务器上面创建.ssh 文件夹，然后在本地 scp 拷贝过去，现在想想这个方法还是挺笨的。</span></div><div class="line"><span class="comment"># 就像这样</span></div><div class="line">scp ~/.ssh/id_rsa.pub deploy@192.168.1.143:/webapps/xxxapp/.ssh/authorized_keys</div><div class="line"><span class="comment"># 其实这个命令就 OK 了。</span></div><div class="line">ssh-copy-id deploy@IPADDRESS</div><div class="line"></div><div class="line"><span class="comment"># 服务器</span></div><div class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7</div><div class="line">sudo apt-get install -y apt-transport-https ca-certificates</div><div class="line"></div><div class="line">sudo apt-get install -y nginx-extras</div><div class="line">sudo service nginx start</div></pre></td></tr></table></figure></p>
<h2 id="0x02-Ubuntu-服务器版本基本配置-1"><a href="#0x02-Ubuntu-服务器版本基本配置-1" class="headerlink" title="0x02 Ubuntu 服务器版本基本配置"></a>0x02 Ubuntu 服务器版本基本配置</h2><h2 id="0x03-了解-Linux-服务器运行情况"><a href="#0x03-了解-Linux-服务器运行情况" class="headerlink" title="0x03 了解 Linux 服务器运行情况"></a>0x03 了解 Linux 服务器运行情况</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 运行时间</span></div><div class="line">uptime</div><div class="line"></div><div class="line"><span class="comment"># 内存情况</span></div><div class="line">free -h</div><div class="line"></div><div class="line"><span class="comment"># 网络类</span></div><div class="line"><span class="comment">## 实时流量监控</span></div><div class="line">iftop</div><div class="line"><span class="comment">## 进程占用带宽</span></div><div class="line">nethogs</div><div class="line"><span class="comment">## sudo nethogs eth0</span></div><div class="line">iptraf</div><div class="line"></div><div class="line"><span class="comment"># 磁盘类</span></div><div class="line">iotop</div><div class="line"><span class="comment">## 当 dstat 的 wai 字段值比较大时，可以使用 iotop 找出哪些进程出了问题</span></div><div class="line"></div><div class="line"><span class="comment"># 综合类 之 监控进程，进程管理</span></div><div class="line">top</div><div class="line">htop</div><div class="line">glances <span class="comment"># PS , 这个监控粒度更细</span></div><div class="line"></div><div class="line"><span class="comment"># 综合类 可以取代 vmstat , iostat , netstat , ifstat</span></div><div class="line">dstat</div><div class="line"></div><div class="line"><span class="comment"># 综合类</span></div><div class="line"><span class="comment"># 约等于 strace + tcpdump + htop + iftop + lsof</span></div><div class="line">sysdig</div></pre></td></tr></table></figure>
<h2 id="0x04-踩坑集合"><a href="#0x04-踩坑集合" class="headerlink" title="0x04 踩坑集合"></a>0x04 踩坑集合</h2><p>前段时间公司新买了一台 Thinkpad Server 作为内网服务器。</p>
<p>于是在安装 Ubuntu16.04 的时候就遇到了一个令人哭笑不得的问题。</p>
<blockquote>
<p><strong>无法正常安装</strong> 报 ubuntu 的 initramfs 错误。</p>
</blockquote>
<p>于是，我下意识的去 Google 问题，在 Ubuntu 的一个论坛上面找到了对应的答案：</p>
<blockquote>
<p>是 Superblock 的问题。</p>
</blockquote>
<p>对应措施如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 找到分区号</span></div><div class="line">sudo fdisk <span class="_">-l</span>|grep Linux|grep -Ev <span class="string">'swap'</span></div><div class="line"><span class="comment"># 找到超级块</span></div><div class="line">sudo dumpe2fs /dev/sda2 | grep superblock</div><div class="line"><span class="comment"># 修复超级块</span></div><div class="line">sudo fsck -b 32768 /dev/sda2 -y</div></pre></td></tr></table></figure>
<p>然后重启即可。</p>
<p>当然，问题并没有结束，还是在老地方发现 initramfs 错误。</p>
<p>就在我哭笑不得的准备最后一搏，实在不行就安装 CentOS 作为系统的时候，由于安装时候选择 language 的时候选择英文，结果居然安装成功了。</p>
<blockquote>
<p>所以，解决问题的方式就是<strong>不要使用简体中文进行安装</strong>.</p>
</blockquote>
<p>虽然这是一个很奇怪的问题，至今我也没有探索出来具体的原因。想到问题居然是因为安装的时候因为选择了中文安装。</p>
<blockquote>
<p>这个问题还真的是…..</p>
</blockquote>
<p><strong>最后知道真相的我眼泪掉下来</strong></p>
<h3 id="3-1-磁盘问题"><a href="#3-1-磁盘问题" class="headerlink" title="3.1 磁盘问题"></a>3.1 磁盘问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">df -h 查看磁盘块占用的文件（block）</div><div class="line">df -i 查看索引节点的占用（Inodes）</div><div class="line">find / -size +100M |xargs ls -lh</div><div class="line"># 删除 5 天前的文件</div><div class="line">find /path/to/files* -mtime +5 -exec rm &#123;&#125; \;</div><div class="line">du -h</div><div class="line">rm xxx.log</div><div class="line">echo &quot;&quot; &gt; xxx.log</div></pre></td></tr></table></figure>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-03-19</strong> 重修文字，准备整理安装配置将结果转化为 Ansible PlayBook</li>
<li><strong>2017-10-20</strong> 重修文字，准备整理安装配置将结果转化为 Ansible PlayBook</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Shell 单行命令。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
&lt;p&gt;桌面版和 Server 版的操作系统版本均为 Ubuntu 16.04 , 数据库为 MySQL / PostgreSQL , Python 3.5.2 开发和运行环境。&lt;/p&gt;
&lt;p&gt;由于部分 Mac 上面的配置与 Ubuntu 上配置几乎相同，特别是一些桌面端，跨平台，强烈建议使用。&lt;/p&gt;
&lt;p&gt;每次来一个新同事就需要给他们的环境进行配置，配置其实挺麻烦的，虽然可以花一天的时间配置一遍，但总觉得如果多来几个同事的话我基本上就废掉了。&lt;br&gt;于是抛弃 bash 脚本，修改为 Ansible 脚本，将当前的配置任务彻底脚本化。&lt;/p&gt;
    
    </summary>
    
      <category term="善用佳软" scheme="http://twocucao.xyz/categories/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
    
      <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
      <category term="Ubuntu" scheme="http://twocucao.xyz/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅地使用 macOS</title>
    <link href="http://twocucao.xyz/2017/10/05/ElegantMac/"/>
    <id>http://twocucao.xyz/2017/10/05/ElegantMac/</id>
    <published>2017-10-05T12:06:05.000Z</published>
    <updated>2018-01-28T01:32:40.588Z</updated>
    
    <content type="html"><![CDATA[<p>当时写这篇文章的时候才接触 mac 没多久，使用快两年之后，再次修订了本文。</p>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>谈及 macOS , 很多人喜欢和 Win 比个高下。在我看来， Win 虽在非编程类生态和易用性比 Mac 要好很多，可专业人士之所以专业是因为他能挑选适合的武器发挥最大的效用，不是吗？</p>
<blockquote>
<p>适合自己的，能让自己用最大效率生产或者是娱乐的，才是更好的工具。</p>
</blockquote>
<a id="more"></a>
<p>Win 的优点如下：</p>
<ul>
<li>优良的兼容性。</li>
<li>由于出自于什么都爱做的微软公司，从整体来说，VS，.NET, 游戏性，兼容性，性能，新手上手速度来说，都是遥遥领先 Mac 的。</li>
</ul>
<p>Win 的缺点如下：</p>
<ul>
<li>微软的战线实在是拉的太长，什么都想做，什么都想垄断。于是，与之服务密切相关的公司也就受到了 MS 的牵制。这对大公司来说，几乎是不能够忍受的行为。硅谷的公司使用微软服务的也就接近 5%（可能有误差）。</li>
<li>糟糕的终端环境（DOS）和无法与、*nux 世界的脚本友好相处使得系统的可定制性和进阶操作性大大降低。</li>
<li>虽然有 Everything，TotalCMD，AHK 这种神级辅助工具可以满足定制要求。但由于过高的学习成本（哈哈哈，混乱也是学习成本之一，AHK 语言真的很混乱啊，TC 实在是太不人性化了）。</li>
<li><strong>Python 的环境配置实在是太头疼了</strong></li>
</ul>
<p>Win 的缺点就是我切到 Mac 上面的原因。</p>
<p>macOS 的优点如下：</p>
<ul>
<li>Mac 的好在于终端和美观的图形的结合。适合不是微软技术栈和重度 Office 的用户。</li>
<li>*nux 应用的方便以及非常容易与脚本文件配合出强大的组合技能。</li>
<li>反观 Win 上，则这种组合技能则在环境配置上和操作流畅度上差了很多。</li>
</ul>
<p>macOS 的缺点如下：</p>
<ul>
<li>娱乐项目实在是少的要死。Metal 和 DirectX 相差不是一点点。</li>
<li>软件和有些少的不只一点点。</li>
</ul>
<p>本文从下面几处入手，分别从下面几个角度介绍了 macOS</p>
<pre><code>▼ 如何优雅地使用 macOS
    0x00 前言
▼ 0x01 系统内置
    1.1 系统设置
    1.2 自带软件
    1.3 快捷键与触摸板
▼ 0x02 必备软件
    2.1 必备软件 之 日常必备
    ▼ 2.2 必备软件 之 开发必备
        2.2.1 GUI 应用
        2.2.2 CMD 命令
    ▼ 2.3 必备软件 之 编程语言
        2.3.1 Shell
        2.3.2 Python
▼ 0x03 踩坑史
    ▼ 3.1 日常类
        01. 时间机器无法完成备份
        02. 下载站的软件包显示损坏
    ▼ 3.2 编程类
        01. homebrew 的与 Python 的问题
    0xEE 参考链接
</code></pre><h2 id="0x01-系统内置"><a href="#0x01-系统内置" class="headerlink" title="0x01 系统内置"></a>0x01 系统内置</h2><h3 id="1-1-系统设置"><a href="#1-1-系统设置" class="headerlink" title="1.1 系统设置"></a>1.1 系统设置</h3><p>General</p>
<ul>
<li>默认浏览器 : Google Chrome</li>
</ul>
<p>Decktop &amp; Screen Saver</p>
<ul>
<li>桌面 / 屏保</li>
</ul>
<p>Language &amp; Region</p>
<ul>
<li>语言</li>
<li>地区设置</li>
</ul>
<p>Security &amp; Privacy</p>
<ul>
<li>防火墙</li>
</ul>
<p>Sharing</p>
<ul>
<li>Remote Control - SSH</li>
</ul>
<p>Trackpad</p>
<ul>
<li>设置手势</li>
<li>滚轮 Scrool Direction : Natural</li>
</ul>
<h3 id="1-2-自带软件"><a href="#1-2-自带软件" class="headerlink" title="1.2 自带软件"></a>1.2 自带软件</h3><ul>
<li>iTunes</li>
<li>iPhoto</li>
<li>iMessage</li>
<li>SpotLight -&gt; Alfred 3</li>
</ul>
<h3 id="1-3-快捷键与触摸板"><a href="#1-3-快捷键与触摸板" class="headerlink" title="1.3 快捷键与触摸板"></a>1.3 快捷键与触摸板</h3><ul>
<li>cmd 为 command 按键，通常情况下为所有桌面程序通用性的快捷键。</li>
<li>ctrl ，通常情况下是针对程序的功能进行加强，并且此功能往往是非 cmd 类（窗口操作，选择，复制粘贴等等）操作。</li>
<li><p>shift 按键通常用于加强操作。一般会让操作更进一步 or 相反操作。</p>
</li>
<li><p>cmd+tab =~ alt+tab 程序之间的切换</p>
</li>
<li><p>cmd+` 应用内窗口切换</p>
</li>
<li><p>cmd+h 窗口 hide</p>
</li>
<li>cmd+m 窗口 minimize</li>
<li>cmd+n 新建窗口</li>
<li>cmd+o 打开</li>
<li>cmd+s 保存</li>
<li>cmd+shift+s 另存为</li>
<li>cmd+p 打印 print</li>
<li>cmd+w 关闭</li>
<li><p>cmd+q quit</p>
</li>
<li><p>cmd+a select all</p>
</li>
<li>cmd+i show info</li>
<li>cmd+n create a new folder</li>
<li>cmd+f search</li>
<li>cmd+c copy</li>
<li>cmd+v paste</li>
<li>cmd+delete  删除选中文件</li>
<li><p>cmd+shift+delete 清空回收站</p>
</li>
<li><p>cmd+= 放大</p>
</li>
<li>cmd+- 缩小</li>
<li>cmd+t 新建选项卡</li>
<li><p>cmd+r 刷新</p>
</li>
<li><p>cmd+shift+3 截取整个屏幕</p>
</li>
<li>cmd+shift+4 截取选择区域</li>
<li>cmd+shift+4+SPACE 截取选择窗口</li>
<li>cmd+ 鼠标点击 -&gt; 选中不连续文件</li>
<li><p>control+ 鼠标点击 -&gt; 相当于 win 中右键点击</p>
</li>
<li><p>fn+left home</p>
</li>
<li>fn+right end</li>
<li>fn+up pageup</li>
<li>fn+down pagedown</li>
</ul>
<p>触摸板手势：</p>
<ul>
<li><p>点击</p>
<ul>
<li>单指点击 - 单击</li>
<li>单指滑动 - 滑动鼠标光标</li>
<li>双指点击 - 相当于 Windows 的鼠标右键</li>
<li>三指点击 - 划词查找</li>
</ul>
</li>
<li><p>滑动与缩放</p>
<ul>
<li>双指上下滑动 - 滚动</li>
<li>双指缩放 - 与 Android 上图片缩放一致</li>
<li>双指双击 - 只能缩放</li>
<li>双指旋转 - 旋转</li>
<li>双指左右滑动 - 应用内切换网页</li>
<li>双指头从右往左</li>
<li>三指头左右滑动 - 全屏幕 App 切换</li>
<li>大拇指和食中无名缩放 - launchpad</li>
</ul>
</li>
</ul>
<h2 id="0x02-必备软件"><a href="#0x02-必备软件" class="headerlink" title="0x02 必备软件"></a>0x02 必备软件</h2><h3 id="2-1-必备软件-之-日常必备"><a href="#2-1-必备软件-之-日常必备" class="headerlink" title="2.1 必备软件 之 日常必备"></a>2.1 必备软件 之 日常必备</h3><ul>
<li><p>启动器</p>
<ul>
<li>Alfred 3</li>
<li>SpotLight</li>
</ul>
</li>
<li><p>网络工具</p>
<ul>
<li>Chrome</li>
</ul>
</li>
<li><p>社交通讯</p>
<ul>
<li>QQ</li>
<li>WeXin</li>
</ul>
</li>
<li><p>图形图像</p>
<ul>
<li>Adobe PhotoShop CC</li>
<li>Adobe PhotoShop LightRoom</li>
<li>Sketch</li>
<li>Annotate</li>
<li>Camtasia 2</li>
<li>Snagit</li>
<li>ScreenFlow</li>
<li>Final Cut Pro</li>
<li>MPlayerX</li>
<li>QuickTime</li>
<li>iQiyi</li>
<li>NeteaseMusic</li>
<li>IINA</li>
</ul>
</li>
<li><p>办公软件</p>
<ul>
<li>欧陆词典</li>
<li>Calibre</li>
<li>Wiznote</li>
<li>PDF Reader</li>
<li>iBook</li>
<li>Microsoft Office</li>
<li>Work 套件：包括 pages, numbers, keynote</li>
<li>XMind</li>
<li>Airmail</li>
<li>TeamViewer</li>
<li>OmniFocus</li>
<li>OmniGraffle</li>
<li>OmniOutline</li>
<li>OmniPlan</li>
</ul>
</li>
<li><p>系统软件</p>
<ul>
<li>搜狗输入法</li>
<li>AppCleaner</li>
<li>CleanMyMac</li>
<li>VMWare</li>
<li>BetterZip</li>
<li>Caffeine /  Amphetamine</li>
<li>PopClip</li>
<li>HandShaker</li>
<li>AirDroid</li>
</ul>
</li>
</ul>
<h3 id="2-2-必备软件-之-开发必备"><a href="#2-2-必备软件-之-开发必备" class="headerlink" title="2.2 必备软件 之 开发必备"></a>2.2 必备软件 之 开发必备</h3><h4 id="2-2-1-GUI-应用"><a href="#2-2-1-GUI-应用" class="headerlink" title="2.2.1 GUI 应用"></a>2.2.1 GUI 应用</h4><ul>
<li><p>终端用户</p>
<ul>
<li>iTerm2</li>
</ul>
</li>
<li><p>IDE</p>
<ul>
<li>PyCharm</li>
<li>IntellijIDEA</li>
<li>WebStorm</li>
</ul>
</li>
<li><p>编辑器</p>
<ul>
<li>MacVim 配合 <a href="https://github.com/twocucao/c-vim" target="_blank" rel="external">C-VIM</a></li>
<li>Sublime Text 3</li>
</ul>
</li>
<li><p>后台组件</p>
<ul>
<li>MySQL</li>
<li>PostgreSQL</li>
<li>Redis</li>
<li>MongoDB</li>
</ul>
</li>
<li><p>数据库管理软件</p>
<ul>
<li>Navicat</li>
<li>Datagrip</li>
<li>RoboMongo</li>
<li>RDM</li>
<li>Dash</li>
</ul>
</li>
<li><p>网络工具</p>
<ul>
<li>SS QT</li>
<li>Charles, Wireshark</li>
</ul>
</li>
<li><p>Chrome</p>
<ul>
<li>Exporter : 百度云，需要离线安装</li>
<li>AdBlock : 广告拦截</li>
<li>AutoPatchWork : 链接下一页</li>
<li>Axure RP Extension : Axure</li>
<li>CSSViewer</li>
<li>Dream Afar New Tab</li>
<li>JSON Editor</li>
<li>JSON View</li>
<li>Octotree</li>
<li>One-Click Extensions Manager</li>
<li>Proxy SwitchyOmega</li>
<li>React Developer Tools</li>
<li>Redux DevTools</li>
<li>Vue.js devtools</li>
<li>Vimium</li>
</ul>
</li>
<li><p>代码仓库</p>
<ul>
<li>Github Desktop</li>
<li>SourceTree</li>
</ul>
</li>
<li><p>GIS 相关</p>
<ul>
<li>ArcGIS</li>
<li>QGIS</li>
<li>PostgreSQL + PostGIS</li>
</ul>
</li>
</ul>
<h4 id="2-2-2-CMD-命令"><a href="#2-2-2-CMD-命令" class="headerlink" title="2.2.2 CMD 命令"></a>2.2.2 CMD 命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="built_in">test</span> ! $(<span class="built_in">which</span> brew); <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Installing homebrew..."</span></div><div class="line">    ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># Make sure we’re using the latest Homebrew.</span></div><div class="line">brew update</div><div class="line"></div><div class="line"><span class="comment"># Upgrade any already-installed formulae.</span></div><div class="line">brew upgrade --all</div><div class="line"></div><div class="line"><span class="comment"># Install GNU core utilities (those that come with OS X are outdated).</span></div><div class="line"><span class="comment"># Don’t forget to add `$(brew --prefix coreutils)/libexec/gnubin` to `$PATH`.</span></div><div class="line">brew install coreutils</div><div class="line">sudo ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/gsha256sum /usr/<span class="built_in">local</span>/bin/sha256sum</div><div class="line"></div><div class="line"><span class="comment"># Install some other useful utilities like `sponge`.</span></div><div class="line">brew install moreutils</div><div class="line"><span class="comment"># Install GNU `find`, `locate`, `updatedb`, and `xargs`, `g`-prefixed.</span></div><div class="line">brew install findutils</div><div class="line"><span class="comment"># Install GNU `sed`, overwriting the built-in `sed`.</span></div><div class="line">brew install gnu-sed --with-default-names</div><div class="line"><span class="comment"># Install Bash 4.</span></div><div class="line">brew install bash</div><div class="line">brew tap homebrew/versions</div><div class="line">brew install bash-completion2</div><div class="line"><span class="comment"># We installed the new shell, now we have to activate it</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Adding the newly installed shell to the list of allowed shells"</span></div><div class="line"><span class="comment"># Prompts for password</span></div><div class="line">sudo bash -c <span class="string">'echo /usr/local/bin/bash &gt;&gt; /etc/shells'</span></div><div class="line"><span class="comment"># Change to the new shell, prompts for password</span></div><div class="line">chsh <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/bash</div><div class="line"></div><div class="line"><span class="comment"># Install `wget` with IRI support.</span></div><div class="line">brew install wget --with-iri</div><div class="line"></div><div class="line"><span class="comment"># Install RingoJS and Narwhal.</span></div><div class="line"><span class="comment"># Note that the order in which these are installed is important;</span></div><div class="line"><span class="comment"># see http://git.io/brew-narwhal-ringo.</span></div><div class="line">brew install ringojs</div><div class="line">brew install narwhal</div><div class="line"></div><div class="line"><span class="comment"># Install Python</span></div><div class="line">brew install python</div><div class="line">brew install python3</div><div class="line"></div><div class="line"><span class="comment"># Install ruby-build and rbenv</span></div><div class="line">brew install ruby-build</div><div class="line">brew install rbenv</div><div class="line">LINE=<span class="string">'eval "$(rbenv init -)"'</span></div><div class="line">grep -q <span class="string">"<span class="variable">$LINE</span>"</span> ~/.extra || <span class="built_in">echo</span> <span class="string">"<span class="variable">$LINE</span>"</span> &gt;&gt; ~/.extra</div><div class="line"></div><div class="line"><span class="comment"># Install more recent versions of some OS X tools.</span></div><div class="line">brew install vim --override-system-vi</div><div class="line">brew install homebrew/dupes/grep</div><div class="line">brew install homebrew/dupes/openssh</div><div class="line">brew install homebrew/dupes/screen</div><div class="line">brew install homebrew/php/php55 --with-gmp</div><div class="line"></div><div class="line"><span class="comment"># Install font tools.</span></div><div class="line">brew tap bramstein/webfonttools</div><div class="line">brew install sfnt2woff</div><div class="line">brew install sfnt2woff-zopfli</div><div class="line">brew install woff2</div><div class="line"></div><div class="line"><span class="comment"># Install some CTF tools; see https://github.com/ctfs/write-ups.</span></div><div class="line">brew install aircrack-ng</div><div class="line">brew install bfg</div><div class="line">brew install binutils --with-default-names</div><div class="line">brew install binwalk</div><div class="line">brew install cifer</div><div class="line">brew install dex2jar</div><div class="line">brew install diffutils</div><div class="line">brew install dns2tcp</div><div class="line">brew install ed --with-default-names</div><div class="line">brew install fcrackzip</div><div class="line">brew install findutils --with-default-names</div><div class="line">brew install foremost</div><div class="line">brew install gawk</div><div class="line">brew install gnu-indent --with-default-names</div><div class="line">brew install gnu-sed --with-default-names</div><div class="line">brew install gnu-tar --with-default-names</div><div class="line">brew install gnu-which --with-default-names</div><div class="line">brew install gnutls</div><div class="line">brew install grep --with-default-names</div><div class="line">brew install gzip</div><div class="line">brew install hashpump</div><div class="line">brew install homebrew/x11/xpdf</div><div class="line">brew install hydra</div><div class="line">brew install john</div><div class="line">brew install knock</div><div class="line">brew install netpbm</div><div class="line">brew install nmap</div><div class="line">brew install pngcheck</div><div class="line">brew install screen</div><div class="line">brew install socat</div><div class="line">brew install sqlmap</div><div class="line">brew install tcpflow</div><div class="line">brew install tcpreplay</div><div class="line">brew install tcptrace</div><div class="line">brew install tmux</div><div class="line">brew install ucspi-tcp <span class="comment"># `tcpserver` etc.</span></div><div class="line">brew install watch</div><div class="line">brew install wdiff --with-gettext</div><div class="line">brew install wget</div><div class="line">brew install xz</div><div class="line"></div><div class="line"><span class="comment"># Install other useful binaries.</span></div><div class="line">brew install ack</div><div class="line">brew install dark-mode</div><div class="line"><span class="comment">#brew install exiv2</span></div><div class="line">brew install git</div><div class="line">brew install git-lfs</div><div class="line">brew install git-flow</div><div class="line">brew install git-extras</div><div class="line">brew install hub</div><div class="line">brew install imagemagick --with-webp</div><div class="line">brew install lua</div><div class="line">brew install lynx</div><div class="line">brew install p7zip</div><div class="line">brew install pigz</div><div class="line">brew install pv</div><div class="line">brew install rename</div><div class="line">brew install rhino</div><div class="line">brew install speedtest_cli</div><div class="line">brew install ssh-copy-id</div><div class="line">brew install tree</div><div class="line">brew install webkit2png</div><div class="line">brew install zopfli</div><div class="line">brew install pkg-config libffi</div><div class="line">brew install pandoc</div><div class="line"></div><div class="line"><span class="comment"># Lxml and Libxslt</span></div><div class="line">brew install libxml2</div><div class="line">brew install libxslt</div><div class="line">brew link libxml2 --force</div><div class="line">brew link libxslt --force</div><div class="line"></div><div class="line"><span class="comment"># gitbook autocover</span></div><div class="line">brew install pkg-config cairo pango libpng jpeg giflib</div><div class="line"></div><div class="line"><span class="comment"># Install Cask</span></div><div class="line">brew install caskroom/cask/brew-cask</div><div class="line">brew tap caskroom/versions</div><div class="line"></div><div class="line"><span class="comment"># aerial 屏保</span></div><div class="line"><span class="comment"># https://github.com/JohnCoates/Aerial</span></div><div class="line">brew cask install aerial</div><div class="line"><span class="comment"># https://github.com/sindresorhus/quick-look-plugins</span></div><div class="line">brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzipql qlimagesize webpquicklook suspicious-package quicklookase qlvideo</div><div class="line"></div><div class="line">brew update &amp;&amp; brew upgrade --all &amp;&amp; brew cleanup &amp;&amp; brew prune</div></pre></td></tr></table></figure>
<h3 id="2-3-必备软件-之-编程语言"><a href="#2-3-必备软件-之-编程语言" class="headerlink" title="2.3 必备软件 之 编程语言"></a>2.3 必备软件 之 编程语言</h3><h4 id="2-3-1-Shell"><a href="#2-3-1-Shell" class="headerlink" title="2.3.1 Shell"></a>2.3.1 Shell</h4><p>MAC 使用的大多命令行工具来自于 FreeBSD , 并不是来自 GNU , 所以很多命令会与常规的 linux 命令大同小异。</p>
<p>而本人喜欢 GNU 系软件。</p>
<p>Shell 脚本可参考我的笔记。 <code>第九节如何优雅的使用 Shell</code>_</p>
<p>说到 shell, 除了要使用 bash 的 shell 之外，zsh 的 shell 也值得一试。（不过大神 kennethreitz 最喜欢 fish shell )</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<h4 id="2-3-1-1-Oh-My-Zsh"><a href="#2-3-1-1-Oh-My-Zsh" class="headerlink" title="2.3.1.1 Oh My Zsh"></a>2.3.1.1 Oh My Zsh</h4><h4 id="2-3-2-Python"><a href="#2-3-2-Python" class="headerlink" title="2.3.2 Python"></a>2.3.2 Python</h4><p>笔者虽然也接触过很多语言，都是粗浅一过，但无一精通，唯一可以稍微谈谈的就是 Python 语言。</p>
<p>当然，安装完毕自然是可以参考一下我的 <code>第三节 Pythonista 的工具集</code>_</p>
<p>国内外网络环境不通畅，安装与配置环境这件小事也就成了一个大事情。</p>
<p>我对于 Python 版本的安装 和 Python 依赖包管理有三个阶段：</p>
<ul>
<li>入门级</li>
<li>新手级</li>
<li>熟手级</li>
</ul>
<h4 id="2-3-2-1-入门级"><a href="#2-3-2-1-入门级" class="headerlink" title="2.3.2.1 入门级"></a>2.3.2.1 入门级</h4><p>最初是入门级，我配置环境和大部分的 Pythonista 一样，最初版：</p>
<ul>
<li>面对 Python 版本的管理，干脆就是不管理，brew 安装一个 Python2 用于开发 Python2 的代码，brew install 一个 Python3 用于 Python3 的代码开发。</li>
<li>面对 Python 依赖包管理，干脆就是直接使用 virualenv 或者他的 wrapper 直接 venv 一个环境，然后 active 一下，接着 PIP install -r req.txt</li>
</ul>
<h4 id="2-3-2-2-新手级"><a href="#2-3-2-2-新手级" class="headerlink" title="2.3.2.2 新手级"></a>2.3.2.2 新手级</h4><ul>
<li>面对 Python 版本的管理，使用 pyenv</li>
<li>面对 Python 依赖包管理，使用 pyenv virtualenv 出多个环境，然后切换环境就好了。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">brew install pipenv</div><div class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv.git ~/.pyenv</div><div class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv</div><div class="line"><span class="built_in">echo</span> <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'eval "$(pyenv virtualenv-init -)"'</span> &gt;&gt; ~/.zshrc</div><div class="line"></div><div class="line"><span class="comment"># 接着另开终端</span></div><div class="line"><span class="comment"># 不喜写兼容代码，所有代码均向 3.5+ 靠拢</span></div><div class="line">v=3.5.2|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></div><div class="line">v=3.6.0|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></div><div class="line">v=2.7.11|wget http://mirrors.sohu.com/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></div><div class="line"><span class="comment"># 可以先用迅雷把 官网的 Anaconda3-4.4.0-MacOSX-x86_64.sh 下载下来，然后</span></div><div class="line">mv Anaconda3-4.4.0-MacOSX-x86_64.sh ~/.pyenv/cache/ &amp;&amp; pyenv install anaconda3-4.4.0</div><div class="line"></div><div class="line"><span class="comment"># 设置 Global Python 为 2.7.11, 备注：尽量不要把 Py3 设置为全局，否则由于 Homebrew 本身有一些依赖是依赖于 Py2 的，这样容易出现一些奇怪的问题。</span></div><div class="line">pyenv global 2.7.11</div><div class="line">pip install -i https://pypi.doubanio.com/simple requests</div><div class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></div><div class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">"jedi&gt;=0.9.0"</span> <span class="string">"json-rpc&gt;=1.8.1"</span> <span class="string">"service_factory&gt;=0.1.5"</span> flake8 pytest autoflake hy</div><div class="line"></div><div class="line"><span class="comment"># 创建最常用 Py3 虚拟环境</span></div><div class="line">pyenv virtualenv 3.5.2 py3-daily</div><div class="line">pyenv activate py3-daily</div><div class="line">pip install -i https://pypi.doubanio.com/simple requests</div><div class="line">pip install -i https://pypi.doubanio.com/simple beatutifulsoup4</div><div class="line">pip install -i https://pypi.doubanio.com/simple ipython[notebook]</div><div class="line">pip install -i https://pypi.doubanio.com/simple jupyter</div><div class="line"><span class="comment"># 下面这个是用于安装基本的代码补全功能</span></div><div class="line">pip install -i https://pypi.doubanio.com/simple --upgrade <span class="string">"jedi&gt;=0.9.0"</span> <span class="string">"json-rpc&gt;=1.8.1"</span> <span class="string">"service_factory&gt;=0.1.5"</span> flake8 pytest autoflake hy</div><div class="line"></div><div class="line"><span class="comment"># 创建 Anaconda 的数据科学 AI 环境</span></div><div class="line">pyenv virtualenv anaconda3-4.4.0 py3-ai</div><div class="line">pyenv activate anaconda3-4.4.0/envs/py3-ai</div><div class="line">pyenv deactivate</div><div class="line"></div><div class="line"><span class="comment"># 进入一个项目之后</span></div><div class="line">pyenv activate py3-proj</div><div class="line">pip install -r requirements/local.txt</div><div class="line">pip install -r requirements/prod.txt</div><div class="line"><span class="comment"># requirements/local.txt 与 requirements/prod.txt 依赖于 requirements/base.txt</span></div></pre></td></tr></table></figure>
<h4 id="2-3-2-3-熟手级"><a href="#2-3-2-3-熟手级" class="headerlink" title="2.3.2.3 熟手级"></a>2.3.2.3 熟手级</h4><p>其实，第一种入门级管理方式弊病在于，python 版本太粗糙，之前遇到一个 python3.3 的问题，python3.4 就解决了。而为了避免这种奇葩的版本差异带来的潜在风险，开发与部署一般要锁死 Python 版本。</p>
<p>即便是解决了入门级管理方式带来的版本管理粗糙的问题，同样的，依赖也要锁死。<strong>一个项目对应一种环境该多好</strong> 通过 PIP 的确可以用 freeze 输出为 txt 达到锁死的目的。但个人认为，这个还不够，至少要知道依赖树之类的吧？还要知道哪些东西是可以更新的吧？</p>
<p>而且，就应该像 node 项目里面的 package.json 一样，把依赖什么乱七八糟的东西都放进去才好。</p>
<ul>
<li>面对 Python 版本和依赖包管理，使用 pipenv</li>
</ul>
<blockquote>
<p>这代表着，只要一个就行了。</p>
</blockquote>
<h4 id="2-3-3-JavaScript-与-Node-环境"><a href="#2-3-3-JavaScript-与-Node-环境" class="headerlink" title="2.3.3 JavaScript 与 Node 环境"></a>2.3.3 JavaScript 与 Node 环境</h4><h5 id="nvm-amp-amp-npm-amp-amp-yarn"><a href="#nvm-amp-amp-npm-amp-amp-yarn" class="headerlink" title="nvm &amp;&amp; npm &amp;&amp; yarn"></a>nvm &amp;&amp; npm &amp;&amp; yarn</h5><p>nvm 主要用户管理 node 的版本，linux / mac only ,windower 最好下载 node 版本安装，记得配置环境变量。</p>
<p>npm 主要用户管理包，国内人喜欢使用 cnpm, 但是 cnpm 包管理比较渣，所以一般情况下选择 Yarn 配合管理</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install cnpm</div><div class="line">cnpm install yarn -g</div><div class="line"><span class="comment"># 查看下载源</span></div><div class="line"><span class="comment"># yarn config get registry</span></div><div class="line">yarn config set registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<p>yarn 在使用包管理的时候会分析依赖，这对总是 BUG 不断的 node_module 简直是福音。</p>
<h4 id="2-3-4-Java"><a href="#2-3-4-Java" class="headerlink" title="2.3.4 Java"></a>2.3.4 Java</h4><p>Java 环境安装稍微有一丢丢蛋疼。特别是多版本管理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TODO: 以后补充 JAVA 环境安装</div></pre></td></tr></table></figure>
<h4 id="2-3-5-Ruby"><a href="#2-3-5-Ruby" class="headerlink" title="2.3.5 Ruby"></a>2.3.5 Ruby</h4><p>两年前写过几个月的 Ruby, 现在安装 Ruby 环境更多是因为 Ruby 还有一些 Gem 质量挺高的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.rvm.io | bash -s stable</div><div class="line">rvm install 2.3.0</div><div class="line">gem install tmuxinator</div></pre></td></tr></table></figure>
<h3 id="2-4-必备配置-之-dotfiles"><a href="#2-4-必备配置-之-dotfiles" class="headerlink" title="2.4 必备配置 之 dotfiles"></a>2.4 必备配置 之 dotfiles</h3><p>详细内容请见 <a href="https://github.com/twocucao/yadotfiles" target="_blank" rel="external">yadotfiles</a></p>
<ul>
<li>依照我个人的习惯，在 OhMyZsh 基础上增加了个人习惯的环境变量的配置，一些函数的封装。</li>
</ul>
<p>比如，当我在写本文的目录中输入 todos, 就可以查看该我在写文章的时候里面挖了多少个还没有填上去的 TODO（坑）。如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3e383c54 (Micheal Gardner 2017-11-18 12:40:38 +0800 422) ## 0xEE TODO TO LIST</div><div class="line">ae86b7cb (Micheal Gardner 2017-11-19 21:39:49 +0800 245) ### 5. TODO</div><div class="line">c0d51990 (Micheal Gardner 2017-11-22 16:42:08 +0800 552) TODO: 以后补充 JAVA 环境安装</div><div class="line">c0d51990 (Micheal Gardner 2017-11-22 16:42:08 +0800 561) 比如，当我在写本文的目录中输入 todos, 就可以查看该我在写文章的时候里面挖了多少个还没有填上去的 TODO（坑）。</div></pre></td></tr></table></figure>
<p>详细请参考 <a href="https://github.com/twocucao/yadotfiles" target="_blank" rel="external">yadotfiles</a></p>
<h2 id="0x03-踩坑史"><a href="#0x03-踩坑史" class="headerlink" title="0x03 踩坑史"></a>0x03 踩坑史</h2><h3 id="3-1-日常类"><a href="#3-1-日常类" class="headerlink" title="3.1 日常类"></a>3.1 日常类</h3><h4 id="01-时间机器无法完成备份"><a href="#01-时间机器无法完成备份" class="headerlink" title="01. 时间机器无法完成备份"></a>01. 时间机器无法完成备份</h4><p>我有定期备份的习惯，在一次备份中，意外的发现怎么备份都无法备份完毕，经过几次测试：</p>
<ol>
<li>我首先猜测是硬盘问题，换了一块硬盘，问题依旧。</li>
<li>复制了几个大文件，感觉也不太像是接口接触不良的问题。</li>
<li>我认为可能是文件数量过多导致的问题。于是删除掉 node_module 后再次备份，备份成功。当然，这也有一定概率是误打误撞。毕竟从概率学上讲，坏掉的钟还能一天有两次时间是对的呢。</li>
</ol>
<blockquote>
<p>外接硬盘的时候，将网络关闭即可。</p>
</blockquote>
<h4 id="02-下载站的软件包显示损坏"><a href="#02-下载站的软件包显示损坏" class="headerlink" title="02. 下载站的软件包显示损坏"></a>02. 下载站的软件包显示损坏</h4><p>有的时候并不是软件损坏，而是 macOS 的安全配置中配置关掉了未识别出的 App</p>
<p>在终端中开启这个选项，并在安全与隐私处点上 anywhere 即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo spctl --master-disable</div></pre></td></tr></table></figure>
<h3 id="3-2-编程类"><a href="#3-2-编程类" class="headerlink" title="3.2 编程类"></a>3.2 编程类</h3><h4 id="01-homebrew-的与-Python-的问题"><a href="#01-homebrew-的与-Python-的问题" class="headerlink" title="01. homebrew 的与 Python 的问题"></a>01. homebrew 的与 Python 的问题</h4><p>在 Python 中执行下面的代码的时候总是报错：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ip = socket.gethostbyname(socket.gethostname())</div><div class="line"><span class="comment"># socket.gaierror: [Errno 8] nodename nor servname provided, or not known</span></div><div class="line"></div><div class="line"><span class="comment"># 最后发现是因为设置主机名没有设置好</span></div><div class="line">sudo scutil --set ComputerName <span class="string">"newname"</span></div><div class="line">sudo scutil --set LocalHostName <span class="string">"newname"</span></div><div class="line">sudo scutil --set HostName <span class="string">"newname"</span></div><div class="line">dscacheutil -flushcache</div><div class="line"><span class="comment"># 然后重启电脑即可</span></div></pre></td></tr></table></figure>
<p>如果本机安装了 Homebrew 如果后面使用 PyEnv 或者 Anaconda 并且设置当前环境为默认 Python 为 Python3（不建议这么搞）, 但是如果偏偏要把默认的 Python 版本换成 Python3, 会弹出一些 pythonpath<br>的问题，执行下面命令即可暂时屏蔽这个问题，但是没有隐患则不清楚。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv /usr/<span class="built_in">local</span>/lib/python2.7/site-packages/sitecustomize.py /usr/<span class="built_in">local</span>/lib/python2.7/site-packages/sitecustomize.py.back</div></pre></td></tr></table></figure>
<h4 id="02-Homebrew-安装过去的文件"><a href="#02-Homebrew-安装过去的文件" class="headerlink" title="02. Homebrew 安装过去的文件"></a>02. Homebrew 安装过去的文件</h4><h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ul>
<li>本文部分命令行安装借鉴了 <a href="https://github.com/donnemartin/dev-setup" target="_blank" rel="external">dev-setup</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2016-02</strong> 确定大致内容</li>
<li><strong>2017-06-28</strong> 重修文字，调整文章结构，Python 环境 和 Homebrew 安装环境</li>
<li><strong>2017-10-05</strong> 再次重修文字，不定期更新</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当时写这篇文章的时候才接触 mac 没多久，使用快两年之后，再次修订了本文。&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;谈及 macOS , 很多人喜欢和 Win 比个高下。在我看来， Win 虽在非编程类生态和易用性比 Mac 要好很多，可专业人士之所以专业是因为他能挑选适合的武器发挥最大的效用，不是吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;适合自己的，能让自己用最大效率生产或者是娱乐的，才是更好的工具。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="善用佳软" scheme="http://twocucao.xyz/categories/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
    
      <category term="macOS" scheme="http://twocucao.xyz/tags/macOS/"/>
    
      <category term="Ubuntu" scheme="http://twocucao.xyz/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="http://twocucao.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Vue 项目漫谈</title>
    <link href="http://twocucao.xyz/2017/09/25/VueProjectTalking/"/>
    <id>http://twocucao.xyz/2017/09/25/VueProjectTalking/</id>
    <published>2017-09-25T12:06:05.000Z</published>
    <updated>2018-01-30T11:48:07.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近升级 Vue 项目的脚手架，踩了一些关于 Webpack2 升级为 Webpack3 的版本的坑，解决了之后，顺手分享一下，我接近一年来对 Vue 项目的开发理解。</p>
<p>欢迎切磋。</p>
<p>项目使用的脚手架为 VueCli 提供的 webpack 脚手架：</p>
<ul>
<li>VueJS 2.5.2</li>
</ul>
<h2 id="0x01-项目结构"><a href="#0x01-项目结构" class="headerlink" title="0x01 项目结构"></a>0x01 项目结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 根文件</span></div><div class="line">├── Makefile 恩，其实 package.json 也能代替这个功能。</div><div class="line">├── README.md</div><div class="line">├── build <span class="comment">#</span></div><div class="line">├── config <span class="comment"># 环境变量配置</span></div><div class="line">├── dist <span class="comment"># 最后输出</span></div><div class="line">├── extra <span class="comment"># 个人偏好，存放最终用于打包成 IconFont 的 svg</span></div><div class="line">├── index.html <span class="comment"># 可以在这里加首屏 loading, 以及其他预先准备好的样式。</span></div><div class="line">├── node_modules</div><div class="line">├── package.json <span class="comment"># 依赖，开发时</span></div><div class="line">├── src</div><div class="line">├── static <span class="comment"># 存放静态资源</span></div><div class="line">├── <span class="built_in">test</span></div><div class="line">└── yarn.lock</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在 SRC 下面</span></div><div class="line">├── App.vue <span class="comment"># CORE 组件</span></div><div class="line">├── api <span class="comment"># 相关的 Web API 定义</span></div><div class="line">├── assets <span class="comment"># 静态资源，对于已经压缩的，还是直接放在 Static 下面</span></div><div class="line">├── components</div><div class="line">├── config <span class="comment"># 定义常量名称</span></div><div class="line">├── filters <span class="comment"># 定义过滤器</span></div><div class="line">├── directives <span class="comment"># 定义指令，比如 v-loading</span></div><div class="line">├── main.js <span class="comment"># 用于初始化项目，注册组件等等</span></div><div class="line">├── mixins <span class="comment"># 混合</span></div><div class="line">├── routes.js <span class="comment"># 路由</span></div><div class="line">├── store <span class="comment"># vuex 状态</span></div><div class="line">└── utils <span class="comment"># 工具方法</span></div></pre></td></tr></table></figure>
<p>值得一提的就是 main.js 应该要做的事情</p>
<ul>
<li>注册全局组件和过滤器</li>
<li>给 Vue 实例加戏，哦，说错了，给实例加一些全局性的方法，比如 $comfirm 等对话框 $verbose $warning 等日志</li>
<li>完成刷新界面之后的从 localStorage 的重新赋值</li>
<li>注册路由切换的时候的调用的各类方法</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># components</span></div><div class="line">├── fed-commons 定义通用型组件，比如手风琴，tab 卡，全局的卡片，一般为了开发效率，如果是 PC 端的话，建议使用 ElementUI,ElementUI 不满足要求的时候，再考虑自己封装组件。</div><div class="line">└── views</div><div class="line">    ├── auth</div><div class="line">        ├── Login.vue</div><div class="line">        ├── Register.vue</div><div class="line">    ├── commons</div><div class="line">        ├── 404.vue</div><div class="line">        ├── 401.vue</div><div class="line">    ├── core</div><div class="line">        ├── Dashboard.vue</div><div class="line">        ├── Content.vue</div><div class="line">    ├── pages</div><div class="line">        ├── AModule</div><div class="line">            ├── AModulePart1Componennt</div><div class="line">                ├── Charts01.vue</div><div class="line">                ├── Map02.vue</div><div class="line">                ├── Editor03.vue</div><div class="line">            ├── AModulePart1.vue</div><div class="line">            ├── AModulePart2.vue</div><div class="line">        ├── BModule</div><div class="line">            ├── BModulePart1.vue</div><div class="line">            ├── BModulePart2.vue</div></pre></td></tr></table></figure>
<p>值得一提的是，AModulePart1.vue 页面的同级 AModulePart1Componennt 下面如果有多个 ECharts 图表，实际上可以通过 mixin 来达到减少代码量的目的。</p>
<h2 id="0x02-开发技巧"><a href="#0x02-开发技巧" class="headerlink" title="0x02 开发技巧"></a>0x02 开发技巧</h2><h3 id="8-日志管理"><a href="#8-日志管理" class="headerlink" title="8. 日志管理"></a>8. 日志管理</h3><p>我觉得日志管理也应该是比较重要的部分，不管是调试程序，还是用于检查用户浏览器这块的错误日志，甚至是埋点。</p>
<p>依据具体技术栈可以考虑上个 sentry 或者 ELK</p>
<h3 id="6-登录，登录校验以及权限"><a href="#6-登录，登录校验以及权限" class="headerlink" title="6. 登录，登录校验以及权限"></a>6. 登录，登录校验以及权限</h3><p>登录可以使用 Mixin 来混入每一个需要校验登录权限的</p>
<h3 id="7-首屏-Loading"><a href="#7-首屏-Loading" class="headerlink" title="7. 首屏 Loading"></a>7. 首屏 Loading</h3><p>这个可以放在 index.html 里面</p>
<h3 id="4-路由管理与嵌套路由"><a href="#4-路由管理与嵌套路由" class="headerlink" title="4. 路由管理与嵌套路由"></a>4. 路由管理与嵌套路由</h3><p>路由管理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> routes = [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/login'</span>,</div><div class="line">    <span class="attr">component</span>: Login  <span class="comment">// 似乎路由中的 component 至少要有一个不是懒加载的，否则会出奇怪的 BUG</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">    <span class="attr">redirect</span>: <span class="string">'AModule/APage'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">    <span class="attr">meta</span>: &#123;</div><div class="line">      <span class="attr">requiresAuth</span>: <span class="literal">true</span> <span class="comment">// 通过这个用来区分网页是否需要注册用户登录</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">component</span>: Dashboard,</div><div class="line">    <span class="attr">children</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'AModule'</span>,</div><div class="line">        <span class="attr">component</span>: AModule.vue,</div><div class="line">        <span class="attr">name</span>: <span class="string">'AModule'</span>,</div><div class="line">        <span class="attr">meta</span>: &#123;</div><div class="line">          <span class="attr">requiresAuth</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">children</span>: [</div><div class="line">          &#123;</div><div class="line">            <span class="attr">path</span>: <span class="string">'AModulePart1'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'AModulePart1'</span>,</div><div class="line">            <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./components/views/pages/AModule'</span>)</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            <span class="attr">path</span>: <span class="string">'AModulePart2'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'AModulePart2'</span>,</div><div class="line">            <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./components/views/pages/AModule'</span>)</div><div class="line">          &#125;,</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="comment">// not found handler</span></div><div class="line">    path: <span class="string">'*'</span>,</div><div class="line">    <span class="attr">component</span>: NotFoundView</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>嵌套路由有什么优点？</p>
<ol>
<li>使得子路由里的页面可以复用父级路由的页面的组件</li>
<li>减少手动硬编码 meta 和 props 的代码量</li>
<li>便于定制面包屑组件</li>
<li>其他</li>
</ol>
<h2 id="0x03-构建技巧"><a href="#0x03-构建技巧" class="headerlink" title="0x03 构建技巧"></a>0x03 构建技巧</h2><h3 id="3-1-离线-IconFont"><a href="#3-1-离线-IconFont" class="headerlink" title="3.1 离线 IconFont"></a>3.1 离线 IconFont</h3><p>经常需要离线调试网页，顺手写了这个脚本。</p>
<p>之前在研究某个网站的反爬机制的时候发现时动态生成 iconfont, 然后通过 unicode 码来实现数字的显示，从而让爬虫小白无法爬取。研究了一下他们的 iconfont, 知道了 font-carrier, 然后调用 node 脚本打包字体文件，并在这个过程中自动生成对应的 iconfont.css</p>
<p>最后的结果就是，当我放一个文件到 svg 文件夹下面的时候，比如 bank.svg , 我执行一下脚本，生成对应的字体文件，在 html 里面编写脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span class=&quot;iconfont iconfont-bank&quot; &gt;&lt;/span&gt;</div></pre></td></tr></table></figure>
<p>然后对应图标就呈现出来了。</p>
<h3 id="3-2-Webpack-构建工具"><a href="#3-2-Webpack-构建工具" class="headerlink" title="3.2 Webpack 构建工具"></a>3.2 Webpack 构建工具</h3><p>日常开发用的是 VueCli, 配置还是非常人性化的。开箱即用。</p>
<h4 id="开发环境与部署环境"><a href="#开发环境与部署环境" class="headerlink" title="开发环境与部署环境"></a>开发环境与部署环境</h4><p>VueCLI 内置了变量的管理，你可以定义 config/dev.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</div><div class="line">  <span class="attr">NODE_ENV</span>: <span class="string">'"development"'</span>,</div><div class="line">  <span class="attr">API_ROOT</span>: <span class="string">'"http://dev-data.twocucao.xyz"'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>其实，开发的环境用一组变量是不行的。比如，开发的人分为纯前端，纯后端，我这样的前后都会一些的人，每个对于环境的配置都是不太一样的。</p>
<ul>
<li>对于前端 Windowser 直接执行 npm run dev 对接到局域网服务器</li>
<li>对于单个人同时调试后端和前端的时候，一般要把 Web API 对应到本地的机器上。可是使用环境便来配置不同的 DEBUG_MODE=True npm run dev</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// dev.js 应该如下</span></div><div class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</div><div class="line"><span class="keyword">var</span> prodEnv = <span class="built_in">require</span>(<span class="string">'./prod.env'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (process.env.DEBUG_MODE === <span class="string">'True'</span>)&#123;</div><div class="line">  <span class="built_in">module</span>.exports = merge(prodEnv, &#123;</div><div class="line">    <span class="attr">NODE_ENV</span>: <span class="string">'"development"'</span>,</div><div class="line">    <span class="attr">API_ROOT</span>: <span class="string">'"http://local-dev-data.twocucao.xyz"'</span></div><div class="line">  &#125;);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="built_in">module</span>.exports = merge(prodEnv, &#123;</div><div class="line">    <span class="attr">NODE_ENV</span>: <span class="string">'"development"'</span>,</div><div class="line">    <span class="attr">API_ROOT</span>: <span class="string">'"http://dev-data.twocucao.xyz"'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="DLL-打包"><a href="#DLL-打包" class="headerlink" title="DLL 打包"></a>DLL 打包</h4><p>大约在半年前，开发过程中突然在使用 ECharts 后，仅仅不到 10M 大小的项目居然开发 build 的时间需要 5MIN, 打包出来的文件超级大。居然接近了 100 多 M</p>
<p>震惊之余，差点准备写一篇骗点击量的文章：<strong>看完震惊了！！前端和后端男程序员都无法忍受的大小！</strong>, 然后文章内就介绍 Webpack 打包文件居然没有避免重复引入依赖库导致打包文件太大提出抗议。</p>
<p>回到主题，使用 npm run analyze 发现问题出现在 ECharts 上， 每一个图表组件都是依赖于 ECharts, 而每一个组件都包含了一个完整的 ECharts 库的大小。</p>
<p>于是，我一边吐槽 webpack 考虑不周，另一方面寻找解决方案。最后找到了 DLL 方案</p>
<p>这个方案的原理大致是：</p>
<ul>
<li>编写独立的脚本，把几个需要复用的库一个配置文件 (manifest.json), 以及打包库到一个 JS 文件中。</li>
<li>然后从 index.html 引入这个 JS 文件。</li>
<li>接着在 webpack 配置中使之每次引入一个库的时候，避免重复引入。</li>
</ul>
<blockquote>
<p>但这不应该是 Webpack 本身就应该做的吗？为嘛还要配置，还要不伦不类的生成一个配置文件和一个 JS 文件，再从 index.html 里面导入？</p>
</blockquote>
<p>当然，Webpack 生态还是很丰富的，后来出来了一个 <a href="https://github.com/asfktz/autodll-webpack-plugin" target="_blank" rel="external">https://github.com/asfktz/autodll-webpack-plugin</a> 尝试了之后。感觉很赞。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// windows 系统不兼容，暂时去掉</span></div><div class="line"><span class="keyword">new</span> AutoDllPlugin(&#123;</div><div class="line">  <span class="attr">inject</span>: <span class="literal">true</span>, <span class="comment">// will inject the DLL bundles to index.html</span></div><div class="line">  filename: <span class="string">'[name]_[hash].js'</span>,</div><div class="line">  <span class="attr">path</span>: <span class="string">'./static/js/'</span>,</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">vendor</span>: [</div><div class="line">      <span class="string">'mapbox-gl'</span>,</div><div class="line">      <span class="string">'d3'</span>,</div><div class="line">      <span class="string">'echarts'</span>,</div><div class="line">      <span class="string">'echarts-gl'</span>,</div><div class="line">      <span class="string">'leaflet'</span>,</div><div class="line">      <span class="string">'axios'</span>,</div><div class="line">      <span class="string">'vue'</span>,</div><div class="line">      <span class="string">'vue-router'</span>,</div><div class="line">      <span class="string">'vuex'</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">      <span class="attr">compress</span>: &#123;</div><div class="line">        <span class="attr">comparisons</span>: <span class="literal">false</span>  <span class="comment">// don't optimize comparisons</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">sourceMap</span>: <span class="literal">true</span></div><div class="line">    &#125;),</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>可惜在 mac 上一切安好，Windows 上晴天霹雳，debug 了一下，发现是这个库的一个依赖库对 windows 的路径处理好像还有点小问题。而公司的前端小伙伴是 Windowser, 只好作罢。</p>
<p>Macer 可以先用试试，至于 Windowser, 那就去这个 ISSUE 下面催催作者吧… 哈哈哈</p>
<blockquote>
<p>update: 现在 windows 已经可以用了。</p>
</blockquote>
<h2 id="0x03-代码质量工程管理"><a href="#0x03-代码质量工程管理" class="headerlink" title="0x03 代码质量工程管理"></a>0x03 代码质量工程管理</h2><h3 id="1-语义化与可读性"><a href="#1-语义化与可读性" class="headerlink" title="1. 语义化与可读性"></a>1. 语义化与可读性</h3><h3 id="2-提取公共逻辑（通过-Service-Mixin-来）"><a href="#2-提取公共逻辑（通过-Service-Mixin-来）" class="headerlink" title="2. 提取公共逻辑（通过 Service, Mixin 来）"></a>2. 提取公共逻辑（通过 Service, Mixin 来）</h3><h3 id="3-CSS-管理"><a href="#3-CSS-管理" class="headerlink" title="3. CSS 管理"></a>3. CSS 管理</h3><p>在项目中，我采用 SCSS 来管理 CSS 代码，</p>
<p>过去的时候有两种 css 的代码命名方法</p>
<p>第一种，我管他叫做<strong>配置式写法</strong>，通过将 CSS 语法的几个片段转化成名称，从而实现快速配置出效果的的 CSS</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.fl</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.fr</span> &#123;</div><div class="line">  <span class="attribute">float</span>: right</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mr10</span> &#123;</div><div class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.pb10</span> &#123;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span></div><div class="line">&#125;</div><div class="line">....</div></pre></td></tr></table></figure>
<p>这种写法对于简单页面来说确实也是可以使用的。缺点就是当页面变得复杂一些的时候，则比较难控制这种短小精捍（不直观）的变量。比如</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.tmd01</span>&#123;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span></div><div class="line">  font-size: <span class="number">16px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#2d3c48</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.6</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>请脑补一下我的黄人问号脸</p>
</blockquote>
<p>当然，如果用得好的话，自然是 OK, 如果用不好的话，</p>
<p>后来进入了嵌套写法时代（感谢伟大的 Rails 社区出的 SASS）, 下面的语法都是 SCSS.</p>
<p>第二种写法就变成了这样</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.actions</span> &#123;</div><div class="line">  <span class="selector-class">.card_wrapper</span> &#123;</div><div class="line">    <span class="selector-class">.card</span> &#123;</div><div class="line">      <span class="selector-class">.title</span> &#123;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.content</span> &#123;</div><div class="line">        <span class="selector-class">.list</span> &#123;</div><div class="line">          <span class="selector-class">.fa</span> &#123;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>外加变量和 mixin 以及函数的话，基本上就可以完成代码的组织了。</p>
<p>这种写法倒是比原来不知道高到哪里去了，但问题依旧存在，比如 title,content 这些玩意太多，完完全全的看不懂。更加糟糕的事情是，有的小伙伴直接是乱用嵌套，也不用伪类和伪选择器，从而达到单页面调出来小伙比较快，但因为代码不能重用，调多个页面的时候速度巨慢无比。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.apage &#123;</div><div class="line">  bbizlogic &#123;</div><div class="line">    .actions &#123;</div><div class="line">      .card_wrapper &#123;</div><div class="line">        .card &#123;</div><div class="line">          .title &#123;</div><div class="line">          &#125;</div><div class="line">          .content &#123;</div><div class="line">            .list &#123;</div><div class="line">              .fa &#123;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我本人推荐（其实我是写 Python Web 后端的，逃… ) 代码风格比较倾向于 BEM 命名，关于 BEM 的介绍，请参考简单心理团队的教程。</p>
<ul>
<li><a href="https://jiandanxinli.github.io/2016-08-11.html" target="_blank" rel="external">https://jiandanxinli.github.io/2016-08-11.html</a></li>
<li><a href="https://juejin.im/post/58d0e5caa22b9d00643e8b51" target="_blank" rel="external">https://juejin.im/post/58d0e5caa22b9d00643e8b51</a></li>
</ul>
<p>然而，最好的方式，就是读一个非常使用 SCSS 来组织项目的 CSS 代码的成熟项目。</p>
<p>我推荐两个：</p>
<ul>
<li>BOOTSTRAP V4: Bootstrap V4 使用 SCSS 来写</li>
<li>ELEMENT UI: 饿了么的团队出的，前段时间从 v1 版本升级到 v2 版本，发现网站大部分样式都没有出现大变动，在这里给个赞。</li>
</ul>
<h4 id="0-先从整体上设计好骨架"><a href="#0-先从整体上设计好骨架" class="headerlink" title="0. 先从整体上设计好骨架"></a>0. 先从整体上设计好骨架</h4><p>接着才是 HTML, 然后才是 CSS</p>
<p>现在前端入行的人越来越多，很多的新手前端 er 会用比较快的思维来编写，这就导致代码质量奇差无比。</p>
<ul>
<li>哎，我看看，面粉加多了，我加点水，水加多了，我再加点面粉。</li>
<li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li>
<li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li>
<li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li>
<li>哎，我看看，面粉又加多了，我加点水，水加多了，我再加点面粉。</li>
</ul>
<p>当设计出来的网页本身的 HTML 写的就很混乱，CSS 能写的好在哪里呢？</p>
<p>命名都很混乱，遑论代码可维护性？</p>
<p>可以多去参考一些成熟的项目的 CSS 是怎么命名的呀，HTML 是怎么设计的呀</p>
<h4 id="1-Scoped-的滥用"><a href="#1-Scoped-的滥用" class="headerlink" title="1. Scoped 的滥用"></a>1. Scoped 的滥用</h4><p>我印象中，有个小伙伴把一个比较大的 CSS 库多次 import 到被 Scoped 的组件中，于是开发时猛然发现 head 处多了大量的 style 标签，除了 css 选择器后面随机的属性 hash, 文件内容都一样。</p>
<blockquote>
<p>公共组件往往可以通过嵌套和加前缀的方式来防止污染。如果 scoped 的属性里面有成吨的 style, 慎用 import.</p>
</blockquote>
<p>还有小伙伴喜欢在很多七七八八的组件各种 import scss. 其实对于中小型项目，完全可以直接全局一个文件 style 即可。</p>
<p>我现在的做法，是直接在 src 的上方直接用 gulp 搭建一个只用来编译 SCSS 到 CSS 的项目，每次编译后输出到页面里面。</p>
<p>如果项目是小项目，建议直接在 app.vue 里面 import pages</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── common</div><div class="line">├── fonts</div><div class="line">├── global.scss</div><div class="line">├── index.scss</div><div class="line">├── mixins</div><div class="line">├── pages.scss</div><div class="line">└── reset.scss</div></pre></td></tr></table></figure>
<h4 id="2-保持代码的通用性"><a href="#2-保持代码的通用性" class="headerlink" title="2. 保持代码的通用性"></a>2. 保持代码的通用性</h4><p>一般，当同一段逻辑出现三次的时候，是要停下来重构一下的，这样的话，就可以节省很多时间。</p>
<p>套用在 CSS 的样式上也是如此。</p>
<h2 id="0x04-Tmux-和-Tmuxnator-打造工作流"><a href="#0x04-Tmux-和-Tmuxnator-打造工作流" class="headerlink" title="0x04 Tmux 和 Tmuxnator 打造工作流"></a>0x04 Tmux 和 Tmuxnator 打造工作流</h2><p>具体参考我的文章 <a href="l">用 Tmux 和 Tmuxnator 打造工作流</a></p>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-09-25</strong> 初始化本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;最近升级 Vue 项目的脚手架，踩了一些关于 Webpack2 升级为 Webpack3 的版本的坑，解决了之后，顺手分享一下，我接近一年来对 Vue 项目的开发理解。&lt;/p&gt;
&lt;p&gt;欢迎切磋。&lt;/p&gt;
&lt;p&gt;项目使用的脚手架为 VueCli 提供的 webpack 脚手架：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VueJS 2.5.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;0x01-项目结构&quot;&gt;&lt;a href=&quot;#0x01-项目结构&quot; class=&quot;headerlink&quot; title=&quot;0x01 项目结构&quot;&gt;&lt;/a&gt;0x01 项目结构&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 根文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── Makefile 恩，其实 package.json 也能代替这个功能。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── README.md&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── build &lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── config &lt;span class=&quot;comment&quot;&gt;# 环境变量配置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── dist &lt;span class=&quot;comment&quot;&gt;# 最后输出&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── extra &lt;span class=&quot;comment&quot;&gt;# 个人偏好，存放最终用于打包成 IconFont 的 svg&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── index.html &lt;span class=&quot;comment&quot;&gt;# 可以在这里加首屏 loading, 以及其他预先准备好的样式。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── node_modules&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── package.json &lt;span class=&quot;comment&quot;&gt;# 依赖，开发时&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── src&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── static &lt;span class=&quot;comment&quot;&gt;# 存放静态资源&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── yarn.lock&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://twocucao.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
      <category term="全栈开发" scheme="http://twocucao.xyz/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="项目经验" scheme="http://twocucao.xyz/tags/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>VueJS 文档阅读笔记</title>
    <link href="http://twocucao.xyz/2017/09/15/ReadingVueDocuments/"/>
    <id>http://twocucao.xyz/2017/09/15/ReadingVueDocuments/</id>
    <published>2017-09-15T12:06:05.000Z</published>
    <updated>2018-01-28T11:41:38.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-Essential"><a href="#0x01-Essential" class="headerlink" title="0x01 Essential"></a>0x01 Essential</h2><h3 id="1-1-The-Vue-Instance"><a href="#1-1-The-Vue-Instance" class="headerlink" title="1.1 The Vue Instance"></a>1.1 The Vue Instance</h3><p>当 Vue 实例被创建时，添加所有在 Data 对象中的属性到 Reactivity System 中。</p>
<blockquote>
<p>而创建之后添加赋值新属性，则不 Reactive</p>
</blockquote>
<p>而实例被创建之时，会自带前缀为 $ 的一系列属性和方法</p>
<h4 id="1-1-1-内置方法和属性"><a href="#1-1-1-内置方法和属性" class="headerlink" title="1.1.1 内置方法和属性"></a>1.1.1 内置方法和属性</h4><h5 id="Instance-Properties"><a href="#Instance-Properties" class="headerlink" title="Instance Properties"></a>Instance Properties</h5><p>vm.$data<br>vm.$props<br>vm.$el<br>vm.$options<br>vm.$parent<br>vm.$root<br>vm.$children<br>vm.$slots<br>vm.$scopedSlots<br>vm.$refs<br>vm.$isServer<br>vm.$attrs<br>vm.$listeners</p>
<a id="more"></a>
<h5 id="Instance-Methods-Data"><a href="#Instance-Methods-Data" class="headerlink" title="Instance Methods / Data"></a>Instance Methods / Data</h5><p>vm.$watch<br>vm.$set<br>vm.$delete</p>
<h5 id="Instance-Methods-Events"><a href="#Instance-Methods-Events" class="headerlink" title="Instance Methods / Events"></a>Instance Methods / Events</h5><p>vm.$on<br>vm.$once<br>vm.$off<br>vm.$emit</p>
<h5 id="Instance-Methods-Lifecycle"><a href="#Instance-Methods-Lifecycle" class="headerlink" title="Instance Methods / Lifecycle"></a>Instance Methods / Lifecycle</h5><p>vm.$mount<br>vm.$forceUpdate<br>vm.$nextTick<br>vm.$destroy</p>
<h4 id="1-1-2-生命周期"><a href="#1-1-2-生命周期" class="headerlink" title="1.1.2 生命周期"></a>1.1.2 生命周期</h4><p><img src="https://vuejs.org/images/lifecycle.png" alt="生命周期"></p>
<h3 id="1-2-Template-Syntax"><a href="#1-2-Template-Syntax" class="headerlink" title="1.2 Template Syntax"></a>1.2 Template Syntax</h3><p>VueJS 编译 模板为 VirtualDOM render 函数，如果对 VirtualDom 非常熟悉的话，则可以使用</p>
<h4 id="1-2-1-插值"><a href="#1-2-1-插值" class="headerlink" title="1.2.1 插值"></a>1.2.1 插值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># text</div><div class="line">&#123;&#123; msg &#125;&#125;</div><div class="line">&lt;span v-once&gt; &#123;&#123; msg &#125;&#125; &lt;span&gt;</div><div class="line"># raw html</div><div class="line">&lt;div v-html=&quot;rawHTML&quot;&gt;&lt;/div&gt;</div><div class="line"># attributes</div><div class="line">&lt;div v-bind:id=&quot;dynamicID&quot;&gt;&lt;/div&gt;</div><div class="line"># JS Expressions</div><div class="line">&#123;&#123; number + 1 &#125;&#125;</div><div class="line">&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;</div><div class="line">&#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;</div><div class="line">&lt;div v-bind:id=&quot;&apos;list-&apos; + id&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="1-2-2-指令"><a href="#1-2-2-指令" class="headerlink" title="1.2.2 指令"></a>1.2.2 指令</h4><ul>
<li>v-bind -&gt; :</li>
<li>v-on   -&gt; @</li>
<li>v-on:submit.prevent=”onSubmit”</li>
</ul>
<h3 id="1-3-Computed-Properties-and-Watchers"><a href="#1-3-Computed-Properties-and-Watchers" class="headerlink" title="1.3 Computed Properties and Watchers"></a>1.3 Computed Properties and Watchers</h3><ul>
<li>当使用 Computed 的时候，一旦其依赖的 reactive 的 data 发生变化之后，则其值发生变化。</li>
<li>其实，可以在模板中调用方法，但只能在项目中。</li>
</ul>
<h3 id="1-4-Class-and-Style-Bindings"><a href="#1-4-Class-and-Style-Bindings" class="headerlink" title="1.4 Class and Style Bindings"></a>1.4 Class and Style Bindings</h3><h4 id="1-4-1-Object-语法"><a href="#1-4-1-Object-语法" class="headerlink" title="1.4.1 Object 语法"></a>1.4.1 Object 语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;static&quot;</div><div class="line">     :class=&quot;&#123; active: isActive, &apos;text-danger&apos;: hasError &#125;&quot;&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="1-4-2-Array-语法"><a href="#1-4-2-Array-语法" class="headerlink" title="1.4.2 Array 语法"></a>1.4.2 Array 语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;[isActive ? activeClass : &apos;&apos;, errorClass]&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="1-4-3-组件"><a href="#1-4-3-组件" class="headerlink" title="1.4.3 组件"></a>1.4.3 组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;my-component class=&quot;baz boo&quot;&gt;&lt;/my-component&gt;</div><div class="line"></div><div class="line">&lt;p  class=&quot;origin baz boo&quot;&gt;</div></pre></td></tr></table></figure>
<h3 id="1-5-Conditional-Rendering"><a href="#1-5-Conditional-Rendering" class="headerlink" title="1.5 Conditional Rendering"></a>1.5 Conditional Rendering</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;</div><div class="line">&lt;h1 v-else&gt;No&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;</div><div class="line">  A</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;</div><div class="line">  B</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt;</div><div class="line">  C</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else&gt;</div><div class="line">  Not A/B/C</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>v-if  是否</li>
<li>v-for 优先级高于 v-if</li>
</ul>
<h3 id="1-6-List-Rendering"><a href="#1-6-List-Rendering" class="headerlink" title="1.6 List Rendering"></a>1.6 List Rendering</h3><p>对于数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;example-2&quot;&gt;</div><div class="line">  &lt;li v-for=&quot;(item, index) in items&quot;&gt;</div><div class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>对于对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;example-2&quot;&gt;</div><div class="line">  &lt;li v-for=&quot;(item, index) in items&quot;&gt;</div><div class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<h4 id="1-6-1-ARRAY-修改检测"><a href="#1-6-1-ARRAY-修改检测" class="headerlink" title="1.6.1 ARRAY 修改检测"></a>1.6.1 ARRAY 修改检测</h4><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<h5 id="取代数组"><a href="#取代数组" class="headerlink" title="取代数组"></a>取代数组</h5><p>filter</p>
<h5 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">直接通过 index 对数组进行修改</div><div class="line"></div><div class="line">不应该</div><div class="line"></div><div class="line">vm.items[indexOfItem] = newValue</div><div class="line"></div><div class="line">应该</div><div class="line"></div><div class="line">// Vue.set</div><div class="line">Vue.set(example1.items, indexOfItem, newValue)</div><div class="line"></div><div class="line">// Array.prototype.splice</div><div class="line">example1.items.splice(indexOfItem, 1, newValue)</div><div class="line"></div><div class="line">修改 length</div><div class="line"></div><div class="line">不该 vm.items.length = newLength</div><div class="line"></div><div class="line">应该 example1.items.splice(newLength)</div></pre></td></tr></table></figure>
<blockquote>
<p>猜测背后可能是因为这种方式是无法监测设置</p>
</blockquote>
<h4 id="1-6-2-Object-修改检测警告"><a href="#1-6-2-Object-修改检测警告" class="headerlink" title="1.6.2 Object 修改检测警告"></a>1.6.2 Object 修改检测警告</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">js 无法直接提供对</div><div class="line"></div><div class="line"><span class="keyword">this</span>.$set(<span class="keyword">this</span>.userProfile, <span class="string">'age'</span>, <span class="number">27</span>)</div></pre></td></tr></table></figure>
<h3 id="1-7-Event-Handling"><a href="#1-7-Event-Handling" class="headerlink" title="1.7 Event Handling"></a>1.7 Event Handling</h3><h4 id="1-7-1-Listening-to-Events"><a href="#1-7-1-Listening-to-Events" class="headerlink" title="1.7.1 Listening to Events"></a>1.7.1 Listening to Events</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"counter += 1"</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>PS: 注意，前面 v-on v-bind 所有的绑定可以绑在方法上，也可以直接填单行表达式。可以提高可阅读性</p>
<h4 id="1-7-2-Method-Event-Handlers"><a href="#1-7-2-Method-Event-Handlers" class="headerlink" title="1.7.2 Method Event Handlers"></a>1.7.2 Method Event Handlers</h4><p>可以绑定方法</p>
<h4 id="1-7-3-Methods-in-Inline-Handlers"><a href="#1-7-3-Methods-in-Inline-Handlers" class="headerlink" title="1.7.3 Methods in Inline Handlers"></a>1.7.3 Methods in Inline Handlers</h4><p>可以绑定方法加参数，配合 for / if</p>
<h4 id="1-7-4-Event-Modifiers"><a href="#1-7-4-Event-Modifiers" class="headerlink" title="1.7.4 Event Modifiers"></a>1.7.4 Event Modifiers</h4><p>事件修饰符</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.stop</div><div class="line">.prevent</div><div class="line">.capture</div><div class="line">.self</div><div class="line">.once</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- the click event's propagation will be stopped --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- the submit event will no longer reload the page --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- modifiers can be chained --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- just the modifier --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- use capture mode when adding the event listener --&gt;</span></div><div class="line"><span class="comment">&lt;!-- i.e. an event targeting an inner element is handled here before being handled by that element --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- only trigger handler if event.target is the element itself --&gt;</span></div><div class="line"><span class="comment">&lt;!-- i.e. not from a child element --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="1-7-5-Key-Modifiers"><a href="#1-7-5-Key-Modifiers" class="headerlink" title="1.7.5 Key Modifiers"></a>1.7.5 Key Modifiers</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.enter</div><div class="line">.tab</div><div class="line">.delete (captures both “Delete” and “Backspace” keys)</div><div class="line">.esc</div><div class="line">.space</div><div class="line">.up</div><div class="line">.down</div><div class="line">.left</div><div class="line">.right</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- same as above --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- also works for shorthand --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="1-7-6-System-Modifier-Keys"><a href="#1-7-6-System-Modifier-Keys" class="headerlink" title="1.7.6 System Modifier Keys"></a>1.7.6 System Modifier Keys</h4><p>键盘</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.ctrl</div><div class="line">.alt</div><div class="line">.shift</div><div class="line">.meta</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Alt + C --&gt;</div><div class="line">&lt;input @keyup.alt.67=&quot;clear&quot;&gt;</div><div class="line">&lt;!-- Ctrl + Click --&gt;</div><div class="line">&lt;div @click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>鼠标</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.left</div><div class="line">.right</div><div class="line">.middle</div></pre></td></tr></table></figure>
<h4 id="1-7-7-Why-Listeners-in-HTML"><a href="#1-7-7-Why-Listeners-in-HTML" class="headerlink" title="1.7.7 Why Listeners in HTML?"></a>1.7.7 Why Listeners in HTML?</h4><p>在以往的开发中，直接写在 html 的 onclick 是很糟糕的方式，因为这违反了局部变量准则。将 onclick 变量提升为整个页面很容易导致，页面内部组织混乱。</p>
<p>而 v-on 则仅执行 viewmodel 的方法，不会绑定到其他方法里。</p>
<h3 id="1-8-Form-Input-Bindings"><a href="#1-8-Form-Input-Bindings" class="headerlink" title="1.8 Form Input Bindings"></a>1.8 Form Input Bindings</h3><p><a href="https://vuejs.org/v2/guide/forms.html" target="_blank" rel="external">https://vuejs.org/v2/guide/forms.html</a></p>
<p>对于每个 Form 空间，可以进行一定的封装。</p>
<p>比如拖拽上传啦，比如 RadioGroup 啦等等。通过封装，可以进行相关的分析。</p>
<h3 id="1-9-Components"><a href="#1-9-Components" class="headerlink" title="1.9 Components"></a>1.9 Components</h3><p>Using Components<br>Global Registration<br>Local Registration<br>DOM Template Parsing Caveats<br>data Must Be a Function<br>Composing Components<br>Props<br>Passing Data with Props<br>camelCase vs. kebab-case<br>Dynamic Props<br>Literal vs. Dynamic<br>One-Way Data Flow<br>Prop Validation<br>Non-Prop Attributes<br>Replacing/Merging with Existing Attributes<br>Custom Events<br>Using v-on with Custom Events<br>Binding Native Events to Components<br>.sync Modifier<br>Form Input Components using Custom Events<br>Customizing Component v-model<br>Non Parent-Child Communication<br>Content Distribution with Slots<br>Compilation Scope<br>Single Slot<br>Named Slots<br>Scoped Slots<br>Dynamic Components<br>keep-alive<br>Misc<br>Authoring Reusable Components<br>Child Component Refs<br>Async Components<br>Advanced Async Components<br>Component Naming Conventions<br>Recursive Components<br>Circular References Between Components<br>Inline Templates<br>X-Templates<br>Cheap Static Components with v-once</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>组件化是 Vue 模块化组织前端网页的方式。</p>
<p>Vue 的组件化，将模板，JavaScript 与样式放在一起。出于代码的复用性：</p>
<p>组件化可以给组件子组件们组织起来，起一个阅读性更好的名称，从而使得编写 Vue 组件更加语义化。</p>
<ul>
<li>如果模板是常用的组件，比如手风琴控件，Menu 控件，sidebar 控件</li>
</ul>
<p>Vue 通过组件来组织代码，但糟糕的是并不是一切都可以被组件化</p>
<h2 id="0x02-Transitions-amp-Animation"><a href="#0x02-Transitions-amp-Animation" class="headerlink" title="0x02 Transitions &amp; Animation"></a>0x02 Transitions &amp; Animation</h2><h3 id="2-1-Event-Handling"><a href="#2-1-Event-Handling" class="headerlink" title="2.1 Event Handling"></a>2.1 Event Handling</h3><h3 id="2-2-Event-Handling"><a href="#2-2-Event-Handling" class="headerlink" title="2.2 Event Handling"></a>2.2 Event Handling</h3><h2 id="0x03-Reusability-amp-Composition"><a href="#0x03-Reusability-amp-Composition" class="headerlink" title="0x03 Reusability &amp; Composition"></a>0x03 Reusability &amp; Composition</h2><h2 id="0x04-Tooling"><a href="#0x04-Tooling" class="headerlink" title="0x04 Tooling"></a>0x04 Tooling</h2><h2 id="0x05-Scaling-Up"><a href="#0x05-Scaling-Up" class="headerlink" title="0x05 Scaling Up"></a>0x05 Scaling Up</h2><h2 id="0x06-Internals"><a href="#0x06-Internals" class="headerlink" title="0x06 Internals"></a>0x06 Internals</h2><h2 id="0x07-Vue-番外篇"><a href="#0x07-Vue-番外篇" class="headerlink" title="0x07 Vue 番外篇"></a>0x07 Vue 番外篇</h2><p>下面的内容从 Vue 作者的知乎 Live 上取来。</p>
<h3 id="阅读源码的建议"><a href="#阅读源码的建议" class="headerlink" title="阅读源码的建议"></a>阅读源码的建议</h3><p><a href="http://hcysun.me/2017/03/03/Vue" target="_blank" rel="external">http://hcysun.me/2017/03/03/Vue</a> 源码学习 /</p>
<h3 id="框架背后的要解决的原理"><a href="#框架背后的要解决的原理" class="headerlink" title="框架背后的要解决的原理"></a>框架背后的要解决的原理</h3><p>组件为基本单元</p>
<p>页面 -&gt;应用（模块，组件树（偏展示））</p>
<ul>
<li>接入型 container</li>
<li>展示型</li>
<li>交互型 比如各类加强版的表单组件，通常强调复用</li>
<li>功能型 比如 <code>&lt;router-view&gt;</code>，<code>&lt;transition&gt;</code>，作为一种扩展、抽象机制存在。</li>
</ul>
<p>view = render(state)</p>
<ul>
<li>命令式 (jquery)</li>
<li>声明式</li>
</ul>
<h3 id="Virtual-Dom"><a href="#Virtual-Dom" class="headerlink" title="Virtual Dom"></a>Virtual Dom</h3><h3 id="变化侦测和渲染机制"><a href="#变化侦测和渲染机制" class="headerlink" title="变化侦测和渲染机制"></a>变化侦测和渲染机制</h3><p>push pull</p>
<p>vue 混合式</p>
<h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><h2 id="0xEE-TODO-TO-LIST"><a href="#0xEE-TODO-TO-LIST" class="headerlink" title="0xEE TODO TO LIST"></a>0xEE TODO TO LIST</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-09-15</strong> 初始化本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-Essential&quot;&gt;&lt;a href=&quot;#0x01-Essential&quot; class=&quot;headerlink&quot; title=&quot;0x01 Essential&quot;&gt;&lt;/a&gt;0x01 Essential&lt;/h2&gt;&lt;h3 id=&quot;1-1-The-Vue-Instance&quot;&gt;&lt;a href=&quot;#1-1-The-Vue-Instance&quot; class=&quot;headerlink&quot; title=&quot;1.1 The Vue Instance&quot;&gt;&lt;/a&gt;1.1 The Vue Instance&lt;/h3&gt;&lt;p&gt;当 Vue 实例被创建时，添加所有在 Data 对象中的属性到 Reactivity System 中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;而创建之后添加赋值新属性，则不 Reactive&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而实例被创建之时，会自带前缀为 $ 的一系列属性和方法&lt;/p&gt;
&lt;h4 id=&quot;1-1-1-内置方法和属性&quot;&gt;&lt;a href=&quot;#1-1-1-内置方法和属性&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 内置方法和属性&quot;&gt;&lt;/a&gt;1.1.1 内置方法和属性&lt;/h4&gt;&lt;h5 id=&quot;Instance-Properties&quot;&gt;&lt;a href=&quot;#Instance-Properties&quot; class=&quot;headerlink&quot; title=&quot;Instance Properties&quot;&gt;&lt;/a&gt;Instance Properties&lt;/h5&gt;&lt;p&gt;vm.$data&lt;br&gt;vm.$props&lt;br&gt;vm.$el&lt;br&gt;vm.$options&lt;br&gt;vm.$parent&lt;br&gt;vm.$root&lt;br&gt;vm.$children&lt;br&gt;vm.$slots&lt;br&gt;vm.$scopedSlots&lt;br&gt;vm.$refs&lt;br&gt;vm.$isServer&lt;br&gt;vm.$attrs&lt;br&gt;vm.$listeners&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://twocucao.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="VueJS" scheme="http://twocucao.xyz/tags/VueJS/"/>
    
      <category term="文档阅读" scheme="http://twocucao.xyz/tags/%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB/"/>
    
      <category term="前端框架" scheme="http://twocucao.xyz/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>React CheatSheet</title>
    <link href="http://twocucao.xyz/2017/07/26/ReactCheatSheet/"/>
    <id>http://twocucao.xyz/2017/07/26/ReactCheatSheet/</id>
    <published>2017-07-26T12:06:05.000Z</published>
    <updated>2018-01-30T08:05:23.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><blockquote>
<p>备注：由于目前没有上 React 的打算，本文暂时太监</p>
</blockquote>
<p>之前一直使用 VueJS 进行开发，心血来潮想换换口味，于是就借着自己的一个开源的项目尝试一下 ReactJS , 代码分为两部分，如下：</p>
<ul>
<li>前台系统（支持 SSR) <a href="https://github.com/twocucao/YaReactBlog" target="_blank" rel="external">YaReactBlog</a></li>
<li>后台系统 <a href="https://github.com/twocucao/YaReactAdmin" target="_blank" rel="external">YaReactAdmin</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">TODO:</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文目录</p>
<ul>
<li>前端、单页与 React 开发</li>
<li>官网的 Tutorial / Guide 要点</li>
<li>Dva 下使用 React JS 的要点</li>
</ul>
<h2 id="0x00-前端、单页与-React-开发"><a href="#0x00-前端、单页与-React-开发" class="headerlink" title="0x00. 前端、单页与 React 开发"></a>0x00. 前端、单页与 React 开发</h2><h3 id="0-1-前端"><a href="#0-1-前端" class="headerlink" title="0.1. 前端"></a>0.1. 前端</h3><p>前端开发，是最近几年才出现的独立工种。</p>
<p>在我的印象中，以前的人很少会区分前端和后端，现在的前端的职责往往是由后端的人顺手做掉的。当然，这种界面一般情况下都比较丑。</p>
<p>后来，随着浏览器的功能越来越强大，性能越来越好，用户对于界面要求也就越来越高。甚至到后来，对于用户界面的操作的复杂程度要求也越来越高。 传统的后端渲染 Template + 简单的 Ajax 不能满足要求了。</p>
<blockquote>
<p>要界面，要交互，要复杂</p>
</blockquote>
<p>于是便出现了单页应用。</p>
<h3 id="0-2-单页"><a href="#0-2-单页" class="headerlink" title="0.2. 单页"></a>0.2. 单页</h3><p>单页完全可以当做一个性能不是很强的，运行在浏览器中的，使用 HTML CSS JS 来编写的小型客户端。</p>
<p>写单页和写客户端基本一致的情况下，于是在这种情况下，前端开发在使用单页后，直接可以 Mock 数据，接着编写界面，接着调通页面的状态和操作，最后发布。</p>
<h3 id="0-3-ReactJS"><a href="#0-3-ReactJS" class="headerlink" title="0.3. ReactJS"></a>0.3. ReactJS</h3><p>为什么选用 ReactJS 呢？</p>
<p>个人认为，框架是用于改善代码组织的一种约束。</p>
<p>不管是 Web 应用开发的早期的 HTML in PHP OR PHP in HTML, 还是中期的 MVC MTV, 还是后来的 富 AJAX 操作，还是现在的 SPA, 出现的各种框架无非就是为了解决代码组织的问题。</p>
<p>对后端而言，后端 WEB 框架的设计，都是为了单个模块职责过重而出现的一种解决方案：</p>
<ul>
<li>HTML IN PHP 拼接代码简单暴力，可是如果拼接太多，每个文件就很职责重，代码阅读性差，不方便调试，就显得很杂乱。</li>
<li>PHP in HTML 相比上一个解决方案好很多。可是，嵌入过多 PHP 代码，代码阅读性差，不方便调试，则会显得比较混乱。</li>
<li>MVC 与 MTV 把渲染的变量独立出来放到 Controller 中，然后把需要渲染的 HTML 模板放到 Template 中，并且在 Template 中来完成模板的拼接。最后调用 Render 进行渲染。是不是这样问题就解决了呢？不是，如果把业务逻辑放在 Model 层，则 Model 职责过重。那就必须要添加一个 Serivce 层来封装业务逻辑。是不是封装了一个</li>
</ul>
<p>如果业务逻辑简单到令人发指，HTML IN PHP 可以给人最大的灵活性。</p>
<ol>
<li>尝试一下新技术。保持对技术的敏感性。</li>
<li>React 是 FB 出的一套前端框架。大厂支持，不会轻易太监掉。</li>
<li>写了一段时间 VueJS 换换口味。</li>
</ol>
<p>当我们讨论一个框架的时候，除了基本的框架之外还必须要有大量的社区资源，那么对 React 而言，除了 ReactJS 之外，还有什么？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">后台系统</div><div class="line"></div><div class="line"> - ant.design</div><div class="line"></div><div class="line">打包构建</div><div class="line"></div><div class="line"> - webpack</div><div class="line"></div><div class="line">路由和状态管理</div><div class="line"></div><div class="line"> - react-router</div><div class="line"> - react-router-redux</div><div class="line"> - redux</div><div class="line"> - redux-saga</div><div class="line"></div><div class="line">为了更好的管理路由和状态，还是使用 dva 来管理比较好。</div><div class="line"></div><div class="line"> - [dva](https://github.com/dvajs/dva)</div><div class="line"> - [dva-cli](https://github.com/dvajs/dva-cli)</div><div class="line"></div><div class="line">开发构建工具</div><div class="line"></div><div class="line"> - [roadhog](https://github.com/sorrycc/roadhog)</div></pre></td></tr></table></figure>
<h2 id="0x01-官网的-Tutorial-Guide"><a href="#0x01-官网的-Tutorial-Guide" class="headerlink" title="0x01. 官网的 Tutorial / Guide"></a>0x01. 官网的 Tutorial / Guide</h2><p>官网的要点</p>
<h2 id="0x02-在-dva-下，编写-React-组件的正确姿势"><a href="#0x02-在-dva-下，编写-React-组件的正确姿势" class="headerlink" title="0x02. 在 dva 下，编写 React 组件的正确姿势"></a>0x02. 在 dva 下，编写 React 组件的正确姿势</h2><p>编写 React 的时候，我选用了 dva 框架配合 ReactJS 来编写单页。</p>
<p>参考 FB 的这篇教程后，梳理了我编写组件的步骤 <a href="https://facebook.github.io/react/docs/thinking-in-react.html" target="_blank" rel="external">https://facebook.github.io/react/docs/thinking-in-react.html</a> :</p>
<ol>
<li>先构思出原型 （或者拿到 UI 图）</li>
<li>Mock 出假数据</li>
<li>分解页面 OR 组件为 组件树</li>
<li>编写静态组件树</li>
<li>确定最小表达 UI （加上满足要求的样式）</li>
<li>确定什么时候需要什么状态（网络请求，键盘输入，位置变化等等）</li>
<li>收尾美化</li>
<li>在发现问题的时候进行优化</li>
</ol>
<h2 id="0x03-在-dva-下，编写-React-组件的正确姿势"><a href="#0x03-在-dva-下，编写-React-组件的正确姿势" class="headerlink" title="0x03. 在 dva 下，编写 React 组件的正确姿势"></a>0x03. 在 dva 下，编写 React 组件的正确姿势</h2><hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-07-17</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;备注：由于目前没有上 React 的打算，本文暂时太监&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前一直使用 VueJS 进行开发，心血来潮想换换口味，于是就借着自己的一个开源的项目尝试一下 ReactJS , 代码分为两部分，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前台系统（支持 SSR) &lt;a href=&quot;https://github.com/twocucao/YaReactBlog&quot;&gt;YaReactBlog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;后台系统 &lt;a href=&quot;https://github.com/twocucao/YaReactAdmin&quot;&gt;YaReactAdmin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TODO:&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://twocucao.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="http://twocucao.xyz/tags/JavaScript/"/>
    
      <category term="React" scheme="http://twocucao.xyz/tags/React/"/>
    
      <category term="Ant Design" scheme="http://twocucao.xyz/tags/Ant-Design/"/>
    
  </entry>
  
  <entry>
    <title>数据科学的常识笔记</title>
    <link href="http://twocucao.xyz/2017/07/17/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E7%9A%84%E5%B8%B8%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    <id>http://twocucao.xyz/2017/07/17/数据科学的常识笔记/</id>
    <published>2017-07-17T12:00:00.000Z</published>
    <updated>2018-01-30T09:20:33.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>2017 年 07 月，为了解统计学和机器学习的基本常识，开了这篇文章。</p>
<p>当然，仅仅是为了了解，所以也就写的随性（不严谨）一些，排版什么的也都详细推敲。想到哪里就记录到哪里。</p>
<a id="more"></a>
<h2 id="0x01-数据科学的含义与内容"><a href="#0x01-数据科学的含义与内容" class="headerlink" title="0x01 数据科学的含义与内容"></a>0x01 数据科学的含义与内容</h2><h3 id="0-1-WHAT"><a href="#0-1-WHAT" class="headerlink" title="0.1 WHAT?"></a>0.1 WHAT?</h3><blockquote>
<p>To gain insights into data through computation, statistics , and visualization.</p>
</blockquote>
<p>Josh Blumenstock 认为 数据科学家就是比计算机科学家多点统计技术，比统计学家多点计算机技术。</p>
<p>Shlomo Aragmon 认为 数据科学家 = 统计学家 + 程序员 + 教练 + 讲故事者 + 艺术家</p>
<h4 id="一些准则"><a href="#一些准则" class="headerlink" title="一些准则"></a>一些准则</h4><ul>
<li>多数据源</li>
<li>懂得数据如何被采集</li>
<li>对数据进行权重</li>
<li>使用统计模型</li>
<li>理解相关性</li>
<li>像 Bayesian 一样思考，像 frequentist 一样检验</li>
<li>良好的沟通能力（代表什么，如何可视化，检验，理解结论）</li>
</ul>
<h4 id="一些挑战"><a href="#一些挑战" class="headerlink" title="一些挑战"></a>一些挑战</h4><ul>
<li>数据量大</li>
<li>高维诅咒</li>
<li>数据缺失</li>
<li>需要避免过度拟合 (test data vs. training data)</li>
</ul>
<h4 id="Data-Science-涉及到哪些领域呢？"><a href="#Data-Science-涉及到哪些领域呢？" class="headerlink" title="Data Science 涉及到哪些领域呢？"></a>Data Science 涉及到哪些领域呢？</h4><ul>
<li>Data Management</li>
<li>Data Mining</li>
<li>Machine Learning</li>
<li>Business Intelligence</li>
<li>Statistics</li>
<li>Decision Making Theory</li>
<li>Story Telling</li>
<li>Perception</li>
<li>Human Cognition</li>
</ul>
<h3 id="0-2-WHY"><a href="#0-2-WHY" class="headerlink" title="0.2 WHY?"></a>0.2 WHY?</h3><p>海量数据的时代</p>
<h3 id="0-3-HOW"><a href="#0-3-HOW" class="headerlink" title="0.3 HOW?"></a>0.3 HOW?</h3><ul>
<li><strong>ASK</strong> an interesting question.  目标是什么？如果拿到数据可以预测或者估计什么？</li>
<li><strong>GET</strong> the data. 数据如何抽样？那些数据是相关的？</li>
<li><strong>EXPLORE</strong> the data. 可视化数据，有异常吗？有模式吗？</li>
<li><strong>MODEL</strong> the data. 构建模型，拟合模型，检验模型。</li>
<li><strong>COMMUNICATE</strong> and <strong>VISUALIZE</strong> the results 我们学到了什么？结果有意义吗？</li>
</ul>
<h3 id="0-4-本文目录"><a href="#0-4-本文目录" class="headerlink" title="0.4 本文目录"></a>0.4 本文目录</h3><ul>
<li><p>统计学与数据分析</p>
<ul>
<li>信息可视化</li>
<li>集中趋势的量度</li>
<li>分散性与变异的量度</li>
<li>概率计算</li>
<li>离散概率分布</li>
<li>排列与组合</li>
<li>几何分布、二项分布、泊松分布</li>
<li>正态分布</li>
<li>统计抽样</li>
<li>总体和样本的估计</li>
<li>置信区间</li>
<li>假设检验的运用</li>
<li>x2 分布</li>
<li>相关与回归</li>
</ul>
</li>
<li><p>数据挖掘基本扫盲</p>
<ul>
<li>推荐系统入门</li>
<li>隐式评价和基于物品的过滤算法</li>
<li>分类与分类进阶</li>
<li>朴素贝叶斯</li>
<li>朴素贝叶斯算法和非结构化文本</li>
<li>聚类</li>
</ul>
</li>
<li><p>机器学习</p>
<ul>
<li>分类与回归</li>
<li>交差校验</li>
<li>降维</li>
<li>支持向量机</li>
<li>决策树 &amp; 随机森林</li>
<li>Bagging &amp; Boosting</li>
<li>聚类与文本</li>
<li>贝叶斯思维 &amp; Naive Bayes</li>
<li>文本分析：LDA&amp;Topic Modeling</li>
<li>聚类</li>
</ul>
</li>
<li><p>深度学习</p>
</li>
<li><p>自然语言 NLP</p>
<ul>
<li>中文分词</li>
<li>新词发现</li>
</ul>
</li>
</ul>
<h2 id="0x02-统计学与数据分析"><a href="#0x02-统计学与数据分析" class="headerlink" title="0x02 统计学与数据分析"></a>0x02 统计学与数据分析</h2><h3 id="2-1-信息可视化"><a href="#2-1-信息可视化" class="headerlink" title="2.1 信息可视化"></a>2.1 信息可视化</h3><p>建议直接阅读 AntV 的可视化基础 <a href="https://antv.alipay.com/vis/doc/chart/index.html" target="_blank" rel="external">https://antv.alipay.com/vis/doc/chart/index.html</a></p>
<h3 id="2-2-集中趋势的量度"><a href="#2-2-集中趋势的量度" class="headerlink" title="2.2 集中趋势的量度"></a>2.2 集中趋势的量度</h3><blockquote>
<p>目的：找出能够反映集中趋势的一个数值</p>
</blockquote>
<p>PS: 可以用分布图看它的均值和平均数是否落在集中趋势，数据向右偏斜，均值位于中位数右侧</p>
<ul>
<li>均值 （均值对于抽样数据更加稳定，但是如果村里一个杨千万九个穷光蛋，则个个都是杨百万）</li>
<li>中位数</li>
<li>众数</li>
</ul>
<h3 id="2-3-分散性与变异的量度"><a href="#2-3-分散性与变异的量度" class="headerlink" title="2.3 分散性与变异的量度"></a>2.3 分散性与变异的量度</h3><blockquote>
<p>目的：仅有均值，中位数，众数是不够的，还需要距和差</p>
</blockquote>
<ul>
<li>全距：MAX（上界） - MIN（下界）</li>
<li>按照四分位书的切分方式： 下界 - 下四分位数目 (Q1) - 中位数 - 上四分位数 - 上界</li>
<li>四分位距：上四分位数 - 下四分位数 （当然，可以使用箱线图进行绘制，从而判断出数据集中的地方）</li>
<li>百分位距：在统计的时候，往往需要避免极值对数据的影响</li>
<li>方差：量度数据分散性</li>
<li>标准差：典型值与均值的距离，体现了数值的变异程度。即加入有一批数据的标准差为 3cm, 代表着平均而言，这些数值与均值的距离为 3cm</li>
</ul>
<h2 id="0x03-数据挖掘"><a href="#0x03-数据挖掘" class="headerlink" title="0x03 数据挖掘"></a>0x03 数据挖掘</h2><p>本节是『面向程序员的挖掘指南』的笔记。</p>
<p>数据挖掘是深一步的分析统计。</p>
<p>本书所讲内容就是一个核心：</p>
<blockquote>
<p>给用户推荐物品</p>
</blockquote>
<p>内容就是：</p>
<ul>
<li>第一章和第二章均为依据用户对物品的评价（显示评价以及隐式评价）来做出相关推荐。</li>
<li>第三章为物品本身的特点进行<strong>分类</strong></li>
<li>第四章直到最后一章则是分类的详细讨论以及聚类分析。</li>
</ul>
<h3 id="基于用户的协同过滤算法"><a href="#基于用户的协同过滤算法" class="headerlink" title="基于用户的协同过滤算法"></a>基于用户的协同过滤算法</h3><p>用户与用户之间相似</p>
<h4 id="基本的距离算法"><a href="#基本的距离算法" class="headerlink" title="基本的距离算法"></a>基本的距离算法</h4><blockquote>
<p>擦擦擦，LaTeX 公式 居然不能用…</p>
</blockquote>
<ul>
<li>曼哈顿距离       如果在 n 维坐标上，即绝对值。</li>
<li>欧几里得距离     就是其实就是 n 维勾股定理。</li>
</ul>
<p>曼哈顿距离和欧几里得距离在判断 同样是 n 维的数据是完全 OK 的。即总量为 m 部电影的情况下，k 个人同样评价了 n 部电影，比较容易算出距离。</p>
<p>但，n 纬和比他更小的纬度算出的距离，似乎并不应该相等。 如何处理这些缺失的数据呢？如果是我的话，会设定一个默认值吧。（半值，均值）</p>
<ul>
<li>闵科夫斯基距离</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TODO: 以后补上公式</div></pre></td></tr></table></figure>
<blockquote>
<p>r 值越大，单个维度的差值大小会对整体距离有更大的影响。</p>
</blockquote>
<ul>
<li>皮尔森相关系数</li>
</ul>
<p>用户也分为好几种，比如说：</p>
<p>用户 1: 好的打分 5, 差的打分 3<br>用户 2: 好的打分 5, 差的打分 1<br>用户 3: 要么 5, 要么 1</p>
<ul>
<li>余弦相似度</li>
</ul>
<p>如果数据存在“分数膨胀”问题，就使用皮尔逊相关系数。<br>如果数据比较“密集”，变量之间基本都存在公有值，且这些距离数据是非常重要的，那就使用欧几里得或曼哈顿距离。<br>如果数据是稀疏的，则使用余弦相似度。</p>
<ul>
<li>K 最邻近算法</li>
</ul>
<h3 id="隐式评价和基于物品的过滤算法"><a href="#隐式评价和基于物品的过滤算法" class="headerlink" title="隐式评价和基于物品的过滤算法"></a>隐式评价和基于物品的过滤算法</h3><p>显式评价：豆瓣的五星，用户的评论</p>
<p>显式评价可能存在下面几个问题：</p>
<ol>
<li>懒得评价</li>
<li>会出于面子，合群，偏见撒谎。</li>
<li>懒得追加评价一般数量少，假如买的东西一个月后坏掉了，则不用。</li>
<li>账号共享带来的问题。</li>
<li>买东西就是有问题才调出来判断，其他的情况下懒得评价。</li>
</ol>
<p>隐式评价：通过观察可得。通常需要工程师针对客户端和浏览器端进行埋点。比如，买过，还买过，点击情趣用品多次。</p>
<ol>
<li>网页方面：页面点击、停留时间、重复访问次数、引用率、观看视频的次数； 音乐播放器：播放的曲目、跳过的曲目、播放次数；</li>
</ol>
<blockquote>
<p>然而，越精准的判断越消耗性能。</p>
</blockquote>
<ul>
<li>扩展性：当用户数量大幅度上升的时候，计算量就上来了。千万用户其中一个用户和其他用户进行有一次运算的话，计算量就相当大了。</li>
<li>稀疏性：物品数量远大于用户数量，而千万级用户仅仅对百万本书中几十本评价，</li>
</ul>
<blockquote>
<p>书中说，可以考虑基于物品的协同过滤，其实可以考虑，先给用户和书划分类型，从而使得计算量下来。 计算标签和标签之间的相似度，这样可以使得成本大幅度下降。</p>
</blockquote>
<h3 id="基于物品的协同过滤算法"><a href="#基于物品的协同过滤算法" class="headerlink" title="基于物品的协同过滤算法"></a>基于物品的协同过滤算法</h3><ul>
<li><strong>修正的余弦相似度</strong> 是一种基于模型的协同过滤算法。我们前面提过，这种算法的优势之一是扩展性好，对于大数据量而言，运算速度快、占用内存少。 用户的评价标准是不同的，比如喜欢一个歌手时有些人会打 4 分，有些打 5 分；不喜欢时有人会打 3 分，有些则会只给 1 分。修正的余弦相似度计算时会将用户对物品的评分减去用户所有评分的均值，从而解决这个问题。</li>
<li><strong>Slope One 算法</strong></li>
</ul>
<h3 id="训练集和测试集"><a href="#训练集和测试集" class="headerlink" title="训练集和测试集"></a>训练集和测试集</h3><p>十折交叉验证</p>
<p>将数据集随机分割成十个等份，每次用 9 份数据做训练集，1 份数据做测试集，如此迭代 10 次。</p>
<p>n 折交叉验证</p>
<h3 id="评估分类器"><a href="#评估分类器" class="headerlink" title="评估分类器"></a>评估分类器</h3><ul>
<li>混淆矩阵 （其实就是交叉表的统计学说法）</li>
<li><p>Kappa 指标</p>
</li>
<li><p>优化邻近算法</p>
<ul>
<li>kNN 算法</li>
</ul>
</li>
</ul>
<h3 id="分类方法"><a href="#分类方法" class="headerlink" title="分类方法"></a>分类方法</h3><h2 id="0x03-机器学习"><a href="#0x03-机器学习" class="headerlink" title="0x03 机器学习"></a>0x03 机器学习</h2><h2 id="0x04-深度学习"><a href="#0x04-深度学习" class="headerlink" title="0x04 深度学习"></a>0x04 深度学习</h2><h2 id="0x05-自然语言-NLP"><a href="#0x05-自然语言-NLP" class="headerlink" title="0x05 自然语言 NLP"></a>0x05 自然语言 NLP</h2><h2 id="0xEE-链接"><a href="#0xEE-链接" class="headerlink" title="0xEE 链接"></a>0xEE 链接</h2><ul>
<li><a href="https://dataminingguide.books.yourtion.com/" target="_blank" rel="external">面向程序员的数据挖掘指南</a></li>
</ul>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-07-17</strong> 重修文字</li>
<li><strong>2017-10-12</strong> 增加数据挖掘模块</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;2017 年 07 月，为了解统计学和机器学习的基本常识，开了这篇文章。&lt;/p&gt;
&lt;p&gt;当然，仅仅是为了了解，所以也就写的随性（不严谨）一些，排版什么的也都详细推敲。想到哪里就记录到哪里。&lt;/p&gt;
    
    </summary>
    
      <category term="数据科学" scheme="http://twocucao.xyz/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数学概念" scheme="http://twocucao.xyz/tags/%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/"/>
    
      <category term="机器学习" scheme="http://twocucao.xyz/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习" scheme="http://twocucao.xyz/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="自然语言" scheme="http://twocucao.xyz/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Geoprocessing With Python</title>
    <link href="http://twocucao.xyz/2017/07/11/GeoProcessingWithPython/"/>
    <id>http://twocucao.xyz/2017/07/11/GeoProcessingWithPython/</id>
    <published>2017-07-11T04:13:20.000Z</published>
    <updated>2018-02-11T01:14:31.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>16 年 12 月研究 GIS 相关资料用于处理 GIS 相关问题，完成基本 GIS 功能。<br>最新需要进阶相关内容用于更好的处理相关数据。</p>
<ul>
<li>书籍：<ul>
<li>Geoprocessing With Python</li>
<li>PostGIS In Action 2rd</li>
</ul>
</li>
<li>框架：<ul>
<li>前端 Leaflets D3</li>
<li>后端 GeoDjango</li>
</ul>
</li>
<li>其他零零碎碎的资料</li>
</ul>
<p>特此记录。</p>
<a id="more"></a>
<p>本文目录</p>
<ul>
<li>基本概念<ul>
<li>Vertor VS Raster</li>
<li>Vertor 相关类型与坐标系</li>
<li>Raster 相关类型</li>
<li>其他类型</li>
<li>GIS 开发的生态圈以及常用技术栈</li>
</ul>
</li>
<li>Vertor 分析</li>
<li>Raster 分析</li>
<li>Vertor 与 Raster</li>
</ul>
<h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><h3 id="1-1-Vertor-VS-Raster"><a href="#1-1-Vertor-VS-Raster" class="headerlink" title="1.1. Vertor VS Raster"></a>1.1. Vertor VS Raster</h3><ul>
<li>Vector : 基本单元为 Point : points, lines, and polygons 以及其组合，适用于矢量图，地形边界，路线等。</li>
<li>Raster : 基本单元为 Pixel : 2d/3d 包含数值的数组，适用于连续性数据，不仅仅适用于图片。</li>
</ul>
<h3 id="1-2-Vertor-相关类型与坐标系"><a href="#1-2-Vertor-相关类型与坐标系" class="headerlink" title="1.2. Vertor 相关类型与坐标系"></a>1.2. Vertor 相关类型与坐标系</h3><h4 id="1-2-1-国内常见的几种坐标系"><a href="#1-2-1-国内常见的几种坐标系" class="headerlink" title="1.2.1. 国内常见的几种坐标系"></a>1.2.1. 国内常见的几种坐标系</h4><p>国内由于特殊的国情，国际标准也要向国家标准靠齐。比如各个不同的坐标系上坐标的换算。</p>
<p>我们都知道一个坐标 (x,y) 可以表示为经纬度，甚至放在坐标系上，我们可以这么运算两点 (x1,y1) , (x2,y2) 之间的距离</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># z 表示比例系数</span></div><div class="line">distance = math.sqrt((x1-x2) ** <span class="number">2</span> + (y1-y2) ** <span class="number">2</span>) * z</div></pre></td></tr></table></figure>
<p>在近距离的时候的确是可以这么做的比如计算村里小芳和隔壁老王家的距离。当距离过大的时候，比如计算上海 A 区和 B 区的两个写字楼的距离的时候，则有相当大的误差。</p>
<p>那么问题来了：</p>
<p><del>挖掘技术哪家强</del></p>
<p>啊不是，是<strong>国内有哪些常用坐标标准呢？又是如何计算的呢？</strong></p>
<ul>
<li><ol>
<li>GPS WGS-84 国际标准（原始）</li>
</ol>
</li>
<li><ol>
<li>GCJ-02 国内标准（原始数据混淆）</li>
</ol>
</li>
<li><ol>
<li>其他坐标比如 BD-09（原始数据混淆再混淆）</li>
</ol>
</li>
</ul>
<p>对于小公司而言，我们是没有任何方法来通过 BD-09 以及 GCJ-02 这种坐标系进行运算的：</p>
<p>因为坐标点非线性偏移核心计算方法掌握在 GCJ-02 / BD-09 的公司里面，比如 Google 中国，高德地图，百度地图，腾讯地图。所以，为了研究，则必须要有<strong>能够对坐标进行运算的算法</strong>, 那这个东西有没有呢？答案是肯定的，因为国外使用的 WGS-84 标准，并且，计算坐标的算法早就开源。</p>
<p>那么，我们的思路就确定下来了。</p>
<ol>
<li>各种地图的经纬度坐标比如 BD-09 或 GCJ-02 标转换成 WGS-84 坐标。</li>
<li>使用开源 GIS 软件进行对 WGS-84 进行运算。</li>
</ol>
<p>感谢诸多在 GIS 运算上开源的中国先辈，我们轻而易举的获取到了坐标之间相互转化的方法：</p>
<p><a href="https://github.com/wandergis/coordTransform_py" target="_blank" rel="external">https://github.com/wandergis/coordTransform_py</a></p>
<h4 id="1-2-2-形状"><a href="#1-2-2-形状" class="headerlink" title="1.2.2. 形状"></a>1.2.2. 形状</h4><p>坐标系，我们可以简单的理解为一个笛卡尔坐标系（虽然这么说很不准确，但已经足够形象了）</p>
<p>于是对于二维的数据，GIS 的分析就可以理解为对于点，线段，多边形自身以及他们之间的关系的分析。</p>
<h3 id="1-3-Raster-相关类型"><a href="#1-3-Raster-相关类型" class="headerlink" title="1.3. Raster 相关类型"></a>1.3. Raster 相关类型</h3><p>raster 的 digital elevation model(DEM), 即每一个像素值包含一个 elevation value</p>
<p>GDAL/OGR</p>
<!-- more -->
<h2 id="0x02-Vertor-分析"><a href="#0x02-Vertor-分析" class="headerlink" title="0x02. Vertor 分析"></a>0x02. Vertor 分析</h2><h2 id="0x03-Raster-分析"><a href="#0x03-Raster-分析" class="headerlink" title="0x03. Raster 分析"></a>0x03. Raster 分析</h2><h3 id="3-1-教程"><a href="#3-1-教程" class="headerlink" title="3.1. 教程"></a>3.1. 教程</h3><h3 id="3-2-教程"><a href="#3-2-教程" class="headerlink" title="3.2. 教程"></a>3.2. 教程</h3><h3 id="3-3-教程笔记"><a href="#3-3-教程笔记" class="headerlink" title="3.3. 教程笔记"></a>3.3. 教程笔记</h3><h2 id="0x04-Vertor-与-Raster"><a href="#0x04-Vertor-与-Raster" class="headerlink" title="0x04. Vertor 与 Raster"></a>0x04. Vertor 与 Raster</h2><h3 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h3><ul>
<li>Point</li>
<li>LineString</li>
<li><p>Polygon</p>
</li>
<li><p>MultiPoint</p>
</li>
<li>MultiLineString</li>
<li>MultiPolygon</li>
</ul>
<h3 id="中级概念"><a href="#中级概念" class="headerlink" title="中级概念"></a>中级概念</h3><ul>
<li>Raster / Tile (Bands 是什么鬼）</li>
</ul>
<h3 id="PostGIS-MetaTable"><a href="#PostGIS-MetaTable" class="headerlink" title="PostGIS MetaTable"></a>PostGIS MetaTable</h3><ul>
<li>spatial_ref_sys</li>
<li>geography_columns</li>
<li>geometry_columns</li>
<li>raster_columns</li>
<li>raster_overviews</li>
</ul>
<h3 id="PostGIS-常用函数"><a href="#PostGIS-常用函数" class="headerlink" title="PostGIS 常用函数"></a>PostGIS 常用函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">ST_AsText(geom) 用于查看 WKT</div><div class="line">ST_GeometryType(geometry) returns the type of the geometry</div><div class="line">ST_NDims(geometry) returns the number of dimensions of the geometry</div><div class="line">ST_SRID(geometry) returns the spatial reference identifier number of the geometry</div><div class="line">ST_X(geometry) returns the X ordinate , 如果作用在 Point 上，则返回经度</div><div class="line">ST_Y(geometry) returns the Y ordinate , 如果作用在 Point 上，则返回纬度</div><div class="line"></div><div class="line">ST_Length(geometry) returns the length of the linestring</div><div class="line">ST_StartPoint(geometry) returns the first coordinate as a point</div><div class="line">ST_EndPoint(geometry) returns the last coordinate as a point</div><div class="line">ST_NPoints(geometry) returns the number of coordinates in the linestring</div><div class="line"></div><div class="line">ST_Area(geometry) returns the area of the polygons</div><div class="line">ST_NRings(geometry) returns the number of rings (usually 1, more of there are holes)</div><div class="line">ST_ExteriorRing(geometry) returns the outer ring as a linestring</div><div class="line">ST_InteriorRingN(geometry,n) returns a specified interior ring as a linestring</div><div class="line">ST_Perimeter(geometry) returns the length of all the rings</div><div class="line"></div><div class="line">ST_NumGeometries(geometry) returns the number of parts in the collection</div><div class="line">ST_GeometryN(geometry,n) returns the specified part</div><div class="line">ST_Area(geometry) returns the total area of all polygonal parts</div><div class="line">ST_Length(geometry) returns the total length of all linear parts</div></pre></td></tr></table></figure>
<h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-- 合并多个区域并返回 multipoly</div><div class="line">UPDATE areas as A</div><div class="line">SET &quot;Boundary&quot; = ST_Multi(st_union(ARRAY(SELECT geom FROM county_boundary_region WHERE gid in ( &apos;foo_id&apos;,&apos;bar_id)&apos;)</div><div class="line">)))</div><div class="line">WHERE A.&quot;ID&quot; = &apos;xxxxxx&apos;</div></pre></td></tr></table></figure>
<h2 id="0xEE-参考链接"><a href="#0xEE-参考链接" class="headerlink" title="0xEE 参考链接"></a>0xEE 参考链接</h2><ol>
<li><a href="http://gis.stackexchange.com/questions/6681/what-are-the-pros-and-cons-of-postgis-geography-and-geometry-types" target="_blank" rel="external">http://gis.stackexchange.com/questions/6681/what-are-the-pros-and-cons-of-postgis-geography-and-geometry-types</a></li>
<li>Geo Processing with Python</li>
</ol>
<hr>
<p>ChangeLog:</p>
<ul>
<li><strong>2017-07-11</strong> 重修文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;p&gt;16 年 12 月研究 GIS 相关资料用于处理 GIS 相关问题，完成基本 GIS 功能。&lt;br&gt;最新需要进阶相关内容用于更好的处理相关数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;书籍：&lt;ul&gt;
&lt;li&gt;Geoprocessing With Python&lt;/li&gt;
&lt;li&gt;PostGIS In Action 2rd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;框架：&lt;ul&gt;
&lt;li&gt;前端 Leaflets D3&lt;/li&gt;
&lt;li&gt;后端 GeoDjango&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他零零碎碎的资料&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特此记录。&lt;/p&gt;
    
    </summary>
    
      <category term="Python 黑魔法" scheme="http://twocucao.xyz/categories/Python-%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据可视化" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Django" scheme="http://twocucao.xyz/tags/Django/"/>
    
      <category term="GIS" scheme="http://twocucao.xyz/tags/GIS/"/>
    
  </entry>
  
  <entry>
    <title>ReThinking In Python</title>
    <link href="http://twocucao.xyz/2017/07/04/RethinkingInPython/"/>
    <id>http://twocucao.xyz/2017/07/04/RethinkingInPython/</id>
    <published>2017-07-04T12:08:21.000Z</published>
    <updated>2018-01-28T01:31:11.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍这个过程中结合自己的开发常见场景记录下来的一些笔记。</p>
<h2 id="0x01-Python-胡论"><a href="#0x01-Python-胡论" class="headerlink" title="0x01 Python 胡论"></a>0x01 Python 胡论</h2><h3 id="1-1-Python-的独一无二性"><a href="#1-1-Python-的独一无二性" class="headerlink" title="1.1 Python 的独一无二性"></a>1.1 Python 的独一无二性</h3><p>是要用一门编程语言无非是两种原因：</p>
<ul>
<li>这门技术很火，能挣钱</li>
<li>写起来很舒服，开发效率高</li>
</ul>
<p>这也是我在涉猎了很多编程语言为什么选择了 Python 和 TypeScript 作为自己的主要技能树。</p>
<p>Python 具备这两点，TS （更加准确的说是 JavaScript）具备前一点。</p>
<p>Python 写起来真的特别舒服，语法简洁，第三方库丰富，而且也比较火。</p>
<p>有什么东西比，写代码效率高、生态圈好还重要了。</p>
<p>生态圈好，比如</p>
<ul>
<li>Web 开发用 Django/Flask</li>
<li>数据抓取用 Requests</li>
<li>数据分析清洗用 Pandas</li>
<li>机器学习 Tensorflow SCIPY</li>
</ul>
<a id="more"></a>
<h3 id="1-2-工具链"><a href="#1-2-工具链" class="headerlink" title="1.2 工具链"></a>1.2 工具链</h3><p><a href="./ch04/s03_Pythonista_的工具集.md">Pythonista 的工具集</a></p>
<h3 id="1-3-文档"><a href="#1-3-文档" class="headerlink" title="1.3 文档"></a>1.3 文档</h3><h3 id="1-4-社区"><a href="#1-4-社区" class="headerlink" title="1.4 社区"></a>1.4 社区</h3><h3 id="1-5-书籍"><a href="#1-5-书籍" class="headerlink" title="1.5 书籍"></a>1.5 书籍</h3><h2 id="0x02-基础概念"><a href="#0x02-基础概念" class="headerlink" title="0x02 基础概念"></a>0x02 基础概念</h2><h3 id="2-1-数据类型"><a href="#2-1-数据类型" class="headerlink" title="2.1 数据类型"></a>2.1 数据类型</h3><h4 id="2-1-1-常量"><a href="#2-1-1-常量" class="headerlink" title="2.1.1 常量"></a>2.1.1 常量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">False</div><div class="line">True</div><div class="line">None</div><div class="line">NotImplemented</div><div class="line">Elilipsis ...</div></pre></td></tr></table></figure>
<h5 id="布尔常量"><a href="#布尔常量" class="headerlink" title="布尔常量"></a>布尔常量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">None</div><div class="line">False</div><div class="line">0 0.0 0j</div><div class="line">&apos;&apos; () []</div><div class="line">&#123;&#125;</div><div class="line">一个对象 __bool__() = False , 如果上一个为 True 则__len__()</div></pre></td></tr></table></figure>
<h5 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x or y</div><div class="line">x and y</div><div class="line">not x</div></pre></td></tr></table></figure>
<h5 id="布尔比较值"><a href="#布尔比较值" class="headerlink" title="布尔比较值"></a>布尔比较值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 可以定制</div><div class="line">&lt; &lt;= &gt;= &gt; == !=</div><div class="line"># 无法定制</div><div class="line">is / is not</div></pre></td></tr></table></figure>
<h4 id="2-1-2-数字类型"><a href="#2-1-2-数字类型" class="headerlink" title="2.1.2 数字类型"></a>2.1.2 数字类型</h4><ul>
<li>int</li>
<li>float</li>
<li>complex</li>
</ul>
<h5 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+ - * / // % -n +n abs() int() float()</div><div class="line">complex(re,im)</div><div class="line">c.conjugate()</div><div class="line">divmod(x,y)</div><div class="line">pow(x,y) x ** y</div><div class="line">math.trunc(x)</div><div class="line">math.round(x[,n])</div><div class="line">math.floor(x) &lt;=x</div><div class="line">math.ceil(x)  &gt;=x</div><div class="line">| ^ &amp; &lt;&lt; &gt;&gt; ~x</div></pre></td></tr></table></figure>
<p>注意</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(-1) / 2 # -1</div><div class="line">1 / (-2) # -1</div></pre></td></tr></table></figure>
<h5 id="数值类型的哈希"><a href="#数值类型的哈希" class="headerlink" title="数值类型的哈希"></a>数值类型的哈希</h5><p>// TODO : 麻蛋居然没看懂 4.4.4. Hashing of numeric types</p>
<h4 id="2-1-3-迭代器类型"><a href="#2-1-3-迭代器类型" class="headerlink" title="2.1.3 迭代器类型"></a>2.1.3 迭代器类型</h4><p>生成器</p>
<h4 id="2-1-4-序列类型"><a href="#2-1-4-序列类型" class="headerlink" title="2.1.4 序列类型"></a>2.1.4 序列类型</h4><p>C 实现的按照 item 是否为同一类型分为：</p>
<ul>
<li><strong>Container sequences</strong>:  list, tuple, and collections.deque can hold items of different types.</li>
<li><strong>Flat sequences</strong>: str, bytes, bytearray, memoryview, and array.array hold items of one type.</li>
</ul>
<p>C 实现按照 item 是否可修改分为：</p>
<ul>
<li><strong>Mutable sequences</strong>: list, bytearray, array.array, collections.deque, and memoryview</li>
<li><strong>Immutable sequences</strong>: tuple, str, and bytes</li>
</ul>
<h5 id="通用序列操作"><a href="#通用序列操作" class="headerlink" title="通用序列操作"></a>通用序列操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">x in s</div><div class="line">x not in s</div><div class="line">s + t</div><div class="line">s * n 或者 n * s</div><div class="line">s[i]</div><div class="line">s[i:j]</div><div class="line">s[i:j:s]</div><div class="line">len(s)</div><div class="line">min(s)</div><div class="line">max(s)</div><div class="line">s.index(x,i,j)</div><div class="line">s.count(x)</div><div class="line">// TODO 封装 deepEqual</div></pre></td></tr></table></figure>
<p>切片</p>
<p>为何 Slice 和 Range 会排除 最后一个 Item?</p>
<p>书中讲的太复杂，其实这个和尺子是一个作用，尺子从 0 刻度开始，这样方便丈量。</p>
<p>比如说：</p>
<ul>
<li>items[0:10] 为 10 厘米</li>
<li>items[10] 为 10 刻度后一个单位，即 items[10:11]</li>
<li>items[2:] 为 2 刻度后面若干个单位</li>
<li>items[::3] 以三为单位，从 0 刻度开始，最后为结尾，每三个</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a[i, j] <span class="comment"># 调用 a.__getitem__((i, j))</span></div></pre></td></tr></table></figure>
<h5 id="不可变序列类型"><a href="#不可变序列类型" class="headerlink" title="不可变序列类型"></a>不可变序列类型</h5><ul>
<li>解包赋值</li>
<li>不要手贱加逗号</li>
<li><p>下划线可以用作临时变量 （但是 django 中下划线用于中英文）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a, b, *rest = range(<span class="number">5</span>) <span class="comment"># (0, 1, [2, 3, 4])</span></div><div class="line">a, b, *rest = range(<span class="number">3</span>) <span class="comment"># (0, 1, [2])</span></div><div class="line">a, b, *rest = range(<span class="number">2</span>) <span class="comment"># (0, 1, [])</span></div><div class="line"></div><div class="line">a, *body, c, d = range(<span class="number">5</span>) <span class="comment"># (0, [1, 2], 3, 4)</span></div><div class="line">*head, b, c, d = range(<span class="number">5</span>) <span class="comment"># ([0, 1], 2, 3, 4)</span></div></pre></td></tr></table></figure>
</li>
<li><p>namedtuple</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">City = namedtuple(<span class="string">'City'</span>, <span class="string">'name country population coordinates'</span>)</div><div class="line">tokyo = City(<span class="string">'Tokyo'</span>, <span class="string">'JP'</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>))</div><div class="line">tokyo.population</div><div class="line">tokyo.coordinates</div><div class="line">tokyo[<span class="number">1</span>]</div><div class="line">City._fields <span class="comment"># tuple</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="可变序列类型"><a href="#可变序列类型" class="headerlink" title="可变序列类型"></a>可变序列类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">s[i] = x</div><div class="line">s[i:j] = t</div><div class="line">del s[i:j]</div><div class="line">s[i:j:k] = t</div><div class="line">del s[i:j:k]</div><div class="line">s.append(x)</div><div class="line">s.clear()</div><div class="line">s.copy()</div><div class="line">s.extend(t) 或者 s += t</div></pre></td></tr></table></figure>
<h5 id="List-Comprehensions-and-Generator-Expressions"><a href="#List-Comprehensions-and-Generator-Expressions" class="headerlink" title="List Comprehensions and Generator Expressions"></a>List Comprehensions and Generator Expressions</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">new_items = [func(a) <span class="keyword">for</span> item <span class="keyword">in</span> items]</div><div class="line">new_items = [ str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">new_items = list(map(str,list(filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> , list(range(<span class="number">100</span>))))))</div><div class="line"><span class="comment"># 可写成</span></div><div class="line">new_items = list(map(str,filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> , range(<span class="number">100</span>))))</div></pre></td></tr></table></figure>
<p>list 往往和 map filter 以及 listcomp 用于创建简单的序列</p>
<h5 id="Augmented-Assignment-with-Sequences"><a href="#Augmented-Assignment-with-Sequences" class="headerlink" title="Augmented Assignment with Sequences"></a>Augmented Assignment with Sequences</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">对于不可变类型 赋值 l *= <span class="number">2</span> 在内存中则是创建了新的两个长度的元祖，然后赋值</div><div class="line">而由于字符串则需要注意，str_a += <span class="string">"str b"</span> , 虽然为不可变变量，但并不需要拷贝整个字符串（特殊情况）, 但字符串的拼接建议还是<span class="string">""</span>.join()</div><div class="line"></div><div class="line">t = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</div><div class="line">t[<span class="number">2</span>] += [<span class="number">50</span>, <span class="number">60</span>]</div><div class="line"><span class="comment"># 结果为既赋值成功，又报错</span></div><div class="line"><span class="comment"># 但 t[2].extend([50, 60]) 可以赋值成功</span></div><div class="line"><span class="keyword">import</span> dis</div><div class="line">dis.dis(<span class="string">'s[a] += b'</span>) <span class="comment"># 可以查看字节码</span></div></pre></td></tr></table></figure>
<ol>
<li>尽量不要在不可变变量内保存可变变量</li>
<li>t[2] += [50,60] 并不是原子操作，因为，当做了一半的时候，抛出的错误。</li>
</ol>
<h5 id="list-sort-and-the-sorted-Built-In-Function"><a href="#list-sort-and-the-sorted-Built-In-Function" class="headerlink" title="list.sort and the sorted Built-In Function"></a>list.sort and the sorted Built-In Function</h5><p>对于 sort 和 sorted 来说，reverse 代表 desc,key 为单参数用于计算每一个值的结果的函数。<br>list.sort 直接针对列表排序，并且返回 None（出于编程习惯的问题，直接返回 None 的函数大多是对程序有一定的修改）</p>
<h5 id="Managing-Ordered-Sequences-with-bisect"><a href="#Managing-Ordered-Sequences-with-bisect" class="headerlink" title="Managing Ordered Sequences with bisect"></a>Managing Ordered Sequences with bisect</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import bisect</div><div class="line">bisect -&gt; bisect_right</div><div class="line">bisect_left</div><div class="line">insort -&gt; insort_left</div><div class="line">insort_right</div><div class="line"># 搜索可以用来划分档次</div><div class="line">def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):</div><div class="line">    i = bisect.bisect(breakpoints, score)</div><div class="line">    return grades[i]</div><div class="line"></div><div class="line">[grade(score) for score in [33, 99, 77, 70, 89, 90, 100]] # ['F', 'A', 'C', 'C', 'B', 'A', 'A']</div></pre></td></tr></table></figure>
<h5 id="When-a-List-Is-Not-the-Answer"><a href="#When-a-List-Is-Not-the-Answer" class="headerlink" title="When a List Is Not the Answer"></a>When a List Is Not the Answer</h5><p>list 是一种 mix-typed 的数据结构，即可以存放不同种类型的数据结构，由此带来的问题自然是性能问题：</p>
<ul>
<li>list 第一是 mix-typed 的数据结构</li>
<li>动态数组，并非数组</li>
</ul>
<p>当考虑性能的时候，则需要考虑是不是要换一个更好的数据结构：</p>
<ul>
<li>适用于类型单一的 array</li>
<li>增删比较多，或者需要使用 FIFO,LIFO, 则使用 deque (double-ended queue)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Arrays</span></div><div class="line">floats = array(<span class="string">'d'</span>, (random() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>**<span class="number">7</span>)))</div><div class="line"><span class="comment"># NumPy and SciPy</span></div><div class="line"></div><div class="line"><span class="comment"># Deques and Other Queue</span></div></pre></td></tr></table></figure>
<h5 id="Deques-and-Other-Queue"><a href="#Deques-and-Other-Queue" class="headerlink" title="Deques and Other Queue"></a>Deques and Other Queue</h5><ul>
<li>Deque</li>
<li>queue 线程安全 Queue, LifoQueue, and PriorityQueue</li>
<li>multiprocessing Queue 和 JoinableQueue</li>
<li>asyncio Queue, LifoQueue, PriorityQueue, and JoinableQueue</li>
</ul>
<h3 id="2-2-语句"><a href="#2-2-语句" class="headerlink" title="2.2 语句"></a>2.2 语句</h3><p>语句</p>
<h3 id="2-3-函数"><a href="#2-3-函数" class="headerlink" title="2.3 函数"></a>2.3 函数</h3><h4 id="2-3-0-参数"><a href="#2-3-0-参数" class="headerlink" title="2.3.0 参数"></a>2.3.0 参数</h4><h4 id="2-3-1-闭包与作用域"><a href="#2-3-1-闭包与作用域" class="headerlink" title="2.3.1 闭包与作用域"></a>2.3.1 闭包与作用域</h4><p>本部分具备一定文字量，故单独抽取出来到文章，请参考 Python 中的闭包和作用域。</p>
<h4 id="2-3-2-高阶函数"><a href="#2-3-2-高阶函数" class="headerlink" title="2.3.2 高阶函数"></a>2.3.2 高阶函数</h4><ul>
<li>map</li>
<li>reduce</li>
<li>filter</li>
</ul>
<h4 id="2-3-3-特殊方法"><a href="#2-3-3-特殊方法" class="headerlink" title="2.3.3 特殊方法"></a>2.3.3 特殊方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">obj.__len__()</div><div class="line">len()</div><div class="line"></div><div class="line">obj.__</div></pre></td></tr></table></figure>
<p>对于内置类型 (list, str , bytearray) 解释器在调用特殊方法的时候调用 C 库，比如 CPython 实现的 len 方法一般直接会调用 PyVarObject C Struct ob_size</p>
<p>特殊方法往往并不是显示调用，而是被隐式调用。比如 init 在 new 中的作用，比如 for item in items 世界上会调用 iter(items), 这也会隐式调用 items.<strong>iter</strong>() .</p>
<p>一般当大量使用特殊方法的时候，都是在进行元编程。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bool(x) 先调用 x.__bool__() , 如果 x.__bool__() 没有实现，则调用 x.__len__(), 如果为 <span class="number">0</span> 则返回 <span class="keyword">False</span></div><div class="line">sorted(arr) 可以直接返回 arr，arr.sort() 是排序内部。</div></pre></td></tr></table></figure>
<p>特殊方法名 （有操作符）</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>方法名</th>
</tr>
</thead>
<tbody>
<tr>
<td>String/Bytes</td>
<td>repr , str , format , bytes</td>
</tr>
<tr>
<td>Conversion to number</td>
<td>abs , bool , complex , init , float , hash , index</td>
</tr>
<tr>
<td>Emulating collections</td>
<td>len , getitem , setitem , delitem , contains</td>
</tr>
<tr>
<td>Iteration</td>
<td>iter, reversed , next</td>
</tr>
<tr>
<td>Emulating callables</td>
<td>call</td>
</tr>
<tr>
<td>Context management</td>
<td>enter, exit</td>
</tr>
<tr>
<td>Instance creation &amp; destruction</td>
<td>new , init , del</td>
</tr>
<tr>
<td>Attribute management</td>
<td>getattr , getattribute , setattr , delattr, dir</td>
</tr>
<tr>
<td>Attribute descriptors</td>
<td>get , set ,delete</td>
</tr>
<tr>
<td>Class service</td>
<td>prepare , instancecheck , subclasscheck</td>
</tr>
</tbody>
</table>
<p>特殊方法名 （无操作符）</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>方法名</th>
</tr>
</thead>
<tbody>
<tr>
<td>Unary numeric operators</td>
<td>neg  , pos  , abs</td>
</tr>
<tr>
<td>Rich comparison operators</td>
<td>lt  , le  , eq  , ne  , gt  , ge</td>
</tr>
<tr>
<td>Arithmetic operators</td>
<td>add  ,sub  , mul  ,truediv  ,floordiv  ,mod , divmod , pow , round round</td>
</tr>
<tr>
<td>Reversed arithmetic operators</td>
<td>radd , rsub , rmul , rtruediv, rfloordiv , rmod , rdivmod, rpow</td>
</tr>
<tr>
<td>Augmented assignment mathmatic</td>
<td>iadd , isub , imul , itruediv, ifloordiv</td>
</tr>
<tr>
<td>Bitwise operators</td>
<td>invert  , lshift  , rshift  , and  , or</td>
</tr>
<tr>
<td>Reversed bitwise operators</td>
<td>rlshift , rrshift , rand , rxor , ror</td>
</tr>
<tr>
<td>Augmented assignment bitwise</td>
<td>ilshift , irshift , iand , ixor , ior</td>
</tr>
</tbody>
</table>
<p>Why len Is Not a Method</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">因为对 不同类型并不是一定调用 __len__ , 对于基本类型查看 c struct 中长度，对于其他类型直接调用 __len__ , 这种区分对待</div><div class="line"></div><div class="line"><span class="comment">### 2.4 生成器</span></div><div class="line"></div><div class="line">```python</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span></div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span></div><div class="line">    <span class="comment"># 这里为了省事，标记 123, 但是一般会有个循环，或者多个循环</span></div><div class="line"></div><div class="line">gen <span class="comment"># &lt;function __main__.gen&gt;</span></div><div class="line"><span class="comment"># 显式调用，返回方法对象</span></div><div class="line">g = gen() <span class="comment"># &lt;generator object gen at 0x10ec23dc0&gt;</span></div><div class="line">next(g)</div><div class="line">next(g)</div><div class="line">next(g)</div><div class="line">next(g) <span class="comment"># 执行到结尾部分或者其他报错 StopIteration</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gen():</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<p>生成器的作用就在于将遍历 lazy 化。嗯？其实编写代码的时候完全不中写生成器也可以 lazy 化很多操作。</p>
<p>需要注意的是，generator 后面支持了一个方法叫做 send(), 是 next() 的升级版本。将原来的数据的单向流通变成了双向流通。</p>
<p>见 <a href="#423-协程">协程</a></p>
<h2 id="0x03-中级概念"><a href="#0x03-中级概念" class="headerlink" title="0x03 中级概念"></a>0x03 中级概念</h2><h3 id="3-1-类和对象"><a href="#3-1-类和对象" class="headerlink" title="3.1 类和对象"></a>3.1 类和对象</h3><p>包含元编程</p>
<h3 id="3-2-模块与包"><a href="#3-2-模块与包" class="headerlink" title="3.2 模块与包"></a>3.2 模块与包</h3><h3 id="3-3-错误-调试测试"><a href="#3-3-错误-调试测试" class="headerlink" title="3.3 错误 / 调试测试"></a>3.3 错误 / 调试测试</h3><h3 id="3-4-IO-编程"><a href="#3-4-IO-编程" class="headerlink" title="3.4 IO 编程"></a>3.4 IO 编程</h3><h3 id="3-5-正则表达式"><a href="#3-5-正则表达式" class="headerlink" title="3.5 正则表达式"></a>3.5 正则表达式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">. ^ $ * + ? &#123; &#125; [ ] \ | ( )</div><div class="line"></div><div class="line">Regular String</div><div class="line"></div><div class="line">"ab*"</div><div class="line">"\\\\section"</div><div class="line">"\\w+\\s+\\1"</div><div class="line"></div><div class="line">Raw string</div><div class="line"></div><div class="line">r"ab*"</div><div class="line">r"\\section"</div><div class="line">r"\w+\s+\1"</div></pre></td></tr></table></figure>
<h2 id="0x04-高级概念"><a href="#0x04-高级概念" class="headerlink" title="0x04 高级概念"></a>0x04 高级概念</h2><h3 id="4-1-元编程"><a href="#4-1-元编程" class="headerlink" title="4.1 元编程"></a>4.1 元编程</h3><h4 id="4-1-1-Dynamic-Attributes-and-Properties"><a href="#4-1-1-Dynamic-Attributes-and-Properties" class="headerlink" title="4.1.1 Dynamic Attributes and Properties"></a>4.1.1 Dynamic Attributes and Properties</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">obj.attr</div><div class="line"></div><div class="line">重写__getattr__</div><div class="line"></div><div class="line">// TODO: 什么时候完成 python 的 DICT 以及 JSON 的相等？</div><div class="line"></div><div class="line">accessor?</div><div class="line">__new__ 是一个 class method, 但是并没有 xxx</div><div class="line"></div><div class="line">x = Foo('a')</div><div class="line"></div><div class="line">def object_maker(the_class, some_arg):</div><div class="line">    new_object = the_class.__new__(some_arg)</div><div class="line">    if isinstance(new_object, the_class):</div><div class="line">        the_class.__init__(new_object, some_arg)</div><div class="line">    return new_object</div><div class="line"></div><div class="line">x = object_maker(Foo,'a')</div></pre></td></tr></table></figure>
<h4 id="4-1-2-Attributes-Descriptors"><a href="#4-1-2-Attributes-Descriptors" class="headerlink" title="4.1.2 Attributes Descriptors"></a>4.1.2 Attributes Descriptors</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@property</span></div><div class="line"></div><div class="line">__class__ <span class="comment"># 接近 type()</span></div><div class="line">__dict__</div><div class="line">__slot__</div><div class="line"></div><div class="line">dir(obj) <span class="comment"># 与__dict__接近</span></div><div class="line">getattr</div><div class="line">setattr</div><div class="line">hasattr</div></pre></td></tr></table></figure>
<h4 id="4-1-3-Class-MetaProgramming"><a href="#4-1-3-Class-MetaProgramming" class="headerlink" title="4.1.3 Class MetaProgramming"></a>4.1.3 Class MetaProgramming</h4><h3 id="4-2-并发编程"><a href="#4-2-并发编程" class="headerlink" title="4.2 并发编程"></a>4.2 并发编程</h3><h4 id="4-2-0-GIL-Global-Interpreter-Lock"><a href="#4-2-0-GIL-Global-Interpreter-Lock" class="headerlink" title="4.2.0 GIL - Global Interpreter Lock"></a>4.2.0 GIL - Global Interpreter Lock</h4><p>并不是所有的解释器语言都有 GIL （尽管 Python 和 Ruby 里面都有）, 也并不是没有尝试过去除 GIL, 但是每次去除都会导致单线程性能的下降。所以暂时保留。</p>
<p>GIL 对程序中的影响：</p>
<blockquote>
<p>一个线程运行 Python , 而其他 N 个睡眠或者等待 I/O - <strong>同一时刻只有一个线程对共享资源进行存取</strong> , Python 线程也可以等待 threading.Lock 或者线程模块中的其他同步对象；</p>
</blockquote>
<h5 id="协同式多任务处理"><a href="#协同式多任务处理" class="headerlink" title="协同式多任务处理"></a>协同式多任务处理</h5><p>如果有两个线程，同时进行 IO 请求，当其中一个线程连接之后，立即会<strong>主动让出 GIL</strong>, 其他线程就可以运行。</p>
<blockquote>
<p>当 N 个线程在网络 I/O 堵塞，或等待重新获取 GIL，而一个线程运行 Python。</p>
</blockquote>
<p>让出之后还要执行代码呀，所以要有个收回 GIL 的动作。</p>
<h5 id="抢占式多任务处理"><a href="#抢占式多任务处理" class="headerlink" title="抢占式多任务处理"></a>抢占式多任务处理</h5><p>Python 2 GIL , 尝试收回 GIL 为 执行 1000 字节码。<br>Python 3 GIL , 尝试收回 GIL 检测间隔为 15ms</p>
<h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>原子操作：sort 之类不需要<br>非原子操作：n=n+2 的字节码分为 加载 n , 加载 2 , 相加，存储 n, 四个步骤，由于不是原子性，很可能被由于 15 ms 而被打断。</p>
<p>当然，懒人一向是 : <strong>优先级不决加括号，线程不决加 lock</strong></p>
<p>对于 Java, 程序员努力在尽可能短的时间内加锁存取共享数据，减轻线程的争夺，实现最大并行。但 Python 中，线程无法并行运行，细粒度的锁就没有了优势。</p>
<h4 id="4-2-1-多线程"><a href="#4-2-1-多线程" class="headerlink" title="4.2.1 多线程"></a>4.2.1 多线程</h4><blockquote>
<p>Python 多线程约等于并发。</p>
</blockquote>
<h4 id="4-2-2-多进程"><a href="#4-2-2-多进程" class="headerlink" title="4.2.2 多进程"></a>4.2.2 多进程</h4><h4 id="4-2-3-协程"><a href="#4-2-3-协程" class="headerlink" title="4.2.3 协程"></a>4.2.3 协程</h4><p>Python 中，协程在语法上接近于生成器（函数内包含 yield 关键字）.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">yield</span> a</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 协程</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># b = yield a</span></div><div class="line">    b = <span class="keyword">yield</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>协程在</p>
<h2 id="0x05-标准库与第三方库"><a href="#0x05-标准库与第三方库" class="headerlink" title="0x05 标准库与第三方库"></a>0x05 标准库与第三方库</h2><h3 id="5-1-数据结构与算法"><a href="#5-1-数据结构与算法" class="headerlink" title="5.1 数据结构与算法"></a>5.1 数据结构与算法</h3><h3 id="5-2-字符串与文本"><a href="#5-2-字符串与文本" class="headerlink" title="5.2 字符串与文本"></a>5.2 字符串与文本</h3><h3 id="5-3-数字日期与时间"><a href="#5-3-数字日期与时间" class="headerlink" title="5.3 数字日期与时间"></a>5.3 数字日期与时间</h3><h3 id="5-4-迭代器与生成器"><a href="#5-4-迭代器与生成器" class="headerlink" title="5.4 迭代器与生成器"></a>5.4 迭代器与生成器</h3><ol>
<li>Introduction</li>
<li>Built-in Functions</li>
<li>Built-in Constants</li>
<li>Built-in Types</li>
<li>Built-in Exceptions</li>
<li>Text Processing Services</li>
<li>Binary Data Services</li>
<li>Data Types</li>
<li>Numeric and Mathematical Modules</li>
<li>Functional Programming Modules</li>
<li>File and Directory Access</li>
<li>Data Persistence</li>
<li>Data Compression and Archiving</li>
<li>File Formats</li>
<li>Cryptographic Services</li>
<li>Generic Operating System Services</li>
<li>Concurrent Execution</li>
<li>Interprocess Communication and Networking</li>
<li>Internet Data Handling</li>
<li>Structured Markup Processing Tools</li>
<li>Internet Protocols and Support</li>
<li>Multimedia Services</li>
<li>Internationalization</li>
<li>Program Frameworks</li>
<li>Graphical User Interfaces with Tk</li>
<li>Development Tools</li>
<li>Debugging and Profiling</li>
<li>Software Packaging and Distribution</li>
<li>Python Runtime Services</li>
<li>Custom Python Interpreters</li>
<li>Importing Modules</li>
<li>Python Language Services</li>
<li>Miscellaneous Services</li>
<li>MS Windows Specific Services</li>
<li>Unix Specific Services</li>
<li>Superseded Modules</li>
<li>Undocumented Modules</li>
</ol>
<h2 id="0x06-可维护性代码"><a href="#0x06-可维护性代码" class="headerlink" title="0x06 可维护性代码"></a>0x06 可维护性代码</h2><h3 id="社区推崇的代码风格-Pythonic"><a href="#社区推崇的代码风格-Pythonic" class="headerlink" title="社区推崇的代码风格 Pythonic"></a>社区推崇的代码风格 Pythonic</h3><pre><code>The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren&apos;t special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you&apos;re Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it&apos;s a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let&apos;s do more of those!
</code></pre><h4 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h4><ul>
<li>外部<strong>不该</strong>引用 protected member （单下划线）</li>
<li>lambda 为一次使用，最好不要赋值。</li>
<li>不要给 buildin 函数赋值</li>
<li>py3 直接 super()</li>
<li>for in else 如果不内置 break 则出会在最后 for in 为 empty 的时候再执行 else 中的语句</li>
<li>context exit 如果不 catch 掉异常让其自然向上一级抛出错误的话，必须为 (self, exception_type, exception_value, traceback):</li>
<li>不要在 init 里面 return 数据</li>
<li>不要混用 tab 和 space</li>
<li>4 个 space 缩进</li>
<li>staticmethod 直接是 参数，classmethod 第一个参数为 cls</li>
<li>可变的 default value 是不能作为 参数的。（可能是解释器在确定函数的定义的时候完成赋值？)</li>
<li>遵循 exception hierachy <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" target="_blank" rel="external">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></li>
<li>defaultdict defaultdict(lambda : 6) , 必须 callable</li>
<li>尽量 unpack 赋值</li>
<li>字典用获取用 get(“myk”,None) , 赋值用 dictionary.setdefault(“list”, []).append(“list_item”)</li>
</ul>
<h4 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h4><ul>
<li>避免使用 import * , 我觉得这点值得商榷 , 如果是某个模块下，完全可以先把模块拆分成多个，最后 import 进来，接着使用 all.</li>
<li>getxxx 获取实际值，如果不为实际值，返回 None 显然不如 try catch 来的实在。</li>
<li>避免使用 global</li>
<li>命名要注意</li>
<li>动态创建方法 , 我觉得这点值得商榷。</li>
</ul>
<h4 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h4><ul>
<li>不要检查，如果可能有异常，尽量抛出异常来 trycatch 解决。</li>
<li>a is None , if flag</li>
<li>isinstance , not type(r) is types.ListType</li>
<li>“{name}{city}”.format(**info_dict)</li>
<li>for k , v in infodict.items()</li>
<li>使用 poiinfo = namedtuple(“poiinfo”,[“name”,”lng”,”lat”]) 返回 poiinfo[‘上海’,121.00,23] 最后返回值打印 poi.name , poi.lng , poi lat</li>
<li>for numbers_value, letters_value in zip(numbers, letters):</li>
<li>enumerate</li>
<li>如果能用 listcomp 则不使用 map 和 filter</li>
</ul>
<h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><ul>
<li>用 set</li>
<li>d.iteritems() 比 items() 省内存</li>
</ul>
<h2 id="0xEE-文章更新"><a href="#0xEE-文章更新" class="headerlink" title="0xEE 文章更新"></a>0xEE 文章更新</h2><ul>
<li><strong>2017-05-11 19:43:00</strong> : 增加代码质量模块</li>
<li><strong>2017-08-04 19:43:00</strong> : 增加部分 Fluent Python 的笔记</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍这个过程中结合自己的开发常见场景记录下来的一些笔记。&lt;/p&gt;
&lt;h2 id=&quot;0x01-Python-胡论&quot;&gt;&lt;a href=&quot;#0x01-Python-胡论&quot; class=&quot;headerlink&quot; title=&quot;0x01 Python 胡论&quot;&gt;&lt;/a&gt;0x01 Python 胡论&lt;/h2&gt;&lt;h3 id=&quot;1-1-Python-的独一无二性&quot;&gt;&lt;a href=&quot;#1-1-Python-的独一无二性&quot; class=&quot;headerlink&quot; title=&quot;1.1 Python 的独一无二性&quot;&gt;&lt;/a&gt;1.1 Python 的独一无二性&lt;/h3&gt;&lt;p&gt;是要用一门编程语言无非是两种原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这门技术很火，能挣钱&lt;/li&gt;
&lt;li&gt;写起来很舒服，开发效率高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这也是我在涉猎了很多编程语言为什么选择了 Python 和 TypeScript 作为自己的主要技能树。&lt;/p&gt;
&lt;p&gt;Python 具备这两点，TS （更加准确的说是 JavaScript）具备前一点。&lt;/p&gt;
&lt;p&gt;Python 写起来真的特别舒服，语法简洁，第三方库丰富，而且也比较火。&lt;/p&gt;
&lt;p&gt;有什么东西比，写代码效率高、生态圈好还重要了。&lt;/p&gt;
&lt;p&gt;生态圈好，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web 开发用 Django/Flask&lt;/li&gt;
&lt;li&gt;数据抓取用 Requests&lt;/li&gt;
&lt;li&gt;数据分析清洗用 Pandas&lt;/li&gt;
&lt;li&gt;机器学习 Tensorflow SCIPY&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python 黑魔法" scheme="http://twocucao.xyz/categories/Python-%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
    
      <category term="随笔" scheme="http://twocucao.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="重构技巧" scheme="http://twocucao.xyz/tags/%E9%87%8D%E6%9E%84%E6%8A%80%E5%B7%A7/"/>
    
      <category term="编程语言" scheme="http://twocucao.xyz/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>ReThinking In JavaScript</title>
    <link href="http://twocucao.xyz/2017/07/04/RethinkingInJavaScript/"/>
    <id>http://twocucao.xyz/2017/07/04/RethinkingInJavaScript/</id>
    <published>2017-07-04T12:08:21.000Z</published>
    <updated>2018-01-28T01:28:57.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>JavaScript 这门语言已经不容小觑了，在项目中的前端部分基于 VueJS 和 ElementUI 之后，我也就顺应历史潮流深入了解了一下这门不容小觑的语言。</p>
<a id="more"></a>
<h3 id="1-为什么是-JavaScript"><a href="#1-为什么是-JavaScript" class="headerlink" title="1. 为什么是 JavaScript"></a>1. 为什么是 JavaScript</h3><p>为什么是 JavaScript 呢？</p>
<p>因为太火，不得不认真学习一下。</p>
<p>我本人对 JavaScript 这种语言是有偏见的，这点我不会掩饰，我始终记得在正常的语言 Python / Java / C# 中实现一个休眠的简单功能和在 JS 中实现一个休眠功能的差别。</p>
<p>在 Python 中有很多语法糖，内置数据结构丰富，而 JS 则并不是如此，数据类型相对少，Bool 判断混乱，而今天，这门混乱的语言在流行程度上几乎接近于 Java 这门语言，即便是存在这样或者那样的问题，JavaScript 依然是一种奇葩的王者。</p>
<p>在服务端，有多少功能是 Python 完不成而 JavaScript（即 NodeJS) 可以胜任的呢？而且，NodeJS 写起来的感觉比起 Python 来说，还是差了很多，所以，我比较倾向于把计算类和 IO 类的操作用 Python 来写，至于浏览器端就交给 JavaScript 好了。</p>
<p>那么，对 JS 的这种定位，也使得我对 JS 生态圈的掌握程度不会超过 Vue/React 系。</p>
<h3 id="2-工具链"><a href="#2-工具链" class="headerlink" title="2. 工具链"></a>2. 工具链</h3><h4 id="2-1-浏览器端"><a href="#2-1-浏览器端" class="headerlink" title="2.1. 浏览器端"></a>2.1. 浏览器端</h4><h4 id="2-2-桌面端"><a href="#2-2-桌面端" class="headerlink" title="2.2. 桌面端"></a>2.2. 桌面端</h4><h4 id="2-3-客户端"><a href="#2-3-客户端" class="headerlink" title="2.3. 客户端"></a>2.3. 客户端</h4><h3 id="4-文档"><a href="#4-文档" class="headerlink" title="4. 文档"></a>4. 文档</h3><h3 id="5-社区"><a href="#5-社区" class="headerlink" title="5. 社区"></a>5. 社区</h3><h3 id="6-书籍"><a href="#6-书籍" class="headerlink" title="6. 书籍"></a>6. 书籍</h3><h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h3><ul>
<li>Number （没有 INT 值，只有 double-precision 64-bit format IEEE 754 ）</li>
<li>String</li>
<li>Boolean</li>
<li>Symbol (new in ES2015)</li>
<li>Object<ul>
<li>Function</li>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
</ul>
</li>
<li>null</li>
<li>undefined</li>
</ul>
<h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><h3 id="3-语句"><a href="#3-语句" class="headerlink" title="3. 语句"></a>3. 语句</h3><h2 id="0x02-中级概念"><a href="#0x02-中级概念" class="headerlink" title="0x02 中级概念"></a>0x02 中级概念</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h3 id="错误-调试测试"><a href="#错误-调试测试" class="headerlink" title="错误 / 调试测试"></a>错误 / 调试测试</h3><h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><h4 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h4><h5 id="协同式多任务处理"><a href="#协同式多任务处理" class="headerlink" title="协同式多任务处理"></a>协同式多任务处理</h5><h5 id="抢占式多任务处理"><a href="#抢占式多任务处理" class="headerlink" title="抢占式多任务处理"></a>抢占式多任务处理</h5><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h2 id="0x03-高级技巧"><a href="#0x03-高级技巧" class="headerlink" title="0x03 高级技巧"></a>0x03 高级技巧</h2><h2 id="0x04-标准库"><a href="#0x04-标准库" class="headerlink" title="0x04 标准库"></a>0x04 标准库</h2><h3 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h3><h3 id="系统化模块"><a href="#系统化模块" class="headerlink" title="系统化模块"></a>系统化模块</h3><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><h2 id="0xEE-文章更新"><a href="#0xEE-文章更新" class="headerlink" title="0xEE 文章更新"></a>0xEE 文章更新</h2><ul>
<li><strong>2017-07-05 19:43:00</strong> : 初始化本文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;p&gt;JavaScript 这门语言已经不容小觑了，在项目中的前端部分基于 VueJS 和 ElementUI 之后，我也就顺应历史潮流深入了解了一下这门不容小觑的语言。&lt;/p&gt;
    
    </summary>
    
      <category term="进击的 JavaScript" scheme="http://twocucao.xyz/categories/%E8%BF%9B%E5%87%BB%E7%9A%84-JavaScript/"/>
    
    
      <category term="随笔" scheme="http://twocucao.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="重构技巧" scheme="http://twocucao.xyz/tags/%E9%87%8D%E6%9E%84%E6%8A%80%E5%B7%A7/"/>
    
      <category term="编程语言" scheme="http://twocucao.xyz/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Vim Cheatsheet</title>
    <link href="http://twocucao.xyz/2017/06/23/VimCheatSheet/"/>
    <id>http://twocucao.xyz/2017/06/23/VimCheatSheet/</id>
    <published>2017-06-23T11:48:00.000Z</published>
    <updated>2018-01-30T09:27:08.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中 Vim 使用场景。</p>
<p>不定期更新。</p>
<a id="more"></a>
<ul>
<li>配置</li>
<li>基本使用技巧</li>
<li>原生 Tips &amp; Hacks</li>
<li>Vim 必备插件</li>
</ul>
<h2 id="0x01-配置"><a href="#0x01-配置" class="headerlink" title="0x01 配置"></a>0x01 配置</h2><p>原先使用 k-vim 进行日常的编辑，然后依据自己的一些需求进行微调为 c-vim 。</p>
<p><a href="https://github.com/twocucao/c-vim" target="_blank" rel="external">https://github.com/twocucao/c-vim</a></p>
<h2 id="0x02-基本使用技巧"><a href="#0x02-基本使用技巧" class="headerlink" title="0x02 基本使用技巧"></a>0x02 基本使用技巧</h2><h3 id="2-1-Insert-Mode"><a href="#2-1-Insert-Mode" class="headerlink" title="2.1 Insert Mode"></a>2.1 Insert Mode</h3><ul>
<li>c-w 向后删除一个 word</li>
<li>c-h 向后删除一个 char</li>
</ul>
<h3 id="2-2-Normal-Mode"><a href="#2-2-Normal-Mode" class="headerlink" title="2.2 Normal Mode"></a>2.2 Normal Mode</h3><ul>
<li>gi 返回上次修改地点</li>
<li>d% 剪切包含括号的括号内部内容</li>
<li>U 恢复单个句子</li>
<li>在命令状态下按 c-d 可以查看所有命令，相当于 bash 下面的 tabtab</li>
<li>hjkl 左下上右</li>
<li>EasyMotion 使用这个就可以代替乱七八糟的快速移动了。这是一个可以给当前的文字立即用打上 tag, 这样的话在 normal 情况下输入，,w  然后就可以看到很多 tag, 输入其中的 tag 就可以立即跳转到相应的 tag.</li>
<li>insert 状态进行编辑 c-h c-w 删除一个字，删除一个词。</li>
<li>normal 状态下进行删除 x dd  —— 删除一个字，剪切一行。</li>
<li>. ..  —— 重复操作</li>
<li><blockquote>
<p>&lt;   —— 缩进 &gt;G <g <g="">g</g></p>
</blockquote>
</li>
<li>c-b c-f back forth</li>
<li>c-n c-p 代码补全，tips, 建议标点符号全部半角花，这样就会吧每段连起来的汉字当成一个单词，这样就可以减少输入代码。</li>
<li><blockquote>
<p>indent</p>
</blockquote>
</li>
<li>&lt; outdent</li>
<li>do it (&gt;)</li>
<li>repeat (.)</li>
<li>reverse (u)</li>
<li>f{char}</li>
<li>repeat ;</li>
<li>reverse ,</li>
</ul>
<h3 id="2-3-Command-Mode"><a href="#2-3-Command-Mode" class="headerlink" title="2.3 Command Mode"></a>2.3 Command Mode</h3><p>:%s/old/new/gc 可以一行一行查看</p>
<h3 id="2-4-Visual-Mode"><a href="#2-4-Visual-Mode" class="headerlink" title="2.4 Visual Mode"></a>2.4 Visual Mode</h3><p>vib - 选框内<br>vi” - “” 内部<br>vi’ - ‘’ 内部<br>ggVG</p>
<h3 id="2-5-窗口管理"><a href="#2-5-窗口管理" class="headerlink" title="2.5 窗口管理"></a>2.5 窗口管理</h3><p>切换窗口：Ctrl+w+hjkl<br>分割窗口：Ctrl+w+vs<br>关闭窗口：Ctrl+w+q</p>
<h2 id="0x03-原生-Tips-amp-Hacks"><a href="#0x03-原生-Tips-amp-Hacks" class="headerlink" title="0x03 原生 Tips &amp; Hacks"></a>0x03 原生 Tips &amp; Hacks</h2><h3 id="行处理"><a href="#行处理" class="headerlink" title="行处理"></a>行处理</h3><h4 id="行排序"><a href="#行排序" class="headerlink" title="行排序"></a>行排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">行排序</div><div class="line">sort r /【.\+】/</div><div class="line">sort u</div><div class="line">sort n</div><div class="line">sort</div><div class="line">sort!</div><div class="line">g/start/+1,/end/-1 sort n</div><div class="line"></div><div class="line">:%!column -t</div><div class="line">:%!sort -k2nr</div></pre></td></tr></table></figure>
<h4 id="行删除"><a href="#行删除" class="headerlink" title="行删除"></a>行删除</h4><p>删除 html 标签</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:%s/&lt;\_.\&#123;-1,\&#125;&gt;//g</div></pre></td></tr></table></figure>
<h4 id="删除空行"><a href="#删除空行" class="headerlink" title="删除空行"></a>删除空行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">:g/^$/d</div><div class="line">:g/^\s*$/d</div><div class="line">:%s/\n\&#123;3,&#125;/\r\r/e</div><div class="line">:g/^[ \t\u3000]*$/d</div><div class="line"></div><div class="line">:g/pattern/d</div><div class="line">:g!/pattern/d</div><div class="line"></div><div class="line">:g/pattern/t$</div><div class="line">:g/pattern/m$</div><div class="line">:s/ \&#123;2,&#125;/ /g</div></pre></td></tr></table></figure>
<p>Use \r instead of \n</p>
<h2 id="0x04-Vim-必备插件"><a href="#0x04-Vim-必备插件" class="headerlink" title="0x04 Vim 必备插件"></a>0x04 Vim 必备插件</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文为 Cheatsheet 类型文章，用于记录我在日常编程中 Vim 使用场景。&lt;/p&gt;
&lt;p&gt;不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="编程利器" scheme="http://twocucao.xyz/categories/%E7%BC%96%E7%A8%8B%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="效率" scheme="http://twocucao.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="工作自动化" scheme="http://twocucao.xyz/tags/%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Cheatsheet" scheme="http://twocucao.xyz/tags/Cheatsheet/"/>
    
      <category term="Vim" scheme="http://twocucao.xyz/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Git CheatSheet</title>
    <link href="http://twocucao.xyz/2017/06/15/GitCheatSheet/"/>
    <id>http://twocucao.xyz/2017/06/15/GitCheatSheet/</id>
    <published>2017-06-15T12:46:00.000Z</published>
    <updated>2017-12-19T03:42:02.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何优雅地使用-Git"><a href="#如何优雅地使用-Git" class="headerlink" title="如何优雅地使用 Git"></a>如何优雅地使用 Git</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Git 是一种分布式版本管理工具。</p>
<h2 id="0x01-Git-命令范论"><a href="#0x01-Git-命令范论" class="headerlink" title="0x01 Git 命令范论"></a>0x01 Git 命令范论</h2><ol>
<li>基础命令 （本地修改类）</li>
<li>合作命令 （本地与仓库类）</li>
<li>综合命令</li>
<li>管理命令</li>
</ol>
<p>前两种命令是入门 Git 的程序员都必须要会的。</p>
<p>而队伍里的技术管理人员必须要会前三。</p>
<h3 id="1-1-基础命令"><a href="#1-1-基础命令" class="headerlink" title="1.1 基础命令"></a>1.1 基础命令</h3><ul>
<li>git-init(1) to create a new repository.</li>
<li>git-log(1) to see what happened.</li>
<li>git-checkout(1) and git-branch(1) to switch branches.</li>
<li>git-add(1) to manage the index file.</li>
<li>git-diff(1) and git-status(1) to see what you are in the middle of doing.</li>
<li>git-commit(1) to advance the current branch.</li>
<li>git-reset(1) and git-checkout(1) (with pathname parameters) to undo changes.</li>
<li>git-merge(1) to merge between local branches.</li>
<li>git-rebase(1) to maintain topic branches.</li>
<li>git-tag(1) to mark a known point.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ tar zxf frotz.tar.gz</div><div class="line">$ <span class="built_in">cd</span> frotz</div><div class="line">$ git init</div><div class="line">$ git add . (1)</div><div class="line">$ git commit -m <span class="string">"import of frotz source tree."</span></div><div class="line">$ git tag v2.43 (2)</div><div class="line"></div><div class="line">$ git checkout -b alsa-audio (1)</div><div class="line">$ edit/compile/<span class="built_in">test</span></div><div class="line">$ git checkout -- curses/ux_audio_oss.c (2) <span class="comment"># 恢复文件</span></div><div class="line">$ git add curses/ux_audio_alsa.c (3)</div><div class="line">$ edit/compile/<span class="built_in">test</span></div><div class="line">$ git diff HEAD (4) <span class="comment"># 查看提交了哪些修改</span></div><div class="line">$ git commit <span class="_">-a</span> <span class="_">-s</span> (5) <span class="comment"># 提交所有</span></div><div class="line">$ edit/compile/<span class="built_in">test</span></div><div class="line">$ git diff HEAD^ (6) <span class="comment"># 查看所有变化，包含之前的 commit</span></div><div class="line">$ git commit <span class="_">-a</span> --amend (7) <span class="comment"># 修订前一个 commit, 把所有的新变化提交到</span></div><div class="line">$ git checkout master (8)</div><div class="line">$ git merge alsa-audio (9)</div><div class="line">$ git <span class="built_in">log</span> --since=<span class="string">'3 days ago'</span> (10)</div><div class="line">$ git <span class="built_in">log</span> v2.43.. curses/ (11)</div></pre></td></tr></table></figure>
<h3 id="1-2-合作命令"><a href="#1-2-合作命令" class="headerlink" title="1.2 合作命令"></a>1.2 合作命令</h3><ul>
<li>git-clone(1) from the upstream to prime your local repository.</li>
<li>git-pull(1) and git-fetch(1) from “origin” to keep up-to-date with the upstream.</li>
<li>git-push(1) to shared repository, if you adopt CVS style shared repository workflow.</li>
<li>git-format-patch(1) to prepare e-mail submission, if you adopt Linux kernel-style public forum workflow.</li>
<li>git-send-email(1) to send your e-mail submission without corruption by your MUA.</li>
<li>git-request-pull(1) to create a summary of changes for your upstream to pull.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## clone 修改 提交</span></div><div class="line">$ git <span class="built_in">clone</span> git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6</div><div class="line">$ <span class="built_in">cd</span> my2.6</div><div class="line">$ git checkout -b mine master (1)</div><div class="line">$ edit/compile/<span class="built_in">test</span>; git commit <span class="_">-a</span> <span class="_">-s</span> (2)</div><div class="line">$ git format-patch master (3)</div><div class="line">$ git send-email --to=<span class="string">"person &lt;email@example.com&gt;"</span> 00*.patch (4)</div><div class="line">$ git checkout master (5)</div><div class="line">$ git pull (6)</div><div class="line">$ git <span class="built_in">log</span> -p ORIG_HEAD.. arch/i386 include/asm-i386 (7) <span class="comment"># 查看感兴趣的部分</span></div><div class="line">$ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8) <span class="comment"># 查看分支</span></div><div class="line">$ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9) <span class="comment"># 从一个特地</span></div><div class="line">$ git reset --hard ORIG_HEAD (10) <span class="comment"># 撤销 pull</span></div><div class="line">$ git gc (11) <span class="comment"># garbage collect leftover objects from reverted pull</span></div><div class="line"><span class="comment"># 推送到其他 repo</span></div><div class="line"></div><div class="line">satellite$ git <span class="built_in">clone</span> mothership:frotz frotz (1)</div><div class="line">satellite$ <span class="built_in">cd</span> frotz</div><div class="line">satellite$ git config --get-regexp <span class="string">'^(remote|branch)\.'</span> (2)</div><div class="line">remote.origin.url mothership:frotz</div><div class="line">remote.origin.fetch refs/heads/*:refs/remotes/origin/*</div><div class="line">branch.master.remote origin</div><div class="line">branch.master.merge refs/heads/master</div><div class="line">satellite$ git config remote.origin.push \</div><div class="line">            +refs/heads/*:refs/remotes/satellite/* (3)</div><div class="line">satellite$ edit/compile/<span class="built_in">test</span>/commit</div><div class="line">satellite$ git push origin (4)</div><div class="line"></div><div class="line">mothership$ <span class="built_in">cd</span> frotz</div><div class="line">mothership$ git checkout master</div><div class="line">mothership$ git merge satellite/master (5)</div><div class="line"></div><div class="line">           1. mothership machine has a frotz repository under your home directory; <span class="built_in">clone</span> from it to start a repository on the satellite machine.</div><div class="line">           2. <span class="built_in">clone</span> sets these configuration variables by default. It arranges git pull to fetch and store the branches of mothership machine to <span class="built_in">local</span> remotes/origin/* remote-tracking</div><div class="line">           branches.</div><div class="line">           3. arrange git push to push all <span class="built_in">local</span> branches to their corresponding branch of the mothership machine.</div><div class="line">           4. push will stash all our work away on remotes/satellite/* remote-tracking branches on the mothership machine. You could use this as a back-up method. Likewise, you can</div><div class="line">           pretend that mothership <span class="string">"fetched"</span> from you (useful when access is one sided).</div><div class="line">           5. on mothership machine, merge the work <span class="keyword">done</span> on the satellite machine into the master branch.</div><div class="line"></div><div class="line">       Branch off of a specific tag.</div><div class="line"></div><div class="line">               $ git checkout -b private2.6.14 v2.6.14 (1)</div><div class="line">               $ edit/compile/<span class="built_in">test</span>; git commit <span class="_">-a</span></div><div class="line">               $ git checkout master</div><div class="line">               $ git cherry-pick v2.6.14..private2.6.14 (2)</div><div class="line"></div><div class="line">           1. create a private branch based on a well known (but somewhat behind) tag.</div><div class="line">           2. forward port all changes <span class="keyword">in</span> private2.6.14 branch to master branch without a formal <span class="string">"merging"</span>. Or longhand git format-patch -k -m --stdout v2.6.14..private2.6.14 | git am -3</div><div class="line">           -k</div></pre></td></tr></table></figure>
<h3 id="1-3-综合个体"><a href="#1-3-综合个体" class="headerlink" title="1.3 综合个体"></a>1.3 综合个体</h3><h3 id="1-4-仓库管理"><a href="#1-4-仓库管理" class="headerlink" title="1.4 仓库管理"></a>1.4 仓库管理</h3><p>安装完毕之后，cmd-s-p shell command install</p>
<h2 id="0x02-Git-Hacks"><a href="#0x02-Git-Hacks" class="headerlink" title="0x02 Git Hacks"></a>0x02 Git Hacks</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 搜索代码的变化</span></div><div class="line">git <span class="built_in">log</span> -S<span class="string">'&lt;a term in the source&gt;'</span></div><div class="line"><span class="comment"># 放弃本地修改，与远程同步</span></div><div class="line">git fetch origin &amp;&amp; git reset --hard origin/master &amp;&amp; git clean <span class="_">-f</span> <span class="_">-d</span></div><div class="line"><span class="comment"># 列出所有冲突文件</span></div><div class="line">git diff --name-only --diff-filter=U</div><div class="line"></div><div class="line"><span class="comment"># 手贱错误提交，但是没有 push</span></div><div class="line">git commit -m <span class="string">"Something terribly misguided"</span>              (1)</div><div class="line">git reset HEAD~                                           (2)</div><div class="line"><span class="comment"># edit needing changed files</span></div><div class="line">git add needing changed files                             (4)</div><div class="line">git commit -c ORIG_HEAD                                   (5)</div><div class="line"></div><div class="line"><span class="comment"># Delete all changes in the Git repository, but leave unstaged things</span></div><div class="line">git checkout .</div><div class="line"><span class="comment"># Delete all changes in the Git repository, including untracked files</span></div><div class="line">git clean <span class="_">-f</span></div></pre></td></tr></table></figure>
<h2 id="0x03-Git-和-我的-Workflow"><a href="#0x03-Git-和-我的-Workflow" class="headerlink" title="0x03 Git 和 我的 Workflow"></a>0x03 Git 和 我的 Workflow</h2><p>一切工具都是为思路服务。</p>
<h2 id="0xEE-扩展阅读"><a href="#0xEE-扩展阅读" class="headerlink" title="0xEE 扩展阅读"></a>0xEE 扩展阅读</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何优雅地使用-Git&quot;&gt;&lt;a href=&quot;#如何优雅地使用-Git&quot; class=&quot;headerlink&quot; title=&quot;如何优雅地使用 Git&quot;&gt;&lt;/a&gt;如何优雅地使用 Git&lt;/h1&gt;&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; c
    
    </summary>
    
      <category term="编程利器" scheme="http://twocucao.xyz/categories/%E7%BC%96%E7%A8%8B%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="数据分析" scheme="http://twocucao.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
