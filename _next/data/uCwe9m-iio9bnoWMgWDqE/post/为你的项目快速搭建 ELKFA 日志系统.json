{"pageProps":{"post":{"tags":["Python","系列文章"],"path":"20190310_PyCode_05.md","title":"为你的项目快速搭建 ELKFA 日志系统","slug":"为你的项目快速搭建 ELKFA 日志系统","date":"2019-03-10","category":"Python 项目代码健壮性和性能","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<p>本文是《提升你的 Python 项目代码健壮性和性能》系列的第五篇文章。</p>\n<p>讲的是日志系统 ELKFA 的搭建</p>\n<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>什么是 ELKFA?</p>\n<p>这五个字母分别代表着五个开源软件</p>\n<ul>\n<li><strong>E - ElasticSearch</strong></li>\n<li><strong>L - Logstash</strong></li>\n<li><strong>K - Kibana</strong></li>\n<li><strong>F - FileBeat</strong></li>\n<li><strong>A - APM-Server</strong></li>\n</ul>\n<p>利用这五个软件的组合，我们可以在比较短的时间打造两个系统：</p>\n<ol>\n<li>日志系统，分析 Nginx 日志，Gunicorn 日志，Flask 日志，Django 日志</li>\n<li>APM 系统，解决两个问题<br>\n2.1 Metric 分析：Flask 是否正常运行，接口请求信息定期发送到 APMServer 这边，方便我观察服务是否正常，接口和业务逻辑的执行的时间是否在预期范围内。<br>\n2.2 Trouble Shooting: 如果程序报了异常，我想把需要报的异常堆栈信息打出。方便我快速的 Trouble Shooting</li>\n</ol>\n<h2 id=\"0x01-任务-1-分析-nginx-日志\"><a class=\"v-toc-item\" href=\"#0x01-任务-1-分析-nginx-日志\">#</a> 0x01 任务 1: 分析 Nginx 日志</h2>\n<p>Nginx 众所周知，Nginx 日志是个宝库，所以本文选取了 Nginx 作为日志分析的案例。</p>\n<p>对于 Nginx 日志，可以采用 FileBeat 上传到 Logstash, 由 Logstash 对文件进行解析，并存储到 ElasticSearch</p>\n<p>然后从 Kibana 进行分析。</p>\n<h3 id=\"第一步配置-nginx\"><a class=\"v-toc-item\" href=\"#第一步配置-nginx\">#</a> 第一步：配置 Nginx</h3>\n<p>首先，让 Nginx 的配置输出的日志符合某种模式，方便软件进行解析。</p>\n<pre><code class=\"language-text\">log_format  main  <span class=\"token string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span>\n\t\t\t\t\t\t\t<span class=\"token string\">'$status $body_bytes_sent \"$http_referer\" '</span>\n\t\t\t\t\t\t\t<span class=\"token string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span><span class=\"token punctuation\">;</span>\n\naccess_log <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>log<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>access<span class=\"token punctuation\">.</span>log main<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>然后重启 nginx</p>\n<h3 id=\"第二步拉取-nginx-日志\"><a class=\"v-toc-item\" href=\"#第二步拉取-nginx-日志\">#</a> 第二步：拉取 Nginx 日志</h3>\n<p>一天后，从 Nginx 服务器上拉一下 access.log 放到</p>\n<p>elastic-labs/logs/prod/nginx 下</p>\n<h3 id=\"第三步开启-elfka\"><a class=\"v-toc-item\" href=\"#第三步开启-elfka\">#</a> 第三步：开启 ELFKA</h3>\n<pre><code class=\"language-text\">git clone git@github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span>twocucao<span class=\"token operator\">/</span>elastic<span class=\"token operator\">-</span>labs<span class=\"token punctuation\">.</span>git\ncd elastic<span class=\"token operator\">-</span>labs\ndocker<span class=\"token operator\">-</span>compose up\n</code></pre>\n<blockquote>\n<p>啥、? 不会搭 Docker? 见文末<br>\n啥、? 不知道 ElasticSearch 怎么用、? 见文末</p>\n</blockquote>\n<p>如果运行正常，终端应该是这样的</p>\n<p><img src=\"https://pic1.zhimg.com/v2-15a6f7c35277ca34f035a0996ed1d23c_b.jpg\" alt=\"\"></p>\n<p>打开 kibana 进行观察</p>\n<p><a href=\"http://localhost:5601/\">http://localhost:5601/</a></p>\n<p><img src=\"https://pic2.zhimg.com/v2-52689881c9e9610d37c0fb88016ed5b5_b.jpg\" alt=\"\"></p>\n<h3 id=\"第四步日志探秘\"><a class=\"v-toc-item\" href=\"#第四步日志探秘\">#</a> 第四步：日志探秘</h3>\n<p>默认情况下，每一天的 Nginx 日志会在 ES 里创建一个 Index, 所以，你需要用 Index Pattern 来进行统计</p>\n<p><img src=\"https://pic2.zhimg.com/v2-52d45736112286a549e1e216fa0dab95_b.jpg\" alt=\"\"></p>\n<p>来看看我们可以得到哪些内容</p>\n<p><img src=\"https://pic1.zhimg.com/v2-341fb82fdf1615c6180fea381bca8c44_b.jpg\" alt=\"\"></p>\n<ol>\n<li>用户 IP 以及通过 GeoIP 得到的大致地理位置。</li>\n<li>OS 的类型 (Win/Mac/Linux/IOS/Android)</li>\n<li>客户端的类型，浏览器 / 小程序 / 客户端</li>\n<li>访问的接口，类型，频率</li>\n<li>访问服务的频率</li>\n<li>还有很多其他可以深挖的地方，比如通过用户访问的次序推断用户的使用姿势和思考方式等等</li>\n</ol>\n<p>对于第六点，有些人可能有些疑惑，这也能？</p>\n<blockquote>\n<p><strong>当然咯，假设用户在搜索引擎里面，先搜索了『美女』, 然后搜索了『雪白』, 然后又搜索了『白-洁』, 那基本上这个人搜索的三个词就具备一定的关联性，想搜索的这个雪白就不是『雪白』的意思</strong> &gt; <strong>而是你懂的。</strong></p>\n</blockquote>\n<h3 id=\"第五步扩展思考日志解决方案\"><a class=\"v-toc-item\" href=\"#第五步扩展思考日志解决方案\">#</a> 第五步：扩展思考，日志解决方案</h3>\n<p>上面四个步骤是为了解决分析 Nginx 日志的问题</p>\n<p>一条日志从打印出来，到能在 Kibana 进行分析，需要经过如下的步骤：</p>\n<ol>\n<li>按照某种日志格式写到文件里，然后被 FileBeat 接收，FB 判断为『 Nginx 模块的日志之后』上传到 Logstash</li>\n<li>Logstash 按照一个端口一个类型的方式接受该类型的日志。通过 filters 和插件进行匹配和修改，比如 grok 的 pattern 来匹配每一条日志（类似于正则匹配）, 抽出需要独立成字段的部分。比如通过 geoip 进行地址匹配，比如对字段进行 convert</li>\n<li>输出匹配结果到 ElasticSearch</li>\n<li>Kibana 通过更加边界的工具来查询 ElasticSearch</li>\n</ol>\n<p>如果你想要自定义日志获得更加完美的解决方案，那就需要对这几个流程进行进行细化。</p>\n<p>比如你想通过 Flask 的日志来达到更好的用户操作定位。这就需要读者自行依照自己的理解来 hack 了</p>\n<h2 id=\"0x02-任务-2-监控-flask-app-的-apm\"><a class=\"v-toc-item\" href=\"#0x02-任务-2-监控-flask-app-的-apm\">#</a> 0x02 任务 2: 监控 Flask App 的 APM</h2>\n<h3 id=\"第一步开启-elfka\"><a class=\"v-toc-item\" href=\"#第一步开启-elfka\">#</a> 第一步：开启 ELFKA</h3>\n<p>同任务一的启动方式</p>\n<h3 id=\"第二步开启-flask-app\"><a class=\"v-toc-item\" href=\"#第二步开启-flask-app\">#</a> 第二步：开启 flask app</h3>\n<pre><code class=\"language-bash\">pip3 install poetry # 比 pip <span class=\"token operator\">/</span> pipenv 更好的依赖管理和构建工具\npoetry install <span class=\"token operator\">-</span>vvv\npoetry shell\nflask run\n</code></pre>\n<p>写一个简单的管理和依赖工具</p>\n<pre><code class=\"language-bash\">from flask <span class=\"token keyword\">import</span> Flask\nfrom elasticapm<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>flask <span class=\"token keyword\">import</span> ElasticAPM\n\napp <span class=\"token operator\">=</span> <span class=\"token function\">Flask</span><span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"ELASTIC_APM\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"SERVICE_NAME\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dev-flask\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'SECRET_TOKEN'</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\napm <span class=\"token operator\">=</span> <span class=\"token function\">ElasticAPM</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\n@app<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\ndef <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, World!\"</span>\n\n@app<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">)</span>\ndef <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"home!\"</span>\n\n@app<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&lt;int:num>\"</span><span class=\"token punctuation\">)</span>\ndef <span class=\"token function\">hello_num</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">import</span> random\n    <span class=\"token keyword\">if</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">randint</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">95</span><span class=\"token operator\">:</span>\n        raise <span class=\"token function\">Exception</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">\"num\"</span><span class=\"token punctuation\">)</span> # 有接近 <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">5</span> 的概率会故意抛出异常\n    <span class=\"token keyword\">return</span> f<span class=\"token string\">\"Hello, {num}!\"</span>\n</code></pre>\n<p>随手写一个脚本 20 分钟内持续不断的访问接口</p>\n<pre><code class=\"language-bash\"><span class=\"token constant\">SECONDS</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token constant\">SECONDS</span> <span class=\"token operator\">-</span>lt <span class=\"token number\">1200</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span> <span class=\"token operator\">&amp;</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span> <span class=\"token operator\">&amp;</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span> <span class=\"token operator\">&amp;</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span> <span class=\"token operator\">&amp;</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span> <span class=\"token operator\">&amp;</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span> <span class=\"token operator\">&amp;</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span> <span class=\"token operator\">&amp;</span>\n\t\tcurl <span class=\"token string\">\"http://localhost:5000/$i\"</span> <span class=\"token operator\">&amp;</span>\n\tdone\ndone\n</code></pre>\n<h3 id=\"第三步apm-探秘\"><a class=\"v-toc-item\" href=\"#第三步apm-探秘\">#</a> 第三步：APM 探秘</h3>\n<p>20 分钟过去了，我们可以获知到什么呢？</p>\n<ol>\n<li>Metric 分析：Flask 是否正常运行，接口请求信息定期发送到 APMServer 这边，方便我观察服务是否正常，接口和业务逻辑的执行的时间是否在预期范围内。</li>\n<li>Trouble Shooting: 如果程序报了异常，我想把需要报的异常堆栈信息打出。方便我快速的 Trouble Shooting</li>\n</ol>\n<p>先设置时间为最近 30 分钟</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8076c883c59df6d2ff0821d82c2b1f7f_b.jpg\" alt=\"\"></p>\n<p>在这里可以看到接口的访问情况</p>\n<p><img src=\"https://pic2.zhimg.com/v2-776f3bf0834fc827edf2264ca76049f1_b.jpg\" alt=\"\"></p>\n<p>先看 Metric 分析</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9352ae0740081699d5692df34df9f724_b.jpg\" alt=\"\"></p>\n<p>这里可以看到接口的稳定性，服务器的基本负载，以及 Error 的出现频次。</p>\n<p>再看 Error</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1d63b7048a6144cdbf14e8543fb31225_b.jpg\" alt=\"\"></p>\n<p><strong>看到这里简直泪目 这就是 ELK 版本的 Sentry 啊</strong></p>\n<blockquote>\n<p><strong>Time Saving &amp;&amp; 防脱发利器</strong></p>\n</blockquote>\n<h3 id=\"第四步扩展思考\"><a class=\"v-toc-item\" href=\"#第四步扩展思考\">#</a> 第四步：扩展思考</h3>\n<p>从 App 被监控到能在 Kibana 进行分析，需要经过如下的步骤：</p>\n<ol>\n<li>在原有的 Flask App 里面进行添加 elastc-apm 的 agent (apm-client)</li>\n<li>agent 会定期将收集完毕的性能信息以及异常信息，发到 apm-server</li>\n<li>输出结果到 ElasticSearch</li>\n<li>Kibana 通过更加边界的工具来查询 ElasticSearch</li>\n</ol>\n<p>如果你想要自定义日志获得更加完美的解决方案，那就需要对这前两个流程进行进行细化。</p>\n<p>比如公司用 Graphql 的接口，那么，在这种情况下，自带的 contrib 下的 flask 包的路由基本就是废掉的，你需要再 Hack 一下。</p>\n<h2 id=\"0xdd-结论\"><a class=\"v-toc-item\" href=\"#0xdd-结论\">#</a> 0xDD 结论</h2>\n<p>本来这篇文章打算写日志的最佳实践的，结果在查找资料的时候发现了一篇更好的文章</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/27363484\">https://zhuanlan.zhihu.com/p/27363484</a></li>\n</ul>\n<p>看完之后打消了这个念头，转而写如何使用 ELK 的系统落实这种日志分析系统</p>\n<p>代码见 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/twocucao/elastic-labs\">twocucao/elastic-labs</a></p>\n<blockquote>\n<p><strong>欢迎点赞 / 关注 /star 文明三连</strong></p>\n</blockquote>\n<h2 id=\"0xee-参考链接\"><a class=\"v-toc-item\" href=\"#0xee-参考链接\">#</a> 0xEE 参考链接</h2>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/27363484\">https://zhuanlan.zhihu.com/p/27363484</a></li>\n<li>Photo by<a href=\"https://link.zhihu.com/?target=https%3A//unsplash.com/photos/rr8DvtQL9X8%3Futm_source%3Dunsplash%26utm_medium%3Dreferral%26utm_content%3DcreditCopyText\">Tan Kaninthanond</a>on<a href=\"https://link.zhihu.com/?target=https%3A//unsplash.com/%3Futm_source%3Dunsplash%26utm_medium%3Dreferral%26utm_content%3DcreditCopyText\">Unsplash</a></li>\n<li><strong>关于 elasticsearch 可以参考我以前的文章</strong> <a href=\"https://zhuanlan.zhihu.com/p/35143409\">Django 全栈教程系列番外篇 - ElasticSearch CheatSheet</a></li>\n<li>关于 <strong>docker 的搭建</strong> 可以参考我以前的文章 <a href=\"https://zhuanlan.zhihu.com/p/33920401\">Django 全栈教程系列之一 - YaDjangoBlog 开发环境配置</a></li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-%E4%BB%BB%E5%8A%A1-1-%E5%88%86%E6%9E%90-nginx-%E6%97%A5%E5%BF%97\">0x01 任务 1: 分析 Nginx 日志</a>\n<ul>\n<li><a href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%E9%85%8D%E7%BD%AE-nginx\">第一步：配置 Nginx</a></li>\n<li><a href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E6%8B%89%E5%8F%96-nginx-%E6%97%A5%E5%BF%97\">第二步：拉取 Nginx 日志</a></li>\n<li><a href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5%E5%BC%80%E5%90%AF-elfka\">第三步：开启 ELFKA</a></li>\n<li><a href=\"#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E6%97%A5%E5%BF%97%E6%8E%A2%E7%A7%98\">第四步：日志探秘</a></li>\n<li><a href=\"#%E7%AC%AC%E4%BA%94%E6%AD%A5%E6%89%A9%E5%B1%95%E6%80%9D%E8%80%83%E6%97%A5%E5%BF%97%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">第五步：扩展思考，日志解决方案</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-%E4%BB%BB%E5%8A%A1-2-%E7%9B%91%E6%8E%A7-flask-app-%E7%9A%84-apm\">0x02 任务 2: 监控 Flask App 的 APM</a>\n<ul>\n<li><a href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%BC%80%E5%90%AF-elfka\">第一步：开启 ELFKA</a></li>\n<li><a href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%BC%80%E5%90%AF-flask-app\">第二步：开启 flask app</a></li>\n<li><a href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5apm-%E6%8E%A2%E7%A7%98\">第三步：APM 探秘</a></li>\n<li><a href=\"#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E6%89%A9%E5%B1%95%E6%80%9D%E8%80%83\">第四步：扩展思考</a></li>\n</ul>\n</li>\n<li><a href=\"#0xdd-%E7%BB%93%E8%AE%BA\">0xDD 结论</a></li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">0xEE 参考链接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}