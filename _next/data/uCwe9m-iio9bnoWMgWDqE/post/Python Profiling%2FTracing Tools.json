{"pageProps":{"post":{"tags":["Python","性能优化"],"path":"20201201_PythonProfiling.md","title":"Python Profiling/Tracing Tools","slug":"Python Profiling/Tracing Tools","date":"2020-11-30","category":"Python","lastMod":"2020-12-01","description":"未描述","thumbnail":"","content":"<ul>\n<li>Profiling 定位与优化耗时、内存使用、CPU 使用</li>\n<li>Tracing 用于追踪内存布局</li>\n</ul>\n<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>本篇讨论的是优化</p>\n<p>当我们在谈优化的的时候，首先要背诵下面三个口诀</p>\n<pre><code>优化口诀 1: 先做对，布监控，再做好。\n优化口诀 2: 过早优化是万恶之源。\n优化口诀 3: 去优化那些需要优化的地方。\n</code></pre>\n<p>可以参考之前的文章 <a href=\"https://zhuanlan.zhihu.com/p/58754459\">https://zhuanlan.zhihu.com/p/58754459</a></p>\n<p>本文讨论的是基于现有代码的诊断。也顺带讨论了无侵入线上 trace 的原理和技巧</p>\n<p>优化分为两种：</p>\n<ol>\n<li>侵入性诊断</li>\n<li>侵入性诊断</li>\n</ol>\n<h2 id=\"0x01-侵入性诊断\"><a class=\"v-toc-item\" href=\"#0x01-侵入性诊断\">#</a> 0x01 侵入性诊断</h2>\n<h3 id=\"基础工具\"><a class=\"v-toc-item\" href=\"#基础工具\">#</a> 基础工具</h3>\n<ul>\n<li>print</li>\n<li>logging</li>\n<li>timeit</li>\n</ul>\n<h3 id=\"profile-vs-cprofile\"><a class=\"v-toc-item\" href=\"#profile-vs-cprofile\">#</a> Profile vs cProfile</h3>\n<p>cProfile overhead 较高，</p>\n<pre><code class=\"language-python\"><span class=\"token keyword\">import</span> cProfile\n<span class=\"token keyword\">import</span> re\ncProfile<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">'re.compile(\"foo|bar\")'</span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token number\">197</span> <span class=\"token keyword\">function</span> <span class=\"token function\">calls</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token number\">192</span> primitive calls</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0.002</span> seconds\n\nOrdered by<span class=\"token operator\">:</span> standard name\n\nncalls  tottime  percall  cumtime  percall filename<span class=\"token operator\">:</span><span class=\"token function\">lineno</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">)</span>\n     <span class=\"token number\">1</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.001</span>    <span class=\"token number\">0.001</span> <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n     <span class=\"token number\">1</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.001</span>    <span class=\"token number\">0.001</span> re<span class=\"token punctuation\">.</span>py<span class=\"token operator\">:</span><span class=\"token number\">212</span><span class=\"token punctuation\">(</span>compile<span class=\"token punctuation\">)</span>\n     <span class=\"token number\">1</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.001</span>    <span class=\"token number\">0.001</span> re<span class=\"token punctuation\">.</span>py<span class=\"token operator\">:</span><span class=\"token number\">268</span><span class=\"token punctuation\">(</span>_compile<span class=\"token punctuation\">)</span>\n     <span class=\"token number\">1</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span> sre_compile<span class=\"token punctuation\">.</span>py<span class=\"token operator\">:</span><span class=\"token number\">172</span><span class=\"token punctuation\">(</span>_compile_charset<span class=\"token punctuation\">)</span>\n     <span class=\"token number\">1</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span> sre_compile<span class=\"token punctuation\">.</span>py<span class=\"token operator\">:</span><span class=\"token number\">201</span><span class=\"token punctuation\">(</span>_optimize_charset<span class=\"token punctuation\">)</span>\n     <span class=\"token number\">4</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span> sre_compile<span class=\"token punctuation\">.</span>py<span class=\"token operator\">:</span><span class=\"token number\">25</span><span class=\"token punctuation\">(</span>_identityfunction<span class=\"token punctuation\">)</span>\n   <span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span>    <span class=\"token number\">0.000</span> sre_compile<span class=\"token punctuation\">.</span>py<span class=\"token operator\">:</span><span class=\"token number\">33</span><span class=\"token punctuation\">(</span>_compile<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"speedscope\"><a class=\"v-toc-item\" href=\"#speedscope\">#</a> SpeedScope</h3>\n<ul>\n<li>speedscope</li>\n<li>pyspeedscope</li>\n</ul>\n<h3 id=\"pyinstrument\"><a class=\"v-toc-item\" href=\"#pyinstrument\">#</a> PyInstrument</h3>\n<ul>\n<li><a href=\"https://github.com/joerick/pyinstrument\">https://github.com/joerick/pyinstrument</a></li>\n<li><a href=\"https://github.com/joerick/pyinstrument_cext\">https://github.com/joerick/pyinstrument_cext</a></li>\n</ul>\n<h3 id=\"line-profiler\"><a class=\"v-toc-item\" href=\"#line-profiler\">#</a> Line Profiler</h3>\n<p><a href=\"https://github.com/pyutils/line_profiler\">https://github.com/pyutils/line_profiler</a></p>\n<pre><code class=\"language-bash\"><span class=\"token function\">Pystone</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span> time <span class=\"token keyword\">for</span> <span class=\"token number\">50000</span> passes <span class=\"token operator\">=</span> <span class=\"token number\">2.48</span>\nThis machine benchmarks at <span class=\"token number\">20161.3</span> pystones<span class=\"token operator\">/</span>second\nWrote profile results to pystone<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">.</span>lprof\nTimer unit<span class=\"token operator\">:</span> <span class=\"token number\">1e-06</span> s\n\nFile<span class=\"token operator\">:</span> pystone<span class=\"token punctuation\">.</span>py\nFunction<span class=\"token operator\">:</span> Proc2 at line <span class=\"token number\">149</span>\nTotal time<span class=\"token operator\">:</span> <span class=\"token number\">0.606656</span> s\n\nLine #      Hits         Time  Per Hit   <span class=\"token operator\">%</span> Time  Line Contents\n<span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">==</span>\n   <span class=\"token number\">149</span>                                           @profile\n   <span class=\"token number\">150</span>                                           def <span class=\"token function\">Proc2</span><span class=\"token punctuation\">(</span>IntParIO<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n   <span class=\"token number\">151</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">82003</span>      <span class=\"token number\">1.6</span>     <span class=\"token number\">13.5</span>      IntLoc <span class=\"token operator\">=</span> IntParIO <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n   <span class=\"token number\">152</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">63162</span>      <span class=\"token number\">1.3</span>     <span class=\"token number\">10.4</span>      <span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n   <span class=\"token number\">153</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">69065</span>      <span class=\"token number\">1.4</span>     <span class=\"token number\">11.4</span>          <span class=\"token keyword\">if</span> Char1Glob <span class=\"token operator\">==</span> <span class=\"token string\">'A'</span><span class=\"token operator\">:</span>\n   <span class=\"token number\">154</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">66354</span>      <span class=\"token number\">1.3</span>     <span class=\"token number\">10.9</span>              IntLoc <span class=\"token operator\">=</span> IntLoc <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n   <span class=\"token number\">155</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">67263</span>      <span class=\"token number\">1.3</span>     <span class=\"token number\">11.1</span>              IntParIO <span class=\"token operator\">=</span> IntLoc <span class=\"token operator\">-</span> IntGlob\n   <span class=\"token number\">156</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">65494</span>      <span class=\"token number\">1.3</span>     <span class=\"token number\">10.8</span>              EnumLoc <span class=\"token operator\">=</span> Ident1\n   <span class=\"token number\">157</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">68001</span>      <span class=\"token number\">1.4</span>     <span class=\"token number\">11.2</span>          <span class=\"token keyword\">if</span> EnumLoc <span class=\"token operator\">==</span> Ident1<span class=\"token operator\">:</span>\n   <span class=\"token number\">158</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">63739</span>      <span class=\"token number\">1.3</span>     <span class=\"token number\">10.5</span>              <span class=\"token keyword\">break</span>\n   <span class=\"token number\">159</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">61575</span>      <span class=\"token number\">1.2</span>     <span class=\"token number\">10.1</span>      <span class=\"token keyword\">return</span> IntParIO\n</code></pre>\n<h3 id=\"其他侵入性-profiling-方案\"><a class=\"v-toc-item\" href=\"#其他侵入性-profiling-方案\">#</a> 其他侵入性 Profiling 方案</h3>\n<ul>\n<li><a href=\"https://github.com/vmprof/vmprof-python\">https://github.com/vmprof/vmprof-python</a></li>\n<li><a href=\"https://github.com/bdarnell/plop\">https://github.com/bdarnell/plop</a></li>\n</ul>\n<h3 id=\"overhead-基数\"><a class=\"v-toc-item\" href=\"#overhead-基数\">#</a> Overhead 基数</h3>\n<p>Django template render × 4000</p>\n<ul>\n<li>Base 0.33s</li>\n<li>pyinstrument 0.43s 30%</li>\n<li>cProfile 0.61s 84%</li>\n<li>profile 6.79s 2057%</li>\n</ul>\n<h3 id=\"内存布局\"><a class=\"v-toc-item\" href=\"#内存布局\">#</a> 内存布局</h3>\n<ul>\n<li>memory profiler 检查内存消耗</li>\n<li>pympler 快照未 GC 的对象</li>\n</ul>\n<blockquote>\n<p>TODO: python 有无侵入检查内存布局的工具么？</p>\n</blockquote>\n<h2 id=\"0x02-无侵入诊断\"><a class=\"v-toc-item\" href=\"#0x02-无侵入诊断\">#</a> 0x02 无侵入诊断</h2>\n<p>以上的代码都是侵入代码，Java 生态中存在着一些黑科技。可以在线打断点。</p>\n<p><a href=\"https://github.com/qunarcorp/bistoury/blob/master/docs/cn/debug.md\">https://github.com/qunarcorp/bistoury/blob/master/docs/cn/debug.md</a></p>\n<p>从而实现无侵入在线 tracing 代码，可以理解为一个无需 reload 代码即可实现的热插拔 logging</p>\n<p>Python 世界里存在 2 个这样的工具</p>\n<h3 id=\"pyflame\"><a class=\"v-toc-item\" href=\"#pyflame\">#</a> pyflame</h3>\n<ul>\n<li><a href=\"https://github.com/uber-archive/pyflame\">https://github.com/uber-archive/pyflame</a></li>\n</ul>\n<p>原理</p>\n<ul>\n<li><a href=\"https://man7.org/linux/man-pages/man2/ptrace.2.html\">https://man7.org/linux/man-pages/man2/ptrace.2.html</a></li>\n</ul>\n<h3 id=\"py-spy\"><a class=\"v-toc-item\" href=\"#py-spy\">#</a> py-spy</h3>\n<ul>\n<li><a href=\"https://github.com/benfred/py-spy\">https://github.com/benfred/py-spy</a></li>\n</ul>\n<p>直接读取 python 程序的内存信息</p>\n<ul>\n<li>Linux <a href=\"https://man7.org/linux/man-pages/man2/process_vm_readv.2.html\">https://man7.org/linux/man-pages/man2/process_vm_readv.2.html</a></li>\n<li>macOS <a href=\"https://developer.apple.com/documentation/kernel/1585350-vm_read?language=objc\">https://developer.apple.com/documentation/kernel/1585350-vm_read?language=objc</a></li>\n<li>Windows <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680553(v=vs.85).aspx\">https://msdn.microsoft.com/en-us/library/windows/desktop/ms680553(v=vs.85).aspx</a></li>\n</ul>\n<h2 id=\"0x03-其他利器\"><a class=\"v-toc-item\" href=\"#0x03-其他利器\">#</a> 0x03 其他利器</h2>\n<h3 id=\"django-debug-toolbar\"><a class=\"v-toc-item\" href=\"#django-debug-toolbar\">#</a> Django Debug Toolbar</h3>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-%E4%BE%B5%E5%85%A5%E6%80%A7%E8%AF%8A%E6%96%AD\">0x01 侵入性诊断</a>\n<ul>\n<li><a href=\"#%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7\">基础工具</a></li>\n<li><a href=\"#profile-vs-cprofile\">Profile vs cProfile</a></li>\n<li><a href=\"#speedscope\">SpeedScope</a></li>\n<li><a href=\"#pyinstrument\">PyInstrument</a></li>\n<li><a href=\"#line-profiler\">Line Profiler</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96%E4%BE%B5%E5%85%A5%E6%80%A7-profiling-%E6%96%B9%E6%A1%88\">其他侵入性 Profiling 方案</a></li>\n<li><a href=\"#overhead-%E5%9F%BA%E6%95%B0\">Overhead 基数</a></li>\n<li><a href=\"#%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80\">内存布局</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-%E6%97%A0%E4%BE%B5%E5%85%A5%E8%AF%8A%E6%96%AD\">0x02 无侵入诊断</a>\n<ul>\n<li><a href=\"#pyflame\">pyflame</a></li>\n<li><a href=\"#py-spy\">py-spy</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-%E5%85%B6%E4%BB%96%E5%88%A9%E5%99%A8\">0x03 其他利器</a>\n<ul>\n<li><a href=\"#django-debug-toolbar\">Django Debug Toolbar</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}