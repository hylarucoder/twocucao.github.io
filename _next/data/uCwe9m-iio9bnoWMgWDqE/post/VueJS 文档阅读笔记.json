{"pageProps":{"post":{"tags":["VueJS"],"path":"20170915_ReadingVueDocuments.md","title":"VueJS 文档阅读笔记","slug":"VueJS 文档阅读笔记","date":"2017-09-15","category":"前端开发","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x01-essential\"><a class=\"v-toc-item\" href=\"#0x01-essential\">#</a> 0x01 Essential</h2>\n<h3 id=\"11-the-vue-instance\"><a class=\"v-toc-item\" href=\"#11-the-vue-instance\">#</a> 1.1 The Vue Instance</h3>\n<p>当 Vue 实例被创建时，添加所有在 Data 对象中的属性到 Reactivity System 中。</p>\n<blockquote>\n<p>而创建之后添加赋值新属性，则不 Reactive</p>\n</blockquote>\n<p>而实例被创建之时，会自带前缀为 $ 的一系列属性和方法</p>\n<h4 id=\"111-内置方法和属性\"><a class=\"v-toc-item\" href=\"#111-内置方法和属性\">#</a> 1.1.1 内置方法和属性</h4>\n<h5 id=\"instance-properties\"><a class=\"v-toc-item\" href=\"#instance-properties\">#</a> Instance Properties</h5>\n<p>vm.$data<br>\nvm.$props<br>\nvm.$el<br>\nvm.$options<br>\nvm.$parent<br>\nvm.$root<br>\nvm.$children<br>\nvm.$slots<br>\nvm.$scopedSlots<br>\nvm.$refs<br>\nvm.$isServer<br>\nvm.$attrs<br>\nvm.$listeners</p>\n<!-- more -->\n<h5 id=\"instance-methods-data\"><a class=\"v-toc-item\" href=\"#instance-methods-data\">#</a> Instance Methods / Data</h5>\n<p>vm.$watch<br>\nvm.$set<br>\nvm.$delete</p>\n<h5 id=\"instance-methods-events\"><a class=\"v-toc-item\" href=\"#instance-methods-events\">#</a> Instance Methods / Events</h5>\n<p>vm.$on<br>\nvm.$once<br>\nvm.$off<br>\nvm.$emit</p>\n<h5 id=\"instance-methods-lifecycle\"><a class=\"v-toc-item\" href=\"#instance-methods-lifecycle\">#</a> Instance Methods / Lifecycle</h5>\n<p>vm.$mount<br>\nvm.$forceUpdate<br>\nvm.$nextTick<br>\nvm.$destroy</p>\n<h4 id=\"112-生命周期\"><a class=\"v-toc-item\" href=\"#112-生命周期\">#</a> 1.1.2 生命周期</h4>\n<p><img src=\"https://vuejs.org/images/lifecycle.png\" alt=\"生命周期\"></p>\n<h3 id=\"12-template-syntax\"><a class=\"v-toc-item\" href=\"#12-template-syntax\">#</a> 1.2 Template Syntax</h3>\n<p>VueJS 编译 模板为 VirtualDOM render 函数，如果对 VirtualDom 非常熟悉的话，则可以使用</p>\n<h4 id=\"121-插值\"><a class=\"v-toc-item\" href=\"#121-插值\">#</a> 1.2.1 插值</h4>\n<pre><code># text\n{{ msg }}\n&lt;span v-once&gt; {{ msg }} &lt;span&gt;\n# raw html\n&lt;div v-html=&quot;rawHTML&quot;&gt;&lt;/div&gt;\n# attributes\n&lt;div v-bind:id=&quot;dynamicID&quot;&gt;&lt;/div&gt;\n# JS Expressions\n{{ number + 1 }}\n{{ ok ? 'YES' : 'NO' }}\n{{ message.split('').reverse().join('') }}\n&lt;div v-bind:id=&quot;'list-' + id&quot;&gt;&lt;/div&gt;\n</code></pre>\n<h4 id=\"122-指令\"><a class=\"v-toc-item\" href=\"#122-指令\">#</a> 1.2.2 指令</h4>\n<ul>\n<li>v-bind -&gt; :</li>\n<li>v-on -&gt; @</li>\n<li>v-on:submit.prevent=“onSubmit”</li>\n</ul>\n<h3 id=\"13-computed-properties-and-watchers\"><a class=\"v-toc-item\" href=\"#13-computed-properties-and-watchers\">#</a> 1.3 Computed Properties and Watchers</h3>\n<ul>\n<li>当使用 Computed 的时候，一旦其依赖的 reactive 的 data 发生变化之后，则其值发生变化。</li>\n<li>其实，可以在模板中调用方法，但只能在项目中。</li>\n</ul>\n<h3 id=\"14-class-and-style-bindings\"><a class=\"v-toc-item\" href=\"#14-class-and-style-bindings\">#</a> 1.4 Class and Style Bindings</h3>\n<h4 id=\"141-object-语法\"><a class=\"v-toc-item\" href=\"#141-object-语法\">#</a> 1.4.1 Object 语法</h4>\n<pre><code>&lt;div class=&quot;static&quot;\n     :class=&quot;{ active: isActive, 'text-danger': hasError }&quot;&gt;\n&lt;/div&gt;\n</code></pre>\n<h4 id=\"142-array-语法\"><a class=\"v-toc-item\" href=\"#142-array-语法\">#</a> 1.4.2 Array 语法</h4>\n<pre><code>&lt;div v-bind:class=&quot;[isActive ? activeClass : '', errorClass]&quot;&gt;&lt;/div&gt;\n</code></pre>\n<h4 id=\"143-组件\"><a class=\"v-toc-item\" href=\"#143-组件\">#</a> 1.4.3 组件</h4>\n<pre><code>&lt;my-component class=&quot;baz boo&quot;&gt;&lt;/my-component&gt;\n\n&lt;p  class=&quot;origin baz boo&quot;&gt;\n</code></pre>\n<h3 id=\"15-conditional-rendering\"><a class=\"v-toc-item\" href=\"#15-conditional-rendering\">#</a> 1.5 Conditional Rendering</h3>\n<pre><code>&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;\n\n&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;\n&lt;h1 v-else&gt;No&lt;/h1&gt;\n\n&lt;div v-if=&quot;type === 'A'&quot;&gt;\n  A\n&lt;/div&gt;\n&lt;div v-else-if=&quot;type === 'B'&quot;&gt;\n  B\n&lt;/div&gt;\n&lt;div v-else-if=&quot;type === 'C'&quot;&gt;\n  C\n&lt;/div&gt;\n&lt;div v-else&gt;\n  Not A/B/C\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>v-if 是否</li>\n<li>v-for 优先级高于 v-if</li>\n</ul>\n<h3 id=\"16-list-rendering\"><a class=\"v-toc-item\" href=\"#16-list-rendering\">#</a> 1.6 List Rendering</h3>\n<p>对于数组</p>\n<pre><code>&lt;ul id=&quot;example-2&quot;&gt;\n  &lt;li v-for=&quot;(item, index) in items&quot;&gt;\n    {{ parentMessage }} - {{ index }} - {{ item.message }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>对于对象</p>\n<pre><code>&lt;ul id=&quot;example-2&quot;&gt;\n  &lt;li v-for=&quot;(item, index) in items&quot;&gt;\n    {{ parentMessage }} - {{ index }} - {{ item.message }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<h4 id=\"161-array-修改检测\"><a class=\"v-toc-item\" href=\"#161-array-修改检测\">#</a> 1.6.1 ARRAY 修改检测</h4>\n<h5 id=\"方法\"><a class=\"v-toc-item\" href=\"#方法\">#</a> 方法</h5>\n<ul>\n<li>push()</li>\n<li>pop()</li>\n<li>shift()</li>\n<li>unshift()</li>\n<li>splice()</li>\n<li>sort()</li>\n<li>reverse()</li>\n</ul>\n<h5 id=\"取代数组\"><a class=\"v-toc-item\" href=\"#取代数组\">#</a> 取代数组</h5>\n<p>filter</p>\n<h5 id=\"警告\"><a class=\"v-toc-item\" href=\"#警告\">#</a> 警告</h5>\n<pre><code class=\"language-html\">直接通过 index 对数组进行修改 不应该 vm<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>indexOfItem<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newValue 应该 <span class=\"token comment\">//</span>\nVue<span class=\"token punctuation\">.</span>set Vue<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>example1<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">,</span> indexOfItem<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Array.prototype.splice</span>\nexample1<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>indexOfItem<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span> 修改 length 不该 vm<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length\n<span class=\"token operator\">=</span> newLength 应该 example1<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>newLength<span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>猜测背后可能是因为这种方式是无法监测设置</p>\n</blockquote>\n<h4 id=\"162-object-修改检测警告\"><a class=\"v-toc-item\" href=\"#162-object-修改检测警告\">#</a> 1.6.2 Object 修改检测警告</h4>\n<pre><code class=\"language-javascript\">js 无法直接提供对\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userProfile<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"17-event-handling\"><a class=\"v-toc-item\" href=\"#17-event-handling\">#</a> 1.7 Event Handling</h3>\n<h4 id=\"171-listening-to-events\"><a class=\"v-toc-item\" href=\"#171-listening-to-events\">#</a> 1.7.1 Listening to Events</h4>\n<pre><code class=\"language-html\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"example-1\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token operator\">=</span><span class=\"token string\">\"counter += 1\"</span><span class=\"token operator\">></span>Add <span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>The button above has been clicked <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> counter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> times<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n</code></pre>\n<p>PS: 注意，前面 v-on v-bind 所有的绑定可以绑在方法上，也可以直接填单行表达式。可以提高可阅读性</p>\n<h4 id=\"172-method-event-handlers\"><a class=\"v-toc-item\" href=\"#172-method-event-handlers\">#</a> 1.7.2 Method Event Handlers</h4>\n<p>可以绑定方法</p>\n<h4 id=\"173-methods-in-inline-handlers\"><a class=\"v-toc-item\" href=\"#173-methods-in-inline-handlers\">#</a> 1.7.3 Methods in Inline Handlers</h4>\n<p>可以绑定方法加参数，配合 for / if</p>\n<h4 id=\"174-event-modifiers\"><a class=\"v-toc-item\" href=\"#174-event-modifiers\">#</a> 1.7.4 Event Modifiers</h4>\n<p>事件修饰符</p>\n<pre><code class=\"language-javascript\"><span class=\"token punctuation\">.</span>stop\n<span class=\"token punctuation\">.</span>prevent\n<span class=\"token punctuation\">.</span>capture\n<span class=\"token punctuation\">.</span>self\n<span class=\"token punctuation\">.</span>once\n</code></pre>\n<pre><code class=\"language-html\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> the click event's propagation will be stopped <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>a v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token punctuation\">.</span>stop<span class=\"token operator\">=</span><span class=\"token string\">\"doThis\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> the submit event will no longer reload the page <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>form v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>submit<span class=\"token punctuation\">.</span>prevent<span class=\"token operator\">=</span><span class=\"token string\">\"onSubmit\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> modifiers can be chained <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>a v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">.</span>prevent<span class=\"token operator\">=</span><span class=\"token string\">\"doThat\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> just the modifier <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>form v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>submit<span class=\"token punctuation\">.</span>prevent<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> use capture mode when adding the event listener <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> i<span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">.</span> an event targeting an inner element is handled here before being handled by that element <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token punctuation\">.</span>capture<span class=\"token operator\">=</span><span class=\"token string\">\"doThis\"</span><span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> only trigger handler <span class=\"token keyword\">if</span> event<span class=\"token punctuation\">.</span>target is the element itself <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> i<span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">.</span> not from a child element <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token punctuation\">.</span>self<span class=\"token operator\">=</span><span class=\"token string\">\"doThat\"</span><span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n</code></pre>\n<h4 id=\"175-key-modifiers\"><a class=\"v-toc-item\" href=\"#175-key-modifiers\">#</a> 1.7.5 Key Modifiers</h4>\n<pre><code class=\"language-javascript\"><span class=\"token punctuation\">.</span>enter\n<span class=\"token punctuation\">.</span>tab\n<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span> <span class=\"token punctuation\">(</span>captures both “Delete” and “Backspace” keys<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span>esc\n<span class=\"token punctuation\">.</span>space\n<span class=\"token punctuation\">.</span>up\n<span class=\"token punctuation\">.</span>down\n<span class=\"token punctuation\">.</span>left\n<span class=\"token punctuation\">.</span>right\n</code></pre>\n<pre><code class=\"language-html\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> same <span class=\"token keyword\">as</span> above <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>keyup<span class=\"token punctuation\">.</span>enter<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> also works <span class=\"token keyword\">for</span> shorthand <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>input @keyup<span class=\"token punctuation\">.</span>enter<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n</code></pre>\n<h4 id=\"176-system-modifier-keys\"><a class=\"v-toc-item\" href=\"#176-system-modifier-keys\">#</a> 1.7.6 System Modifier Keys</h4>\n<p>键盘</p>\n<pre><code>.ctrl\n.alt\n.shift\n.meta\n</code></pre>\n<pre><code>&lt;!-- Alt + C --&gt;\n&lt;input @keyup.alt.67=&quot;clear&quot;&gt;\n&lt;!-- Ctrl + Click --&gt;\n&lt;div @click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt;\n</code></pre>\n<p>鼠标</p>\n<pre><code>.left\n.right\n.middle\n</code></pre>\n<h4 id=\"177-why-listeners-in-html\"><a class=\"v-toc-item\" href=\"#177-why-listeners-in-html\">#</a> 1.7.7 Why Listeners in HTML?</h4>\n<p>在以往的开发中，直接写在 html 的 onclick 是很糟糕的方式，因为这违反了局部变量准则。将 onclick 变量提升为整个页面很容易导致，页面内部组织混乱。</p>\n<p>而 v-on 则仅执行 viewmodel 的方法，不会绑定到其他方法里。</p>\n<h3 id=\"18-form-input-bindings\"><a class=\"v-toc-item\" href=\"#18-form-input-bindings\">#</a> 1.8 Form Input Bindings</h3>\n<p><a href=\"https://vuejs.org/v2/guide/forms.html\">https://vuejs.org/v2/guide/forms.html</a></p>\n<p>对于每个 Form 空间，可以进行一定的封装。</p>\n<p>比如拖拽上传啦，比如 RadioGroup 啦等等。通过封装，可以进行相关的分析。</p>\n<h3 id=\"19-components\"><a class=\"v-toc-item\" href=\"#19-components\">#</a> 1.9 Components</h3>\n<p>Using Components<br>\nGlobal Registration<br>\nLocal Registration<br>\nDOM Template Parsing Caveats<br>\ndata Must Be a Function<br>\nComposing Components<br>\nProps<br>\nPassing Data with Props<br>\ncamelCase vs. kebab-case<br>\nDynamic Props<br>\nLiteral vs. Dynamic<br>\nOne-Way Data Flow<br>\nProp Validation<br>\nNon-Prop Attributes<br>\nReplacing/Merging with Existing Attributes<br>\nCustom Events<br>\nUsing v-on with Custom Events<br>\nBinding Native Events to Components<br>\n.sync Modifier<br>\nForm Input Components using Custom Events<br>\nCustomizing Component v-model<br>\nNon Parent-Child Communication<br>\nContent Distribution with Slots<br>\nCompilation Scope<br>\nSingle Slot<br>\nNamed Slots<br>\nScoped Slots<br>\nDynamic Components<br>\nkeep-alive<br>\nMisc<br>\nAuthoring Reusable Components<br>\nChild Component Refs<br>\nAsync Components<br>\nAdvanced Async Components<br>\nComponent Naming Conventions<br>\nRecursive Components<br>\nCircular References Between Components<br>\nInline Templates<br>\nX-Templates<br>\nCheap Static Components with v-once</p>\n<h3 id=\"总结\"><a class=\"v-toc-item\" href=\"#总结\">#</a> 总结</h3>\n<p>组件化是 Vue 模块化组织前端网页的方式。</p>\n<p>Vue 的组件化，将模板，JavaScript 与样式放在一起。出于代码的复用性：</p>\n<p>组件化可以给组件子组件们组织起来，起一个阅读性更好的名称，从而使得编写 Vue 组件更加语义化。</p>\n<ul>\n<li>如果模板是常用的组件，比如手风琴控件，Menu 控件，sidebar 控件</li>\n</ul>\n<p>Vue 通过组件来组织代码，但糟糕的是并不是一切都可以被组件化</p>\n<h2 id=\"0x02-transitions-animation\"><a class=\"v-toc-item\" href=\"#0x02-transitions-animation\">#</a> 0x02 Transitions &amp; Animation</h2>\n<h3 id=\"21-event-handling\"><a class=\"v-toc-item\" href=\"#21-event-handling\">#</a> 2.1 Event Handling</h3>\n<h3 id=\"22-event-handling\"><a class=\"v-toc-item\" href=\"#22-event-handling\">#</a> 2.2 Event Handling</h3>\n<h2 id=\"0x03-reusability-composition\"><a class=\"v-toc-item\" href=\"#0x03-reusability-composition\">#</a> 0x03 Reusability &amp; Composition</h2>\n<h2 id=\"0x04-tooling\"><a class=\"v-toc-item\" href=\"#0x04-tooling\">#</a> 0x04 Tooling</h2>\n<h2 id=\"0x05-scaling-up\"><a class=\"v-toc-item\" href=\"#0x05-scaling-up\">#</a> 0x05 Scaling Up</h2>\n<h2 id=\"0x06-internals\"><a class=\"v-toc-item\" href=\"#0x06-internals\">#</a> 0x06 Internals</h2>\n<h2 id=\"0x07-vue-番外篇\"><a class=\"v-toc-item\" href=\"#0x07-vue-番外篇\">#</a> 0x07 Vue 番外篇</h2>\n<p>下面的内容从 Vue 作者的知乎 Live 上取来。</p>\n<h3 id=\"阅读源码的建议\"><a class=\"v-toc-item\" href=\"#阅读源码的建议\">#</a> 阅读源码的建议</h3>\n<p><a href=\"http://hcysun.me/2017/03/03/Vue\">http://hcysun.me/2017/03/03/Vue</a> 源码学习 /</p>\n<h3 id=\"框架背后的要解决的原理\"><a class=\"v-toc-item\" href=\"#框架背后的要解决的原理\">#</a> 框架背后的要解决的原理</h3>\n<p>组件为基本单元</p>\n<p>页面 -&gt;应用（模块，组件树（偏展示））</p>\n<ul>\n<li>接入型 container</li>\n<li>展示型</li>\n<li>交互型 比如各类加强版的表单组件，通常强调复用</li>\n<li>功能型 比如 <code>&lt;router-view&gt;</code>，<code>&lt;transition&gt;</code>，作为一种扩展、抽象机制存在。</li>\n</ul>\n<p>view = render(state)</p>\n<ul>\n<li>命令式 (jquery)</li>\n<li>声明式</li>\n</ul>\n<h3 id=\"virtual-dom\"><a class=\"v-toc-item\" href=\"#virtual-dom\">#</a> Virtual Dom</h3>\n<h3 id=\"变化侦测和渲染机制\"><a class=\"v-toc-item\" href=\"#变化侦测和渲染机制\">#</a> 变化侦测和渲染机制</h3>\n<p>push pull</p>\n<p>vue 混合式</p>\n<h3 id=\"状态管理\"><a class=\"v-toc-item\" href=\"#状态管理\">#</a> 状态管理</h3>\n<h2 id=\"0xee-todo-to-list\"><a class=\"v-toc-item\" href=\"#0xee-todo-to-list\">#</a> 0xEE TODO TO LIST</h2>\n<hr>\n<p>ChangeLog:</p>\n<ul>\n<li><strong>2017-09-15</strong> 初始化本文</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x01-essential\">0x01 Essential</a>\n<ul>\n<li><a href=\"#11-the-vue-instance\">1.1 The Vue Instance</a>\n<ul>\n<li><a href=\"#111-%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E5%92%8C%E5%B1%9E%E6%80%A7\">1.1.1 内置方法和属性</a>\n<ul>\n<li><a href=\"#instance-properties\">Instance Properties</a></li>\n<li><a href=\"#instance-methods-data\">Instance Methods / Data</a></li>\n<li><a href=\"#instance-methods-events\">Instance Methods / Events</a></li>\n<li><a href=\"#instance-methods-lifecycle\">Instance Methods / Lifecycle</a></li>\n</ul>\n</li>\n<li><a href=\"#112-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">1.1.2 生命周期</a></li>\n</ul>\n</li>\n<li><a href=\"#12-template-syntax\">1.2 Template Syntax</a>\n<ul>\n<li><a href=\"#121-%E6%8F%92%E5%80%BC\">1.2.1 插值</a></li>\n<li><a href=\"#122-%E6%8C%87%E4%BB%A4\">1.2.2 指令</a></li>\n</ul>\n</li>\n<li><a href=\"#13-computed-properties-and-watchers\">1.3 Computed Properties and Watchers</a></li>\n<li><a href=\"#14-class-and-style-bindings\">1.4 Class and Style Bindings</a>\n<ul>\n<li><a href=\"#141-object-%E8%AF%AD%E6%B3%95\">1.4.1 Object 语法</a></li>\n<li><a href=\"#142-array-%E8%AF%AD%E6%B3%95\">1.4.2 Array 语法</a></li>\n<li><a href=\"#143-%E7%BB%84%E4%BB%B6\">1.4.3 组件</a></li>\n</ul>\n</li>\n<li><a href=\"#15-conditional-rendering\">1.5 Conditional Rendering</a></li>\n<li><a href=\"#16-list-rendering\">1.6 List Rendering</a>\n<ul>\n<li><a href=\"#161-array-%E4%BF%AE%E6%94%B9%E6%A3%80%E6%B5%8B\">1.6.1 ARRAY 修改检测</a>\n<ul>\n<li><a href=\"#%E6%96%B9%E6%B3%95\">方法</a></li>\n<li><a href=\"#%E5%8F%96%E4%BB%A3%E6%95%B0%E7%BB%84\">取代数组</a></li>\n<li><a href=\"#%E8%AD%A6%E5%91%8A\">警告</a></li>\n</ul>\n</li>\n<li><a href=\"#162-object-%E4%BF%AE%E6%94%B9%E6%A3%80%E6%B5%8B%E8%AD%A6%E5%91%8A\">1.6.2 Object 修改检测警告</a></li>\n</ul>\n</li>\n<li><a href=\"#17-event-handling\">1.7 Event Handling</a>\n<ul>\n<li><a href=\"#171-listening-to-events\">1.7.1 Listening to Events</a></li>\n<li><a href=\"#172-method-event-handlers\">1.7.2 Method Event Handlers</a></li>\n<li><a href=\"#173-methods-in-inline-handlers\">1.7.3 Methods in Inline Handlers</a></li>\n<li><a href=\"#174-event-modifiers\">1.7.4 Event Modifiers</a></li>\n<li><a href=\"#175-key-modifiers\">1.7.5 Key Modifiers</a></li>\n<li><a href=\"#176-system-modifier-keys\">1.7.6 System Modifier Keys</a></li>\n<li><a href=\"#177-why-listeners-in-html\">1.7.7 Why Listeners in HTML?</a></li>\n</ul>\n</li>\n<li><a href=\"#18-form-input-bindings\">1.8 Form Input Bindings</a></li>\n<li><a href=\"#19-components\">1.9 Components</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-transitions-animation\">0x02 Transitions &amp; Animation</a>\n<ul>\n<li><a href=\"#21-event-handling\">2.1 Event Handling</a></li>\n<li><a href=\"#22-event-handling\">2.2 Event Handling</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-reusability-composition\">0x03 Reusability &amp; Composition</a></li>\n<li><a href=\"#0x04-tooling\">0x04 Tooling</a></li>\n<li><a href=\"#0x05-scaling-up\">0x05 Scaling Up</a></li>\n<li><a href=\"#0x06-internals\">0x06 Internals</a></li>\n<li><a href=\"#0x07-vue-%E7%95%AA%E5%A4%96%E7%AF%87\">0x07 Vue 番外篇</a>\n<ul>\n<li><a href=\"#%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E5%BB%BA%E8%AE%AE\">阅读源码的建议</a></li>\n<li><a href=\"#%E6%A1%86%E6%9E%B6%E8%83%8C%E5%90%8E%E7%9A%84%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E5%8E%9F%E7%90%86\">框架背后的要解决的原理</a></li>\n<li><a href=\"#virtual-dom\">Virtual Dom</a></li>\n<li><a href=\"#%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B%E5%92%8C%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6\">变化侦测和渲染机制</a></li>\n<li><a href=\"#%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86\">状态管理</a></li>\n</ul>\n</li>\n<li><a href=\"#0xee-todo-to-list\">0xEE TODO TO LIST</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}