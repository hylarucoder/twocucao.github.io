{"pageProps":{"post":{"tags":["Shell"],"path":"20150418_ShellCheatSheet.md","title":"Shell CheatSheet","slug":"Shell CheatSheet","date":"2017-12-01","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h1 id=\"shell-cheatsheet\"><a class=\"v-toc-item\" href=\"#shell-cheatsheet\">#</a> Shell CheatSheet</h1>\n<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Shell 单行命令。</p>\n<h2 id=\"0x01-快捷键\"><a class=\"v-toc-item\" href=\"#0x01-快捷键\">#</a> 0x01 快捷键</h2>\n<pre><code>- 「c-c」 : 中断当前命令。\n- 「c-z」 : 当前程序暂停，bg 切换后台运行，使用 fg 可以调回\n- 「tab」 : 补全\n- 「tabx2」 : 补全提示\n- 「c-r」 : 搜索命令行\n- 「c-w」 : 同 vim\n- 「c-u」 : 删除整行\n- 「a-b/a-f」 : 移动一个词\n- 「c-a」 : 移动至行首\n- 「c-e」 : 移动至行尾\n- 「c-k」 : 删除光标到行尾\n- 「c-l」 : 清屏\n- 「c-x,c-e」 : 用默认编辑器编辑当前命令（这样就可以把其他文本移动扔掉了。)\n</code></pre>\n<h2 id=\"0x02-帮助\"><a class=\"v-toc-item\" href=\"#0x02-帮助\">#</a> 0x02 帮助</h2>\n<p>查找帮助</p>\n<pre><code>- man\n- whatis / which / where\n- tldr\n</code></pre>\n<p>值得一提的就是 tldr, 直接可以在上面查看命令的常规使用。实在是碉堡了。</p>\n<pre><code>&gt; tldr ssh\nLocal data is older than two weeks, use --update to update it.\n\nssh\n\nSecure Shell is a protocol used to securely log onto remote systems.\nIt can be used for logging or executing commands on a remote server.\n\n- Connect to a remote server:\n    ssh username@remote_host\n\n- Connect to a remote server with a specific identity (private key):\n    ssh -i path/to/key_file username@remote_host\n\n- Connect to a remote server using a specific port:\n    ssh username@remote_host -p 2222\n\n- Run a command on a remote server:\n    ssh remote_host command -with -flags\n\n- SSH tunneling: Dynamic port forwarding (SOCKS proxy on localhost:9999):\n    ssh -D 9999 -C username@remote_host\n\n- SSH tunneling: Forward a specific port (localhost:9999 to slashdot.org:80) along with disabling pseudo-[t]ty allocation and executio[n] of remote commands:\n    ssh -L 9999:slashdot.org:80 -N -T username@remote_host\n\n- SSH jumping: Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters):\n    ssh -J username@jump_host username@remote_host\n\n- Agent forwarding: Forward the authentication information to the remote machine (see `man ssh_config` for available options):\n    ssh -A username@remote_host\n</code></pre>\n<h2 id=\"0x03-macos-用户\"><a class=\"v-toc-item\" href=\"#0x03-macos-用户\">#</a> 0x03 macOS 用户</h2>\n<p>如果你和我一样使用的是 mac 系统</p>\n<p>可以考虑将部分 FreeBSD 的工具换成 gnu</p>\n<pre><code>brew install autoconf bash binutils coreutils diffutils ed findutils flex gawk \\\n    gnu-indent gnu-sed gnu-tar gnu-which gpatch grep gzip less m4 make nano \\\n    screen watch wdiff wget\n</code></pre>\n<p>bashrc/zshrc 加上如下命令</p>\n<pre><code>if type brew &amp;&gt;/dev/null; then\n  HOMEBREW_PREFIX=$(brew --prefix)\n  # gnubin; gnuman\n  for d in ${HOMEBREW_PREFIX}/opt/*/libexec/gnubin; do export PATH=$d:$PATH; done\n  # I actually like that man grep gives the BSD grep man page\n  #for d in ${HOMEBREW_PREFIX}/opt/*/libexec/gnuman; do export MANPATH=$d:$MANPATH; done\nfi\n</code></pre>\n<p>经过上面一步，则基本上 find sed tar which 这些命令使用的 gnu 版本 (linux 版本）, 而非系统自带的 unix 版本了。</p>\n<h2 id=\"0x04-基本命令-old-fashion\"><a class=\"v-toc-item\" href=\"#0x04-基本命令-old-fashion\">#</a> 0x04 基本命令 - old fashion</h2>\n<pre><code class=\"language-bash\">文件 <span class=\"token operator\">/</span> 目录 mkdir <span class=\"token operator\">/</span> rm\n查找文件 cd <span class=\"token operator\">/</span> cp <span class=\"token operator\">/</span> pwd <span class=\"token operator\">/</span> find\n查看文件 more <span class=\"token operator\">/</span> less <span class=\"token operator\">/</span> tail <span class=\"token operator\">/</span> diff <span class=\"token operator\">/</span> cat <span class=\"token operator\">/</span> grep\n用户权限 chown <span class=\"token operator\">/</span> chmod\n复制 <span class=\"token operator\">/</span> 粘贴 <span class=\"token operator\">/</span> 同步 <span class=\"token operator\">/</span> 链接 cp <span class=\"token operator\">/</span> rsync <span class=\"token operator\">/</span> ln\n挂载 mount\n</code></pre>\n<pre><code class=\"language-bash\"># 创建和删除\nmkdir\nmkdir <span class=\"token operator\">-</span>p a<span class=\"token operator\">/</span>b<span class=\"token operator\">/</span>c\n\nrm\nrm <span class=\"token operator\">-</span>rf dir<span class=\"token operator\">/</span>file<span class=\"token operator\">/</span>regex\nrm <span class=\"token operator\">*</span>log# 等价 find <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span> <span class=\"token operator\">-</span>name <span class=\"token string\">\"*log\"</span> <span class=\"token operator\">-</span>exec rm <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmv\ncp\ncp <span class=\"token operator\">-</span>r source_dir dest_dir\nrsync <span class=\"token operator\">--</span>progress <span class=\"token operator\">-</span>a source_dir dest_dir\nrsync <span class=\"token operator\">-</span>vr <span class=\"token operator\">--</span>progress you_folder_here twocucao@<span class=\"token number\">192.168</span><span class=\"token number\">.2</span><span class=\"token number\">.151</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>twocucao<span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span># 目录切换 ls <span class=\"token operator\">-</span>lrt\nfind <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span> <span class=\"token operator\">-</span>name <span class=\"token string\">\"*.o\"</span> <span class=\"token operator\">-</span>exec rm <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \\<span class=\"token punctuation\">;</span>\nmore\nhead\ntail\ntail <span class=\"token operator\">-</span>f filename\ndiff\nchown\nchmod\nchown <span class=\"token operator\">-</span><span class=\"token constant\">R</span> tuxapp source<span class=\"token operator\">/</span>chmod a<span class=\"token operator\">+</span>x myscript\nln cc ccA\nln <span class=\"token operator\">-</span>s cc ccTo\ncat <span class=\"token operator\">-</span>v record<span class=\"token punctuation\">.</span>log <span class=\"token operator\">|</span> grep <span class=\"token constant\">AAA</span> <span class=\"token operator\">|</span> grep <span class=\"token operator\">-</span>v <span class=\"token constant\">BBB</span> <span class=\"token operator\">|</span> wc <span class=\"token operator\">-</span>l\nfind <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span> <span class=\"token operator\">|</span> wc <span class=\"token operator\">-</span>l\n</code></pre>\n<pre><code class=\"language-bash\">查找文件之 <span class=\"token function\">find</span> <span class=\"token punctuation\">(</span>gfind<span class=\"token punctuation\">)</span>\n## Find\nfind <span class=\"token punctuation\">.</span> \\<span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span>name <span class=\"token string\">\"*.txt\"</span> <span class=\"token operator\">-</span>o <span class=\"token operator\">-</span>name <span class=\"token string\">\"*.pdf\"</span> \\<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>print\n# 正则方式查找 txt 和 pdf\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>regex  <span class=\"token string\">\".*\\(\\.txt|\\.pdf\\)$\"</span>\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">!</span> <span class=\"token operator\">-</span>name <span class=\"token string\">\"*.txt\"</span> <span class=\"token operator\">-</span>print\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>maxdepth <span class=\"token number\">1</span> <span class=\"token operator\">-</span>type f\n# 定制搜索\n## 按照类型搜索\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type f <span class=\"token operator\">-</span>print  #只列出所有文件\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type d <span class=\"token operator\">-</span>print  #只列出所有目录\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type l <span class=\"token operator\">-</span>print  #只列出所有符号链接\n## 按照时间搜索\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>atime <span class=\"token number\">7</span> <span class=\"token operator\">-</span>type f <span class=\"token operator\">-</span>print\n# 最近第 <span class=\"token number\">7</span> 天被访问过的所有文件：\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>atime <span class=\"token operator\">-</span><span class=\"token number\">7</span> <span class=\"token operator\">-</span>type f <span class=\"token operator\">-</span>print\n# 最近 <span class=\"token number\">7</span> 天内被访问过的所有文件：\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>atime <span class=\"token operator\">+</span><span class=\"token number\">7</span> type f <span class=\"token operator\">-</span>print\n# 查询 <span class=\"token number\">7</span> 天前被访问过的所有文件：\n# w<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span><span class=\"token constant\">M</span><span class=\"token punctuation\">,</span>Gfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type f <span class=\"token operator\">-</span>size <span class=\"token operator\">+</span><span class=\"token number\">2</span>kfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type f <span class=\"token operator\">-</span>perm <span class=\"token number\">644</span> <span class=\"token operator\">-</span>print \n# 找具有可执行权限的所有文件 find <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type f <span class=\"token operator\">-</span>user weber <span class=\"token operator\">-</span>print\n# 找用户 weber 所拥有的文件\n# 后续动作\n## 删除 find <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type f <span class=\"token operator\">-</span>name <span class=\"token string\">\"*.swp\"</span> <span class=\"token operator\">-</span><span class=\"token keyword\">delete</span>\n## 执行动作\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type f <span class=\"token operator\">-</span>name <span class=\"token string\">\"*.swp\"</span> <span class=\"token operator\">|</span> xargs rmfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type f <span class=\"token operator\">-</span>user root <span class=\"token operator\">-</span>exec chown weber <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \\<span class=\"token punctuation\">;</span>\n## eg<span class=\"token operator\">:</span> copy 到另一个目录\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type f <span class=\"token operator\">-</span>mtime <span class=\"token operator\">+</span><span class=\"token number\">10</span> <span class=\"token operator\">-</span>name <span class=\"token string\">\"*.txt\"</span> <span class=\"token operator\">-</span>exec cp <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token constant\">OLD</span> \\<span class=\"token punctuation\">;</span>\n##  <span class=\"token operator\">-</span>exec <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>commands<span class=\"token punctuation\">.</span>sh <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \\<span class=\"token punctuation\">;</span>\n# <span class=\"token number\">2.</span> 删除内部为空的文件夹# 递归删除 a<span class=\"token operator\">/</span>b<span class=\"token operator\">/</span>c\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type d <span class=\"token operator\">-</span>empty <span class=\"token operator\">-</span><span class=\"token keyword\">delete</span>\n# 使用<span class=\"token punctuation\">.</span>gitkeep 进行填充\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type d <span class=\"token operator\">-</span>empty <span class=\"token operator\">-</span>exec touch <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>gitkeep \\<span class=\"token punctuation\">;</span>\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type d <span class=\"token operator\">-</span>empty <span class=\"token operator\">-</span>not <span class=\"token operator\">-</span>path <span class=\"token string\">'*/\\.*'</span> <span class=\"token operator\">-</span>exec touch <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>gitkeep \\<span class=\"token punctuation\">;</span>\n# 不初始化<span class=\"token punctuation\">.</span>git<span class=\"token operator\">/</span>\n# <span class=\"token number\">3.</span> 寻找 <span class=\"token constant\">TOP</span> <span class=\"token number\">10</span>\nfind <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span>type f <span class=\"token operator\">-</span>printf <span class=\"token string\">'%s %p\\n'</span><span class=\"token operator\">|</span> sort <span class=\"token operator\">-</span>nr <span class=\"token operator\">|</span> head <span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token operator\">|</span> awk <span class=\"token string\">'{$1/=1024*1024;printf \"%.2fMB - %s\\n\",$1,$2}'</span>\n# <span class=\"token number\">4.</span> 寻找文件夹 <span class=\"token constant\">TOP</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span> placeholder token that will be replaced <span class=\"token keyword\">with</span> the path <span class=\"token keyword\">of</span> the search <span class=\"token function\">result</span> <span class=\"token punctuation\">(</span>documents<span class=\"token operator\">/</span>images<span class=\"token operator\">/</span>party<span class=\"token punctuation\">.</span>jpg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Like <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> but without the file <span class=\"token function\">extension</span> <span class=\"token punctuation\">(</span>documents<span class=\"token operator\">/</span>images<span class=\"token operator\">/</span>party<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span><span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span> placeholder that will be replaced by the basename <span class=\"token keyword\">of</span> the search <span class=\"token function\">result</span> <span class=\"token punctuation\">(</span>party<span class=\"token punctuation\">.</span>jpg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//}: Uses the parent of the discovered path (documents/images).{/.}: Uses the basename, with the extension removed (party).# Convert all jpg files to png files:fd -e jpg -x convert {} {.}.png# Unpack all zip files (if no placeholder is given, the path is appended):fd -e zip -x unzip# Convert all flac files into opus files:fd -e flac -x ffmpeg -i {} -c:a libopus {.}.opus# Count the number of lines in Rust files (the command template can be terminated with ';'):fd -x wc -l \\; -e rs</span>\n</code></pre>\n<pre><code class=\"language-bash\"># 压缩 <span class=\"token operator\">/</span> 解压缩\n<span class=\"token number\">7</span>z <span class=\"token operator\">/</span> <span class=\"token number\">7</span>za <span class=\"token operator\">/</span><span class=\"token number\">7</span>zr\ntar <span class=\"token operator\">/</span> gzip <span class=\"token operator\">/</span> unzip<span class=\"token operator\">/</span> unrar\n# 打包\ntar <span class=\"token operator\">-</span>cvf\n# 解包\ntar <span class=\"token operator\">-</span>xvf\n# 压缩\ngzip\n# 解压缩\ngunzip\nbzip\ntar 是将多个文件放在一起变成一个 tar <span class=\"token function\">文件</span> <span class=\"token punctuation\">(</span>Tape Archiver<span class=\"token punctuation\">)</span>\ngzip 是讲一个文件变成一个压缩文件\n则 foo<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz 指的是 先把文件转为 tar 文件，然后 gzip 之\n</code></pre>\n<h3 id=\"文本篇\"><a class=\"v-toc-item\" href=\"#文本篇\">#</a> 文本篇</h3>\n<pre><code class=\"language-bash\">grep match_pattern file\n\n\t<span class=\"token operator\">-</span>o 只输出匹配的文本行\n\t<span class=\"token operator\">-</span>v 只输出没有匹配的文本行\n\t<span class=\"token operator\">-</span>c 统计文件中包含文本的次数\n\t<span class=\"token operator\">-</span>n 打印匹配行号\n\t<span class=\"token operator\">-</span>i 搜索时符合大小写\n\t<span class=\"token operator\">-</span>l 之打印文件名\n\ngrep <span class=\"token string\">\"class\"</span> <span class=\"token punctuation\">.</span> <span class=\"token operator\">-</span><span class=\"token constant\">R</span> <span class=\"token operator\">-</span>n # 多级目录中对文本递归搜索\ngrep <span class=\"token operator\">-</span>e <span class=\"token string\">\"class\"</span> <span class=\"token operator\">-</span>e <span class=\"token string\">\"vitural\"</span> file # 匹配多个模式\ngrep <span class=\"token string\">\"test\"</span> file<span class=\"token operator\">*</span> <span class=\"token operator\">-</span>lZ<span class=\"token operator\">|</span> xargs <span class=\"token operator\">-</span><span class=\"token number\">0</span> rm # grep 输出以、<span class=\"token number\">0</span> 作为结尾符的文件名：（<span class=\"token operator\">-</span>z）<span class=\"token operator\">-</span>d 定义定界符<span class=\"token operator\">-</span>n 输出为多行<span class=\"token operator\">-</span>l <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> 指定替换字符串 cat file<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">|</span> xargs # 打印多行 cat file<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">|</span> xargs <span class=\"token operator\">-</span>n <span class=\"token number\">3</span> # 分割多行\ncat file<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">|</span> xargs <span class=\"token operator\">-</span><span class=\"token constant\">I</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>command<span class=\"token punctuation\">.</span>sh <span class=\"token operator\">-</span>p <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">0</span> 指定、<span class=\"token number\">0</span> 为输入定界符\nfind source_dir<span class=\"token operator\">/</span> <span class=\"token operator\">-</span>type f <span class=\"token operator\">-</span>name <span class=\"token string\">\"*.cpp\"</span> <span class=\"token operator\">-</span>print0 <span class=\"token operator\">|</span>xargs <span class=\"token operator\">-</span><span class=\"token number\">0</span> wc <span class=\"token operator\">-</span>l\n\n# sort 排序\n\n<span class=\"token operator\">-</span>n 按数字进行排序\n<span class=\"token operator\">-</span>d 按字典序进行排序\n<span class=\"token operator\">-</span>r 逆序排序\n<span class=\"token operator\">-</span>k <span class=\"token constant\">N</span> 指定按照第 <span class=\"token constant\">N</span> 列排序\nsort <span class=\"token operator\">-</span>nrk <span class=\"token number\">1</span> data<span class=\"token punctuation\">.</span>txtsort <span class=\"token operator\">-</span>bd data <span class=\"token comment\">// 忽略像空格之类的前导空白字符</span>\nsort unsort<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">|</span> uniq <span class=\"token operator\">></span> sorted<span class=\"token punctuation\">.</span>txt # 消除重复行\nsort unsort<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">|</span> uniq <span class=\"token operator\">-</span>c # 统计各行在文件中出现的次数\nsort unsort<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">|</span> uniq <span class=\"token operator\">-</span>d # 找出重复行# 用 tr 进行转换\n\n# cut 按列切分文本 cut <span class=\"token operator\">-</span>f2<span class=\"token punctuation\">,</span><span class=\"token number\">4</span> filename\n# 截取文件的第 <span class=\"token number\">2</span> 列和第 <span class=\"token number\">4</span> 列 cut <span class=\"token operator\">-</span>f3 <span class=\"token operator\">--</span>complement filename #去文件除第 <span class=\"token number\">3</span> 列的所有列 cut <span class=\"token operator\">-</span>f2 <span class=\"token operator\">-</span>d<span class=\"token string\">\";\"</span> filename <span class=\"token operator\">-</span>d #指定定界符 cut <span class=\"token operator\">-</span>c1<span class=\"token operator\">-</span><span class=\"token number\">5</span> file\n# 打印第一到 <span class=\"token number\">5</span> 个字符 cut <span class=\"token operator\">-</span>c<span class=\"token operator\">-</span><span class=\"token number\">2</span> file \n# 打印前 <span class=\"token number\">2</span> 个字符# paste 按列拼接文本 paste file1 file2 <span class=\"token operator\">-</span>d <span class=\"token string\">\",\"</span>\n\n# wc 统计行和字符的工具 wc <span class=\"token operator\">-</span>l file # 统计行数 wc <span class=\"token operator\">-</span>w file # 统计单词数 wc <span class=\"token operator\">-</span>c file # 统计字符数\n\n# sed 文本替换利器 sed <span class=\"token string\">'s/text/replace_text/'</span> file \n# 首处替换 sed <span class=\"token string\">'s/text/replace_text/g'</span> file \n# 全局替换 sed <span class=\"token operator\">-</span>i <span class=\"token string\">'s/text/repalce_text/g'</span> file # 替换文件 sed <span class=\"token string\">'/^$/d'</span> file \n# 移除空白行 sed <span class=\"token operator\">-</span>i <span class=\"token string\">'s/twocucao/micheal/g'</span> xx<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">.</span>sqlsed <span class=\"token operator\">-</span>n <span class=\"token number\">634428</span><span class=\"token punctuation\">,</span><span class=\"token number\">887831</span>p insert_doc_ids_new<span class=\"token punctuation\">.</span>sql <span class=\"token operator\">></span> uninserted_sql<span class=\"token punctuation\">.</span>sql\n</code></pre>\n<h3 id=\"用户篇\"><a class=\"v-toc-item\" href=\"#用户篇\">#</a> 用户篇</h3>\n<pre><code class=\"language-bash\"># 添加 yaweb 为 sudo 用户\nusermod <span class=\"token operator\">-</span>aG sudo yaweb\n所有用户和用户组信息保存在：<span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>passwd <span class=\"token punctuation\">,</span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>group\n用户\nuseradd <span class=\"token operator\">-</span>m yaweb # 创建相关账号，和用户目录 <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>yawebpasswd yawebuserdel <span class=\"token operator\">-</span>r yaweb # 删除\n用户组\nusermod <span class=\"token operator\">-</span>g groupName username # 变更组 usermod <span class=\"token operator\">-</span><span class=\"token constant\">G</span> groupName username # 添加到组 usermod <span class=\"token operator\">-</span>aG sudo yaweb # 添加 yaweb 到 sudo 组\n用户权限\nchown <span class=\"token function\">userMark</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token punctuation\">)</span>PermissionsMark\nuserMark 取值： <span class=\"token operator\">-</span> u：用户 <span class=\"token operator\">-</span> g：组 <span class=\"token operator\">-</span> o：其它用户 <span class=\"token operator\">-</span> a：所有用户\nPermissionsMark 取值： <span class=\"token operator\">-</span> r<span class=\"token operator\">:</span> 读 <span class=\"token operator\">-</span> w：写 <span class=\"token operator\">-</span> x：执行\nchmod a<span class=\"token operator\">+</span>x main         对所有用户给文件 main 增加可执行权限 chmod g<span class=\"token operator\">+</span>w blogs        对组用户给文件 blogs 增加可写权限 chown <span class=\"token operator\">-</span><span class=\"token constant\">R</span> weber server<span class=\"token operator\">/</span>\n远程登录\nssh <span class=\"token operator\">-</span>l root <span class=\"token number\">192.168</span><span class=\"token number\">.2</span><span class=\"token number\">.253</span>\nssh<span class=\"token operator\">-</span>copy<span class=\"token operator\">-</span>id root@<span class=\"token number\">192.168</span><span class=\"token number\">.2</span><span class=\"token number\">.253</span>\n</code></pre>\n<h3 id=\"网络篇\"><a class=\"v-toc-item\" href=\"#网络篇\">#</a> 网络篇</h3>\n<pre><code class=\"language-bash\"><span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hostname\n<span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hosts\nnetstat <span class=\"token operator\">-</span>a\n</code></pre>\n<h3 id=\"磁盘篇\"><a class=\"v-toc-item\" href=\"#磁盘篇\">#</a> 磁盘篇</h3>\n<pre><code class=\"language-bash\"># 查看当前目录大小\ndu <span class=\"token operator\">-</span>sh\ndu <span class=\"token operator\">-</span>sh <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ls</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">|</span> sort\n# 查看当前目录的下一级文件和子目录的磁盘容量\ndu <span class=\"token operator\">-</span>lh <span class=\"token operator\">--</span>max<span class=\"token operator\">-</span>depth<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n</code></pre>\n<h3 id=\"进程管理\"><a class=\"v-toc-item\" href=\"#进程管理\">#</a> 进程管理</h3>\n<pre><code class=\"language-bash\">ps <span class=\"token operator\">-</span>ef <span class=\"token operator\">|</span> grep twocucao ps <span class=\"token operator\">-</span>lu twocucao # 完整显示\nps <span class=\"token operator\">-</span>ajx\nps au <span class=\"token operator\">|</span> grep phantomjs <span class=\"token operator\">|</span> awk <span class=\"token string\">'{ print $2 }'</span> <span class=\"token operator\">|</span> xargs kill <span class=\"token operator\">-</span><span class=\"token number\">9</span> \ntop htop \nlsof <span class=\"token operator\">-</span>i<span class=\"token operator\">:</span><span class=\"token number\">3306</span>\nlsof <span class=\"token operator\">-</span>u twocucao \nkill <span class=\"token operator\">-</span><span class=\"token number\">9</span> pidnum \n# 将用户 colin115 下的所有进程名以 av_开头的进程终止\nps <span class=\"token operator\">-</span>u colin115 <span class=\"token operator\">|</span>  awk <span class=\"token string\">'/av_/ {print \"kill -9 \" $1}'</span> <span class=\"token operator\">|</span> sh\n# 将用户 colin115 下所有进程名中包含 <span class=\"token constant\">HOST</span> 的进程终止：\nps <span class=\"token operator\">-</span>fe <span class=\"token operator\">|</span> grep colin115 <span class=\"token operator\">|</span> grep <span class=\"token constant\">HOST</span> <span class=\"token operator\">|</span> awk <span class=\"token string\">'{print $2}'</span> <span class=\"token operator\">|</span> xargs kill <span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Systemd<br>\n创建一个 Systemd 服务</p>\n<pre><code># /etc/systemd/system/gunicorn.service: \n\n[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target \n\n[Service]\nPIDFile=/run/gunicorn/pid\nUser=someuser\nGroup=someuser\nRuntimeDirectory=gunicorn\nWorkingDirectory=/home/someuser/applicationroot\nExecStart=/usr/bin/gunicorn --pid /run/gunicorn/pid  \n\\\\           --bind unix:/run/gunicorn/socket applicationname.wsgi\nExecReload=/bin/kill -s HUP $MAINPID\nExecStop=/bin/kill -s TERM $MAINPID PrivateTmp=true \n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<h3 id=\"性能监控\"><a class=\"v-toc-item\" href=\"#性能监控\">#</a> 性能监控</h3>\n<h3 id=\"内存瓶颈\"><a class=\"v-toc-item\" href=\"#内存瓶颈\">#</a> 内存瓶颈</h3>\n<pre><code>htop\nfree # 从 /proc/meminfo 读取数据\nIO 瓶颈\n# ubuntu 下 可以 mac 下不可以 iostat -d -x -k 1 1\n如果 %iowait 的值过高，表示硬盘存在 I/O 瓶颈。\n如果 %util 接近 100%，说明产生的 I/O 请求太多，I/O 系统已经满负荷，该磁盘可能存在瓶颈。\n如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；\n如果 await 远大于 svctm，说明 I/O 队列太长，io 响应太慢，则需要进行必要优化。\n如果 avgqu-sz 比较大，也表示有大量 io 在等待。\n</code></pre>\n<h2 id=\"0x06-资料推荐\"><a class=\"v-toc-item\" href=\"#0x06-资料推荐\">#</a> 0x06 资料推荐</h2>\n<ul>\n<li>一个关于 Linux 命令的各种奇技的网站 <a href=\"http://www.commandlinefu.com/commands/browse\">http://www.commandlinefu.com/commands/browse</a></li>\n<li>Linux 工具快速教程 <a href=\"http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html\">http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html</a></li>\n<li>一个 Awesome List, <a href=\"https://github.com/jaywcjlove/linux-command\">https://github.com/jaywcjlove/linux-command</a></li>\n<li>命令行的艺术 <a href=\"https://github.com/jlevy/the-art-of-command-line\">https://github.com/jlevy/the-art-of-command-line</a></li>\n<li>man command 需要好好研读，特别是 man bash 至少要研读几遍</li>\n</ul>\n<hr>\n<p>ChangeLog:</p>\n<ul>\n<li><strong>2015-04-18</strong> 初始化本文</li>\n<li><strong>2018-08-28</strong> 重修文字</li>\n<li><strong>2020-10-24</strong> 重修文字</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li><a href=\"#shell-cheatsheet\">Shell CheatSheet</a>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-%E5%BF%AB%E6%8D%B7%E9%94%AE\">0x01 快捷键</a></li>\n<li><a href=\"#0x02-%E5%B8%AE%E5%8A%A9\">0x02 帮助</a></li>\n<li><a href=\"#0x03-macos-%E7%94%A8%E6%88%B7\">0x03 macOS 用户</a></li>\n<li><a href=\"#0x04-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4-old-fashion\">0x04 基本命令 - old fashion</a>\n<ul>\n<li><a href=\"#%E6%96%87%E6%9C%AC%E7%AF%87\">文本篇</a></li>\n<li><a href=\"#%E7%94%A8%E6%88%B7%E7%AF%87\">用户篇</a></li>\n<li><a href=\"#%E7%BD%91%E7%BB%9C%E7%AF%87\">网络篇</a></li>\n<li><a href=\"#%E7%A3%81%E7%9B%98%E7%AF%87\">磁盘篇</a></li>\n<li><a href=\"#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86\">进程管理</a></li>\n<li><a href=\"#%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7\">性能监控</a></li>\n<li><a href=\"#%E5%86%85%E5%AD%98%E7%93%B6%E9%A2%88\">内存瓶颈</a></li>\n</ul>\n</li>\n<li><a href=\"#0x06-%E8%B5%84%E6%96%99%E6%8E%A8%E8%8D%90\">0x06 资料推荐</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}