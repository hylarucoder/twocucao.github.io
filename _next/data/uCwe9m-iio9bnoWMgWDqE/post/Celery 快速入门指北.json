{"pageProps":{"post":{"tags":["Celery","消息队列"],"path":"20180220_CeleryCheatSheet.md","title":"Celery 快速入门指北","slug":"Celery 快速入门指北","date":"2018-02-02","category":"Python","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>本文编写于 2018 年初，于 2019 四月进行修订，也是笔者对 Celery 的系统梳理。</p>\n<p>在我的文章如何保证 Django 项目的数据一致性中，提到了这么一个解决超卖的方案。</p>\n<ol>\n<li>在 Redis 里面直接生成 200 个订单号</li>\n<li>然后用户来一个取走一个订单号码</li>\n<li>通过 Celery 削峰 排队走异步任务</li>\n<li>最后通过数据表的 uniq 约束来防止下单超过 200 个。</li>\n</ol>\n<p><a href=\"https://zhuanlan.zhihu.com/p/57668068\">https://zhuanlan.zhihu.com/p/57668068</a></p>\n<p>有朋友和我讲，你这个方法是有问题的，走异步任务容易并发量太大，容易把数据库打爆。</p>\n<p>其实是可以的，Celery 可以对 Worker 的 Task 限流 (ratelimit)。</p>\n<h2 id=\"0x01-celery\"><a class=\"v-toc-item\" href=\"#0x01-celery\">#</a> 0x01 Celery</h2>\n<h3 id=\"为什么需要-celery\"><a class=\"v-toc-item\" href=\"#为什么需要-celery\">#</a> 为什么需要 Celery</h3>\n<p>在日常开发的时候，常常有一些『任务』需要处理。</p>\n<ol>\n<li>为了提升系统的响应速度，比如发送短信 / 发送邮箱，这类的『任务』可以走异步。</li>\n<li>为了在某个时间执行耗时操作，比如统计用户的文章 / 点赞 / 活跃度。</li>\n<li>为了削减峰值，比如秒杀系统的削峰走异步</li>\n<li>为了业务代码解耦，比如当我在知乎上更新文章，可能就会触发『推荐系统』,『文章管理系统』,『用户通知系统』</li>\n</ol>\n<p>不用 Celery 的话，其实上面的业务也是能做的。 比如 1 中，可以直接启一个线程来做。比如 2 完全可以 Crontab 做一个定时任务。</p>\n<p>那为什么要用 Celery 呢？</p>\n<ol>\n<li>把目光聚焦在 Task 的分发上面。而非线程，Deamon 之类细节的处理。</li>\n<li>方便，简单，易维护，高可用。</li>\n<li>便于监控。</li>\n<li>扩展性好。</li>\n</ol>\n<p>基本上满足了你九成的需求。</p>\n<h2 id=\"0x02-celery-快速开始\"><a class=\"v-toc-item\" href=\"#0x02-celery-快速开始\">#</a> 0x02 Celery 快速开始</h2>\n<p>本文的讨论基于 Broker 为 RabbitMQ, Result Backend 为 Redis, Django 的 Web 应用，叫做 djoo</p>\n<pre><code>sudo rabbitmqctl add_user djoo djoo\nsudo rabbitmqctl add_vhost djoo\nsudo rabbitmqctl set_user_tags djoo djoo\nsudo rabbitmqctl set_permissions -p djoo djoo &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n</code></pre>\n<pre><code>CELERY_BROKER_URL = 'amqp://djoo:djoo@localhost:5672/djoo'\n\nCELERY_RESULT_BACKEND = &quot;redis://{host}:{port}/1&quot;.format(\n    host=os.getenv(&quot;REDIS_HOST&quot;, &quot;localhost&quot;), port=os.getenv(&quot;REDIS_PORT&quot;, &quot;6379&quot;)\n)\n\n</code></pre>\n<p>泛读文档之后，需要搞清楚几个概念。</p>\n<ul>\n<li>Broker: 携带 Task 的消息中间件，是发送消息和接收消息的解决方案，比如 RabbitMQ</li>\n<li>Result Backend: Task 执行结果。</li>\n<li>Application: Celery 的实例</li>\n<li>Worker: 执行任务者</li>\n<li>Beat: 或叫做 Schedule, 一般用于执行定时任务。</li>\n<li>Task: 任务</li>\n</ul>\n<h2 id=\"0x03-celery-guide\"><a class=\"v-toc-item\" href=\"#0x03-celery-guide\">#</a> 0x03 Celery Guide</h2>\n<h3 id=\"application\"><a class=\"v-toc-item\" href=\"#application\">#</a> Application</h3>\n<p>Application 可以针对整个 Celery 实例进行配置，比如配置时区，重写 Application 里的基类</p>\n<h3 id=\"tasks\"><a class=\"v-toc-item\" href=\"#tasks\">#</a> Tasks</h3>\n<p>Task 是一个 Class, 并且可以从任意 Callable 的对象创建。</p>\n<p>Task Message 除非被 Acked, 否则不会从队列中移除。</p>\n<blockquote>\n<p>NOTE: 那什么时候算是 Acked?</p>\n</blockquote>\n<pre><code>@app.task(name=&quot;xsum&quot;)\ndef xsum(numbers):\n    return sum(numbers)\n</code></pre>\n<ul>\n<li>Tasks</li>\n<li>Calling Tasks</li>\n<li>Canvas: Designing Work-flows</li>\n<li>Workers Guide</li>\n<li>Daemonization</li>\n<li>Periodic Tasks</li>\n<li>Routing Tasks</li>\n<li>Monitoring and Management Guide</li>\n<li>Security</li>\n<li>Optimizing</li>\n<li>Debugging</li>\n<li>Concurrency</li>\n<li>Signals</li>\n<li>Testing with Celery</li>\n<li>Extensions and Bootsteps</li>\n<li>Configuration and defaults</li>\n</ul>\n<h3 id=\"application-2\"><a class=\"v-toc-item\" href=\"#application-2\">#</a> Application</h3>\n<h3 id=\"tasks-2\"><a class=\"v-toc-item\" href=\"#tasks-2\">#</a> Tasks</h3>\n<h3 id=\"calling-tasks\"><a class=\"v-toc-item\" href=\"#calling-tasks\">#</a> Calling Tasks</h3>\n<h3 id=\"canvas-designing-work-flows\"><a class=\"v-toc-item\" href=\"#canvas-designing-work-flows\">#</a> Canvas: Designing Work-flows</h3>\n<h3 id=\"workers-guide\"><a class=\"v-toc-item\" href=\"#workers-guide\">#</a> Workers Guide</h3>\n<h3 id=\"daemonization\"><a class=\"v-toc-item\" href=\"#daemonization\">#</a> Daemonization</h3>\n<h3 id=\"periodic-tasks\"><a class=\"v-toc-item\" href=\"#periodic-tasks\">#</a> Periodic Tasks</h3>\n<h3 id=\"routing-tasks\"><a class=\"v-toc-item\" href=\"#routing-tasks\">#</a> Routing Tasks</h3>\n<h3 id=\"monitoring-and-management-guide\"><a class=\"v-toc-item\" href=\"#monitoring-and-management-guide\">#</a> Monitoring and Management Guide</h3>\n<h3 id=\"security\"><a class=\"v-toc-item\" href=\"#security\">#</a> Security</h3>\n<h3 id=\"optimizing\"><a class=\"v-toc-item\" href=\"#optimizing\">#</a> Optimizing</h3>\n<h3 id=\"debugging\"><a class=\"v-toc-item\" href=\"#debugging\">#</a> Debugging</h3>\n<h3 id=\"concurrency\"><a class=\"v-toc-item\" href=\"#concurrency\">#</a> Concurrency</h3>\n<h3 id=\"signals\"><a class=\"v-toc-item\" href=\"#signals\">#</a> Signals</h3>\n<h3 id=\"testing-with-celery\"><a class=\"v-toc-item\" href=\"#testing-with-celery\">#</a> Testing with Celery</h3>\n<h3 id=\"extensions-and-bootsteps\"><a class=\"v-toc-item\" href=\"#extensions-and-bootsteps\">#</a> Extensions and Bootsteps</h3>\n<h3 id=\"configuration-and-defaults\"><a class=\"v-toc-item\" href=\"#configuration-and-defaults\">#</a> Configuration and defaults</h3>\n<h2 id=\"0x03-rabbitmq\"><a class=\"v-toc-item\" href=\"#0x03-rabbitmq\">#</a> 0x03 RabbitMQ</h2>\n<p>发布者的消息经过交换机，分发到不同的队列，最后由接收方进行处理。</p>\n<p>那么问题来了，交换机都是用来干嘛的</p>\n<ul>\n<li>Direct 单播路由：扔一条消息到一个队列中，依照 routingkey 投递</li>\n<li>Topic 多播路由：发给某几类队列（通知）.</li>\n<li>Fanout 广播路由：发给全部绑定在该路由上面的队列。</li>\n<li>Headers</li>\n</ul>\n<ol>\n<li>应用解耦。（平台无关，语言无关）</li>\n</ol>\n<p>比如说，但项目足够大的时候，更新一个活动，可能需要更新用户的一些状态，可能要更新一波统计数据，可能要记录一批日志。这个时候原来的代码可能这么写：</p>\n<pre><code class=\"language-bash\"><span class=\"token function\">update_activity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">update_user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">update_user_cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">update_stats</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">record_user_log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>现在代码就可能这么写：</p>\n<pre><code>send_task_update_activity()\nsend_task_update_user()\nsend_task_update_user_cache()\nsend_task_update_stats()\nsend_task_record_user_log()\n</code></pre>\n<ol start=\"2\">\n<li>异步通信。（减轻请求峰值）</li>\n</ol>\n<p>原本一个 webapp 不做异步的话，也能搞定，但做了异步之后，可以大幅度提升吞吐量和响应时间。</p>\n<ol start=\"3\">\n<li>数据持久化。（不丢失消息）</li>\n<li>送达保证。(ack late)</li>\n</ol>\n<h3 id=\"简单步骤\"><a class=\"v-toc-item\" href=\"#简单步骤\">#</a> 简单步骤</h3>\n<ol>\n<li>定义 app, 指定 broker 和 backend</li>\n<li>定义 tasks</li>\n<li>指定 worker</li>\n<li>调用 Task , 调用后返回 AsyncResult 实例，</li>\n</ol>\n<pre><code class=\"language-python\">add<span class=\"token punctuation\">.</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">.</span><span class=\"token function\">apply_async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">.</span><span class=\"token function\">apply_async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> queue<span class=\"token operator\">=</span><span class=\"token string\">'lopri'</span><span class=\"token punctuation\">,</span> countdown<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">.</span><span class=\"token function\">signature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> countdown<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nres <span class=\"token operator\">=</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h4 id=\"groups\"><a class=\"v-toc-item\" href=\"#groups\">#</a> Groups</h4>\n<pre><code># 并行\ngroup(add.s(i, i) for i in xrange(10))().get()\n# [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n# partial group\ng = group(add.s(i) for i in xrange(10))\ng(10).get()\n</code></pre>\n<h4 id=\"chains\"><a class=\"v-toc-item\" href=\"#chains\">#</a> Chains</h4>\n<pre><code>chain(add.s(4, 4) | mul.s(8))().get()\n(add.s(4, 4) | mul.s(8))().get()\n# partial chain\ng = chain(add.s(4) | mul.s(8))\ng(4).get()\n</code></pre>\n<h4 id=\"chords\"><a class=\"v-toc-item\" href=\"#chords\">#</a> Chords</h4>\n<pre><code class=\"language-python\"><span class=\"token function\">chord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">.</span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">xrange</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> xsum<span class=\"token punctuation\">.</span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">.</span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">xrange</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> xsum<span class=\"token punctuation\">.</span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n# eg <span class=\"token operator\">:</span> upload_document<span class=\"token punctuation\">.</span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token function\">group</span><span class=\"token punctuation\">(</span>apply_filter<span class=\"token punctuation\">.</span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> filter <span class=\"token keyword\">in</span> filters<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"0x07-踩坑集\"><a class=\"v-toc-item\" href=\"#0x07-踩坑集\">#</a> 0x07 踩坑集</h2>\n<ul>\n<li>序列问题</li>\n</ul>\n<h2 id=\"0xee-参考链接\"><a class=\"v-toc-item\" href=\"#0xee-参考链接\">#</a> 0xEE 参考链接</h2>\n<hr>\n<p>ChangeLog:</p>\n<ul>\n<li><strong>2018-02-20</strong> 初始化</li>\n<li><strong>2019-04-04</strong> 重修文字</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-celery\">0x01 Celery</a>\n<ul>\n<li><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81-celery\">为什么需要 Celery</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-celery-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\">0x02 Celery 快速开始</a></li>\n<li><a href=\"#0x03-celery-guide\">0x03 Celery Guide</a>\n<ul>\n<li><a href=\"#application\">Application</a></li>\n<li><a href=\"#tasks\">Tasks</a></li>\n<li><a href=\"#application-2\">Application</a></li>\n<li><a href=\"#tasks-2\">Tasks</a></li>\n<li><a href=\"#calling-tasks\">Calling Tasks</a></li>\n<li><a href=\"#canvas-designing-work-flows\">Canvas: Designing Work-flows</a></li>\n<li><a href=\"#workers-guide\">Workers Guide</a></li>\n<li><a href=\"#daemonization\">Daemonization</a></li>\n<li><a href=\"#periodic-tasks\">Periodic Tasks</a></li>\n<li><a href=\"#routing-tasks\">Routing Tasks</a></li>\n<li><a href=\"#monitoring-and-management-guide\">Monitoring and Management Guide</a></li>\n<li><a href=\"#security\">Security</a></li>\n<li><a href=\"#optimizing\">Optimizing</a></li>\n<li><a href=\"#debugging\">Debugging</a></li>\n<li><a href=\"#concurrency\">Concurrency</a></li>\n<li><a href=\"#signals\">Signals</a></li>\n<li><a href=\"#testing-with-celery\">Testing with Celery</a></li>\n<li><a href=\"#extensions-and-bootsteps\">Extensions and Bootsteps</a></li>\n<li><a href=\"#configuration-and-defaults\">Configuration and defaults</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-rabbitmq\">0x03 RabbitMQ</a>\n<ul>\n<li><a href=\"#%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4\">简单步骤</a>\n<ul>\n<li><a href=\"#groups\">Groups</a></li>\n<li><a href=\"#chains\">Chains</a></li>\n<li><a href=\"#chords\">Chords</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#0x07-%E8%B8%A9%E5%9D%91%E9%9B%86\">0x07 踩坑集</a></li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">0xEE 参考链接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}