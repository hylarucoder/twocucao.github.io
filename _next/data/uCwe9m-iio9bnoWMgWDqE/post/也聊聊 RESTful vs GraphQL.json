{"pageProps":{"post":{"tags":["业务系统"],"path":"20210627_RESTful_vs_GraphQL.md","title":"也聊聊 RESTful vs GraphQL","slug":"也聊聊 RESTful vs GraphQL","date":"2021-06-20","category":"系统设计","lastMod":"2021-06-20","description":"系统设计","thumbnail":"","content":"<h1 id=\"也聊聊-restful-vs-graphql\"><a class=\"v-toc-item\" href=\"#也聊聊-restful-vs-graphql\">#</a> 也聊聊 RESTful vs GraphQL</h1>\n<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>本文最早行文于 2018 年中，那时 GraphQL 的生态尚未成熟，也缺乏社区总结的一些经验。</p>\n<blockquote>\n<p>较早入了坑，回首百年身</p>\n</blockquote>\n<p>2021 年中，复盘一下 GraphQL 的一些使用经验。</p>\n<p>名词约定</p>\n<ul>\n<li><strong>接口生产端 / 服务端 下面统一称「生产端」</strong></li>\n<li><strong>接口消费端 / 客户端 下面统一称「消费端」</strong></li>\n</ul>\n<h2 id=\"0x01-流水的技术方案铁打的需求\"><a class=\"v-toc-item\" href=\"#0x01-流水的技术方案铁打的需求\">#</a> 0x01 流水的技术方案，铁打的需求。</h2>\n<p>年幼时看笑傲江湖，华山派两派居然为了剑宗和气宗争个你死我活。</p>\n<p>觉得甚是幼稚。</p>\n<p>年纪渐大之后发现社会处处充满着这种「谁好」的争论。</p>\n<ul>\n<li>剑宗 or 气宗</li>\n<li>自然美 or 人造美</li>\n<li>Java or Python or Golang</li>\n<li>Editor or IDE</li>\n<li>Rest or GraphQL</li>\n<li>单体应用 or 微服务</li>\n</ul>\n<p>剑招是死的，人是活的。</p>\n<p>当讨论问题的时候，下面两个问题意义可能并不是很大。</p>\n<ul>\n<li>用剑宗初学者和气宗高手比，或者相反，这个完全没有多大意义？</li>\n<li>用剑宗初学者和气宗初学者比孰强孰弱，这个有一点意义，但意义也不是很大。菜鸡互啄。</li>\n</ul>\n<p>GraphQL 作为挑战者，下面几个问题是很有意义的。</p>\n<ul>\n<li>现有方案存在哪些问题？</li>\n<li>GraphQL 相比于原先成熟稳定的方案</li>\n<li>新方案解决了哪些原先没有解决的问题。</li>\n<li>新方案更低成本解决了哪些问题。</li>\n<li>现有的痛点是否存在一些新老方案都无法解决的问题。</li>\n<li>有无前车之鉴，有无社区最佳实践。</li>\n<li>迁移成本和学习成本是多少。</li>\n<li>回滚成本多少。</li>\n</ul>\n<h2 id=\"0x02-restful-的缺点\"><a class=\"v-toc-item\" href=\"#0x02-restful-的缺点\">#</a> 0x02 RESTful 的缺点</h2>\n<p>RESTful 有很多接口上最佳实践，但生搬硬套就会使得接口比较诡异。</p>\n<p>这里只说生搬硬套 RESTFul 的带来的缺点，对于大部分公司来说，这些缺点远远抵不上带来的优点。</p>\n<h3 id=\"语义不明确\"><a class=\"v-toc-item\" href=\"#语义不明确\">#</a> 语义不明确</h3>\n<p>比如，业务具备一定复杂性的时候，语义容易不明确。</p>\n<p>预览订单和下单两个接口，如果遵循如下的标准</p>\n<ul>\n<li>接口路径使用名词而非动词</li>\n<li>GET 不修改，POST/PUT/DELETE 修改状态</li>\n<li>使用子字段来表述关系，查询订单 GET /shop/711/orders/</li>\n</ul>\n<p>严格遵循 RESTful 的话，接口就会成这个样子</p>\n<pre><code class=\"language-bash\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>shops<span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>order  <span class=\"token punctuation\">{</span>   <span class=\"token string\">\"products\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token constant\">PUT</span> <span class=\"token operator\">/</span>shops<span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>order  <span class=\"token punctuation\">{</span>   <span class=\"token string\">\"products\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>反正我是看不出来这是一坨啥玩意的，至于如果你硬性规范 PUT order 就是创建订单，就会出现接下来两个接口完全不知道该怎么写</p>\n<pre><code>    支付订单 （用 patch /shop/1/order)\n    取消订单 （用 delete 方法，也没有 delete 呀）\n    退款订单\n    部分退款订单\n</code></pre>\n<ul>\n<li>产品上，用户删除了一台机器，那就是删除了一台机器？这里是软删。</li>\n<li>产品上，管理员删除了一台机器，那就是删除了一台机器？机器记录还在的。</li>\n</ul>\n<p>所以，采用的是 DELETE /machine/1</p>\n<blockquote>\n<p>剑招是死的，人是活的。</p>\n</blockquote>\n<p>不严格遵循 RESTful 的时候可以这么写。</p>\n<pre><code class=\"language-bash\"><span class=\"token constant\">POST</span> <span class=\"token operator\">/</span>preview_order\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"shop_id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"products\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token constant\">POST</span> <span class=\"token operator\">/</span>make_order\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"shop_id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"products\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token constant\">POST</span> <span class=\"token operator\">/</span>pay_order\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"order_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"202012001231237\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"balance\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"20.20\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token constant\">POST</span> <span class=\"token operator\">/</span>cancel_order\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"order_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"202012001231237\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>至于第三点的子字段表述关系，是一个典型的反面教材</p>\n<p>引用 Python 之禅来表达</p>\n<pre><code>Flat is better than nested. 扁平优于嵌套\n</code></pre>\n<h3 id=\"得到即是失去-gets-loss\"><a class=\"v-toc-item\" href=\"#得到即是失去-gets-loss\">#</a> 得到即是失去 - Get’s loss</h3>\n<p>GET 让问题变得复杂</p>\n<p>Rest 时代一个有代表性的问题就是如何在 GET 方法里处理以下四个问题</p>\n<ul>\n<li>过滤 filter</li>\n<li>排序 sort</li>\n<li>字段裁剪 field selections</li>\n<li>分页 pagination</li>\n</ul>\n<p>为了解决这个问题，一个稍微复杂的查询接口就成了如下的样子</p>\n<pre><code class=\"language-bash\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>cars<span class=\"token operator\">?</span>seats<span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token operator\">&amp;</span>sort<span class=\"token operator\">=</span><span class=\"token operator\">-</span>manufactorer<span class=\"token punctuation\">,</span><span class=\"token operator\">+</span>model<span class=\"token operator\">&amp;</span>fields<span class=\"token operator\">=</span>manufacturer<span class=\"token punctuation\">,</span>model<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">,</span>color<span class=\"token operator\">&amp;</span>page<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span>per_page<span class=\"token operator\">=</span><span class=\"token number\">10</span>\n</code></pre>\n<blockquote>\n<p><strong>可阅读性较差</strong></p>\n</blockquote>\n<p>而如果这么写，则前端无需把原先的 queryparams 转化成逗号结尾的字符串，后端也需要跟着解析并且转成自己想要的格式</p>\n<p>如果按照如下的写法，后端则可以直接使用 json 标准库里的数据类型。</p>\n<pre><code class=\"language-bash\"><span class=\"token constant\">POST</span> <span class=\"token operator\">/</span>cars\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"filters\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"seat__lt\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n  <span class=\"token string\">\"sort\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"-manufactorer\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"+model\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"fields\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"manufacturer\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"model\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"color\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"pagination\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"page\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"per_page\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3 id=\"未很好解决的问题\"><a class=\"v-toc-item\" href=\"#未很好解决的问题\">#</a> 未很好解决的问题</h3>\n<p>RESTFul 接口提倡的是细粒度、正交性。</p>\n<p>这样的接口是为了更加方便的复用多个接口来组成页面，但是并非没有问题。</p>\n<p>细粒度和正交性意味着接口是 building block, 而 building block 组合起来是交给前端来做的。 这意味着前端为了组合多个资源，则需要发起多次请求。</p>\n<p>这首先是带来了的网络开销成本 (HTTP 2 解决了首部开销、多路复用等 HTTP 1.1 面临的问题，还做到了完全向后兼容。) 和响应内容拼装成本</p>\n<p>其次，前端往往会抱怨</p>\n<ol>\n<li>服务端这个接口字段少了，后端往往会复用序列器，直接把太多前端用不到的数据一并返回。</li>\n<li>服务端这个接口字段太多，需要慢慢找 diff, 于是会开始抱怨文档问题。</li>\n</ol>\n<p>于是大家采用了 swagger/openapi 的配套解决方案。同时带来了，文档的缺失和滞后</p>\n<h2 id=\"0x03-graphql-是新的颠覆者么\"><a class=\"v-toc-item\" href=\"#0x03-graphql-是新的颠覆者么\">#</a> 0x03 GraphQL 是新的颠覆者么？</h2>\n<p>GraphQL 也不是什么革命性的产品，不过是一种新的开 Web 接口的方式罢了。</p>\n<p>而请求接口提交的参数也变成了包含参数的一种查询语言。</p>\n<p>官方宣传的 GraphQL 搞好了，只需如此：</p>\n<pre><code class=\"language-graphql\"># Step1\\<span class=\"token punctuation\">.</span> 描述你的数据\ntype Project <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> String\n  tagline<span class=\"token operator\">:</span> String\n  contributors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n# Step2\\<span class=\"token punctuation\">.</span> 请求所需数据。\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">project</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"GraphQL\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    tagline\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n# Step3\\<span class=\"token punctuation\">.</span> 拿到所需数据。\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"project\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"tagline\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A query language for APIs\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>嗯，是不是和 SQL 看起来有点像？当然咯，都是查询语言 (QL) 嘛。</p>\n<h2 id=\"0x04-graphql-给消费端带来的好处\"><a class=\"v-toc-item\" href=\"#0x04-graphql-给消费端带来的好处\">#</a> 0x04 GraphQL 给消费端带来的好处</h2>\n<p>GraphQL 的好处，自然是接口消费端写起来就是一个字，爽。</p>\n<p>比如我们使用 Github 的 API 做一个简单的查询<br>\n地址如下 <a href=\"https://link.zhihu.com/?target=https%3A//developer.github.com/v4/explorer/\">https://link.zhihu.com/?target=https%3A//developer.github.com/v4/explorer/</a><br>\n查询如下</p>\n<pre><code class=\"language-graphql\">query <span class=\"token punctuation\">{</span>\n  viewer <span class=\"token punctuation\">{</span>\n    login\n    bio\n    <span class=\"token function\">repositories</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> orderBy<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> field<span class=\"token operator\">:</span> <span class=\"token constant\">STARGAZERS</span><span class=\"token punctuation\">,</span> direction<span class=\"token operator\">:</span> <span class=\"token constant\">DESC</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nodes <span class=\"token punctuation\">{</span>\n        nameWithOwner\n        viewerHasStarred\n        watchers <span class=\"token punctuation\">{</span>\n          totalCount\n        <span class=\"token punctuation\">}</span>\n        stargazers <span class=\"token punctuation\">{</span>\n          totalCount\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      totalCount\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果如下</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"viewer\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"login\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"twocucao\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"bio\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"FullStack Pythonist In Shanghai\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"repositories\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"nodes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"nameWithOwner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"twocucao/YaDjangoBlog\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"viewerHasStarred\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"watchers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"stargazers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">326</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"nameWithOwner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"twocucao/danmu.fm\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"viewerHasStarred\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"watchers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">23</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"stargazers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">316</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"nameWithOwner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"twocucao/YaVueBlog\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"viewerHasStarred\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"watchers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"stargazers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">141</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"nameWithOwner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"twocucao/danmu\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"viewerHasStarred\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"watchers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"stargazers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">69</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"nameWithOwner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"twocucao/silverhand\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"viewerHasStarred\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"watchers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"stargazers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">60</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"nameWithOwner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"twocucao/ChortHotKey\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"viewerHasStarred\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"watchers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"stargazers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">32</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token comment\">// ......</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"totalCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">155</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果你说，我还要看看这个 repo 的主要语言，那么增加一行查询即可。如图。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-997f49fd55e972c37d458a2aef6fb4dd_b.jpg\" alt=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-997f49fd55e972c37d458a2aef6fb4dd_1440w.jpg\" alt=\"\"></p>\n<p>是不是很方便？前端基本对着 Schemas 里面的 query 查询完毕就完毕了。</p>\n<p>查询这么搞可以，增删改查之类的操作呢？</p>\n<p>GraphQL 里面还有 Mutation 可以帮你解决这个问题，在后端定义完 Mutation , 前端在 Mutation 里面可以直接传参。</p>\n<p>甚至，<strong>后端开出接口时，可以依据请求和响应生成对应的 typescript 代码，然后享受代码补全的快感。</strong></p>\n<blockquote>\n<p><strong>极大利好前端</strong></p>\n</blockquote>\n<p>有人说, graphql 不就最后生成了 schema 嘛</p>\n<p>可不要小瞧了生成全接口的 schema, 用它可以做很多东西</p>\n<ol>\n<li><strong>便捷的文档功能,</strong> 接口列表以及入参的初步生成。便于快速调接口，比如我写了一个接口，发布到测试环境，接着点击一个按扭直接同步到 insomnia 里。点击运行即可调试。<strong>「甚至可以做简单的接口自动化测试」</strong></li>\n<li><strong>可以生成 typescript/javascript 代码,</strong> 让前端享受到直接在代码里补全的快感。</li>\n<li>比对两个版本之间的 schema 可以直接得出接口 schema 上，后端有没有做好兼容。如果不行, 则 CI 无法跑过</li>\n</ol>\n<p><img src=\"https://pic1.zhimg.com/v2-c7a593ada4bc7fc78b20c3d18b5e1850_b.jpg\" alt=\"\"></p>\n<h2 id=\"0x05-graphql-给生产端带来的挑战\"><a class=\"v-toc-item\" href=\"#0x05-graphql-给生产端带来的挑战\">#</a> 0x05 GraphQL 给生产端带来的挑战</h2>\n<p>消费端（前端）爽了，是否意味着生产端（服务端）会爽呢？</p>\n<blockquote>\n<p><strong>并不是</strong></p>\n</blockquote>\n<ul>\n<li>对于前端来说，如果要消费 graphql api, 相对容易一些。 只需将原先的 api 层改为 graphqlfetch 即可</li>\n<li>对于后端来说，如果要生产 graphql api, 则麻烦了不少。</li>\n</ul>\n<p>下文我会以 graphene 这个 graphql python 库来说明带来的一些挑战</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/graphql-python/graphene\">https://link.zhihu.com/?target=https%3A//github.com/graphql-python/graphene</a></p>\n<p>有的挑战是和 graphql 相关的，有的挑战则是来自 graphene 库，或许其他库有更好的解决方案。</p>\n<blockquote>\n<p>注意！痛点背后的原因，大多是 graphql 以及配套库玩的不熟。<strong>而不一定是 RESTFUL 不存在这些问题</strong></p>\n</blockquote>\n<p>大致有如下挑战</p>\n<ul>\n<li>View 层代码组织剧变</li>\n<li>权限问题</li>\n<li>版本更迭</li>\n<li>required vs nullable vs blank</li>\n<li>服务端缓存</li>\n<li>嵌套式 API</li>\n<li>N+1 问题</li>\n<li>为名所困</li>\n</ul>\n<h3 id=\"view-层代码组织剧变\"><a class=\"v-toc-item\" href=\"#view-层代码组织剧变\">#</a> View 层代码组织剧变</h3>\n<p>以简单的查询和创建两个接口为例。</p>\n<pre><code class=\"language-python\">\n<span class=\"token keyword\">import</span> graphene\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonInput</span><span class=\"token punctuation\">(</span>graphene<span class=\"token punctuation\">.</span>InputObjectType<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  name <span class=\"token operator\">=</span> graphene<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>required<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\n  age <span class=\"token operator\">=</span> graphene<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>required<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CreatePerson</span><span class=\"token punctuation\">(</span>graphene<span class=\"token punctuation\">.</span>Mutation<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Arguments</span><span class=\"token operator\">:</span>\n    person_data <span class=\"token operator\">=</span> <span class=\"token function\">PersonInput</span><span class=\"token punctuation\">(</span>required<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\n    person <span class=\"token operator\">=</span> graphene<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span>\n\n  def <span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">,</span> person_data<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    person <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>person_data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>age<span class=\"token operator\">=</span>person_data<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">CreatePerson</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">=</span>person<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>graphene<span class=\"token punctuation\">.</span>ObjectType<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  name <span class=\"token operator\">=</span> graphene<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  age <span class=\"token operator\">=</span> graphene<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMutations</span><span class=\"token punctuation\">(</span>graphene<span class=\"token punctuation\">.</span>ObjectType<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  create_person <span class=\"token operator\">=</span> CreatePerson<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n# We must define a query <span class=\"token keyword\">for</span> our schema\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span><span class=\"token punctuation\">(</span>graphene<span class=\"token punctuation\">.</span>ObjectType<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  person <span class=\"token operator\">=</span> graphene<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span>\n  schema <span class=\"token operator\">=</span> graphene<span class=\"token punctuation\">.</span><span class=\"token function\">Schema</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">=</span>Query<span class=\"token punctuation\">,</span> mutation<span class=\"token operator\">=</span>MyMutations<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>同样的逻辑用原先的方法只需如此即可。</p>\n<pre><code class=\"language-python\">@bp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/person\"</span><span class=\"token punctuation\">)</span>\ndef <span class=\"token function\">get_person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  # <span class=\"token keyword\">do</span> <span class=\"token keyword\">get</span> person\n  <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DataValidator</span><span class=\"token punctuation\">(</span>validator<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  name<span class=\"token operator\">:</span> <span class=\"token function\">constr</span><span class=\"token punctuation\">(</span>min_length<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  age<span class=\"token operator\">:</span> <span class=\"token function\">conint</span><span class=\"token punctuation\">(</span>gte<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> lte<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n@bp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/person_create\"</span><span class=\"token punctuation\">)</span>\ndef <span class=\"token function\">person_create</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> DataValidator<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  # <span class=\"token keyword\">do</span> create person\n  <span class=\"token keyword\">return</span> data\n</code></pre>\n<ul>\n<li>第一个痛点<strong>原先简单清晰的代码变成了非常冗长的代码。</strong></li>\n</ul>\n<p>为了提升输入速度，分别尝试了 code generator / snippet 。大量的输入的代价是代码阅读带来较多无效阅读，反而造成了更多的调试困难。</p>\n<ul>\n<li>第二个痛点<strong>校验层没了。而增加校验层变得比较麻烦。</strong></li>\n</ul>\n<p>随着代码量上升，相同业务逻辑的物理距离变得比较长，query 和 mutation 需要拆分到两个文件或者一个文件的上部分和下部分。</p>\n<ul>\n<li>假设你写的是一个商城，从上到下阅读代码会发现一会儿是商品基本信息，一会儿是分类，一会儿是订单，一会儿又是分类，order 的逻辑查看在一个文件的犄角旮旯，修改在另一个文件的犄角旮旯。代码复杂度 +1</li>\n<li>假设查询订单和修改订单两个接口查询，查看与修改所查询的业务逻辑是一样的。由于物理距离过于远，则大概率会写两遍这个代码。Same Logic, Write Everywhere</li>\n</ul>\n<p>我在 tifa 这个 fastapi 项目里尝试了使用这种组织 view 层代码的姿势</p>\n<p>这种组织代码的方式可以用 restful 的开发体验，获得 graphql 的效果</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/twocucao/tifa/blob/master/tifa/apps/admin/graphql.py\">https://link.zhihu.com/?target=https%3A//github.com/twocucao/tifa/blob/master/tifa/apps/admin/graphql.py</a></p>\n<pre><code class=\"language-python\">router <span class=\"token operator\">=</span> <span class=\"token function\">GQLRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TPost</span><span class=\"token punctuation\">(</span>gr<span class=\"token punctuation\">.</span>ObjectType<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    id <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">\"博客 ID\"</span><span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>required<span class=\"token operator\">=</span>True<span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">\"博客标题\"</span><span class=\"token punctuation\">)</span>\n\n@router<span class=\"token punctuation\">.</span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">,</span> output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Boolean<span class=\"token punctuation\">)</span>\ndef <span class=\"token function\">test_ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token string\">\"\"</span>\"\n    做一个简单的 healthcheck\n    <span class=\"token string\">\"\"</span>\"\n    <span class=\"token keyword\">return</span> True\n\n@router<span class=\"token punctuation\">.</span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test_exception\"</span><span class=\"token punctuation\">,</span> output<span class=\"token operator\">=</span>gr<span class=\"token punctuation\">.</span>Boolean<span class=\"token punctuation\">)</span>\ndef <span class=\"token function\">test_exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    raise <span class=\"token function\">ApiException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"raise an api exception\"</span><span class=\"token punctuation\">)</span>\n\n@router<span class=\"token punctuation\">.</span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span> output<span class=\"token operator\">=</span>TPost<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> def <span class=\"token function\">post_by_id</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> gr<span class=\"token punctuation\">.</span>Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token string\">\"\"</span>\"\n    文章详情\n    <span class=\"token string\">\"\"</span>\"\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n\n@router<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"posts\"</span><span class=\"token punctuation\">,</span> output<span class=\"token operator\">=</span>TPost<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> def <span class=\"token function\">posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token string\">\"\"</span>\"\n    文章列表\n    <span class=\"token string\">\"\"</span>\"\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PPostPagination</span><span class=\"token punctuation\">(</span>gr<span class=\"token punctuation\">.</span>InputObjectType<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    q <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">\"标题，等等\"</span><span class=\"token punctuation\">)</span>\n\n@router<span class=\"token punctuation\">.</span><span class=\"token function\">pagination</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"posts2\"</span><span class=\"token punctuation\">,</span> output<span class=\"token operator\">=</span>TPost<span class=\"token punctuation\">)</span>\ndef <span class=\"token function\">posts_pagination</span><span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> PPostPagination<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"items\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> i<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"testName\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"per_page\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"page\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ParamsCreatePost</span><span class=\"token punctuation\">(</span>gr<span class=\"token punctuation\">.</span>InputObjectType<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    name <span class=\"token operator\">=</span> gr<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>required<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\n\n@router<span class=\"token punctuation\">.</span><span class=\"token function\">mutation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create_post\"</span><span class=\"token punctuation\">,</span> output<span class=\"token operator\">=</span>TPost<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> def <span class=\"token function\">create_post</span><span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> ParamsCreatePost<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n        name<span class=\"token operator\">=</span>params<span class=\"token punctuation\">.</span>name\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> post\n</code></pre>\n<p>可以看出，这种组织方式有如下的优点</p>\n<ol>\n<li>depth 为 1 的 query / mutation 字段为一个 route</li>\n<li>简单粗暴的权限可以做在 route 上</li>\n<li>与 restful 完全一致的代码组织方式。RESTFul 代码几乎无缝迁移。</li>\n</ol>\n<h3 id=\"权限问题\"><a class=\"v-toc-item\" href=\"#权限问题\">#</a> 权限问题</h3>\n<p>接口的正交性带来的是细粒度的控制，而聚合起来之后，权限则不是很好管控。</p>\n<p>一个请求打过来包含了越权和非越权的请求。服务端需要如何判断？</p>\n<blockquote>\n<p><strong>保大保小？</strong></p>\n</blockquote>\n<p>在 Restful 里依据路由可以做简单粗暴的首次鉴权。并且程序设计之初就会考虑到权限问题。</p>\n<p>在我 18 年研究 graphql 的时候，几乎就没有关于权限的最佳实践…</p>\n<p>当然，graphql 已经流行了好久了，现在也有一些成熟的解决方案了。</p>\n<h3 id=\"版本更迭\"><a class=\"v-toc-item\" href=\"#版本更迭\">#</a> 版本更迭</h3>\n<p>随着业务的变更，往往需要新增 / 废弃一些接口。</p>\n<p>在原先 RESTFul 的实践下</p>\n<ol>\n<li>接口新增只需要考虑 v2 版本</li>\n<li>接口移除通过监控接口的请求次数来解决这个问题。</li>\n</ol>\n<p>graphql 社区推荐的是不废弃接口，只做兼容。尝试遵循了 graphql 社区的意见。最后还是改回和 restful 类似的方案了。</p>\n<p>还有另外一些痛点，以往想把一些性能敏感的接口拆出来的时候，一般可以</p>\n<ol>\n<li>运维手段：直接起另一个服务，然后在网关那边直接转发请求即可。</li>\n<li>非运维手段：请求依旧由现在的服务接收，然后由再次发起请求到新服务上。</li>\n</ol>\n<p>如果采用 graphql 之后，就只能用第二种方案了。</p>\n<h3 id=\"required-vs-nullable-vs-blank\"><a class=\"v-toc-item\" href=\"#required-vs-nullable-vs-blank\">#</a> required vs nullable vs blank</h3>\n<pre><code>  not required 表示这个字段不是必须的，可传可不传。\n  required 表示这个字段是必须的，但可为 null/none, 也可不为。\n  not nullable 表示这个字段是必须的，但是不能为 null/none\n  nullable 表示这个字段是必须的，但可为 null/none, 也可不为。\n  not blank 表示这个字段是可为空的\n  对于字符串，则必须要不为 &quot;&quot;\n  对于列表，则必须要存在至少一个 item\n</code></pre>\n<p>举个例子来说明，如果要表示如下的响应内容</p>\n<p>订单没有支付状态，就没有支付方式，即不应该有支付方式这个字段。</p>\n<pre><code>\n# 未支付订单\n{\n  &quot;status&quot;: &quot;NOT_PAID&quot;\n}\n# 已支付订单\n{\n  &quot;status&quot;: &quot;PAID&quot;,\n  &quot;pay_method&quot;: &quot;WECHAT&quot;\n}\n</code></pre>\n<blockquote>\n<p>这样的接口是<strong>无法表示</strong>, 如果有这个字段，就展示在界面上，没有这个字段就不展示在界面上的</p>\n</blockquote>\n<p>graphql 没法做到未支付订单无 pay_method 这种情况，在响应体里 pay_method 总是为 null</p>\n<pre><code># 未支付订单\n{\n  &quot;status&quot;: &quot;NOT_PAID&quot;\n  &quot;pay_method&quot;: null\n}\n</code></pre>\n<p>当然，如果硬是要做的话，只能借助 UNION[PaidOrder,NotPaidOrder] 来实现。使用 Union 本身就造成了序列化的成本急剧上升。</p>\n<h3 id=\"服务端缓存\"><a class=\"v-toc-item\" href=\"#服务端缓存\">#</a> 服务端缓存</h3>\n<p>要查什么，往往不可知（无法预知查询语句），随前端来定。不知道该怎么缓存响应内容。</p>\n<p>以往通过 URI 定位资源，Http 协议无状态，非常容易实现对应用层透明的缓存。</p>\n<p>而 GraphQL 重新定义了资源的定位方式，设计缓存的时候往往不知道该怎么设计。</p>\n<h3 id=\"嵌套式-api\"><a class=\"v-toc-item\" href=\"#嵌套式-api\">#</a> 嵌套式 API</h3>\n<p>在 graphql 的场景下，重写 resolver 是一个非常的影响是未知的。</p>\n<p>因为，你不知道有多少个 query 用了这个 field, 为了知道这个问题，你还得打点知道有多少个场景的 query 用到了这个字段。</p>\n<p>现实生活中情况可能复杂一些。</p>\n<p>这个例子旨在说明，存在一些改动的心智负担比较严重。</p>\n<p>比如，前端变动，接口层次，所有商家级别的数据落到店铺级别。</p>\n<p>这个例子正确的解法是联合前端一起升级到 V2</p>\n<h3 id=\"n1-问题\"><a class=\"v-toc-item\" href=\"#n1-问题\">#</a> N+1 问题</h3>\n<p>有的时候需要看情况来解决不同的 N+1 问题，也是比较迷惑的…</p>\n<p>客户端不见得会按照你的预期来查询。</p>\n<p>这就意味着，同一个结构，有的时候要依据情况 A 来重写查询，有的时候要依据情况 B 来重写查询。</p>\n<h3 id=\"为名所困\"><a class=\"v-toc-item\" href=\"#为名所困\">#</a> 为名所困</h3>\n<p>项目写了半年，由于 graphene 玩的不熟，我（后端）一直在各种起名困难症中度过。</p>\n<p>明明业务流程都差不多，但最后结果全是在改各种各样 ObjectType 的前缀。</p>\n<h2 id=\"0x06-结论\"><a class=\"v-toc-item\" href=\"#0x06-结论\">#</a> 0x06 结论</h2>\n<p><strong>GraphQL 这一套玩的熟悉的话，效率确实非常高。(前提是团队里面的人能玩的熟悉)</strong></p>\n<p>如果团队里面缺少全栈人才的话，在很多地方的比较难推进的动。graphql 用起来确实爽，特别是前端。</p>\n<p>由于是较新的技术，<strong>引入进来算上折腾出最佳实践的成本和折腾过程中诞生的技术债，收益可能并没有想象的那么大。</strong></p>\n<p>restful 其实也并不是做不到不少 graphql 能做到的东西。schema 生成工具其实蛮多的.</p>\n<blockquote>\n<p>不过，搞技术嘛，<strong>折腾不止 生命不息</strong>, 说不一定这次折腾收益就很高了呢？</p>\n</blockquote>\n<h2 id=\"0xee-参考链接\"><a class=\"v-toc-item\" href=\"#0xee-参考链接\">#</a> 0xEE 参考链接</h2>\n<ul>\n<li>Photo by <a href=\"https://link.zhihu.com/?target=https%3A//unsplash.com/%40sigmund%3Futm_source%3Dunsplash%26utm_medium%3Dreferral%26utm_content%3DcreditCopyText\">Sigmund</a> on <a href=\"https://link.zhihu.com/?target=https%3A//unsplash.com/s/photos/compute%3Futm_source%3Dunsplash%26utm_medium%3Dreferral%26utm_content%3DcreditCopyText\">Unsplash</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/twocucao/tifa\">「FastAPI 脚手架」</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//graphene-python.org/\">https://link.zhihu.com/?target=https%3A//graphene-python.org/</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//graphql.org/\">https://link.zhihu.com/?target=https%3A//graphql.org/</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.apollographql.com/docs/react/data/operation-best-practices/\">https://link.zhihu.com/?target=https%3A//www.apollographql.com/docs/react/data/operation-best-practices/</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//graphql-code-generator.com/docs/plugins/typescript\">https://link.zhihu.com/?target=https%3A//graphql-code-generator.com/docs/plugins/typescript</a></li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li><a href=\"#%E4%B9%9F%E8%81%8A%E8%81%8A-restful-vs-graphql\">也聊聊 RESTful vs GraphQL</a>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-%E6%B5%81%E6%B0%B4%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E9%93%81%E6%89%93%E7%9A%84%E9%9C%80%E6%B1%82\">0x01 流水的技术方案，铁打的需求。</a></li>\n<li><a href=\"#0x02-restful-%E7%9A%84%E7%BC%BA%E7%82%B9\">0x02 RESTful 的缺点</a>\n<ul>\n<li><a href=\"#%E8%AF%AD%E4%B9%89%E4%B8%8D%E6%98%8E%E7%A1%AE\">语义不明确</a></li>\n<li><a href=\"#%E5%BE%97%E5%88%B0%E5%8D%B3%E6%98%AF%E5%A4%B1%E5%8E%BB-gets-loss\">得到即是失去 - Get’s loss</a></li>\n<li><a href=\"#%E6%9C%AA%E5%BE%88%E5%A5%BD%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\">未很好解决的问题</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-graphql-%E6%98%AF%E6%96%B0%E7%9A%84%E9%A2%A0%E8%A6%86%E8%80%85%E4%B9%88\">0x03 GraphQL 是新的颠覆者么？</a></li>\n<li><a href=\"#0x04-graphql-%E7%BB%99%E6%B6%88%E8%B4%B9%E7%AB%AF%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%A5%BD%E5%A4%84\">0x04 GraphQL 给消费端带来的好处</a></li>\n<li><a href=\"#0x05-graphql-%E7%BB%99%E7%94%9F%E4%BA%A7%E7%AB%AF%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%8C%91%E6%88%98\">0x05 GraphQL 给生产端带来的挑战</a>\n<ul>\n<li><a href=\"#view-%E5%B1%82%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87%E5%89%A7%E5%8F%98\">View 层代码组织剧变</a></li>\n<li><a href=\"#%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98\">权限问题</a></li>\n<li><a href=\"#%E7%89%88%E6%9C%AC%E6%9B%B4%E8%BF%AD\">版本更迭</a></li>\n<li><a href=\"#required-vs-nullable-vs-blank\">required vs nullable vs blank</a></li>\n<li><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%93%E5%AD%98\">服务端缓存</a></li>\n<li><a href=\"#%E5%B5%8C%E5%A5%97%E5%BC%8F-api\">嵌套式 API</a></li>\n<li><a href=\"#n1-%E9%97%AE%E9%A2%98\">N+1 问题</a></li>\n<li><a href=\"#%E4%B8%BA%E5%90%8D%E6%89%80%E5%9B%B0\">为名所困</a></li>\n</ul>\n</li>\n<li><a href=\"#0x06-%E7%BB%93%E8%AE%BA\">0x06 结论</a></li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">0xEE 参考链接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}