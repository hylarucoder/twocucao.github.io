{"pageProps":{"post":{"tags":["Python","系列文章"],"path":"20190309_PyCode_04.md","title":"这几招，让你快速提升 Python 项目的性能","slug":"这几招，让你快速提升 Python 项目的性能","date":"2019-03-05","category":"Python 项目代码健壮性和性能","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<p>本文是《提升你的 Python 项目代码健壮性和性能》系列的第四篇文章。</p>\n<p>本文讲的是</p>\n<pre><code>**当你觉得某个地方运行比较慢了，此时此刻的你，有哪些小技巧可以快速的帮**\n**你定位性能问题。**\n</code></pre>\n<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>本文主要目的在于介绍一些 Python 项目常规的性能优化的姿势与技巧。</p>\n<p>优化的最简单的途径就是，<strong>没用户 + 调用次数少</strong></p>\n<p>嗯？但这种优化方式… 实在是没什么好说的。</p>\n<ul>\n<li><strong>优化口诀 1: 先做对，布监控，再做好。</strong></li>\n<li><strong>优化口诀 2: 过早优化是万恶之源。</strong></li>\n<li><strong>优化口诀 3: 去优化那些需要优化的地方。</strong></li>\n</ul>\n<p>即</p>\n<ul>\n<li>Step 1. Get it right.</li>\n<li>Step 2. Test it’s right.</li>\n<li>Step 3. Monitor.</li>\n<li>Step 4. Profile if slow.</li>\n<li>Step 5. Try Optimize.</li>\n<li>Step 6. Repeat from 2.</li>\n</ul>\n<p>有的人站出来说，<strong>我写程序就是要一步到位，把能优化的点一次性搞定。</strong></p>\n<p>请不要听他的，因为优化是无止境的。唯快不破</p>\n<p><strong>能一次写出优雅清晰而且性能高的代码的人，一般很少见到。毕竟需要考虑的点太多了。</strong></p>\n<p>基于上面的认知，<strong>代码的可维护性是第一位的。</strong></p>\n<ul>\n<li>写代码的首先应该是代码很清晰，非常容易维护。</li>\n<li>然后在没有过分降低可维护性的情况下，作出性能的优化。</li>\n</ul>\n<h2 id=\"0x01-python-优化的五件武器\"><a class=\"v-toc-item\" href=\"#0x01-python-优化的五件武器\">#</a> 0x01 Python 优化的五件武器</h2>\n<p>钟声响起归家的讯号，刚回到家。</p>\n<p>公司群响起加班的讯号，用户反应服务响应总是超时。</p>\n<p>你打开电脑，隐隐约约觉得是某个函数的问题。这个函数的功能比较多，调试了很久才调试通。</p>\n<p>浏览代码。大致定位了这个问题可能会在下面的几个函数中。</p>\n<pre><code class=\"language-text\">def <span class=\"token function\">red_packet_calculation_algorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\tpass\n\ndef <span class=\"token function\">user_stats_calculation_algorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\tpass\n\ndef <span class=\"token function\">dashboard_calculation_algorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\tpass\n</code></pre>\n<p><strong>如何确定是哪个函数需要优化呢？</strong></p>\n<p>很简单，到 IPython 里面执行一下就就知道了。感觉慢的就是目标函数。</p>\n<p><strong>总觉得执行一下这个操作有点不稳定。如果有个工具，可以直接执行很多次，然后作出统计就好了。</strong></p>\n<p>这就是 Python 代码优化第一件武器 timeit</p>\n<h3 id=\"第一件武器-timeit\"><a class=\"v-toc-item\" href=\"#第一件武器-timeit\">#</a> 第一件武器 timeit</h3>\n<p>通常某段代码有问题，最直接的方法就是跑一下这段代码。</p>\n<p>在 IPython 里执行</p>\n<pre><code class=\"language-text\"># ipython\n<span class=\"token operator\">%</span>time your<span class=\"token operator\">-</span>algorithm\n</code></pre>\n<p>timeit 将代码执行多次，取均值</p>\n<p>一般这个时候，你就可以初步定位问题所在了。</p>\n<blockquote>\n<p><strong>比如，发现 user_stats_calculation_algorithm 在 一个 for 循环里面走了数据库查询。</strong></p>\n</blockquote>\n<p>也有一些函数并不是那么容易定位。</p>\n<p>即，通过这个 timeit 知道了某个函数执行比较慢，但那个函数 里面还有很多函数，通过肉眼观察，还是没有办法来解决呀。</p>\n<p>这个时候你想了，如果能看到哪些语句执行的次数多一些，耗时长一些，就好了。</p>\n<p>这就是 Python 代码优化第二件武器 profile 。</p>\n<h3 id=\"第二件武器-profile-与-cprofile\"><a class=\"v-toc-item\" href=\"#第二件武器-profile-与-cprofile\">#</a> 第二件武器 profile 与 cprofile</h3>\n<p>在 ipython 中运行</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e71500556d16329b6c785611297364ab_b.jpg\" alt=\"\"></p>\n<p>这么一看，耗时操作一览无遗。</p>\n<p>语句级别的 Profile 有了，但其实，很多时候也并不能解决你的问题。</p>\n<p><strong>如果能有这么个东西，即，能在代码旁边注释一下，执行次数和耗时就好了。</strong></p>\n<p>这就是 Python 代码优化第三件武器 line profile。</p>\n<h3 id=\"第三件武器-line-profiler\"><a class=\"v-toc-item\" href=\"#第三件武器-line-profiler\">#</a> 第三件武器 line profiler</h3>\n<p>能在代码旁边注释，执行次数和耗时。如下</p>\n<pre><code class=\"language-bash\"><span class=\"token function\">Pystone</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span> time <span class=\"token keyword\">for</span> <span class=\"token number\">50000</span> passes <span class=\"token operator\">=</span> <span class=\"token number\">2.48</span>\nThis machine benchmarks at <span class=\"token number\">20161.3</span> pystones<span class=\"token operator\">/</span>second\nWrote profile results to pystone<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">.</span>lprof\nTimer unit<span class=\"token operator\">:</span> <span class=\"token number\">1e-06</span> s\n\nFile<span class=\"token operator\">:</span> pystone<span class=\"token punctuation\">.</span>py\nFunction<span class=\"token operator\">:</span> Proc2 at line <span class=\"token number\">149</span>\nTotal time<span class=\"token operator\">:</span> <span class=\"token number\">0.606656</span> s\n\nLine #      Hits         Time  Per Hit   <span class=\"token operator\">%</span> Time  Line Contents\n<span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">==</span>\n   <span class=\"token number\">149</span>                                           @profile\n   <span class=\"token number\">150</span>                                           def <span class=\"token function\">Proc2</span><span class=\"token punctuation\">(</span>IntParIO<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n   <span class=\"token number\">151</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">82003</span>      <span class=\"token number\">1.6</span>     <span class=\"token number\">13.5</span>      IntLoc <span class=\"token operator\">=</span> IntParIO <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n   <span class=\"token number\">152</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">63162</span>      <span class=\"token number\">1.3</span>     <span class=\"token number\">10.4</span>      <span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n   <span class=\"token number\">153</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">69065</span>      <span class=\"token number\">1.4</span>     <span class=\"token number\">11.4</span>          <span class=\"token keyword\">if</span> Char1Glob <span class=\"token operator\">==</span> <span class=\"token string\">'A'</span><span class=\"token operator\">:</span>\n   <span class=\"token number\">154</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">66354</span>      <span class=\"token number\">1.3</span>     <span class=\"token number\">10.9</span>              IntLoc <span class=\"token operator\">=</span> IntLoc <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n   <span class=\"token number\">155</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">67263</span>      <span class=\"token number\">1.3</span>     <span class=\"token number\">11.1</span>              IntParIO <span class=\"token operator\">=</span> IntLoc <span class=\"token operator\">-</span> IntGlob\n   <span class=\"token number\">156</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">65494</span>      <span class=\"token number\">1.3</span>     <span class=\"token number\">10.8</span>              EnumLoc <span class=\"token operator\">=</span> Ident1\n   <span class=\"token number\">157</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">68001</span>      <span class=\"token number\">1.4</span>     <span class=\"token number\">11.2</span>          <span class=\"token keyword\">if</span> EnumLoc <span class=\"token operator\">==</span> Ident1<span class=\"token operator\">:</span>\n   <span class=\"token number\">158</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">63739</span>      <span class=\"token number\">1.3</span>     <span class=\"token number\">10.5</span>              <span class=\"token keyword\">break</span>\n   <span class=\"token number\">159</span>     <span class=\"token number\">50000</span>        <span class=\"token number\">61575</span>      <span class=\"token number\">1.2</span>     <span class=\"token number\">10.1</span>      <span class=\"token keyword\">return</span> IntParIO\n</code></pre>\n<p>这个可谓是 Python 世界里时间性能优化的顶级工具了。</p>\n<h3 id=\"第四件武器-memory-profiler\"><a class=\"v-toc-item\" href=\"#第四件武器-memory-profiler\">#</a> 第四件武器 memory profiler</h3>\n<p><strong>说完了时间上的优化，再说说空间上的优化。</strong></p>\n<p>如何检查内存呢？</p>\n<p>这需要 Python 代码优化第四件武器 memory profiler。</p>\n<p>这个工具用于查看 Python 程序的内存占用情况</p>\n<p>但，知道了执行某些代码之后，内存是多少又能如何呢？</p>\n<p>不见得能定位出来是什么东西</p>\n<p>内存中这么多 objects 我上哪看去？</p>\n<p><strong>假设内存泄漏了，我再怎么 profile, 内存都是一直泄漏的呀。</strong></p>\n<p>总要想办法定位出是哪些类型的有问题。</p>\n<h3 id=\"第五件武器-pympler\"><a class=\"v-toc-item\" href=\"#第五件武器-pympler\">#</a> 第五件武器 pympler</h3>\n<p>这需要 Python 代码优化第五件武器 pympler。这是我从雨痕的《 Python 学习笔记 》里看到的</p>\n<p><strong>这个工具特别适合给当前所有的 objects 的内存占用情况做简单统计。</strong></p>\n<p>之前的一次线上代码出内存泄漏，检查了自己的代码确定没有问题之后，将目光放在了第三<br>\n方库上。</p>\n<p>但第三方库也有不少，检查半天依旧没有什么进展。</p>\n<pre><code class=\"language-text\">from pympler <span class=\"token keyword\">import</span> tracker\n\n# 在多处打点，并且将结果打到日志里。\nmemory_tracker <span class=\"token operator\">=</span> tracker<span class=\"token punctuation\">.</span><span class=\"token function\">SummaryTracker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>每次打印出来的结果大致是这样子的。</p>\n<pre><code class=\"language-text\">types <span class=\"token operator\">|</span>   # objects <span class=\"token operator\">|</span>   total size\n<span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span> <span class=\"token operator\">|</span> <span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">==</span> <span class=\"token operator\">|</span> <span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span>\n              dict <span class=\"token operator\">|</span>           <span class=\"token number\">1</span> <span class=\"token operator\">|</span>     <span class=\"token number\">280</span>    <span class=\"token constant\">B</span>\n              list <span class=\"token operator\">|</span>           <span class=\"token number\">1</span> <span class=\"token operator\">|</span>     <span class=\"token number\">176</span>    <span class=\"token constant\">B</span>\n  _sre<span class=\"token punctuation\">.</span>SRE_Pattern <span class=\"token operator\">|</span>           <span class=\"token number\">1</span> <span class=\"token operator\">|</span>      <span class=\"token number\">88</span>    <span class=\"token constant\">B</span>\n             tuple <span class=\"token operator\">|</span>           <span class=\"token number\">1</span> <span class=\"token operator\">|</span>      <span class=\"token number\">80</span>    <span class=\"token constant\">B</span>\n               str <span class=\"token operator\">|</span>           <span class=\"token number\">0</span> <span class=\"token operator\">|</span>       <span class=\"token number\">7</span>    <span class=\"token constant\">B</span>\n</code></pre>\n<p>刚开始都还挺正常，<strong>运行了一段时间之后，日志中的部分涉及到 flask-sqlalchemy</strong><br>\n<strong>的 objects 和 total size 保持了坚挺的增长。</strong></p>\n<p>最后发现 flask-sqlalchemy 如果 设置了 SQLALCHEMY_RECORD_QUERIES 为 True 的话，</p>\n<p>每次查询都会往 current_app.sqlalchemy_queries 里增加 DebugQueryTuple, 很快就内存泄漏了。</p>\n<pre><code class=\"language-text\">queries <span class=\"token operator\">=</span> _app_ctx_stack<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">.</span>sqlalchemy_queries\nqueries<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">_DebugQueryTuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n\t\tstatement<span class=\"token punctuation\">,</span> parameters<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>_query_start_time<span class=\"token punctuation\">,</span> <span class=\"token function\">_timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token function\">_calling_context</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>app_package<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"其他神器\"><a class=\"v-toc-item\" href=\"#其他神器\">#</a> 其他神器</h3>\n<p>可视化调用</p>\n<p>当然，也有一些比较方便的工具是用来查看函数的调用信息的</p>\n<p>效果大概是这样子</p>\n<p><img src=\"https://pic1.zhimg.com/v2-58d927fe1a204ec13df79ef255749830_b.jpg\" alt=\"\"></p>\n<p>当然，也有其他的工具</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/582336/how-can-you-profile-a-python-script\">https://stackoverflow.com/questions/582336/how-can-you-profile-a-python-script</a></p>\n<h2 id=\"0x02-优化-web-项目\"><a class=\"v-toc-item\" href=\"#0x02-优化-web-项目\">#</a> 0x02 优化 Web 项目</h2>\n<h3 id=\"提前优化\"><a class=\"v-toc-item\" href=\"#提前优化\">#</a> 提前优化</h3>\n<p>在使用 Django 项目的时候，我必须要安装的第三方库就是 djangodebugtools</p>\n<p>这个工具用起来有多舒服呢？</p>\n<p>可以直接 Profile SQL 语句</p>\n<p><img src=\"https://pic2.zhimg.com/v2-84e70f363b220d0560191d53338e6961_b.jpg\" alt=\"\"></p>\n<p>甚至可以直接 explain sql 以及 查看缓存情况</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fbfd51e4936fe23a158f41840cd22f36_b.jpg\" alt=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6dc91c81ed6a76c02493b152e4ae8a3c_b.jpg\" alt=\"\"></p>\n<h3 id=\"做好监控\"><a class=\"v-toc-item\" href=\"#做好监控\">#</a> 做好监控</h3>\n<p>如何监控，监控什么指标？这属于日志的范畴了。</p>\n<p>日志的道术器分别是什么，这将在下一篇文章来具体介绍一下如何打日志。</p>\n<h2 id=\"0x03-性能优化建议\"><a class=\"v-toc-item\" href=\"#0x03-性能优化建议\">#</a> 0x03 性能优化建议</h2>\n<p>笔者列了一些大方向上的优化建议，具体是要靠积累。</p>\n<h3 id=\"建议-1-务必了解-python-里面的负优化常识\"><a class=\"v-toc-item\" href=\"#建议-1-务必了解-python-里面的负优化常识\">#</a> 建议 1. 务必了解 Python 里面的负优化常识</h3>\n<ol>\n<li>不要在 for loop 里面不断的链接 string, 用列表 +JOIN 的方式会更加合适。</li>\n</ol>\n<h3 id=\"建议-2-能用内置的模块就不要手动实现\"><a class=\"v-toc-item\" href=\"#建议-2-能用内置的模块就不要手动实现\">#</a> 建议 2. 能用内置的模块就不要手动实现</h3>\n<ol>\n<li>比如，当你想做一些字符串上的变动的时候，不防先查看一下 string / textwrap / re / difflib 里是不是满足你的要求了</li>\n<li>比如你操作一组比较类似的数据类型，可以考虑看下 enum / collection / itertools / array<br>\n/ heapq 里面是不是已经满足你的要求了。</li>\n</ol>\n<p>笔者在 <a href=\"https://zhuanlan.zhihu.com/p/32504320\">https://zhuanlan.zhihu.com/p/32504320</a> 中曾经遇到过统计的问题。</p>\n<p>当时遇到的问题场景是</p>\n<p>有 400 组 UUID 集合，每个列表数量在 1000000 左右，列表和列表之间重复部分并不是很大。我想拿到去重之后的所有 UUID，应该怎么处理</p>\n<pre><code class=\"language-text\"># 版本一，运行遥遥无期\nlist_of_uuid_set <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> set1 <span class=\"token punctuation\">,</span> set2 <span class=\"token operator\">...</span> set400 <span class=\"token punctuation\">]</span>\nall_uuid_set <span class=\"token operator\">=</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>lambda x<span class=\"token operator\">:</span> x <span class=\"token operator\">|</span> y<span class=\"token punctuation\">,</span> list_of_uuid_set<span class=\"token punctuation\">)</span>\n\n# 版本二，运行遥遥无期\n\ndef <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span>list2<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    list1<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> list1\n\nlist_of_uuid_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> list1 <span class=\"token punctuation\">,</span> list2 <span class=\"token operator\">...</span> list400 <span class=\"token punctuation\">]</span>\nall_uuid_set <span class=\"token operator\">=</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>merge<span class=\"token punctuation\">,</span> list_of_uuid_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n# 版本三，<span class=\"token number\">5</span>s\n\nlist_of_uuid_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> list1 <span class=\"token punctuation\">,</span> list2 <span class=\"token operator\">...</span> list400 <span class=\"token punctuation\">]</span>\nall_uuid_set <span class=\"token operator\">=</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>itertools<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>list_of_uuid_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>合适的数据结构和合适的算法，确实能让代码变得清晰，高效，优雅。</p>\n<h3 id=\"建议-3-能用优质的第三方库就不要手动实现\"><a class=\"v-toc-item\" href=\"#建议-3-能用优质的第三方库就不要手动实现\">#</a> 建议 3. 能用优质的第三方库就不要手动实现</h3>\n<p>除了一些内置的模块，</p>\n<ul>\n<li>一些优秀的软件所依赖的第三方包也是非常值得留意的。</li>\n<li>一般能上 C 库的，用于解析的依赖包性能不错，比如 LXML/Numpy 这类包</li>\n</ul>\n<h2 id=\"0xdd-结论\"><a class=\"v-toc-item\" href=\"#0xdd-结论\">#</a> 0xDD 结论</h2>\n<blockquote>\n<p><strong>本文讲的是，当你觉得某个地方运行比较慢了，此时此刻的你，有哪些小技巧可以快速的帮</strong> &gt; <strong>你定位性能问题。</strong></p>\n</blockquote>\n<p>其实还有很多悬而未决的问题：</p>\n<ol>\n<li>定位了问题，如何解决问题？</li>\n<li>如何觉察到某个地方运行比较慢呢？</li>\n</ol>\n<p>对于第一点，还是得多看多搜多练。用《亮剑》中的李云龙的话说：</p>\n<blockquote>\n<p><strong>真正的神枪手是战场上用子弹喂出来的。打得多了，感觉就有了，眼到手就到，抬枪就有，弹弹咬肉，这就叫神枪手。</strong></p>\n</blockquote>\n<p>对于第二点，就是下一篇文章需要解决的问题了。</p>\n<ol>\n<li>通过日志来判断。</li>\n<li>通过打点和结合 APMServer 来判断。</li>\n</ol>\n<h2 id=\"0xee-参考链接\"><a class=\"v-toc-item\" href=\"#0xee-参考链接\">#</a> 0xEE 参考链接</h2>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/32504320\">https://zhuanlan.zhihu.com/p/32504320</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//pynash.org/2013/03/06/timing-and-profiling/\">https://pynash.org/2013/03/06/timing-and-profiling/</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//wiki.python.org/moin/PythonSpeed/PerformanceTips\">https://wiki.python.org/moin/PythonSpeed/PerformanceTips</a></li>\n<li>Photo by<a href=\"https://link.zhihu.com/?target=https%3A//unsplash.com/photos/CPs2X8JYmS8%3Futm_source%3Dunsplash%26utm_medium%3Dreferral%26utm_content%3DcreditCopyText\">Tim van der Kuip</a>on<a href=\"https://link.zhihu.com/?target=https%3A//unsplash.com/t/business-work%3Futm_source%3Dunsplash%26utm_medium%3Dreferral%26utm_content%3DcreditCopyText\">Unsplash</a></li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-python-%E4%BC%98%E5%8C%96%E7%9A%84%E4%BA%94%E4%BB%B6%E6%AD%A6%E5%99%A8\">0x01 Python 优化的五件武器</a>\n<ul>\n<li><a href=\"#%E7%AC%AC%E4%B8%80%E4%BB%B6%E6%AD%A6%E5%99%A8-timeit\">第一件武器 timeit</a></li>\n<li><a href=\"#%E7%AC%AC%E4%BA%8C%E4%BB%B6%E6%AD%A6%E5%99%A8-profile-%E4%B8%8E-cprofile\">第二件武器 profile 与 cprofile</a></li>\n<li><a href=\"#%E7%AC%AC%E4%B8%89%E4%BB%B6%E6%AD%A6%E5%99%A8-line-profiler\">第三件武器 line profiler</a></li>\n<li><a href=\"#%E7%AC%AC%E5%9B%9B%E4%BB%B6%E6%AD%A6%E5%99%A8-memory-profiler\">第四件武器 memory profiler</a></li>\n<li><a href=\"#%E7%AC%AC%E4%BA%94%E4%BB%B6%E6%AD%A6%E5%99%A8-pympler\">第五件武器 pympler</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96%E7%A5%9E%E5%99%A8\">其他神器</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-%E4%BC%98%E5%8C%96-web-%E9%A1%B9%E7%9B%AE\">0x02 优化 Web 项目</a>\n<ul>\n<li><a href=\"#%E6%8F%90%E5%89%8D%E4%BC%98%E5%8C%96\">提前优化</a></li>\n<li><a href=\"#%E5%81%9A%E5%A5%BD%E7%9B%91%E6%8E%A7\">做好监控</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE\">0x03 性能优化建议</a>\n<ul>\n<li><a href=\"#%E5%BB%BA%E8%AE%AE-1-%E5%8A%A1%E5%BF%85%E4%BA%86%E8%A7%A3-python-%E9%87%8C%E9%9D%A2%E7%9A%84%E8%B4%9F%E4%BC%98%E5%8C%96%E5%B8%B8%E8%AF%86\">建议 1. 务必了解 Python 里面的负优化常识</a></li>\n<li><a href=\"#%E5%BB%BA%E8%AE%AE-2-%E8%83%BD%E7%94%A8%E5%86%85%E7%BD%AE%E7%9A%84%E6%A8%A1%E5%9D%97%E5%B0%B1%E4%B8%8D%E8%A6%81%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0\">建议 2. 能用内置的模块就不要手动实现</a></li>\n<li><a href=\"#%E5%BB%BA%E8%AE%AE-3-%E8%83%BD%E7%94%A8%E4%BC%98%E8%B4%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%B0%B1%E4%B8%8D%E8%A6%81%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0\">建议 3. 能用优质的第三方库就不要手动实现</a></li>\n</ul>\n</li>\n<li><a href=\"#0xdd-%E7%BB%93%E8%AE%BA\">0xDD 结论</a></li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">0xEE 参考链接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}