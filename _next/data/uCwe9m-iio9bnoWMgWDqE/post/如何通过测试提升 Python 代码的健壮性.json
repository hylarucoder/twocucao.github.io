{"pageProps":{"post":{"tags":["Python","系列文章"],"path":"20190216_PyCode_02.md","title":"如何通过测试提升 Python 代码的健壮性","slug":"如何通过测试提升 Python 代码的健壮性","date":"2019-03-23","category":"Python 项目代码健壮性和性能","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>本文是《提升你的 Python 项目代码健壮性和性能》系列的第二篇文章。</p>\n<p>本文的测试更多专注于 Python 后端的程序员。</p>\n<p>在上一篇文章中，我提到了代码覆盖率，即测试的一种指标。</p>\n<p>本期就聊聊测试这件小事情。</p>\n<h2 id=\"0x01-测试的分类\"><a class=\"v-toc-item\" href=\"#0x01-测试的分类\">#</a> 0x01 测试的分类</h2>\n<p>测试有很多种，</p>\n<p>按照测试设计的方法可以分为：</p>\n<p>1. 黑盒<br>\n2. 白盒</p>\n<p>按照测试目的：</p>\n<p>1. 功能测试</p>\n<pre><code class=\"language-bash\">单元测试\n\t功能测试\n\t集成测试\n\t场景测试\n\t<span class=\"token constant\">A</span><span class=\"token operator\">/</span><span class=\"token constant\">B</span> 测试\n\n<span class=\"token number\">2.</span> 非功能测试\n\n\t压力测试\n\t安全性测试\n\t可访问性测试\n</code></pre>\n<p>其他</p>\n<pre><code class=\"language-bash\">回归测试\n易用性测试\n还有不少，懒得去整理了<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>代码覆盖率顾名思义，就是测试用例覆盖运行代码的比重。</p>\n<h3 id=\"后端主要关注哪些测试\"><a class=\"v-toc-item\" href=\"#后端主要关注哪些测试\">#</a> 后端主要关注哪些测试</h3>\n<ul>\n<li>单元测试</li>\n<li>功能测试</li>\n<li>端对端测试</li>\n<li>性能测试</li>\n</ul>\n<h2 id=\"0x02-为什么要写测试\"><a class=\"v-toc-item\" href=\"#0x02-为什么要写测试\">#</a> 0x02 为什么要写测试</h2>\n<p>来讲讲测试的优点。</p>\n<p>为什么要写测试来覆盖代码。</p>\n<ol>\n<li><strong>适当的测试可以让发布代码的时候更加有底气。</strong></li>\n<li><strong>适当的测试可以让新手更快的了解代码。</strong></li>\n<li><strong>适当的测试可以让程序更容易重构。</strong></li>\n<li><strong>适当的测试可以加快团队的开发速度。</strong></li>\n</ol>\n<p>既不是不写，也不是狂写一气。看到这里你可能有些疑惑？写测试还加快速度？Are you kidding?</p>\n<p>一个一个来解释吧。</p>\n<p>举个简化版本的例子，『用户下单』到『用户收货』。</p>\n<ol>\n<li>用户『查询产品』</li>\n<li>用户『使用优惠券』下单</li>\n<li>用户『在线支付』。当然，用户也可以让不付款，让订单失效。或者直接取消订单。</li>\n<li>商家『确认发货』。</li>\n<li>物流公司更新运单『发货中』。</li>\n<li>用户『确认收货』。当然，用户也可以发起退款。</li>\n</ol>\n<h3 id=\"让新手更快的了解代码\"><a class=\"v-toc-item\" href=\"#让新手更快的了解代码\">#</a> 让新手更快的了解代码</h3>\n<p>测试用例里的数据，往往是能跑通某段代码的最佳测试数据集合。</p>\n<p>假如，有个程序员写了 『下单-在线支付-确认收货』的集成测试。作为刚接手这段代码的人。可以在最短的时间内，通过阅读测试代码从而理解整个流程。</p>\n<p>有 fixture, 新手可以在很短的时间内知道 setup 能让项目跑起来的基本数据</p>\n<p>当然，如果过多的写了测试，也会导致阅读起来比较困难。</p>\n<h3 id=\"让发布代码的时候更加有底气\"><a class=\"v-toc-item\" href=\"#让发布代码的时候更加有底气\">#</a> 让发布代码的时候更加有底气</h3>\n<p>写测试，是为了验证代码运行正确。</p>\n<p>一个流程，通常包含若干个子流程，子流程是对的，整个流程才是对的。</p>\n<p>如果不写测试对一些关键的流程进行全面的覆盖，则会导致</p>\n<ol>\n<li>修改或者新增了一个子流程，需要重新跑个流程进行人肉测试。</li>\n<li>如果人肉测试太费事，则一般程序员就会跳过这个步骤导致线上出问题。</li>\n</ol>\n<h3 id=\"让程序更容易重构\"><a class=\"v-toc-item\" href=\"#让程序更容易重构\">#</a> 让程序更容易重构</h3>\n<p>当你知道写测试代码有这么多优点的之后，你的第一反应是，这我都知道，但是，写测试还能加快开发速度？</p>\n<blockquote>\n<p>当然，你要知道，一个需要去维护的有价值的产品，往往需要不断的修改流程。</p>\n</blockquote>\n<p>一开始，PM 告诉你只需要下单买个东西，后来，要加上满减券，再后来要加上各种类型的券，然后你要对接第三方服务，接下来你要对付各种不按照你设定的流程出牌的用户…</p>\n<p>写测试，则是通过不断的补充一些测试，实现整个流程的测试自动化。形成一套测试该项目的测试代码。流程长的令人发指，你指望全靠人肉来测试？</p>\n<ol>\n<li>当我修改或者新增子流程的时候，在已经构建出来的测试代码上，可以花少量的代码直接保证修改或者新增的子流程输入和输出被测试到位。</li>\n<li>多人合作的时候，如果 A 原先维护了一套子流程，而 B 来改了一波 A 写的子流程。在有适当的测试的情况下，基本上改出问题来，都会跑不过测试的。</li>\n</ol>\n<p>当然，前提是</p>\n<ol>\n<li>A 用心写了测试，而不是写了仅仅能让 A 的代码跑的过去的测试。</li>\n<li>是测试如果写过多的话，也会造成团队精力的分散。这下面谈到测试的缺点的时候就会知道。</li>\n</ol>\n<h3 id=\"加快团队的开发速度\"><a class=\"v-toc-item\" href=\"#加快团队的开发速度\">#</a> 加快团队的开发速度</h3>\n<p>虽然说，我写的是加快团队的开发速度，但实际上，也适用于个人。</p>\n<blockquote>\n<p><strong>除非，你是写渲染页面的… 所见即所得。无需任何测试</strong></p>\n</blockquote>\n<h2 id=\"0x03-为什么不要写测试\"><a class=\"v-toc-item\" href=\"#0x03-为什么不要写测试\">#</a> 0x03 为什么不要写测试</h2>\n<p>依照软件界著名的『没有银弹』理论，说完了测试的优越性，也要来说说测试的局限性，主要有三点：</p>\n<ol>\n<li><strong>测试不能解决什么问题？</strong></li>\n<li><strong>不适当的测试，往往是负担。</strong></li>\n<li><strong>并不是所有地方都容易测试的。</strong></li>\n</ol>\n<h3 id=\"测试不能解决的问题\"><a class=\"v-toc-item\" href=\"#测试不能解决的问题\">#</a> 测试不能解决的问题</h3>\n<blockquote>\n<p>测试能确保代码的运行质量，但无法确保代码编写质量，也无法保证产品设计逻辑上的问题。</p>\n</blockquote>\n<p>也就是说</p>\n<ol>\n<li><strong>代码写的烂，测试代码只能确保编写代码是可以正常运行的。并不能改善代码质量。最多给烂代码的重构提供比较好的运行保证。</strong></li>\n<li><strong>产品设计逻辑上的问题，测试代码也只能保证这个设计逻辑落地。</strong></li>\n</ol>\n<blockquote>\n<p>当你觉得测试代码写起来比较难受的时候，你应该考虑重构一下你的程序了。</p>\n</blockquote>\n<h3 id=\"不适当的测试为什么是负担\"><a class=\"v-toc-item\" href=\"#不适当的测试为什么是负担\">#</a> 不适当的测试为什么是负担</h3>\n<p>人总要习惯的是：</p>\n<ol>\n<li>东西，学，是学不完的。未知的东西永远存在。新的事物总是在出现，老的事物也不断在演进。</li>\n<li>时间有限，精力有限</li>\n</ol>\n<blockquote>\n<p><strong>放到测试上来说，测试，也是测不完的。</strong></p>\n</blockquote>\n<p>写了一个 IF ELSE , 你需要测两组，多写了一个 IF ELSE, 你就要测四组。如果是一个比较复杂的流程的话，基本上全面测试就很难写完了。</p>\n<p><strong>我的想法是：</strong></p>\n<ol>\n<li><strong>挑选关键的地方进行测试</strong></li>\n<li><strong>减少用户不必要的数据获取</strong></li>\n</ol>\n<h3 id=\"并不是所有地方都容易测试的\"><a class=\"v-toc-item\" href=\"#并不是所有地方都容易测试的\">#</a> 并不是所有地方都容易测试的</h3>\n<p>并不是所有地方都容易测试的。</p>\n<ol>\n<li>特别依赖其他服务商的业务。比如，支付宝 / 微信的预支付。微信小程序的登陆。</li>\n<li>跨端的业务。</li>\n</ol>\n<p>这类业务如果做的比较深入，需要 Mock 掉很多逻辑。</p>\n<h2 id=\"0x04-写-python-测试的一些注意事项\"><a class=\"v-toc-item\" href=\"#0x04-写-python-测试的一些注意事项\">#</a> 0x04 写 Python 测试的一些注意事项</h2>\n<h3 id=\"项目的环境隔离\"><a class=\"v-toc-item\" href=\"#项目的环境隔离\">#</a> 项目的环境隔离</h3>\n<p>从整体项目角度，代码的运行环境应该区分 Local/Test/Stage/Prod 四种环境。</p>\n<ul>\n<li>本地环境：开发者电脑上的环境</li>\n<li>测试环境：开发者电脑上 / 持续集成上的环境，之前比较喜欢用 GitlabCI, 后来 团队上了 jenkins, 用起来也还行。</li>\n<li>预发布环境：预发布环境，对后端来说，通常情况下就是前端可以通过调用 API 的环境。</li>\n<li>生产环境：生产环境。</li>\n</ul>\n<p>之所以要做这种区分，是因为不同的环境侧重点不同。</p>\n<ul>\n<li>Local 环境 针对开发者设置的，这个环境的代码变更比较频繁。Web 应用 / Worker / Beat / Deamon 在本地环境中，一般报错比较多，一般我会在禁掉日志。</li>\n<li>Test 环境 用于执行 make lint &amp;&amp; make test，用于检查 lint 相关代码并运行测试。</li>\n<li>Stage 环境</li>\n<li>Prod 环境 和 Stage 环境就比较接近了。但也不完全一致。比如生产环境的组织或商家的一些开发资料。</li>\n</ul>\n<h3 id=\"测试的基本环境\"><a class=\"v-toc-item\" href=\"#测试的基本环境\">#</a> 测试的基本环境</h3>\n<p>一般起一个 Docker-Compose 文件，来快速初始化测试环境。</p>\n<p>比如 WebApp / Celery Worker / Celery Beats / Redis / RabbitMQ / MySQL 可以 make start 直接起这些服务。</p>\n<h3 id=\"单测-功测-端对端\"><a class=\"v-toc-item\" href=\"#单测-功测-端对端\">#</a> 单测 / 功测 / 端对端</h3>\n<p>之前说，后端需要注意下面的测试</p>\n<ul>\n<li><strong>单元测试</strong></li>\n<li><strong>功能测试</strong></li>\n<li><strong>端对端测试</strong></li>\n<li>性能测试</li>\n</ul>\n<blockquote>\n<p>性能测试一般可以通过监控来提前对系统在哪些地方有瓶颈。看场景，一般观察监控会更加容易预测系统的瓶颈，这个更多偏向于调优，放到后面来说吧。</p>\n</blockquote>\n<p>框架假设我们使用 Flask , 再假设有这么一个 BBS（我知道你想吐槽为什么又拿博客 /BBS 举例子，懒得交代过多的业务场景背景知识了，逃…）</p>\n<ol>\n<li><strong>组织 Organization 发布了一个 Thread</strong></li>\n<li><strong>用户 User 在这个 Thread 进行了 Reply 『未注册的用户能看见』</strong></li>\n<li><strong>管理员 Admin 发现了 User 似乎发布了不该发布的信息。删 Reply。『未注册的用户看不见 / 所有者是能看见的』</strong></li>\n<li><strong>最后 User 进行申诉，Admin 发现其实发布的东西挺 OK 的，给予通过。『未注册的用户能看见』</strong></li>\n</ol>\n<pre><code class=\"language-bash\">tests # 测试文件目录\n├── __init__<span class=\"token punctuation\">.</span>py\n├── conftest<span class=\"token punctuation\">.</span>py # 这里存放可能被子目录引用到的集合\n├── e2e # 『端对端测试』\n│   ├── __init__<span class=\"token punctuation\">.</span>py\n│   ├── test_viewer<span class=\"token punctuation\">.</span>py\n│   ├── test_user<span class=\"token punctuation\">.</span>py\n│   ├── test_admin<span class=\"token punctuation\">.</span>py\n│   └── test_organization<span class=\"token punctuation\">.</span>py\n├── functional # 『功能测试』\n│   ├── __init__<span class=\"token punctuation\">.</span>py\n│   ├── test_do_simple_reply<span class=\"token punctuation\">.</span>py\n│   ├── test_do_complex_reply<span class=\"token punctuation\">.</span>py\n│   └── test_helper<span class=\"token punctuation\">.</span>py\n├── unit # 『单元测试』\n<span class=\"token operator\">|</span>   ├── __init__<span class=\"token punctuation\">.</span>py\n<span class=\"token operator\">|</span>   ├── test_auth<span class=\"token punctuation\">.</span>py\n<span class=\"token operator\">|</span>   └── test_calc_some_thing<span class=\"token punctuation\">.</span>py\n├── test_auth_helper<span class=\"token punctuation\">.</span>py # 存放基本的用于切换身份的代码\n├── test_const<span class=\"token punctuation\">.</span>py\n└── test_factory_helper<span class=\"token punctuation\">.</span>py # 可以用来批量初始化数据\n</code></pre>\n<p>这个流程并不算复杂，但足以写测试了。</p>\n<ol>\n<li><strong>在 test_factory_helper 完成数据的基本初始化。</strong></li>\n<li><strong>在端对端测试中简单测试浏览。包含未注册用户 viewer 的访问，user/admin/org 的带有效 / 无效 / 过期登陆凭据访问</strong></li>\n<li><strong>在 unit 中测试一些和业务联系不紧密的逻辑。比如，计算时间</strong></li>\n<li><strong>在 functional 进行比较独立的测试。有的时候也会把几个功能拉起来做测试。相对独立的测试，就是新建一个 User 的 Thread, 删除 Reply, 拉起来测试就是 1/2/3/4 一个测试就完了。</strong></li>\n</ol>\n<p>前者比较简单，后者相对而言更加靠近集成测试。各有利弊。我一般在关键流程上多做几个拉起来测试的代码。</p>\n<p>但拉起来测试要解决的问题就多了一个，即，用户登陆认证。你调用某个 Service 的时候，是以匿名用户 / 用户身份 / Admin / Org 调用的。</p>\n<p>即在调用不同的 Service 解决问题的时候，你可能需要快速的切换身份。切换完身份再速<br>\n度切换回来。于是，test auth helper 出来了。helper 里面有个 switch as 函数，每次需<br>\n要切换身份的时候，把 g 变量里面的登陆快照 g.user g.admin <a href=\"https://link.zhihu.com/?target=http%3A//g.org\">http://g.org</a> push 到 LocalStack 栈里 (from werkzeug.local import LocalStack), 调用完 Service 再 Pop 出来。</p>\n<p>拉起来测试的效果是这样子的。</p>\n<pre><code class=\"language-python\">def <span class=\"token function\">test_complex_process</span><span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">with</span> <span class=\"token function\">switch_as_org</span><span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> org<span class=\"token operator\">:</span>\t\t# <span class=\"token number\">1.</span> 组织 Organization 发布了一个 Thread\n\t\tthread <span class=\"token operator\">=</span> <span class=\"token function\">publish_thread_by_org</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">with</span> <span class=\"token function\">switch_as_user</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> user<span class=\"token operator\">:</span> # <span class=\"token number\">2.</span> 用户 User 在这个 Thread 进行了 Reply\n\t\t\treply <span class=\"token operator\">=</span> <span class=\"token function\">reply_thread</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span>\n\t\t\tassert reply\n\t\t\t<span class=\"token keyword\">with</span> <span class=\"token function\">switch_as_anonymous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> anonymous_user<span class=\"token operator\">:</span>\n\t\t\t\t_thread <span class=\"token operator\">=</span> <span class=\"token function\">see_thread</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span>\n\t\t\t\tassert reply <span class=\"token keyword\">in</span> _thread<span class=\"token punctuation\">.</span>replies # 『未注册的用户能看见』\n\t\t\t<span class=\"token keyword\">with</span> <span class=\"token function\">switch_as_admin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> admin<span class=\"token operator\">:</span> # <span class=\"token number\">3.</span> 管理员 Admin 发现了 User 似乎发布了不该发布的信息。删 Reply。\n\t\t\t\t<span class=\"token function\">delete_reply</span><span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span>\n\t\t\t\tassert reply<span class=\"token punctuation\">.</span>deleled\n\t\t\t<span class=\"token keyword\">with</span> <span class=\"token function\">switch_as_anonymous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> anonymous_user<span class=\"token operator\">:</span>『未注册的用户看不见』\n\t\t\t\t_thread <span class=\"token operator\">=</span> <span class=\"token function\">see_thread</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span>\n\t\t\t\tassert reply not <span class=\"token keyword\">in</span> _thread<span class=\"token punctuation\">.</span>replies\n\t\t\t# 在这里，我的身份还是 user\n\t\t\t_thread <span class=\"token operator\">=</span> <span class=\"token function\">see_thread</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span>\n\t\t\tassert reply <span class=\"token keyword\">in</span> _thread<span class=\"token punctuation\">.</span>replies # 『Ower 用户能看见』\n\t\t# <span class=\"token number\">4.</span> 最后 User 进行申诉，Admin 发现其实发布的东西挺 <span class=\"token constant\">OK</span> 的，给予通过。『未注册的用户能看见』\n</code></pre>\n<p>作为开发者，你只需要让这个测试跑通就基本开发完毕了。在这个过程中，你也可以更好的梳理你的代码。</p>\n<h3 id=\"如何处理外部服务\"><a class=\"v-toc-item\" href=\"#如何处理外部服务\">#</a> 如何处理外部服务</h3>\n<p>在拉起来做测试的时候，假如我们多了一个流程，用户可以通过微信支付赞赏 reply, 这就不得不依赖于外部的服务。</p>\n<p>而拉起来做测试的时候，就会遇到一个非常尴尬的问题，因为我上面的接口都粒度都比较大，是赞赏这个流程里面的非常小的流程，必须要走微信的 http 请求。</p>\n<p>解决方式也很简单。 mock 掉请求微信的函数。手动调用一下支付回调函数，即可。</p>\n<p>当然，对于 http 请求，也可以使用 <strong>responses</strong> 这个神器来快速 mock 神器 requests 的 response</p>\n<p>大致的用法如下</p>\n<pre><code class=\"language-python\">def <span class=\"token function\">mock_success_pay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    def <span class=\"token function\">request_callback</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function\">dispatch_callback</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> resp_body\n\n    responses<span class=\"token punctuation\">.</span><span class=\"token function\">add_callback</span><span class=\"token punctuation\">(</span>\n        responses<span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">PAY_URL</span><span class=\"token punctuation\">,</span>\n        callback<span class=\"token operator\">=</span>request_callback<span class=\"token punctuation\">,</span>\n        content_type<span class=\"token operator\">=</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n@responses<span class=\"token punctuation\">.</span>activate\ndef <span class=\"token function\">test_pay</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">mock_success_pay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">switch_as_user</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u<span class=\"token operator\">:</span>\n\t\t\torder <span class=\"token operator\">=</span> <span class=\"token function\">pay_order</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n\t\tassert order<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">\"PAID\"</span>\n</code></pre>\n<h3 id=\"其他-pytest-小技巧\"><a class=\"v-toc-item\" href=\"#其他-pytest-小技巧\">#</a> 其他 Pytest 小技巧</h3>\n<p>有的时候 ipdb 比 pdb 用起来不止好了一点点。如何在 pytest 里用上呢？</p>\n<pre><code class=\"language-bash\">pytest <span class=\"token operator\">-</span>v <span class=\"token operator\">--</span>pdb <span class=\"token operator\">--</span>pdbcls<span class=\"token operator\">=</span>IPython<span class=\"token punctuation\">.</span>terminal<span class=\"token punctuation\">.</span>debugger<span class=\"token operator\">:</span>Pdb\n</code></pre>\n<h2 id=\"0xee-参考\"><a class=\"v-toc-item\" href=\"#0xee-参考\">#</a> 0xEE 参考</h2>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/21017354/answer/589574939\">https://www.zhihu.com/question/21017354/answer/589574939</a></li>\n<li><a href=\"https://www.zhihu.com/question/312395573/answer/604772703\">https://www.zhihu.com/question/312395573/answer/604772703</a></li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-%E6%B5%8B%E8%AF%95%E7%9A%84%E5%88%86%E7%B1%BB\">0x01 测试的分类</a>\n<ul>\n<li><a href=\"#%E5%90%8E%E7%AB%AF%E4%B8%BB%E8%A6%81%E5%85%B3%E6%B3%A8%E5%93%AA%E4%BA%9B%E6%B5%8B%E8%AF%95\">后端主要关注哪些测试</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%86%99%E6%B5%8B%E8%AF%95\">0x02 为什么要写测试</a>\n<ul>\n<li><a href=\"#%E8%AE%A9%E6%96%B0%E6%89%8B%E6%9B%B4%E5%BF%AB%E7%9A%84%E4%BA%86%E8%A7%A3%E4%BB%A3%E7%A0%81\">让新手更快的了解代码</a></li>\n<li><a href=\"#%E8%AE%A9%E5%8F%91%E5%B8%83%E4%BB%A3%E7%A0%81%E7%9A%84%E6%97%B6%E5%80%99%E6%9B%B4%E5%8A%A0%E6%9C%89%E5%BA%95%E6%B0%94\">让发布代码的时候更加有底气</a></li>\n<li><a href=\"#%E8%AE%A9%E7%A8%8B%E5%BA%8F%E6%9B%B4%E5%AE%B9%E6%98%93%E9%87%8D%E6%9E%84\">让程序更容易重构</a></li>\n<li><a href=\"#%E5%8A%A0%E5%BF%AB%E5%9B%A2%E9%98%9F%E7%9A%84%E5%BC%80%E5%8F%91%E9%80%9F%E5%BA%A6\">加快团队的开发速度</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%A6%81%E5%86%99%E6%B5%8B%E8%AF%95\">0x03 为什么不要写测试</a>\n<ul>\n<li><a href=\"#%E6%B5%8B%E8%AF%95%E4%B8%8D%E8%83%BD%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\">测试不能解决的问题</a></li>\n<li><a href=\"#%E4%B8%8D%E9%80%82%E5%BD%93%E7%9A%84%E6%B5%8B%E8%AF%95%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%9F%E6%8B%85\">不适当的测试为什么是负担</a></li>\n<li><a href=\"#%E5%B9%B6%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E5%9C%B0%E6%96%B9%E9%83%BD%E5%AE%B9%E6%98%93%E6%B5%8B%E8%AF%95%E7%9A%84\">并不是所有地方都容易测试的</a></li>\n</ul>\n</li>\n<li><a href=\"#0x04-%E5%86%99-python-%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">0x04 写 Python 测试的一些注意事项</a>\n<ul>\n<li><a href=\"#%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%8E%AF%E5%A2%83%E9%9A%94%E7%A6%BB\">项目的环境隔离</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83\">测试的基本环境</a></li>\n<li><a href=\"#%E5%8D%95%E6%B5%8B-%E5%8A%9F%E6%B5%8B-%E7%AB%AF%E5%AF%B9%E7%AB%AF\">单测 / 功测 / 端对端</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1\">如何处理外部服务</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96-pytest-%E5%B0%8F%E6%8A%80%E5%B7%A7\">其他 Pytest 小技巧</a></li>\n</ul>\n</li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83\">0xEE 参考</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}