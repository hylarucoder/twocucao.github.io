{"pageProps":{"post":{"tags":["FCPX"],"path":"20181210_PyCode_01.md","title":"用 Type Annotation 提升你的 Python 代码健壮性","slug":"用 Type Annotation 提升你的 Python 代码健壮性","date":"2018-12-10","category":"整洁Python代码","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h1 id=\"用-type-annotation-提升你的-python-代码健壮性\"><a class=\"v-toc-item\" href=\"#用-type-annotation-提升你的-python-代码健壮性\">#</a> 用 Type Annotation 提升你的 Python 代码健壮性</h1>\n<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>本文是《提升你的 Python 项目代码健壮性和性能》系列的第一篇文章。</p>\n<p>当我刚知道 Python 要添加类型的时候，我的内心是拒绝的。</p>\n<p>Why, Why, Why? 就是因为不喜欢类型，也不喜欢特别动态的语言。</p>\n<p>但是，尝试了俩个疗程之后，腰也不疼了，腿也不疼了，走起路来都有劲了</p>\n<blockquote>\n<p>嗯，真香。</p>\n</blockquote>\n<h2 id=\"0x01-why-type-annotation\"><a class=\"v-toc-item\" href=\"#0x01-why-type-annotation\">#</a> 0x01 Why Type Annotation</h2>\n<p>人们常说</p>\n<blockquote>\n<p>动态类型一时爽，代码重构火葬场。</p>\n</blockquote>\n<p>在刚写 Python 的前两年里并没有感受很深。</p>\n<p>直到，开始和别人协作的时候，才发现各种莫名其妙的问题。</p>\n<ol>\n<li>大量的使用魔法方法</li>\n<li>flake8 分析出某个函数过于复杂</li>\n<li>send_message 里面有不少的参数，一不小心就传参错误</li>\n<li>None 值</li>\n</ol>\n<p>动态类型给人极大的灵活性，写的时候很爽，但如果解放了双手，撸起袖子一通写，自己写起来爽了，自己重构的时候或者其他人来看代码的时候，头发就会加速掉落。</p>\n<p>聪明的你很容易反问，只要我们团队不犯这些错误，不就好了么？</p>\n<p>是的，当我们讨论 Python Annotation 的时候，往往陷入类型之争。</p>\n<p>我并不想讨论静态类型和动态类型孰好孰坏。</p>\n<p>我想讨论的是<strong>加了 Typing 极大的提升代码的健壮性。</strong></p>\n<p>先从 Gradual Typing 说起吧。</p>\n<h2 id=\"0x02-gradual-typing\"><a class=\"v-toc-item\" href=\"#0x02-gradual-typing\">#</a> 0x02 Gradual Typing</h2>\n<p>在你刚入门一门编程语言的时候，我们常常说，Java 是强类型静态语言，Python 是强类型动态语言</p>\n<p>从这两位诞生开始，静态类型和动态类型就一直进行旷日持久的圣战。</p>\n<p>然而，而现在的发展趋势是：</p>\n<ul>\n<li>静态类型的语言觉得自己太过静态，以至于写起来很啰嗦。于是引入了很多类型推断。 Java / Go</li>\n<li>动态类型的语言觉得自己太过动态，以至于协作的过程中总是出现低级错误。于是引入了 Gradual Typing , Typescript / Flow / Python Type Annotation</li>\n</ul>\n<p>什么是 Gradual Typing?</p>\n<p>Gradual typing 允许开发者仅在程序的部分地区使用 Annotate/Type. 即，既不是黑猫（静态）, 也不是白猫（动态），从而诞生了熊猫（动静结合）。</p>\n<p>话说回来，要知道为什么这么搞，首先要知道动态类型和静态类型会给程序带来什么。</p>\n<h3 id=\"静态类型-vs-动态类型\"><a class=\"v-toc-item\" href=\"#静态类型-vs-动态类型\">#</a> 静态类型 VS 动态类型</h3>\n<p>静态类型的语言，比如在写 Java 的时候，如果你把一个 int 赋值给了 string 的变量，IDE 会通过<strong>类型检查器</strong>立即报错并告诉你，你这个值赋值错啦。这个就是 Java 程序的检查阶段。 动态类型的语言，比如在写<br>\nPython 的时候，如果不用一些额外的手段，这种低级的错误，并不会在检查时爆出来，只会在运行时爆出来。如果线上还是出这个问题，就蛋疼了。</p>\n<p>为了进行友好的讨论，本人将精分成 Javaer 和 Pythonist, 通过两人对话的方式，来讨论类型。</p>\n<ul>\n<li>\n<p>Javaer: 我先喝杯咖啡</p>\n</li>\n<li>\n<p>Pythonist: 生命苦短，我用 Python。</p>\n</li>\n<li>\n<p>Javaer: P 哥，请（为什么叫 P 哥？Python 1989 年出生，Java 1995 年）</p>\n</li>\n<li>\n<p>Pythonist: J 弟，请</p>\n</li>\n<li>\n<p>Javaer: 静态类型可以较低成本的提早捕获 BUG, 比如：</p>\n<ol>\n<li>你在写 Python 的时候，如果不用一些额外的手段，这种低级的错误，并不会在检查时爆出来，只会在运行时爆出来。</li>\n<li>如果线上还是出这个问题，就蛋疼了。我这个类型检查可以在<strong>使用 IDE 的时候给我分析出方法参数的类型和返回值</strong>。所谓『上医治未病，中医治已病，下医治大病』, 防范于未然，善之善者也。</li>\n</ol>\n</li>\n<li>\n<p>Python: 等等，你小子还广征博引了还，首先，提早捕获 Bug, 我这里也有呀，比如我这里可以通过 flake8 来检查出有些没有定义的变量，<strong>仅仅是类型没有检查而已</strong>。其次，IDE<br>\n给我的补全又不是完全无法补全。弱一点罢了。你说的类型检查的问题：</p>\n<ol>\n<li>可以通过<strong>提升程序员的素质</strong>来解决这个问题，或者让他们长点脑子，别特么在这种低级错误上犯错误。</li>\n<li>写测试来<strong>提升测试代码的代码覆盖率</strong>（这个我会在本系列的第二篇文章里深入讲解）来解决这个问题</li>\n<li>看看写的代码检查时出现问题，我完全可以<strong>把代码拖到 IPython 里面跑一遍</strong>。这可不仅仅能解决类型不正确带来的问题，还能快速解决代码的逻辑问题</li>\n</ol>\n</li>\n<li>\n<p>Java: 关于你说的第三点，我完全可以提升测试代码的覆盖率。哎？似乎我这个开发测试成本也上来了。看来<strong>类型检查也不能解决这个问题</strong></p>\n</li>\n<li>\n<p>Javaer: 来 P 哥</p>\n<ol>\n<li>静态类型确实以<strong>较低的成本</strong>解决了这种类型的问题，不是么？</li>\n<li>并且，如果我其中一小块功能进行了修改，我总不能每次都跑 IPython 吧？我也不能因为想检查一下类型这种小操作就写测试代码覆盖一下？</li>\n</ol>\n</li>\n<li>\n<p>Python: 你每次修改，都要加类型，加类型，改类型，直到类型检查器完全接受。不麻烦嘛？面向类型检查器编程？</p>\n</li>\n<li>\n<p>Javaer: 来，</p>\n<ol>\n<li>每次改代码的时候，又不是改一大推，你是小部分改的，能有多少项目是海量海量改？高内聚，低耦合，模块化开发。</li>\n<li>好的代码是重构出来的，修改你的类型来让类型检查器通过。你的代码会被更好的组织起来。</li>\n<li>我大 Java 就是面向重构的语言！我有 Jetbrain 的 IDE, 重构代码我怕谁</li>\n</ol>\n</li>\n<li>\n<p>Python: 来，你说的没错，</p>\n<ol>\n<li><strong>每次改代码的时候，又不是改一大推，你是小部分改的</strong>。这话你说的没错，我也能用啊，因为代码总是一小部分一小部分改的，所以，改完了跑一下 IPython 就结了。</li>\n<li>好的代码是重构出来的，修改你的类型来让类型检查器通过。你的代码会被更好的组织起来。这话你说的也没错，可<strong>我重构的时候没有写测试就重构</strong>，是不是有点莽撞？写了测试了，我还要花时间在类型检查器上，不啰嗦么？</li>\n<li>我也有 Jetbrain 的 IDE, 重构代码我又不是不能重构。</li>\n</ol>\n</li>\n<li>\n<p>Python: 再来，</p>\n<ol>\n<li>需求变更上来了，结果往往会出现，你本来是想专注于业务逻辑的更改的，但最后变成了大型<strong>为了让类型检查器通过类型检查而艰苦奋斗的现场</strong>, 我这个场景直接传 int/str/ 字典 / 传对象就很方便，你非要让我写四个函数来<br>\noverride 方法。</li>\n<li>虽然说，好代码确实可以通过重构出来，但动态语言表达能力强呀，你 Java HashMap 啰啰嗦嗦 put 写了半天，我 Python 一个 Dict 一把梭，看起来，清晰，改起来方便。</li>\n</ol>\n</li>\n</ul>\n<p>再比如说，</p>\n<p>LeetCode 上面有一道题目，叫做最长连续 1</p>\n<p>Input 是 [1,1,0,1,1,1] Output 是 3</p>\n<p>我们尝试用 Python 来看下</p>\n<pre><code class=\"language-python\">def <span class=\"token function\">find_max_consecutive_ones</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>lambda x<span class=\"token operator\">:</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>我们尝试用 Java 来看下</p>\n<pre><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> int <span class=\"token function\">findMaxConsecutiveOnes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">int<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tint result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tint tmp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\ttmp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\ttmp <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\tresult <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>Javaer: 啊咧？P 哥你确实有点短啊！</li>\n<li>Pythonist: 你敢说我短？你看看 java 的创始人的头发！</li>\n</ul>\n<p>『贴图』</p>\n<ul>\n<li>\n<p>Javaer: 我不是那个意思，浓缩就是精华嘛，表达能力弱又怎么样，我 Javaer 可以直接封装好这个功能当成工具类用，从外部使用上用起来差不多好吧，从项目角度表达力并不是决定性因素，静态类型检查可以提早在编译阶段做字节码优化。你的<br>\nGIL…</p>\n</li>\n<li>\n<p>Pythonist: 好了，咱就不要提 GIL 了</p>\n</li>\n<li>\n<p>Pythonist: 动态类型不需要花时间写 type annotation, 写起来速度杠杠的。</p>\n</li>\n<li>\n<p>Javaer: 静态语言一时爽，动态类型火葬场好伐？举个例子，太动态的东西，就是不好做类型推断，比如贵圈的著名的 sqlalchemy 做的那么动态，query.get() 结合 flask<br>\n来用，YouModel.query.get() 出来的 YouModel 你还要点进去查看一下具体属性，你要用 title 还是 name, 拼错了，怎么办？都不报错的。</p>\n</li>\n<li>\n<p>Javaer: 静态类型迫使你思考程序的时候更加严谨认真，这将会提升你的代码质量。</p>\n</li>\n<li>\n<p>Pythonist: 这点我是不服的，你只是花费了大量的时间在类型检查上，写的认不认真不完全取决于你编程的水平和态度好伐？假如你的观点成立，语言只是武器，峨眉师太拿一把倚天剑，不还是被张三丰空手取来？</p>\n</li>\n<li>\n<p>Javaer: 但你不能否认，峨眉师太拿着倚天剑确实可以秒杀很多人。</p>\n</li>\n</ul>\n<blockquote>\n<p>旁白君：有道是，梅须逊雪三分白，雪却输梅一段香。</p>\n</blockquote>\n<ul>\n<li>Guido van Rossum: 好了，我觉得类型不错，我在 dropbox 带领团队实现了 python 的 typing，python 3.7 内置哦。</li>\n<li>Pythonist: 我自己打脸一下，动态类型花点时间写 type annotation 代码健壮性杠杠的。</li>\n<li>Javaer: 你走开… 你怎么不去解决 GIL 的问题。</li>\n</ul>\n<h3 id=\"静态类型-动态类型\"><a class=\"v-toc-item\" href=\"#静态类型-动态类型\">#</a> 静态类型 + 动态类型</h3>\n<p>Gradual Typing 就是在动态语言的基础上，增加了可选的类型声明 (Type Annotation)</p>\n<p>这对于我这种人是福音，</p>\n<p>对于我个人而言，我是希望 Python 是有类型的</p>\n<ol>\n<li>作为某段程序的开发者和维护者，我可以提升我重构的速度。</li>\n<li>作为某段程序的调用方，可以快速的知道我调用后得到的东西究竟是什么。</li>\n</ol>\n<p>但我又不希望这个声明不是强制性的</p>\n<ol>\n<li>我在构思程序的时候，想专注于接口的设计。在落实编码并且把代码写的足够的 dry 之后，在被调用的一些地方加上类型声明，这样可以提升我写代码的速度。</li>\n</ol>\n<h2 id=\"0x03-python-typing-实战-mypy\"><a class=\"v-toc-item\" href=\"#0x03-python-typing-实战-mypy\">#</a> 0x03 Python Typing 实战 - MyPY</h2>\n<h3 id=\"mypy\"><a class=\"v-toc-item\" href=\"#mypy\">#</a> MyPy</h3>\n<p>mypy 是一个可选的静态分析器，官网介绍上说，mypy 将使你的程序更加易懂，调试和维护。</p>\n<p>这个程序</p>\n<ul>\n<li>对于 PHP 有 Hack , 对 JavaScript 有 Flow 和 TypeScript, 对于 Python 有 MyPy</li>\n<li>对于 Python, 则有 MyPy , MyPy 彼时还不是很成熟 (2016 年 10 之前）。</li>\n</ul>\n<p>Dropbox 的团队开发，Guido van Rossum 领导开发</p>\n<h3 id=\"快速入门\"><a class=\"v-toc-item\" href=\"#快速入门\">#</a> 快速入门</h3>\n<p>本小节部分摘录 Type hints cheat sheet</p>\n<p>建议读者收藏原网址 <a href=\"https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html\">https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html</a></p>\n<pre><code class=\"language-python\"># 内置类型\nx<span class=\"token operator\">:</span> int <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nx<span class=\"token operator\">:</span> float <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\nx<span class=\"token operator\">:</span> bool <span class=\"token operator\">=</span> True\nx<span class=\"token operator\">:</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span>\nx<span class=\"token operator\">:</span> bytes <span class=\"token operator\">=</span> b<span class=\"token string\">\"test\"</span>\n\nchild<span class=\"token operator\">:</span> bool\n<span class=\"token keyword\">if</span> age <span class=\"token operator\">&lt;</span> <span class=\"token number\">18</span><span class=\"token operator\">:</span>\n    child <span class=\"token operator\">=</span> True\n<span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\n    child <span class=\"token operator\">=</span> False\n\n# 普通函数\ndef <span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> str<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n# 生成器\ndef <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Iterable<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">yield</span> i\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n</code></pre>\n<p>直接看起来似乎，加不加 typing 对现在的代码改善并不是很明显嘛。</p>\n<p>我们可以给复杂类型起别名：</p>\n<pre><code class=\"language-python\">比如：\ndef <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Union<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span>Dict<span class=\"token punctuation\">[</span>Tuple<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Set<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Tuple<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>\ndef <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Union<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span>Dict<span class=\"token punctuation\">[</span>Tuple<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Set<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Tuple<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>\n\nAliasType <span class=\"token operator\">=</span> Union<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span>Dict<span class=\"token punctuation\">[</span>Tuple<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Set<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Tuple<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\ndef <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> AliasType<span class=\"token operator\">:</span>\n    <span class=\"token operator\">...</span>\ndef <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> AliasType<span class=\"token operator\">:</span>\n    <span class=\"token operator\">...</span>\n</code></pre>\n<p>看起来还行，但还是没有感觉到很明显的代码质量改善。</p>\n<p>好，再看一例，使用 ClassVar 禁止属性无法在实例上设置</p>\n<pre><code class=\"language-python\">from typing <span class=\"token keyword\">import</span> ClassVar\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token operator\">:</span>\n    x<span class=\"token operator\">:</span> ClassVar<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  # Class variable only\n\n<span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>  # <span class=\"token constant\">OK</span>\n\na <span class=\"token operator\">=</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  # Error<span class=\"token operator\">:</span> Cannot assign to <span class=\"token keyword\">class</span> <span class=\"token class-name\">variable</span> <span class=\"token string\">\"x\"</span> via instance\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>  # <span class=\"token constant\">OK</span> <span class=\"token operator\">--</span> can be read through an instance\n</code></pre>\n<p>举个例子，flask-sqlalchemy, 可以通过 YouModel.query.get(id) 来拿到 YouModel 的实例，但 IDE 不能推断出这个实例是什么。</p>\n<pre><code class=\"language-python\"># 方法一，Cast\nyou_model_ins<span class=\"token operator\">:</span> YouModel <span class=\"token operator\">=</span> YouModel<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n# 方法二，包装一下 <span class=\"token keyword\">get</span> 方法\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">YouModel</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\tdef <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"YouModel\"</span><span class=\"token operator\">:</span> # 注意这里的字符串\n\t\tpass\nyou_model_ins <span class=\"token operator\">=</span> YouModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>细心的读者可能看到这里的 YouModel 的返回值类型居然使用了 YouModel 的字符串，如果是 Java 的话，是可以直接写 YouModel 的。</p>\n<pre><code class=\"language-python\"># 加上类型延迟求值\nfrom __future__ <span class=\"token keyword\">import</span> annotations\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">YouModel</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\tdef <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> YouModel<span class=\"token operator\">:</span>\n\t\tpass\nyou_model_ins <span class=\"token operator\">=</span> YouModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>还有其他的用法，请参考 MyPY 的官方文档</p>\n<h2 id=\"0x04-常见问题\"><a class=\"v-toc-item\" href=\"#0x04-常见问题\">#</a> 0x04 常见问题</h2>\n<h3 id=\"如何忽略-mypy-警告\"><a class=\"v-toc-item\" href=\"#如何忽略-mypy-警告\">#</a> 如何忽略 mypy 警告</h3>\n<p>有的地方的代码不进行检查的话会方便很多。</p>\n<p>与 flake8 类似，在注释后面写上标志就可以忽略了。</p>\n<pre><code class=\"language-bash\">youcode  # type<span class=\"token operator\">:</span> igonre\n</code></pre>\n<h3 id=\"循环导入\"><a class=\"v-toc-item\" href=\"#循环导入\">#</a> 循环导入</h3>\n<p>我现在有两个文件，一个是 <a href=\"http://user.py\">user.py</a> 另一个是 <a href=\"http://order.py\">order.py</a></p>\n<p>在 user 里面有个方法需要返回 order 里面的 Order 列表，order 里面有个 order.owner 需要返回 User 实例。</p>\n<p>如果不用类型声明的话，在 user 需要 order 的时候 import 进来即可规避循环导入。</p>\n<p>在使用类型声明之后，建议在 user 里面这么写</p>\n<pre><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token constant\">TYPE_CHECKING</span><span class=\"token operator\">:</span>\n    from project<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>order <span class=\"token keyword\">import</span> Order # noqa\n\n</code></pre>\n<h2 id=\"0x05-typing-anotation-项目最佳实践\"><a class=\"v-toc-item\" href=\"#0x05-typing-anotation-项目最佳实践\">#</a> 0x05 Typing Anotation 项目最佳实践</h2>\n<p>通过本文了解了基本的 Typing Anotation 的用法，其实效果还不够，本着对爱学习的读者老爷的负责的态度。</p>\n<p>所谓『纸上得来终觉浅，绝知此事要宫刑』, 哦不『躬行』</p>\n<p>推荐一个超级牛的大项目来让大家了解一下 typing annotation 的最佳实践。</p>\n<p><a href=\"https://github.com/zulip/zulip/\">https://github.com/zulip/zulip/</a></p>\n<p>当然，从这个项目里面不仅仅能学到 typing annotation, 还能学到大项目下，牛 X 的公司的做法</p>\n<ol>\n<li>如何组织和划分模块</li>\n<li>如何帮助开发者快速启用开发环境。</li>\n<li>如何做测试，如何做 CI</li>\n<li>如何优化自己的 Workflow</li>\n</ol>\n<p>有机会的话，我会挑其中的一小部分讲解一下。</p>\n<h2 id=\"0xee-参考\"><a class=\"v-toc-item\" href=\"#0xee-参考\">#</a> 0xEE 参考</h2>\n<h3 id=\"pep\"><a class=\"v-toc-item\" href=\"#pep\">#</a> PEP</h3>\n<ul>\n<li>PEP 3107</li>\n<li>PEP 483</li>\n</ul>\n<h3 id=\"扩展文章\"><a class=\"v-toc-item\" href=\"#扩展文章\">#</a> 扩展文章</h3>\n<ul>\n<li><a href=\"http://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/\">关于 gradual typing</a></li>\n<li><a href=\"https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html\">https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html</a></li>\n<li><a href=\"https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/\">https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/</a></li>\n<li><a href=\"https://www.zhihu.com/question/21017354/answer/589574939\">https://www.zhihu.com/question/21017354/answer/589574939</a></li>\n</ul>\n<hr>\n<p>ChangeLog:</p>\n<ul>\n<li><strong>2018-11-25</strong> 初始化本文</li>\n<li><strong>2019-02-16</strong> 重新整理文章</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li><a href=\"#%E7%94%A8-type-annotation-%E6%8F%90%E5%8D%87%E4%BD%A0%E7%9A%84-python-%E4%BB%A3%E7%A0%81%E5%81%A5%E5%A3%AE%E6%80%A7\">用 Type Annotation 提升你的 Python 代码健壮性</a>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-why-type-annotation\">0x01 Why Type Annotation</a></li>\n<li><a href=\"#0x02-gradual-typing\">0x02 Gradual Typing</a>\n<ul>\n<li><a href=\"#%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B-vs-%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B\">静态类型 VS 动态类型</a></li>\n<li><a href=\"#%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B-%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B\">静态类型 + 动态类型</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-python-typing-%E5%AE%9E%E6%88%98-mypy\">0x03 Python Typing 实战 - MyPY</a>\n<ul>\n<li><a href=\"#mypy\">MyPy</a></li>\n<li><a href=\"#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\">快速入门</a></li>\n</ul>\n</li>\n<li><a href=\"#0x04-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">0x04 常见问题</a>\n<ul>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E5%BF%BD%E7%95%A5-mypy-%E8%AD%A6%E5%91%8A\">如何忽略 mypy 警告</a></li>\n<li><a href=\"#%E5%BE%AA%E7%8E%AF%E5%AF%BC%E5%85%A5\">循环导入</a></li>\n</ul>\n</li>\n<li><a href=\"#0x05-typing-anotation-%E9%A1%B9%E7%9B%AE%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\">0x05 Typing Anotation 项目最佳实践</a></li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83\">0xEE 参考</a>\n<ul>\n<li><a href=\"#pep\">PEP</a></li>\n<li><a href=\"#%E6%89%A9%E5%B1%95%E6%96%87%E7%AB%A0\">扩展文章</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}