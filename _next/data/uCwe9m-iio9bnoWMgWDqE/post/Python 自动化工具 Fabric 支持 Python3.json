{"pageProps":{"post":{"tags":["Python","DevOps"],"path":"20180523_Fabric2.md","title":"Python 自动化工具 Fabric 支持 Python3","slug":"Python 自动化工具 Fabric 支持 Python3","date":"2018-05-23","category":"DevOps","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>当大家还在纠结 Python2 与 Python3 的时候，我其实早就入了 python3 的门了。</p>\n<p>后来</p>\n<ul>\n<li><del>我总算学会了如何去爱。<del></li>\n<li>我喜欢的工具陆陆续续支持了 Python3</li>\n<li>Scrapy 支持了 Python3</li>\n<li>Ansible 支持了 Python3</li>\n</ul>\n<p>只有 Fabric 这个工具，死撑着没有支持 Python3 的的迹象。</p>\n<p>2018-05-08 的时候，Fabric 悄悄升级了 2.0 版本。</p>\n<p>而就在前两天，我升级网站的时候，突然发现 fabric (1.14 版本） 不能用了。</p>\n<p>查了一下版本，发现 fabric 更新到了 2.0 版本，支持了 python3.4</p>\n<p>在发现这个问题之后，火速刷了一波官方文档，把手头 Fabric 1.14 版本的脚本做了一些升级。</p>\n<h3 id=\"从-v1-到-v2\"><a class=\"v-toc-item\" href=\"#从-v1-到-v2\">#</a> 从 V1 到 V2</h3>\n<p>Fabric v2 基于 invoke 和 paramiko 两个库构建而成。</p>\n<ul>\n<li>invoke 库提供了 subprocess command execution 和 command-line</li>\n<li>paramiko 提供了 ssh 协议实现</li>\n</ul>\n<p>在这两者的基础上，做了一些扩展。</p>\n<p>甚至，如果你只用其中的本地功能，你都完全不需要使用 fabric, 直接用 invoke 即可。没错，我已经打算把我的本地脚本全部使用 invoke Python3 化了。</p>\n<p>v1 版本和 v2 版本初步用起来，个人觉得 v1 用起来 API 更加符合直觉一些。</p>\n<p>这东西怎么用呢？</p>\n<p>我们先定义 fabfile</p>\n<pre><code># fabfile.py\nfrom invoke import task\n\ndef expand_path(c, path):\n    return '&quot;$(echo %s)&quot;' % path\n\ndef exists(c, path):\n    cmd = 'stat %s' % expand_path(c, path)\n    return c.run(cmd, warn=True, hide=True).ok\n\n@task\ndef deploy(c):\n    c.local(&quot;youcmd&quot;)\n    c.put()\n    c.get()\n    c.run()\n    c.run(&quot;sudo youcmd&quot;)\n    ......\n\n@task\ndef other_stuff(c):\n    ......\n</code></pre>\n<p>需要注意的是，invoke 里面默认的 replace_env 设置为了 False ,fabric 里面给 runner 设置了 replace_env 为 True , 这也就意味着默认情况下，执行 c.local 的时候会找不到自定义的环境变量，这意味着：</p>\n<ol>\n<li>你的 PATH 被重置了，这意味着你用 brew 安装的软件可能已经完全找不到了。</li>\n<li>你的环境变量 LANG 并不一定是 en_US.UTF-8 了</li>\n</ol>\n<p>于是设置一下。</p>\n<pre><code># ~/.fabric.py\n#!/usr/bin/env python\n# encoding: utf-8\n\nrun = {\n    &quot;replace_env&quot;: False\n}\n</code></pre>\n<p>当我要部署的时候直接执行</p>\n<pre><code>fab -H webserver01,webserver02,webserver03,webserver04 deploy\n</code></pre>\n<p>到这里大家基本上看出来了，我并没有在文件中 import fabric 只是简单了配置了一个配置文件和执行一下 fab 命令。</p>\n<p>这个 v2 版本的 fabric 相当于 invoke 的包装。但我们也可以显式的 import fabric 里面的东西进行更加进阶的操作。</p>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a>\n<ul>\n<li><a href=\"#%E4%BB%8E-v1-%E5%88%B0-v2\">从 V1 到 V2</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}