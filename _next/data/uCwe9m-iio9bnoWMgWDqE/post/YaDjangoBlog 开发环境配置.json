{"pageProps":{"post":{"tags":["Python","Django","YaDjangoBlog"],"path":"20180222_YaDjangoBlog开发环境配置.md","title":"YaDjangoBlog 开发环境配置","slug":"YaDjangoBlog 开发环境配置","date":"2018-02-22","category":"Django","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>本文是 Django 全栈开发教程的第一篇，上一篇是第零篇，目录会随时更新，地址在这里 2018 年不容错过的 Django 全栈项目 <a href=\"https://zhuanlan.zhihu.com/p/33903527\">https://zhuanlan.zhihu.com/p/33903527</a></p>\n<blockquote>\n<p>为什么是第零篇，因为程序员从零计数呀。笑~~</p>\n</blockquote>\n<p>本文需要完成两件事情：</p>\n<ul>\n<li>配置基本的开发环境</li>\n<li>让代码先运行一下</li>\n</ul>\n<p>如果你使用的 macOS, 那么可以跟着下文一步一步走。如果是 linux/window 用户，可能稍微需要在配置环境上多花点时间。</p>\n<blockquote>\n<p>本文默认你至少会在 iTerm2 下面使用基本的 bash 命令与 git , 如果使用的 ohmyzsh 就更好了。 建议先参考请查看我之前的文章里面的配置环境 如何优雅地使用 macOS <a href=\"https://zhuanlan.zhihu.com/p/29892969\">https://zhuanlan.zhihu.com/p/29892969</a></p>\n</blockquote>\n<h2 id=\"0x01-python-开发环境配置\"><a class=\"v-toc-item\" href=\"#0x01-python-开发环境配置\">#</a> 0x01 Python 开发环境配置</h2>\n<p>本小节的目的就是配置好基本的 python 开发环境</p>\n<p>使用了神器 pyenv</p>\n<blockquote>\n<p>BTW: 为什么不直接用 pipenv ? 因为网络不通畅，如若不然，pipenv 比 pyenv 更适合用来做 python 依赖包管理。</p>\n</blockquote>\n<pre><code class=\"language-python\"># 新开终端\ngit clone https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>yyuu<span class=\"token operator\">/</span>pyenv<span class=\"token punctuation\">.</span>git <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>pyenv\ngit clone https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>yyuu<span class=\"token operator\">/</span>pyenv<span class=\"token operator\">-</span>virtualenv<span class=\"token punctuation\">.</span>git <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>pyenv<span class=\"token operator\">/</span>plugins<span class=\"token operator\">/</span>pyenv<span class=\"token operator\">-</span>virtualenv\necho <span class=\"token string\">'export PYENV_ROOT=\"$HOME/.pyenv\"'</span> <span class=\"token operator\">>></span> <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>zshrc\necho <span class=\"token string\">'export PATH=\"$PYENV_ROOT/bin:$PATH\"'</span> <span class=\"token operator\">>></span> <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>zshrc\necho <span class=\"token string\">'eval \"$(pyenv init -)\"'</span> <span class=\"token operator\">>></span> <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>zshrc\necho <span class=\"token string\">'eval \"$(pyenv virtualenv-init -)\"'</span> <span class=\"token operator\">>></span> <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>zshrc\n\n# 接着另开终端\n# 不喜写兼容代码，所有代码均向 <span class=\"token number\">3.5</span><span class=\"token operator\">+</span> 靠拢\nv<span class=\"token operator\">=</span><span class=\"token number\">3.5</span><span class=\"token number\">.2</span><span class=\"token operator\">|</span>wget http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mirrors<span class=\"token punctuation\">.</span>sohu<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>python<span class=\"token operator\">/</span>$v<span class=\"token operator\">/</span>Python<span class=\"token operator\">-</span>$v<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>xz <span class=\"token operator\">-</span><span class=\"token constant\">P</span> <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>pyenv<span class=\"token operator\">/</span>cache<span class=\"token operator\">/</span><span class=\"token punctuation\">;</span>pyenv install $v\nv<span class=\"token operator\">=</span><span class=\"token number\">3.6</span><span class=\"token number\">.0</span><span class=\"token operator\">|</span>wget http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mirrors<span class=\"token punctuation\">.</span>sohu<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>python<span class=\"token operator\">/</span>$v<span class=\"token operator\">/</span>Python<span class=\"token operator\">-</span>$v<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>xz <span class=\"token operator\">-</span><span class=\"token constant\">P</span> <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>pyenv<span class=\"token operator\">/</span>cache<span class=\"token operator\">/</span><span class=\"token punctuation\">;</span>pyenv install $v\nv<span class=\"token operator\">=</span><span class=\"token number\">2.7</span><span class=\"token number\">.11</span><span class=\"token operator\">|</span>wget http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mirrors<span class=\"token punctuation\">.</span>sohu<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>python<span class=\"token operator\">/</span>$v<span class=\"token operator\">/</span>Python<span class=\"token operator\">-</span>$v<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>xz <span class=\"token operator\">-</span><span class=\"token constant\">P</span> <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>pyenv<span class=\"token operator\">/</span>cache<span class=\"token operator\">/</span><span class=\"token punctuation\">;</span>pyenv install $v\n\n# 设置 Global Python 为 <span class=\"token number\">2.7</span><span class=\"token number\">.11</span><span class=\"token punctuation\">,</span> 备注：尽量不要把 Py3 设置为全局，否则由于 Homebrew 本身有一些依赖是依赖于 Py2 的，这样容易出现一些奇怪的问题。\npyenv global <span class=\"token number\">2.7</span><span class=\"token number\">.11</span>\npip install <span class=\"token operator\">-</span>i https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>pypi<span class=\"token punctuation\">.</span>doubanio<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>simple requests\n# 下面这个是用于安装基本的代码补全功能\npip install <span class=\"token operator\">-</span>i https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>pypi<span class=\"token punctuation\">.</span>doubanio<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>simple <span class=\"token operator\">--</span>upgrade <span class=\"token string\">\"jedi>=0.9.0\"</span> <span class=\"token string\">\"json-rpc>=1.8.1\"</span> <span class=\"token string\">\"service_factory>=0.1.5\"</span> flake8 pytest autoflake hy\n\n# 创建最常用 Py3 虚拟环境\npyenv virtualenv <span class=\"token number\">3.5</span><span class=\"token number\">.2</span> py3<span class=\"token operator\">-</span>daily\npyenv activate py3<span class=\"token operator\">-</span>daily\npip install <span class=\"token operator\">-</span>i https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>pypi<span class=\"token punctuation\">.</span>doubanio<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>simple requests\npip install <span class=\"token operator\">-</span>i https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>pypi<span class=\"token punctuation\">.</span>doubanio<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>simple beatutifulsoup4\npip install <span class=\"token operator\">-</span>i https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>pypi<span class=\"token punctuation\">.</span>doubanio<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>simple ipython<span class=\"token punctuation\">[</span>notebook<span class=\"token punctuation\">]</span>\npip install <span class=\"token operator\">-</span>i https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>pypi<span class=\"token punctuation\">.</span>doubanio<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>simple jupyter\n# 下面这个是用于安装基本的代码补全功能\npip install <span class=\"token operator\">-</span>i https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>pypi<span class=\"token punctuation\">.</span>doubanio<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>simple <span class=\"token operator\">--</span>upgrade <span class=\"token string\">\"jedi>=0.9.0\"</span> <span class=\"token string\">\"json-rpc>=1.8.1\"</span> <span class=\"token string\">\"service_factory>=0.1.5\"</span> flake8 pytest autoflake hy\n</code></pre>\n<p>好，Python 环境就安装完毕了。</p>\n<h2 id=\"0x02-javascript-开发环境配置\"><a class=\"v-toc-item\" href=\"#0x02-javascript-开发环境配置\">#</a> 0x02 JavaScript 开发环境配置</h2>\n<blockquote>\n<p>本小节的目的就是配置好基本的 JS 开发环境，但估计 JSer 看了本小节依旧可以在配置上少一些麻烦。</p>\n</blockquote>\n<p>JS 可以前后端通吃，社区生态很丰富。ES6 之后从 python 和 ruby 里面借鉴了不少语法糖。现在写起来还是比较愉悦的。</p>\n<p>JavaScript 不管开发前端应用还是后端应用，都需要安装 node 环境。</p>\n<pre><code class=\"language-bash\"># 先安装 nvm\ncurl <span class=\"token operator\">-</span>o<span class=\"token operator\">-</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>raw<span class=\"token punctuation\">.</span>githubusercontent<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>creationix<span class=\"token operator\">/</span>nvm<span class=\"token operator\">/</span>v0<span class=\"token punctuation\">.</span><span class=\"token number\">33.8</span><span class=\"token operator\">/</span>install<span class=\"token punctuation\">.</span>sh <span class=\"token operator\">|</span> bash\n# 新开终端\nnvm install <span class=\"token number\">8</span>\nnvm use <span class=\"token number\">8</span>\nnvm alias <span class=\"token keyword\">default</span> <span class=\"token number\">8</span>\n\nnpm install cnpm\ncnpm install yarn <span class=\"token operator\">-</span>g\n# 设置镜像\nyarn config <span class=\"token keyword\">set</span> registry https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>registry<span class=\"token punctuation\">.</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org\n</code></pre>\n<p>编辑 ~/.npmrc 配置文件，输入下文再配置各种奇奇怪怪的镜像地址。</p>\n<pre><code class=\"language-bash\">registry<span class=\"token operator\">=</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">registry.npm.taobao.org</span><span class=\"token regex-delimiter\">/</span></span>\nchromedriver_cdnurl<span class=\"token operator\">=</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token punctuation\">.</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>dist<span class=\"token operator\">/</span>chromedriver\ndisturl<span class=\"token operator\">=</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>dist\noperadriver_cdnurl<span class=\"token operator\">=</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token punctuation\">.</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>dist<span class=\"token operator\">/</span>operadriver\nphantomjs_cdnurl<span class=\"token operator\">=</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token punctuation\">.</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>dist<span class=\"token operator\">/</span>phantomjs\nfse_binary_host_mirror<span class=\"token operator\">=</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>mirrors<span class=\"token operator\">/</span>fsevents\nsass_binary_site<span class=\"token operator\">=</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token punctuation\">.</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>dist<span class=\"token operator\">/</span>node<span class=\"token operator\">-</span>sass\nelectron_mirror<span class=\"token operator\">=</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token punctuation\">.</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>dist<span class=\"token operator\">/</span>electron<span class=\"token operator\">/</span>\n</code></pre>\n<p>配置完毕</p>\n<h2 id=\"0x03-docker-安装与配置\"><a class=\"v-toc-item\" href=\"#0x03-docker-安装与配置\">#</a> 0x03 Docker 安装与配置</h2>\n<blockquote>\n<p>本小节主要解决一个最蛋疼的问题，就是网络问题</p>\n</blockquote>\n<p>下载并安装 docker for mac 地址如下 <a href=\"https://docs.docker.com/docker-for-mac/install/\">https://docs.docker.com/docker-for-mac/install/</a></p>\n<pre><code class=\"language-bash\"># 安装成功后运行命令\ndocker run hello<span class=\"token operator\">-</span>world\n</code></pre>\n<p>如果一切正常，则会显示如下</p>\n<pre><code class=\"language-bash\">$ docker run hello<span class=\"token operator\">-</span>world\nUnable to find image <span class=\"token string\">'hello-world:latest'</span> locally\nlatest<span class=\"token operator\">:</span> Pulling from library<span class=\"token operator\">/</span>hello<span class=\"token operator\">-</span>world\nca4f61b1923c<span class=\"token operator\">:</span> Pull complete\nDigest<span class=\"token operator\">:</span> sha256<span class=\"token operator\">:</span><span class=\"token number\">083</span>de497cff944f969d8499ab94f07134c50bcf5e6b9559b27182d3fa80ce3f7\nStatus<span class=\"token operator\">:</span> Downloaded newer image <span class=\"token keyword\">for</span> hello<span class=\"token operator\">-</span>world<span class=\"token operator\">:</span>latest\n\nHello from Docker<span class=\"token operator\">!</span>\nThis message shows that your installation appears to be working correctly<span class=\"token punctuation\">.</span>\n\nTo generate <span class=\"token keyword\">this</span> message<span class=\"token punctuation\">,</span> Docker took the following steps<span class=\"token operator\">:</span>\n <span class=\"token number\">1.</span> The Docker client contacted the Docker daemon<span class=\"token punctuation\">.</span>\n <span class=\"token number\">2.</span> The Docker daemon pulled the <span class=\"token string\">\"hello-world\"</span> image from the Docker Hub<span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">(</span>amd64<span class=\"token punctuation\">)</span>\n <span class=\"token number\">3.</span> The Docker daemon created a <span class=\"token keyword\">new</span> <span class=\"token class-name\">container</span> from that image which runs the\n    executable that produces the output you are currently reading<span class=\"token punctuation\">.</span>\n <span class=\"token number\">4.</span> The Docker daemon streamed that output to the Docker client<span class=\"token punctuation\">,</span> which sent it\n    to your terminal<span class=\"token punctuation\">.</span>\n\nTo <span class=\"token keyword\">try</span> something more ambitious<span class=\"token punctuation\">,</span> you can run an Ubuntu container <span class=\"token keyword\">with</span><span class=\"token operator\">:</span>\n $ docker run <span class=\"token operator\">-</span>it ubuntu bash\n\nShare images<span class=\"token punctuation\">,</span> automate workflows<span class=\"token punctuation\">,</span> and more <span class=\"token keyword\">with</span> a free Docker <span class=\"token constant\">ID</span><span class=\"token operator\">:</span>\n https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">cloud.docker.com</span><span class=\"token regex-delimiter\">/</span></span>\n\nFor more examples and ideas<span class=\"token punctuation\">,</span> visit<span class=\"token operator\">:</span>\n https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>docs<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>engine<span class=\"token operator\">/</span>userguide<span class=\"token operator\">/</span>\n</code></pre>\n<p>好，配置到这里。</p>\n<p>你以为你已经配置好了，还先别激动，网络问题还没解决呢。小的镜像可以直接从 Docker 上直接拖下来，几百兆的镜像可就没这么容易了。</p>\n<p>这里我们使用了阿里云的 Docker 容器镜像。</p>\n<p>登录阿里云，到控制台，找到容器镜像服务，镜像加速器，</p>\n<p>如下图：</p>\n<p>右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Daemon 标签（Docker 17.03 之前版本为 Advanced 标签）下的 Registry mirrors 列表中将 <a href=\"https://your-url.mirror.aliyuncs.com\">https://your-url.mirror.aliyuncs.com</a> 加到&quot;registry-mirrors&quot;的数组里，点击 Apply &amp; Restart 按钮，等待 Docker 重启并应用配置的镜像加速器。</p>\n<p>Docker 配置完毕。</p>\n<h2 id=\"0x04-项目试运行\"><a class=\"v-toc-item\" href=\"#0x04-项目试运行\">#</a> 0x04 项目试运行</h2>\n<p>运行项目之前，保持你我的工作环境基本一致</p>\n<ul>\n<li>创建一些必须的目录</li>\n<li>clone 项目</li>\n</ul>\n<pre><code class=\"language-bash\">mkdir <span class=\"token operator\">-</span>p <span class=\"token operator\">~</span><span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>YaBlog<span class=\"token operator\">/</span>DockerVolume<span class=\"token operator\">/</span>YaDjangoBlog<span class=\"token operator\">/</span>PostgreSQL<span class=\"token operator\">/</span>data\nmkdir <span class=\"token operator\">-</span>p <span class=\"token operator\">~</span><span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>YaBlog<span class=\"token operator\">/</span>DockerVolume<span class=\"token operator\">/</span>YaDjangoBlog<span class=\"token operator\">/</span>Redis<span class=\"token operator\">/</span>data\nmkdir <span class=\"token operator\">-</span>p <span class=\"token operator\">~</span><span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>YaBlog<span class=\"token operator\">/</span>DockerVolume<span class=\"token operator\">/</span>YaDjangoBlog<span class=\"token operator\">/</span>Backups\ncd <span class=\"token operator\">~</span><span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>YaBlog<span class=\"token operator\">/</span>\ngit clone git@github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span>twocucao<span class=\"token operator\">/</span>YaVueBlog<span class=\"token punctuation\">.</span>git\ngit clone git@github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span>twocucao<span class=\"token operator\">/</span>YaDjangoBlog<span class=\"token punctuation\">.</span>git\n</code></pre>\n<p>克隆下来项目之后还需要稍微折腾一下（没办法，CURD 开发 = 折腾折腾折腾 + 搬砖搬砖搬砖）</p>\n<ul>\n<li>运行 Vue 开发环境</li>\n<li>运行 Docker 化的 django 环境</li>\n</ul>\n<pre><code class=\"language-bash\"># 新开一个终端 用于运行 Vue 应用\n# 前端环境不放在 Docker 环境中。（因为开发环境没必要，生产环境才需要）\ncd <span class=\"token operator\">~</span><span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>YaBlog<span class=\"token operator\">/</span>YaVueBlog<span class=\"token operator\">/</span> <span class=\"token operator\">&amp;&amp;</span> yarn <span class=\"token operator\">&amp;&amp;</span> cd <span class=\"token operator\">-</span>\ncd <span class=\"token operator\">~</span><span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>YaBlog<span class=\"token operator\">/</span>YaVueBlog<span class=\"token operator\">/</span>packages<span class=\"token operator\">/</span>theme<span class=\"token operator\">-</span>future<span class=\"token operator\">/</span> <span class=\"token operator\">&amp;&amp;</span> yarn <span class=\"token operator\">&amp;&amp;</span> cd <span class=\"token operator\">-</span>\ncd <span class=\"token operator\">~</span><span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>YaBlog<span class=\"token operator\">/</span>YaVueBlog<span class=\"token operator\">/</span>\nnpm run build<span class=\"token operator\">:</span>theme\nnpm run dev\n</code></pre>\n<pre><code class=\"language-bash\"># 新开一个终端\ncd <span class=\"token operator\">~</span><span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>YaBlog<span class=\"token operator\">/</span>YaDjangoBlog<span class=\"token operator\">/</span>\nmake\n</code></pre>\n<p>看到下图，包含所有的命令。</p>\n<p>这是我用 Makefile 编写的一系列命令，方便我在开发过程将主要的精力花在业务逻辑上而不是花时间在强记大量的琐碎的命令。</p>\n<pre><code class=\"language-bash\">cd <span class=\"token operator\">~</span><span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>YaBlog<span class=\"token operator\">/</span>YaDjangoBlog<span class=\"token operator\">/</span>\nmake build<span class=\"token operator\">-</span>all\n# 等待运行后端所有组件\n</code></pre>\n<p>然后，读者可以先去泡杯咖啡点个外卖吃个饭之类的。等待构建完毕。</p>\n<p>需要注意的是，务必配置好 docker 镜像加速地址，否则根据国内情况，你可能需要多去泡几杯咖啡，多吃几顿饭。</p>\n<p>好，接下来我们运行后端程序，首次运行需要花费不少时间</p>\n<pre><code class=\"language-bash\">cd <span class=\"token operator\">~</span><span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>YaBlog<span class=\"token operator\">/</span>YaDjangoBlog<span class=\"token operator\">/</span>\nmake django<span class=\"token operator\">-</span>just<span class=\"token operator\">-</span>up\n</code></pre>\n<p>运行之后，终端结果如下：</p>\n<p>可以发现，服务已经都开始启动了。</p>\n<p>但不要冲动，先等等，因为一次开了如下的服务：</p>\n<ul>\n<li>postgres</li>\n<li>redis</li>\n<li>elasticsearch</li>\n<li>mailhog</li>\n<li>django</li>\n<li>celerybeat</li>\n<li>celeryworker</li>\n<li>celeryflower</li>\n</ul>\n<p>需要多等会儿时间到各个服务运行正常。直到出现下图：</p>\n<p>这意味着基本上所有的程序都运行正常了。如果有服务挂掉，欢迎到 github 的 issue 上提一下。</p>\n<pre><code class=\"language-bash\"># 接着再新开一个终端 用于导入基础数据\ncd <span class=\"token operator\">~</span><span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>YaBlog<span class=\"token operator\">/</span>YaDjangoBlog<span class=\"token operator\">/</span>\nmake django<span class=\"token operator\">-</span><span class=\"token keyword\">import</span><span class=\"token operator\">-</span>articles\n</code></pre>\n<p>好，那么，我们来验证一下如下几个地址：</p>\n<ul>\n<li>接口地址 <a href=\"http://localhost:8000/api/v1/archive\">http://localhost:8000/api/v1/archive</a></li>\n<li>Vue 地址 <a href=\"http://localhost:8080/\">http://localhost:8080/</a></li>\n<li>在搜索框内输入 elasticsearch 查看接口是否正常返回数据</li>\n<li>查看 celery 的 task 是否正确</li>\n</ul>\n<p>如果一切正常，则所有的截图应该如下</p>\n<h2 id=\"0x05-tmux-和-tmuxinator\"><a class=\"v-toc-item\" href=\"#0x05-tmux-和-tmuxinator\">#</a> 0x05 Tmux 和 Tmuxinator</h2>\n<p>我们在上文中可以发现有个极其蛋疼菊紧的问题。</p>\n<p>当我们运行 make django-just-up 这个命令的时候，所有服务运行的同时，所有的标准输入都打印到一个终端。</p>\n<p>这个和我们日常开发不太相同</p>\n<ol>\n<li>在 django 开发的时候，我们运行 runserver, 肯定是只想在那个终端里看到 runserver 的运行情况。而不是 Redis,Elasticsearch,PGsql 之类的 log。</li>\n<li>并且，django 的热加载会有些小问题，有些错误只能 ctrl+c 关掉 runserver, 然后重启。但当我们想 ctrl+c 关掉 runserver 的时候，却把所有的的服务都关掉了。</li>\n</ol>\n<p>解决方式也简单：</p>\n<p>对于暂时不想在开发时看到日志的服务，干脆直接放后台运行，执行我封装的命令 make django-before-up 把部分服务直接放在后台里，然后再开四个终端，运行下面的命令。</p>\n<ul>\n<li>make django-runserver # 运行 runserver , 并只把该容器的 log 打印出来。下面三者同上。</li>\n<li>make django-celerybeat</li>\n<li>make django-celeryworker</li>\n<li>make django-celeryflower</li>\n</ul>\n<p>显然还是很麻烦，我这种懒人可是能少写几行代码就少些几行代码的。</p>\n<p>那么我们还可以更省事（懒一些）么？</p>\n<p>我之前写了一篇简单的 tmux 与 Tmuxinator 教程 <a href=\"https://zhuanlan.zhihu.com/p/33369297\">https://zhuanlan.zhihu.com/p/33369297</a> , 具体配置步骤参考文中即可。</p>\n<p>配置好 Tmuxinator 之后</p>\n<pre><code class=\"language-bash\"># 先软连接一下\nln <span class=\"token operator\">-</span>svf <span class=\"token operator\">~</span><span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>YaBlog<span class=\"token operator\">/</span>YaDjangoBlog<span class=\"token operator\">/</span>yadjangoblog<span class=\"token punctuation\">.</span>yml <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>tmuxinator<span class=\"token operator\">/</span>yadjangoblog<span class=\"token punctuation\">.</span>yml\n</code></pre>\n<p>当我需要运行的所有服务的时候，我只需要</p>\n<pre><code class=\"language-bash\">tmuxinator start yadjangoblog\n</code></pre>\n<p>就可以开启所有命令。</p>\n<p>yadjangoblog.yml 的内容如下</p>\n<pre><code>windows:\n  - &quot;前端-页面开发&quot;:\n      root: ~/Codes/YaBlog/YaVueBlog/\n      layout: main-vertical\n      panes:\n        - &quot;前端页面 DEV&quot;:\n          - &quot;npm run dev&quot;\n  - &quot;前端-CSS 与字体文件&quot;:\n      root: ~/Codes/YaBlog/YaVueBlog/\n      layout: main-vertical\n      panes:\n        - &quot;npm run dev:theme&quot;\n        - &quot;npm run dev:iconfont&quot;\n  - &quot;后端-Django 及其服务&quot;:\n      root: ~/Codes/YaBlog/YaDjangoBlog/\n      layout: main-vertical\n      panes:\n        - &quot;make django-before-up &amp;&amp; make django-runserver&quot;\n  - &quot;后端-数据库相关&quot;:\n      layout: main-vertical\n      root: ~/Codes/YaBlog/YaDjangoBlog/\n      panes:\n        - &quot;sleep 20 &amp;&amp; make dbshell&quot;\n        - &quot;sleep 20 &amp;&amp; make shell&quot;\n  - &quot;后端-Celery&quot;:\n      layout: main-vertical\n      root: ~/Codes/YaBlog/YaDjangoBlog/\n      panes:\n        - &quot;sleep 20 &amp;&amp; make django-celerybeat&quot;\n        - &quot;sleep 20 &amp;&amp; make django-celeryworker&quot;\n</code></pre>\n<h2 id=\"0x06-pycharm-基本设置\"><a class=\"v-toc-item\" href=\"#0x06-pycharm-基本设置\">#</a> 0x06 PyCharm 基本设置</h2>\n<blockquote>\n<p>大家应该都用 PyCharm 进行开发了吧。 如果是的话，不看本小节可能会让你栽个跟头</p>\n</blockquote>\n<pre><code class=\"language-bash\"># 这步是给 pycharm 打开代码做准备\npyenv activate py3<span class=\"token operator\">-</span>daily\npip install <span class=\"token operator\">-</span>i https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>pypi<span class=\"token punctuation\">.</span>doubanio<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>simple <span class=\"token operator\">-</span>r requirements<span class=\"token operator\">/</span>local<span class=\"token punctuation\">.</span>txt\n</code></pre>\n<p>务必完成下面两个步骤</p>\n<ol>\n<li>在 Preferences -&gt; project -&gt; interpreter 选择对应的 py3-daily 虚拟环境。</li>\n<li>在侧边栏把 yadjangoblog , 注意小写的。右键标记为 sources root</li>\n</ol>\n<p>这样的标记相当于告诉 PyCharm , 这个项目的 PYTHONPATH 是 yadjangoblog/ , 否则使用 PyCharm 导入 AModel 会自动导入 from yadjangoblog.yaadmin.models from AModel 而不是 from yaadmin.models import AModel , 这会导致程序运行错误。</p>\n<blockquote>\n<p>PS: 包括后面跑单元测试的时候，均手动设置了 PYTHONPATH 变量。</p>\n</blockquote>\n<h2 id=\"0x07-开发流程\"><a class=\"v-toc-item\" href=\"#0x07-开发流程\">#</a> 0x07 开发流程</h2>\n<p>本小节，从笔者开机开始，回顾一下环境配置好之后，笔者是如何进入开发状态的：</p>\n<ol>\n<li>开机。输入密码进入桌面。</li>\n<li>打开 Iterm, 运行 tmuxinator start yadjangoblog 开启项目。打开 PyCharm 和 WebStorm</li>\n<li>开发</li>\n</ol>\n<ul>\n<li>在 WebStorm 中写写前端代码，在 <a href=\"http://localhost:8080\">http://localhost:8080</a> 和 tmux 里的第一个 window 查看状态</li>\n<li>在 PyCharm 中写写后端代码，在第三个 window 查看 runserver 状态，在第四个 window 的两个 Panel 运行 python <a href=\"http://manage.py\">manage.py</a> 相关命令。</li>\n<li>在 Chrome Elasticsearch Head 扩展里调试 Elasticsearch 语法</li>\n<li>在 <a href=\"http://localhost:8000/api/your-api-path\">http://localhost:8000/api/your-api-path</a> 里调试前后端 API</li>\n<li>在 <a href=\"http://localhost:5555\">http://localhost:5555</a> 通过 flower 查看相关</li>\n<li>…</li>\n<li>当然，你也可以新开一个终端里面，执行 make 查看相关还可以执行哪些命令。</li>\n</ul>\n<p>那么，具体执行这些命令背后究竟发生了什么？</p>\n<ul>\n<li>数十服务为何突然启动</li>\n<li>数百个任务为何半夜消失</li>\n<li>正常运行的服务为何屡屡崩溃</li>\n<li>这一切的背后！是工程师的人性扭曲还是码畜的道德沦丧？是内存的爆发还是处理器的无奈？</li>\n<li>敬请关注本专栏 『MG 的编程小屋』或者 Github 频道，让我们跟随教程走进全干工程师的代码世界。</li>\n</ul>\n<blockquote>\n<p>不好意思，顺手打了个硬广，防止别人把我的文章砍头去尾直接扒过去。</p>\n</blockquote>\n<h2 id=\"0xee-参考链接\"><a class=\"v-toc-item\" href=\"#0xee-参考链接\">#</a> 0xEE. 参考链接</h2>\n<p>还犹豫啥，点赞后，快上车吧</p>\n<ul>\n<li>前端代码 <a href=\"https://github.com/twocucao/YaVueBlog\">https://github.com/twocucao/YaVueBlog</a></li>\n<li>后端代码 <a href=\"https://github.com/twocucao/YaDjangoBlog\">https://github.com/twocucao/YaDjangoBlog</a></li>\n</ul>\n<hr>\n<p>ChangeLog:</p>\n<ul>\n<li><strong>2018-02-22</strong> 重修文字</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-python-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\">0x01 Python 开发环境配置</a></li>\n<li><a href=\"#0x02-javascript-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\">0x02 JavaScript 开发环境配置</a></li>\n<li><a href=\"#0x03-docker-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE\">0x03 Docker 安装与配置</a></li>\n<li><a href=\"#0x04-%E9%A1%B9%E7%9B%AE%E8%AF%95%E8%BF%90%E8%A1%8C\">0x04 项目试运行</a></li>\n<li><a href=\"#0x05-tmux-%E5%92%8C-tmuxinator\">0x05 Tmux 和 Tmuxinator</a></li>\n<li><a href=\"#0x06-pycharm-%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE\">0x06 PyCharm 基本设置</a></li>\n<li><a href=\"#0x07-%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B\">0x07 开发流程</a></li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">0xEE. 参考链接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}