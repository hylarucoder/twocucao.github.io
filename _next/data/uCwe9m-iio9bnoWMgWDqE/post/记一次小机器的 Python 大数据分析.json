{"pageProps":{"post":{"tags":["数据分析"],"path":"20171207_ANoteWithSmallMachineAndBigData.md","title":"记一次小机器的 Python 大数据分析","slug":"记一次小机器的 Python 大数据分析","date":"2017-12-07","category":"Python","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>机缘巧合，最近公司突然要搞一波大量数据的分析。属于客流类的分析。</p>\n<p>数据量级也还算不错，经过 gzip 压缩，接近 400 个 点位的 SQL 文件 (MySQL innoDB)，大小接近 100GB 左右，原始记录数据估测在 180 亿左右。</p>\n<p>解压后… 差不多一个 T 吧。</p>\n<p>如果是人民币玩家，自然是直接购置几十台高配置机器，做个 mysql shard 或者直接上大数据全家桶比如 hadoop 和 hive 之类，让程序员去往死里折腾吧。</p>\n<blockquote>\n<p>嗯，然而对于我这种非人民币玩家，就要用单机硬扛。</p>\n</blockquote>\n<p>那就硬扛呗。</p>\n<p>我手上的机器配置如下：</p>\n<ul>\n<li>\n<p>局域网服务器 （ Ubuntu 16.04 LTS ）</p>\n<ul>\n<li>Xeon® CPU E3-1225 v5 @ 3.30GHz</li>\n<li>16G 内存</li>\n<li>1T 硬盘</li>\n</ul>\n</li>\n<li>\n<p>苹果电脑 2016 年 15 寸 最高配</p>\n<ul>\n<li>1T 硬盘</li>\n<li>i7 四核</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"0x01-准备数据阶段\"><a class=\"v-toc-item\" href=\"#0x01-准备数据阶段\">#</a> 0x01 准备数据阶段</h2>\n<p>用低配机器分析大数据的<strong>首要原则</strong>，就是<strong>不要分析大数据</strong>。</p>\n<p>何也？</p>\n<blockquote>\n<p>就是<strong>尽可能的抽取所得结论所需分析数据的最小超集</strong></p>\n</blockquote>\n<p>小机器是无法完成海量计算的，但通过一定的过滤和筛选可以将数据筛选出到一台机器能扛得住的计算量。从而达到可以可以分析海量数据的目的。</p>\n<h3 id=\"11-将数据导入-mysql-中\"><a class=\"v-toc-item\" href=\"#11-将数据导入-mysql-中\">#</a> 1.1 将数据导入 MySQL 中</h3>\n<p>我们先不管三七二十一，既然给了 SQL 文件，肯定要入库的，那么问题来了：</p>\n<blockquote>\n<p><s>将大象关进冰箱要几个步骤</s></p>\n</blockquote>\n<p>将数据导入数据库中需要几个步骤</p>\n<p>或者说，如何更快的导入 400 张不同表的数据。</p>\n<p>大致步骤如下：</p>\n<ul>\n<li>新增硬盘，并初始化</li>\n<li>配置 MySQL 的 datadir 到新增硬盘上</li>\n<li>导入数据 (PV &amp; MySQL)</li>\n</ul>\n<h4 id=\"新增硬盘并初始化\"><a class=\"v-toc-item\" href=\"#新增硬盘并初始化\">#</a> 新增硬盘，并初始化</h4>\n<p>首先，<strong>购买并插入硬盘</strong></p>\n<p>使用 lshw 查看硬盘信息</p>\n<pre><code class=\"language-bash\">root@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">~</span># lshw <span class=\"token operator\">-</span><span class=\"token constant\">C</span> disk\n  <span class=\"token operator\">*</span><span class=\"token operator\">-</span>disk\n       description<span class=\"token operator\">:</span> <span class=\"token constant\">SCSI</span> Disk\n       product<span class=\"token operator\">:</span> My Passport <span class=\"token number\">25E2</span>\n       vendor<span class=\"token operator\">:</span> <span class=\"token constant\">WD</span>\n       physical id<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token number\">.0</span>\n       bus info<span class=\"token operator\">:</span> scsi@<span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token number\">0.0</span><span class=\"token number\">.0</span>\n       logical name<span class=\"token operator\">:</span> <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sdb\n       version<span class=\"token operator\">:</span> <span class=\"token number\">4004</span>\n       serial<span class=\"token operator\">:</span> <span class=\"token constant\">WX888888HALK</span>\n       size<span class=\"token operator\">:</span> <span class=\"token number\">3725</span><span class=\"token function\">GiB</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span>TB<span class=\"token punctuation\">)</span>\n       capabilities<span class=\"token operator\">:</span> gpt<span class=\"token operator\">-</span><span class=\"token number\">1.00</span> partitioned partitioned<span class=\"token operator\">:</span>gpt\n       configuration<span class=\"token operator\">:</span> ansiversion<span class=\"token operator\">=</span><span class=\"token number\">6</span> guid<span class=\"token operator\">=</span><span class=\"token number\">88e88888</span><span class=\"token operator\">-</span><span class=\"token number\">422</span>d<span class=\"token operator\">-</span><span class=\"token number\">49</span>f0<span class=\"token operator\">-</span><span class=\"token number\">9</span>ba9<span class=\"token operator\">-</span><span class=\"token number\">221</span>db75fe4b4 logicalsectorsize<span class=\"token operator\">=</span><span class=\"token number\">512</span> sectorsize<span class=\"token operator\">=</span><span class=\"token number\">4096</span>\n  <span class=\"token operator\">*</span><span class=\"token operator\">-</span>disk\n       description<span class=\"token operator\">:</span> <span class=\"token constant\">ATA</span> Disk\n       product<span class=\"token operator\">:</span> <span class=\"token constant\">WDC</span> <span class=\"token constant\">WD10EZEX</span><span class=\"token operator\">-</span><span class=\"token number\">08</span>W\n       vendor<span class=\"token operator\">:</span> Western Digital\n       physical id<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token number\">.0</span>\n       bus info<span class=\"token operator\">:</span> scsi@<span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token number\">0.0</span><span class=\"token number\">.0</span>\n       logical name<span class=\"token operator\">:</span> <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sda\n       version<span class=\"token operator\">:</span> <span class=\"token number\">1</span>A01\n       serial<span class=\"token operator\">:</span> <span class=\"token constant\">WD</span><span class=\"token operator\">-</span><span class=\"token constant\">WC888888888U</span>\n       size<span class=\"token operator\">:</span> <span class=\"token number\">931</span><span class=\"token function\">GiB</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>TB<span class=\"token punctuation\">)</span>\n       capabilities<span class=\"token operator\">:</span> partitioned partitioned<span class=\"token operator\">:</span>dos\n       configuration<span class=\"token operator\">:</span> ansiversion<span class=\"token operator\">=</span><span class=\"token number\">5</span> logicalsectorsize<span class=\"token operator\">=</span><span class=\"token number\">512</span> sectorsize<span class=\"token operator\">=</span><span class=\"token number\">4096</span> signature<span class=\"token operator\">=</span>f1b42036\n  <span class=\"token operator\">*</span><span class=\"token operator\">-</span>cdrom\n       description<span class=\"token operator\">:</span> <span class=\"token constant\">DVD</span> reader\n       product<span class=\"token operator\">:</span> <span class=\"token constant\">DVDROM</span> <span class=\"token constant\">DH1XXX8SH</span>\n       vendor<span class=\"token operator\">:</span> <span class=\"token constant\">PLDS</span>\n       physical id<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token number\">.0</span>\n       bus info<span class=\"token operator\">:</span> scsi@<span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token number\">0.0</span><span class=\"token number\">.0</span>\n       logical name<span class=\"token operator\">:</span> <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>cdrom\n       logical name<span class=\"token operator\">:</span> <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>dvd\n       logical name<span class=\"token operator\">:</span> <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sr0\n       version<span class=\"token operator\">:</span> <span class=\"token constant\">ML31</span>\n       capabilities<span class=\"token operator\">:</span> removable audio dvd\n       configuration<span class=\"token operator\">:</span> ansiversion<span class=\"token operator\">=</span><span class=\"token number\">5</span> status<span class=\"token operator\">=</span>nodisc\n</code></pre>\n<p>使用 fdisk 格式化硬盘，并且分区</p>\n<pre><code class=\"language-bash\">fdisk <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sdb\n#输入 n\n#输入 p\n#输入 <span class=\"token number\">1</span>\n#输入 w\nsudo mkfs <span class=\"token operator\">-</span>t ext4 <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sdb1\nmkdir <span class=\"token operator\">-</span>p <span class=\"token operator\">/</span>media<span class=\"token operator\">/</span>mynewdrive\nvim <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>fstab\n# <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sdb1    <span class=\"token operator\">/</span>media<span class=\"token operator\">/</span>mynewdrive   ext4    defaults     <span class=\"token number\">0</span>        <span class=\"token number\">2</span>\n# 直接挂载所有，或者 reboot\nmount <span class=\"token operator\">-</span>a\n</code></pre>\n<p>至此为止，硬盘就格式化完成了。</p>\n<blockquote>\n<p>关于安装硬盘，可以参考 <a href=\"https://help.ubuntu.com/community/InstallingANewHardDrive\">https://help.ubuntu.com/community/InstallingANewHardDrive</a></p>\n</blockquote>\n<h4 id=\"配置-mysql\"><a class=\"v-toc-item\" href=\"#配置-mysql\">#</a> 配置 MySQL</h4>\n<p>篇幅有限，只简介具体在 Ubuntu 16.04 上面 配置 MySQL 的 DataDIR ，省去安装和基本登录认证的配置。</p>\n<p>mysql 在 ubuntu 下面默认的路径如下：</p>\n<pre><code class=\"language-bash\"><span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>mysql<span class=\"token operator\">/</span>\n</code></pre>\n<p>我们开始配置 DataDIR</p>\n<pre><code class=\"language-bash\">systemctl stop mysql\nrsync <span class=\"token operator\">-</span>av <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>mysql <span class=\"token operator\">/</span>mnt<span class=\"token operator\">/</span>volume<span class=\"token operator\">-</span>nyc1<span class=\"token operator\">-</span><span class=\"token number\">01</span>\nmv <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>mysql <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>mysql<span class=\"token punctuation\">.</span>bak\nvim <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>mysql<span class=\"token operator\">/</span>mysql<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>d<span class=\"token operator\">/</span>mysqld<span class=\"token punctuation\">.</span>cnf\n# 修改至 datadir<span class=\"token operator\">=</span><span class=\"token operator\">/</span>mnt<span class=\"token operator\">/</span>volume<span class=\"token operator\">-</span>nyc1<span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">/</span>mysql\nvim <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>apparmor<span class=\"token punctuation\">.</span>d<span class=\"token operator\">/</span>tunables<span class=\"token operator\">/</span>alias\n# alias <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>mysql<span class=\"token operator\">/</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">/</span>mnt<span class=\"token operator\">/</span>volume<span class=\"token operator\">-</span>nyc1<span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">/</span>mysql<span class=\"token operator\">/</span>\nsudo systemctl restart apparmor\nvim <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>mysql<span class=\"token operator\">/</span>mysql<span class=\"token operator\">-</span>systemd<span class=\"token operator\">-</span>start\n# 修改成\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token operator\">-</span>d <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>mysql <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token operator\">-</span><span class=\"token constant\">L</span> <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>mysql <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> then\n echo <span class=\"token string\">\"MySQL data dir not found at /var/lib/mysql. Please create one.\"</span>\n exit <span class=\"token number\">1</span>\nfi\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token operator\">-</span>d <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>mysql<span class=\"token operator\">/</span>mysql <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token operator\">-</span><span class=\"token constant\">L</span> <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>mysql<span class=\"token operator\">/</span>mysql <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> then\n echo <span class=\"token string\">\"MySQL system database not found. Please run mysql_install_db tool.\"</span>\n exit <span class=\"token number\">1</span>\nfi\n\n# 接下来\nsudo mkdir <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>mysql<span class=\"token operator\">/</span>mysql <span class=\"token operator\">-</span>p\nsudo systemctl restart mysql\n\n# 最后 my<span class=\"token punctuation\">.</span>conf 修改相关文件路径\n</code></pre>\n<blockquote>\n<p>详细请参考这篇文章 <a href=\"https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-16-04\">https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-16-04</a></p>\n</blockquote>\n<p>将 DataDIR 配置完成之后，就可以导入数据了。嗯，经过这么麻烦的事情之后，我决定下次遇到这种情况首选 Docker 而不是在 Ubuntu Server 上面搞这个。</p>\n<blockquote>\n<p>站在现在看，如果重来的话，我肯定会用 Docker 然后把数据盘挂载到新硬盘到。</p>\n</blockquote>\n<p>比如直接 Docker 命令执行</p>\n<pre><code class=\"language-bash\">docker run <span class=\"token operator\">--</span>name some<span class=\"token operator\">-</span>mysql <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>my<span class=\"token operator\">/</span>own<span class=\"token operator\">/</span>datadir<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>mysql <span class=\"token operator\">-</span>e <span class=\"token constant\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>my<span class=\"token operator\">-</span>secret<span class=\"token operator\">-</span>pw <span class=\"token operator\">-</span>d mysql<span class=\"token operator\">:</span>tag\n</code></pre>\n<h4 id=\"导入数据-之-mysql-pv\"><a class=\"v-toc-item\" href=\"#导入数据-之-mysql-pv\">#</a> 导入数据 之 MySQL + PV</h4>\n<p>我们使用 mysql 导入脚本的时候，有几种导入方式</p>\n<ul>\n<li>source 命令，然而这个命令容易在数据量很大的时候直接卡掉。（印象中是直接把 sql 文件加载到内存中，然后执行，然而，只要涉及到大量文本打印出来并且执行，速度一定会变慢很多）</li>\n<li>mysql 命令</li>\n</ul>\n<pre><code class=\"language-bash\"># mysql 命令的典型导入场景就是这样\nmysql <span class=\"token operator\">-</span>uadmin <span class=\"token operator\">-</span>p123456 some_db <span class=\"token operator\">&lt;</span> tb<span class=\"token punctuation\">.</span>sql\n</code></pre>\n<p>加上 PV 命令的话，比较神奇了。有进度条了！!</p>\n<pre><code class=\"language-bash\"># 附加进度条的导入场景\npv <span class=\"token operator\">-</span>i <span class=\"token number\">1</span> <span class=\"token operator\">-</span>p <span class=\"token operator\">-</span>t <span class=\"token operator\">-</span>e <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>xxxx_probe<span class=\"token punctuation\">.</span>sql <span class=\"token operator\">|</span> mysql <span class=\"token operator\">-</span>uadmin <span class=\"token operator\">-</span>p123456 some_db\n</code></pre>\n<p>然后，可以查看一下磁盘 CPU 内存的占用情况。如果负载（着重注意 IO，内存）还不够满，使用 tmux 多开几个进程导入数据。</p>\n<p>因为每个 SQL 文件对应的表不一样，所以多开几个进程批量 insert 的话并不会锁表，这样可以显著提升导入速度。</p>\n<h3 id=\"12-导出数据\"><a class=\"v-toc-item\" href=\"#12-导出数据\">#</a> 1.2 导出数据</h3>\n<p>既然已经导入了数据，为什么需要导出数据呢？</p>\n<p>因为数据量比较大，需要进行初步清洗。而我们最后肯定使用 Pandas 进行分析，从局域网数据库中读取大量的数据的时候，pandas 速度会非常的慢（具体是因为网络传输速度？)。所以，为了后面分析省事，我批量导出了数据，然后按照我的习惯进行了归类。</p>\n<p>在这个过程中，我还进行了一小部分的数据过滤，比如：</p>\n<ul>\n<li>只选取对自己有用的行与列。</li>\n<li>化整为零，拆分数据为最小单元的 CSV 文件</li>\n</ul>\n<h4 id=\"只选取对自己有用的行与列\"><a class=\"v-toc-item\" href=\"#只选取对自己有用的行与列\">#</a> 只选取对自己有用的行与列</h4>\n<pre><code class=\"language-sql\">select col_a <span class=\"token punctuation\">,</span> col_b from some_table where Acondition and bcondition and col_c <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'xx'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'yy'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里面有一些值得注意的地方</p>\n<ul>\n<li>尽量把简单的判断写在左边。</li>\n<li>如果不是反复查询，则没有必要建立索引。直接走全表，筛选出必要的数据存 CSV 即可。</li>\n</ul>\n<h4 id=\"尽量拆分数据为最小单元的-csv-文件\"><a class=\"v-toc-item\" href=\"#尽量拆分数据为最小单元的-csv-文件\">#</a> 尽量拆分数据为最小单元的 CSV 文件</h4>\n<p>如果按照某类，某段时间进行拆分可以在分析的时候随时取随时分析那就进行拆分。</p>\n<p>比如，某个大的 CSV 包含琼瑶里面各种人物情节地点的位置就可以拆分为：</p>\n<pre><code class=\"language-bash\"><span class=\"token number\">201712</span>_大明湖畔_夏雨荷_还珠格格_你还记得吗<span class=\"token punctuation\">.</span>csv\n<span class=\"token number\">201711</span>_老街_可云_情深深雨蒙蒙_谁来救我<span class=\"token punctuation\">.</span>csv\n<span class=\"token number\">201710</span>_屋子里_云帆_又见一帘幽梦_你的腿不及紫菱的爱情<span class=\"token punctuation\">.</span>csv\n</code></pre>\n<p>当我们需要取这坨数据的时候，可以直接 glob 一下，然后 sort, 接着二分查找。就可以快速读取这块数据了。</p>\n<h3 id=\"13-校验数据完备性\"><a class=\"v-toc-item\" href=\"#13-校验数据完备性\">#</a> 1.3 校验数据完备性</h3>\n<p>第三方给的数据多多少少会有这些或者那些的问题，一般情况下，可以通过检查数据完备性来尽可能的减少数据的不靠谱性。</p>\n<p>我习惯性在这样的表里面详细记录数据完备性的各种参数与进度。</p>\n<p>比如：</p>\n<ul>\n<li>数据的提供情况和实际情况</li>\n<li>阶段性的记录条数和点位的统计值</li>\n<li>max，min，mean，median 用来避免异常值</li>\n<li>如果是分年份，则必须要统计每一天的情况，否则也不知道数据的缺失程度。</li>\n</ul>\n<h2 id=\"0x02-分析阶段\"><a class=\"v-toc-item\" href=\"#0x02-分析阶段\">#</a> 0x02 分析阶段</h2>\n<p>经过上一步处理，数据的文件总大小大约从 1000GB (uncompressed) -&gt; 30GB 左右 （拆分成若干个文件 compressed) 。每个文件大约是几百兆。</p>\n<h3 id=\"21-性能要点-1文件系统\"><a class=\"v-toc-item\" href=\"#21-性能要点-1文件系统\">#</a> 2.1 性能要点 1：文件系统</h3>\n<p>如果统计逻辑很简单，但是数量多，首选使用读取文件。读取文件进行统计速度是非常快的。（人民币玩家走开）</p>\n<p>像 linux 里面的 wc,grep,sort,uniq 在这种场景有时候也能用到。</p>\n<blockquote>\n<p>注意，如果文件特别大，一定要迭代器一个一个读取。</p>\n</blockquote>\n<p>对于超大文件，比如说，上百 G 文件，可以先分成小片的文件，然后多进程批量读取并且处理。</p>\n<h3 id=\"22-性能要点-2化整为零map-reduce-filter\"><a class=\"v-toc-item\" href=\"#22-性能要点-2化整为零map-reduce-filter\">#</a> 2.2 性能要点 2：化整为零，map reduce filter</h3>\n<p>化整为零这个已经在上面的 1.2 节讲过了。</p>\n<p>map/reduce/filter 可以极大的减少代码。</p>\n<blockquote>\n<p>collection 中有个 Counter , 在进行简单代码统计的时候用起来可以极大的减少代码。</p>\n</blockquote>\n<h3 id=\"23-性能要点-3进程池的两种作用\"><a class=\"v-toc-item\" href=\"#23-性能要点-3进程池的两种作用\">#</a> 2.3 性能要点 3：进程池的两种作用</h3>\n<p>我们都知道，当 用 Python 执行计算密集的任务时，可以考虑使用多进程来加速：</p>\n<p>即<strong>为了加速计算</strong>，此为作用一。如下：</p>\n<pre><code class=\"language-python\">def <span class=\"token function\">per_item_calc</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    # complex calc\n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token keyword\">with</span> <span class=\"token function\">ProcessPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> pool<span class=\"token operator\">:</span>\n    result_items <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>per_item_calc<span class=\"token punctuation\">,</span>all_tobe_calc_items<span class=\"token punctuation\">)</span>\n\nreduce_results <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>其实进程的销毁本身就可以给我带来第二个作用<strong>管理内存</strong>。</p>\n<p>具体会在 2.6 中的 DataFrame 里面解释。</p>\n<h3 id=\"24-性能要点-4list-和-set-itertools\"><a class=\"v-toc-item\" href=\"#24-性能要点-4list-和-set-itertools\">#</a> 2.4 性能要点 4：List 和 Set , itertools</h3>\n<p>有 400 组 UUID 集合，每个列表数量在 1000000 左右，列表和列表之间重复部分并不是很大。我想拿到去重之后的所有 UUID，应该怎么处理</p>\n<p>在去重的时候，自然而然想到了使用集合来处理。</p>\n<p>最初的做法是</p>\n<pre><code class=\"language-python\">list_of_uuid_set <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> set1 <span class=\"token punctuation\">,</span> set2 <span class=\"token operator\">...</span> set400 <span class=\"token punctuation\">]</span>\nall_uuid_set <span class=\"token operator\">=</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>lambda x<span class=\"token operator\">:</span> x <span class=\"token operator\">|</span> y<span class=\"token punctuation\">,</span> list_of_uuid_set<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>1 小时过去了。 突然之间，四下里万籁无声。公司内外聚集数百之众，竟不约而同的谁都没有出声，便有人想说话的，也为这寂静的气氛所慑，话到嘴边都缩了回去。似乎硬盘的指示灯也熄灭了，发出轻柔异常的声音。我心中忽想：</p>\n<blockquote>\n<p><s>小师妹这时候不知在干甚么？</s> 卧槽，程序是不是又卡死了？</p>\n</blockquote>\n<p>SSH 上去 htop 一下机器。发现实存和内存都满了。直觉告诉我，CPython 的集合运算应该是挺耗内存的。</p>\n<p>嗯，这怎么行，试试用列表吧。列表占用内存应该是比较小的。</p>\n<pre><code class=\"language-python\">def <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span>list2<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    list1<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> list1\n\nlist_of_uuid_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> list1 <span class=\"token punctuation\">,</span> list2 <span class=\"token operator\">...</span> list400 <span class=\"token punctuation\">]</span>\nall_uuid_set <span class=\"token operator\">=</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>merge<span class=\"token punctuation\">,</span> list_of_uuid_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>1 小时过去了。 我一拍大腿，道：</p>\n<blockquote>\n<p><s>小师妹这时候不知在干甚么？</s> 卧槽，程序是不是又卡死了？</p>\n</blockquote>\n<p>最后在 StackOverFlow 上找到了更好的解决方案。</p>\n<pre><code class=\"language-python\">list_of_uuid_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> list1 <span class=\"token punctuation\">,</span> list2 <span class=\"token operator\">...</span> list400 <span class=\"token punctuation\">]</span>\nall_uuid_set <span class=\"token operator\">=</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>itertools<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>list_of_uuid_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行一下，5s 不到出了结果（注意，包含了 Set 去重）。</p>\n<p>itertools 里还有很多有趣的函数可以使用。</p>\n<p><a href=\"https://docs.python.org/3/library/itertools.html\">https://docs.python.org/3/library/itertools.html</a></p>\n<h3 id=\"25-性能要点-5ipython-给性能带来的影响\"><a class=\"v-toc-item\" href=\"#25-性能要点-5ipython-给性能带来的影响\">#</a> 2.5 性能要点 5：IPython 给性能带来的影响</h3>\n<p>当我们在分析数据的时候，往往使用的是 IPython, 或者 Jupyter Notebook</p>\n<p>但是，方便的同时，如果不加以注意的话，就会带来一点点小问题。</p>\n<p>比如下划线和双下划线分别存储上一个 CELL 的返回值，和上上个 CELL 的返回值。</p>\n<h3 id=\"26-性能要点-6dataframe-带来的-gc-问题\"><a class=\"v-toc-item\" href=\"#26-性能要点-6dataframe-带来的-gc-问题\">#</a> 2.6 性能要点 6：DataFrame 带来的 GC 问题</h3>\n<p>DataFrame 是我用 Pandas 的原因，在这次使用 DataFrame 的过程中，还是出现一些头疼的问题的。比如莫名的内存泄露。</p>\n<pre><code class=\"language-python\">def <span class=\"token function\">per_item_calc</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    # complex calc\n    <span class=\"token keyword\">return</span> result\n\nresult_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> all_tobe_calc_items<span class=\"token operator\">:</span>\n    result_items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">per_item_calc</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nreduce_results <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>我在 For 循环中读取 DataFrame 赋值给 df, 然后统计出一个结果。按理来说，每次只要一个简单的 result, 每次读取的文件大小一致，同样的会占用接近 2G 内存，而，当我赋值 df 的时候，<strong>按理来说，应该是把原先 df 的引用数应该为 0, 会被 gc 掉，又释放了 2G 内存</strong>，所以，是不太可能出现内存不够用的。</p>\n<p>运行程序，内存 biubiubiubiu 的增长，当进行到约第 1000 次的循坏的时候，直到 16G 内存占满。</p>\n<p>那么显式的 del 一下会不会好一点呢？代码如下：</p>\n<pre><code class=\"language-python\">def <span class=\"token function\">per_item_calc</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    # complex calc\n    del df\n    <span class=\"token keyword\">return</span> result\n</code></pre>\n<p>似乎好了一点点，但是其实并没有好到哪里去。</p>\n<p>然而，和前一次一样，内存 biubiubiubiu 的增长，当进行到约第 1000 次的循坏的时候，直到 16G 内存占满。</p>\n<p>只是在读取文件的时候，预先减少了上次循环没有 del 掉的 df. 和上一个想法没有太大区别。除了比上一个方法每次读取文件的提前减少了一个多 G 的内存。</p>\n<p>查找相关资料，涉及到 Python 里面的 Pandas GC 的资料并不多，稍微整理一下，如下：</p>\n<blockquote>\n<p>Python 程序 在 Linux 或者 Mac 中，哪怕是 del 这个对象，Python 依旧 <s>站着茅坑不拉屎</s> 就是不把内存还给系统，自己先占着，<s>有本事你打死我啊</s> 直到进程销毁。</p>\n</blockquote>\n<p>嗯？这个和我要的东西不一样嘛？具体怎么管理 pandas 里面的 object 的，到底是哪里 GC 不到位呢？还是没有说呀。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/23183958/python-memory-management-dictionary\">https://stackoverflow.com/questions/23183958/python-memory-management-dictionary</a></li>\n<li><a href=\"http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm\">http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm</a></li>\n</ul>\n<p>不过有一点启示了我。</p>\n<blockquote>\n<p>直到进程销毁。</p>\n</blockquote>\n<p>Python 里面不是有个 ProcessPoolExecutor 模块么。</p>\n<p>那么问题来了，ProcessPoolExecutor 是动态创建进程并且分配任务的呢，为每一个 item 分配一个进程来运算？还是创建完三个进程之后把 item 分配给空闲进程的进行运算呢？</p>\n<ul>\n<li>如果是前者，则是正经的进程池。似乎 map 过去，除非任务执行完毕或者异常退出，否则进程不销毁。并不能给我们解决 内存泄露 的问题。</li>\n<li>如果是后者，则是并不是线程池。</li>\n</ul>\n<p>你说，进程池肯定是前者咯。可是你在验证之前，这是进程池只是你的从其他语言带来的想法，这是不是一个线程池，是一个什么样子的进程池，如果进程执行过程中挂掉了，这个时候就少了一个线程，会不会再补充一个进程呢？？</p>\n<p>怎么看验证呢？</p>\n<ol>\n<li>运行程序，进入 Htop 看进程 PID</li>\n<li>看源码</li>\n</ol>\n<pre><code class=\"language-python\"># https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>python<span class=\"token operator\">/</span>cpython<span class=\"token operator\">/</span>blob<span class=\"token operator\">/</span><span class=\"token number\">3.6</span><span class=\"token operator\">/</span>Lib<span class=\"token operator\">/</span>concurrent<span class=\"token operator\">/</span>futures<span class=\"token operator\">/</span>process<span class=\"token punctuation\">.</span>py#<span class=\"token constant\">L440</span>\ndef <span class=\"token function\">_adjust_process_count</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_processes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_max_workers<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        p <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span><span class=\"token function\">Process</span><span class=\"token punctuation\">(</span>\n                target<span class=\"token operator\">=</span>_process_worker<span class=\"token punctuation\">,</span>\n                args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_call_queue<span class=\"token punctuation\">,</span>\n                        self<span class=\"token punctuation\">.</span>_result_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        p<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_processes<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p\n</code></pre>\n<p>从源码得出在主线程创建了管理进程的线程，管理进程的线程创建了 max_workers 个进程（在我的例子里面就只有 3 个 worker).</p>\n<blockquote>\n<p>是个进程池。</p>\n</blockquote>\n<p>好，如果是进程池，似乎 map 过去，除非任务执行完毕或者异常退出，否则进程不销毁。并不能给我们解决 内存泄露 的问题。</p>\n<blockquote>\n<p>等等，如果用多进程池不就好咯？</p>\n</blockquote>\n<pre><code class=\"language-python\">def <span class=\"token function\">per_item_calc</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    # complex calc\n    <span class=\"token keyword\">return</span> result\n\nresult_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nstep <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n<span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>all_tobe_calc_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>step<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    pieces_tobe_calc_items <span class=\"token operator\">=</span> all_tobe_calc_items<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">:</span>idx<span class=\"token operator\">+</span>step<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">with</span> <span class=\"token function\">ProcessPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> pool<span class=\"token operator\">:</span>\n        pieces_result_items <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>per_item_calc<span class=\"token punctuation\">,</span>pieces_tobe_calc_items<span class=\"token punctuation\">)</span>\n        result_items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>pieces_result_items<span class=\"token punctuation\">)</span>\n\nreduce_results <span class=\"token operator\">=</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>itertools<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>result_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>当然，这是一种让操作系统帮我 GC 的方法。<strong>即 Python 不能帮我 GC 的，操作系统帮我 GC</strong></p>\n</blockquote>\n<blockquote>\n<p>PS: 其实用 multiprocessing 模块也行，只是线程池可以稍微控制一下进程创建的数量。</p>\n</blockquote>\n<p>总结一下，对于大量的 DataFrame 处理：</p>\n<ol>\n<li>多个进程池是一种处理的方式。</li>\n<li>尽量减少 DataFrame 的数量</li>\n<li>尽量减少赋值导致的 COPY, 修改时带上 inplace=True</li>\n<li>读取 CSV 的时候指定相关列的类型 {‘col_a’: np.float64, ‘col_b’: np.int32}，否则 pandas 会产生大量的 object</li>\n</ol>\n<h2 id=\"0xdd-番外篇\"><a class=\"v-toc-item\" href=\"#0xdd-番外篇\">#</a> 0xDD 番外篇</h2>\n<p>在分析这次的数据过程中，自己的 Mac 主板也坏掉了，幸好还在保修期，送到苹果店维修了一下。给苹果的售后点个赞。</p>\n<h2 id=\"0xee-更新\"><a class=\"v-toc-item\" href=\"#0xee-更新\">#</a> 0xEE 更新</h2>\n<ul>\n<li><strong>2017-12-07</strong> 初始化本文</li>\n<li><strong>2017-12-16</strong> 增加分析阶段的文字</li>\n<li><strong>2017-12-26</strong> 去掉一些 TODO, 发布到我的小站</li>\n<li><strong>2017-12-31</strong> 正式发布</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E9%98%B6%E6%AE%B5\">0x01 准备数据阶段</a>\n<ul>\n<li><a href=\"#11-%E5%B0%86%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5-mysql-%E4%B8%AD\">1.1 将数据导入 MySQL 中</a>\n<ul>\n<li><a href=\"#%E6%96%B0%E5%A2%9E%E7%A1%AC%E7%9B%98%E5%B9%B6%E5%88%9D%E5%A7%8B%E5%8C%96\">新增硬盘，并初始化</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE-mysql\">配置 MySQL</a></li>\n<li><a href=\"#%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE-%E4%B9%8B-mysql-pv\">导入数据 之 MySQL + PV</a></li>\n</ul>\n</li>\n<li><a href=\"#12-%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE\">1.2 导出数据</a>\n<ul>\n<li><a href=\"#%E5%8F%AA%E9%80%89%E5%8F%96%E5%AF%B9%E8%87%AA%E5%B7%B1%E6%9C%89%E7%94%A8%E7%9A%84%E8%A1%8C%E4%B8%8E%E5%88%97\">只选取对自己有用的行与列</a></li>\n<li><a href=\"#%E5%B0%BD%E9%87%8F%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE%E4%B8%BA%E6%9C%80%E5%B0%8F%E5%8D%95%E5%85%83%E7%9A%84-csv-%E6%96%87%E4%BB%B6\">尽量拆分数据为最小单元的 CSV 文件</a></li>\n</ul>\n</li>\n<li><a href=\"#13-%E6%A0%A1%E9%AA%8C%E6%95%B0%E6%8D%AE%E5%AE%8C%E5%A4%87%E6%80%A7\">1.3 校验数据完备性</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-%E5%88%86%E6%9E%90%E9%98%B6%E6%AE%B5\">0x02 分析阶段</a>\n<ul>\n<li><a href=\"#21-%E6%80%A7%E8%83%BD%E8%A6%81%E7%82%B9-1%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">2.1 性能要点 1：文件系统</a></li>\n<li><a href=\"#22-%E6%80%A7%E8%83%BD%E8%A6%81%E7%82%B9-2%E5%8C%96%E6%95%B4%E4%B8%BA%E9%9B%B6map-reduce-filter\">2.2 性能要点 2：化整为零，map reduce filter</a></li>\n<li><a href=\"#23-%E6%80%A7%E8%83%BD%E8%A6%81%E7%82%B9-3%E8%BF%9B%E7%A8%8B%E6%B1%A0%E7%9A%84%E4%B8%A4%E7%A7%8D%E4%BD%9C%E7%94%A8\">2.3 性能要点 3：进程池的两种作用</a></li>\n<li><a href=\"#24-%E6%80%A7%E8%83%BD%E8%A6%81%E7%82%B9-4list-%E5%92%8C-set-itertools\">2.4 性能要点 4：List 和 Set , itertools</a></li>\n<li><a href=\"#25-%E6%80%A7%E8%83%BD%E8%A6%81%E7%82%B9-5ipython-%E7%BB%99%E6%80%A7%E8%83%BD%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%BD%B1%E5%93%8D\">2.5 性能要点 5：IPython 给性能带来的影响</a></li>\n<li><a href=\"#26-%E6%80%A7%E8%83%BD%E8%A6%81%E7%82%B9-6dataframe-%E5%B8%A6%E6%9D%A5%E7%9A%84-gc-%E9%97%AE%E9%A2%98\">2.6 性能要点 6：DataFrame 带来的 GC 问题</a></li>\n</ul>\n</li>\n<li><a href=\"#0xdd-%E7%95%AA%E5%A4%96%E7%AF%87\">0xDD 番外篇</a></li>\n<li><a href=\"#0xee-%E6%9B%B4%E6%96%B0\">0xEE 更新</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}