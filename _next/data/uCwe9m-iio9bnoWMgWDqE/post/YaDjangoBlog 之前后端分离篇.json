{"pageProps":{"post":{"tags":["Python","Django","YaDjangoBlog"],"path":"20180223_YaDjangoBlog前后端分离篇.md","title":"YaDjangoBlog 之前后端分离篇","slug":"YaDjangoBlog 之前后端分离篇","date":"2018-02-23","category":"Django","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>本文是 Django 全栈开发教程的第三篇 YaDjangoBlog 之前后端分离</p>\n<p>目录在这里，已经更新的文章如下</p>\n<ul>\n<li>Django 全栈开发教程 - 2018 年不容错过的 Django 全栈项目 – 目录篇</li>\n<li>Django 全栈开发教程 - YaDjangoBlog 的开发环境配置</li>\n<li>Django 全栈开发教程 - YaDjangoBlog 的前后端设计</li>\n</ul>\n<p><strong>本文需要成四件事情：</strong></p>\n<ul>\n<li>第一件事情，解读 DjangoRestFramework, 通过简单的例子来引入用 DRF 的必要性，并且简单介绍 DRF 的 CBV 实现。</li>\n<li>第二件事情，简单介绍 DRF 在本项目 YaDjangoBlog 中的使用</li>\n<li>第三件事情，简单聊聊 RESTFULAPI 规范，并给出最佳实践参考。</li>\n<li>第四件事情，简单解读一下 Django 处理请求流程代码。</li>\n</ul>\n<p>PS: 为了打字方便，下面的：</p>\n<ul>\n<li>DRF 指的是 DjangoRestFramework</li>\n<li>CBV 指的是 Class Based View</li>\n<li>FBV 指的是 Function Based View</li>\n</ul>\n<blockquote>\n<p>坐稳了，开车了。</p>\n</blockquote>\n<h2 id=\"0x01-djangorestframework-解读\"><a class=\"v-toc-item\" href=\"#0x01-djangorestframework-解读\">#</a> 0x01 DjangorestFramework 解读</h2>\n<h3 id=\"为什么要用-drf-呢\"><a class=\"v-toc-item\" href=\"#为什么要用-drf-呢\">#</a> 为什么要用 DRF 呢？</h3>\n<p>使用一个库的原因，无非就是为了：</p>\n<ol>\n<li>节省开发者自己造轮子的时间。</li>\n<li>有利于代码的可维护性 / 或者程序的健壮性。</li>\n</ol>\n<p>具体落实到 DRF, 有哪些具体的优点呢？</p>\n<ol>\n<li>可直接浏览调试的界面。让前端调试起来欲罢不能的功能。</li>\n<li>用 DRF 的方式快速批量开接口</li>\n<li>分页、序列化、校验、登录、权限、Web 附加文档、限流，高度的可扩展性。哪里不爽扩展哪里，so easy</li>\n<li>算的上是 Django 社区最好的 RESTFUL 框架的轮子了。</li>\n<li>完善的社区支持，比如 guardian/django-filter 等等结合。</li>\n</ol>\n<h3 id=\"不使用-drf-应该如何写-webapi-做呢\"><a class=\"v-toc-item\" href=\"#不使用-drf-应该如何写-webapi-做呢\">#</a> 不使用 DRF 应该如何写 WebAPI 做呢？</h3>\n<p>我们先看看，不使用 DRF 的时代，API 是如何编写的。</p>\n<p>这里我们用 function based view 来简单说明。</p>\n<pre><code class=\"language-python\"># 最简单版本\ndef <span class=\"token function\">simple_hello</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">JsonResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"这就是 key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"这就是 value\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"时间\"</span><span class=\"token operator\">:</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>刚开始学 DRF 的时候，我也有这种疑惑，这有必要需要一个 RESTFULAPI 的框架嘛？捋起袖子，JSON API 甩起来开咯。</p>\n<p>之所以得出这个结论，是因为这个例子实在是过于简单。</p>\n<p>当涉及到一定复杂程度的 API 的时候，问题就来了：</p>\n<ol>\n<li>权限是否需要区分？</li>\n<li>分页需不需要做？</li>\n<li>前端人员提交 Form 表单时，只能通过命令行或者是 POSTMAN 之类的工具提交参数，这会不会带来不便？后端人员写这些表单的各个字段，也是很手酸的事情。</li>\n<li>拼接字典或者是字符串倒也还好，能不能有个序列器帮我直接序列化这模型，并且如果模型和模型之间有联系，最好也可以帮我完成模型和模型之间的关联。</li>\n<li>Profile API 应该如何做？</li>\n</ol>\n<p>这都是我们需要考虑的。</p>\n<p>如果不用 DRF, 而是由后端程序员直接写这些代码的话，也不是不行。</p>\n<ol>\n<li>对于第一点，可以直接在 fbv 上面加装饰器。</li>\n<li>对于第二点，分页的时候可以直接将逻辑写在 fbv 里面。</li>\n<li>前端 er 直接使用 PostMan 之类的工具就好了。</li>\n<li>序列化，可以借助内置的序列化方法。</li>\n<li>Profile 可以在提交参数的时候，附加一个参数比如 debug, 渲染的时候，将使用 HTML 里面内置一个 JSON 字符串的方式渲染出来。这样的话，就可以使用 Django Debug Tools 进行 Profile 了。</li>\n</ol>\n<p>很显然，这是个系统性的活。 假如接下来还要考虑限流、RESTFULAPI 的设计，这就相当蛋疼了。</p>\n<p>显然，我们的 FBV 就会是这样：</p>\n<pre><code class=\"language-python\">@a_authority\ndef <span class=\"token function\">complex_hello</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    params <span class=\"token operator\">=</span> <span class=\"token function\">getParams</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    query_results <span class=\"token operator\">=</span> SomeModels<span class=\"token punctuation\">.</span><span class=\"token function\">some_query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    results <span class=\"token operator\">=</span> <span class=\"token function\">SomeModelsSerial</span><span class=\"token punctuation\">(</span>query_results<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">JsonResponse</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>看起来似乎是有规律可循的，既然有规律可循，就能封装一下，减轻负担。FBV 已经这样了，显然只能每次都要硬编码这些取参数，查询，序列化。当然，如果用生成器也能简化一部分函数代码。yield 实现方法太丑还是弃用吧。</p>\n<p>我们试试 CBV 看看如何。</p>\n<pre><code class=\"language-python\"># 继承并重写方法\nfrom django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">APIView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\n    def <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        query_results <span class=\"token operator\">=</span> SomeModels<span class=\"token punctuation\">.</span><span class=\"token function\">some_query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        results <span class=\"token operator\">=</span> <span class=\"token function\">SomeModelsSerial</span><span class=\"token punctuation\">(</span>query_results<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">return</span> results\n\n    def <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        query_results <span class=\"token operator\">=</span> SomeModels<span class=\"token punctuation\">.</span><span class=\"token function\">some_query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        results <span class=\"token operator\">=</span> <span class=\"token function\">SomeModelsSerial</span><span class=\"token punctuation\">(</span>query_results<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">return</span> results\n\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    # 这里相当于 view 函数\n    def <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        # 这里处理正式处理之前的逻辑，比如权限判断。\n        # 如果是 <span class=\"token constant\">GET</span> 方法，则调用\n        results <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        # 这里处理正式处理之后的逻辑，比如统计 list 的 total 值，加上时间戳\n        <span class=\"token keyword\">return</span> <span class=\"token function\">JsonResponse</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>于是，除了使用 FBV 进行硬编码之外，还可以使用 CBV 的基类 进行扩展定制。</p>\n<p>我们思考一下：</p>\n<ol>\n<li>假如我想渲染某个模型的 JSON 列表，就可以定制一个 ListViewAPI 出来。如果需要一个 DetailViewAPI, 就定制一个 DetailViewAPI 出来。</li>\n<li>我们再声明一些 Permission 类，序列化类，模型，然后在 dispatch 中直接使用这些东西的话，就只需要在 get 和 post 里面编写一些最核心的逻辑了。</li>\n<li>甚至，指定了分页器和查询，都完全不需要再 get 和 post 里面写代码。</li>\n</ol>\n<p>恭喜你，读到这里，你已经可以写一个极简的 DRF 出来了。</p>\n<p>但写成 DRF 这种量级的程序，还需要做很多很多事情。</p>\n<h3 id=\"drf-处理请求的流程\"><a class=\"v-toc-item\" href=\"#drf-处理请求的流程\">#</a> DRF 处理请求的流程</h3>\n<p>要知道 DRF 的处理请求的流程，就要先知道 Django 的处理请求流程。</p>\n<p>宏观来看</p>\n<ol>\n<li>请求先经过 MiddleWare , 接着判断 urlconf （默认为 ROOT_URLCONF),</li>\n<li>匹配 URL, 将请求上下文 dispatch 到具体的 view.</li>\n<li>处理完毕，经过 MiddleWare</li>\n</ol>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/topics/http/urls/\">https://docs.djangoproject.com/en/2.0/topics/http/urls/</a></p>\n<p>在本文的结尾的时候，我也将带大家从源码角度过一下，涉及到这个流程的相关的源码。这里先跳过。</p>\n<p>那么，DRF 是如何处理一个请求的呢？我们忽略路由之类的东西，直接看对应的 CBV 的源码</p>\n<pre><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">APIView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\n    renderer_classes <span class=\"token operator\">=</span> api_settings<span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT_RENDERER_CLASSES</span>\n    parser_classes <span class=\"token operator\">=</span> api_settings<span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT_PARSER_CLASSES</span>\n    authentication_classes <span class=\"token operator\">=</span> api_settings<span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT_AUTHENTICATION_CLASSES</span>\n    throttle_classes <span class=\"token operator\">=</span> api_settings<span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT_THROTTLE_CLASSES</span>\n    permission_classes <span class=\"token operator\">=</span> api_settings<span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT_PERMISSION_CLASSES</span>\n    content_negotiation_class <span class=\"token operator\">=</span> api_settings<span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT_CONTENT_NEGOTIATION_CLASS</span>\n    metadata_class <span class=\"token operator\">=</span> api_settings<span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT_METADATA_CLASS</span>\n    versioning_class <span class=\"token operator\">=</span> api_settings<span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT_VERSIONING_CLASS</span>\n\n    # <span class=\"token operator\">...</span><span class=\"token operator\">...</span> 其他方法\n\n    # Dispatch methods\n\n    def <span class=\"token function\">initialize_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">\"\"</span>\"\n        Returns the initial request object<span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"\"</span>\"\n        parser_context <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">get_parser_context</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Request</span><span class=\"token punctuation\">(</span>\n            request<span class=\"token punctuation\">,</span>\n            parsers<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span><span class=\"token function\">get_parsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            authenticators<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span><span class=\"token function\">get_authenticators</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            negotiator<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span><span class=\"token function\">get_content_negotiator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            parser_context<span class=\"token operator\">=</span>parser_context\n        <span class=\"token punctuation\">)</span>\n\n    def <span class=\"token function\">initial</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">\"\"</span>\"\n        Runs anything that needs to occur prior to calling the method handler<span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"\"</span>\"\n        self<span class=\"token punctuation\">.</span>format_kwarg <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">get_format_suffix</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n        # Perform content negotiation and store the accepted info on the request\n        neg <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">perform_content_negotiation</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        request<span class=\"token punctuation\">.</span>accepted_renderer<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>accepted_media_type <span class=\"token operator\">=</span> neg\n\n        # Determine the <span class=\"token constant\">API</span> version<span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span> versioning is <span class=\"token keyword\">in</span> use<span class=\"token punctuation\">.</span>\n        version<span class=\"token punctuation\">,</span> scheme <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">determine_version</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        request<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>versioning_scheme <span class=\"token operator\">=</span> version<span class=\"token punctuation\">,</span> scheme\n\n        # Ensure that the incoming request is permitted\n        self<span class=\"token punctuation\">.</span><span class=\"token function\">perform_authentication</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token function\">check_permissions</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token function\">check_throttles</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n    # Note<span class=\"token operator\">:</span> Views are made <span class=\"token constant\">CSRF</span> exempt from within <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">as_view</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token keyword\">as</span> to prevent\n    # accidental removal <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span> exemption <span class=\"token keyword\">in</span> cases where <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">dispatch</span><span class=\"token template-punctuation string\">`</span></span> needs to\n    # be overridden<span class=\"token punctuation\">.</span>\n    def <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">\"\"</span>\"\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.dispatch()</span><span class=\"token template-punctuation string\">`</span></span> is pretty much the same <span class=\"token keyword\">as</span> Django's regular dispatch<span class=\"token punctuation\">,</span>\n        but <span class=\"token keyword\">with</span> extra hooks <span class=\"token keyword\">for</span> startup<span class=\"token punctuation\">,</span> finalize<span class=\"token punctuation\">,</span> and exception handling<span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"\"</span>\"\n        self<span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> args\n        self<span class=\"token punctuation\">.</span>kwargs <span class=\"token operator\">=</span> kwargs\n        # 这里需要注意\n        request <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">initialize_request</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>request <span class=\"token operator\">=</span> request\n        self<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>default_response_headers  # deprecate<span class=\"token operator\">?</span>\n\n        <span class=\"token keyword\">try</span><span class=\"token operator\">:</span>\n            # 这里需要注意\n            self<span class=\"token punctuation\">.</span><span class=\"token function\">initial</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n            # Get the appropriate handler method\n            <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">lower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>http_method_names<span class=\"token operator\">:</span>\n                handler <span class=\"token operator\">=</span> <span class=\"token function\">getattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">lower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  self<span class=\"token punctuation\">.</span>http_method_not_allowed<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\n                handler <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>http_method_not_allowed\n\n            response <span class=\"token operator\">=</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n        except Exception <span class=\"token keyword\">as</span> exc<span class=\"token operator\">:</span>\n            response <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">handle_exception</span><span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>response <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">finalize_response</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>response\n</code></pre>\n<p>可以看出，当请求到达 dispatch 的时候，DRF 添加了一些钩子函数，用于开始 / 结束 / 错误控制。</p>\n<ol>\n<li>在 initialize_request 的时候，对 request 进行封装，添加上 parser / auth / negoriator / parser context</li>\n<li>接着在 initial 方法里面校验了版本，进行了认证和鉴权，检查了限流</li>\n</ol>\n<p>一看，其实与我们之前想封装 APIView 的想法不谋而合，而我们只是想想，DRF 是详细实现。</p>\n<h2 id=\"0x02-djangorestframework-的使用案例\"><a class=\"v-toc-item\" href=\"#0x02-djangorestframework-的使用案例\">#</a> 0x02 DjangorestFramework 的使用案例</h2>\n<h3 id=\"如何开-webapi-接口\"><a class=\"v-toc-item\" href=\"#如何开-webapi-接口\">#</a> 如何开 WebAPI 接口</h3>\n<p>回到我们的 yadjangoblog 上面来。这个时候我们想开一个博文列表 API:</p>\n<pre><code class=\"language-python\"># <span class=\"token number\">1.</span> 定义序列器，用于序列化查询的每一条。\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPostListSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    category <span class=\"token operator\">=</span> <span class=\"token function\">BlogCategorySerializer</span><span class=\"token punctuation\">(</span>read_only<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\n    tags <span class=\"token operator\">=</span> <span class=\"token function\">BlogTagSerializer</span><span class=\"token punctuation\">(</span>many<span class=\"token operator\">=</span>True<span class=\"token punctuation\">,</span> read_only<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\n    title <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span><span class=\"token function\">CharField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    id <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span><span class=\"token function\">IntegerField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token operator\">:</span>\n        model <span class=\"token operator\">=</span> BlogPost\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'char_num'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vote_num'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'category'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tags'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'publish_date'</span><span class=\"token punctuation\">)</span>\n\n# <span class=\"token number\">2.</span> 定义过滤器，可以通过过滤器进行查询\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPostFilter</span><span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">.</span>FilterSet<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    title <span class=\"token operator\">=</span> filters<span class=\"token punctuation\">.</span><span class=\"token function\">CharFilter</span><span class=\"token punctuation\">(</span>lookup_expr<span class=\"token operator\">=</span><span class=\"token string\">'contains'</span><span class=\"token punctuation\">)</span>\n    having_tags <span class=\"token operator\">=</span> filters<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"tags\"</span><span class=\"token punctuation\">,</span> lookup_expr<span class=\"token operator\">=</span><span class=\"token string\">'in'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token operator\">:</span>\n        model <span class=\"token operator\">=</span> BlogPost\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'char_num'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'category'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tags'</span><span class=\"token punctuation\">)</span>\n\n# <span class=\"token number\">3.</span> 指定其他设置，具体大家看源码就好了。\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPostListAPIView</span><span class=\"token punctuation\">(</span>generics<span class=\"token punctuation\">.</span>ListAPIView<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token string\">\"\"</span>\"\n    依照 category <span class=\"token punctuation\">,</span> tags <span class=\"token punctuation\">,</span> 时间 （年 <span class=\"token operator\">/</span> 月 <span class=\"token operator\">/</span> 日  年 <span class=\"token operator\">/</span> 月 年）\n    <span class=\"token string\">\"\"</span>\"\n    queryset <span class=\"token operator\">=</span> BlogPost<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    serializer_class <span class=\"token operator\">=</span> BlogPostListSerializer\n    filter_backends <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">.</span>DjangoFilterBackend<span class=\"token punctuation\">,</span> OrderingFilter<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n    filter_class <span class=\"token operator\">=</span> BlogPostFilter\n    ordering_fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'publish_date'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n    ordering <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'publish_date'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n    permission_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>permissions<span class=\"token punctuation\">.</span>AllowAny<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n    pagination_class <span class=\"token operator\">=</span> SmallResultsSetPagination\n</code></pre>\n<p>在指定上面的操作之后，一个接口就快速的开出来了。</p>\n<p>: TODO 插入一张图</p>\n<p>当然，DRF 认认真真通读一遍的话，还是可以给自己节省不少时间的。</p>\n<p>这是开接口，似乎，还少了什么，比如 Restful API.</p>\n<h3 id=\"前端如何使用-webapi-接口\"><a class=\"v-toc-item\" href=\"#前端如何使用-webapi-接口\">#</a> 前端如何使用 WebAPI 接口</h3>\n<p>什么是 CORS 可以参考阮一峰的文章 <a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>\n<p>在调试的时候，我们肯定是使用 ajax / fetch 方式请求。这就会遇到一个问题：</p>\n<ul>\n<li>跨域</li>\n</ul>\n<p>解决方式也很简单，服务端只要服务器实现了 CORS 接口，就可以跨源通信。</p>\n<p>安装 django-cors-headers, 并在 settings 中开启 CORS_ORIGIN_ALLOW_ALL = True 即可。</p>\n<p>这里参考了临书的解决方案，要感谢 @临书 , 附上参考地址 <a href=\"https://zhuanlan.zhihu.com/p/24893786\">https://zhuanlan.zhihu.com/p/24893786</a></p>\n<p>对于本项目而言，使用了 axios 请求库，直接 get 即可。详细看前端代码即可。</p>\n<h2 id=\"0x03-restful-api-设计\"><a class=\"v-toc-item\" href=\"#0x03-restful-api-设计\">#</a> 0x03 RESTFUL API 设计</h2>\n<p>开发过程中，尽量靠近 RESTFUL API 的设计，而不是照搬。</p>\n<p>举个其他领域的例子，有的人表述美就只有：</p>\n<ul>\n<li>已撸</li>\n</ul>\n<p>但是不同的美各有各的模样：</p>\n<ul>\n<li>手如柔荑，肤如凝脂，领如蝤蛴，齿如瓠犀，螓首蛾眉，巧笑倩兮，美目盼兮。</li>\n</ul>\n<p>同样，放在 RESFUL 的时候确实也出现了这种情况：</p>\n<p>几乎所有的业务逻辑最后会落实到数据表的 CURDE, 但是所有业务逻辑并不能完全使用 CRUDE 描述。</p>\n<p>我们看下面的例子</p>\n<h3 id=\"关于请求\"><a class=\"v-toc-item\" href=\"#关于请求\">#</a> 关于请求</h3>\n<p>举个例子，RESTFUL 适合纯粹 CURDE 的设计风格。</p>\n<p>比如，新增博客，更新博客，查询博客，删除博客，查看是否含有博客</p>\n<p>但语义在某些场景下表述不足， 比如，设计订单的时候，</p>\n<pre><code class=\"language-bash\"><span class=\"token constant\">URL</span><span class=\"token operator\">:</span> <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>v1<span class=\"token operator\">/</span>user<span class=\"token operator\">/</span>some_user<span class=\"token operator\">/</span>orders\n你查看订单集合，这个好理解。<span class=\"token keyword\">get</span> 方法\n你新增订单，这个好理解。put 方法\n<span class=\"token constant\">URL</span><span class=\"token operator\">:</span> <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>v1<span class=\"token operator\">/</span>user<span class=\"token operator\">/</span>some_user<span class=\"token operator\">/</span>order<span class=\"token operator\">/</span>xxxxxxx\n你删除订单，这个好理解。<span class=\"token keyword\">delete</span> 方法\n你获取订单，这个好理解。<span class=\"token keyword\">get</span> 方法\n你修改订单，这个好理解。post 方法\n\n但修改订单，有的时候可能会比较复杂，有可能是取消订单，有可能是评价订单，有可能是其他。而 <span class=\"token constant\">RESTFUL</span> 表达这种情况就有些语义不足了。\n</code></pre>\n<p>当然，个人经验是，字段越多，越难靠近 RESTFUL 规范</p>\n<p>这个时候，就需要设计者做好 RESTFULAPI 的设计与语义化的平衡了。</p>\n<h3 id=\"关于响应\"><a class=\"v-toc-item\" href=\"#关于响应\">#</a> 关于响应</h3>\n<p>关于响应设计，主要有两点需要注意：</p>\n<ul>\n<li>状态码 (HTTP 状态码，也业务逻辑通用状态码）</li>\n<li>响应内容 包含 业务逻辑通用状态码，剩下的视具体情况而定。</li>\n</ul>\n<p>HTTP 状态码用于标记资源情况，比如：</p>\n<pre><code>200 表示获取资源\n404 表示 NOT FOUND\n</code></pre>\n<p>但有时候也存在语义表达不足问题，一般前后端也会约定一个通用的状态码</p>\n<pre><code>通用状态码 错误信息 含义 HTTP 状态码\n999\t    unknow_v2_error\t未知错误\t400\n1000\tneed_permission\t需要权限\t403\n1001\turi_not_found\t资源不存在\t404\n1002\tmissing_args\t参数不全\t400\n1003\timage_too_large\t上传的图片太大\t400\n....\n</code></pre>\n<p>至于响应内容，一般都是见招拆招的。建议查看文章末尾的 Douban 的相关 API 规范来提升姿势。</p>\n<h2 id=\"0x04-django-的处理请求流程代码解读\"><a class=\"v-toc-item\" href=\"#0x04-django-的处理请求流程代码解读\">#</a> 0x04 Django 的处理请求流程代码解读</h2>\n<p>这小节属于一时兴起写的番外篇。和本文主体内容没啥必要的关联。不感兴趣的可以直接跳转到文章末尾点赞哈。</p>\n<p>WSGI 全称叫做 web 服务器网关接口，通常情况下，gunicorn 或者 uwsgi 接收来自 nginx 转发来的请求之后，向 web app 提供了环境信息（叫请求上下文会不会好些）以及一个 callback. 这样的话，web app 就可以接收这个环境信息，处理完毕，通过回调函数处理请求，并返回响应。一个极简的 webapp 如下：</p>\n<pre><code class=\"language-python\">def <span class=\"token function\">app</span><span class=\"token punctuation\">(</span>environ<span class=\"token punctuation\">,</span> start_response<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token string\">\"\"</span><span class=\"token string\">\"Simplest possible application object\"</span><span class=\"token string\">\"\"</span>\n    data <span class=\"token operator\">=</span> <span class=\"token string\">'Hello, World!\\n'</span>\n    status <span class=\"token operator\">=</span> <span class=\"token string\">'200 OK'</span>\n    response_headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n    <span class=\"token function\">start_response</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span> response_headers<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>现在我们看看 django 中是如何处理请求的。首先查看相关的 <a href=\"http://wsgi.py\">wsgi.py</a></p>\n<pre><code class=\"language-python\"># wsgi<span class=\"token punctuation\">.</span>py\n<span class=\"token keyword\">import</span> os\nfrom django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>wsgi <span class=\"token keyword\">import</span> get_wsgi_application\nos<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span><span class=\"token function\">setdefault</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DJANGO_SETTINGS_MODULE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"config.settings\"</span><span class=\"token punctuation\">)</span>\napplication <span class=\"token operator\">=</span> <span class=\"token function\">get_wsgi_application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n# 接着查看 get_wsgi_application\n<span class=\"token keyword\">import</span> django\nfrom django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span>wsgi <span class=\"token keyword\">import</span> WSGIHandler\n\ndef <span class=\"token function\">get_wsgi_application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token string\">\"\"</span>\"\n    The <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">to</span> Django's <span class=\"token constant\">WSGI</span> support<span class=\"token punctuation\">.</span> Return a <span class=\"token constant\">WSGI</span> callable<span class=\"token punctuation\">.</span>\n\n    Avoids making django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span>WSGIHandler a <span class=\"token keyword\">public</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">case</span> the\n    internal <span class=\"token constant\">WSGI</span> implementation changes or moves <span class=\"token keyword\">in</span> the future<span class=\"token punctuation\">.</span>\n    <span class=\"token string\">\"\"</span>\"\n    django<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>set_prefix<span class=\"token operator\">=</span>False<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">WSGIHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n# 于是自然而言的看到了 WSGIHandler\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WSGIHandler</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">.</span>BaseHandler<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    request_class <span class=\"token operator\">=</span> WSGIRequest\n\n    def <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token function\">load_middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    def <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> environ<span class=\"token punctuation\">,</span> start_response<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        # 有木有看到 environ 和 start_response <span class=\"token operator\">??</span> 这就是极简 web app 中的 webapp 核心方法。\n        <span class=\"token function\">set_script_prefix</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_script_name</span><span class=\"token punctuation\">(</span>environ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        signals<span class=\"token punctuation\">.</span>request_started<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>sender<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">,</span> environ<span class=\"token operator\">=</span>environ<span class=\"token punctuation\">)</span>\n        request <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">request_class</span><span class=\"token punctuation\">(</span>environ<span class=\"token punctuation\">)</span>\n        # 注意这一行，有请求处理逻辑 具体要见下面代码\n        response <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">get_response</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        # <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n        <span class=\"token keyword\">return</span> response\n</code></pre>\n<p>嗯，看到了子类，就要看看基类</p>\n<pre><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseHandler</span><span class=\"token operator\">:</span>\n    _request_middleware <span class=\"token operator\">=</span> None\n    _view_middleware <span class=\"token operator\">=</span> None\n    _template_response_middleware <span class=\"token operator\">=</span> None\n    _response_middleware <span class=\"token operator\">=</span> None\n    _exception_middleware <span class=\"token operator\">=</span> None\n    _middleware_chain <span class=\"token operator\">=</span> None\n\n    def <span class=\"token function\">load_middleware</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">\"\"</span>\"\n        注册 MiddleWare<span class=\"token punctuation\">,</span> 并赋值 _middleware_chain 方法，使之调用的时候可以先按照顺序从 setting 的 middleware 里面处理 requests\n        并在处理 request 的最后调用 私有方法 _get_response\n        <span class=\"token string\">\"\"</span>\"\n        self<span class=\"token punctuation\">.</span>_request_middleware <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>_view_middleware <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>_template_response_middleware <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>_response_middleware <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>_exception_middleware <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        handler <span class=\"token operator\">=</span> <span class=\"token function\">convert_exception_to_response</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_get_response<span class=\"token punctuation\">)</span>\n        # 注意，这里面是倒着来的 代码中越在前面，实际运行的时候处理就越在后面\n        <span class=\"token keyword\">for</span> middleware_path <span class=\"token keyword\">in</span> <span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span><span class=\"token constant\">MIDDLEWARE</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n            # 依次添加 view middleware <span class=\"token operator\">/</span> template middleware <span class=\"token operator\">/</span> exception middleware\n            middleware <span class=\"token operator\">=</span> <span class=\"token function\">import_string</span><span class=\"token punctuation\">(</span>middleware_path<span class=\"token punctuation\">)</span>\n            mw_instance <span class=\"token operator\">=</span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span>\n            handler <span class=\"token operator\">=</span> <span class=\"token function\">convert_exception_to_response</span><span class=\"token punctuation\">(</span>mw_instance<span class=\"token punctuation\">)</span>\n\n        # We only assign to <span class=\"token keyword\">this</span> when initialization is complete <span class=\"token keyword\">as</span> it is used\n        # <span class=\"token keyword\">as</span> a flag <span class=\"token keyword\">for</span> initialization being complete<span class=\"token punctuation\">.</span>\n        self<span class=\"token punctuation\">.</span>_middleware_chain <span class=\"token operator\">=</span> handler\n\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    def <span class=\"token function\">get_response</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">\"\"</span><span class=\"token string\">\"Return an HttpResponse object for the given HttpRequest.\"</span><span class=\"token string\">\"\"</span>\n        # Setup <span class=\"token keyword\">default</span> url resolver <span class=\"token keyword\">for</span> <span class=\"token keyword\">this</span> thread\n        <span class=\"token function\">set_urlconf</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span><span class=\"token constant\">ROOT_URLCONF</span><span class=\"token punctuation\">)</span>\n\n        response <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">_middleware_chain</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        # <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n        <span class=\"token keyword\">return</span> response\n\n    def <span class=\"token function\">_get_response</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">\"\"</span>\"\n        Resolve and call the view<span class=\"token punctuation\">,</span> then apply view<span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">,</span> and\n        template_response middleware<span class=\"token punctuation\">.</span> This method is everything that happens\n        inside the request<span class=\"token operator\">/</span>response middleware<span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"\"</span>\"\n        response <span class=\"token operator\">=</span> None\n\n        # <span class=\"token number\">1.</span> 接着判断 urlconf （默认为 <span class=\"token constant\">ROOT_URLCONF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 可以通过 middleware 进行设置\n        <span class=\"token keyword\">if</span> <span class=\"token function\">hasattr</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'urlconf'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n            urlconf <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>urlconf\n            <span class=\"token function\">set_urlconf</span><span class=\"token punctuation\">(</span>urlconf<span class=\"token punctuation\">)</span>\n            resolver <span class=\"token operator\">=</span> <span class=\"token function\">get_resolver</span><span class=\"token punctuation\">(</span>urlconf<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\n            resolver <span class=\"token operator\">=</span> <span class=\"token function\">get_resolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        resolver_match <span class=\"token operator\">=</span> resolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>path_info<span class=\"token punctuation\">)</span>\n        callback<span class=\"token punctuation\">,</span> callback_args<span class=\"token punctuation\">,</span> callback_kwargs <span class=\"token operator\">=</span> resolver_match\n        request<span class=\"token punctuation\">.</span>resolver_match <span class=\"token operator\">=</span> resolver_match\n\n        # Apply view middleware<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n        # 注意，这个就是 view 函数\n        wrapped_callback <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">make_view_atomic</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n        response <span class=\"token operator\">=</span> <span class=\"token function\">wrapped_callback</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>callback_args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>callback_kwargs<span class=\"token punctuation\">)</span>\n        # Complain <span class=\"token keyword\">if</span> the view returned <span class=\"token function\">None</span> <span class=\"token punctuation\">(</span>a common error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">return</span> response\n\n    def <span class=\"token function\">process_exception_by_middleware</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        # <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n</code></pre>\n<p>上面代码比较表达的意思比较简单，值得注意的地方我都加了注释。</p>\n<p>需要特别注意的就是 middleware_chain 这个属性（实际上是一个方法）, 正是这个方法使得注册的 middleware （在 load_middleware 方法里）可以在 fbv 或者 cbv 处理 request 之前，通过对 request 进行处理。</p>\n<h2 id=\"0xee-参考链接\"><a class=\"v-toc-item\" href=\"#0xee-参考链接\">#</a> 0xEE. 参考链接</h2>\n<p>还犹豫啥，Django 前后端分离最佳实践，点赞后，快上车吧</p>\n<ul>\n<li>前端代码 <a href=\"https://github.com/twocucao/YaVueBlog\">https://github.com/twocucao/YaVueBlog</a></li>\n<li>后端代码 <a href=\"https://github.com/twocucao/YaDjangoBlog\">https://github.com/twocucao/YaDjangoBlog</a></li>\n<li>扩展阅读之 douban restful api 设计 <a href=\"https://developers.douban.com/wiki/?title=api_v2\">https://developers.douban.com/wiki/?title=api_v2</a></li>\n</ul>\n<hr>\n<p>ChangeLog:</p>\n<ul>\n<li><strong>2018-02-22</strong> 开启本文</li>\n<li><strong>2018-03-04</strong> 重修文字</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-djangorestframework-%E8%A7%A3%E8%AF%BB\">0x01 DjangorestFramework 解读</a>\n<ul>\n<li><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8-drf-%E5%91%A2\">为什么要用 DRF 呢？</a></li>\n<li><a href=\"#%E4%B8%8D%E4%BD%BF%E7%94%A8-drf-%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E5%86%99-webapi-%E5%81%9A%E5%91%A2\">不使用 DRF 应该如何写 WebAPI 做呢？</a></li>\n<li><a href=\"#drf-%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E7%9A%84%E6%B5%81%E7%A8%8B\">DRF 处理请求的流程</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-djangorestframework-%E7%9A%84%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B\">0x02 DjangorestFramework 的使用案例</a>\n<ul>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E5%BC%80-webapi-%E6%8E%A5%E5%8F%A3\">如何开 WebAPI 接口</a></li>\n<li><a href=\"#%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-webapi-%E6%8E%A5%E5%8F%A3\">前端如何使用 WebAPI 接口</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-restful-api-%E8%AE%BE%E8%AE%A1\">0x03 RESTFUL API 设计</a>\n<ul>\n<li><a href=\"#%E5%85%B3%E4%BA%8E%E8%AF%B7%E6%B1%82\">关于请求</a></li>\n<li><a href=\"#%E5%85%B3%E4%BA%8E%E5%93%8D%E5%BA%94\">关于响应</a></li>\n</ul>\n</li>\n<li><a href=\"#0x04-django-%E7%9A%84%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB\">0x04 Django 的处理请求流程代码解读</a></li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">0xEE. 参考链接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}