{"pageProps":{"category":{"name":"善用佳软","posts":[{"tags":["Shell"],"path":"20201201_Modern_Shell.md","title":"Modern Shell","slug":"Modern Shell","date":"2020-11-30","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n## 0x01 更好的替代品\n\n### find -> fd\n\n```bash\n{}: A placeholder token that will be replaced with the path of the search result (documents/images/party.jpg).\n{.}: Like {}, but without the file extension (documents/images/party).\n{/}: A placeholder that will be replaced by the basename of the search result (party.jpg).\n{//}: Uses the parent of the discovered path (documents/images).\n{/.}: Uses the basename, with the extension removed (party).\n```\n\n```bash\n# Convert all jpg files to png files:\nfd -e jpg -x convert {} {.}.png\n\n# Unpack all zip files (if no placeholder is given, the path is appended):\nfd -e zip -x unzip\n\n# Convert all flac files into opus files:\nfd -e flac -x ffmpeg -i {} -c:a libopus {.}.opus\n\n# Count the number of lines in Rust files (the command template can be terminated with ';'):\nfd -x wc -l \\; -e rs\n```\n\n### grep -> ripgrep\n\n### ls -> exa\n\n### cat -> bat\n\n## Dev\n\n### json_pp\n\n### FZF\n\n### Autojump\n\n## Tools\n\n### mycli\n\n### pgcli\n\n### convert\n\n### k9s\n\n### tokei\n\n### git\n\n### FTP\n\n```bash\nFTP Client 提交文件\n#!/bin/bash \nlftp <<SCRIPT\nset ftps:initial-prot \"\"\nset ftp:ssl-force true\nset ftp:ssl-protect-data true\nset ssl:verify-certificate no\nopen <ftp://xxx.xxx.xxx.xxx:21> user ftpuser ftppass\nlcd /Users/<username>/Ftps/Workspace/libs\nput /Users/<username>/Ftps/Workspace/repos/xxx.jar\nexit SCRIPT\n```\n\n## 0x05 网络\n\n```\ndig ns baidu.com\n\n### 如何查看占用 TCP/UDP 端口\nlsof -i -P -n | grep LISTEN\nnetstat -tulpn | grep LISTEN\nlsof -i:22 ## see a specific port such as 22 ##\nnmap -sTU -O IP-address-Here\n```\n\n## 0x07 文件浏览\n\n## 0x08 多媒体处理\n\n### 图片处理\n\n```\nconvert {{image1.png}} {{image2.png}} {{image3.png}} -delay {{100}} {{animation.gif}}\n```\n\n### 视频处理\n\n```bash\n# 抽取 mp4 中的音频并保存为 mp3\nmkdir outputs\nfor f in *.mp4;\n    do ffmpeg -i \"$f\" -c:a libmp3lame \"outputs/${f%.mp4}.mp3\";\ndone\n```\n\n## 0x09 Tmux\n\n```bash\ntmux new -s you_tmux_name\ntmux ls\ntmux a\ntmux a -t you_tmux_name\nc-b + d\ntmux kill-session -t you_tmux_name\n# 进阶工具 tmuxp\n```\n\n## 0x10 OhMyZsh\n\n```bash\n# https://github.com/ohmyzsh/ohmyzsh\nwget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\nsh install.sh\n```\n\n```bash\n# https://github.com/twocucao/dotfiles\nmkdir ~/Cystem\ncd ~/Cystem && git clone git@github.com:twocucao/dotfiles.git && cd dotfiles\nln -sfv `pwd`/zshrc ~/.zshrc\n```\n\n其他配置\n\n- powerlevel10k\n- autojump\n- zsh-autosuggestions\n- zsh-syntax-highlighting\n- zsh-completions\n- https://github.com/ryanoasis/nerd-fonts\n"},{"tags":["Windows"],"path":"20190413_如何优雅的使用Windows10.md","title":"如何优雅的使用 Windows 10","slug":"如何优雅的使用 Windows 10","date":"2019-04-03","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n## 0x00 前言\n\n最近入手了 SP6, 于是把 2015 年写的这篇文章修订为 2019 版\n\n> 笔者已过了爱折腾的年纪，仅从提升工作效率方面来说。\n\n背景：\n\n0. Pythonista && Nodejs\n1. 工作机 MBP 2017 款机器\n2. 生活机 Surface Pro 6, 轻办公，有时也用来调试 Windows 上的程序。\n\n本文目录\n\n```markdown\n▼ 0x00 前言 : section\n0x01 文件整理 : section\n▼ 0x02 自带功能 : section\n2.1 快捷键 : section\n2.2 触摸板 : section\n2.3 Win+R -- 运行 : section\n▼ 0x03 必备软件 : section\n3.1 文件管理 : section\n3.2 资讯浏览 : section\n3.3 学习软件 : section\n3.4 播放器 : section\n0x04 Autohotkey : section\n▼ 0x05 编程配置 : section\n5.1 Windows Subsystem Linux : section\n5.2 终端 : section\n5.3 Python : section\n5.4 Node : section\n5.5 其他 : section\n0x06 实用主义的工具论 : section\n0xEE 后续 : section\n```\n\n## 0x01 文件整理\n\n文件整理一般从类型上进行划分子文件夹。\n\n贴上我的几张图来看一下我的文件夹命名：\n\n一级文件夹如下：\n![](http://upload-images.jianshu.io/upload_images/52890-b6a5322beca48d2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n二级文件夹如下：\n![](http://upload-images.jianshu.io/upload_images/52890-656d90e16abaff66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n三级或者三级以上文件夹\n\n![](http://upload-images.jianshu.io/upload_images/52890-bdf7349fccedda52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n文件命名规范（因为涉及到后面使用 Everything，所以我们的命名尽量追求便于搜索）\n\n举个例子，对于读书笔记 ：读书笔记、\\_设计模式、\\_20150303_v2.1.xmind\n\n对于照片这种文件比较多的，优先命名文件夹，其次按照地址人物日期命名，比如：大明湖胖、\\_夏雨荷、\\_20150101\n\n> 无需刻意追求命名，方便搜索，方便管理就好。\n\n不妨参考下面文章：\n\n[电脑上的文件夹该如何命名（整理）才能做到很久都不用重新整理的那种？ - 文件整理](http://www.zhihu.com/question/21537488)\n\n由于 Windows 的文件没有标签系统。则可以从命名上强行打上标签，比如加上年份。\n\n嗯这样你在搜索笔记的时候在 Everything 里面只需要键入 2015 笔记就可以查看 2015 笔记文件。\n\n是不是很方便？\n\n![](http://upload-images.jianshu.io/upload_images/52890-f4a815755900d627.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/52890-1fb3ac3766e59044.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当然桌面上尽量少放或者不放文件夹，我的桌面上仅仅有一个链接到 OneDrive 里面的 TEMP 文件夹的快捷方式，用于存放临时没有整理的文件。\n\n![](http://upload-images.jianshu.io/upload_images/52890-be22e9252b149d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 0x02 自带功能\n\n### 2.1 快捷键\n\n能看到本文的读者应该都可以搜索到这些东西。就不赘述了。\n\n仅仅说一些重点快捷键。Win+ 数字键 把常用的软件附在任务栏上。\n\n建议四个以内，方便单手操作。Win+X Alt+tab 切换窗口 Win+R 运行\n\n### 2.2 触摸板\n\n嗯，没有苹果的触摸板好用。但 Windows 的快捷键好用多了。\n\n### 2.3 Win+R -- 运行\n\n主要用于启动一些程序或者一些 DOS 小命令。\n\n![](http://upload-images.jianshu.io/upload_images/52890-d39ea3f078f1d800.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我将所有的便携与非便携软件的快捷方式放在这里并且配置环境变量。\n\n比如，我需要启动为知笔记，我就仅仅需要闭上眼睛输入 Win+R + wz +<Enter>\n\nPS: 景观\n\n其他软件同理。\n\n```python\n# sublime text 打开需要输入 \nWin+R + st +<Enter>\n# 欧路词典 打开需要输入 \nWin+R + ol +<Enter>\n# 这里省去若干软件打开方式。\n```\n\n关于 Win+R 你可以参考善用佳软  [最绿色最高效，用 win+r 启动常用程序和文档](http://xbeta.info/win-run.htm)  的介绍。\n\n## 0x03 必备软件\n\n### 3.1 文件管理\n\n- 图片方面，如果不是 RAW 格式，可以考虑使用 Eagle 这个神器\n- 文字方面，如果是简单的图文素材，可以直接丢到印象笔记 / 有道云笔记里。\n- 文档管理，如果是比较 Geek 一些的话，可以考虑用 TotalCMD 管理文档，Everything 快速搜索\n\n- PS: 没有足够的需求，不要搞 TC.\n- PS2: 无坚不摧，为快不破。 everything 是搜索效率最快的软件。没有之一。\n\n### 3.2 资讯浏览\n\n- 浏览器 Chrome / 新版 Edge 浏览器\n- 欧陆词典：可以外挂其他的开源词库，查词速度超级快。\n\n### 3.3 学习软件\n\n- Xmind\n- OneNote\n- Office\n\n### 3.4 播放器\n\n- PotPlayer\n- foobar2000 -- 逼格提升必备\n\n![](http://upload-images.jianshu.io/upload_images/52890-1d8bc57d69948d60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 网易云音乐 -- 这货真的不错。\n\n## 0x04 Autohotkey\n\n早年刚接触这个软件的时候，是为了在魔兽争霸里面快速输入文本....\n\n但这个软件可以帮你少装很多软件，\n\n比如：\n\n1. 可以针对快捷键进行编程，\n2. 节省大量的时间，比如一大段文字中有一个网址，你需要访问它，我的解决方法就是选中那些文字，然后一个 Win+b，直接打开 chrome 进行搜索，如果文字中没有网址，那么对选中文字进行百度。同理可以推淘宝，京东 github 等等。\n3. 你需要大量的文本编辑，但是上下左右离自己的工作区比较远，你可以小拇指按住大写锁定按键，然后使用 HJKL 进行移动。\n\n而且，作为曾经的 Geek , 不写点代码定制一下使用流程，你都不好意思说优雅。\n\n教程参考 [AutoHotkey 之美 - 知乎专栏](http://zhuanlan.zhihu.com/autohotkey)\n\n新手可以先拿我搜刮整理的 AHK 代码看看。[twocucao/ChortHotKey · GitHub](https://github.com/twocucao/ChortHotKey)\n\nPS：AHK/TotalCMD 神级软件，都是入门容易精通难的深坑，想调教好也不是想象中呢么简单的，但，书到用时方恨少，你可以先挑一些使用。如果你以后有不少的文件需要管理，在未来，你一定会用到。\n\n> PS: 站在 2019 年回头看，其实 AHK 的语法还是蛮糟糕的。相比于顺手打出很多快捷键。倒不如先优化自己的工作流程。甚至，很多 AHK 的场景完全可以用 Python 之类的语言来写。当我在 Windows 上的时候一味追求 APM, 即高效的操作，但其实最高效的还是自己的思路清晰，想好了再动手。\n\n毕竟，AHK 作为脚本语言，确实语法不美，数据结构也少，没有主流编程语言的社区支持。\n\n嗯，其实还是推荐学 Python\n\n## 0x05 编程配置\n\n### 5.1 Windows Subsystem Linux\n\n如何配置 WSL （我死了？哈哈哈哈好逗的缩写）\n\nhttps://zhuanlan.zhihu.com/p/49227132\n\nhttps://zhuanlan.zhihu.com/p/47733615\n\n### 5.2 终端\n\ncmder 相当于 windows 上的 iterm\n\nhttps://github.com/cmderdev/cmder\n\n### 5.3 Python\n\nhttps://www.anaconda.com/distribution/#download-section\n\n由于笔者要调试 Win32 程序，而大部分这些 dll 文件都是在 32 位的情况下编译出来的。\n\n### 5.4 Node\n\nhttps://nodejs.org/en/download/\n\n### 5.5 其他\n\n- beyond compare 代码比对\n- jetbrain\n- vscode\n\n## 0x06 实用主义的工具论\n\n当你选择用一个工具的时候，务必把精力放在解决问题上。\n\n能满足你的要求，就是好工具，须知『梅须逊雪三分白，雪却输梅一段香』\n\n孰高孰下取决于使用者。\n\n> 你是张三丰，你就能徒手夺来灭绝师太的倚天剑。\n\n并不是说用了一个操作系统，用了某个软件，就会显得自己多么高明，如果不能给日常工作生活提高效率，让自己节省时间，再好的工具，那又有什么意义呢？\n\n> 抓到老鼠的猫才是好猫呀！\n\n## 0xEE 后续\n\n> 2016-01-04 已换 Macbook Pro, 依然挂念 Windows.\n> 2017-05-01 已换 2016 年 Macbook Pro With Multi-Touchbar.\n> 2019-04-13 新增 SP6 作为生活机。\n\nChangeLog:\n\n- 2017-03-08 09:32:15 整理知乎回答，搬运到博客上。\n- 2017-05-01 09:32:15 补充现在使用的电脑信息\n- 2017-06-10 09:32:15 重新排版，增加后续章节。\n- 2019-04-13 13:57:02 重新排版\n"},{"tags":["FCPX"],"path":"20181125_FinalCutProX.md","title":"Final Cut Pro X CheatSheat","slug":"Final Cut Pro X CheatSheat","date":"2018-11-25","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n## 0x00 前言\n\n本文诞生于用 Final Cut Pro X 剪了几次视频之后的复盘总结\n\n部分内容来自于\n\n- Final Cut Pro X 10.1 非线性编辑高级教程\n- Final Cut Pro X 影视包装剪辑完全自学教程\n\n## 0x01 剪辑流程\n\n所有的剪辑流程都是想法的具体实现，这意味着在剪辑之前，需要做好前期准备\n\n    1. 确定大致思路\n    2. 调好参数摄影\n\n然后\n\n1. 素材导入\n2. 片段整理\n3. 前期剪辑\n4. 精剪\n5. 分享\n\n## 0x01 前期准备\n\n本文复盘的是古墓丽影暗影假预告片剪辑。\n\n热血的预告片通常具有如下的特征：\n\n1. 有一条主线，但不剧透，通常这个主线往往是有人在说话，引出了整个故事\n2. 霸气磅礴的背景音乐\n3. 频繁而不冗余的镜头切换\n4. 踩节奏踩的非常精准\n\n## 0x02 素材导入\n\n1. 建立 Library 游戏\n2. 建立 Event 古墓丽影暗影，导入游戏视频\n3. 建立 Project 古墓丽影暗影盗梦空间预告片\n\n素材导入没什么好说的，因为 PS4 里录制成什么样子，就是什么样子。\n\n开启转码和分析的话，可以分析出更多的片段类型。\n\n### 注意点\n\n- 建议开启『创建优化的媒体』\n- 看存储情况如果存储不是很足的话，开启『创建优化的代理文件』\n\n尽量将素材管理的任务交给 FCPX 来做，所以，如果可能的话，直接拷贝进资料库最好。\n\n对于个人剪辑的话，比较适合两个 Library, 即一个常用 Library, 另一个是本项目的 Library 当然，其实也可以\n\n## 0x03 片段整理\n\n对于不同类型的影片，需要不同类型的整理方式\n\n1. 对于预告片来说，两三秒的镜头可以带出大量的信息，引人遐想。\n2. 而对于普通综艺 / 电视剧 / 电影来说，如果遵循着预告片的节奏的话，则会交代不清楚事情。\n\n对于预告片来说，就仅仅剩下挑选中上片段这一个选项了。\n\n1. 快速浏览片段内容\n2. 挑选片段里面的片段打上关键字\n3. 进入了某个关键字的视频列表，对它进行评价 (f/u/del)\n\n快速浏览\n\n1. FCPX 提供了缩略图模式，可以按 1s/5s/10s 的间隔显示视频内容，合理使用的话，可\n   以达到事半功倍的效果。\n2. 善用 jkl 快速浏览视频\n\n打关键字\n\n1. 调出关键词管理器，然后设置关键词的快捷键，FCPX 可以快速选中一个片段中的片段（也可以通过 i/o 快捷键进行选择），选择 ctrl + num 打一个关键字。\n2. 这里也不需要把关键词的片段弄的特别的精准。因为其实放到视频里面还是可以前后拖拽的。（这只是个浅拷贝）\n\n评价系统\n\n嗯？上了关键字的都是不错的镜头，似乎评价体系就没那么重要了\n\n经过这些操作，之后，可以快捷的进行搜索。筛选出自己需要的片段。\n\n嗯，由于项目本身并不算复杂。就关键字一波流搞定好了。\n\n当然，题外话，如果我后期会基于这些素材做很多其他的事情的话，我就会认真的重新给片段\n划分精细的关键字。\n\n## 0x04 前期剪辑\n\n笔者遇到的剪辑基本分为两种：\n\n1. 踩情节类型\n2. 踩节奏类型\n\n3. 踩情节类型的剪辑只需要往上怼素材，然后依据磁力线调整即可。比如采访类，比如综艺。\n4. 踩节奏类型的剪辑这比较繁琐，因为要不断的增加，修改，删除片段。\n\n本次的剪辑就遇到了这个偏移问题，对于音乐的几个转节奏的地方，把视频 / 字幕放在磁力线上，删掉调整节奏前的片段，则导致后面的片段发生偏移。\n\n为了解决偏移带来的踩节奏问题：\n\n1. 设定一个标尺，奈何 FCPX 没有这个概念。于是，我采用了通过字幕来进行项目骨架的构建和注释。在音频的关键的地方，Marker 来注释.（经过仔细思考后，我认为可以弃用字幕的方式了，直接加一个调整层，在调整层上做 marker 来注释就好了）\n2. 当我要先空着预告片的前面，直接到后面编辑需要踩节奏的点位，则先 Q 放一个片段到这个踩节奏的点，然后创建故事线。在故事线里调整完毕之后，合并到主线上。\n3. 当我现在转到前面进行编辑的时候，Q 放一个片段到这个踩节奏的点，然后创建故事线，同上。\n4. 当我需要修改的时候把多个视频片段提出来，在视频上方调整好片段，合并到主线上。\n\n于是，骨架搭好，进入精细剪辑阶段吧。\n\n## 0x05 精细剪辑\n\n在精细剪辑的时候，记得先复制当前项目的一个快照。给快照名称升级个版本。\n\n### 5.1 调整片段\n\n1. 视频长度太长可以剪掉 (B)\n2. 速度过快过慢可以调整速度 (cmd+r)\n3. 滑动编辑 (Trim)\n   3.1 时间范围对了，似乎需要该片段的更前或者更后的部分.(T trim 一下） PS: 可以搭配 Marker 在细节上踩节奏。\n   3.2 片段和片段之间需要前面少点，后面多点 (T trim 一下）\n4. 移动故事线的片段而不发生位移 (postion 拖动 / lift + select 拖动）\n\nPS: 调整速度上 blade speed 是个利器\n\n### 5.2 调整效果\n\n#### 色彩改变 - 调色\n\n1. 苹果自带了平衡颜色。\n2. 手动调整\n\n#### 画面聚焦 - 晕影\n\n#### 关键帧动画\n\n### 5.3 调整转场\n\n少用转场，尽量保持转场的一致性。\n\n### 5.5 调音\n\n## 0x06 分享文件\n\n1. 直接输出 cmd + e\n2. 调用 Compressor 制定更多的输出规则\n\n### 分享技巧\n\n1. 素材很重要 -- 『保留 Library』\n2. 作品已定型 -- 『输出模板文件』\n3. Compressor -- 输出多格式的文件\n\n## 0x07 其他\n\n### 7.1 插入的四种方式\n\n1. 连接：放置在磁力线上方，磁力线上方可以使用 N 进行片段之间的吸附\n2. 插入\n3. 追加\n4. 覆盖\n\n当 range 选中在主故事线选中时间范围内的话，可以插入某个时间段的视频\n\n### 7.2 提升格调\n\n提升格调的两种方法：\n\n1. 镜头感\n2. 电影感\n\n## 0xEE 参考\n\n---\n\nChangeLog:\n\n- **2018-11-25** 初始化本文\n"},{"tags":["Tmux"],"path":"20180128_TmuxWithTmuxinatorWorkflow.md","title":"用 tmux 与 tmuxinator 打造开发工作流","slug":"用 tmux 与 tmuxinator 打造开发工作流","date":"2018-01-28","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n## 0x00. 前言\n\n本文就我最近开发的一个前后端的项目（名字叫做 yavueblog) 来简单介绍两个神器\n\n- 一个是 tmux\n- 一个是 tmuxinator\n\n我在开发这个前后端的项目的时候要开启要通过不少的命令来启动服务：\n\n- （前端开发）运行 npm run dev 进行开发前端页面\n- （前端开发）运行 npm run dev:theme , 当主题的 SCSS 发生变化的同时，编译 SCSS\n- （前端开发）运行 npm run dev:iconfont, 当移入了新的 svg 图标的时候，自动构建出新的字体文件与 iconfont.css 。\n- （后端开发）运行 make dockerup 中开启 Django 应用。启动 Django 服务，PostgreSQL 数据库，Redis 等等，\n\n我的需求如下：\n\n- 一键启动这些脚本，前两个任务，放在第一个终端。\n- 后面两个任务放在第二、三个终端里。\n\n以前的做法都是新建三个终端选项卡，然后第一个终端分两屏，然后分别到各个终端 cd 或者 autojump 到对应的目录，然后手动运行命令。\n\n加上运行 npm run dev:theme 的时候，我是通过 Python 的 watchdog 来实现对指定目录和指定类型文件的变化进行监听的，所以还要切换 PyEnv 自定义的 Python 的环境中。\n\n这些命令反反复复输入还是挺麻烦的事情，为何不用工具来解决呢？\n\n## 0x01 tmux + tmuxinator\n\n先安装\n\n```\nbrew install tmux\nbrew install ruby\ngem install tmuxinator\n```\n\n什么是 tmux? 简单而言，就是一个终端复用软件。\n什么是 tmuxinator? 简单而言，就是为了简化 tmux 操作的软件。只需要编写 yaml 即快速开启一个比较适合你的终端窗口布局。\n\n关于 tmux 的配置，推荐这个 repo\n\nhttps://github.com/gpakosz/.tmux\n\n## 0x02 编写 Tmuxinator 配置文件\n\n输入 tmuxinator new yavueblog\n\n修改文件如下\n\n```\n# ~/.tmuxinator/yavueblog.yml\n\nname: yavueblog\nroot: ~/Codes/PublicRepos/YaBlogSystem/\n\n# Optional tmux socket\n# socket_name: foo\n\n# Runs before everything. Use it to start daemons etc.\n# pre: sudo /etc/rc.d/mysqld start\n\n# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.\npre_window: pyenv activate 3.5.2/envs/py3-daily\n\nwindows:\n  - \"网站开发\":\n      layout: main-vertical\n      # Synchronize all panes of this window, can be enabled before or after the pane commands run.\n      # 'before' represents legacy functionality and will be deprecated in a future release, in favour of 'after'\n      # synchronize: after\n      panes:\n        - \"cd ./YaVueBlog/ && npm run dev\"\n        - \"cd ./YaVueBlog/ && npm run dev:theme\"\n  - \"iconfont 构建\": \"cd ./YaVueBlog/ && npm run dev:iconfont\"\n  - \"DockerizedDjango\": \"cd ./YaDjangoBlog/ && make docker-compose-build-up\"\n\n```\n\n这样的话，每次开发就只需要运行 tmuxinator start yavueblog，并且打开 IDE 直接捋起袖子就是干就好了。\n\n## 0x03 玩 tmux 首先要掌握的三个小技巧\n\n如果你刚用 tmux 的话，火速掌握下面三个小技巧。要不然会抓狂的。\n\n1. 切换终端\n\n- c-b + 数字\n- c-b + n\n\n2. 滚屏\n\nhttps://superuser.com/questions/209437/how-do-i-scroll-in-tmux\n\n3. 复制文字\n\nhttps://superuser.com/questions/196060/selecting-text-in-tmux-copy-mode\n\n## 0xEE 参考链接\n\n- [我的 Github](https://github.com/twocucao)\n\nChangeLog:\n\n- **2017-03-08 09:33:37** 重新润饰文字，弃用 Rails 开发一年。现在主 DjangoRestFrameWork+VueJS\n- **2018-01-28 11:44:00** 重修文字，适配本文\n"},{"tags":["macOS"],"path":"20171223_macOSInDepth.md","title":"macOS 的系统与软件","slug":"macOS 的系统与软件","date":"2017-12-23","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n## 0x00 前言\n\n折腾了 Windows 很多年，后来出于个人开发需求转投 Mac，使用起来一直很顺手。现在也开始从顺手开始到了解更深一点的东西。\n\n## 0x01 系统安全架构\n\n### 1.1 系统架构概述\n\n非开发人员分层：\n\n- User Experience\n  - Aqua\n  - Dashboard\n  - Spotlight\n  - Dock\n  - 输入法\n  - 屏保\n  - 辅助功能\n  - 语音\n  - 位置与地图\n  - 搜索\n  - etc\n- Application Framework\n  - Cocoa\n- Graphics and Media\n  - 核心框架，OpenAL,Quartz,SceneKit,SpriteKit\n- Darwin\n  - 系统内核与 Shell 环境\n\n开发人员分层：\n\n- Cocoa Layer: Cocoa 框架层 包括了用于开发界面程序的框架集合。\n- Foundation Layer: 提供了程序开发室使用到的基础数据类型、数值处理、网络、IO 和 日期等\n- Media Layer: 提供了图像、声音、视频、动画及游戏开发需要的接口\n- Core Service Layer: 系统安全、底层内部数据访问以及存储接口。比如 AddressBook,CoreData,QuickLook 用于快速浏览插件开发。CoreFoundation 框架也属于这一层。\n- Core OS Layer: 加速器，蓝牙，异常处理，网络扩展，系统配置\n- Kernel & Driver Layer: 内核与驱动层。包括开发设备驱动程序与内核扩展所需的一些框架。\n\n应用程序是一个 bundle 文件，一般为 xxx.app 文件夹，\n\n### 1.1 一些常用软件\n\nClang\nLLVM\n\nHT Editor\n\n```\nbrew install ht\n```\n\n## 0x02 前言\n\n## 0x03 前言\n\n## 0xEE 参考链接\n\n- macOS 软件安全和逆向分析\n\n---\n\nChangeLog:\n\n- **2017-12-20** 初始化本文\n- **2018-02-10** 添加笔记\n"},{"tags":["Shell"],"path":"20150418_ShellCheatSheet.md","title":"Shell CheatSheet","slug":"Shell CheatSheet","date":"2017-12-01","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n# Shell CheatSheet\n\n## 0x00 前言\n\n本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Shell 单行命令。\n\n## 0x01 快捷键\n\n```\n- 「c-c」 : 中断当前命令。\n- 「c-z」 : 当前程序暂停，bg 切换后台运行，使用 fg 可以调回\n- 「tab」 : 补全\n- 「tabx2」 : 补全提示\n- 「c-r」 : 搜索命令行\n- 「c-w」 : 同 vim\n- 「c-u」 : 删除整行\n- 「a-b/a-f」 : 移动一个词\n- 「c-a」 : 移动至行首\n- 「c-e」 : 移动至行尾\n- 「c-k」 : 删除光标到行尾\n- 「c-l」 : 清屏\n- 「c-x,c-e」 : 用默认编辑器编辑当前命令（这样就可以把其他文本移动扔掉了。)\n```\n\n## 0x02 帮助\n\n查找帮助\n\n```\n- man\n- whatis / which / where\n- tldr\n```\n\n值得一提的就是 tldr, 直接可以在上面查看命令的常规使用。实在是碉堡了。\n\n```\n> tldr ssh\nLocal data is older than two weeks, use --update to update it.\n\nssh\n\nSecure Shell is a protocol used to securely log onto remote systems.\nIt can be used for logging or executing commands on a remote server.\n\n- Connect to a remote server:\n    ssh username@remote_host\n\n- Connect to a remote server with a specific identity (private key):\n    ssh -i path/to/key_file username@remote_host\n\n- Connect to a remote server using a specific port:\n    ssh username@remote_host -p 2222\n\n- Run a command on a remote server:\n    ssh remote_host command -with -flags\n\n- SSH tunneling: Dynamic port forwarding (SOCKS proxy on localhost:9999):\n    ssh -D 9999 -C username@remote_host\n\n- SSH tunneling: Forward a specific port (localhost:9999 to slashdot.org:80) along with disabling pseudo-[t]ty allocation and executio[n] of remote commands:\n    ssh -L 9999:slashdot.org:80 -N -T username@remote_host\n\n- SSH jumping: Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters):\n    ssh -J username@jump_host username@remote_host\n\n- Agent forwarding: Forward the authentication information to the remote machine (see `man ssh_config` for available options):\n    ssh -A username@remote_host\n```\n\n## 0x03 macOS 用户\n\n如果你和我一样使用的是 mac 系统\n\n可以考虑将部分 FreeBSD 的工具换成 gnu\n\n```\nbrew install autoconf bash binutils coreutils diffutils ed findutils flex gawk \\\n    gnu-indent gnu-sed gnu-tar gnu-which gpatch grep gzip less m4 make nano \\\n    screen watch wdiff wget\n```\n\nbashrc/zshrc 加上如下命令\n\n```\nif type brew &>/dev/null; then\n  HOMEBREW_PREFIX=$(brew --prefix)\n  # gnubin; gnuman\n  for d in ${HOMEBREW_PREFIX}/opt/*/libexec/gnubin; do export PATH=$d:$PATH; done\n  # I actually like that man grep gives the BSD grep man page\n  #for d in ${HOMEBREW_PREFIX}/opt/*/libexec/gnuman; do export MANPATH=$d:$MANPATH; done\nfi\n```\n\n经过上面一步，则基本上 find sed tar which 这些命令使用的 gnu 版本 (linux 版本）, 而非系统自带的 unix 版本了。\n\n## 0x04 基本命令 - old fashion\n\n```bash\n文件 / 目录 mkdir / rm\n查找文件 cd / cp / pwd / find\n查看文件 more / less / tail / diff / cat / grep\n用户权限 chown / chmod\n复制 / 粘贴 / 同步 / 链接 cp / rsync / ln\n挂载 mount\n```\n\n```bash\n# 创建和删除\nmkdir\nmkdir -p a/b/c\n\nrm\nrm -rf dir/file/regex\nrm *log# 等价 find ./ -name \"*log\" -exec rm {};\n\nmv\ncp\ncp -r source_dir dest_dir\nrsync --progress -a source_dir dest_dir\nrsync -vr --progress you_folder_here twocucao@192.168.2.151:/Users/twocucao/Codes/# 目录切换 ls -lrt\nfind ./ -name \"*.o\" -exec rm {} \\;\nmore\nhead\ntail\ntail -f filename\ndiff\nchown\nchmod\nchown -R tuxapp source/chmod a+x myscript\nln cc ccA\nln -s cc ccTo\ncat -v record.log | grep AAA | grep -v BBB | wc -l\nfind ./ | wc -l\n```\n\n```bash\n查找文件之 find (gfind)\n## Find\nfind . \\( -name \"*.txt\" -o -name \"*.pdf\" \\) -print\n# 正则方式查找 txt 和 pdf\nfind . -regex  \".*\\(\\.txt|\\.pdf\\)$\"\nfind . ! -name \"*.txt\" -print\nfind . -maxdepth 1 -type f\n# 定制搜索\n## 按照类型搜索\nfind . -type f -print  #只列出所有文件\nfind . -type d -print  #只列出所有目录\nfind . -type l -print  #只列出所有符号链接\n## 按照时间搜索\nfind . -atime 7 -type f -print\n# 最近第 7 天被访问过的所有文件：\nfind . -atime -7 -type f -print\n# 最近 7 天内被访问过的所有文件：\nfind . -atime +7 type f -print\n# 查询 7 天前被访问过的所有文件：\n# w,k,M,Gfind . -type f -size +2kfind . -type f -perm 644 -print \n# 找具有可执行权限的所有文件 find . -type f -user weber -print\n# 找用户 weber 所拥有的文件\n# 后续动作\n## 删除 find . -type f -name \"*.swp\" -delete\n## 执行动作\nfind . -type f -name \"*.swp\" | xargs rmfind . -type f -user root -exec chown weber {} \\;\n## eg: copy 到另一个目录\nfind . -type f -mtime +10 -name \"*.txt\" -exec cp {} OLD \\;\n##  -exec ./commands.sh {} \\;\n# 2. 删除内部为空的文件夹# 递归删除 a/b/c\nfind . -type d -empty -delete\n# 使用.gitkeep 进行填充\nfind . -type d -empty -exec touch {}/.gitkeep \\;\nfind . -type d -empty -not -path '*/\\.*' -exec touch {}/.gitkeep \\;\n# 不初始化.git/\n# 3. 寻找 TOP 10\nfind . -type f -printf '%s %p\\n'| sort -nr | head -10 | awk '{$1/=1024*1024;printf \"%.2fMB - %s\\n\",$1,$2}'\n# 4. 寻找文件夹 TOP 10\n{}: A placeholder token that will be replaced with the path of the search result (documents/images/party.jpg).{.}: Like {}, but without the file extension (documents/images/party).{/}: A placeholder that will be replaced by the basename of the search result (party.jpg).{//}: Uses the parent of the discovered path (documents/images).{/.}: Uses the basename, with the extension removed (party).# Convert all jpg files to png files:fd -e jpg -x convert {} {.}.png# Unpack all zip files (if no placeholder is given, the path is appended):fd -e zip -x unzip# Convert all flac files into opus files:fd -e flac -x ffmpeg -i {} -c:a libopus {.}.opus# Count the number of lines in Rust files (the command template can be terminated with ';'):fd -x wc -l \\; -e rs\n```\n\n```bash\n# 压缩 / 解压缩\n7z / 7za /7zr\ntar / gzip / unzip/ unrar\n# 打包\ntar -cvf\n# 解包\ntar -xvf\n# 压缩\ngzip\n# 解压缩\ngunzip\nbzip\ntar 是将多个文件放在一起变成一个 tar 文件 (Tape Archiver)\ngzip 是讲一个文件变成一个压缩文件\n则 foo.tar.gz 指的是 先把文件转为 tar 文件，然后 gzip 之\n```\n\n### 文本篇\n\n```bash\ngrep match_pattern file\n\n\t-o 只输出匹配的文本行\n\t-v 只输出没有匹配的文本行\n\t-c 统计文件中包含文本的次数\n\t-n 打印匹配行号\n\t-i 搜索时符合大小写\n\t-l 之打印文件名\n\ngrep \"class\" . -R -n # 多级目录中对文本递归搜索\ngrep -e \"class\" -e \"vitural\" file # 匹配多个模式\ngrep \"test\" file* -lZ| xargs -0 rm # grep 输出以、0 作为结尾符的文件名：（-z）-d 定义定界符-n 输出为多行-l {} 指定替换字符串 cat file.txt | xargs # 打印多行 cat file.txt | xargs -n 3 # 分割多行\ncat file.txt | xargs -I {} ./command.sh -p {} -1-0 指定、0 为输入定界符\nfind source_dir/ -type f -name \"*.cpp\" -print0 |xargs -0 wc -l\n\n# sort 排序\n\n-n 按数字进行排序\n-d 按字典序进行排序\n-r 逆序排序\n-k N 指定按照第 N 列排序\nsort -nrk 1 data.txtsort -bd data // 忽略像空格之类的前导空白字符\nsort unsort.txt | uniq > sorted.txt # 消除重复行\nsort unsort.txt | uniq -c # 统计各行在文件中出现的次数\nsort unsort.txt | uniq -d # 找出重复行# 用 tr 进行转换\n\n# cut 按列切分文本 cut -f2,4 filename\n# 截取文件的第 2 列和第 4 列 cut -f3 --complement filename #去文件除第 3 列的所有列 cut -f2 -d\";\" filename -d #指定定界符 cut -c1-5 file\n# 打印第一到 5 个字符 cut -c-2 file \n# 打印前 2 个字符# paste 按列拼接文本 paste file1 file2 -d \",\"\n\n# wc 统计行和字符的工具 wc -l file # 统计行数 wc -w file # 统计单词数 wc -c file # 统计字符数\n\n# sed 文本替换利器 sed 's/text/replace_text/' file \n# 首处替换 sed 's/text/replace_text/g' file \n# 全局替换 sed -i 's/text/repalce_text/g' file # 替换文件 sed '/^$/d' file \n# 移除空白行 sed -i 's/twocucao/micheal/g' xx.dump.sqlsed -n 634428,887831p insert_doc_ids_new.sql > uninserted_sql.sql\n```\n\n### 用户篇\n\n```bash\n# 添加 yaweb 为 sudo 用户\nusermod -aG sudo yaweb\n所有用户和用户组信息保存在：/etc/passwd , /etc/group\n用户\nuseradd -m yaweb # 创建相关账号，和用户目录 /home/yawebpasswd yawebuserdel -r yaweb # 删除\n用户组\nusermod -g groupName username # 变更组 usermod -G groupName username # 添加到组 usermod -aG sudo yaweb # 添加 yaweb 到 sudo 组\n用户权限\nchown userMark(+|-)PermissionsMark\nuserMark 取值： - u：用户 - g：组 - o：其它用户 - a：所有用户\nPermissionsMark 取值： - r: 读 - w：写 - x：执行\nchmod a+x main         对所有用户给文件 main 增加可执行权限 chmod g+w blogs        对组用户给文件 blogs 增加可写权限 chown -R weber server/\n远程登录\nssh -l root 192.168.2.253\nssh-copy-id root@192.168.2.253\n```\n\n### 网络篇\n\n```bash\n/etc/hostname\n/etc/hosts\nnetstat -a\n```\n\n### 磁盘篇\n\n```bash\n# 查看当前目录大小\ndu -sh\ndu -sh `ls` | sort\n# 查看当前目录的下一级文件和子目录的磁盘容量\ndu -lh --max-depth=1\n```\n\n### 进程管理\n\n```bash\nps -ef | grep twocucao ps -lu twocucao # 完整显示\nps -ajx\nps au | grep phantomjs | awk '{ print $2 }' | xargs kill -9 \ntop htop \nlsof -i:3306\nlsof -u twocucao \nkill -9 pidnum \n# 将用户 colin115 下的所有进程名以 av_开头的进程终止\nps -u colin115 |  awk '/av_/ {print \"kill -9 \" $1}' | sh\n# 将用户 colin115 下所有进程名中包含 HOST 的进程终止：\nps -fe | grep colin115 | grep HOST | awk '{print $2}' | xargs kill -9;\n```\n\nSystemd\n创建一个 Systemd 服务\n\n```\n# /etc/systemd/system/gunicorn.service: \n\n[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target \n\n[Service]\nPIDFile=/run/gunicorn/pid\nUser=someuser\nGroup=someuser\nRuntimeDirectory=gunicorn\nWorkingDirectory=/home/someuser/applicationroot\nExecStart=/usr/bin/gunicorn --pid /run/gunicorn/pid  \n\\\\           --bind unix:/run/gunicorn/socket applicationname.wsgi\nExecReload=/bin/kill -s HUP $MAINPID\nExecStop=/bin/kill -s TERM $MAINPID PrivateTmp=true \n\n[Install]\nWantedBy=multi-user.target\n```\n\n### 性能监控\n\n### 内存瓶颈\n\n```\nhtop\nfree # 从 /proc/meminfo 读取数据\nIO 瓶颈\n# ubuntu 下 可以 mac 下不可以 iostat -d -x -k 1 1\n如果 %iowait 的值过高，表示硬盘存在 I/O 瓶颈。\n如果 %util 接近 100%，说明产生的 I/O 请求太多，I/O 系统已经满负荷，该磁盘可能存在瓶颈。\n如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；\n如果 await 远大于 svctm，说明 I/O 队列太长，io 响应太慢，则需要进行必要优化。\n如果 avgqu-sz 比较大，也表示有大量 io 在等待。\n```\n\n## 0x06 资料推荐\n\n- 一个关于 Linux 命令的各种奇技的网站 http://www.commandlinefu.com/commands/browse\n- Linux 工具快速教程 http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html\n- 一个 Awesome List, https://github.com/jaywcjlove/linux-command\n- 命令行的艺术 https://github.com/jlevy/the-art-of-command-line\n- man command 需要好好研读，特别是 man bash 至少要研读几遍\n\n---\n\nChangeLog:\n\n- **2015-04-18** 初始化本文\n- **2018-08-28** 重修文字\n- **2020-10-24** 重修文字\n"},{"tags":["macOS"],"path":"20171007_ElegantMac.md","title":"如何优雅地使用 macOS","slug":"如何优雅地使用 macOS","date":"2017-10-07","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n# 如何优雅的使用 macOS\n\n## 0x01 macOS 系统操作\n\n### 快捷键\n\n```bash\n- cmd 为 command 按键，通常情况下为所有桌面程序通用性的快捷键。\n- ctrl ，通常情况下是针对程序的功能进行加强，并且此功能往往是非 cmd 类（窗口操作，选择，复制粘贴等等）操作。\n- shift 按键通常用于加强操作。一般会让操作更进一步 or 相反操作。\n\n- cmd+tab =~ alt+tab 程序之间的切换\n- cmd+\\` 应用内窗口切换\n\n- cmd+h 窗口 hide\n- cmd+m 窗口 minimize\n- cmd+n 新建窗口\n- cmd+o 打开\n- cmd+s 保存\n- cmd+shift+s 另存为\n- cmd+p 打印 print\n- cmd+w 关闭\n- cmd+q quit\n\n- cmd+a select all\n- cmd+i show info\n- cmd+n create a new folder\n- cmd+f search\n- cmd+c copy\n- cmd+v paste\n- cmd+delete  删除选中文件\n- cmd+shift+delete 清空回收站\n\n- cmd+= 放大\n- cmd+- 缩小\n- cmd+t 新建选项卡\n- cmd+r 刷新\n\n- cmd+shift+3 截取整个屏幕\n- cmd+shift+4 截取选择区域\n- cmd+shift+4+SPACE 截取选择窗口\n- cmd+ 鼠标点击 -> 选中不连续文件\n- control+ 鼠标点击 -> 相当于 win 中右键点击\n\n- fn+left home\n- fn+right end\n- fn+up pageup\n- fn+down pagedown\n```\n\n### 触摸板\n\n```bash\n- 单指点击 - 单击\n- 单指滑动 - 滑动鼠标光标\n- 双指点击 - 相当于 Windows 的鼠标右键\n- 三指点击 - 划词查找\n\n- 双指上下滑动 - 滚动\n- 双指缩放 - 与 Android 上图片缩放一致\n- 双指双击 - 只能缩放\n- 双指旋转 - 旋转\n- 双指左右滑动 - 应用内切换网页\n- 双指头从右往左\n- 三指头左右滑动 - 全屏幕 App 切换\n- 大拇指和食中无名缩放 - launchpad\n```\n\n## 0x02 日常软件\n\n- iTunes\n- iPhoto\n- SpotLight -> Alfred 3\n\n- Google Chrome\n- Safari\n\n- QQ\n- WeXin\n\n- Adobe PhotoShop CC\n- Adobe PhotoShop LightRoom\n- Adobe After Effect\n- Final Cut Pro X\n- Pollar Photo Editor\n- Sketch\n- ScreenFlow\n- QuickTime\n- iQiyi\n- Snip Pro\n- NeteaseMusic\n- IINA\n- Axure\n- HandBrake\n\n- 欧陆词典\n- Calibre\n- Margin Note 3\n- PDF Expect\n- Microsoft Office\n- iWork 套件：包括 pages, numbers, keynote\n- XMind\n- Spark\n- TeamViewer 远程管理\n- OmniFocus\n\n- AppCleaner\n- CleanMyMac\n- VMWare\n- BetterZip\n- Amphetamine\n- PopClip\n- Paste\n\n### 0x03 开发者工具\n\n### 图形界面\n\n```bash\n- iTerm2\n\n- PyCharm\n- Intellij IDEA\n- WebStorm\n- Datagrip\n- VSCode\n- Vim/NeoVim\n\n- SS QT\n- Charles\n- Wireshark\n- Github Desktop\n- QGIS\n\n- Dash\n```\n\n### 命令行\n\n    #!/bin/bash\n\n    if test ! $(which brew); then\n        echo \"Installing homebrew...\"\n        ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n    fi\n\n    # Shell Support\n    brew install bash\n    brew install bash-completion2\n    echo \"Adding the newly installed shell to the list of allowed shells\"\n    sudo bash -c 'echo /usr/local/bin/bash >> /etc/shells'\n    # chsh -s /usr/local/bin/bash\n    brew install zsh\n    sudo bash -c 'echo /usr/local/bin/zsh >> /etc/shells'\n    chsh -s /usr/local/bin/zsh\n    brew install fish\n    sudo bash -c 'echo /usr/local/bin/fish >> /etc/shells'\n    # chsh -s /usr/local/bin/fish\n\n> 注意：MAC 中存在一些独占的命令\n\n```\nopen\npbcopy\npbpaste\nscreencapture\nlaunchctl\nmdfind（还是 linux 的 find 好用）\nsip （还是比较推荐 imagemagic)\n```\n\n> 注意：MAC 使用的大多命令来自于 FreeBSD , 并不是来自 GNU , 所以很多命令会与常规的 linux 命令不太一样。 所以，Shell 命令请在安装完 Gnu 的工具集之后，可以到我的文章 Shell CheatSheat 查看语法。\n\n```bash\nbrew install diffutils\nbrew install binutils\nbrew install moreutils\nbrew install findutils\nbrew install gnu-sed\nbrew install ed\nbrew install findutils\nbrew install gnu-indent\nbrew install gnu-sed\nbrew install gnu-tar\nbrew install gnu-which\nbrew install grep\n\n# aerial 屏保\n# https://github.com/JohnCoates/Aerial\nbrew cask install aerial\n# https://github.com/sindresorhus/quick-look-plugins\nbrew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzipql qlimagesize webpquicklook suspicious-package quicklookase qlvideo\nbrew cask install keycastr\n```\n\n另起终端\n\n有时候 /usr/local 的可能会存在权限问题，建议如果可能出现问题，则需要执行下面的命令修复权限。\n\n```bash\nsudo chown -R $(whoami):admin /usr/local/\n```\n\n## 0x03 编程环境\n\n---\n\n### Python\n\n    brew install python@2 python\n\n### NodeJS\n\n```bash\n# ~/.npmrc\nchromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver\noperadriver_cdnurl=http://cdn.npm.taobao.org/dist/operadriver\nphantomjs_cdnurl=http://cdn.npm.taobao.org/dist/phantomjs\nfse_binary_host_mirror=https://npm.taobao.org/mirrors/fsevents\nsass_binary_site=http://cdn.npm.taobao.org/dist/node-sass\nelectron_mirror=http://cdn.npm.taobao.org/dist/electron/\n\nregistry=https://registry.npm.taobao.org\ndisturl=https://npm.taobao.org/dist\nchromedriver-cdnurl=https://npm.taobao.org/mirrors/chromedriver\ncouchbase-binary-host-mirror=https://npm.taobao.org/mirrors/couchbase/v{version}\ndebug-binary-host-mirror=https://npm.taobao.org/mirrors/node-inspector\nelectron-mirror=https://npm.taobao.org/mirrors/electron/\nflow-bin-binary-host-mirror=https://npm.taobao.org/mirrors/flow/v\nfse-binary-host-mirror=https://npm.taobao.org/mirrors/fsevents\nfuse-bindings-binary-host-mirror=https://npm.taobao.org/mirrors/fuse-bindings/v{version}\ngit4win-mirror=https://npm.taobao.org/mirrors/git-for-windows\ngl-binary-host-mirror=https://npm.taobao.org/mirrors/gl/v{version}\ngrpc-node-binary-host-mirror=https://npm.taobao.org/mirrors\nhackrf-binary-host-mirror=https://npm.taobao.org/mirrors/hackrf/v{version}\nleveldown-binary-host-mirror=https://npm.taobao.org/mirrors/leveldown/v{version}\nleveldown-hyper-binary-host-mirror=https://npm.taobao.org/mirrors/leveldown-hyper/v{version}\nmknod-binary-host-mirror=https://npm.taobao.org/mirrors/mknod/v{version}\nnode-sqlite3-binary-host-mirror=https://npm.taobao.org/mirrors\nnode-tk5-binary-host-mirror=https://npm.taobao.org/mirrors/node-tk5/v{version}\nnodegit-binary-host-mirror=https://npm.taobao.org/mirrors/nodegit/v{version}/\noperadriver-cdnurl=https://npm.taobao.org/mirrors/operadriver\nphantomjs-cdnurl=https://npm.taobao.org/mirrors/phantomjs\nprofiler-binary-host-mirror=https://npm.taobao.org/mirrors/node-inspector/\npuppeteer-download-host=https://npm.taobao.org/mirrors\npython-mirror=https://npm.taobao.org/mirrors/python\nrabin-binary-host-mirror=https://npm.taobao.org/mirrors/rabin/v{version}\nsass-binary-site=https://npm.taobao.org/mirrors/node-sass\nsodium-prebuilt-binary-host-mirror=https://npm.taobao.org/mirrors/sodium-prebuilt/v{version}\nsqlite3-binary-site=https://npm.taobao.org/mirrors/sqlite3\nutf-8-validate-binary-host-mirror=https://npm.taobao.org/mirrors/utf-8-validate/v{version}\nutp-native-binary-host-mirror=https://npm.taobao.org/mirrors/utp-native/v{version}\nzmq-prebuilt-binary-host-mirror=https://npm.taobao.org/mirrors/zmq-prebuilt/v{version}\ncypress_download_mirror=https://npm.taobao.org/mirrors/cypress{version}\n\n```\n\n## 0x04 剪辑环境\n\n---\n\n## 0xDD mac 系统踩坑集\n\n---\n\n这里记录 mac homebrew 之类的工具的踩坑集合\n\n### 本地 Socket 异常\n\n在 Python 中执行下面的代码的时候总是报错：\n\n```python\nip = socket.gethostbyname(socket.gethostname())\n# socket.gaierror:\n# [Errno 8] nodename nor servname provided, or not known\n\n```\n\n最后发现是因为设置主机名没有设置好\n\n```bash\nsudo scutil --set ComputerName \"macOS\"\nsudo scutil --set LocalHostName \"macOS\"\nsudo scutil --set HostName \"macOS\"\ndscacheutil -flushcache\n```\n\n### 常见编译问题解决思路\n\n```\n# 确保 xcode command line 是最新\nsoftwareupdate --all --install --force\n\n# 重新安装 xcode command line\nsudo rm -rf /Library/Developer/CommandLineTools\nsudo xcode-select --install\n\n# 如果还不能安装，建议到下面地址下载\nhttps://developer.apple.com/download/more/?=command%20line%20tools\n```\n\n## 0xEE. 扩展阅读\n\n---\n\n- [关于 Mac 我的回答](https://www.zhihu.com/question/30816866/answer/59415036)\n- [关于 Ubuntu 我的回答](https://www.zhihu.com/question/30816866/answer/59415036)\n- [关于 Win10 我的回答](https://www.zhihu.com/question/32129337/answer/59379401)\n\n---\n\nChangeLog:\n\n- **2020-10-31** 重修文字\n"},{"tags":["Git"],"path":"20170615_GitCheatSheet.md","title":"Git CheatSheet","slug":"Git CheatSheet","date":"2017-06-15","category":"善用佳软","lastMod":"2020-10-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n## 0x00 前言\n\nGit 是一种分布式版本管理工具。\n\n## 0x01 Git 命令范论\n\n1.  基础命令 （本地修改类）\n2.  合作命令 （本地与仓库类）\n3.  综合命令\n4.  管理命令\n\n### 基础命令\n\n- git-init(1) to create a new repository.\n- git-log(1) to see what happened.\n- git-checkout(1) and git-branch(1) to switch branches.\n- git-add(1) to manage the index file.\n- git-diff(1) and git-status(1) to see what you are in the middle of doing.\n- git-commit(1) to advance the current branch.\n- git-reset(1) and git-checkout(1) (with pathname parameters) to undo changes.\n- git-merge(1) to merge between local branches.\n- git-rebase(1) to maintain topic branches.\n- git-tag(1) to mark a known point.\n\n```bash\n$ tar zxf frotz.tar.gz\n$ cd frotz\n$ git init\n$ git add . (1)\n$ git commit -m \"import of frotz source tree.\"\n$ git tag v2.43 (2)\n\n$ git checkout -b alsa-audio (1)\n$ edit/compile/test\n$ git checkout -- curses/ux_audio_oss.c (2) # 恢复文件\n$ git add curses/ux_audio_alsa.c (3)\n$ edit/compile/test\n$ git diff HEAD (4) # 查看提交了哪些修改\n$ git commit -a -s (5) # 提交所有\n$ edit/compile/test\n$ git diff HEAD^ (6) # 查看所有变化，包含之前的 commit\n$ git commit -a --amend (7) # 修订前一个 commit, 把所有的新变化提交到\n$ git checkout master (8)\n$ git merge alsa-audio (9)\n$ git log --since='3 days ago' (10)\n$ git log v2.43.. curses/ (11)\n```\n\n### 合作命令\n\n- git-clone(1) from the upstream to prime your local repository.\n- git-pull(1) and git-fetch(1) from \"origin\" to keep up-to-date with the upstream.\n- git-push(1) to shared repository, if you adopt CVS style shared repository workflow.\n- git-format-patch(1) to prepare e-mail submission, if you adopt Linux kernel-style public forum workflow.\n- git-send-email(1) to send your e-mail submission without corruption by your MUA.\n- git-request-pull(1) to create a summary of changes for your upstream to pull.\n\n```bash\n## clone 修改 提交\n$ git clone git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6\n$ cd my2.6\n$ git checkout -b mine master (1)\n$ edit/compile/test; git commit -a -s (2)\n$ git format-patch master (3)\n$ git send-email --to=\"person <email@example.com>\" 00*.patch (4)\n$ git checkout master (5)\n$ git pull (6)\n$ git log -p ORIG_HEAD.. arch/i386 include/asm-i386 (7) # 查看感兴趣的部分\n$ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8) # 查看分支\n$ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9) # 从一个特地\n$ git reset --hard ORIG_HEAD (10) # 撤销 pull\n$ git gc (11) # garbage collect leftover objects from reverted pull\n# 推送到其他 repo\n\nsatellite$ git clone mothership:frotz frotz (1)\nsatellite$ cd frotz\nsatellite$ git config --get-regexp '^(remote|branch)\\.' (2)\nremote.origin.url mothership:frotz\nremote.origin.fetch refs/heads/*:refs/remotes/origin/*\nbranch.master.remote origin\nbranch.master.merge refs/heads/master\nsatellite$ git config remote.origin.push \\\n            +refs/heads/*:refs/remotes/satellite/* (3)\nsatellite$ edit/compile/test/commit\nsatellite$ git push origin (4)\n\nmothership$ cd frotz\nmothership$ git checkout master\nmothership$ git merge satellite/master (5)\n\n           1. mothership machine has a frotz repository under your home directory; clone from it to start a repository on the satellite machine.\n           2. clone sets these configuration variables by default. It arranges git pull to fetch and store the branches of mothership machine to local remotes/origin/* remote-tracking\n           branches.\n           3. arrange git push to push all local branches to their corresponding branch of the mothership machine.\n           4. push will stash all our work away on remotes/satellite/* remote-tracking branches on the mothership machine. You could use this as a back-up method. Likewise, you can\n           pretend that mothership \"fetched\" from you (useful when access is one sided).\n           5. on mothership machine, merge the work done on the satellite machine into the master branch.\n\n       Branch off of a specific tag.\n\n               $ git checkout -b private2.6.14 v2.6.14 (1)\n               $ edit/compile/test; git commit -a\n               $ git checkout master\n               $ git cherry-pick v2.6.14..private2.6.14 (2)\n\n           1. create a private branch based on a well known (but somewhat behind) tag.\n           2. forward port all changes in private2.6.14 branch to master branch without a formal \"merging\". Or longhand git format-patch -k -m --stdout v2.6.14..private2.6.14 | git am -3\n           -k\n\n```\n\n### 综合个体\n\n### 仓库管理\n\n安装完毕之后，cmd-s-p shell command install\n\n## 0x02 常见操作\n\n```bash\n# 搜索代码的变化\ngit log -S'<a term in the source>'\n# 放弃本地修改，与远程同步\ngit fetch origin && git reset --hard origin/master && git clean -f -d\n# 列出所有冲突文件\ngit diff --name-only --diff-filter=U\n\n# 手贱错误提交，但是没有 push\ngit commit -m \"Something terribly misguided\"              (1)\ngit reset HEAD~                                           (2)\n# edit needing changed files\ngit add needing changed files                             (4)\ngit commit -c ORIG_HEAD                                   (5)\n\n# Delete all changes in the Git repository, but leave unstaged things\ngit checkout .\n# Delete all changes in the Git repository, including untracked files\ngit clean -f\n```\n\n## 0x03 常见问题\n\n```\n\n```\n\n## 0x04 Hub\n\n## 0x05 Workflow\n\n## 0xEE 扩展阅读\n\n---\n\nChangeLog:\n\n- **2020-12-15** 重修文字\n"},{"tags":["编辑器","Vim"],"path":"20170623_VimCheatSheet.md","title":"CVim","slug":"CVim","date":"2017-06-03","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n## 0x00 什么是 CVim 呢？\n\nCVim 基于 NeoVim 0.5+ , 整理 cvim 的配置，将大部分从 vimscript 迁移到 lua 中\n\n> only tested on neovim 0.5\n\n### 优势\n\n- Vim, Not Vim like\n- 更现代的编辑界面\n  - 开始页面 via. vim-startify\n  - 菜单栏 via. QuickUI\n  - 上下文菜单 via. QuickUI Context Menu\n  - 文件栏 via. LuaTree\n  - Tag 栏 via. Vista\n  - 更好的 Finder via. telescope\n    - ctrl + p 文件搜索\n  - 侧边栏 via\n    - vim-signature\n    - vim-signify\n- 全文搜索\n  - Enhenced Basic Keys\n    - j/k via accelerated\n    - f/F/t/T via sneak\n  - Enhenced Select\n    - 缩进选择\n- 更现代化的编辑，如\n- For TypeScript/Python/Golang FullStack Engineer\n  - Python\n  - Golang\n  - TypeScript\n\n### 劣势\n\n> self used, use it with your own caution\n\n## 0x01 安装与配置\n\n```\nbrew install --HEAD neovim\n```\n\n## 0x02 从 VimL 到 Lua\n\n## 0x03 基础操作\n\n### 文件定位\n\n- c-p\n- m-p + words\n- gf\n\n### 文本定位\n\n- `h/j/k/l`\n- `ctrl+f/b/u/d`\n- `gg` `G`\n- w/W e/E\n- `;` 重复上次查找操作\n- `gi` 返回上次修改地\n- `[[` 跳转到上一个 class or funciton\n- `]]` 跳转到上一个 class or function\n- `c-o`\n- `c-i`\n- `10g` 跳转到第十行\n- `u` 撤销\n\n- 高亮版 f/F t/T\n  - f{char} F{char}\n  - t{char} T{char}\n- /\n- ?\n\n- . 重复上次文本操作\n- u 撤销上次文本操作\n- ; 重复上次查找操作\n\n### 文本选择\n\n```python\nvib- 选框内\nvi\"- \"\" 内部\nvi'- '' 内部\nggVG\ngv 选中上次的 visual 选中区\n```\n\n行选择，块选择，扩展块选择\n\n多光标选择\n\n### 插入模式\n\n- c-w 向后删除 word\n- c-h 向后删除 char\n\n### 未分类\n\n```\nU 恢复单个句子\n在命令状态下按 c-d 可以查看所有命令，相当于 bash 下面的 tabtab\nEasyMotion 使用这个就可以代替乱七八糟的快速移动了。这是一个可以给当前的文字立即用打上 tag, 这样的话在 normal 情况下输入，,w 然后就可以看到很多 tag, 输入其中的 tag 就可以立即跳转到相应的 tag.\ninsert 状态进行编辑 c-h c-w 删除一个字，删除一个词。\nnormal 状态下进行删除 x dd —— 删除一个字，剪切一行。\n\nc-b c-f back forth\nc-n c-p 代码补全，tips, 建议标点符号全部半角花，这样就会吧每段连起来的汉字当成一个单词，这样就可以减少输入代码。\nindent\n\n< outdent\ndo it (>)\n```\n\n## 0x06 文本处理技能\n\n### 文本对齐\n\n```viml\n\" Using predefined alignment rules\n\"   :EasyAlign[!] [N-th] DELIMITER_KEY [OPTIONS]\n:EasyAlign :\n:EasyAlign =\n:EasyAlign *=\n:EasyAlign 3\\\n\n\" Using arbitrary regular expressions\n\"   :EasyAlign[!] [N-th] /REGEXP/ [OPTIONS]\n:EasyAlign /[:;]\\+/\n:EasyAlign 2/[:;]\\+/\n:EasyAlign */[:;]\\+/\n:EasyAlign **/[:;]\\+/\n```\n\n### 行处理\n\n行排序\n\n```bash\nsort r /【.\\+】/\nsort u\nsort n\nsort\nsort!\ng/start/+1,/end/-1 sort n\n:%!column -t\n:%!sort -k2nr\n```\n\n```bash\n# 行删除\n# 删除 html 标签\n\n:%s/<\\_.\\{-1,\\}>//g\n\n# 移除每行第一个空格之后的字符\n:%s/ .*//\n```\n\n```\n# 删除空行\n:g/^$/d\n:g/^\\s*$/d\n:%s/\\n\\{3,}/\\r\\r/e\n:g/^[ \\t\\u3000]*$/d\n:g/pattern/d\n:g!/pattern/d\n:g/pattern/t$\n:g/pattern/m$\n:s/ \\{2,}/ /g\n\n```\n\n## 0x07 代码补全与 Snippet\n\n### 常规补全\n\n- <C-X><C-F> : insert name of a file in current directory\n- <C-N><C-P> : word completion in insert mode\n- <C-X><C-L> : Line complete SUPER USEFUL\n\n### UltiSnips\n\n## 0x07 Tags\n\n```\nbrew tap universal-ctags/universal-ctags\nbrew install --with-jansson --HEAD universal-ctags/universal-ctags/universal-ctags\n```\n\n## 0x08 编程语言\n\n### 8.1 Python / Django / Flask\n\n### 8.2 JavaScript / Vue / React\n\n### 8.3 Bash / Ngnix / SQL\n\n### 8.4 Markdown\n\n### 8.5 Go\n\n## 0x09 tips\n\n### profiling startuptime\n\n```bash\nvim --startuptime /tmp/startup.log +q && vim /tmp/startup.log\n```\n\n## 0xEE 感谢\n\n- skywind3000/vim-init\n- SpaceVim\n- skywind3000/vim\n- rafi/vim-config\n\n## 0xEE 扩展阅读\n\n- [c-vim](https://github.com/twocucao/c-vim)\n\n---\n\nChangeLog:\n\n- **2020-08-08** 重修文字\n"},{"tags":["编辑器"],"path":"20170527_VSCodeCheatSheet.md","title":"VSCode CheatSheet","slug":"VSCode CheatSheet","date":"2017-05-27","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n## 0x00 前言\n\n本文为 Cheatsheet 类型文章，用于记录我使用 VSCode 的一些开发小技巧。\n\n不定期更新。\n\n<!-- more -->\n\nVSCode 是一种编辑器，这显然是一句废话。\n\n这个问题应该是，我为什么要使用 VSCode 作为主力编辑器。有人说：微软出品一定是精品。这个理由很软粉，但是不能打动我更换编辑器的欲望。\n\n使用编辑器自然是求其轻量，高效的文字处理，以及编程的相关环境的支持，以及跨平台和可扩展性。\n\n- **轻量**是求其打开速度快，编辑不卡顿。这一点，用 Vim , Emacs , Sublime Text 完全都可以。\n- **高效的文字处理**是因为满足日常编写文字和代码的需求。\n- **编程相关环境的支持**是因为作为一个学习东西很杂乱的人来说，最痛苦的事情就在于 IDE 常常来不及给一些新技术予以足够的支持，比如说 Docker, 比如说 ansible。\n- **跨平台和可扩展性** 跨平台是必须的，可扩展性则是从插件资源和编写插件的难度考虑。\n\n本文的目录结构如下：\n\n- VSCode 常用命令\n\n## 0x01 VSCode 相关配置\n\n安装完毕之后，cmd-s-p shell command install\n\n## 0x02 VSCode 常用命令\n\n- **Command Palette** : cmd-s-p\n- **cmd-p** : cmd-p\n- **显示状态** : cmd-s-m\n- **下一个错误** : F8 / shift-F8\n- \\*\\*\\*\\* : c-s-p\n- \\*\\*\\*\\* : c-s-p\n- \\*\\*\\*\\* : c-s-p\n- \\*\\*\\*\\* : c-s-p\n- \\*\\*\\*\\* : c-s-p\n- \\*\\*\\*\\* : c-s-p\n- \\*\\*\\*\\* : c-s-p\n\n## 0x03 VS 扩展相关\n\n## 0x04\n"},{"tags":["编辑器"],"path":"20170115_Spacemacs.md","title":"写给 Pythoner 的 Spacemacs 入门指北","slug":"写给 Pythoner 的 Spacemacs 入门指北","date":"2017-01-15","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n# 写给 Pythoner 的 Spacemacs 入门指北\n\n最开始，使用 Sublime Text 编码，后来用 Vim 混合 PyCharm 写 Python。\n\n前几天，Github 上的 Spacemacs 已经成功的突破一万 Star, 听说几个我非常佩服的 Pythoner（比如『Python Web 开发实战』的作者董伟明） 也是非常喜欢 Spacemacs, 我就萌生了从 Vim 切换到 Spacemacs 的想法，说做就做。\n\n> 注：本文所有内容基于 macOS 10.11, 软件环境为 zsh , pyenv , python3.5.2 , node5.12.0. 其他类 Unix 平台略作修改即可使用。至于 Windows 平台，建议安装 Ubuntu 虚拟机。本文也需要读者具备基本的 VIM 基本常识和 Python 常识。\n\n本文只负责把读者带入 Spacemacs 的世界中，而不是涉及到 Spacemacs 的方方面面，所以此文为指北。而非详细的指南 (Guide).\n\n## 0x00 基本软件环境安装\n\n### zsh 与 ohmyzsh\n\n```bash\nbrew install zsh\nchsh -s /bin/zsh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n### pyenv 与 pyenv virtualenv\n\n```bash\ngit clone https://github.com/yyuu/pyenv.git ~/.pyenv\ngit clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc\necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc\necho 'eval \"$(pyenv init -)\"' >> ~/.zshrc\necho 'eval \"$(pyenv virtualenv-init -)\"' >> ~/.zshrc\n\n# 不喜写兼容代码，所有代码均向 3.5+ 靠拢\nv=3.5.2|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v\nv=3.6.0|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v\nv=2.7.11|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v\n\n# 设置 Global Python 为 2.7.11, 备注：尽量不要把 Py3 设置为全局，否则由于 Homebrew 本身有一些依赖是依赖于 Py2 的，这样容易出现一些奇怪的问题。\npyenv global 2.7.11\npip install -i https://pypi.doubanio.com/simple requests\n# 下面这个是用于安装基本的代码补全功能\npip install -i https://pypi.doubanio.com/simple --upgrade \"jedi>=0.9.0\" \"json-rpc>=1.8.1\" \"service_factory>=0.1.5\" flake8 pytest autoflake hy\n\npyenv virtualenv 3.5.2 py3-daily\npyenv activate py3-daily\npip install -i https://pypi.doubanio.com/simple requests\npip install -i https://pypi.doubanio.com/simple beatutifulsoup4\npip install -i https://pypi.doubanio.com/simple ipython[notebook]\npip install -i https://pypi.doubanio.com/simple jupyter\n# 下面这个是用于安装基本的代码补全功能\npip install -i https://pypi.doubanio.com/simple --upgrade \"jedi>=0.9.0\" \"json-rpc>=1.8.1\" \"service_factory>=0.1.5\" flake8 pytest autoflake hy\npyenv deactivate\n# pyenv uninstall py3-daily\n\n```\n\n### nvm 以及常用 npm 包\n\n```bash\n# 安装 nvm\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash\nnvm install 5.12.0\necho '\\n#alias for cnpm\\nalias cnpm=\"npm --registry=https://registry.npm.taobao.org \\\n  --cache=$HOME/.npm/.cache/cnpm \\\n  --disturl=https://npm.taobao.org/dist \\\n  --userconfig=$HOME/.cnpmrc\"' >> ~/.zshrc && source ~/.zshrc\nnpm install -g vmd\nnpm install -g gitbook-cli\nnpm install -g hexo-cli\nnpm install -g tern\nnpm install -g js-beautify\nnpm install -g js-hint\n```\n\n### Spacemacs 安装以及基本配置\n\n```bash\nbrew install ag\nbrew install grep\nbrew tap d12frosted/emacs-plus\nbrew install emacs-plus\n# 安装完毕之后，克隆我的配置 repo, 有一些基本的配置用于解决墙的问题。解决方案来自于子龙山人\ngit clone https://github.com/syl20bnr/spacemacs ~/.emacs.d\nmv ~/.spacemacs .spacemacs.bak\ngit clone https://github.com/twocucao/spacemacs.d.git ~/.spacemacs.d\n# 输入 emacs 进行初始化，如果你可以正常访问 Github 的话时间在半小时之内。\nemacs\n```\n\n安装 Spacemacs 过程中画面如下：\n\n![安装 Spacemacs 过程中画面](http://upload-images.jianshu.io/upload_images/52890-d5c8171294ec9f3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n安装前，Emacs 长这个样子：\n\n![安装前](http://upload-images.jianshu.io/upload_images/52890-4e6026d213191939.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n安装后，Emacs 长这个样子：\n\n![安装后.png](http://upload-images.jianshu.io/upload_images/52890-45747c68366ef275.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**在正式进入，请牢牢记住下面几个按键已经功能，以备不时之需**\n\n- spc : 跳出命令面板\n- spc-spc : 跳出命令列表，可运行命令，也可以查找快捷键\n- spc-h-spc : 查找包的用途与定义\n\n嗯，可以谈下一话题了！\n\n## 0x01 日常的编辑\n\n### 1.1 文件导航\n\n- (VIM 流）hjkloOaA zz\n- (VIM 流）查找 \\* /words\n- spc-f-j 开发 neotree\n- spc-tab 切换到上一个 buffer\n- spc-f-f 打开文件 spc-p-f fuzzfind 类似于 ctrlp spc-s-g-p grep 搜索项目 spc-s-a-p ag 搜索项目\n\n搜索项目如图 (spc-s-a-p ag 搜索项目）:\n\n![按照关键字搜索项目](http://upload-images.jianshu.io/upload_images/52890-b2ce54f91a91e9d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 实在是方便至极\n\n### 1.2 文件编辑\n\n文件内容编辑\n\n- (VIM 流）u 与 c-r d c 等\n- 有趣的是查找替换功能也是自带预览的。比如 :%s/foo/bar/g\n\n![查找替换预览](http://upload-images.jianshu.io/upload_images/52890-e37a81a2a399e5f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n文件本身编辑\n\n- 在 dired mode 下：copy - C , delete - D, new folder - +\n- 也可以 spc-f-t 在 neotree 下进行编辑\n\n> 除去这些和 Vim 相似的文件编辑功能之外，甚至窗口管理都和 Vim 一致了，使用 c-w+hjkl 直接跳转。\n> 强烈建议在读者抽空过一遍基本的 Vimtutor\n\n### 1.3 Markdown Writing\n\n- spc-spc-markdown-generate-to 回车即可生成本文的 Toc(Table Of Content)\n- spc-b-i 打开 buffer 的 imenu（类似于 Vim 的 Tagbar 插件），enter 跳转\n\n搜索项目如图 (spc-b-i 开启 buffer imenu ，enter 跳转）:\n\n![IMenu](http://upload-images.jianshu.io/upload_images/52890-250852ddc15bd7a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 0x02. Python 编程\n\n### 2.1 代码补全\n\n当你按照前面的所有配置走一圈下来，基本上就已经可以完美的进行补全了。\n比如，当我编辑一个 py 文件的时候，\n\n```bash\n# 先激活虚拟环境\npyenv activate 3.5.2/envs/py3-daily\nemacs py.py\n```\n\n如图所示，因为 requests,numpy 这种第三方库都可以完美补全，其他自然不在话下。\n\n![代码补全](http://upload-images.jianshu.io/upload_images/52890-7516130bb7fe70c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n代码补全还有另一个神器，就是可以内嵌 lisp 的 Snippet 模板 -- yasnippet, 由于模板功能基本上和其他编辑器相同，而使用 elisp 语言进行编写动态 Snippet 模板则需要会 elisp, 这以后有机会再学学。\n\n### 2.2 代码跳转\n\n- 文件代码跳转 spc-spc-helm-imenu 查看文件结构\n- 文件跳转 在 normal-mode 下，gd 即可跳转到函数定义上，但是不能跨文件跳转。\n\n![单文件使用 helm_imenu 进行浏览](http://upload-images.jianshu.io/upload_images/52890-4a2b2df1e6be0dfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![使用 ag 进行代码搜索](http://upload-images.jianshu.io/upload_images/52890-3406b060737bffa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 2.3 pytest 测试\n\n- spc-m-s-py3-daily enter 选择 py3-daily 虚拟环境\n- spc-spc-pytest-all enter 即可运行所有 pytest 测试。\n\n测试过程：\n\n运行测试失败，运行测试失败，使用 c-w-j 跳转到下面窗口，对红色标记处 enter, 即可跳转到出错文件行。\n\n![pytest 运行测试失败](http://upload-images.jianshu.io/upload_images/52890-8ef2bac3163f166c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n修正运行测试成功，如图：\n\n![pytest 运行测试成功](http://upload-images.jianshu.io/upload_images/52890-b90176c2e97df7dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 0x03. IPython Notebook\n\n通常情况下我使用 IPython Notebook 都是在 Web 端，因为是 Web 端，实际上大量的 Dom 渲染对浏览器的渲染速度还是有一定的影响的，我还是比较喜欢客户端，因为客户端的快捷键可以定制，而 Web 端的快捷键实在是相当的不方便。\n\n是不是 IPython Notebook 的 web 端没有好处呢？有的，比如我可以借用外部的 JS 可视化图表对 js 进行可视化呀。\n\n比如我发在简书上的这篇技术文 [IPython Notebook 引入 ECharts 做可视化](http://www.jianshu.com/p/609193efee1a)\n\n但，如果不需要 js 功能的话，还是用客户端舒服一些。\n\n### 3.1 IPython Notebook 基本配置\n\nspacemacs 貌似只支持密码访问 IPython Notebook, 那么我们就生成密码。\n\n```bash\n# 首先激活 py3-daily 环境\npython -c \"from notebook.auth import passwd;print(passwd())\" | pbcopy\n# 恩，于是剪切板上就有如下的字符串\nsha1:9bf4c48a6b83:26bc24a78a1e4aea7baa36874f5e86bafac0dbb9\n# 打开 config 文件取消注释并修改 c.NotebookApp.password\nvim ~/.jupyter/jupyter_notebook_config.py\nc.NotebookApp.password = 'sha1:35543659622f:f9a78f0b20132f3e04aa1d4ed4060f9fd9eb7663'\n```\n\n### 3.2 Emacs IPython Notebook\n\n```bash\n# 首先在终端打开 IPython Notebook\nipython notebook\n```\n\n接着打开 emacs, 输入 spc-a-i-n, 默认端口，然后输入密码即可。首次登陆后还需要在输入一次 spc-a-i-n 即可看到 IPython Notebook 的主界面。\n\n![IPYNB 的主界面](http://upload-images.jianshu.io/upload_images/52890-86a9a546e350994c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n光标移到 [New Notebook] 键击 enter 新建 IPython Notebook.\n\n输入如下代码：\n\n```python\n# The %... is an iPython thing, and is not part of the Python language.\n# In this case we're just telling the plotting library to draw things on\n# the notebook, instead of on a separate window.\n%matplotlib inline\n# See all the \"as ...\" contructs? They're just aliasing the package names.\n# That way we can call methods like plt.plot() instead of matplotlib.pyplot.plot().\nimport numpy as np\nimport scipy as sp\nimport matplotlib as mpl\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport time\npd.set_option('display.width', 1000)\npd.set_option('display.max_columns', 100)\npd.set_option('display.notebook_repr_html', True)\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nsns.set_context(\"poster\")\nsns.set()\n\n# Load the example flights dataset and conver to long-form\nflights_long = sns.load_dataset(\"flights\")\nflights = flights_long.pivot(\"month\", \"year\", \"passengers\")\n\n# Draw a heatmap with the numeric values in each cell\nsns.heatmap(flights, annot=True, fmt=\"d\", linewidths=.5)\n\n```\n\nshift+enter , 咣\n\n热力图就出来了\n\n![热力图](http://upload-images.jianshu.io/upload_images/52890-aec8c9f278f74600.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 0x04. 扩展\n\n看完上文，就可以深入文档进行探索了。\n\n- 打开 Vim, 输入：help vimtutor 熟悉基本的 Vim 操作。\n- [Spacemacs Layer 文档](https://github.com/syl20bnr/spacemacs/tree/master/layers)\n- [Spacemacs 文档](http://spacemacs.org/doc/DOCUMENTATION.html)\n- [我的 Spacemacs 配置页面](https://github.com/twocucao/spacemacs.d)\n- [Spacemacs 达人子龙山人的教程](https://github.com/emacs-china/Spacemacs-rocks)\n\nChangeLog:\n\n- **2017-01-15 18:53:45** 重修文字\n- **2017-01-16 12:49:19** 润饰文字，增加可读性，首发简书。\n- **2018-01-01 12:49:19** 最后弃坑并回归 Vim 与 IDE\n"},{"tags":["Windows"],"path":"20161221_LeetCodePythonSolution.md","title":"LeetCode Python Solution","slug":"LeetCode Python Solution","date":"2016-12-21","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n## 前言\n\n刷刷简单的算法问题，顺手提升一下编程的裸写代码的能力。\n\n本文为 LeetCode 的 Easy 算法的解法集合。\n\n<!-- more -->\n\n## Easy 集合\n\n### 1. Two Sum 29.4%\n\n```python\n\n# 尝试：暴力解决\n# 结果：超时\nclass Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        begin = 0\n        end = 0\n        for i in range(len(nums)):\n            for j in range(i,len(nums)):\n                if i != j and target == nums[i] + nums[j]:\n                    return [i,j]\n\n# 尝试：字典也就是 HashMap 解决\n# 结果：读题不准确，数组不行\nclass Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        nums_dict = {}\n        for i,num in enumerate(nums):\n            nums_dict[num] = i\n        for num in nums:\n            item_num_1st = nums_dict.get(num)\n            item_num_2st = nums_dict.get(target-num)\n            if item_num_2st is not None and item_num_1st != item_num_2st:\n                return [item_num_1st,item_num_2st]\n# 尝试：其他\n# 结果：其他\n\n```\n\n### 6. ZigZag Conversion 25.8%\n\n### 7 Reverse Integer 23.7% Easy\n\n```python\nclass Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        preffix = \"\"\n        if \"-\" in str(x):\n            num = int(str(x).strip(\"-\")[::-1])\n            preffix = \"-\"\n        else:\n            num = int(str(x)[::-1])\n        if num >= 2147483648 or num <= -2147483647:\n            return 0\n        return  int(preffix+str(num))\n```\n\n### 8 String to Integer (atoi) 13.8% Easy\n\n### 9 Palindrome Number 34.0% Easy\n\n```python\n# 使用了额外的存储，亟待优化\nclass Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        l_x = list(str(x))\n        return l_x == l_x[::-1]\n```\n\n### 13 Roman to Integer 43.2% Easy\n\n### 14 Longest Common Prefix 30.4% Easy\n\n```python\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n        current_clip = \"\"\n        len_strs = [len(_str) for _str in strs]\n        min_strs_len = min(len_strs)\n        has_common_flag = False\n        for _len in range(min_strs_len,0,-1):\n            cliped_strs_set = set()\n            for _str in strs:\n                current_clip = _str[0:_len]\n                cliped_strs_set.add(current_clip)\n            if len(cliped_strs_set) == 1:\n                has_common_flag = True\n                break\n        if has_common_flag:\n            return current_clip\n        else:\n            return \"\"\n```\n\n### 19 Remove Nth Node From End of List 32.0% Easy\n\n### 20 Valid Parentheses 31.9% Easy\n\n### 21 Merge Two Sorted Lists 37.7% Easy\n\n### 24 Swap Nodes in Pairs 37.0% Easy\n\n### 26 Remove Duplicates from Sorted Array 35.2% Easy\n\n### 27 Remove Element 36.7% Easy\n\n### 28 Implement strStr() 26.8% Easy\n\n```python\nclass Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        cur = -1\n        try:\n            cur = haystack.index(needle)\n        except Exception:\n            pass\n        return cur\n```\n\n### 36 Valid Sudoku 33.7% Easy\n\n```python\nclass Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        # 横向\n\n```\n\n### 38 Count and Say 32.3% Easy\n\n### 58 Length of Last Word 31.0% Easy\n\n### 66 Plus One 36.7% Easy\n\n### 67 Add Binary 30.2% Easy\n\n### 70 Climbing Stairs 38.5% Easy\n\n### 83 Remove Duplicates from Sorted List 38.7% Easy\n\n### 88 Merge Sorted Array 31.3% Easy\n\n### 100 Same Tree 45.1% Easy\n\n```python\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        elif p is not None and q is not None:\n            return p.val == q.val and self.isSameTree(p.left,q.left) and  self.isSameTree(p.right,q.right)\n        else:\n            return False\n\n```\n\n### 101 Symmetric Tree 36.7% Easy\n\n### 102 Binary Tree Level Order Traversal 36.7% Easy\n\n### 104 Maximum Depth of Binary Tree 50.6% Easy\n\n### 107 Binary Tree Level Order Traversal II 37.5% Easy\n\n### 110 Balanced Binary Tree 36.1% Easy\n\n### 111 Minimum Depth of Binary Tree 32.2% Easy\n\n### 112 Path Sum 32.8% Easy\n\n### 118 Pascal's Triangle 36.5% Easy\n\n### 119 Pascal's Triangle II 34.8% Easy\n\n### 121 Best Time to Buy and Sell Stock 38.9% Easy\n\n### 125 Valid Palindrome 25.2% Easy\n\n### 136 Single Number 52.6% Easy\n\n### 141 Linked List Cycle 35.9% Easy\n\n### 155 Min Stack 26.0% Easy\n\n### 157 Read N Characters Given Read4 29.4% Easy\n\n### 160 Intersection of Two Linked Lists 30.0% Easy\n\n### 165 Compare Version Numbers 19.1% Easy\n\n### 168 Excel Sheet Column Title 24.2% Easy\n\n```python\nclass Solution(object):\n    def titleToNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i,c in enumerate(s[::-1]):\n            result += (ord(c) - ord(\"A\") + 1) * (26 ** i)\n        return result\n```\n\n### 169 Majority Element 44.6% Easy\n\n```python\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        from collections import Counter\n        return Counter(nums).most_common()[0][0]\n\n```\n\n### 170 Two Sum III - Data structure design 22.6% Easy\n\n### 171 Excel Sheet Column Number 45.0% Easy\n\n### 172 Factorial Trailing Zeroes 34.7% Easy\n\n### 189 Rotate Array 23.3% Easy\n\n### 190 Reverse Bits 29.5% Easy\n\n```\nclass Solution:\n    # @param n, an integer\n    # @return an integer\n    def reverseBits(self, n):\n        return int(bin(n).replace(\"0b\",\"\").zfill(32)[::-1],2)\n```\n\n### 191 Number of 1 Bits 38.4% Easy\n\n### 198 House Robber 37.2% Easy\n\n### 202 Happy Number 39.0% Easy\n\n```python\nclass Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        return self.isHappyNum(self,n,[])\n\n    def isHappyNum(self,n,result_list):\n        result = reduce(lambda x , y : x+ y,map(lambda x : int(x) ** 2 ,str(n).split()))\n        if result in result_list:\n            return False\n        else:\n            result_list.append(result)\n            self.isHappyNum(result,result_list)\n\n```\n\n### 203 Remove Linked List Elements 30.8% Easy\n\n### 204 Count Primes 26.0% Easy\n\n### 205 Isomorphic Strings 32.3% Easy\n\n### 206 Reverse Linked List 43.2% Easy\n\n### 217 Contains Duplicate 43.5% Easy\n\n```python\nclass Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        return nums is not None and len(nums) >= 1 and len(nums) > len(set(nums))\n```\n\n### 219 Contains Duplicate II 31.3% Easy\n\n### 223 Rectangle Area 31.8% Easy\n\n### 225 Implement Stack using Queues 31.0% Easy\n\n### 226 Invert Binary Tree 49.5% Easy\n\n### 231 Power of Two 39.1% Easy\n\n```\nclass Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n % 2 == 1 and n > 1:\n            return False\n        elif n <= 0:\n            return False\n        elif n in (2,1):\n            return True\n        else:\n            return self.isPowerOfTwo(n / 2)\n```\n\n### 232 Implement Queue using Stacks 34.9% Easy\n\n### 234 Palindrome Linked List 31.4% Easy\n\n### 235 Lowest Common Ancestor of a Binary Search Tree 38.0% Easy\n\n### 237 Delete Node in a Linked List 45.2% Easy\n\n```python\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        这个方法是可以 Get 到 node 点的，但是题目的要求应该不是这个意思\n        \"\"\"\n        if node.next is not None:\n            node = node.next\n```\n\n### 242 Valid Anagram 44.6% Easy\n\n```\nclass Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        from collections import Counter\n        return Counter(s) == Counter(t)\n\n```\n\n### 243 Shortest Word Distance 50.5% Easy\n\n### 246 Strobogrammatic Number 38.7% Easy\n\n### 249 Group Shifted Strings 38.1% Easy\n\n### 252 Meeting Rooms 45.2% Easy\n\n### 257 Binary Tree Paths 34.3% Easy\n\n### 258 Add Digits 50.1% Easy\n\n### 263 Ugly Number 38.3% Easy\n\n### 266 Palindrome Permutation 54.8% Easy\n\n### 270 Closest Binary Search Tree Value 37.8% Easy\n\n### 276 Paint Fence 33.7% Easy\n\n### 278 First Bad Version 24.2% Easy\n\n### 283 Move Zeroes 47.5% Easy\n\n```python\n\n# 首先想到的这个答案\n# 然后 leetcode 上面居然还是打印的原来的值，我猜测肯定是用后台进行 id 比对内存地址。好吧，这个方式最好。\nclass Solution(object):\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_count = nums.count(0)\n        new_nums = [num for num in nums if num != 0]\n        new_nums.extend([0]*zero_count)\n        nums = new_nums\n\n## 蛋疼，三重排序\nclass Solution(object):\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        begin_cur = 0\n        end_cur = len(nums) - 1\n        for i in range(len(nums)):\n            for j in range(i,len(nums)):\n                if nums[j] == 0 and nums[j+1] != 0:\n                    nums[j] , nums[j+1] = nums[j+1] , nums[j]\n        print(nums)\n\n```\n\n### 288 Unique Word Abbreviation 15.3% Easy\n\n### 290 Word Pattern 31.9% Easy\n\n### 292 Nim Game 54.6% Easy\n\n### 293 Flip Game 53.7% Easy\n\n### 299 Bulls and Cows 33.0% Easy\n\n### 303 Range Sum Query - Immutable 26.1% Easy\n\n### 326 Power of Three 39.1% Easy\n\n### 339 Nested List Weight Sum 59.5% Easy\n\n### 342 Power of Four 37.2% Easy\n\n### 344 Reverse String 57.4% Easy\n\n```\nclass Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s[::-1]\n```\n\n### 345 Reverse Vowels of a String 37.1% Easy\n\n### 346 Moving Average from Data Stream 57.1% Easy\n\n### 349 Intersection of Two Arrays 45.4% Easy\n\n```\nclass Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return list(set(nums1) & set(nums2))\n```\n\n### 350 Intersection of Two Arrays II 43.4% Easy\n\n### 359 Logger Rate Limiter 58.0% Easy\n\n### 371 Sum of Two Integers 51.5% Easy\n\n### 374 Guess Number Higher or Lower 33.2% Easy\n\n### 383 Ransom Note 45.9% Easy\n\n### 387 First Unique Character in a String 45.1% Easy\n\n```python\nclass Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        flag = -1\n        from collections import Counter\n        uniq_chars_set = set([k for k , v in Counter(s).items() if v == 1])\n        for i,c in enumerate(s):\n            if c in uniq_chars_set:\n                return i\n        return flag\n```\n\n### 389 Find the Difference 50.3% Easy\n\n### 396 Rotate Function 30.1% Easy\n\n### 400 Nth Digit 30.6% Easy\n\n### 401 Binary Watch 43.1% Easy\n\n### 404 Sum of Left Leaves 45.6% Easy\n\n```\n# Definition for a binary tree node.\n\n# class TreeNode(object):\n\n#     def __init__(self, x):\n\n#         self.val = x\n\n#         self.left = None\n\n#         self.right = None\n\nclass Solution(object):\n\n    def sumOfLeftLeaves(self, root):\n\n        \"\"\"\n\n        :type root: TreeNode\n\n        :rtype: int\n\n        \"\"\"\n\n        if root is None:\n\n            return 0\n\n        return self.newSumOfLeftLeaves(root.left,-1) + self.newSumOfLeftLeaves(root.right,1)\n\n    def newSumOfLeftLeaves(self,root,flag):\n\n        if root is None:\n\n            return 0\n\n        elif root.left is not None and root.right is not None:\n\n            return self.newSumOfLeftLeaves(root.left,-1) + self.newSumOfLeftLeaves(root.right,1)\n\n        elif root.left is None and root.right is None:\n\n            if flag == -1:\n\n                return root.val + self.newSumOfLeftLeaves(root.right,1)\n\n            else:\n\n                return 0\n\n        elif root.left is None and root.right is not None:\n\n            return self.newSumOfLeftLeaves(root.right,1)\n\n        elif root.left is not None and root.right is None:\n\n            return self.newSumOfLeftLeaves(root.left,-1)\n```\n\n### 405 Convert a Number to Hexadecimal 40.6% Easy\n\n### 408 Valid Word Abbreviation 27.2% Easy\n\n### 409 Longest Palindrome 44.1% Easy\n\n```\nclass Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        from collections import Counter\n        max_len = 0\n        odd_count = 0\n        for _chr,_chrs_len in Counter(s).items():\n            if _chrs_len % 2 == 1:\n                odd_count = 1\n                max_len += _chrs_len - 1\n            else:\n                max_len += _chrs_len\n\n        return max_len + odd_count\n```\n\n### 412 Fizz Buzz 58.0% Easy\n\n```\nclass Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        arr = []\n        for i in range(1,n+1):\n            item = None\n            if i % 3 == 0 and i % 5 == 0:\n                item = \"FizzBuzz\"\n                arr.append(item)\n                continue\n            if i % 3 == 0:\n                item = \"Fizz\"\n                arr.append(item)\n                continue\n            if i % 5 == 0:\n                item = \"Buzz\"\n                arr.append(item)\n                continue\n            arr.append(str(i))\n        return arr\n```\n\n### 414 Third Maximum Number 26.7% Easy\n\n### 415 Add Strings 41.1% Easy\n\n```\n# 哼，让我不用，我偏偏要用转 int\nclass Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        return str(int(num1) + int(num2))\n\n# 我就不用 int 都可以 one line\nclass Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        return str(eval(\"{} + {}\".format(num1,num2)))\n```\n\n### 422 Valid Word Square 36.2% Easy\n\n### 434 Number of Segments in a String 39.0% Easy\n\n### 437 Path Sum III 38.6% Easy\n\n### 438 Find All Anagrams in a String 33.4% Easy\n\n### 441 Arranging Coins 36.2% Easy\n\n### 447 Number of Boomerangs 41.8% Easy\n\n### 448 Find All Numbers Disappeared in an Array 61.3% Easy\n\n```\nclass Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        len_nums = len(nums)\n        if len_nums < 1:\n            return []\n        l = list(set(range(1,len_nums + 1)) - set(nums))\n        return l\n```\n\n### 453 Minimum Moves to Equal Array Elements 45.9% Easy\n\n```\nclass Solution(object):\n    def minMoves(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        n - 1 个元素 ++ 等同于 1 个元素 --\n        \"\"\"\n        return sum(nums) - len(nums) * min(nums)\n```\n\n### 455 Assign Cookies 48.7% Easy\n\n```python\n# 二叉树？\n\nclass Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        if len(g) == 0 or len(s) == 0:\n            return 0\n        g.sort()\n        s.sort()\n        satisfied_count = 0\n        while len(s) > 0:\n            max_cookie = s.pop()\n            while len(g) > 0:\n                max_child = g.pop()\n                if max_child <= max_cookie:\n                    satisfied_count += 1\n                    break\n        return satisfied_count\n```\n\n### 459 Repeated Substring Pattern 39.6% Easy\n\n### 461 Hamming Distance 74.8% Easy\n\n```python\nclass Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        ma = str(bin(max(x,y))).replace(\"0b\",\"\").zfill(31)\n        ma_len = len(ma)\n        mi = str(bin(min(x,y))).replace(\"0b\",\"\").zfill(31)\n        print(mi)\n        print(ma)\n        count = 0;\n        for i, chr in enumerate(mi):\n            if ma[i] != chr:\n                count += 1\n        return count\n```\n\n### 463 Island Perimeter 56.3% Easy\n\n### 475 Heaters 30.3% Easy\n\n### 566. Reshape the Matrix\n\n```python\nclass Solution(object):\n    def matrixReshape(self, nums, r, c):\n        \"\"\"\n        :type nums: List[List[int]]\n        :type r: int\n        :type c: int\n        :rtype: List[List[int]]\n        \"\"\"\n        row_len = len(nums)\n        col_len = len(nums[0])\n        if row_len * col_len != r * c:\n            return nums\n        else:\n            new_nums = [[0 for i in range(c)] for j in range(r)]\n            cur = 0\n            for row_nu in range(row_len):\n                for col_nu in range(col_len):\n                    cur += 1\n                    new_row_nu = (cur - 1) // c\n                    new_col_nu = cur - new_row_nu * c - 1\n                    new_nums[new_row_nu][new_col_nu] = nums[row_nu][col_nu]\n        return new_nums\n```\n\n## Medium 集合\n\n### 2 Add Two Numbers 26.1% Medium\n\n### 3 Longest Substring Without Repeating Characters 23.6% Medium\n\n### 5 Longest Palindromic Substring 24.4% Medium\n\n### 11 Container With Most Water 36.0% Medium\n\n### 12 Integer to Roman 42.6% Medium\n\n### 15 3Sum 20.7% Medium\n\n### 16 3Sum Closest 30.4% Medium\n\n### 17 Letter Combinations of a Phone Number 32.1% Medium\n\n### 18 4Sum 25.5% Medium\n\n### 22 Generate Parentheses 41.5% Medium\n\n### 29 Divide Two Integers 15.9% Medium\n\n### 31 Next Permutation 28.0% Medium\n\n### 34 Search for a Range 30.8% Medium\n\n### 35 Search Insert Position 38.8% Medium\n\n### 39 Combination Sum 35.4% Medium\n\n### 40 Combination Sum II 31.0% Medium\n\n### 43 Multiply Strings 25.8% Medium\n\n### 46 Permutations 40.1% Medium\n\n### 47 Permutations II 30.8% Medium\n\n### 48 Rotate Image 36.9% Medium\n\n### 49 Group Anagrams 31.5% Medium\n\n### 50 Pow(x, n) 27.1% Medium\n\n### 53 Maximum Subarray 38.6% Medium\n\n### 54 Spiral Matrix 24.4% Medium\n\n### 55 Jump Game 29.1% Medium\n\n### 59 Spiral Matrix II 37.8% Medium\n\n### 60 Permutation Sequence 27.0% Medium\n\n### 61 Rotate List 24.0% Medium\n\n### 62 Unique Paths 39.0% Medium\n\n### 63 Unique Paths II 30.8% Medium\n\n### 64 Minimum Path Sum 37.0% Medium\n\n### 69 Sqrt(x) 26.8% Medium\n\n### 71 Simplify Path 23.9% Medium\n\n### 73 Set Matrix Zeroes 35.0% Medium\n\n### 74 Search a 2D Matrix 35.6% Medium\n\n### 75 Sort Colors 36.5% Medium\n\n### 77 Combinations 37.6% Medium\n\n### 78 Subsets 36.2% Medium\n\n### 79 Word Search 25.2% Medium\n\n### 80 Remove Duplicates from Sorted Array II 34.7% Medium\n\n### 81 Search in Rotated Sorted Array II 32.9% Medium\n\n### 82 Remove Duplicates from Sorted List II 28.5% Medium\n\n### 86 Partition List 31.4% Medium\n\n### 89 Gray Code 39.1% Medium\n\n### 90 Subsets II 33.6% Medium\n\n### 91 Decode Ways 18.8% Medium\n\n### 92 Reverse Linked List II 29.7% Medium\n\n### 93 Restore IP Addresses 25.7% Medium\n\n### 94 Binary Tree Inorder Traversal 43.5% Medium\n\n### 95 Unique Binary Search Trees II 30.5% Medium\n\n### 96 Unique Binary Search Trees 39.6% Medium\n\n### 98 Validate Binary Search Tree 22.2% Medium\n\n### 103 Binary Tree Zigzag Level Order Traversal 32.0% Medium\n\n### 105 Construct Binary Tree from Preorder and Inorder Traversal 30.6% Medium\n\n### 106 Construct Binary Tree from Inorder and Postorder Traversal 30.8% Medium\n\n### 108 Convert Sorted Array to Binary Search Tree 40.2% Medium\n\n### 109 Convert Sorted List to Binary Search Tree 32.6% Medium\n\n### 113 Path Sum II 31.2% Medium\n\n### 114 Flatten Binary Tree to Linked List 33.4% Medium\n\n### 116 Populating Next Right Pointers in Each Node 36.8% Medium\n\n### 120 Triangle 32.3% Medium\n\n### 122 Best Time to Buy and Sell Stock II 45.3% Medium\n\n### 127 Word Ladder 19.3% Medium\n\n### 129 Sum Root to Leaf Numbers 35.0% Medium\n\n### 130 Surrounded Regions 17.4% Medium\n\n### 131 Palindrome Partitioning 30.6% Medium\n\n### 133 Clone Graph 25.0% Medium\n\n### 134 Gas Station 28.5% Medium\n\n### 137 Single Number II 40.0% Medium\n\n### 139 Word Break 28.0% Medium\n\n### 142 Linked List Cycle II 31.2% Medium\n\n### 143 Reorder List 24.5% Medium\n\n### 144 Binary Tree Preorder Traversal 42.8% Medium\n\n### 147 Insertion Sort List 31.6% Medium\n\n### 148 Sort List 27.2% Medium\n\n### 150 Evaluate Reverse Polish Notation 25.7% Medium\n\n### 151 Reverse Words in a String 15.7% Medium\n\n### 152 Maximum Product Subarray 24.3% Medium\n\n### 153 Find Minimum in Rotated Sorted Array 38.4% Medium\n\n### 156 Binary Tree Upside Down 42.4% Medium\n\n### 161 One Edit Distance 30.3% Medium\n\n### 162 Find Peak Element 35.6% Medium\n\n### 163 Missing Ranges 28.5% Medium\n\n### 166 Fraction to Recurring Decimal 16.7% Medium\n\n### 167 Two Sum II - Input array is sorted 47.9% Medium\n\n### 173 Binary Search Tree Iterator 38.7% Medium\n\n### 179 Largest Number 21.3% Medium\n\n### 186 Reverse Words in a String II 28.5% Medium\n\n### 187 Repeated DNA Sequences 29.3% Medium\n\n### 199 Binary Tree Right Side View 38.4% Medium\n\n### 200 Number of Islands 32.0% Medium\n\n### 201 Bitwise AND of Numbers Range 33.0% Medium\n\n### 207 Course Schedule 30.2% Medium\n\n### 208 Implement Trie (Prefix Tree) 25.6% Medium\n\n### 209 Minimum Size Subarray Sum 28.4% Medium\n\n### 210 Course Schedule II 25.3% Medium\n\n### 211 Add and Search Word - Data structure design 20.1% Medium\n\n### 213 House Robber II 32.9% Medium\n\n### 215 Kth Largest Element in an Array 37.2% Medium\n\n### 216 Combination Sum III 41.5% Medium\n\n### 220 Contains Duplicate III 19.5% Medium\n\n### 221 Maximal Square 26.8% Medium\n\n### 222 Count Complete Tree Nodes 26.9% Medium\n\n### 227 Basic Calculator II 27.9% Medium\n\n### 228 Summary Ranges 27.8% Medium\n\n### 229 Majority Element II 27.6% Medium\n\n### 230 Kth Smallest Element in a BST 41.7% Medium\n\n### 236 Lowest Common Ancestor of a Binary Tree 29.2% Medium\n\n### 238 Product of Array Except Self 46.8% Medium\n\n### 240 Search a 2D Matrix II 37.8% Medium\n\n### 241 Different Ways to Add Parentheses 40.9% Medium\n\n### 244 Shortest Word Distance II 34.8% Medium\n\n### 245 Shortest Word Distance III 49.2% Medium\n\n### 247 Strobogrammatic Number II 38.0% Medium\n\n### 250 Count Univalue Subtrees 40.0% Medium\n\n### 251 Flatten 2D Vector 38.5% Medium\n\n### 253 Meeting Rooms II 38.0% Medium\n\n### 254 Factor Combinations 40.0% Medium\n\n### 255 Verify Preorder Sequence in Binary Search Tree 38.7% Medium\n\n### 256 Paint House 45.7% Medium\n\n### 259 3Sum Smaller 40.5% Medium\n\n### 260 Single Number III 48.9% Medium\n\n### 261 Graph Valid Tree 36.3% Medium\n\n### 264 Ugly Number II 31.3% Medium\n\n### 267 Palindrome Permutation II 30.8% Medium\n\n### 268 Missing Number 43.3% Medium\n\n### 271 Encode and Decode Strings 26.5% Medium\n\n### 274 H-Index 31.9% Medium\n\n### 275 H-Index II 33.5% Medium\n\n### 277 Find the Celebrity 35.4% Medium\n\n### 279 Perfect Squares 34.7% Medium\n\n### 280 Wiggle Sort 54.5% Medium\n\n### 281 Zigzag Iterator 47.9% Medium\n\n### 284 Peeking Iterator 35.0% Medium\n\n### 285 Inorder Successor in BST 36.2% Medium\n\n### 286 Walls and Gates 42.0% Medium\n\n### 289 Game of Life 36.2% Medium\n\n### 294 Flip Game II 44.9% Medium\n\n### 298 Binary Tree Longest Consecutive Sequence 39.7% Medium\n\n### 300 Longest Increasing Subsequence 37.2% Medium\n\n### 304 Range Sum Query 2D - Immutable 22.7% Medium\n\n### 306 Additive Number 27.1% Medium\n\n### 307 Range Sum Query - Mutable 18.5% Medium\n\n### 309 Best Time to Buy and Sell Stock with Cooldown 39.4% Medium\n\n### 310 Minimum Height Trees 28.3% Medium\n\n### 311 Sparse Matrix Multiplication 50.4% Medium\n\n### 313 Super Ugly Number 36.8% Medium\n\n### 314 Binary Tree Vertical Order Traversal 34.9% Medium\n\n### 318 Maximum Product of Word Lengths 41.9% Medium\n\n### 319 Bulb Switcher 41.8% Medium\n\n### 320 Generalized Abbreviation 43.0% Medium\n\n### 322 Coin Change 25.9% Medium\n\n### 323 Number of Connected Components in an Undirected Graph 46.2% Medium\n\n### 324 Wiggle Sort II 25.0% Medium\n\n### 325 Maximum Size Subarray Sum Equals k 41.4% Medium\n\n### 328 Odd Even Linked List 41.6% Medium\n\n### 331 Verify Preorder Serialization of a Binary Tree 34.9% Medium\n\n### 332 Reconstruct Itinerary 27.7% Medium\n\n### 333 Largest BST Subtree 29.6% Medium\n\n### 334 Increasing Triplet Subsequence 37.6% Medium\n\n### 337 House Robber III 41.3% Medium\n\n### 338 Counting Bits 59.3% Medium\n\n### 341 Flatten Nested List Iterator 38.2% Medium\n\n### 343 Integer Break 44.6% Medium\n\n### 347 Top K Frequent Elements 45.6% Medium\n\n### 348 Design Tic-Tac-Toe 45.0% Medium\n\n### 351 Android Unlock Patterns 42.3% Medium\n\n### 353 Design Snake Game 25.1% Medium\n\n### 355 Design Twitter 24.1% Medium\n\n### 356 Line Reflection 29.7% Medium\n\n### 357 Count Numbers with Unique Digits 44.8% Medium\n\n### 360 Sort Transformed Array 43.0% Medium\n\n### 361 Bomb Enemy 37.8% Medium\n\n### 362 Design Hit Counter 52.4% Medium\n\n### 364 Nested List Weight Sum II 50.2% Medium\n\n### 365 Water and Jug Problem 25.9% Medium\n\n### 366 Find Leaves of Binary Tree 56.7% Medium\n\n### 367 Valid Perfect Square 37.2% Medium\n\n### 368 Largest Divisible Subset 32.7% Medium\n\n### 369 Plus One Linked List 52.2% Medium\n\n### 370 Range Addition 52.8% Medium\n\n### 372 Super Pow 32.9% Medium\n\n### 373 Find K Pairs with Smallest Sums 29.5% Medium\n\n### 375 Guess Number Higher or Lower II 34.7% Medium\n\n### 376 Wiggle Subsequence 34.3% Medium\n\n### 377 Combination Sum IV 41.5% Medium\n\n### 378 Kth Smallest Element in a Sorted Matrix 42.9% Medium\n\n### 379 Design Phone Directory 29.1% Medium\n\n### 382 Linked List Random Node 46.1% Medium\n\n### 384 Shuffle an Array 44.7% Medium\n\n### 385 Mini Parser 29.4% Medium\n\n### 386 Lexicographical Numbers 39.0% Medium\n\n### 388 Longest Absolute File Path 34.4% Medium\n\n### 390 Elimination Game 37.4% Medium\n\n### 392 Is Subsequence 44.1% Medium\n\n### 393 UTF-8 Validation 35.2% Medium\n\n### 394 Decode String 39.7% Medium\n\n### 395 Longest Substring with At Least K Repeating Characters 35.3% Medium\n\n### 397 Integer Replacement 28.9% Medium\n\n### 398 Random Pick Index 39.0% Medium\n\n### 399 Evaluate Division 39.2% Medium\n\n### 402 Remove K Digits 25.9% Medium\n\n### 406 Queue Reconstruction by Height 54.1% Medium\n\n### 413 Arithmetic Slices 54.2% Medium\n\n### 416 Partition Equal Subset Sum 37.2% Medium\n\n### 417 Pacific Atlantic Water Flow 32.7% Medium\n\n### 418 Sentence Screen Fitting 26.9% Medium\n\n### 419 Battleships in a Board 59.8% Medium\n\n### 421 Maximum XOR of Two Numbers in an Array 40.6% Medium\n\n### 423 Reconstruct Original Digits from English 41.7% Medium\n\n### 424 Longest Repeating Character Replacement 39.6% Medium\n\n### 435 Non-overlapping Intervals 39.8% Medium\n\n### 436 Find Right Interval 41.9% Medium\n\n### 439 Ternary Expression Parser 49.3% Medium\n\n### 442 Find All Duplicates in an Array 45.6% Medium\n\n### 444 Sequence Reconstruction 20.1% Medium\n\n### 445 Add Two Numbers II 44.5% Medium\n\n### 449 Serialize and Deserialize BST 40.1% Medium\n\n### 450 Delete Node in a BST 32.4% Medium\n\n### 451 Sort Characters By Frequency 50.3% Medium\n\n### 452 Minimum Number of Arrows to Burst Balloons 41.9% Medium\n\n### 454 4Sum II 41.2% Medium\n\n### 456 132 Pattern 27.3% Medium\n\n### 462 Minimum Moves to Equal Array Elements II 50.3% Medium\n\n### 464 Can I Win 21.4% Medium\n\n### 467 Unique Substrings in Wraparound String 28.4% Medium\n\n### 468 Validate IP Address 21.8% Medium\n\n### 469 Convex Polygon 24.6% Medium\n\n### 473 Matchsticks to Square 27.5% Medium\n\n### 474 Ones and Zeroes 32.7% Medium\n\n### 477 Total Hamming Distance 40.1% Medium\n\n## Hard 集合\n\n### 4 Median of Two Sorted Arrays 20.7% Hard\n\n### 10 Regular Expression Matching 23.4% Hard\n\n### 23 Merge k Sorted Lists 25.7% Hard\n\n### 25 Reverse Nodes in k-Group 29.6% Hard\n\n### 30 Substring with Concatenation of All Words 21.6% Hard\n\n### 32 Longest Valid Parentheses 23.0% Hard\n\n### 33 Search in Rotated Sorted Array 31.8% Hard\n\n### 37 Sudoku Solver 27.8% Hard\n\n### 41 First Missing Positive 24.9% Hard\n\n### 42 Trapping Rain Water 35.1% Hard\n\n### 44 Wildcard Matching 18.9% Hard\n\n### 45 Jump Game II 26.0% Hard\n\n### 51 N-Queens 28.8% Hard\n\n### 52 N-Queens II 42.5% Hard\n\n### 56 Merge Intervals 28.2% Hard\n\n### 57 Insert Interval 26.2% Hard\n\n### 65 Valid Number 12.6% Hard\n\n### 68 Text Justification 17.9% Hard\n\n### 72 Edit Distance 30.5% Hard\n\n### 76 Minimum Window Substring 23.6% Hard\n\n### 84 Largest Rectangle in Histogram 25.5% Hard\n\n### 85 Maximal Rectangle 25.8% Hard\n\n### 87 Scramble String 28.1% Hard\n\n### 97 Interleaving String 23.9% Hard\n\n### 99 Recover Binary Search Tree 28.6% Hard\n\n### 115 Distinct Subsequences 30.5% Hard\n\n### 117 Populating Next Right Pointers in Each Node II 33.4% Hard\n\n### 123 Best Time to Buy and Sell Stock III 28.1% Hard\n\n### 124 Binary Tree Maximum Path Sum 24.9% Hard\n\n### 126 Word Ladder II 13.6% Hard\n\n### 128 Longest Consecutive Sequence 35.1% Hard\n\n### 132 Palindrome Partitioning II 23.3% Hard\n\n### 135 Candy 23.8% Hard\n\n### 138 Copy List with Random Pointer 26.5% Hard\n\n### 140 Word Break II 22.0% Hard\n\n### 145 Binary Tree Postorder Traversal 38.2% Hard\n\n### 146 LRU Cache 16.0% Hard\n\n### 149 Max Points on a Line 15.5% Hard\n\n### 154 Find Minimum in Rotated Sorted Array II 36.0% Hard\n\n### 158 Read N Characters Given Read4 II - Call multiple times 24.2% Hard\n\n### 159 Longest Substring with At Most Two Distinct Characters 39.3% Hard\n\n### 164 Maximum Gap 28.5% Hard\n\n### 174 Dungeon Game 22.8% Hard\n\n### 188 Best Time to Buy and Sell Stock IV 23.7% Hard\n\n### 212 Word Search II 22.1% Hard\n\n### 214 Shortest Palindrome 22.7% Hard\n\n### 218 The Skyline Problem 25.3% Hard\n\n### 224 Basic Calculator 25.3% Hard\n\n### 233 Number of Digit One 27.2% Hard\n\n### 239 Sliding Window Maximum 31.2% Hard\n\n### 248 Strobogrammatic Number III 30.2% Hard\n\n### 265 Paint House II 37.0% Hard\n\n### 269 Alien Dictionary 22.5% Hard\n\n### 272 Closest Binary Search Tree Value II 37.2% Hard\n\n### 273 Integer to English Words 20.9% Hard\n\n### 282 Expression Add Operators 28.3% Hard\n\n### 287 Find the Duplicate Number 41.6% Hard\n\n### 291 Word Pattern II 37.4% Hard\n\n### 295 Find Median from Data Stream 23.2% Hard\n\n### 296 Best Meeting Point 50.0% Hard\n\n### 297 Serialize and Deserialize Binary Tree 31.3% Hard\n\n### 301 Remove Invalid Parentheses 34.5% Hard\n\n### 302 Smallest Rectangle Enclosing Black Pixels 43.3% Hard\n\n### 305 Number of Islands II 37.9% Hard\n\n### 308 Range Sum Query 2D - Mutable 19.9% Hard\n\n### 312 Burst Balloons 41.4% Hard\n\n### 315 Count of Smaller Numbers After Self 33.4% Hard\n\n### 316 Remove Duplicate Letters 28.3% Hard\n\n### 317 Shortest Distance from All Buildings 33.2% Hard\n\n### 321 Create Maximum Number 23.8% Hard\n\n### 327 Count of Range Sum 28.6% Hard\n\n### 329 Longest Increasing Path in a Matrix 35.1% Hard\n\n### 330 Patching Array 31.3% Hard\n\n### 335 Self Crossing 23.7% Hard\n\n### 336 Palindrome Pairs 24.3% Hard\n\n### 340 Longest Substring with At Most K Distinct Characters 38.6% Hard\n\n### 352 Data Stream as Disjoint Intervals 38.7% Hard\n\n### 354 Russian Doll Envelopes 31.4% Hard\n\n### 358 Rearrange String k Distance Apart 31.7% Hard\n\n### 363 Max Sum of Rectangle No Larger Than K 32.0% Hard\n\n### 380 Insert Delete GetRandom O(1) 38.0% Hard\n\n### 381 Insert Delete GetRandom O(1) - Duplicates allowed 27.7% Hard\n\n### 391 Perfect Rectangle 23.3% Hard\n\n### 403 Frog Jump 30.2% Hard\n\n### 407 Trapping Rain Water II 35.0% Hard\n\n### 410 Split Array Largest Sum 31.1% Hard\n\n### 411 Minimum Unique Word Abbreviation 30.9% Hard\n\n### 420 Strong Password Checker 21.5% Hard\n\n### 425 Word Squares 42.0% Hard\n\n### 432 All O`one Data Structure 28.4% Hard\n\n### 440 K-th Smallest in Lexicographical Order 21.4% Hard\n\n### 446 Arithmetic Slices II - Subsequence 22.0% Hard\n\n### 465 Optimal Account Balancing 27.5% Hard\n\n### 466 Count The Repetitions 24.6% Hard\n\n### 471 Encode String with Shortest Length 45.9% Hard\n\n### 472 Concatenated Words 28.2% Hard\n"},{"tags":["Ubuntu"],"path":"20161005_UbuntuCheatSheet.md","title":"Ubuntu CheatSheet","slug":"Ubuntu CheatSheet","date":"2016-10-05","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n# Ubuntu CheatSheet\n\n## 0x01 基础设置\n\n## 0x02 软件安装\n\n```\nsudo apt-get --purge autoremove\n```\n\n```bash\n# 更新\nsudo apt update\nsudo apt install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-devsudo apt-get install zsh tree htopsudo apt-get install build-essential acl ntp htop git libpq-dev libmysqlclient-dev libffi-dev libfreetype6-dev libjpeg8-dev liblcms2-dev libtiff5-dev libwebp-dev libxml2-dev libxslt1-dev tcl8.6-dev tk8.6-dev zlib1g-dev python-dev python-pip python-pycurl python-tk ipython supervisor python3.5 python3.5-dev python3-pip python3-lxml python3-tk ipython3sudo apt-get install mysql-server mysql-client libmysqlclient-dev slurm\n\n# GIT 配置\ngit config --global color.ui true\ngit config --global user.name \"twocucao\"\ngit config --global user.email \"twocucao@gmail.com\"\nssh-keygen -t rsa -b 4096 -C \"twocucao@gmail.com\"\n```\n\n第一步，更新源：\n\n### 2.1 设置无登录密钥\n\n```\n# 刚开始用了一个很蠢的方法\nscp ~/.ssh/id_rsa.pub twocucao@192.168.2.156:.ssh/id_rsa.pub\nssh twocucao@192.168.2.156 \"mkdir .ssh;chmod 0700 .ssh\"\n# 现在想想，可以直接 ssh-copy-id\nssh-copy-id twocucao@192.168.2.156\n```\n\n## 0x02 了解 Linux 服务器运行情况\n\n```\n# 运行时间 uptime\n# 内存情况 free -h\n# 网络类\n## 实时流量监控 iftop\n## 进程占用带宽 nethogs\n## sudo nethogs eth0\niptraf\n# 磁盘类 iotop\n## 当 dstat 的 wai 字段值比较大时，可以使用 iotop 找出哪些进程出了问题\n# 综合类 之 监控进程，进程管理\ntop\nhtop\nglances # PS , 这个监控粒度更细\n# 综合类 可以取代 vmstat , iostat , netstat , ifstatdstat\n# 综合类\n# 约等于 strace + tcpdump + htop + iftop + lsofsysdig\n```\n\n## 0x04 踩坑集合\n\n### 3.1 磁盘问题\n\n```\ndf -h 查看磁盘块占用的文件（block）\ndf -i 查看索引节点的占用（Inodes）\nfind / -size +100M |xargs ls -lh\n# 删除 5 天前的文件\nfind /path/to/files* -mtime +5 -exec rm {} \\;\ndu -h\nrm xxx.log\necho \"\" > xxx.log\n```\n\n---\n\nChangeLog:\n\n- **2017-03-19** 重修文字，准备整理安装配置将结果转化为 Ansible PlayBook\n- **2017-10-20** 重修文字，准备整理安装配置将结果转化为 Ansible PlayBook\n"},{"tags":["macOS"],"path":"20160701_MacCheatSheet.md","title":"macOS Cheatsheet","slug":"macOS Cheatsheet","date":"2016-07-01","category":"善用佳软","lastMod":"2021-06-30","description":"macOS Cheatsheet","thumbnail":"","content":"\n# macOS Cheatsheet\n\n## 0x00. 前言\n\n> 好的工匠懂得挑选合适的工具。\n\n做软件行业之间长了，见多了各种操作系统孰优孰劣 / 编程语言哪家强的论战，也就渐渐懂得了这个异常朴素的道理。也懒得去争论。有争论的时间，不如好好的编写代码，多看些技术书籍。以及熟悉自己的工具。\n\n如果说，你现在问我到底是哪个 OS 好，我只能说：\n\n> 好的工匠懂得挑选合适的工具。而不是炫耀自己的工具。\n\nBTW : **大约在 2015 年 12 月份有了第一台 MAC, 如今更加喜爱。**\n\n本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Mac 快捷键和工具。\n\n不定期更新。\n\n<!-- more -->\n\n## 0x01. 必备软件\n\n### 1.1. 常见应用\n\n**非技术流**\n\n- 启动器 Alfred 3\n- 浏览器 Chrome Firefox\n- 输入法 搜狗输入法\n- 系统清理 AppCleaner\n- 系统增强 Caffeine / PopClip / BetterZip / Amphetamine\n- 手机管理工具 HandShaker / AirDroid\n- 邮件客户端 Airmail 2\n- 录屏截图 Annotate / Camtasia 2 / Snagit / ScreenFlow\n- 下载工具 Aria2GUI / 迅雷\n- 影音处理 Adobe PhotoShop CC , Adobe PhotoShop , Adobe LightingRoom , Final Cut Pro\n- 影音浏览 MPlayerX, QuickTime , IQIYI , NeteaseMusic , iina\n- 远程协助 TeamViewer\n- 办公软件 Wiznote , PDF Expert , Office（虚拟机内部）OmniFocus , OmniGraffle , EuDic , MacTex : Latex\n- 云存储 iCloud , 百度云\n- 手机管理 HandShaker\n\n**技术流**\n\n- 终端：iTerm2\n- GIS 相关 QGIS , PostgreSQL + PostGIS\n- IDE 选择 JetBrain 家的软件 PyCharm, IntellijIDEA\n- 编辑器 MacVim （主力）, 配合 [C-VIM](https://github.com/twocucao/c-vim) 作为日常编写文字的利器。\n- 数据库 MySQL , PostgreSQL（主力） , Redis , MongoDB\n- 数据管理 Navicat,Datagrip,RoboMongo,rdm\n- 文档查看 Dash\n- 网络工具 SS QT 不解释\n- 网络抓包 Charles, Wireshark, Chrome\n- 代码仓库 Github SourceTree\n- 数据分析 Tableau\n- 虚拟机 Vmware Fusion\n- 抓包工具 Wireshark\n\n**mac 独有命令行**\n\n- open\n- pbcopy\n- pbpaste\n- screencapture\n- launchctl\n- mdfind（还是 linux 的 find 好用）\n- sip （还是比较推荐 imagemagic)\n\n### 1.2. Homebrew 和 iTerm2\n\n[iterm2 下载](http://www.iterm2.com/)\n\n```bash\n# homebrew 安装\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n另起终端\n\n```bash\n# aerial 屏保\n# https://github.com/JohnCoates/Aerial\nbrew cask install aerial\n# https://github.com/sindresorhus/quick-look-plugins\nbrew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzipql qlimagesize webpquicklook suspicious-package quicklookase qlvideo\n# Install some other useful utilities like `sponge`.\nbrew install moreutils\n# Install GNU `find`, `locate`, `updatedb`, and `xargs`, `g`-prefixed.\nbrew install findutils\n# Install GNU `sed`, overwriting the built-in `sed`.\nbrew install gnu-sed --with-default-names\n\nbrew install bash zsh\nbrew install wget --with-iri\n\n# Install Python\nbrew install python\nbrew install python3\n\nbrew tap bramstein/webfonttools\nbrew install sfnt2woff\nbrew install sfnt2woff-zopfli\nbrew install woff2\n\n# Install other useful binaries.\nbrew install ack\nbrew install dark-mode\n#brew install exiv2\nbrew install git\nbrew install git-lfs\nbrew install git-flow\nbrew install git-extras\nbrew install hub\nbrew install imagemagick --with-webp\nbrew install lua\nbrew install lynx\nbrew install p7zip\nbrew install pigz\nbrew install pv\nbrew install rename\nbrew install rhino\nbrew install speedtest_cli\nbrew install ssh-copy-id\nbrew install tree\nbrew install webkit2png\nbrew install zopfli\nbrew install pkg-config libffi\nbrew install pandoc\n\n# Lxml and Libxslt\nbrew install libxml2\nbrew install libxslt\nbrew link libxml2 --force\nbrew link libxslt --force\n\nbrew cleanup\n# 如果需要升级\nbrew update && brew upgrade --all && brew cleanup && brew prune\n```\n\n有时候 /usr/local 的可能会存在权限问题，建议如果可能出现问题，则需要执行下面的命令修复权限。\n\n```bash\nsudo chown -R $(whoami):admin /usr/local/\n```\n\n## 0x02. 开发者必备\n\n### 2.0. Shell\n\n> 注意：MAC 使用的大多命令来自于 FreeBSD , 并不是来自 GNU , 所以很多命令会与常规的 linux 命令不太一样。\n> 所以，Shell 命令请在安装完 Gnu 的工具集之后，可以到我的文章 Shell CheatSheat 查看语法。\n\n关于 shell 脚本，请参考我的另一篇文章。\n\n[Shell CheatSheat](/2015/04/18/ShellCheatSheet/)\n\n### 2.1. Python\n\n> 笔者虽然也接触过很多语言，都是粗浅一过，但无一精通，唯一可以稍微谈谈的就是 Python 语言。\n\n> 当然，安装完毕自然是可以参考一下我的 Python 武器库啦 [Python 工程师的武器库](http://www.url.com)\n\n#### 2.1.1. Python 安装\n\n```bash\ngit clone https://github.com/yyuu/pyenv.git ~/.pyenv\ngit clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc\necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc\necho 'eval \"$(pyenv init -)\"' >> ~/.zshrc\necho 'eval \"$(pyenv virtualenv-init -)\"' >> ~/.zshrc\n\n# 接着另开终端\n# 不喜写兼容代码，所有代码均向 3.5+ 靠拢\nv=3.5.2|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v\nv=3.6.0|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v\nv=2.7.11|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v\n# 可以先用迅雷把 官网的 Anaconda3-4.4.0-MacOSX-x86_64.sh 下载下来，然后\nmv Anaconda3-4.4.0-MacOSX-x86_64.sh ~/.pyenv/cache/ && pyenv install anaconda3-4.4.0\n\n# 设置 Global Python 为 2.7.11, 备注：尽量不要把 Py3 设置为全局，否则由于 Homebrew 本身有一些依赖是依赖于 Py2 的，这样容易出现一些奇怪的问题。\npyenv global 2.7.11\npip install -i https://pypi.doubanio.com/simple requests\n# 下面这个是用于安装基本的代码补全功能\npip install -i https://pypi.doubanio.com/simple --upgrade \"jedi>=0.9.0\" \"json-rpc>=1.8.1\" \"service_factory>=0.1.5\" flake8 pytest autoflake hy\n\n# 创建最常用 Py3 虚拟环境\npyenv virtualenv 3.5.2 py3-daily\npyenv activate py3-daily\npip install -i https://pypi.doubanio.com/simple requests\npip install -i https://pypi.doubanio.com/simple beatutifulsoup4\npip install -i https://pypi.doubanio.com/simple ipython[notebook]\npip install -i https://pypi.doubanio.com/simple jupyter\n# 下面这个是用于安装基本的代码补全功能\npip install -i https://pypi.doubanio.com/simple --upgrade \"jedi>=0.9.0\" \"json-rpc>=1.8.1\" \"service_factory>=0.1.5\" flake8 pytest autoflake hy\n\n# 创建 Anaconda 的数据科学 AI 环境\npyenv virtualenv anaconda3-4.4.0 py3-ai\npyenv activate anaconda3-4.4.0/envs/py3-ai\npyenv deactivate\n```\n\n#### 2.1.2 Python 环境的坑\n\n##### Homebrew 的 Python 问题\n\n如果本机安装了 Homebrew 如果后面使用 PyEnv 或者 Anaconda 设置当前环境为默认 Python 为 Python3（不建议这么搞）, 但是如果偏偏要把默认的 Python 版本换成 Python3, 会弹出一些 pythonpath 的问题，执行下面命令即可暂时屏蔽这个问题，但是后没有隐患则不清楚。\n\n```bash\nmv /usr/local/lib/python2.7/site-packages/sitecustomize.py /usr/local/lib/python2.7/site-packages/sitecustomize.py.back\n```\n\n##### 网络问题\n\n在 Python 中执行下面的代码的时候总是报错：\n\n```python\nip = socket.gethostbyname(socket.gethostname())\n# socket.gaierror: [Errno 8] nodename nor servname provided, or not known\n```\n\n最后发现是因为设置主机名没有设置好\n\n```bash\nsudo scutil --set ComputerName \"newname\"\nsudo scutil --set LocalHostName \"newname\"\nsudo scutil --set HostName \"newname\"\ndscacheutil -flushcache\n# 然后重启电脑即可\n```\n\n## 0x03. 高效率软件 && 专业软件\n\n### 3.1. OmniFocus\n\n### 3.2. OmniGraffle\n\n### 3.3. Final Cut Pro\n\n### 3.4. Keynote\n\n## 0xDD. 参考链接\n\n- https://github.com/donnemartin/dev-setup\n\n## 0xEE. 扩展阅读\n\n- [关于 Mac 我的回答](https://www.zhihu.com/question/30816866/answer/59415036)\n- [关于 Ubuntu 我的回答](https://www.zhihu.com/question/30816866/answer/59415036)\n- [关于 Win10 我的回答](https://www.zhihu.com/question/32129337/answer/59379401)\n\n---\n\nChangeLog:\n\n- **2017-06-28** Python 环境 和 Homebrew 安装环境\n"},{"tags":["Ruby"],"path":"20160204_斗鱼TV弹幕助手.md","title":"斗鱼 TV 弹幕助手","slug":"斗鱼 TV 弹幕助手","date":"2016-02-04","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n# 斗鱼弹幕助手\n\n## 0. 前言\n\n前几天闲着无聊，看到舍友们都在看斗鱼 TV，虽然我对那些网络游戏东西都不是非常感兴趣。只是我突然间想到，如果我可以获取上面的弹幕内容。不就有点意思了么？\n\n## 1. 分析阶段\n\n如果我想要抓取网页上面的东西，无非就是两种方法\n\n<!-- more -->\n\n1. 使用浏览器，手工（自己点击）或者非手工（使用 JS 脚本），存取我想要的东西。\n2. 编写 HTTP 客户端（斗鱼无 HTTPS 通讯）\n\n第一种方法是万能的，但显然是不行的， 原因如下：\n\n- 手动保存实在是不可行，程序员不为也。\n- 浏览器与本地交互有限，换而言之，也就是即使我抓取了对应的弹幕，我也没有办法解决持久化的问题。\n- 假设你选择的是 Chrome 或者 firefox 浏览器，也不是不能实现持久化，但这需要写扩展，Chrome 扩展没有写过，也不是很感兴趣。\n\n第二种方法显然是一个正常的程序员的做法。\n\n写一个客户端，也就是写一个小爬虫，使用的场景：\n\n> 用户在终端执行命令\n\n```bash\n\n```\n\n回想一下抓取网站的方法\n\n四步走：请求网页（原始数据） - 提取数据（提纯数据） - 保存数据 - 分析数据\n\n很显然，只要解决了请求网页，其他的也就无非解析和 SQL 语句什么的。\n\n### 1.1. 斗鱼 TV 弹幕抓取的思路确定\n\n如果是像我上面说的那么简单，也就不必再写一篇文章。毕竟，网页小爬虫没有什么技术含量。分布式爬虫才有。\n\n通常情况下的网页小爬虫无非要解决如下问题：\n\n请求，如果对方有一定策略的反爬虫，那需要反反爬虫。比如，\n\n- header 带上 host，带上 refer，带上其他\n- 需要验证，那就申请用户名和密码，然后登陆\n- 如果在登录时期有防跨站机制，那就先获取一次登录页面，然后解析出 token，带上对应的 token 然后登陆。\n- 在程序中加入 Log，并且存到本地。防止出现各种各样的反爬虫机制 ban 掉了程序，从而方便进行下一步防反爬虫对策。\n\n并且，由于请求响应机制的存在，通常情况下，每一个请求对应一个响应，如果出错了，要么超时，要么有状态码，所以 web 爬虫实在也相对而言比较容易些。\n\n那么，斗鱼 TV 的站点是不是这样子的容易爬取呢？\n\n你猜到了，答案是“不是”。\n\n由于弹幕具有实时性，就决定了斗鱼 TV 的弹幕无法通过保存完整指定时间端弹幕的 XML（比如 BILIBILI 的一个视频弹幕是存在一段 xml 中的）或者 Json 数据来显示弹幕。要不然的话，那主播操作很出色的时候，观众的弹幕岂不是无法实时显示了么？\n\n那么，肯定就是 WebSocket 了，于是，我一如既往的打开 F12，查看网络流量。\n\n> 正如你想到的那样，没有任何的弹幕流量来往。一个 WebSocket 的消息都没有。\n\n那么，消息肯定是有的，但是消息并不是通过 HTTP 协议或者 WebSocket 协议传输的，那么问题会出在哪呢？\n\n分析前端的代码，找出获取弹幕的 JS 代码，苦于代码太多，找了很久没有找到。那也就是执行逻辑可能在 flash 里面。\n\n于是祭出大杀器 WireShark，抓一下流量。终于看到弹幕的样子了。\n\n是这样的。\n\n![每条消息的内容](/images/douyutveachmsg.png)\n\n原来使用的是 Flash 的 Socket 功能。\n\n多分析几组数据，但还是对发送消息内容缺乏把握，特别是在用户认证，用户接收弹幕这一块。在搜索引擎上搜索了一阵，发现知乎上有个帖子，读完终于解了我的疑惑。\n\n省略若干消息分析过程。\n\n总结后得出斗鱼 TV 网站的服务器分布。\n\n![猜测网站架构图](/images/douyutvinfo.jpg)\n\n### 1.2. 房间信息和弹幕认证服务器获取\n\n首先我们拿随便一个主播房间来说，比如，mkk\n\nTa 的房间链接分为两种\n\n- http://www.douyutv.com/mkk\n- http://www.douyutv.com/『房间 id]\n\n对这个主播房间页面请求，正常，所有的有用信息都不是放在 HTML 中渲染出来，而是放在 HTML 中内置的 JS 脚本中，这是为了减少服务器渲染 HTML 的压力？可是渲染放在 JS 里面不也一样需要渲染？（不明白）总之，就是程序先加载没有具体数据填充页面，然后 JS 更新数据。\n\n内置的两段 JS 脚本，JS 脚本中有两个变量，该变量很容易转换成 JSON 数据，也就是两段 JSON 数据，一个是关于主播的个人信息，另一个是关于弹幕认证服务器的列表（该列表中的任意一个服务器均可以认证，但每一次请求主播页面得到的认证服务器列表都不一样）\n\n通过这步，我们就拿到了主播的信息以及弹幕服务器的认证地址，端口。\n\n### 1.3. 发送 Socket 消息的流程简介\n\n我们通过抓包，分析那一大坨数据包，可以确定以下通过以下的流程便可以获取弹幕消息。（分析过程比较繁琐）\n\n首先建立两个 Socket。一个用于认证 (@danmu_auth_socket)，另一个用户获取弹幕 (@danmu_client)。\n\n- **步骤 1:** @danmu_auth_socket 发送消息登陆，获取消息 1 解析出匿名用户的用户名，再获取消息 2 解析出 gid\n- **步骤 2:** @danmu_auth_socket 发送 qrl 消息，获取两个没有什么用的消息\n- **步骤 3:** @danmu_auth_socket 发送 keeplive 消息\n- **步骤 4:** @danmu_socket 发送伪登陆消息（所有匿名用户都一样只需要输入步骤一中用户名就行了，因为认证已经在上面做过了）\n- **步骤 5:** @danmu_socket 发送 join_group 消息需要步骤一中国的 gid\n- **步骤 6:** @danmu_socket 不断的 recv 消息就可以获取弹幕消息了\n\n后面会详细解释\n\n### 2.1. 消息 Socket 消息格式以及发送一条消息\n\n既然是发消息，那么每条消息总是有些格式的。\n\n斗鱼的消息格式大致如下：\n\n![每条消息的内容](/images/douyutveachmsg.png)\n\n并遵循下面的格式：\n\n1. 通信协议长度，后四个部分的长度，四个字节\n2. 第二部分与第一部分一样\n3. 请求代码，发送给斗鱼的话，内容为 0xb1,0x02, 斗鱼返回的代码为 0xb2,0x02\n4. 发送内容\n5. 末尾字节\n\n```ruby\n# -*- encoding : utf-8 -*-\nclass Message\n  # 向斗鱼发送的消息\n  # 1. 通信协议长度，后四个部分的长度，四个字节\n  # 2. 第二部分与第一部分一样\n  # 3. 请求代码，发送给斗鱼的话，内容为 0xb1,0x02, 斗鱼返回的代码为 0xb2,0x02\n  # 4. 发送内容\n  # 5. 末尾字节\n  #pack('c*') 是字节数组转字符串的一种诡异的转化方式\n  def initialize(content)\n    @length = [content.size + 9,0x00,0x00,0x00].pack('c*')\n    @code = @length.dup\n    @magic = [0xb1,0x02,0x00,0x00].pack('c*')\n    @content  = content\n    @end = [0x00].pack('c*')\n  end\n\n  def to_s\n    @length + @code + @magic + @content + @end\n  end\n\nend\n\n```\n\n经过封装，我们仅仅关注那些可见的字符串，也就是 Content 部分就可以了。\ncontent 部分，也就是发送消息的内容，在文章后面将会详解。\n\n开启两个 Socket，一个用户认证，另一个用于弹幕的获取。\n\n用于用户弹幕认证的，是 2.1 中所说的认证服务器列表中任意一个。挑选出来一组 ip 和端口\n\n> @danmu_auth_socket = TCPSocket.new @auth_dst_ip,@auth_dst_port\n\n用户获取弹幕的只要为\n\n```ruby\ndanmu.douyutv.com:8601\ndanmu.douyutv.com:8602\ndanmu.douyutv.com:12601\ndanmu.douyutv.com:12602\n```\n\n四组域名：端口均可以作为如下的 DANMU_SERVER 和 PORT\n\n> @danmu_socket = TCPSocket.new DANMU_SERVER,DANMU_PORT\n\n发送一条消息只需如此\n\n```ruby\n    data = \"type@=loginreq/username@=\"+@username+\"/password@=1234567890123456/roomid@=\" + @room_id.to_s + \"/\"\n    all_data = message(data)\n    @danmu_socket.write all_data\n```\n\n**接下来，我们需处理上面说的六个步骤**\n\n### 2.2. 发送消息详细流程之步骤一\n\n发送消息内容为：\n\n> type@=loginreq/username@=/ct@=0/password@=/roomid@=156277/devid@=DF9E4515E0EE766B39F8D8A2E928BB7C/rt@=1453795822/vk@=4fc6e613fc650a058757331ed6c8a619/ver@=20150929/\n\n我们需要注意的内容如下：\n\n```ruby\ntype 表示消息的类型登陆消息为 loginreq\nusername 不需要，请求登陆以后系统会自动的返回对应的游客账号。\nct 不清楚什么意思，默认为 0 并无影响\npassword 不需要\nroomid 房间的 id\ndevid 为设备标识，无所谓，所以我们使用随机的 UUID 生成\nrt 应该是 runtime 吧，时间戳\nvk 为时间戳 +\"7oE9nPEG9xXV69phU31FYCLUagKeYtsF\"+devid 的字符串拼接结果的 MD5 值（这个是参考了一篇文章，关于这一处我也不大明白怎么探究出来的）\nver 默认\n```\n\n通过这一步，我们可以获取两条消息，并从消息中使用正则表达式获取对应的用户名以及 gid\n\n```ruby\n    str = @danmu_auth_socket.recv(4000)\n    @username= str[/\\/username@=(.+)\\/nickname/,1]\n    str = @danmu_auth_socket.recv(4000)\n    @gid = str[/\\/gid@=(\\d+)\\//,1]\n```\n\n### 2.3. 发送消息详细流程之步骤二\n\n发送的消息内容为\n\n> \"type@=qrl/rid@=\" + @room_id.to_s + \"/\"\n\n无需多说，类型为 qrl，rid 为 roomid，直接发送这条消息就好。返回的两条消息也没有什么价值。\n\n```ruby\n    send_message(:qrl,@danmu_auth_socket,\"\")\n    str = @danmu_auth_socket.recv(4000)\n    str = @danmu_auth_socket.recv(4000)\n```\n\n### 2.4. 发送消息详细流程之步骤三\n\n发送的消息内容为\n\n> \"type@=keeplive/tick@=\" + timestamp + \"/vbw@=0/k@=19beba41da8ac2b4c7895a66cab81e23/\"\n\n直接发送。无太大意义。\n\n```ruby\n    send_message(:keeplive,@danmu_auth_socket,\"\")\n    str = @danmu_auth_socket.recv(4000)\n```\n\n**前三步，也就是 2.2-2.3-2.4 三步骤，也就是使用 @danmu_auth_socket 完成获取 username 和 gid 的重要步骤。获取这两个字段以后，也就完成了它存在的使命。**\n\n接下来的就是 @danmu_socket 获取弹幕的时候了！\n\n### 2.5. 发送消息详细流程之步骤四\n\n消息内容为：\"type@=loginreq/username@=\"+@username+\"/password@=1234567890123456/roomid@=\" + @room_id.to_s + \"/\"\n\n和上面 2.2 中略有不同。但是，需要注意的是\n\n```ruby\nusername 为 2.2 中所得到的 username\npassword 的变化\n少了几个字段\n```\n\n```ruby\n    data = \"type@=loginreq/username@=\"+@username+\"/password@=1234567890123456/roomid@=\" + @room_id.to_s + \"/\"\n    all_data = message(data)\n    @danmu_socket.write all_data\n    str = @danmu_socket.recv(4000)\n```\n\n### 2.6. 发送消息详细流程之步骤五\n\n接下来就是完成认证的最后一步了，join_group 的消息内容为\n\n> \"type@=joingroup/rid@=\" + @room_id.to_s + \"/gid@=\"+@gid+\"/\"\n\ngid 为 2.2 中所得到的 gid。\n\n```ruby\n    send_message(:join_group,@danmu_socket,\"\")\n```\n\n### 2.7. 发送消息详细流程之步骤六\n\n获取弹幕，并且打印出来。\n\n```ruby\n    danmu_data = @danmu_socket.recv(4000)\n    type = danmu_data[danmu_data.index(\"type@=\")..-3]\n    puts type.gsub('sui','').gsub('@S','/').gsub('@A=',':').gsub('@=',':').split('/')\n```\n\n**后三步，则是 @danmu_socket** 获取弹幕的步骤。\n\n于是，通过这些步骤，就可以完成了简单的 douutv 的和新代码，接下来的步骤就是完善，重构这些代码了。\n\n## 总结\n\n### 1. 痛点一，头疼的过度封装\n\n我们知道，在编写 Ruby 的 Socket Server 和 Client 的时候，非常方便，特别是传输的 socket 消息内容为字符串的时候。\n\n但是，当处理的消息内容不可打印的字符串的时候，必须要转化成字节数组的时候，让我着实混乱了一阵，直到使用了 pack(”c\\*“) 和 unpack(\"c\\*\"), 并且通过 wireshark 抓包验证了自己的发送的数据包和接受的数据包才安心使用 pack 与 unpack。\n\n### 2. 痛点二，至今还没有解决 rtmp 地址的获取\n\n找了很久没有办法解决 rtmp 地址的自动获取：\n\n路径如下\n\nhttp://www.douyutv.com/swf_api/room/301712?cdn=&nofan=yes&_t=24243097&sign=3b2efb130cb25a85e621f477f95c7341\n\n这一处的请求不是 XHR，也就是不是 JS 脚本通过 XMLHttpRequest 异步加载；那么，八成是 flash 通过 http 协议获取的。我估计八成执行逻辑应该是在 flash 之中。\n\n## 代码\n\n核心代码的地址为：\n\n重构版本即将出炉。\n\n还请轻拍。\n\n## 参考链接\n\nPS: 如果有问题可以在下方留言或者发送 email 到 twocucao@gmail.com 给我。\n\n## ChangeLog\n\n2016-02-09 09:01:00 - 重写部分内容。增加 Ruby Socket 部分。\n"},{"tags":["macOS"],"path":"20160201_PC2MAC.md","title":"Windows 迁移到 macOS 的一些经验","slug":"Windows 迁移到 macOS 的一些经验","date":"2016-02-01","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n## 前言\n\n我会想念 Windows 上面的一切，但我选择了 Mac。\n\n从某种程度上讲，我并不是讨厌 Windows。尽管我是一个伪装成、\\*nix 程序员的技术菜鸟。\n\n我还记得高一时候家里给我买的第一台二手电脑，那是一台烂到令人发指的破电脑，你可能见过那种俗称大屁股的电脑，512M 内存，64M 显存。我就在那一台机器上打了仙剑三通关和仙剑四的青鸾峰到寿阳城阶段，千佛寺时候家里电脑实在是烂到令人发指，于是电脑就报废了。后来，家里面换了一台电脑，128 显存，内存 2g 的联想杨天电脑。我就在这一台机器上打了仙剑四的寿阳城之后的剧情。\n\n<!-- more -->\n\n正如你可以看出来的，我并不讨厌 Windows，甚至某种程度上，我非常喜欢 Windows，正是盗版时代风靡全球的 Windows 才给了我电脑的启蒙。\n\n喜欢 Windows 的部分原因也是因为穷，只能用盗版（我当年以为是免费，后来才知道这叫做盗版）。就像当我知道仙剑四团队因为我这样只知道免费的盗版人群解散了以后，心痛不已。自此以后，如果经济上可以，我一定会买正版。倒也不是为了买给别人看，这只是代表我对软件开发者的最崇高的敬意。也是弥补我因为无知犯下的错误的愧疚感。\n\nWindows 对我来说就是启蒙老师。\n\n但 Windows 的种种环境配置，日常使用和我*inux 的技术栈完全不兼容了。从 XP 到 Vista 再到 7 再到 8 再到 10，这种情况依旧没有发生什么本质的变化。这样的我不得不选择模拟、*nix 工具，虚拟机或者双系统。但，模拟的*nix 实在太难用，虚拟机里面的系统用起来根本操作根本就不丝滑，双系统一会切换到 Win，一会切换到 Ubuntu 这种情况简直让我非常的抓狂。*nux 的环境又不能不要，可 Win 的桌面软件实在是难以割舍。\n\n于是，一个切换到 OSX 的想法在我的脑海中不断的浮现。但是正如你所知道的一个很现实的情况：\n\n> 没钱，也不愿意给父母添麻烦。\n\n但\n\n> 幽灵，一个想买 MacBook Pro 的想法，像幽灵一样，在脑海中不断的浮现。\n\n直到前几天才攒够足够的钱买了一台二手 mbp 改装一下 SSD。作为丐帮 Mac 第一新人，进入了 MAC 的世界里。\n\n_对，我受够了 Windows 里面各种奇葩的问题，也受够了 Ubuntu 等 Linux 系统的糟糕的桌面体验。_\n\n对于一个不研究。net 的人来说，Windows 完成了他伟大的启蒙任务。也是时候与你告别了。\n\n只是人总要和以前的一些人和事情不断的做告别，不是吗？\n\n以前看过很多比较浅显的讲解，正是那些讲解，让我逐渐入了门，然后我就不得不与他们做告别。\n\n他们完成了他们伟大的任务，他们的伟大之处永远都在为新手敞开大门，所以，我们成长之后不应该去鄙视那些给你带来进步的事物，而是礼貌的挥挥手向他们告别。\n\n## 开始迁移\n\n那么，依照我丰富的 Windows 使用经验来说，我需要解决的问题就是把原有的 Windows 和 Ubuntu 上的东西搬运到我的新电脑上。\n\n使用电脑 = 软件 + 操作\n学会使用电脑 = 描述问题 + 搜索引擎 + 笔记\n\n### 0. 自带的软件各种 Hack\n\n其实，自带的软件往往有不可忽略的强大之处。比如，Windows 世界里面的 Win+R 按键。\n\n目前来说，发现苹果上面自带软件不错的地方如下：\n\n- 自带软件，苹果的一些应用，itunes，iphoto，isg 等等。使用这些软件简直就是易如反掌。没什么好说，不错的软件就是 spotlight 了，这个软件非常的强大。可以说是进阶版本的 Windows 上面的搜索 +Win+R。但是然并卵，我们用 alfred2 这个神一样的东西，逐渐就把这基本的软件废弃了。我使用的也就是自带的 finder。\n- Mac 上的软件的快捷键可以通过一个叫做 cheatsheet 的的软件进行查看，安装好这个软件，打开一个软件，然后长按 cmd 按键。\n\n#### 0.0 系统设置调整\n\n从 Win 过来人在一些细节操作上与 Mac 的设计有一些不同。这些可以在系统里面进行设置。\n\n比如， 鼠标滚轮调整\n\npreference - mouse - 取消勾选：scroll direction ：natural\n\n#### 0.1 文件的操作\n\nwindows 里面管理文件的东西叫做 explorer.\nmac 里面叫做 finder.\n二者，图形操作上大致相同。但是结合快捷键的操作就不同了。\n\n```\n# cmd 为 command 按键，通常情况下为所有桌面程序通用性的快捷键。\n# ctrl ，通常情况下是针对程序的功能进行加强，并且此功能往往是非 cmd 类（窗口操作，选择，复制粘贴等等）操作。\n# shift 按键通常用于加强操作。一般会让操作更进一步 or 相反操作。\ncmd+tab =~ alt+tab 程序之间的切换\ncmd+` 应用内窗口切换\n\ncmd+h 窗口 hide\ncmd+m 窗口 minimize\ncmd+n 新建窗口\ncmd+o 打开\ncmd+s 保存\ncmd+shift+s 另存为\ncmd+p 打印 print\ncmd+w 关闭\ncmd+q quit\n\ncmd+a select all\ncmd+i show info\ncmd+n create a new folder\ncmd+f search\ncmd+c copy\ncmd+v paste\ncmd+delete  删除选中文件\ncmd+shift+delete 清空回收站\n\ncmd+= 放大\ncmd+- 缩小\ncmd+t 新建选项卡\ncmd+r 刷新\n\ncmd+shift+3 截取整个屏幕\ncmd+shift+4 截取选择区域\ncmd+shift+4+SPACE 截取选择窗口\ncmd+ 鼠标点击 -> 选中不连续文件\ncontrol+ 鼠标点击 -> 相当于 win 中右键点击\n\nfn+left home\nfn+right end\nfn+up pageup\nfn+down pagedown\n```\n\n#### 0.2 Trackpad\n\n到 trackpad 中设置对应鼠标手势\n\n1. 点击\n\n单指点击 - 单击\n单指滑动 - 滑动鼠标光标\n双指点击 - 相当于 Windows 的鼠标右键\n三指点击 - 划词查找\n\n2. 滑动与缩放\n\n双指上下滑动 - 滚动\n双指缩放 - 与 Android 上图片缩放一致\n双指双击 - 只能缩放\n双指旋转 - 旋转\n双指左右滑动 - 应用内切换网页\n双指头从右往左\n三指头左右滑动 - 全屏幕 App 切换\n大拇指和食中无名缩放 - launchpad\n\n### 1. 日常软件\n\n#### 1.1 一些满足日常生活的软件\n\nAlfred - 让你的 spotlight 更上一层楼，程序打开 / 切换、文件搜索、互联网搜索、与其他软件交互的利器。\nweixin，qq - 这是必须的。\nCleanMyMac - 系统清理软件。\n欧陆词典 - 国产词典领域最牛。别说有道词典了好伐。\ncalibre - 电子书必备，下载免费经济学人。\nWiznote - 为知笔记，实在是国产良心之作。可惜，Mac 上面的功能比较少。\nPS，Sketch - P 图必备吧？\nSafari，Chrome+ 大量的插件 - 不多说，Chrome 简直就是我的第二操作系统。那犀利的插件，Get 到痛点的功能，用起来纵享丝滑一般的流畅，都深深的迷住了我。除了吃内存，其他都好。\nPDF reader，ibook - 文档查看必备。\nMS OFFICE，Work 套件：包括 pages, numbers, keynote. 其实 Windows 的生产力之说大抵也就是 Office 系列 VS 系列了，虽然我不喜欢 Office，但是不得不说，Excel 做的真的是世界级的牛。其他，PPT，Word 嘛？反正我不喜欢，奈何别人都用这个。我只好在电脑上安装一份了。\n虚拟机：parallels desktop\n迅雷 本来挺简洁的，最近出来一个商城。哦，看来距离我卸载他的日期已经不多了。\n管理 Android 手机：airdroid 用于管理我的坚果手机。\n写作与编码，Sublime+ 插件，MacVim+ 插件\n邮件：airmail 好简洁，好强大，和 Gmail 简直就是无缝对接嘛。\n思维导图：xmind - 一直在用。依赖 Java 环境。\n解压缩：BetterZip 7z 解压缩 我比较喜欢 7z\n你懂的：shadowsocks 不多说了，看小粉红出墙征战四方寸草不生的优良工具。\n其他系统自带软件\n\n### 2. 开发环境\n\nide 类：xcode 和 xcode-cli 工具（用于安装 homebrew 和 homebrew cask）\n\n#### 2.1 homebrew\n\n少什么？homebrew 一下就好。\n\n如果你想更深一步，那就使用 homebrew cask\n\n#### 2.2 sublime text\n\nsublime text 作为我很长一段时间的主力编辑器，优点如下：\n\n- 快，打开文件比较快。当然，比 notepad++ 要慢\n- 多光标编辑。\n- 强大的插件库\n\n对，加上第三点，sublime 成为了编辑器世界的女神级别人物。哎，想起我对别人大力推荐这个编辑器别人还是一如既往的使用 npp，实在是糟心。\n\n插件库里面的主题我比较喜欢 sodarized\n喜欢的功能性插件为 pretty 系插件，比如，对 json,html,js.css 进行一键格式化。哦，简直帅爆了。\n当然其他能留下深刻印象的就是 lint 系列插件和部分对编辑器的侧边栏，右键菜单，以及对应语言的库进行补充的插件了。\n\n现在继续使用这一款软件的原因也是如此。\n\n#### 2.3 macvim + spf13-vim\n\n我对计算机上古时代的前辈们总是有很崇高的敬意。这在我是用来了 Vim 以后才逐渐有这种想法。\n\n对，Vim 真的很神奇。但是 Vim 是我见过的为数不多的使用难度超越了我认识到的所有软件的软件。之前排名在 top 1 的应该是 Windows 上面的 Totalcmd。\n\n出于 Vim 及其陡峭的学习路径，我认为 Vim 本身适合可以盲打，并且是键盘流爱好者的情况下再学习。否则，学习效率会极其的低下。为什么我知道？一把辛酸泪。\n\n在这个时代，最宝贵的就是有用的信息，对，我遇到了 SPF13Vim 这个已经配置好的 VIm 版本。并且从中学习到了一些奇技淫巧。\n\n现在基本上是离不开 Vim 了。甚至面对没有 Vim 类型操作的编辑器或者浏览器的时候，简直无法忍受。\n\n尽管现在我还是一个 Vim 菜鸟。有机会我会整理好自己的 Vim 配置，放在 github 上面。\n\nVim 使用一定要改按键！！！\n\nCapsLock 按键没有什么用，改成 Escape 按键或者改成 Ctrl 按键，推荐改成 Ctrl，因为 ESC 除了 Vim 里面使用的比较少，但是使用 Ctrl 的场景就比较多了（Vim 中 ESC 可以使用 Ctrl+\\『代替，而且不需要使用第三方工具），这样让小拇指很舒服。\n\n#### 2.4 Chrome\n\n由于一些众所周知，或者你不知道我也懒得告诉你的原因。我们比较信赖国外的好的产品。\n\nChrome 就是这样的产品。\n\n我以前的文章也写过，只是由于硬盘发生了一次数据丢失事件，关于 chrome 的笔记都已经丢掉了，我就再也没有写过 chrome 的那些牛的要死的功能。\n\n但是我还是要推荐一些我喜欢的插件。\n\nadblock - 去广告标准配置了吧\nautoPatchWork - 自动拼接下一页到本页\ncapture，explain and send screenshots - 截图\ncssviewer - 查看 css 的工具\nDream Afar New Tab - 美化新标签页面必备\njson editor - 格式化 json 专用\nisometric contribution - 其实也就是美化 github 上面提交的工具\nOne Click extensions Manager - 由于 chrome 的标签数量惊人，所以有的时候为了提升速度还是禁用掉一些比较好。\nPocket - read it later PS：虽然我自从用了为知笔记以后就不用 pocket 了。但 pocket 真的值得一用\nVimium - 快速浏览网页的神器\nWeb Timer - 记录花在每个站点的时间。\nWiznote WebCliper - Pocket 的替代品\nOctotree - 如果你玩 github 没装这个插件，是时候使用这个插件然后感叹时光一去永不回了。\nSwitchyOMega - 你懂得\n\n#### 2.5 Lang 环境\n\nLang 环境，顾名思义，就是各种语言的环境。\n\n我们程序员需要懂和计算机交流的本事，所以，我们需要学很多的语言。但，问题也就因此而来。选择什么样的软件来管理不同的软件环境呢？如果是 Ruby 环境，我们又怎么配置 Ruby 不同版本呢？\n\n计算机世界的铁律：\n\n> 只要有树叶飞舞的地方，火就会燃烧\n\n额，等等，说串场了\n\n> 只要有痛点，就有解决痛点的工具。\n\nJava 这个需要切换版本的要求比较低。无所谓。何况，已经很久没有写 Java 了。 我一般情况下使用的是 Java8\nrvm ruby 社区的人都喜欢使用最新最潮的技术，所以，切换版本这种事情必须要做，rbenv 和 rvm 都是非常有用 ruby 版本管理器。我喜欢 rvm。\nnvm nodejs 比较火，虽然我对 nodejs 并不是很感冒，但是我不得不承认，有些人写出来的 nodejs 工具实在是方便的要死。比如，gitbook-cli，hexo-cli，二者都是记录自己的笔记的好东西。\nLang 对于 Python，我选择了 anaconda，anaconda 为特殊的 Python 分发包。里面的库比较全面，不需要我特地为一个包找教程来安装。\n\n#### 2.6 终端\n\n首先，我们对终端的认识可能还停留在 unix 机器或者 ubuntu 桌面进不了的时代。Mac 上面 iterm2 作为一个终端模拟器，则是做到了同类中的最强者。好用到想让人哭。\n\nshell 一般情况下使用的 bash，但是那是对运维人员来说的，我们开发者使用的是 zsh。配置 zsh 的文件使用是 OhMyZsh.\n\n好用到想哭。\n\n## 结束语\n\n从我的角度来看 Win 和 Mac 的好于不好\n\nWin 的好在于系统优良的兼容性，以及入门就可以上手的强大的操作性。由于出自于什么都爱做的微软公司，从整体来说，VS，.NET, 游戏性，兼容性，性能，新手上手速度来说，都是遥遥领先 Mac 的。\n也可惜了，微软的战线实在是拉的太长，什么都想做，什么都想垄断。于是，与之服务密切相关的公司也就受到了 MS 的牵制。这对大公司来说，几乎是不能够忍受的行为。于是硅谷的公司使用微软服务的也就接近 5%（可能有误差）。并且，糟糕的终端环境（DOS）和无法与、*nux 世界的脚本友好相处使得系统的可定制性和进阶操作性大大降低。\n虽然有 Everything，TotalCMD，AHK 这种神级辅助工具可以满足定制要求。但由于过高的学习成本（AHK 语言真的很混乱啊，TC 实在是太难用了）但也无法满足、*nux 程序员的要求。这就是我不得不切换到 Mac 上面的理由。\n\nMac 的好在于终端和美观的图形的结合。也就是开发基于、\\*nux 应用的非常方便以及非常容易与脚本文件配合出强大的组合技能，反观 Win 上，则这种组合技能则在环境配置上和操作流畅度上差了很多。\n缺点也是相当容易看出来的 -- 娱乐项目实在是少的要死。再者说，我们也不需要娱乐性那么强的软件，不是么？\n\n哦，终于集齐了 PC，Linux，Mac 的配置文章\n\n[关于 Ubuntu 我的回答](https://www.zhihu.com/question/30816866/answer/59415036)\n\n[关于 Win10 我的回答](https://www.zhihu.com/question/32129337/answer/59379401)\n\n就酱紫。\n\n## 更新\n\n- 2016-02-03 : 更新 Trackpad 部分，修改部分文字\n- 2016-02-07 : 重写快捷键部分，将快捷键按照程序划分。\n- 2017-04-01 : 重写碎碎念部分。\n- 2017-05-01 : 已经更换最新款 Macbook Pro, 算是实现了一个小目标吧。\n"},{"tags":["Windows"],"path":"20150614_如何优雅的使用Windows10.md","title":"如何优雅的使用 Windows 10","slug":"如何优雅的使用 Windows 10","date":"2015-06-14","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"\n# 如何优雅的使用 Windows 10\n\n## 0x00. 前言\n\n刚开始 Win10 发布没有多久的时候我就写了这篇回答，放在知乎上，后来又搬运到 jianshu 上，现在搬运到自己的博客上，也算是落叶归根。\n\n> 已经过了折腾的年龄，答案仅仅从提升效率方面来说，是否优雅就看诸位的审美了。\n\n本文目录\n\n1. 文件夹与文件一定要分类命名好。\n2. Win10 自带功能怎样提升效率。\n\n- 2.1 快捷键\n- 2.2  触摸板手势\n- 2.3 Win+R\n\n3. 非 Windows 自带的必备的提升效率，节省时间的软件。\n\n- 3.1 文档，图片，文本，以及通用文件管理器\n- 3.2 Everything is OK\n- 3.3 Chrome （Google 出品，必属精品）\n- 3.4 阅读方面 calibre ， 欧路词典\n- 3.5 笔记软件 xmind，wiznote\n- 3.6 播放器\n- 3.7 其他想到再补充\n  4.  不写点代码优化一下工作流程，你都不好意思说自己逼格高。\n- 4.1 autohotkey\n\n## 0x01. 文件命名\n\n> 文件夹与文件一定要分类命名好\n\n贴上我的几张图来看一下我的文件夹命名：\n\n一级文件夹如下：\n![](http://upload-images.jianshu.io/upload_images/52890-b6a5322beca48d2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n二级文件夹如下：\n![](http://upload-images.jianshu.io/upload_images/52890-656d90e16abaff66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n三级或者三级以上文件夹\n\n![](http://upload-images.jianshu.io/upload_images/52890-bdf7349fccedda52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n文件命名规范（因为涉及到后面使用 Everything，所以我们的命名尽量追求便于搜索）\n\n举个例子，对于读书笔记 ：读书笔记、\\_设计模式、\\_20150303_v2.1.xmind\n\n对于照片这种文件比较多的，优先命名文件夹，其次按照地址人物日期命名，比如：大明湖胖、\\_夏雨荷、\\_20150101\n\n> 无需刻意追求命名，方便搜索，方便管理就好。\n\n不妨参考下面文章：\n\n[电脑上的文件夹该如何命名（整理）才能做到很久都不用重新整理的那种？ - 文件整理](http://www.zhihu.com/question/21537488)\n\n嗯这样你在搜索笔记的时候在 Everything 里面只需要键入 2015 笔记就可以查看 2015 笔记文件。\n\n是不是很方便？\n\n![](http://upload-images.jianshu.io/upload_images/52890-f4a815755900d627.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/52890-1fb3ac3766e59044.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当然桌面上尽量少放或者不放文件夹，我的桌面上仅仅有一个链接到 OneDrive 里面的 TEMP 文件夹的快捷方式，用于存放临时没有整理的文件。\n\n![](http://upload-images.jianshu.io/upload_images/52890-be22e9252b149d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 0x02. Win10 自带功能怎样提升效率\n\n- 2.1 快捷键其他答主说的都可以，你就直接参考他们的答案中的关于快捷键。我仅仅说一些重点快捷键。Win+ 数字键 把常用的软件附在任务栏上。建议四个以内，方便单手操作。Win+X Alt+tab 切换窗口 WIn+R 运行\n\n- 2.2 触摸板手势参考最高票的答案。虽然我觉得增加的那么多的触摸手势比较鸡肋。\n\n- 2.3 Win+RWin+R 主要用于启动一些程序或者一些 DOS 小命令。\n\n![](http://upload-images.jianshu.io/upload_images/52890-d39ea3f078f1d800.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我将所有的便携与非便携软件的快捷方式放在这里并且配置环境变量。比如，我需要启动为知笔记，我就仅仅需要闭上眼睛输入 Win+R + wz +<Enter>\n\n其他软件同理。\n\n```python\n# sublime text 打开需要输入 \nWin+R + st +<Enter>\n# 欧路词典 打开需要输入 \nWin+R + ol +<Enter>\n# 这里省去若干软件打开方式。\n```\n\n关于 Win+R 你可以参考善用佳软  [最绿色最高效，用 win+r 启动常用程序和文档](http://xbeta.info/win-run.htm)  的介绍。\n\n## 0x03. 非 Windows 自带的必备软件\n\n3. 非 Windows 自带的必备的提升效率，节省时间的软件。\n\n- 3.1 文档，图片，文本，以及通用文件管理器如果文件多，就一定需要一个用于管理这种类型文件的管理器 - 托马斯。电脑达人\n\n图片管理用 Picasa\n\n文本管理直接使用笔记软件比如为知笔记，或者印象笔记。\n\n![](http://upload-images.jianshu.io/upload_images/52890-efe86c9e4bd48b95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n文件管理进阶的话可以使用 totalcmd，不过学习路线比较陡峭，没有足够的需求，不要搞 TC.\n\n用 Everything。或者 listary\n\n- 3.2 Everything is OK\n\n无坚不摧，为快不破。 everything 是搜索效率最快的软件。没有之一。合理的命名可以为你的生活节省一半找资料的时间。\n\n- 3.3 Chrome （Google 出品，必属精品）\n\n浏览器本身速度快，配合强大的插件库。让你在实力派装逼的道路上越走越远\n\n这玩意的强大在哪到处都有，直接在知乎上搜一下就好了。\n\n- 3.4 阅读方面 calibre ， 欧路词典，\n\ncalibre 主要是用来看经济学人，老乡恶魔的奶爸推荐。\n\n欧路词典可以外挂其他的开源词库，查词速度超级快。\n\n- 3.5 笔记软件 xmind，wiznote 用于记录笔记。前者用于梳理思路，把一本书读薄，后者用于将自己的知识体系梳理一遍，把书读厚。消化资料。\n\n- 3.6 播放器\n\nQQ 影音 -- 满足普通播放需求\n\nkmplayer -- 用于视频截图\n\nfoobar2000 -- 逼格提升必备\n\n![](http://upload-images.jianshu.io/upload_images/52890-1d8bc57d69948d60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n网易云音乐 -- 这货真的不错。\n\n- 3.7 其他想到再补充\n\n## 0x04.  不写点代码优化一下工作流程，你都不好意思说自己逼格高。\n\n不写点代码优化一下工作流程，你都不好意思说自己逼格高。- autohotkey\n\n可以针对快捷键进行编程。有了它，妈妈再也不担心我操作速度慢的要死了。\n\n有如下场景：一大段文字中有一个网址，你需要访问它，我的解决方法就是选中那些文字，然后一个 Win+b，直接打开 chrome 进行搜索，如果文字中没有网址，那么对选中文字进行百度。同理可以推淘宝，京东 github 等等。或者这样一个场景，你需要大量的文本编辑，但是上下左右离自己的工作区比较远，你可以小拇指按住大写锁定按键，然后使用 HJKL 进行移动。\n\n教程参考 [AutoHotkey 之美 - 知乎专栏](http://zhuanlan.zhihu.com/autohotkey)\n\n新手可以先拿我搜刮整理的 AHK 代码看看。[twocucao/ChortHotKey · GitHub](https://github.com/twocucao/ChortHotKey)\n\nPS：我上面提到的软件几乎都是神级软件，都是入门容易精通难的深坑，想调教好也不是想象中呢么简单的，但，书到用时方恨少，你可以先挑一些使用。如果你以后有不少的文件需要管理，在未来，你一定会用到。\n\n至于哪些图标怎么搞定？步骤如下：制作出那样的图片文件 （PS）\n转换成 ico 文件（Iconmaster），把 ico 文件拷贝到指定文件夹内部（这步是为了方便修改文件夹切换电脑带来的文件夹图标恢复原样）\nico 设置到文件夹上 （修改文件夹内部的 desktop.ini 文件）\n\n附上制作的 PSD 文件，ICONMASTER 以及一个样板文件夹（注意要开启显示系统文件以及隐藏文件两个选项，然后查看样板文件夹中的 desktop.ini 以及 ico 文件。修改的话，也就是修改 desktop.ini 文件里面的对应文件名称就好了）\n\n链接： [百度云地址](http://pan.baidu.com/s/1qWyx6oc)  密码：g9up\n\nfoobar 链接：[百度云地址](http://pan.baidu.com/s/1e7xZC)  密码：e0as\n\n文件图标受此答案启发：[如何整理电脑文件夹？ - 计算机](http://www.zhihu.com/question/19901022)\n\n> 2016-01-04 已经更换 Macbook Pro, 依然挂念 Windows.\n> 2017-05-01 21:42:00 已经更换 2016 年 Macbook Pro With Multi-Touchbar, 再无挂念 Windows.\n\n## 0x05. 后续\n\n所谓用 Windows 还是 MacOS 都是一种选择而已，孰高孰下谁知道呢。并不是说用了一个操作系统，用了某个软件，就会显得自己多么高明，如果不能为自己的日常工作提高效率，让自己节省下来的时间留给自己，那又有什么意义呢？\n\n当我在 Windows 上的时候一味追求 APM, 即高效的操作，但其实最高效的还是自己的思路清晰，想好了再动手。\n\n> 谋定而后动\n\n如是而已。\n\n> 抓到老鼠的猫才是好猫呀！\n\nChangeLog:\n\n- 2017-03-08 09:32:15 整理知乎回答，搬运到博客上。\n- 2017-05-01 09:32:15 补充现在使用的电脑信息\n- 2017-06-10 09:32:15 重新排版，增加后续章节。\n"},{"tags":["Google"],"path":"20150504_GoogleTips.md","title":"搜索引擎的一些技巧","slug":"搜索引擎的一些技巧","date":"2015-05-04","category":"善用佳软","lastMod":"2020-01-01","description":"搜索引擎的一些技巧","thumbnail":"","content":"\n# Google Tips\n\n## 0x01 Google 搜索引擎技巧\n\n```bash\nintitle: 古文观止 site: pan.baidu.com\n+ or\nlink:http://www.reanren.com\ninurl\n\"\"\n『长城*』\n```\n\n## 0x02 Baidu 搜索引擎技巧\n\n```bash\nsite:\n```\n\n---\n\nChangeLog:\n\n- **2016-12-22** 几乎重修文字，修改标题为 搜索引擎的一些技巧。\n"},{"tags":["编辑器"],"path":"20150227_编辑器Sublime.md","title":"Sublime Text","slug":"Sublime Text","date":"2014-10-25","category":"善用佳软","lastMod":"2014-10-25","description":"未描述","thumbnail":"","content":"\n# Sublime Text\n\n> NOTE: 2021 年,已经全面转 vscode\n\n这个 Sublime 究竟好在哪里？\n\n- 方便的 Vim 模式。\n- 各种语言特性支持。\n- 强大的社区支持。插件教程，balbalbala\n- 长的好看，而且能干。\n\n## 0x01 最佳实践\n\n### 下载安装（建议便携版本）\n\nhttp://www.sublimetext.com/3\n\n### 安装 Package Control 用于管理插件\n\n步骤：view showconsole 输入下面代码\n\n```python\nimport urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n重启，然后你就可以正常使用 Package Control 了\n\n## 0x02 基本使用方法之编辑功能\n\n### 命令面板\n\n^+p\n\nctrl+shift+p 打开的是命令面板\n命令面板主要内容分为四块。\n\n- 设置\n- 改变语法\n- 来自插件的命令\n\n### Go to Anything\n\n^p 打开的是切换面板\n直接输入文件名可以切换文件\n可以直接预览\n输入 @ 可以查看按照 Header 查看 (Markdown 语法）, 代码中按照函数来查找\n输入 # 可以查看变量\n\n#### 同一页面搜索\n\n^r\n\n#### 整个项目搜索\n\nctrl + shift + r\n\n#### Toggle Sidebar\n\nctrl+k Ctrl+b\n\n#### 切换面板\n\nalt + shift + 1 to 4\n\n#### 直达某行\n\nctrl+g\n\n#### 移动行\n\nctrl+shift+ 上下左右。\n\n## 0x03 结论一\n\n嘿嘿，这样看上去你基本的编辑任务都是可以比较出色完成的吧？\n好，我们依然可以看出来，这款编辑器的的确确足够日常编辑使用了，但是，还是并不代表有一定的优越性啊？\n\n你说，老师，能不能再给力一点啊？\n![](http://imgsrc.baidu.com/forum/w%3D580/sign=87eeeefcd688d43ff0a991fa4d1cd2aa/1f91e058ccbf6c81fbe76561bc3eb13532fa407e.jpg)\n\n## 0x04 深入研究其中的编辑功能\n\n把上面的一些功能进行系统性梳理。\n已经有前辈完成了，我就直接贴上他的地址了。\n\nhttp://feliving.github.io/Sublime-Text-3-Documentation/index.html\n\n## 0x05 结论二，确实强大。但是...\n\n你说，老师，能不能再给力一点啊？\n![](http://imgsrc.baidu.com/forum/w%3D580/sign=87eeeefcd688d43ff0a991fa4d1cd2aa/1f91e058ccbf6c81fbe76561bc3eb13532fa407e.jpg)\n..........................\n...........................\n..........................\n.......................\n.........................\n.........................\n\n当然可以！!\n\n## 0x06 插件，让 sublime 长出逆风飞翔的翅膀。\n\nsublime 的功能已经是比较强大了。可是还有什么地方可以优化的吗？\n加上插件，可以增强已经有的功能，可以扩展越来没有的功能。下面请看好！\n\n### 用 Vim 强化编辑功能。\n\n在编辑强化方面，Sublime 自带了一个非常好用的模式，叫做 Vintage mode\n这个模式有一点点的小问题，就是不方便，我们不妨使用另一个小插件来替换它。\n\nhttps://github.com/guillermooo/Vintageous\n\nctrl+shift+p 输入 install 输入{enter} 输入 Vintageous{Enter}\n\n安装完毕，你就可以在 Sublime 上面比较方便的使用 vim 编辑方式了。\n\n### 能不能好看一点？\n\nOf course!\n\n来来来，戳这里戳这里\n\nhttps://scotch.io/bar-talk/the-complete-visual-guide-to-sublime-text-3-themes-color-schemes-and-cool-features\n\n### 新建文件可以方便一点吗？\n\n可以，AdvancedNewFile\n你只需要 ctrl+alt+n 就可以使用这个插件。\n\n输入文件名可以直接在当前目录下新建。\n你也可以使用相对路径比如 ../ 或者 ../\\_drafts/AndroidShow\n是不是非常方便？\n\n### 侧边栏好像右键菜单好少，能不能再给力一点啊\n\n有，SidebarEnhancement\n\n### 只能补全功能不够用，能不能再给力一点啊\n\n好，SublimeCodeIntel\n\n### 我有强迫症，对齐功能不够强大，能不能再给力一点啊\n\n好，ALignment\n\n### 写注释可以方便一些，就像 Intellij IDEA 那样写注释吗？\n\n可以 Doc Blockr\n\n### 前端工程师要那些插件吗？\n\nEmmet\nHTML-CSS-JS\n等等\n\n### 我平时用 markdown 写 BLOG, 有什么比较方便的东西吗？\n\nmarkdown\n\n- extended\n- preview\n- light\n- toc\n\n## 0x07 结论三，老师真的很好用啊。但是...\n\n你说，老师，能不能再给力一点啊？\n![](http://imgsrc.baidu.com/forum/w%3D580/sign=87eeeefcd688d43ff0a991fa4d1cd2aa/1f91e058ccbf6c81fbe76561bc3eb13532fa407e.jpg)\n..........................\n...........................\n..........................\n.......................\n.........................\n..........................\n...........................\n..........................\n.......................\n.........................\n..........................\n...........................\n..........................\n.......................\n.........................\n..........................\n...........................\n..........................\n.......................\n.........................\n..........................\n...........................\n..........................\n.......................\n.........................\n\n特码的，你是来编程的还是来配置编辑器的啊！\n等你有需求了再去寻找更好的配置方案 OK?\n\n## 0xEE 其他链接\n\n这个 BLog 分享了不少关于 Sublime 的干货\n\nhttps://scotch.io/\n\n这个视频链接讲解了一些关于 Sublime 的一些小知识。\n\nhttp://www.imooc.com/learn/40\n\nsublime 非官方资源\n\nhttp://docs.sublimetext.info/en/latest/index.html\n\n---\n\nChangeLog:\n\n- **2016-12-05** 重修文字，已转投 Vim. sublime 作为非主力编辑器。\n- **2016 中期** 重修文字，声明已转投 Vim. sublime 作为非主力编辑器。\n- **2017 前期** 重修文字，声明已转投 Spacemacs.\n- **2020 后期** 重修文字，重回 Vim.\n"}],"total":19}},"__N_SSG":true}