{"pageProps":{"post":{"tags":["Python"],"path":"20160315_如何发布一个Py命令行工具.md","title":"如何发布一个 Python 命令行工具","slug":"如何发布一个 Python 命令行工具","date":"2016-03-15","category":"Python","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h1 id=\"如何发布一个-python-命令行工具\"><a class=\"v-toc-item\" href=\"#如何发布一个-python-命令行工具\">#</a> 如何发布一个 Python 命令行工具</h1>\n<h2 id=\"0x01-本文简介\"><a class=\"v-toc-item\" href=\"#0x01-本文简介\">#</a> 0x01 本文简介</h2>\n<p>上次写的一个终端里面斗鱼 TV 弹幕 Python 版本和 Ruby 版本，并且发布到 PIP 和 RubyGems 上面。在发布 PIP 包的时候，居然 Google 不到一篇可以非常好的讲解这个流程的文章。于是整理这篇文章，并且方便后来自己检索，并且方便他人找资料。</p>\n<p>自推荐下依照本文定制的命令行工具 <a href=\"http://danmu.fm\">danmu.fm</a> 的 github 地址：</p>\n<p><a href=\"https://github.com/twocucao/danmu.fm\">https://github.com/twocucao/danmu.fm</a></p>\n<p>本文的目的也是非常简单：</p>\n<blockquote>\n<p>**写一个 Python 命令行工具，并且发布到 PIP 上面.**并且在这个过程中给出我自己的一些思考。</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"0x02-如何分解这个发布任务\"><a class=\"v-toc-item\" href=\"#0x02-如何分解这个发布任务\">#</a> 0x02 如何分解这个发布任务？</h2>\n<p>只需要进行如下的两个步骤便可以：</p>\n<ul>\n<li>\n<ol>\n<li>写好一个 Python 命令行工具。</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>发布它。</li>\n</ol>\n</li>\n</ul>\n<p>当然，这样不够细致。再细分一下。</p>\n<ul>\n<li>\n<ol>\n<li>写好一个 Python 命令行工具</li>\n</ol>\n<ul>\n<li>1.1. 命令行的特点，以及 Python 的如何编写命令行</li>\n<li>1.2. 如何组织代码结构。</li>\n</ul>\n</li>\n<li>\n<ol start=\"2\">\n<li>发布</li>\n</ol>\n</li>\n<li>2.1. 注册 pypi 账户\n<ul>\n<li>2.2. 注册在账户下面注册 Python 包</li>\n<li>2.3. 上传<strong>打包</strong>好的 Python 命令行工具。</li>\n</ul>\n</li>\n<li>\n<ol start=\"3\">\n<li>完善代码</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"0x03-写好一个-python-命令行工具\"><a class=\"v-toc-item\" href=\"#0x03-写好一个-python-命令行工具\">#</a> 0x03 写好一个 Python 命令行工具</h2>\n<p>写好一个命令行工具首先要知道命令行工具是什么？</p>\n<blockquote>\n<p>在我看来，命令行工具就是一种完成某种类型的任务的终端程序。</p>\n</blockquote>\n<p>也就是基本上没有什么用户界面的程序。</p>\n<p>由于基本上没有什么用户界面，所以导致单个命令行的交互能力及其低下。但这种低下的交互性对于一些固定工作而言，简直就是最灵活的工具。只需要输入一些命令便可以完成某种类型的工作。实在是方便的很。</p>\n<p>所以，某种程度上，终端程序低交互的缺点反而成了优点。</p>\n<h3 id=\"11python-的如何编写一个简单的命令行\"><a class=\"v-toc-item\" href=\"#11python-的如何编写一个简单的命令行\">#</a> 1.1.Python 的如何编写一个简单的命令行</h3>\n<p>对于 Python 和命令行交互，我们很容易想出一个比较方便的方案。</p>\n<p>sys.argv 就是这样的嘛！</p>\n<p>我们很容易这样写代码。</p>\n<pre><code class=\"language-bash\"> python testargv<span class=\"token punctuation\">.</span>py thisisaargv1\n</code></pre>\n<p>甚至我们也可以这样写命令行，</p>\n<pre><code class=\"language-bash\"> python testargv<span class=\"token punctuation\">.</span>py thisisaargv1 <span class=\"token operator\">-</span>d <span class=\"token operator\">-</span>f <span class=\"token number\">0</span>\n</code></pre>\n<p>那么，这样写的后果就是，不方便解析出（不是不能，是不方便） -d -f 0 以及 thisisaargv1.</p>\n<p>不信的话，你解析一个下面场景的命令行试试，</p>\n<pre><code class=\"language-bash\"># 用户可能这样输入\ndanmu<span class=\"token punctuation\">.</span>fm http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>douyutv<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>xiaocang <span class=\"token operator\">-</span>q <span class=\"token number\">1</span> <span class=\"token operator\">-</span>v <span class=\"token number\">2</span>\ndanmu<span class=\"token punctuation\">.</span>fm <span class=\"token operator\">-</span>q <span class=\"token number\">1</span> <span class=\"token operator\">-</span>v <span class=\"token number\">2</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>douyutv<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>xiaocang\n# 当然，肯定还有漏写啦，等等，你得需要转类型，增加各种 blablabla 的描述吧，添加默认的参数值吧。\n</code></pre>\n<p>于是 Python 就提供了一个非常好用的模块可以使用。叫做 argparse.</p>\n<p>上面的描述就变成了这个样子</p>\n<pre><code class=\"language-python\"><span class=\"token keyword\">import</span> argparse\n\n<span class=\"token constant\">APP_DESC</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\"\n这就是描述\n<span class=\"token string\">\"\"</span>\"\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token constant\">APP_DESC</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n    sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--help'</span><span class=\"token punctuation\">)</span>\nparser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span><span class=\"token function\">ArgumentParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span><span class=\"token function\">add_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-q'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--quality'</span><span class=\"token punctuation\">,</span>type<span class=\"token operator\">=</span>int<span class=\"token punctuation\">,</span><span class=\"token keyword\">default</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>help<span class=\"token operator\">=</span><span class=\"token string\">\"download video quality : 1 for the standard-definition; 3 for the super-definition\"</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span><span class=\"token function\">add_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-v'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--verbose'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>help<span class=\"token operator\">=</span><span class=\"token string\">\"print more debuging information\"</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span><span class=\"token function\">add_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-s'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--store'</span><span class=\"token punctuation\">,</span>help<span class=\"token operator\">=</span><span class=\"token string\">\"保存流媒体文件到指定位置\"</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span><span class=\"token function\">add_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--config'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">default</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>help<span class=\"token operator\">=</span><span class=\"token string\">\"读取~/.danmu.fm 配置，请~/.danmu.fm 指定数据库\"</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span><span class=\"token function\">add_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">,</span>metavar<span class=\"token operator\">=</span><span class=\"token string\">'URL'</span><span class=\"token punctuation\">,</span>nargs<span class=\"token operator\">=</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> help<span class=\"token operator\">=</span><span class=\"token string\">\"zhubo page URL (http://www.douyutv.com/*/)\"</span><span class=\"token punctuation\">)</span>\nargs <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parse_args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n# 获取对应参数只需要 args<span class=\"token punctuation\">.</span>quality<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span>url 之类。\nurl <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n#其他执行逻辑\n</code></pre>\n<p>保存为 <a href=\"http://danmu.py\">danmu.py</a></p>\n<p>这样就可以执行命令</p>\n<pre><code class=\"language-bash\">python danmu<span class=\"token punctuation\">.</span>py http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>douyutv<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>xiaocang <span class=\"token operator\">-</span>q <span class=\"token number\">1</span> <span class=\"token operator\">-</span>v <span class=\"token number\">2</span>\n</code></pre>\n<p>通过 args 就可以获取参数，然后进行终端程序的参数初始化。</p>\n<p>可是这和我们的要求还是不同嘛，我们不想多写 Python XXX, 我们想直接 XXX. 就像这样。</p>\n<pre><code class=\"language-bash\">danmu<span class=\"token punctuation\">.</span>fm <span class=\"token operator\">-</span>q <span class=\"token number\">1</span> <span class=\"token operator\">-</span>v <span class=\"token number\">2</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>douyutv<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>xiaocang\n</code></pre>\n<p>不急，下面就是了。</p>\n<h3 id=\"12-如何组织代码结构\"><a class=\"v-toc-item\" href=\"#12-如何组织代码结构\">#</a> 1.2. 如何组织代码结构。</h3>\n<p>于是，现在就要开始组织代码结构了。</p>\n<p>我们在最终的代码目录大概是这样的。</p>\n<pre><code class=\"language-bash\">danmu<span class=\"token punctuation\">.</span>fm\n├── <span class=\"token constant\">README</span><span class=\"token punctuation\">.</span>md\n├── danmufm\n│   ├── __init__<span class=\"token punctuation\">.</span>py\n│   ├── client\n│   │   ├── __init__<span class=\"token punctuation\">.</span>py\n│   │   ├── __init__<span class=\"token punctuation\">.</span>pyc\n│   │   ├── douyu_client<span class=\"token punctuation\">.</span>py\n│   │   └── douyu_danmu_client<span class=\"token punctuation\">.</span>py\n│   ├── danmu<span class=\"token punctuation\">.</span>py\n│   ├── misc\n│   │   ├── __init__<span class=\"token punctuation\">.</span>py\n│   │   ├── color_printer<span class=\"token punctuation\">.</span>py\n│   │   ├── downloaders<span class=\"token punctuation\">.</span>py\n│   │   └── player<span class=\"token punctuation\">.</span>py\n│   └── model\n│       ├── __init__<span class=\"token punctuation\">.</span>py\n│       └── douyu_msg<span class=\"token punctuation\">.</span>py\n├── docs\n├── setup<span class=\"token punctuation\">.</span>cfg\n├── setup<span class=\"token punctuation\">.</span>py\n├── sh<span class=\"token punctuation\">.</span>py\n└── tests\n</code></pre>\n<p>这就是我上次写的 <a href=\"http://danmu.fm\">danmu.fm</a> 的代码目录。</p>\n<p>聪明的你这时候你注意到了：</p>\n<ol>\n<li>主要的程序不是放在根目录下面，而是放在第二目录 danmufm 下面。</li>\n<li>setup.cfg 是什么鬼东西</li>\n<li><a href=\"http://setup.py\">setup.py</a> 是什么鬼东西</li>\n</ol>\n<p>对于上面几点，我们分别进行解释</p>\n<h3 id=\"121-为什么主要程序在第二目录下\"><a class=\"v-toc-item\" href=\"#121-为什么主要程序在第二目录下\">#</a> 1.2.1 为什么主要程序在第二目录下</h3>\n<p>为了把主要的程序分离出来，放在第二目录下面，这样的待会打包以后多出很多文件夹就不会对源码造成干扰。</p>\n<p>当然，由于把程序放在了第二目录下面，所以，脚本里面的 from import 语句应该使用相对路径导入。</p>\n<p>相对路径导入的的时候需要注意运行的时候使用如下命令</p>\n<pre><code class=\"language-bash\">python3 <span class=\"token operator\">-</span>m danmufm<span class=\"token punctuation\">.</span>danmu <span class=\"token punctuation\">[</span>xxxx<span class=\"token punctuation\">]</span>\n</code></pre>\n<h3 id=\"122-setupcfg\"><a class=\"v-toc-item\" href=\"#122-setupcfg\">#</a> 1.2.2 setup.cfg</h3>\n<p>填写如下内容即可。</p>\n<pre><code>[metadata]\ndescription-file = README.md\n</code></pre>\n<p>然后去写 Markdown 的 Readme 就好了。</p>\n<h3 id=\"123-setuppy\"><a class=\"v-toc-item\" href=\"#123-setuppy\">#</a> 1.2.3 <a href=\"http://setup.py\">setup.py</a></h3>\n<p>这个是重头戏了。</p>\n<p>setup 这个 py 文件就是打包配置文件。对这个程序是谁的，有什么依赖，入口是什么，等等等等的配置。</p>\n<pre><code class=\"language-python\">#<span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token operator\">-</span> encoding<span class=\"token operator\">:</span> <span class=\"token constant\">UTF</span><span class=\"token operator\">-</span><span class=\"token number\">8</span> <span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token operator\">-</span>\nfrom setuptools <span class=\"token keyword\">import</span> setup<span class=\"token punctuation\">,</span> find_packages\n<span class=\"token string\">\"\"</span>\"\n打包的用的 setup 必须引入，\n<span class=\"token string\">\"\"</span>\"\n\n<span class=\"token constant\">VERSION</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0.1.1'</span>\n\n<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'danmu.fm'</span><span class=\"token punctuation\">,</span>\n      version<span class=\"token operator\">=</span><span class=\"token constant\">VERSION</span><span class=\"token punctuation\">,</span>\n      description<span class=\"token operator\">=</span><span class=\"token string\">\"a tiny and smart cli player of douyutv,ximalayad,anmu based on Python\"</span><span class=\"token punctuation\">,</span>\n      long_description<span class=\"token operator\">=</span><span class=\"token string\">'just enjoy'</span><span class=\"token punctuation\">,</span>\n      classifiers<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> # Get strings from http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>pypi<span class=\"token punctuation\">.</span>python<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>pypi<span class=\"token operator\">?</span><span class=\"token operator\">%</span><span class=\"token number\">3</span>Aaction<span class=\"token operator\">=</span>list_classifiers\n      keywords<span class=\"token operator\">=</span><span class=\"token string\">'python douyu danmu danmu.fm terminal'</span><span class=\"token punctuation\">,</span>\n      author<span class=\"token operator\">=</span><span class=\"token string\">'twocucao'</span><span class=\"token punctuation\">,</span>\n      author_email<span class=\"token operator\">=</span><span class=\"token string\">'twocucao@gmail.com'</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token operator\">=</span><span class=\"token string\">'https://github.com/twocucao/doumu.fm'</span><span class=\"token punctuation\">,</span>\n      license<span class=\"token operator\">=</span><span class=\"token string\">'MIT'</span><span class=\"token punctuation\">,</span>\n      packages<span class=\"token operator\">=</span><span class=\"token function\">find_packages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      include_package_data<span class=\"token operator\">=</span>True<span class=\"token punctuation\">,</span>\n      zip_safe<span class=\"token operator\">=</span>True<span class=\"token punctuation\">,</span>\n      install_requires<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'requests'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      entry_points<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'console_scripts'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'danmu.fm = danmufm.danmu:main'</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>官方有 distutils 这个包管理器工具，设置也非常的简单，只是，它不支持 entry_points 属性，由于无法使用 entry_point, 也就无法通过命令来跳转到指定模块运行程序，这也就意味着，官方工具不方便写成命令行。还是 setuptools 好。</p>\n<p>上面需要注意的就是 install_requires 可以添加依赖。其他的你猜都可以猜出来是做什么的。自己去看代码，我就不多说了。</p>\n<h2 id=\"2-发布\"><a class=\"v-toc-item\" href=\"#2-发布\">#</a> 2. 发布</h2>\n<p>所谓的发布，就是将打包好的程序的某个版本发布到某个仓库中。</p>\n<h3 id=\"21-注册-pypi-账户\"><a class=\"v-toc-item\" href=\"#21-注册-pypi-账户\">#</a> 2.1. 注册 pypi 账户</h3>\n<p>到这个上面注册账号：<br>\n<a href=\"https://pypi.python.org/pypi\">https://pypi.python.org/pypi</a></p>\n<h3 id=\"22-注册在账户下面注册-python-包\"><a class=\"v-toc-item\" href=\"#22-注册在账户下面注册-python-包\">#</a> 2.2. 注册在账户下面注册 Python 包</h3>\n<p>进入对应项目根文件，然后执行</p>\n<pre><code class=\"language-bash\">python3 setup<span class=\"token punctuation\">.</span>py register\n</code></pre>\n<p>这一步程序会让你输入刚刚注册的账号和密码，然后注册该包。注册该包以后，你就有了一个小仓库。可以存放不同版本的 <a href=\"http://danmu.fm\">danmu.fm</a>.</p>\n<p>注册的仓库是可以在这个地址看到的，<br>\n<a href=\"https://pypi.python.org/pypi?%3Aaction=pkg_edit&amp;name=danmu.fm\">https://pypi.python.org/pypi?%3Aaction=pkg_edit&amp;name=danmu.fm</a></p>\n<h3 id=\"23-上传打包好的-python-命令行工具\"><a class=\"v-toc-item\" href=\"#23-上传打包好的-python-命令行工具\">#</a> 2.3. 上传<strong>打包</strong>好的 Python 命令行工具。</h3>\n<p>这里需要借助一个小工具，twine.twine 是一个更加安全方便上传打包好的代码的工具。</p>\n<pre><code class=\"language-bash\">pip3 install twine\n</code></pre>\n<p>接着开始打包，打包成两个版本，一个是不需要 build 的版本，另一个是需要 build 的版本（顺带吐槽下，这两个诡异的命名）.</p>\n<pre><code class=\"language-bash\">python setup<span class=\"token punctuation\">.</span>py sdist bdist_wheel\n</code></pre>\n<p>于是剩下来的就显而易见了，上传 build 完毕的程序到仓库中。</p>\n<pre><code class=\"language-bash\">twine upload dist<span class=\"token operator\">/</span>danmu<span class=\"token punctuation\">.</span>fm<span class=\"token operator\">-</span><span class=\"token number\">0.1</span><span class=\"token number\">.2</span><span class=\"token operator\">*</span>\n</code></pre>\n<p>于是，安装一下，测试是否成功</p>\n<pre><code class=\"language-bash\">pip3 install danmu<span class=\"token punctuation\">.</span>fm <span class=\"token operator\">--</span>upgrade\n</code></pre>\n<p>命令行的工具是这样使用的。</p>\n<pre><code class=\"language-bash\">danmu<span class=\"token punctuation\">.</span>fm <span class=\"token operator\">-</span>q <span class=\"token number\">2</span> <span class=\"token operator\">-</span>v <span class=\"token number\">1</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>douyutv<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token number\">16789</span>\n</code></pre>\n<h2 id=\"3-完善\"><a class=\"v-toc-item\" href=\"#3-完善\">#</a> 3. 完善</h2>\n<p>不断的完善代码，然后打包终端程序发布到仓库给别人用，这就是整个的 PIP 打包发布流程。</p>\n<ul>\n<li>这个时候，你可能需要使用版本控制软件。</li>\n<li>你可能需要增多的代码的测试。</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li><a href=\"#%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AA-python-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7\">如何发布一个 Python 命令行工具</a>\n<ul>\n<li><a href=\"#0x01-%E6%9C%AC%E6%96%87%E7%AE%80%E4%BB%8B\">0x01 本文简介</a></li>\n<li><a href=\"#0x02-%E5%A6%82%E4%BD%95%E5%88%86%E8%A7%A3%E8%BF%99%E4%B8%AA%E5%8F%91%E5%B8%83%E4%BB%BB%E5%8A%A1\">0x02 如何分解这个发布任务？</a></li>\n<li><a href=\"#0x03-%E5%86%99%E5%A5%BD%E4%B8%80%E4%B8%AA-python-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7\">0x03 写好一个 Python 命令行工具</a>\n<ul>\n<li><a href=\"#11python-%E7%9A%84%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C\">1.1.Python 的如何编写一个简单的命令行</a></li>\n<li><a href=\"#12-%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84\">1.2. 如何组织代码结构。</a></li>\n<li><a href=\"#121-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%BB%E8%A6%81%E7%A8%8B%E5%BA%8F%E5%9C%A8%E7%AC%AC%E4%BA%8C%E7%9B%AE%E5%BD%95%E4%B8%8B\">1.2.1 为什么主要程序在第二目录下</a></li>\n<li><a href=\"#122-setupcfg\">1.2.2 setup.cfg</a></li>\n<li><a href=\"#123-setuppy\">1.2.3 setup.py</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%E5%8F%91%E5%B8%83\">2. 发布</a>\n<ul>\n<li><a href=\"#21-%E6%B3%A8%E5%86%8C-pypi-%E8%B4%A6%E6%88%B7\">2.1. 注册 pypi 账户</a></li>\n<li><a href=\"#22-%E6%B3%A8%E5%86%8C%E5%9C%A8%E8%B4%A6%E6%88%B7%E4%B8%8B%E9%9D%A2%E6%B3%A8%E5%86%8C-python-%E5%8C%85\">2.2. 注册在账户下面注册 Python 包</a></li>\n<li><a href=\"#23-%E4%B8%8A%E4%BC%A0%E6%89%93%E5%8C%85%E5%A5%BD%E7%9A%84-python-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7\">2.3. 上传<strong>打包</strong>好的 Python 命令行工具。</a></li>\n</ul>\n</li>\n<li><a href=\"#3-%E5%AE%8C%E5%96%84\">3. 完善</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}