{"pageProps":{"post":{"tags":["Python"],"path":"20170529_一个基于TensorFlow的分类器.md","title":"一个基于 TensorFlow 的图片分类器","slug":"一个基于 TensorFlow 的图片分类器","date":"2017-05-29","category":"数据分析","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<blockquote>\n<p>备注：本文训练效果太差，所以直接太监了。</p>\n</blockquote>\n<p>这年头，不会写爬虫不会写网站，那基本上不能算是一个 Python 程序员，但是 2017 年的 Google IO 之后，作为一个 Pythonist 你不会点数据分析和机器学习，也不好见人了。<br>\n所以，本文教你在什么机器学习概念都不懂的情况下，做出一个基于 TensorFlow 的图片分类功能，入个门。仅此而已。<br>\n本文的代码和文章内容主要源于我在 Github 上无意间翻到的一个 Repo, 链接地址，我所做的功夫就是在这基础上将代码改为了 Python 3 / TensorFlow 1.1.0 的环境，将这个流程梳理一下，不算是代码的生产者最多搬运工，仅此而已。</p>\n<p>本文的目的是：</p>\n<blockquote>\n<p>通过 TensorFlow 训练一个小型的分类器，用这个分类器通过照片识别出明星的姓名。</p>\n</blockquote>\n<p>即我们要训练一个小 AI, 这个小 AI 能分辨欢乐颂里面的五美：</p>\n<ul>\n<li>乔欣</li>\n<li>刘涛</li>\n<li>王子文</li>\n<li>杨紫</li>\n<li>蒋欣</li>\n</ul>\n<!-- more -->\n<p>注意：本文主要在 MacOS 上进行测试。<br>\n本文的目录结构如下：</p>\n<ul>\n<li>准备训练数据和测试数据</li>\n<li>TensorFlow 环境配置</li>\n<li>开始训练图片</li>\n<li>对图片进行分类</li>\n<li>文章回顾</li>\n<li>参考链接</li>\n</ul>\n<p>首先克隆我的 Repo,（我的 Repo 在这里）[<a href=\"https://github.com/twocucao/the-machine\">https://github.com/twocucao/the-machine</a>] .</p>\n<p>仓库结构大致如下</p>\n<pre><code class=\"language-bash\">├── <span class=\"token constant\">README</span><span class=\"token punctuation\">.</span>md\n├── compose\n│   └── tensorflow\n│       ├── Dockerfile\n│       └── Dockerfile<span class=\"token operator\">-</span>dev\n├── config\n├── doc\n├── image_classifier\n│   ├── __init__<span class=\"token punctuation\">.</span>py\n│   ├── label_dir<span class=\"token punctuation\">.</span>py\n│   ├── label_image<span class=\"token punctuation\">.</span>py\n│   ├── retrain<span class=\"token punctuation\">.</span>py\n│   └── train<span class=\"token punctuation\">.</span>sh\n└── bootstrap<span class=\"token punctuation\">.</span>sh\n</code></pre>\n<h2 id=\"0x01-准备训练数据和测试数据\"><a class=\"v-toc-item\" href=\"#0x01-准备训练数据和测试数据\">#</a> 0x01 准备训练数据和测试数据</h2>\n<p>准备训练数据，数据从哪里来呢？从百度来。我们从百度抓取大约 5 组图片，每组图片大约 1000 张图片，并且从每组里面留下 900 组作为训练数据，抽出 100 作为测试数据。</p>\n<h3 id=\"11-抓取图片\"><a class=\"v-toc-item\" href=\"#11-抓取图片\">#</a> 1.1 抓取图片</h3>\n<p>抓取代码放在代码仓库中，比较简单，下载即可用。</p>\n<p>在 crawl_baidu_images.py 中填入五美的姓名，运行脚本即可。<br>\n脚本会请求百度图片的图片，然后下载下来，程序跑完会有如下的图片数据。<br>\n好，抓取图片我们就完成了。</p>\n<h3 id=\"12-归类训练数据\"><a class=\"v-toc-item\" href=\"#12-归类训练数据\">#</a> 1.2 归类训练数据</h3>\n<p>归类训练数据，其实就是把刚刚下载下来的图片，分类为五美，也就是把刘涛的照片放到刘涛文件夹中。看一下现在的文件夹，似乎已经分类完毕了，是不是这样呢？显然不是，因为：</p>\n<ul>\n<li>下载下来的图片貌似 JPG 结尾的图片，但是文件内容是不是 JPEG 的格式就不好说了，也可 GIF 也可能是 PNG.</li>\n<li>当你搜索刘涛的时候，百度图片给出的不仅仅是刘涛。也可能有胡歌《琅琊榜》, 也可能有胡军《天龙八部》</li>\n</ul>\n<p>所以下面需要做的是：</p>\n<ol>\n<li>移除非 JPG 的文件格式</li>\n<li>人工确 (jian) 定 (huang) 文件夹中的图片。</li>\n</ol>\n<p>在做上面这两步之前，我们先新建文件夹 image_classifier_train ( 笔者放在 /Users/twocucao/Codes/Repos/image_classifier_train ), 注意，这个文件夹不要放在代码下面，把五美的文件夹放到这个文件夹下面的 data 文件夹下。并且用拼音命名。</p>\n<p>如下：</p>\n<p><img src=\"http://oriw7hkjj.bkt.clouddn.com/WX20170529-160220@2x.png\" alt=\"\"></p>\n<p>我们先移除非 JPEG 的图片。如果是 mac 系统需要先安装 jpeginfo , brew install jpeginfo 即可。<br>\n进入 /Users/twocucao/Codes/Repos/image_classifier_train 执行下面脚本 <strong>去除非 JPG 的图片</strong></p>\n<pre><code>find . -iname &quot;*.jpg&quot; -exec jpeginfo -c {} \\; | grep -E &quot;WARNING|ERROR&quot; &gt; need_delete.sh\ncat need_delete.sh | awk '{print $1}' | xargs rm\nrm need_delete.sh\n</code></pre>\n<p>好了接下来，我们需要到每一个文件夹下进行人工<s>鉴黄</s>检验图片是不是五美，比如，到 liutao 文件夹下检查，删除图片基本上没有清晰面容的照片。<br>\n为了速度，我们把图片转成缩略图大致看一下，去除明显不是五美的照片，我们进行下一步的筛选。</p>\n<h3 id=\"13-找出对应的头像\"><a class=\"v-toc-item\" href=\"#13-找出对应的头像\">#</a> 1.3 \b 找出对应的头像</h3>\n<p>我们需要从图片库中选出五美的头像来</p>\n<pre><code class=\"language-bash\">pyenv global system\n\nbrew reinstall boost<span class=\"token operator\">-</span>python <span class=\"token operator\">--</span><span class=\"token keyword\">with</span><span class=\"token operator\">-</span>python3 <span class=\"token operator\">--</span>without<span class=\"token operator\">-</span>python\nconda install <span class=\"token operator\">-</span>c menpo dlib<span class=\"token operator\">=</span><span class=\"token number\">19.4</span>\n</code></pre>\n<h2 id=\"0x02-tensorflow-环境配置\"><a class=\"v-toc-item\" href=\"#0x02-tensorflow-环境配置\">#</a> 0x02 TensorFlow 环境配置</h2>\n<h3 id=\"21-docker-的安装和镜像加速\"><a class=\"v-toc-item\" href=\"#21-docker-的安装和镜像加速\">#</a> 2.1 Docker 的安装和镜像加速</h3>\n<p>本文需要使用 Docker 作为环境配置，也正是因为如此，我们可以在很快的时间内搭建起来 tensorflow 的运行环境。目测，Docker 也是未来几年内搭建环境分发环境的首选。<br>\nDocker 下载不必多说，需要补充一句的是，我们可以在阿里云账户上使用一个 registry 对 Docker 镜像进行加速。<br>\n在阿里云的容器界面获取加速链接填到 docker 里面即可。如图。</p>\n<p><img src=\"http://oriw7hkjj.bkt.clouddn.com/WX20170529-162953@2x.png\" alt=\"\"></p>\n<h3 id=\"22-构建镜像文件并且构建镜像\"><a class=\"v-toc-item\" href=\"#22-构建镜像文件并且构建镜像\">#</a> 2.2 构建镜像文件并且构建镜像</h3>\n<p>建议在执行构建镜像之前，务必先完成本文的第二小节的图片准备。然后执行下面的命令，将镜像文件构建成镜像。</p>\n<pre><code class=\"language-bash\">cd <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>twocucao<span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>Repos<span class=\"token operator\">/</span>the<span class=\"token operator\">-</span>machine\ndocker build <span class=\"token operator\">-</span>f compose<span class=\"token operator\">/</span>tensorflow<span class=\"token operator\">/</span>Dockerfile<span class=\"token operator\">-</span>dev <span class=\"token operator\">-</span>t twocucao<span class=\"token operator\">/</span>tensorflow <span class=\"token punctuation\">.</span>\n</code></pre>\n<p>该行命令使用 compose/tensorflow/Dockerfile-dev 作为 Dockerfile 文件，构建镜像名称为 twocucao/tensorflow , 传入的 context 为 当前路径。</p>\n<h3 id=\"23-测试-tensorflow-容器\"><a class=\"v-toc-item\" href=\"#23-测试-tensorflow-容器\">#</a> 2.3 测试 Tensorflow 容器</h3>\n<pre><code class=\"language-bash\">docker run <span class=\"token operator\">-</span>it twocucao<span class=\"token operator\">/</span>tensorflow <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash\necho <span class=\"token string\">'hello tensorflow'</span>\n</code></pre>\n<p>如果运行正常，则一切正常。可以进行下一步骤了。</p>\n<h2 id=\"0x03-开始训练\"><a class=\"v-toc-item\" href=\"#0x03-开始训练\">#</a> 0x03 开始训练</h2>\n<p>执行命令开始训练。</p>\n<pre><code class=\"language-bash\"><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>train<span class=\"token punctuation\">.</span>sh <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>twocucao<span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>Repos<span class=\"token operator\">/</span>image_classifier_train\n</code></pre>\n<p>我设置的训练次数为 20000, 在我的本子上基本两个小时，可能时间有些长，没有耐心的童鞋可以吧训练次数调整低一些。然后重新构建镜像。</p>\n<blockquote>\n<p>那么，当 TensorFlow 在训练的时候，我们要谈些什么？</p>\n</blockquote>\n<p>Google 开源了 Inception 模型，这个模型从 ImageNet 的上千个分类的图片训练而来，而我们所做的工作，便是在此基础上做最后的增量训练。然而，我们只用来区分女明星，似乎这个 Inception 的模型有点大材小用？好，训练结束之后我们查看一下文件夹 /Users/twocucao/Codes/Repos/image_classifier_train 下，</p>\n<pre><code class=\"language-bash\">├── bottlenecks\n│   ├── jiangxin\n│   ├── liutao\n│   ├── qiaoxin\n│   ├── wangziwen\n│   └── yangzi\n├── data\n│   ├── jiangxin\n│   ├── liutao\n│   ├── qiaoxin\n│   ├── wangziwen\n│   └── yangzi\n├── inception\n│   ├── <span class=\"token constant\">LICENSE</span>\n│   ├── classify_image_graph_def<span class=\"token punctuation\">.</span>pb\n│   ├── cropped_panda<span class=\"token punctuation\">.</span>jpg\n│   ├── imagenet_2012_challenge_label_map_proto<span class=\"token punctuation\">.</span>pbtxt\n│   ├── imagenet_synset_to_human_label_map<span class=\"token punctuation\">.</span>txt\n│   └── inception<span class=\"token operator\">-</span><span class=\"token number\">2015</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">05.</span>tgz\n├── retrained_graph<span class=\"token punctuation\">.</span>pb\n├── retrained_labels<span class=\"token punctuation\">.</span>txt\n└── test_data\n    ├── src\n    └── target\n</code></pre>\n<p>Bottlenecks 文件夹为我们将每一张 JPG 转成矩阵的文本<br>\nInception 为 Google 开源的模型文件。<br>\nretrained_graph.pb 为训练出来的图的模型文件。<br>\nretrained_labels.txt 为标签。</p>\n<p>如下图不断刷出的一坨坨的文字是什么呢？</p>\n<ul>\n<li>时间 , 无需多说</li>\n<li>当前训练次数</li>\n<li>Train accuracy = 87.0%</li>\n<li>Cross entropy = 0.499145</li>\n<li>Validation accuracy = 52.0% (N=100)</li>\n</ul>\n<p>看到 Train accuracy &gt;&gt; Validation accuracy 估计是模型过度拟合了，嗯，看来这个模型还是有点问题的。</p>\n<h2 id=\"0x04-对图片进行分类\"><a class=\"v-toc-item\" href=\"#0x04-对图片进行分类\">#</a> 0x04 对图片进行分类</h2>\n<h3 id=\"41-开始分类\"><a class=\"v-toc-item\" href=\"#41-开始分类\">#</a> 4.1 开始分类</h3>\n<h3 id=\"42-对分类结果进行评估\"><a class=\"v-toc-item\" href=\"#42-对分类结果进行评估\">#</a> 4.2 对分类结果进行评估</h3>\n<h2 id=\"0x05-文章回顾\"><a class=\"v-toc-item\" href=\"#0x05-文章回顾\">#</a> 0x05 文章回顾</h2>\n<h2 id=\"0x06-参考链接\"><a class=\"v-toc-item\" href=\"#0x06-参考链接\">#</a> 0x06 参考链接</h2>\n<ul>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/index.html\">https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/index.html</a></li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-%E5%87%86%E5%A4%87%E8%AE%AD%E7%BB%83%E6%95%B0%E6%8D%AE%E5%92%8C%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE\">0x01 准备训练数据和测试数据</a>\n<ul>\n<li><a href=\"#11-%E6%8A%93%E5%8F%96%E5%9B%BE%E7%89%87\">1.1 抓取图片</a></li>\n<li><a href=\"#12-%E5%BD%92%E7%B1%BB%E8%AE%AD%E7%BB%83%E6%95%B0%E6%8D%AE\">1.2 归类训练数据</a></li>\n<li><a href=\"#13-%E6%89%BE%E5%87%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E5%A4%B4%E5%83%8F\">1.3 \b 找出对应的头像</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-tensorflow-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\">0x02 TensorFlow 环境配置</a>\n<ul>\n<li><a href=\"#21-docker-%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F\">2.1 Docker 的安装和镜像加速</a></li>\n<li><a href=\"#22-%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6%E5%B9%B6%E4%B8%94%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F\">2.2 构建镜像文件并且构建镜像</a></li>\n<li><a href=\"#23-%E6%B5%8B%E8%AF%95-tensorflow-%E5%AE%B9%E5%99%A8\">2.3 测试 Tensorflow 容器</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83\">0x03 开始训练</a></li>\n<li><a href=\"#0x04-%E5%AF%B9%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E5%88%86%E7%B1%BB\">0x04 对图片进行分类</a>\n<ul>\n<li><a href=\"#41-%E5%BC%80%E5%A7%8B%E5%88%86%E7%B1%BB\">4.1 开始分类</a></li>\n<li><a href=\"#42-%E5%AF%B9%E5%88%86%E7%B1%BB%E7%BB%93%E6%9E%9C%E8%BF%9B%E8%A1%8C%E8%AF%84%E4%BC%B0\">4.2 对分类结果进行评估</a></li>\n</ul>\n</li>\n<li><a href=\"#0x05-%E6%96%87%E7%AB%A0%E5%9B%9E%E9%A1%BE\">0x05 文章回顾</a></li>\n<li><a href=\"#0x06-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">0x06 参考链接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}