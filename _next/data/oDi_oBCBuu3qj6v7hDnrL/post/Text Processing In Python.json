{"pageProps":{"post":{"tags":["Python"],"path":"20161203_Python文本处理.md","title":"Text Processing In Python","slug":"Text Processing In Python","date":"2016-12-03","category":"Python","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h1 id=\"text-processing-in-python\"><a class=\"v-toc-item\" href=\"#text-processing-in-python\">#</a> Text Processing In Python</h1>\n<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>本文为 Cheatsheet 类型文章，用于记录我在日常编程中的文本处理相关思路。</p>\n<p>本文的目录为：</p>\n<ul>\n<li>正则处理相关</li>\n<li>HTML/XML 处理相关</li>\n<li>Python 中的文本处理</li>\n</ul>\n<h2 id=\"0x01-正则处理相关\"><a class=\"v-toc-item\" href=\"#0x01-正则处理相关\">#</a> 0x01 正则处理相关</h2>\n<h3 id=\"11-正则表达式\"><a class=\"v-toc-item\" href=\"#11-正则表达式\">#</a> 1.1. 正则表达式</h3>\n<p>正则是个很奇葩的名字，为什么叫做正则表达式呢，首先是个表达式，其次，这是一种叫做正则 (regular expression, rational expression) 的表达式。<br>\n名称为什么叫做 regular 呢，因为它基于 regular language. 而 regular language 是一种 formal language. 得，现在又开始是编译原理相关概念了。为了逃避概念，通过用途来简单定义正则表达式。</p>\n<p>简而言之，就是一种用于字符串搜索的模式。或者就是一种领域专用编程语言。</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Regular_expression\">https://en.wikipedia.org/wiki/Regular_expression</a></p>\n<h3 id=\"12-python-中正则表达式语法\"><a class=\"v-toc-item\" href=\"#12-python-中正则表达式语法\">#</a> 1.2. Python 中正则表达式语法</h3>\n<pre><code class=\"language-python\"># 元字符\n<span class=\"token punctuation\">.</span> <span class=\"token operator\">^</span> $ <span class=\"token operator\">*</span> <span class=\"token operator\">+</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> \\ <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">*</span> # 速记，天上一个星星都没有，<span class=\"token number\">0</span> 到多个。\n<span class=\"token operator\">+</span> # 一加手机<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">1</span> 到多个。\n<span class=\"token operator\">?</span> # 有还是没有 即 <span class=\"token number\">0</span> or <span class=\"token number\">1</span>\n<span class=\"token operator\">*</span><span class=\"token operator\">?</span> # 没有疑问就是贪婪，有疑问就是非贪婪\n<span class=\"token operator\">+</span><span class=\"token operator\">?</span>\n<span class=\"token operator\">??</span>\n\n<span class=\"token punctuation\">{</span>m<span class=\"token punctuation\">}</span> # m 份\n<span class=\"token punctuation\">{</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">}</span> # 优先匹配 a<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>b 优先匹配 aaaab 中 aaaab\n<span class=\"token punctuation\">{</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">}</span><span class=\"token operator\">?</span> # 优先匹配 a<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>b 优先匹配 aaaab 中 aab\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> # <span class=\"token punctuation\">[</span>a\\<span class=\"token operator\">-</span>z<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span>az<span class=\"token operator\">-</span><span class=\"token punctuation\">]</span>\n# <span class=\"token number\">1.</span> <span class=\"token punctuation\">[</span>\\w<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>\\<span class=\"token constant\">S</span><span class=\"token punctuation\">]</span>\n# <span class=\"token number\">2.</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">^</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n# <span class=\"token number\">3.</span> <span class=\"token punctuation\">[</span>akm$<span class=\"token punctuation\">]</span>  在 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 中 $ 并不具备元字符特点\n\nPattenA <span class=\"token operator\">|</span> <span class=\"token function\">PattenB</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> # 捕获 <span class=\"token punctuation\">,</span> 引用可以使用、<span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token function\">但是还有一种扩展语法</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">?.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> # 扩展\n# <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">?</span>aiLmsux<span class=\"token punctuation\">)</span>\n# <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> 不捕获\n# <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token constant\">P</span><span class=\"token operator\">&lt;</span>quote<span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token function\">正则内引用</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token constant\">P</span><span class=\"token operator\">=</span>quote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>python 内获取 m<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'quote'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'quote'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>re<span class=\"token punctuation\">.</span>sub 内 repl 参数为、g<span class=\"token operator\">&lt;</span>quote<span class=\"token operator\">></span> \\g<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span> \\<span class=\"token number\">1</span>\n\n</code></pre>\n<h3 id=\"13-python-中使用正则的方法\"><a class=\"v-toc-item\" href=\"#13-python-中使用正则的方法\">#</a> 1.3. Python 中使用正则的方法</h3>\n<h4 id=\"131-re-模块的用法\"><a class=\"v-toc-item\" href=\"#131-re-模块的用法\">#</a> 1.3.1. re 模块的用法</h4>\n<ul>\n<li>sub 替换</li>\n<li>match / fullmatch 匹配</li>\n<li>search 搜索</li>\n<li>split 分片</li>\n</ul>\n<pre><code class=\"language-python\">re<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(\\W+)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'...words, words...'</span><span class=\"token punctuation\">)</span>\n# <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'...'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'words'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">', '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'words'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'...'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<blockquote>\n<p>match 为匹配起始字符 / fullmatch 为全部字符 / search 为搜索</p>\n</blockquote>\n<h4 id=\"132-match-object-的用法\"><a class=\"v-toc-item\" href=\"#132-match-object-的用法\">#</a> 1.3.2. match object 的用法</h4>\n<pre><code class=\"language-python\">m<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nm<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>>></span> m <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>r<span class=\"token string\">\"(?P&lt;first_name>\\w+) (?P&lt;last_name>\\w+)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Malcolm Reynolds\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>>></span> m<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Malcolm'</span>\n<span class=\"token operator\">>>></span> m<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'last_name'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Reynolds'</span>\nm<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> # 起始\nm<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   # 结尾\n</code></pre>\n<h2 id=\"14-正则表达式性能\"><a class=\"v-toc-item\" href=\"#14-正则表达式性能\">#</a> 1.4. 正则表达式性能</h2>\n<pre><code class=\"language-python\"># 编译优于不编译\nprog <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> prog<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\nre<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span>string<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"0x02-htmlxml-处理相关\"><a class=\"v-toc-item\" href=\"#0x02-htmlxml-处理相关\">#</a> 0x02 HTML/XML 处理相关</h2>\n<h3 id=\"21-beautifulsoup-处理-html\"><a class=\"v-toc-item\" href=\"#21-beautifulsoup-处理-html\">#</a> 2.1. Beautifulsoup 处理 HTML</h3>\n<p>解析往往伴随着各种各样奇葩的不奇葩的，诡异的不诡异的网页数据抽取，这个过程中，我们常使用两个库来解决问题，一个库叫做 lxml, 另一个库叫做 BeautifulSoup.</p>\n<p>beautifulsoup 可是让我们通过直接手动编写遍历 dom 树的方法来快速遍历 dom 树从而获得数据。相比自己写解析器而言，可以算得上非常的节省时间了。</p>\n<p>只要能手动遍历 dom 树，基本上所有的数据都是可以获取的。痛点就是手动编写遍历 Dom 树并且完成测试的时间可能长一些。</p>\n<p>但是开发效率就比较低了。</p>\n<p>举个例子：</p>\n<pre><code class=\"language-html\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"lal\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>span <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span> itemprop<span class=\"token operator\">=</span><span class=\"token string\">\"street-address\"</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"浦东南路八佰伴西面\"</span><span class=\"token operator\">></span>\n    地址：浦东南路八佰伴西面\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span> itemprop<span class=\"token operator\">=</span><span class=\"token string\">\"street-address\"</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"浦东南路\"</span><span class=\"token operator\">></span>名称：xxxx<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n</code></pre>\n<p>我想要地址属性，如果是 beautifulsoup, 则我们需要先定位到 id 为 lal 的 div 元素。然后获取每个元素的 text 部分，然后使用 if 判断地址属性，然后提取 text.</p>\n<p><strong>但是如果用 xpath, 则可以把对元素的简单定位简单判断直接写在 xpath 表达式。</strong></p>\n<pre><code class=\"language-python\">sel<span class=\"token punctuation\">.</span><span class=\"token function\">xpath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//div[@id=\"lal\"]/*[contains(text(),\"地址\")]/text()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">extract_first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n# 如果还需要添加筛选名称，则可是使用\nsel<span class=\"token punctuation\">.</span><span class=\"token function\">xpath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//div[@id=\"lal\"]/*[contains(text(),\"名称\")]/text()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">extract_first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这样可以极大的提升开发效率。</p>\n<p>页面的结构越复杂，则 xpath 带来的开发效率越高。</p>\n<h3 id=\"22-xpath-处理-html\"><a class=\"v-toc-item\" href=\"#22-xpath-处理-html\">#</a> 2.2. XPath 处理 HTML</h3>\n<h4 id=\"221-概念\"><a class=\"v-toc-item\" href=\"#221-概念\">#</a> 2.2.1. 概念</h4>\n<p>XPath 是一种通过路径表达式定位 XML 文档内容的语法。<br>\n由于内置了大量的表达式函数，可以通过极少的代码完成定位。<br>\n有七种<strong>节点类型</strong>:</p>\n<ul>\n<li>element</li>\n<li>attribute</li>\n<li>text</li>\n<li>namespace</li>\n<li>processing-instruction</li>\n<li>comment</li>\n<li>document nodes</li>\n</ul>\n<p>有五种<strong>节点间关系</strong>:</p>\n<ul>\n<li>父节点 Parent</li>\n<li>子节点 Children</li>\n<li>兄弟节点 Siblings</li>\n<li>先祖节点，即父与父父节点。Ancestors</li>\n<li>后代节点，即子与子子节点。Descendants</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nodename</td>\n<td>节点名称</td>\n<td>a</td>\n</tr>\n<tr>\n<td>/</td>\n<td>根节点</td>\n<td>/</td>\n</tr>\n<tr>\n<td>//</td>\n<td>匹配所有</td>\n<td>bookstore//book</td>\n</tr>\n<tr>\n<td>.</td>\n<td>当前节点</td>\n<td></td>\n</tr>\n<tr>\n<td>…</td>\n<td>父节点</td>\n<td>a/…/a/…</td>\n</tr>\n<tr>\n<td>@</td>\n<td>属性</td>\n<td>a/@href</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>谓语</td>\n<td>book[1] , book[last()-1]</td>\n</tr>\n<tr>\n<td>func()</td>\n<td>表达式函数</td>\n<td>postion()</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-python\">response<span class=\"token punctuation\">.</span><span class=\"token function\">xpath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id=\\\"landlb_B04_04\\\"]/span[2]/a[contains(@href,'market')]\"</span><span class=\"token punctuation\">)</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">xpath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id=\\\"landlb_B04_04\\\"]/span[2]/a[not(@class)]\"</span><span class=\"token punctuation\">)</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">xpath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//ul/li/b[contains(text(),'什么玩意')]/following-sibling::span/text()\"</span><span class=\"token punctuation\">)</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">xpath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//div[@class='address']/text()[preceding::span[@class='item' and contains(text(),'地址：')]]\"</span><span class=\"token punctuation\">)</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">xpath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//ul/li/b[contains(text(),'什么玩意：')]/following-sibling::a/text()\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"language-bash\"><span class=\"token comment\">//*[contains(text(),'ABC')]</span>\n# http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>stackoverflow<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>questions<span class=\"token operator\">/</span><span class=\"token number\">3655549</span><span class=\"token operator\">/</span>xpath<span class=\"token operator\">-</span>containstext<span class=\"token operator\">-</span>some<span class=\"token operator\">-</span>string<span class=\"token operator\">-</span>doesnt<span class=\"token operator\">-</span>work<span class=\"token operator\">-</span>when<span class=\"token operator\">-</span>used<span class=\"token operator\">-</span><span class=\"token keyword\">with</span><span class=\"token operator\">-</span>node<span class=\"token operator\">-</span><span class=\"token keyword\">with</span><span class=\"token operator\">-</span>more<span class=\"token operator\">/</span><span class=\"token number\">3655588</span>#<span class=\"token number\">3655588</span>\n\n<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"atag btag\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token comment\">//div[contains(@class, 'atag') and contains(@class ,'btag')]</span>\n</code></pre>\n<h4 id=\"222-lxml-parsel\"><a class=\"v-toc-item\" href=\"#222-lxml-parsel\">#</a> 2.2.2. lxml parsel</h4>\n<p>这两个库是 Python 中常用的解析表达式， parsel 依赖于 lxml , 安装完 lxml 后直接安装即可。</p>\n<h4 id=\"223-lxml-的番外\"><a class=\"v-toc-item\" href=\"#223-lxml-的番外\">#</a> 2.2.3. lxml 的番外</h4>\n<p>众所周知，Mac 的 Homebrew 很方便，每一次遇到需要下载编译的组件的时候，只需要执行 brew install xxx, 很快就可以使用了。</p>\n<p>但 homebrew 安装的软件都是最新的，这很容易导致部分软件由于版本更新带来的兼容性问题。</p>\n<p>这不，最近在 Mac 上进行开发的时候每次调用初始化 lxml 的时候总是无法进行解析，最后经过排查发现问题是 lxml 在编译的时候使用的 libxml 2.9.4 但是 使用的版本为 2.9.2 , 于是每当我使用 lxml 的时候，就会报错。</p>\n<p>不得已，找到 lxml 的 F&amp;Q 部分发现提 issue 之前需要先查看依赖版本。</p>\n<p>于是进入 IPython 排查。</p>\n<pre><code class=\"language-Python\"><span class=\"token keyword\">import</span> sys\nfrom lxml <span class=\"token keyword\">import</span> etree\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-20s: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Python'</span><span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>version_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-20s: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'lxml.etree'</span><span class=\"token punctuation\">,</span> etree<span class=\"token punctuation\">.</span><span class=\"token constant\">LXML_VERSION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-20s: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'libxml used'</span><span class=\"token punctuation\">,</span> etree<span class=\"token punctuation\">.</span><span class=\"token constant\">LIBXML_VERSION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-20s: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'libxml compiled'</span><span class=\"token punctuation\">,</span> etree<span class=\"token punctuation\">.</span><span class=\"token constant\">LIBXML_COMPILED_VERSION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-20s: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'libxslt used'</span><span class=\"token punctuation\">,</span> etree<span class=\"token punctuation\">.</span><span class=\"token constant\">LIBXSLT_VERSION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-20s: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'libxslt compiled'</span><span class=\"token punctuation\">,</span> etree<span class=\"token punctuation\">.</span><span class=\"token constant\">LIBXSLT_COMPILED_VERSION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n# Python <span class=\"token operator\">:</span> sys<span class=\"token punctuation\">.</span><span class=\"token function\">version_info</span><span class=\"token punctuation\">(</span>major<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> minor<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> micro<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> releaselevel<span class=\"token operator\">=</span><span class=\"token string\">'final'</span><span class=\"token punctuation\">,</span> serial<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n# lxml<span class=\"token punctuation\">.</span>etree <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n# libxml used <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n# libxml compiled <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> # 注意问题出在这里。\n# libxslt used <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>\n# libxslt compiled <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>于是使用 pip 强制进行安装升级。</p>\n<pre><code>STATIC_DEPS=true pip install -i http://pypi.douban.com/simple/ –trusted-host pypi.douban.com lxml –ignore-installed –no-cache-dir –upgrade -vvv\n</code></pre>\n<p>安装完毕即可。</p>\n<h3 id=\"23-标准库处理-html\"><a class=\"v-toc-item\" href=\"#23-标准库处理-html\">#</a> 2.3. 标准库处理 HTML</h3>\n","toc":"<ul class=\"v-article-toc\">\n<li><a href=\"#text-processing-in-python\">Text Processing In Python</a>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-%E6%AD%A3%E5%88%99%E5%A4%84%E7%90%86%E7%9B%B8%E5%85%B3\">0x01 正则处理相关</a>\n<ul>\n<li><a href=\"#11-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\">1.1. 正则表达式</a></li>\n<li><a href=\"#12-python-%E4%B8%AD%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95\">1.2. Python 中正则表达式语法</a></li>\n<li><a href=\"#13-python-%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E7%9A%84%E6%96%B9%E6%B3%95\">1.3. Python 中使用正则的方法</a>\n<ul>\n<li><a href=\"#131-re-%E6%A8%A1%E5%9D%97%E7%9A%84%E7%94%A8%E6%B3%95\">1.3.1. re 模块的用法</a></li>\n<li><a href=\"#132-match-object-%E7%9A%84%E7%94%A8%E6%B3%95\">1.3.2. match object 的用法</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#14-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%80%A7%E8%83%BD\">1.4. 正则表达式性能</a></li>\n<li><a href=\"#0x02-htmlxml-%E5%A4%84%E7%90%86%E7%9B%B8%E5%85%B3\">0x02 HTML/XML 处理相关</a>\n<ul>\n<li><a href=\"#21-beautifulsoup-%E5%A4%84%E7%90%86-html\">2.1. Beautifulsoup 处理 HTML</a></li>\n<li><a href=\"#22-xpath-%E5%A4%84%E7%90%86-html\">2.2. XPath 处理 HTML</a>\n<ul>\n<li><a href=\"#221-%E6%A6%82%E5%BF%B5\">2.2.1. 概念</a></li>\n<li><a href=\"#222-lxml-parsel\">2.2.2. lxml parsel</a></li>\n<li><a href=\"#223-lxml-%E7%9A%84%E7%95%AA%E5%A4%96\">2.2.3. lxml 的番外</a></li>\n</ul>\n</li>\n<li><a href=\"#23-%E6%A0%87%E5%87%86%E5%BA%93%E5%A4%84%E7%90%86-html\">2.3. 标准库处理 HTML</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}