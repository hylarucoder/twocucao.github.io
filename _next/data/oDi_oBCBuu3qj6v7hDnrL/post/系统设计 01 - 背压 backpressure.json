{"pageProps":{"post":{"tags":["业务系统"],"path":"20210607_SD01_Back_Pressure.md","title":"系统设计 01 - 背压 backpressure","slug":"系统设计 01 - 背压 backpressure","date":"2021-06-20","category":"系统设计","lastMod":"2021-06-20","description":"系统设计","thumbnail":"","content":"<h1 id=\"系统设计-01-背压-backpressure\"><a class=\"v-toc-item\" href=\"#系统设计-01-背压-backpressure\">#</a> 系统设计 01 - 背压 backpressure</h1>\n<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>最近看到一篇讲 backpressure 的文章，今天来聊一聊背压问题。</p>\n<h2 id=\"0x01-什么是背压\"><a class=\"v-toc-item\" href=\"#0x01-什么是背压\">#</a> 0x01 什么是背压</h2>\n<p>按照百度的说法</p>\n<blockquote>\n<p>指运动流体在密闭容器中沿其路径（譬如管路或风通路）流动时，由于受到障碍物或急转弯道的阻碍而被施加的与运动方向相反的压力</p>\n</blockquote>\n<p>简单来说，水箱入水多，出水少</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-7dbaf693275f72d08e672d026f79eef3.jpg\" alt=\"Image\"></p>\n<p>在正式进入文章之前，务必要注意，</p>\n<ol>\n<li>「背压现象」指的是一种生产者速率大于消费者速率的现象。</li>\n<li>「背压机制」指的是一种预防背压现象出现的机制。</li>\n</ol>\n<h2 id=\"0x02-常见的背压场景\"><a class=\"v-toc-item\" href=\"#0x02-常见的背压场景\">#</a> 0x02 常见的背压场景</h2>\n<p>Producer 产出多 Consumer 来不及消费完</p>\n<p>小到文件的 IO, 在请求到响应的整个生命周期，大到成白上千的数据计算任务，都会存在背压问题。</p>\n<ol>\n<li>读写文件 - 读快写慢 假设读速度 150MB/s 写速度 100MB/s, 那么每一秒就必须缓冲 50MB, 也就是 20 多秒就接近 1GB, 可想而知，如果不注意策略的话，内存很快就撑爆。</li>\n<li>服务间通讯 - 客户端对服务 A qps 为 100, 服务 A 需要请求内部服务 B, B 的 QPS 为 75, 如果不做额外的处理，服务 A 每秒钟就会积压 25 个请求。</li>\n<li>消息队列中瞬时消息过多 - kafka 内瞬间累积了海量的消息。</li>\n<li>爬虫速度过快，解析 worker 无法在相同时间内完成解析入库。</li>\n<li>UI 渲染，在比较热闹的直播页面，海量的用户发送弹幕，而用户界面很容易收到并且渲染海量消息而崩溃。</li>\n<li>用户支付完成后跳转到支付成功页面。</li>\n<li>今天花三十分钟写了 300 个 BUG, 导致测试妹纸直接崩溃。</li>\n</ol>\n<h2 id=\"0x03-背压解决策略\"><a class=\"v-toc-item\" href=\"#0x03-背压解决策略\">#</a> 0x03 背压解决策略</h2>\n<ol>\n<li>减少数据产出速率</li>\n<li>增加数据消费速率</li>\n<li>缓冲数据 use buffer</li>\n<li>丢弃数据</li>\n</ol>\n<h3 id=\"场景-1-读写文件\"><a class=\"v-toc-item\" href=\"#场景-1-读写文件\">#</a> 场景 1: 读写文件</h3>\n<p><a href=\"https://nodejs.org/en/docs/guides/backpressuring-in-streams/\">https://nodejs.org/en/docs/guides/backpressuring-in-streams/</a></p>\n<p>NodeJS 团队分别测试了禁用和启用 backpressure 特性的情况下运行了这段脚本</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> gzip <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zlib\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createGzip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> inp <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The.Matrix.1080p.mkv\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> out <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The.Matrix.1080p.mkv.gz\"</span><span class=\"token punctuation\">)</span>\n\ninp<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gzip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>不支持 backpressure 的情况首先带来的是内存的激增，其次是</p>\n<ol>\n<li>影响其他速度</li>\n<li>GC 频率变高</li>\n<li>内存耗尽</li>\n</ol>\n<p>对于 NodeJS 来说，选择了 Buffer 的手段</p>\n<h3 id=\"场景-2-服务间通讯\"><a class=\"v-toc-item\" href=\"#场景-2-服务间通讯\">#</a> 场景 2: 服务间通讯</h3>\n<p>对于 客户端 -&gt; 服务 A -&gt; 服务 B</p>\n<p>往往是在客户端与服务 A 之前加负载均衡，A 与 B 之间也加负载均衡</p>\n<p>负载均衡也分为两种，服务端负载均衡以及客户端负载均衡。</p>\n<ul>\n<li>负载均衡此时也承担了 Buffer 的作用。</li>\n<li>而多个服务 A 和多个服务 B 承担了增加消费速率的作用。</li>\n</ul>\n<h3 id=\"场景-3-爬虫-消息队列瞬时消息过多\"><a class=\"v-toc-item\" href=\"#场景-3-爬虫-消息队列瞬时消息过多\">#</a> 场景 3: 爬虫 / 消息队列瞬时消息过多</h3>\n<p>大多是扩 buffer, 扩消费者。</p>\n<h3 id=\"场景-4-ui-渲染\"><a class=\"v-toc-item\" href=\"#场景-4-ui-渲染\">#</a> 场景 4: UI 渲染</h3>\n<p>之前写过弹幕类服务。其中对前后端的部分考虑点还是很有趣的。</p>\n<p>在弹幕激增的情况下，弹幕列表不能瞬间挂掉。</p>\n<p>对于用户发送的弹幕消息，后端做好用户的分组，然后针对每个用户做好弹幕限流。这样确保后端传给前端的弹幕事件是可接受范围内的。</p>\n<p>然而，随着弹幕瞬时消息的激增，前端那边还是有点控不住了。</p>\n<p>几轮讨论下来，判断出 UI 渲染是瓶颈。后端已经做好用户的分组和弹幕的限流。再做消息的合并必要性不是很大。</p>\n<p>比如，瞬间接收 100 次弹幕事件。应该按照每秒进行合并弹幕批量前面 95 条弹幕接着渲染最后 5 条弹幕。</p>\n<p>整个界面就看起来顺滑多了。</p>\n<p>参考 <a href=\"https://steveholgado.com/rxjs-chat-app/\">https://steveholgado.com/rxjs-chat-app/</a></p>\n<h2 id=\"0xee-参考链接\"><a class=\"v-toc-item\" href=\"#0xee-参考链接\">#</a> 0xEE 参考链接</h2>\n<ul>\n<li><a href=\"https://lucumr.pocoo.org/2020/1/1/async-pressure/\">https://lucumr.pocoo.org/2020/1/1/async-pressure/</a></li>\n<li><a href=\"https://nodejs.org/en/docs/guides/backpressuring-in-streams/\">https://nodejs.org/en/docs/guides/backpressuring-in-streams/</a></li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-01-%E8%83%8C%E5%8E%8B-backpressure\">系统设计 01 - 背压 backpressure</a>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-%E4%BB%80%E4%B9%88%E6%98%AF%E8%83%8C%E5%8E%8B\">0x01 什么是背压</a></li>\n<li><a href=\"#0x02-%E5%B8%B8%E8%A7%81%E7%9A%84%E8%83%8C%E5%8E%8B%E5%9C%BA%E6%99%AF\">0x02 常见的背压场景</a></li>\n<li><a href=\"#0x03-%E8%83%8C%E5%8E%8B%E8%A7%A3%E5%86%B3%E7%AD%96%E7%95%A5\">0x03 背压解决策略</a>\n<ul>\n<li><a href=\"#%E5%9C%BA%E6%99%AF-1-%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6\">场景 1: 读写文件</a></li>\n<li><a href=\"#%E5%9C%BA%E6%99%AF-2-%E6%9C%8D%E5%8A%A1%E9%97%B4%E9%80%9A%E8%AE%AF\">场景 2: 服务间通讯</a></li>\n<li><a href=\"#%E5%9C%BA%E6%99%AF-3-%E7%88%AC%E8%99%AB-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9E%AC%E6%97%B6%E6%B6%88%E6%81%AF%E8%BF%87%E5%A4%9A\">场景 3: 爬虫 / 消息队列瞬时消息过多</a></li>\n<li><a href=\"#%E5%9C%BA%E6%99%AF-4-ui-%E6%B8%B2%E6%9F%93\">场景 4: UI 渲染</a></li>\n</ul>\n</li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">0xEE 参考链接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}