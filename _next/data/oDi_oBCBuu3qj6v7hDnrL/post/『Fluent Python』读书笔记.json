{"pageProps":{"post":{"tags":["Python"],"path":"20170417_读书笔记_FluentPython.md","title":"『Fluent Python』读书笔记","slug":"『Fluent Python』读书笔记","date":"2017-04-07","category":"读书笔记","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"前言\"><a class=\"v-toc-item\" href=\"#前言\">#</a> 前言</h2>\n<p>Fluent Python 适用于中级 Pythoner。</p>\n<blockquote>\n<p>以 Python 作为主力编程语言已经 1 年多了，读这本书，希望写的代码可以更加的 Pythonic。</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"本文目录\"><a class=\"v-toc-item\" href=\"#本文目录\">#</a> 本文目录</h2>\n<h2 id=\"本书结构\"><a class=\"v-toc-item\" href=\"#本书结构\">#</a> 本书结构</h2>\n<ul>\n<li>P1. Prologue\n<ul>\n<li>C01. The Python Data Model</li>\n</ul>\n</li>\n<li>P2. Data Structure\n<ul>\n<li>C02. An Array of Sequences\n<ul>\n<li>Overview of Built-in Sequences</li>\n<li>List Comprehensions and Generator Expressions</li>\n<li>Tuples Are Not Just Immutable Lists</li>\n<li>Slicing</li>\n<li>Using plus and star with Sequences</li>\n<li>Augmented Assignment with Sequences</li>\n<li>list.sort and the sorted Built-In Function</li>\n<li>Managing Ordered Sequences with bisect</li>\n<li>When a List Is Not the Answer</li>\n<li>Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C03. Dictionaries and Sets\n<ul>\n<li>Generic Mapping Types</li>\n<li>Dict Comprehensions</li>\n<li>Common Mapping Methods</li>\n<li>Mappings with Flexiable Key Lookup</li>\n<li>Variations of Dict</li>\n<li>Subclassing UserDict</li>\n<li>Immutable Mappings</li>\n<li>Set Theory</li>\n<li>Dict and Set Under the Hood</li>\n<li>Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C04. Text VS Bytes\n<ul>\n<li>Character Issues</li>\n<li>Byte Essentials</li>\n<li>Basic Encoders/Decoders</li>\n<li>Understanding Encode/Decode Problems</li>\n<li>Handling Text Files</li>\n<li>Normalizng Unicode for Saner Comparisons</li>\n<li>Sorting Unicode Text</li>\n<li>The Unicode Database</li>\n<li>Dual-Mode str and bytes APIs</li>\n<li>Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>P3. Function as Objects\n<ul>\n<li>C05. First-Class Function\n<ul>\n<li>Treating a Function Like an Object</li>\n<li>Higher-Order Functions</li>\n<li>Anonymous Functions</li>\n<li>The Seven Flavors of Callable Objects</li>\n<li>User-Defined Callable Types</li>\n<li>Function Introspection</li>\n<li>From Positional to Keyword-Only Parameters</li>\n<li>Function Annotations</li>\n<li>Packages for Functional Programming</li>\n<li>Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C06. Design Patterns with First-Class Functions\n<ul>\n<li>Refactoring Strategy</li>\n<li>Command</li>\n<li>Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C07. Function Decorators and Closures\n<ul>\n<li>Decorators 101</li>\n<li>When Python Executes Decorators</li>\n<li>Decorator-Enhanced Strategy Pattern</li>\n<li>Variable Scope Rules</li>\n<li>Closures</li>\n<li>The nonlocal Declaration</li>\n<li>Implementing a Simple Decorator</li>\n<li>Decorators In the Standard Library</li>\n<li>Stacked Decorators</li>\n<li>Parameterized Decorators</li>\n<li>Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>P4. Object-Oriented Idioms\n<ul>\n<li>C08. Object References, Mutability, and Recycling\n<ul>\n<li>Variables Are Not Boxes</li>\n<li>Identity, Equality , and Aliases</li>\n<li>Copies Are Shallow by Default</li>\n<li>Function Parameters as References</li>\n<li>del and Garbage Collection</li>\n<li>Weak References</li>\n<li>Tricts Python Plays with Immutables</li>\n<li>Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C09. A Pythonic Object\n<ul>\n<li>Object Representations</li>\n<li>Vector Class Redux</li>\n<li>An Alternative Constructor</li>\n<li>classmethod VS staticmethod</li>\n<li>Formatted Displays</li>\n<li>A Hashable Vector2d</li>\n<li>Private and “Protected” Attributes in Python</li>\n<li>Saving Space with the slots Class Attribute</li>\n<li>Overriding Class Attributes</li>\n<li>Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C10. Sequence Hacking , Hashing , and Slicing\n<ul>\n<li>Vector: A User-Defined Sequence Type</li>\n<li>Vector Take #1: Vector2d Compatible</li>\n<li>Protocols and Duck Typing</li>\n<li>Vector Take #2: A Sliceable Sequence</li>\n<li>Vector Take #3: Dynamic Attribute Access</li>\n<li>Vector Take #4: Hashing and a Faster ==</li>\n<li>Vector Take #5: Formatting</li>\n<li>Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C11. Interfaces: From Protocols to ABCs\n<ul>\n<li>Interfaces and Protocols in Python Culture</li>\n<li>Python Digs Sequences</li>\n<li>Monkey-Patching to Implement a Protocol at Runtime</li>\n<li>Alex Martelli’s Waterfowl</li>\n<li>Subclassing an ABC</li>\n<li>ABCs in the Standard Library</li>\n<li>Defining and Using an ABC</li>\n<li>How the Tombola Subclasses Were Tested</li>\n<li>Usage of register in Practice</li>\n<li>Geese Can Behave as Ducks</li>\n<li>Chapter Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C12. Inheritance: For Good or For Worse\n<ul>\n<li>Subclassing Built-In Types Is Tricty</li>\n<li>Multiple Inheritance and Method Resolution Order</li>\n<li>Multiple Inheritance in the Real World</li>\n<li>Coping with Multiple Inheritance</li>\n<li>A Modern Example: Mixins in Django Generic Views</li>\n<li>Chapter Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C13. Operator Overloading: Doing It Right\n<ul>\n<li>Operator Overloading 101</li>\n<li>Unary Operators</li>\n<li>Overloading plus for Verctor Addtion</li>\n<li>Overloading star for Scalar Multiplication</li>\n<li>Rich Comparison Operators</li>\n<li>Augmented Assignment Operator</li>\n<li>Chapter Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>P5. Control Flow\n<ul>\n<li>C14. Iterables, Iterators , and Generators\n<ul>\n<li>Sentence Take #1 : A Sequence of Words Iterables VS Iterators</li>\n<li>Iterables Versus Itertors</li>\n<li>Sentence Take #2 : A Classic Iterator</li>\n<li>Sentence Take #3 : A Generator Function</li>\n<li>Sentence Take #4 : A Lazy Implementation</li>\n<li>Sentence Take #5 : A Generator Expression</li>\n<li>Generator Expressions : When to Use Them</li>\n<li>Another Example : Arithmetic Progression Generator</li>\n<li>Generator Functions in the Standard Library</li>\n<li>New Syntax In Python 3.3 : yield from</li>\n<li>Iterable Reducing Functions</li>\n<li>A Closer Look at the iter Function</li>\n<li>Case Study : Generators in a Databse Conversion Utility</li>\n<li>Generators as Coroutines</li>\n<li>Chapter Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C15. Context Managers and else Blocks\n<ul>\n<li>Do This , Then That: else Blocks Beyond if</li>\n<li>Context Managers and with Blocks</li>\n<li>The contextlib Utilities</li>\n<li>Using @contextmanager</li>\n<li>Chapter Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C16. Coroutines\n<ul>\n<li>How Coroutines Evolved from Generators</li>\n<li>Basic Behavior of a Generator Used as a Coroutine</li>\n<li>Example: Coroutine to Compute a Running Average</li>\n<li>Decorators for Conroutine Priming</li>\n<li>Coroutine Termination and Exception Handing</li>\n<li>Returning a Value from a Coroutine</li>\n<li>Using Yield from</li>\n<li>The Meaning of yield from</li>\n<li>Use Case: Coroutines for Discrete Event Simulation</li>\n<li>Chapter Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C17. Concurrency with Futures\n<ul>\n<li>e.g. Web Downloads in Three Styles</li>\n<li>Blocking I/O and the GIL</li>\n<li>Launching Processes with concurrent.futures</li>\n<li>Experimenting with Executor.map</li>\n<li>Downloads with Progress Display and Error Handling</li>\n<li>Chapter Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C18. Concurrency with asyncio\n<ul>\n<li>Thread VS Coroutine : A Comparison</li>\n<li>Downloading with asyncio and aiohttp</li>\n<li>Running Circling Around Blocking Calls</li>\n<li>Enhancing the asyncio downloader Script</li>\n<li>From Callbacks to Futures and Coroutines</li>\n<li>Writing asyncio Servers</li>\n<li>Chapter Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>P6. Metaprogramming\n<ul>\n<li>C19. Dynamic Attributes and Properties\n<ul>\n<li>Data Wrangling with Dynamic Attributes</li>\n<li>Using a Property for Attribute Validation</li>\n<li>A Proper Look at Properties</li>\n<li>Coding a Property Factory</li>\n<li>Handling Attribute Deletion</li>\n<li>Essential Attributes and Functions For Attribute Handling</li>\n<li>Chapter Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C20. Attribute Descriptors\n<ul>\n<li>Desciptor Example: Attribute Validation</li>\n<li>Overriding VS Nonoverriding Descriptors</li>\n<li>Methods Are Descriptors</li>\n<li>Descriptor Usage Tips</li>\n<li>Descriptor docstring and Overriding Deletion</li>\n<li>Chapter Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n<li>C21. Class Metaprogramming\n<ul>\n<li>A Class Factory</li>\n<li>A Class Decorator for Customizing Descriptors</li>\n<li>What Happens When: Import Time VS Runtime</li>\n<li>Metaclasses 101</li>\n<li>A Metaclass for Customizing Descriptors</li>\n<li>The Metaclass prepare Special Method</li>\n<li>Classes as Objects</li>\n<li>Chapter Summary</li>\n<li>Further Reading</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"p1-prologue\"><a class=\"v-toc-item\" href=\"#p1-prologue\">#</a> P1. Prologue</h2>\n<p>序言部分讲了很重要的一点，Python 最优秀的地方就是其统一性。</p>\n<p>Pythonic 体现在使用的 Python Data Model 来表述，其途径主要编写<strong>特殊方法 (Special/Magic Method)</strong></p>\n<ul>\n<li>Iteration</li>\n<li>Collections</li>\n<li>Attribute access</li>\n<li>Operator overloading</li>\n<li>Function and method invocation</li>\n<li>Object creation and destruction</li>\n<li>String representation and formatting</li>\n<li>Managed contexts (i.e., with blocks)</li>\n</ul>\n<h3 id=\"c01-the-python-data-model\"><a class=\"v-toc-item\" href=\"#c01-the-python-data-model\">#</a> C01. The Python Data Model</h3>\n<p>扩展阅读：<a href=\"http://zopeinterface.readthedocs.io/en/latest/\">http://zopeinterface.readthedocs.io/en/latest/</a></p>\n<h4 id=\"a-pythonic-card-deck\"><a class=\"v-toc-item\" href=\"#a-pythonic-card-deck\">#</a> A Pythonic Card Deck</h4>\n<pre><code class=\"language-python\">#### <span class=\"token number\">1.</span> 案例一：纸牌 nametuple\nCard <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span><span class=\"token function\">namedtuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Card'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'rank'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'suit'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n# Card 是一个类\n# 重载到 <span class=\"token function\">Cards</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span> 的 __init__ <span class=\"token punctuation\">,</span> __len__ <span class=\"token punctuation\">,</span> __getitem__\n# 重载可以之后可以使用 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">语法</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">choice</span><span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">in</span> sorted reversed<span class=\"token punctuation\">,</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>calc_score<span class=\"token punctuation\">)</span> card <span class=\"token keyword\">in</span> cards <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n# 还可以重载 __setitem__<span class=\"token punctuation\">,</span> 之后就可以 shuffle\n# 重载 __repr__ <span class=\"token punctuation\">,</span> __abs__ <span class=\"token punctuation\">,</span> __bool__ <span class=\"token punctuation\">,</span> __add__ <span class=\"token punctuation\">,</span> __mul__ 可以 <span class=\"token function\">repr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>\n</code></pre>\n<h4 id=\"how-special-methods-are-used\"><a class=\"v-toc-item\" href=\"#how-special-methods-are-used\">#</a> How Special Methods Are Used</h4>\n<pre><code class=\"language-python\">obj<span class=\"token punctuation\">.</span><span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nobj<span class=\"token punctuation\">.</span>__\n</code></pre>\n<h4 id=\"overview-of-special-methods\"><a class=\"v-toc-item\" href=\"#overview-of-special-methods\">#</a> Overview of Special Methods</h4>\n<p>对于内置类型 (list, str , bytearray) 解释器在调用特殊方法的时候调用 C 库，比如 CPython 实现的 len 方法一般直接会调用 PyVarObject C Struct ob_size</p>\n<p>特殊方法往往并不是显示调用，而是被隐式调用。比如 init 在 new 中的作用，比如 for item in items 世界上会调用 iter(items), 这也会隐式调用 items.<strong>iter</strong>() .</p>\n<p>一般当大量使用特殊方法的时候，都是在进行元编程。</p>\n<pre><code class=\"language-python\"><span class=\"token function\">bool</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> 先调用 x<span class=\"token punctuation\">.</span><span class=\"token function\">__bool__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> 如果 x<span class=\"token punctuation\">.</span><span class=\"token function\">__bool__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 没有实现，则调用 x<span class=\"token punctuation\">.</span><span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 如果为 <span class=\"token number\">0</span> 则返回 False\n<span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> 可以直接返回 arr，arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 是排序内部。\n</code></pre>\n<p>特殊方法名 （有操作符）</p>\n<table>\n<thead>\n<tr>\n<th>种类</th>\n<th>方法名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String/Bytes</td>\n<td>repr , str , format , bytes</td>\n</tr>\n<tr>\n<td>Conversion to number</td>\n<td>abs , bool , complex , init , float , hash , index</td>\n</tr>\n<tr>\n<td>Emulating collections</td>\n<td>len , getitem , setitem , delitem , contains</td>\n</tr>\n<tr>\n<td>Iteration</td>\n<td>iter, reversed , next</td>\n</tr>\n<tr>\n<td>Emulating callables</td>\n<td>call</td>\n</tr>\n<tr>\n<td>Context management</td>\n<td>enter, exit</td>\n</tr>\n<tr>\n<td>Instance creation &amp; destruction</td>\n<td>new , init , del</td>\n</tr>\n<tr>\n<td>Attribute management</td>\n<td>getattr , getattribute , setattr , delattr, dir</td>\n</tr>\n<tr>\n<td>Attribute descriptors</td>\n<td>get , set ,delete</td>\n</tr>\n<tr>\n<td>Class service</td>\n<td>prepare , instancecheck , subclasscheck</td>\n</tr>\n</tbody>\n</table>\n<p>特殊方法名 （无操作符）</p>\n<table>\n<thead>\n<tr>\n<th>种类</th>\n<th>方法名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unary numeric operators</td>\n<td>neg , pos , abs</td>\n</tr>\n<tr>\n<td>Rich comparison operators</td>\n<td>lt , le , eq , ne , gt , ge</td>\n</tr>\n<tr>\n<td>Arithmetic operators</td>\n<td>add ,sub , mul ,truediv ,floordiv ,mod , divmod , pow , round round</td>\n</tr>\n<tr>\n<td>Reversed arithmetic operators</td>\n<td>radd , rsub , rmul , rtruediv, rfloordiv , rmod , rdivmod, rpow</td>\n</tr>\n<tr>\n<td>Augmented assignment mathmatic</td>\n<td>iadd , isub , imul , itruediv, ifloordiv</td>\n</tr>\n<tr>\n<td>Bitwise operators</td>\n<td>invert , lshift , rshift , and , or</td>\n</tr>\n<tr>\n<td>Reversed bitwise operators</td>\n<td>rlshift , rrshift , rand , rxor , ror</td>\n</tr>\n<tr>\n<td>Augmented assignment bitwise</td>\n<td>ilshift , irshift , iand , ixor , ior</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"why-len-is-not-a-method\"><a class=\"v-toc-item\" href=\"#why-len-is-not-a-method\">#</a> Why len Is Not a Method</h4>\n<pre><code class=\"language-python\">因为对 不同类型并不是一定调用 __len__ <span class=\"token punctuation\">,</span> 对于基本类型查看 c struct 中长度，对于其他类型直接调用 __len__ <span class=\"token punctuation\">,</span> 这种区分对待\n</code></pre>\n<h2 id=\"p2-data-structure\"><a class=\"v-toc-item\" href=\"#p2-data-structure\">#</a> P2. Data Structure</h2>\n<h3 id=\"c02-an-array-of-sequences\"><a class=\"v-toc-item\" href=\"#c02-an-array-of-sequences\">#</a> C02. An Array of Sequences</h3>\n<p>Strings, lists, byte sequences, arrays, XML elements, and database results share a rich set of common operations including iteration, slicing, sorting, and concatenation.</p>\n<h4 id=\"overview-of-built-in-sequences\"><a class=\"v-toc-item\" href=\"#overview-of-built-in-sequences\">#</a> Overview of Built-in Sequences</h4>\n<p>C 实现的按照 item 是否为同一类型分为：</p>\n<ul>\n<li><strong>Container sequences</strong>: list, tuple, and collections.deque can hold items of different types.</li>\n<li><strong>Flat sequences</strong>: str, bytes, bytearray, memoryview, and array.array hold items of one type.</li>\n</ul>\n<p>C 实现按照 item 是否可修改分为：</p>\n<ul>\n<li><strong>Mutable sequences</strong>: list, bytearray, array.array, collections.deque, and memoryview</li>\n<li><strong>Immutable sequences</strong>: tuple, str, and bytes</li>\n</ul>\n<h4 id=\"list-comprehensions-and-generator-expressions\"><a class=\"v-toc-item\" href=\"#list-comprehensions-and-generator-expressions\">#</a> List Comprehensions and Generator Expressions</h4>\n<pre><code class=\"language-python\">new_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">]</span>\nnew_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nnew_items <span class=\"token operator\">=</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>lambda x<span class=\"token operator\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n# 可写成\nnew_items <span class=\"token operator\">=</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>lambda x<span class=\"token operator\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>list 往往和 map filter 以及 listcomp 用于创建简单的序列</p>\n<h4 id=\"tuples-are-not-just-immutable-lists\"><a class=\"v-toc-item\" href=\"#tuples-are-not-just-immutable-lists\">#</a> Tuples Are Not Just Immutable Lists</h4>\n<ul>\n<li>解包赋值</li>\n<li>不要手贱加逗号</li>\n<li>下划线可以用作临时变量 （但是 django 中下划线用于中英文）</li>\n</ul>\n<pre><code class=\"language-python\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rest <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> # <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rest <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> # <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rest <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> # <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\na<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>body<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> # <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> # <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>namedtuple</li>\n</ul>\n<pre><code class=\"language-python\">City <span class=\"token operator\">=</span> <span class=\"token function\">namedtuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">'City'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name country population coordinates'</span><span class=\"token punctuation\">)</span>\ntokyo <span class=\"token operator\">=</span> <span class=\"token function\">City</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tokyo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'JP'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36.933</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">35.689722</span><span class=\"token punctuation\">,</span> <span class=\"token number\">139.691667</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntokyo<span class=\"token punctuation\">.</span>population\ntokyo<span class=\"token punctuation\">.</span>coordinates\ntokyo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nCity<span class=\"token punctuation\">.</span>_fields # tuple\n</code></pre>\n<h4 id=\"slicing\"><a class=\"v-toc-item\" href=\"#slicing\">#</a> Slicing</h4>\n<p>为何 Slice 和 Range 会排除 最后一个 Item?</p>\n<p>书中讲的太复杂，其实这个和尺子是一个作用，尺子从 0 刻度开始，这样方便丈量。</p>\n<p>比如说：</p>\n<ul>\n<li>items[0:10] 为 10 厘米</li>\n<li>items[10] 为 10 刻度后一个单位，即 items[10:11]</li>\n<li>items[2:] 为 2 刻度后面若干个单位</li>\n<li>items[::3] 以三为单位，从 0 刻度开始，最后为结尾，每三个</li>\n</ul>\n<pre><code>a[i, j] # 调用 a.__getitem__((i, j))\n</code></pre>\n<h4 id=\"augmented-assignment-with-sequences\"><a class=\"v-toc-item\" href=\"#augmented-assignment-with-sequences\">#</a> Augmented Assignment with Sequences</h4>\n<pre><code class=\"language-python\">对于不可变类型 赋值 l <span class=\"token operator\">*=</span> <span class=\"token number\">2</span> 在内存中则是创建了新的两个长度的元祖，然后赋值\n而由于字符串则需要注意，str_a <span class=\"token operator\">+=</span> <span class=\"token string\">\"str b\"</span> <span class=\"token punctuation\">,</span> 虽然为不可变变量，但并不需要拷贝整个字符串（特殊情况）<span class=\"token punctuation\">,</span> 但字符串的拼接建议还是<span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nt<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">]</span>\n# 结果为既赋值成功，又报错\n# 但 t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> 可以赋值成功\n<span class=\"token keyword\">import</span> dis\ndis<span class=\"token punctuation\">.</span><span class=\"token function\">dis</span><span class=\"token punctuation\">(</span><span class=\"token string\">'s[a] += b'</span><span class=\"token punctuation\">)</span> # 可以查看字节码\n</code></pre>\n<ol>\n<li>尽量不要在不可变变量内保存可变变量</li>\n<li>t[2] += [50,60] 并不是原子操作，因为，当做了一半的时候，抛出的错误。</li>\n</ol>\n<h4 id=\"listsort-and-the-sorted-built-in-function\"><a class=\"v-toc-item\" href=\"#listsort-and-the-sorted-built-in-function\">#</a> list.sort and the sorted Built-In Function</h4>\n<p>对于 sort 和 sorted 来说，reverse 代表 desc,key 为单参数用于计算每一个值的结果的函数。<br>\nlist.sort 直接针对列表排序，并且返回 None（出于编程习惯的问题，直接返回 None 的函数大多是对程序有一定的修改）</p>\n<h4 id=\"managing-ordered-sequences-with-bisect\"><a class=\"v-toc-item\" href=\"#managing-ordered-sequences-with-bisect\">#</a> Managing Ordered Sequences with bisect</h4>\n<pre><code class=\"language-python\"><span class=\"token keyword\">import</span> bisect\nbisect <span class=\"token operator\">-</span><span class=\"token operator\">></span> bisect_right\nbisect_left\ninsort <span class=\"token operator\">-</span><span class=\"token operator\">></span> insort_left\ninsort_right\n# 搜索可以用来划分档次\ndef <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">,</span> breakpoints<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> grades<span class=\"token operator\">=</span><span class=\"token string\">'FDCBA'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    i <span class=\"token operator\">=</span> bisect<span class=\"token punctuation\">.</span><span class=\"token function\">bisect</span><span class=\"token punctuation\">(</span>breakpoints<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> grades<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> score <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> # <span class=\"token punctuation\">[</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h4 id=\"when-a-list-is-not-the-answer\"><a class=\"v-toc-item\" href=\"#when-a-list-is-not-the-answer\">#</a> When a List Is Not the Answer</h4>\n<p>list 是一种 mix-typed 的数据结构，即可以存放不同种类型的数据结构，由此带来的问题自然是性能问题：</p>\n<ul>\n<li>list 第一是 mix-typed 的数据结构</li>\n<li>动态数组，并非数组</li>\n</ul>\n<p>当考虑性能的时候，则需要考虑是不是要换一个更好的数据结构：</p>\n<ul>\n<li>适用于类型单一的 array</li>\n<li>增删比较多，或者需要使用 FIFO,LIFO, 则使用 deque (double-ended queue)</li>\n</ul>\n<pre><code class=\"language-python\"># Arrays\nfloats <span class=\"token operator\">=</span> <span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n# NumPy and SciPy\n\n# Deques and Other Queue\n</code></pre>\n<h4 id=\"deques-and-other-queue\"><a class=\"v-toc-item\" href=\"#deques-and-other-queue\">#</a> Deques and Other Queue</h4>\n<ul>\n<li>Deque</li>\n<li>queue 线程安全 Queue, LifoQueue, and PriorityQueue</li>\n<li>multiprocessing Queue 和 JoinableQueue</li>\n<li>asyncio Queue, LifoQueue, PriorityQueue, and JoinableQueue</li>\n</ul>\n<h3 id=\"c03-dictionaries-and-sets\"><a class=\"v-toc-item\" href=\"#c03-dictionaries-and-sets\">#</a> C03. Dictionaries and Sets</h3>\n<p>本章内容：</p>\n<ul>\n<li>Common dictionary methods</li>\n<li>Special handling for missing keys</li>\n<li>Variations of dict in the standard library</li>\n<li>The set and frozenset types</li>\n<li>How hash tables work</li>\n<li>Implications of hash tables (key type limitations, unpredictable ordering, etc.)</li>\n</ul>\n<h5 id=\"generic-mapping-types\"><a class=\"v-toc-item\" href=\"#generic-mapping-types\">#</a> Generic Mapping Types</h5>\n<p>Hashable ? 一个 obj 的 hash value 在他生命周期内 hash value 是不变的。一个 frozen set 也是 hashable 的（包括每个子元素）.</p>\n<blockquote>\n<p>All of Python’s immutable built-in objects are hashable , except that tuple<br>\n如果一个 tuple 是每个子元素都是 hashable 的话，则该 tuple 也是 hashable 的。</p>\n</blockquote>\n<pre><code class=\"language-bash\"># 直接在 dict 上面进行操作\nindex<span class=\"token punctuation\">.</span><span class=\"token function\">setdefault</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span>\n</code></pre>\n<h5 id=\"missing-方法\"><a class=\"v-toc-item\" href=\"#missing-方法\">#</a> missing 方法</h5>\n<p>keyerror 会触发 missing 方法</p>\n<h5 id=\"variations-of-dict\"><a class=\"v-toc-item\" href=\"#variations-of-dict\">#</a> Variations of Dict</h5>\n<p>OrderedDict - 有序字典<br>\nChainMap - 组装多个字典，按照次序搜索<br>\nCounter - COUNTER</p>\n<h5 id=\"immutable-mappings\"><a class=\"v-toc-item\" href=\"#immutable-mappings\">#</a> Immutable Mappings</h5>\n<h5 id=\"set-theory\"><a class=\"v-toc-item\" href=\"#set-theory\">#</a> Set Theory</h5>\n<p>交差并补</p>\n<pre><code class=\"language-python\"># <span class=\"token number\">1.</span> 交集\ns <span class=\"token operator\">&amp;</span> z\nz <span class=\"token operator\">&amp;</span> s\ns <span class=\"token operator\">&amp;=</span> z\n# <span class=\"token number\">2.</span> 差集\ns <span class=\"token operator\">-</span> z\nz <span class=\"token operator\">-</span> s\ns <span class=\"token operator\">-=</span> z\n# <span class=\"token number\">3.</span> 并集\ns <span class=\"token operator\">|</span> z\nz <span class=\"token operator\">|</span> s\ns <span class=\"token operator\">|=</span> z\n# <span class=\"token number\">4.</span> 补集\ns <span class=\"token operator\">^</span> z\nz <span class=\"token operator\">^</span> s\ns <span class=\"token operator\">^=</span> z\n\n# 被包含\ne <span class=\"token keyword\">in</span> z\n\n# 子集\ns <span class=\"token operator\">&lt;=</span> z\n<span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> z\n</code></pre>\n<h5 id=\"dict-and-set-under-the-hood\"><a class=\"v-toc-item\" href=\"#dict-and-set-under-the-hood\">#</a> Dict and Set Under the Hood</h5>\n<h3 id=\"c04-text-vs-bytes\"><a class=\"v-toc-item\" href=\"#c04-text-vs-bytes\">#</a> C04. Text VS Bytes</h3>\n<pre><code> - Character Issues\n - Byte Essentials\n - Basic Encoders/Decoders\n - Understanding Encode/Decode Problems\n - Handling Text Files\n - Normalizng Unicode for Saner Comparisons\n - Sorting Unicode Text\n - The Unicode Database\n - Dual-Mode str and bytes APIs\n - Summary\n - Further Reading\n</code></pre>\n<h2 id=\"p3-function-as-objects\"><a class=\"v-toc-item\" href=\"#p3-function-as-objects\">#</a> P3. Function as Objects</h2>\n<p>function is the first-class object</p>\n<p>Higher-Order Functions</p>\n<ul>\n<li>\n<p>设计模式</p>\n</li>\n<li>\n<p>装饰器</p>\n</li>\n<li>\n<p>callables</p>\n</li>\n<li>\n<p>function attributes</p>\n</li>\n<li>\n<p>introspection</p>\n</li>\n<li>\n<p>parameter annotations</p>\n</li>\n<li>\n<p>nonlocal declaration</p>\n</li>\n<li>\n<p>references, mutability, 实例生命周期，定制自己集合类 collections and ABCs, 多继承，重载操作符。</p>\n</li>\n<li>\n<p>生成器</p>\n</li>\n<li>\n<p>上下文管理器</p>\n</li>\n<li>\n<p>协程 （包括 Yield)</p>\n</li>\n<li>\n<p>concurrency</p>\n</li>\n<li>\n<p>event-oriented IO asyncio</p>\n</li>\n<li>\n<p>动态创建类</p>\n</li>\n<li>\n<p>descriptors</p>\n</li>\n<li>\n<p>class decorators</p>\n</li>\n<li>\n<p>metaclasses</p>\n</li>\n</ul>\n<h3 id=\"c05-first-class-function\"><a class=\"v-toc-item\" href=\"#c05-first-class-function\">#</a> C05. First-Class Function</h3>\n<pre><code> - Treating a Function Like an Object\n - Higher-Order Functions\n - Anonymous Functions\n - The Seven Flavors of Callable Objects\n - User-Defined Callable Types\n - Function Introspection\n - From Positional to Keyword-Only Parameters\n - Function Annotations\n - Packages for Functional Programming\n - Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c06-design-patterns-with-first-class-functions\"><a class=\"v-toc-item\" href=\"#c06-design-patterns-with-first-class-functions\">#</a> C06. Design Patterns with First-Class Functions</h3>\n<pre><code> - Refactoring Strategy\n - Command\n - Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c07-function-decorators-and-closures\"><a class=\"v-toc-item\" href=\"#c07-function-decorators-and-closures\">#</a> C07. Function Decorators and Closures</h3>\n<pre><code> - Decorators 101\n - When Python Executes Decorators\n - Decorator-Enhanced Strategy Pattern\n - Variable Scope Rules\n - Closures\n - The nonlocal Declaration\n - Implementing a Simple Decorator\n - Decorators In the Standard Library\n - Stacked Decorators\n - Parameterized Decorators\n - Summary\n - Further Reading\n</code></pre>\n<h2 id=\"p4-object-oriented-idioms\"><a class=\"v-toc-item\" href=\"#p4-object-oriented-idioms\">#</a> P4. Object-Oriented Idioms</h2>\n<h3 id=\"c08-object-references-mutability-and-recycling\"><a class=\"v-toc-item\" href=\"#c08-object-references-mutability-and-recycling\">#</a> C08. Object References, Mutability, and Recycling</h3>\n<p>reference variable : variable 不是盒子，贴在盒子上的标签。</p>\n<p>赋值并非创建 Copy<br>\n赋值给一个值并非改变之前绑定的值，而仅仅是重新绑定 rebinding<br>\n函数由于参数为 reference, 所以可以修改 mutable 的变量<br>\n函数参数不应当初始化为可修改的值。</p>\n<p>id 与 == : 内存值 和 值相等<br>\ncopy 默认是浅拷贝<br>\n函数参数是引用<br>\nGC 使用的引用计数，通过 weakref.finalize 可以增加 obj 被回收的回调函数<br>\n强引用和弱引用，weakref 具体使用场景？ <a href=\"https://pymotw.com/3/weakref/\">https://pymotw.com/3/weakref/</a><br>\nOne example is a class that wants to keep track of all its current instances. This can be done with weak references, a low-level mechanism underlying the more useful collections WeakValueDictionary, WeakKey Dictionary, WeakSet, and the finalize function from the weakref module.<br>\n公用字符串字面量和小的数的技巧叫做 interning</p>\n<p>PS:</p>\n<pre><code>在 IPython 中 _ 为某个表达式返回的值\n</code></pre>\n<pre><code> - Weak References\n - Tricts Python Plays with Immutables\n - Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c09-a-pythonic-object\"><a class=\"v-toc-item\" href=\"#c09-a-pythonic-object\">#</a> C09. A Pythonic Object</h3>\n<pre><code> - Object Representations\n - Vector Class Redux\n - An Alternative Constructor\n - classmethod VS staticmethod\n - Formatted Displays\n - A Hashable Vector2d\n - Private and &quot;Protected&quot; Attributes in Python\n - Saving Space with the slots Class Attribute\n - Overriding Class Attributes\n - Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c10-sequence-hacking-hashing-and-slicing\"><a class=\"v-toc-item\" href=\"#c10-sequence-hacking-hashing-and-slicing\">#</a> C10. Sequence Hacking , Hashing , and Slicing</h3>\n<pre><code> - Vector: A User-Defined Sequence Type\n - Vector Take #1: Vector2d Compatible\n - Protocols and Duck Typing\n - Vector Take #2: A Sliceable Sequence\n - Vector Take #3: Dynamic Attribute Access\n - Vector Take #4: Hashing and a Faster ==\n - Vector Take #5: Formatting\n - Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c11-interfaces-from-protocols-to-abcs\"><a class=\"v-toc-item\" href=\"#c11-interfaces-from-protocols-to-abcs\">#</a> C11. Interfaces: From Protocols to ABCs</h3>\n<pre><code> - Interfaces and Protocols in Python Culture\n - Python Digs Sequences\n - Monkey-Patching to Implement a Protocol at Runtime\n - Alex Martelli's Waterfowl\n - Subclassing an ABC\n - ABCs in the Standard Library\n - Defining and Using an ABC\n - How the Tombola Subclasses Were Tested\n - Usage of register in Practice\n - Geese Can Behave as Ducks\n - Chapter Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c12-inheritance-for-good-or-for-worse\"><a class=\"v-toc-item\" href=\"#c12-inheritance-for-good-or-for-worse\">#</a> C12. Inheritance: For Good or For Worse</h3>\n<pre><code> - Subclassing Built-In Types Is Tricty\n - Multiple Inheritance and Method Resolution Order\n - Multiple Inheritance in the Real World\n - Coping with Multiple Inheritance\n - A Modern Example: Mixins in Django Generic Views\n - Chapter Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c13-operator-overloading-doing-it-right\"><a class=\"v-toc-item\" href=\"#c13-operator-overloading-doing-it-right\">#</a> C13. Operator Overloading: Doing It Right</h3>\n<blockquote>\n<p>依据我的经验。除非特别适合，比如说矩阵相加，否则不要进行操作符重载。 因为 加减乘除之类的操作符本身就容易有二义性。</p>\n</blockquote>\n<h2 id=\"p5-control-flow\"><a class=\"v-toc-item\" href=\"#p5-control-flow\">#</a> P5. Control Flow</h2>\n<h3 id=\"c14-iterables-iterators-and-generators\"><a class=\"v-toc-item\" href=\"#c14-iterables-iterators-and-generators\">#</a> C14. Iterables, Iterators , and Generators</h3>\n<pre><code> - Sentence Take #1 : A Sequence of Words Iterables VS Iterators\n - Iterables Versus Itertors\n - Sentence Take #2 : A Classic Iterator\n - Sentence Take #3 : A Generator Function\n - Sentence Take #4 : A Lazy Implementation\n - Sentence Take #5 : A Generator Expression\n - Generator Expressions : When to Use Them\n - Another Example : Arithmetic Progression Generator\n - Generator Functions in the Standard Library\n - New Syntax In Python 3.3 : yield from\n - Iterable Reducing Functions\n - A Closer Look at the iter Function\n - Case Study : Generators in a Databse Conversion Utility\n - Generators as Coroutines\n - Chapter Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c15-context-managers-and-else-blocks\"><a class=\"v-toc-item\" href=\"#c15-context-managers-and-else-blocks\">#</a> C15. Context Managers and else Blocks</h3>\n<pre><code> - Do This , Then That: else Blocks Beyond if\n - Context Managers and with Blocks\n - The contextlib Utilities\n - Using @contextmanager\n - Chapter Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c16-coroutines\"><a class=\"v-toc-item\" href=\"#c16-coroutines\">#</a> C16. Coroutines</h3>\n<pre><code> - How Coroutines Evolved from Generators\n - Basic Behavior of a Generator Used as a Coroutine\n - Example: Coroutine to Compute a Running Average\n - Decorators for Conroutine Priming\n - Coroutine Termination and Exception Handing\n - Returning a Value from a Coroutine\n - Using Yield from\n - The Meaning of yield from\n - Use Case: Coroutines for Discrete Event Simulation\n - Chapter Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c17-concurrency-with-futures\"><a class=\"v-toc-item\" href=\"#c17-concurrency-with-futures\">#</a> C17. Concurrency with Futures</h3>\n<pre><code> - e.g. Web Downloads in Three Styles\n - Blocking I/O and the GIL\n - Launching Processes with concurrent.futures\n - Experimenting with Executor.map\n - Downloads with Progress Display and Error Handling\n - Chapter Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c18-concurrency-with-asyncio\"><a class=\"v-toc-item\" href=\"#c18-concurrency-with-asyncio\">#</a> C18. Concurrency with asyncio</h3>\n<pre><code> - Thread VS Coroutine : A Comparison\n - Downloading with asyncio and aiohttp\n - Running Circling Around Blocking Calls\n - Enhancing the asyncio downloader Script\n - From Callbacks to Futures and Coroutines\n - Writing asyncio Servers\n - Chapter Summary\n - Further Reading\n</code></pre>\n<h2 id=\"p6-metaprogramming\"><a class=\"v-toc-item\" href=\"#p6-metaprogramming\">#</a> P6. Metaprogramming</h2>\n<h3 id=\"c19-dynamic-attributes-and-properties\"><a class=\"v-toc-item\" href=\"#c19-dynamic-attributes-and-properties\">#</a> C19. Dynamic Attributes and Properties</h3>\n<pre><code> - Data Wrangling with Dynamic Attributes\n - Using a Property for Attribute Validation\n - A Proper Look at Properties\n - Coding a Property Factory\n - Handling Attribute Deletion\n - Essential Attributes and Functions For Attribute Handling\n - Chapter Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c20-attribute-descriptors\"><a class=\"v-toc-item\" href=\"#c20-attribute-descriptors\">#</a> C20. Attribute Descriptors</h3>\n<pre><code> - Desciptor Example: Attribute Validation\n - Overriding VS Nonoverriding Descriptors\n - Methods Are Descriptors\n - Descriptor Usage Tips\n - Descriptor docstring and Overriding Deletion\n - Chapter Summary\n - Further Reading\n</code></pre>\n<h3 id=\"c21-class-metaprogramming\"><a class=\"v-toc-item\" href=\"#c21-class-metaprogramming\">#</a> C21. Class Metaprogramming</h3>\n<pre><code> - A Class Factory\n - A Class Decorator for Customizing Descriptors\n - What Happens When: Import Time VS Runtime\n - Metaclasses 101\n - A Metaclass for Customizing Descriptors\n - The Metaclass prepare Special Method\n - Classes as Objects\n - Chapter Summary\n - Further Reading\n</code></pre>\n<h2 id=\"相关链接\"><a class=\"v-toc-item\" href=\"#相关链接\">#</a> 相关链接</h2>\n<ul>\n<li><a href=\"https://docs.python.org/3/reference/datamodel.html\">https://docs.python.org/3/reference/datamodel.html</a></li>\n<li>Python Cookbook</li>\n<li>Python Essential Reference, 4th Edition</li>\n<li>The Art of the Metaobject Protocol</li>\n</ul>\n<p>UPDATE:</p>\n<table>\n<thead>\n<tr>\n<th>日期</th>\n<th>类型</th>\n<th>详细操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>2017-04-18</strong></td>\n<td>动笔</td>\n<td>初始化本文结构</td>\n</tr>\n<tr>\n<td><strong>2017-04-26</strong></td>\n<td>重构</td>\n<td>添加目录和阅读笔记</td>\n</tr>\n</tbody>\n</table>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E6%9C%AC%E6%96%87%E7%9B%AE%E5%BD%95\">本文目录</a></li>\n<li><a href=\"#%E6%9C%AC%E4%B9%A6%E7%BB%93%E6%9E%84\">本书结构</a></li>\n<li><a href=\"#p1-prologue\">P1. Prologue</a>\n<ul>\n<li><a href=\"#c01-the-python-data-model\">C01. The Python Data Model</a>\n<ul>\n<li><a href=\"#a-pythonic-card-deck\">A Pythonic Card Deck</a></li>\n<li><a href=\"#how-special-methods-are-used\">How Special Methods Are Used</a></li>\n<li><a href=\"#overview-of-special-methods\">Overview of Special Methods</a></li>\n<li><a href=\"#why-len-is-not-a-method\">Why len Is Not a Method</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#p2-data-structure\">P2. Data Structure</a>\n<ul>\n<li><a href=\"#c02-an-array-of-sequences\">C02. An Array of Sequences</a>\n<ul>\n<li><a href=\"#overview-of-built-in-sequences\">Overview of Built-in Sequences</a></li>\n<li><a href=\"#list-comprehensions-and-generator-expressions\">List Comprehensions and Generator Expressions</a></li>\n<li><a href=\"#tuples-are-not-just-immutable-lists\">Tuples Are Not Just Immutable Lists</a></li>\n<li><a href=\"#slicing\">Slicing</a></li>\n<li><a href=\"#augmented-assignment-with-sequences\">Augmented Assignment with Sequences</a></li>\n<li><a href=\"#listsort-and-the-sorted-built-in-function\">list.sort and the sorted Built-In Function</a></li>\n<li><a href=\"#managing-ordered-sequences-with-bisect\">Managing Ordered Sequences with bisect</a></li>\n<li><a href=\"#when-a-list-is-not-the-answer\">When a List Is Not the Answer</a></li>\n<li><a href=\"#deques-and-other-queue\">Deques and Other Queue</a></li>\n</ul>\n</li>\n<li><a href=\"#c03-dictionaries-and-sets\">C03. Dictionaries and Sets</a><br>\n*\n<ul>\n<li><a href=\"#generic-mapping-types\">Generic Mapping Types</a></li>\n<li><a href=\"#missing-%E6%96%B9%E6%B3%95\">missing 方法</a></li>\n<li><a href=\"#variations-of-dict\">Variations of Dict</a></li>\n<li><a href=\"#immutable-mappings\">Immutable Mappings</a></li>\n<li><a href=\"#set-theory\">Set Theory</a></li>\n<li><a href=\"#dict-and-set-under-the-hood\">Dict and Set Under the Hood</a></li>\n</ul>\n</li>\n<li><a href=\"#c04-text-vs-bytes\">C04. Text VS Bytes</a></li>\n</ul>\n</li>\n<li><a href=\"#p3-function-as-objects\">P3. Function as Objects</a>\n<ul>\n<li><a href=\"#c05-first-class-function\">C05. First-Class Function</a></li>\n<li><a href=\"#c06-design-patterns-with-first-class-functions\">C06. Design Patterns with First-Class Functions</a></li>\n<li><a href=\"#c07-function-decorators-and-closures\">C07. Function Decorators and Closures</a></li>\n</ul>\n</li>\n<li><a href=\"#p4-object-oriented-idioms\">P4. Object-Oriented Idioms</a>\n<ul>\n<li><a href=\"#c08-object-references-mutability-and-recycling\">C08. Object References, Mutability, and Recycling</a></li>\n<li><a href=\"#c09-a-pythonic-object\">C09. A Pythonic Object</a></li>\n<li><a href=\"#c10-sequence-hacking-hashing-and-slicing\">C10. Sequence Hacking , Hashing , and Slicing</a></li>\n<li><a href=\"#c11-interfaces-from-protocols-to-abcs\">C11. Interfaces: From Protocols to ABCs</a></li>\n<li><a href=\"#c12-inheritance-for-good-or-for-worse\">C12. Inheritance: For Good or For Worse</a></li>\n<li><a href=\"#c13-operator-overloading-doing-it-right\">C13. Operator Overloading: Doing It Right</a></li>\n</ul>\n</li>\n<li><a href=\"#p5-control-flow\">P5. Control Flow</a>\n<ul>\n<li><a href=\"#c14-iterables-iterators-and-generators\">C14. Iterables, Iterators , and Generators</a></li>\n<li><a href=\"#c15-context-managers-and-else-blocks\">C15. Context Managers and else Blocks</a></li>\n<li><a href=\"#c16-coroutines\">C16. Coroutines</a></li>\n<li><a href=\"#c17-concurrency-with-futures\">C17. Concurrency with Futures</a></li>\n<li><a href=\"#c18-concurrency-with-asyncio\">C18. Concurrency with asyncio</a></li>\n</ul>\n</li>\n<li><a href=\"#p6-metaprogramming\">P6. Metaprogramming</a>\n<ul>\n<li><a href=\"#c19-dynamic-attributes-and-properties\">C19. Dynamic Attributes and Properties</a></li>\n<li><a href=\"#c20-attribute-descriptors\">C20. Attribute Descriptors</a></li>\n<li><a href=\"#c21-class-metaprogramming\">C21. Class Metaprogramming</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5\">相关链接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}