{"pageProps":{"post":{"tags":["React"],"path":"20170726_ReactCheatSheet.md","title":"React CheatSheet","slug":"React CheatSheet","date":"2017-07-26","category":"前端开发","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00. 前言</h2>\n<blockquote>\n<p>备注：由于目前没有上 React 的打算，本文暂时太监</p>\n</blockquote>\n<p>之前一直使用 VueJS 进行开发，心血来潮想换换口味，于是就借着自己的一个开源的项目尝试一下 ReactJS , 代码分为两部分，如下：</p>\n<ul>\n<li>前台系统（支持 SSR) <a href=\"https://github.com/twocucao/YaReactBlog\">YaReactBlog</a></li>\n<li>后台系统 <a href=\"https://github.com/twocucao/YaReactAdmin\">YaReactAdmin</a></li>\n</ul>\n<pre><code class=\"language-bash\">\n<span class=\"token constant\">TODO</span><span class=\"token operator\">:</span>\n\n</code></pre>\n<!-- more -->\n<p>本文目录</p>\n<ul>\n<li>前端、单页与 React 开发</li>\n<li>官网的 Tutorial / Guide 要点</li>\n<li>Dva 下使用 React JS 的要点</li>\n</ul>\n<h2 id=\"0x00-前端-单页与-react-开发\"><a class=\"v-toc-item\" href=\"#0x00-前端-单页与-react-开发\">#</a> 0x00. 前端、单页与 React 开发</h2>\n<h3 id=\"01-前端\"><a class=\"v-toc-item\" href=\"#01-前端\">#</a> 0.1. 前端</h3>\n<p>前端开发，是最近几年才出现的独立工种。</p>\n<p>在我的印象中，以前的人很少会区分前端和后端，现在的前端的职责往往是由后端的人顺手做掉的。当然，这种界面一般情况下都比较丑。</p>\n<p>后来，随着浏览器的功能越来越强大，性能越来越好，用户对于界面要求也就越来越高。甚至到后来，对于用户界面的操作的复杂程度要求也越来越高。 传统的后端渲染 Template + 简单的 Ajax 不能满足要求了。</p>\n<blockquote>\n<p>要界面，要交互，要复杂</p>\n</blockquote>\n<p>于是便出现了单页应用。</p>\n<h3 id=\"02-单页\"><a class=\"v-toc-item\" href=\"#02-单页\">#</a> 0.2. 单页</h3>\n<p>单页完全可以当做一个性能不是很强的，运行在浏览器中的，使用 HTML CSS JS 来编写的小型客户端。</p>\n<p>写单页和写客户端基本一致的情况下，于是在这种情况下，前端开发在使用单页后，直接可以 Mock 数据，接着编写界面，接着调通页面的状态和操作，最后发布。</p>\n<h3 id=\"03-reactjs\"><a class=\"v-toc-item\" href=\"#03-reactjs\">#</a> 0.3. ReactJS</h3>\n<p>为什么选用 ReactJS 呢？</p>\n<p>个人认为，框架是用于改善代码组织的一种约束。</p>\n<p>不管是 Web 应用开发的早期的 HTML in PHP OR PHP in HTML, 还是中期的 MVC MTV, 还是后来的 富 AJAX 操作，还是现在的 SPA, 出现的各种框架无非就是为了解决代码组织的问题。</p>\n<p>对后端而言，后端 WEB 框架的设计，都是为了单个模块职责过重而出现的一种解决方案：</p>\n<ul>\n<li>HTML IN PHP 拼接代码简单暴力，可是如果拼接太多，每个文件就很职责重，代码阅读性差，不方便调试，就显得很杂乱。</li>\n<li>PHP in HTML 相比上一个解决方案好很多。可是，嵌入过多 PHP 代码，代码阅读性差，不方便调试，则会显得比较混乱。</li>\n<li>MVC 与 MTV 把渲染的变量独立出来放到 Controller 中，然后把需要渲染的 HTML 模板放到 Template 中，并且在 Template 中来完成模板的拼接。最后调用 Render 进行渲染。是不是这样问题就解决了呢？不是，如果把业务逻辑放在 Model 层，则 Model 职责过重。那就必须要添加一个 Serivce 层来封装业务逻辑。是不是封装了一个</li>\n</ul>\n<p>如果业务逻辑简单到令人发指，HTML IN PHP 可以给人最大的灵活性。</p>\n<ol>\n<li>尝试一下新技术。保持对技术的敏感性。</li>\n<li>React 是 FB 出的一套前端框架。大厂支持，不会轻易太监掉。</li>\n<li>写了一段时间 VueJS 换换口味。</li>\n</ol>\n<p>当我们讨论一个框架的时候，除了基本的框架之外还必须要有大量的社区资源，那么对 React 而言，除了 ReactJS 之外，还有什么？</p>\n<pre><code class=\"language-bash\">\n后台系统\n\n <span class=\"token operator\">-</span> ant<span class=\"token punctuation\">.</span>design\n\n打包构建\n\n <span class=\"token operator\">-</span> webpack\n\n路由和状态管理\n\n <span class=\"token operator\">-</span> react<span class=\"token operator\">-</span>router\n <span class=\"token operator\">-</span> react<span class=\"token operator\">-</span>router<span class=\"token operator\">-</span>redux\n <span class=\"token operator\">-</span> redux\n <span class=\"token operator\">-</span> redux<span class=\"token operator\">-</span>saga\n\n为了更好的管理路由和状态，还是使用 dva 来管理比较好。\n\n <span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>dva<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>dvajs<span class=\"token operator\">/</span>dva<span class=\"token punctuation\">)</span>\n <span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>dva<span class=\"token operator\">-</span>cli<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>dvajs<span class=\"token operator\">/</span>dva<span class=\"token operator\">-</span>cli<span class=\"token punctuation\">)</span>\n\n开发构建工具\n\n <span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>roadhog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>sorrycc<span class=\"token operator\">/</span>roadhog<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h2 id=\"0x01-官网的-tutorial-guide\"><a class=\"v-toc-item\" href=\"#0x01-官网的-tutorial-guide\">#</a> 0x01. 官网的 Tutorial / Guide</h2>\n<p>官网的要点</p>\n<h2 id=\"0x02-在-dva-下编写-react-组件的正确姿势\"><a class=\"v-toc-item\" href=\"#0x02-在-dva-下编写-react-组件的正确姿势\">#</a> 0x02. 在 dva 下，编写 React 组件的正确姿势</h2>\n<p>编写 React 的时候，我选用了 dva 框架配合 ReactJS 来编写单页。</p>\n<p>参考 FB 的这篇教程后，梳理了我编写组件的步骤 <a href=\"https://facebook.github.io/react/docs/thinking-in-react.html\">https://facebook.github.io/react/docs/thinking-in-react.html</a> :</p>\n<ol>\n<li>先构思出原型 （或者拿到 UI 图）</li>\n<li>Mock 出假数据</li>\n<li>分解页面 OR 组件为 组件树</li>\n<li>编写静态组件树</li>\n<li>确定最小表达 UI （加上满足要求的样式）</li>\n<li>确定什么时候需要什么状态（网络请求，键盘输入，位置变化等等）</li>\n<li>收尾美化</li>\n<li>在发现问题的时候进行优化</li>\n</ol>\n<h2 id=\"0x03-在-dva-下编写-react-组件的正确姿势\"><a class=\"v-toc-item\" href=\"#0x03-在-dva-下编写-react-组件的正确姿势\">#</a> 0x03. 在 dva 下，编写 React 组件的正确姿势</h2>\n<hr>\n<p>ChangeLog:</p>\n<ul>\n<li><strong>2017-07-17</strong> 重修文字</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00. 前言</a></li>\n<li><a href=\"#0x00-%E5%89%8D%E7%AB%AF-%E5%8D%95%E9%A1%B5%E4%B8%8E-react-%E5%BC%80%E5%8F%91\">0x00. 前端、单页与 React 开发</a>\n<ul>\n<li><a href=\"#01-%E5%89%8D%E7%AB%AF\">0.1. 前端</a></li>\n<li><a href=\"#02-%E5%8D%95%E9%A1%B5\">0.2. 单页</a></li>\n<li><a href=\"#03-reactjs\">0.3. ReactJS</a></li>\n</ul>\n</li>\n<li><a href=\"#0x01-%E5%AE%98%E7%BD%91%E7%9A%84-tutorial-guide\">0x01. 官网的 Tutorial / Guide</a></li>\n<li><a href=\"#0x02-%E5%9C%A8-dva-%E4%B8%8B%E7%BC%96%E5%86%99-react-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF\">0x02. 在 dva 下，编写 React 组件的正确姿势</a></li>\n<li><a href=\"#0x03-%E5%9C%A8-dva-%E4%B8%8B%E7%BC%96%E5%86%99-react-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF\">0x03. 在 dva 下，编写 React 组件的正确姿势</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}