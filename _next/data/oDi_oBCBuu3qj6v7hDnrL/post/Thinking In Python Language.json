{"pageProps":{"post":{"tags":["Python"],"path":"20170408_ThinkingInPython.md","title":"Thinking In Python Language","slug":"Thinking In Python Language","date":"2017-04-08","category":"Python","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x01-前言\"><a class=\"v-toc-item\" href=\"#0x01-前言\">#</a> 0x01 前言</h2>\n<blockquote>\n<p>Python 简略笔记</p>\n</blockquote>\n<p>本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍这个过程中结合自己的开发常见场景记录下来的一些笔记。</p>\n<!-- more -->\n<h2 id=\"0x00-简介\"><a class=\"v-toc-item\" href=\"#0x00-简介\">#</a> 0x00 简介</h2>\n<h3 id=\"1-为什么是-python\"><a class=\"v-toc-item\" href=\"#1-为什么是-python\">#</a> 1. 为什么是 Python</h3>\n<p>选 Python, 很大程度上是因为 Python 的快速开发。</p>\n<p>当然，快速开发（这里的开发包含部署）这个词也往往会被误解。什么叫做快速？我用一个 CMS 框架快速搭建出一个网站这是否叫做快速？</p>\n<ul>\n<li>每一次部署的时候，如果使用 Java 或者是 Go, 部署的时候直接 maven 编译打包，接着把 War 包直接上传到 Tomcat 就结束了。而用 Python 则需要各种虚拟环境，各种稀里哗啦的配置。这种情况下是哪一种快速呢？</li>\n</ul>\n<p>Python 有什么好处呢？</p>\n<ul>\n<li>写代码效率高</li>\n<li>生态圈好</li>\n</ul>\n<p>写代码效率高，这指的是写 Python 代码，而不是运行时。</p>\n<p>生态圈好，Web 开发用 Django/Flask , 数据抓取用 Requests , 数据分析清洗用 Pandas, 机器学习。</p>\n<h3 id=\"2-工具链\"><a class=\"v-toc-item\" href=\"#2-工具链\">#</a> 2. 工具链</h3>\n<h3 id=\"4-文档\"><a class=\"v-toc-item\" href=\"#4-文档\">#</a> 4. 文档</h3>\n<h3 id=\"5-社区\"><a class=\"v-toc-item\" href=\"#5-社区\">#</a> 5. 社区</h3>\n<h3 id=\"6-书籍\"><a class=\"v-toc-item\" href=\"#6-书籍\">#</a> 6. 书籍</h3>\n<h2 id=\"0x01-基本概念\"><a class=\"v-toc-item\" href=\"#0x01-基本概念\">#</a> 0x01 基本概念</h2>\n<blockquote>\n<p>程序 = 算法 + 数据结构</p>\n</blockquote>\n<p>这句话当然是不全面的，但并不影响这句话在计算机世界里面的地位。</p>\n<p>依我看来，对我的启发大致是：</p>\n<blockquote>\n<p>我会把 API 的调用和数据结构以及算法想清楚，然后才动手把代码分解成伪代码。</p>\n</blockquote>\n<h3 id=\"1-数据类型\"><a class=\"v-toc-item\" href=\"#1-数据类型\">#</a> 1. 数据类型</h3>\n<p>数据类型按照不同的划分标准可以进行不同的划分：</p>\n<p>按照复杂性可以这么划分：</p>\n<ul>\n<li>简单类型</li>\n<li>复杂类型</li>\n</ul>\n<p>按照复杂性可以这么划分：</p>\n<ul>\n<li>基本类型</li>\n<li>引用类型</li>\n</ul>\n<p>按照数据结构可以这么划分：</p>\n<ul>\n<li>集合结构 : 串</li>\n<li>线性结构 : 线性表 （单链表，静态链表，循环链表，双向链表，<strong>栈，队列</strong>)</li>\n<li>树形结构 : 树（二叉树，B+ 树，红黑树）</li>\n<li>图形结构 : 图</li>\n</ul>\n<h3 id=\"2-操作\"><a class=\"v-toc-item\" href=\"#2-操作\">#</a> 2. 操作</h3>\n<h4 id=\"操作\"><a class=\"v-toc-item\" href=\"#操作\">#</a> 操作</h4>\n<p>对于一些基本的数据类型，操作为 加减乘除取余数位运算等等</p>\n<p>对于复杂的一些数据类型，则需要对数据结构多一些了解。</p>\n<p>比如，对队列而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>\n比如，对 hash 而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>\n比如，对字典而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？<br>\n比如，对字符串而言，增删改查在算法复杂度上意味着什么？对机器的性能会不会有很多影响呢？</p>\n<p>那字符串来说，Java 推荐使用 StringBuilder 来合并多个字符串，Python 推荐 join 多个字符串等等。</p>\n<h4 id=\"操作-2\"><a class=\"v-toc-item\" href=\"#操作-2\">#</a> 操作</h4>\n<h3 id=\"3-语句\"><a class=\"v-toc-item\" href=\"#3-语句\">#</a> 3. 语句</h3>\n<h2 id=\"0x02-中级概念\"><a class=\"v-toc-item\" href=\"#0x02-中级概念\">#</a> 0x02 中级概念</h2>\n<h3 id=\"函数\"><a class=\"v-toc-item\" href=\"#函数\">#</a> 函数</h3>\n<h4 id=\"作用域\"><a class=\"v-toc-item\" href=\"#作用域\">#</a> 作用域</h4>\n<h3 id=\"模块\"><a class=\"v-toc-item\" href=\"#模块\">#</a> 模块</h3>\n<p>模块，这个概念，可大可小，大的时候，把一个程序说成是模块，小的时候，可以把一个文件，甚至你说这一个函数是一个模块，也行。</p>\n<p>这里的模块指的是一个包下的函数。</p>\n<h3 id=\"面向对象\"><a class=\"v-toc-item\" href=\"#面向对象\">#</a> 面向对象</h3>\n<p>面向对象有三大概念：</p>\n<ul>\n<li>封装</li>\n<li>继承</li>\n<li>多态</li>\n</ul>\n<h3 id=\"错误-调试测试\"><a class=\"v-toc-item\" href=\"#错误-调试测试\">#</a> 错误 / 调试测试</h3>\n<p>异常处理实际上可以考验一个程序员编写代码的健壮性。</p>\n<p>事实上来说，代码写的健壮是一个程序员必备的素养。但其实在开发过程中，出于对项目进行赶工上线，需要对程序的健壮性做出一定的取舍。并且，在编写客户端，服务端，网页前端的时候基本上都会遇到这个问题。什么时候选择健壮的程序，什么时候选择是还可以的程序。需要自己的经验。</p>\n<h3 id=\"io-编程\"><a class=\"v-toc-item\" href=\"#io-编程\">#</a> IO 编程</h3>\n<h3 id=\"进程和线程\"><a class=\"v-toc-item\" href=\"#进程和线程\">#</a> 进程和线程</h3>\n<h4 id=\"多线程\"><a class=\"v-toc-item\" href=\"#多线程\">#</a> 多线程</h4>\n<blockquote>\n<p>Python 多线程约等于并发。</p>\n</blockquote>\n<h4 id=\"多进程\"><a class=\"v-toc-item\" href=\"#多进程\">#</a> 多进程</h4>\n<h4 id=\"gil\"><a class=\"v-toc-item\" href=\"#gil\">#</a> GIL</h4>\n<p>Global Interpreter Lock</p>\n<p>并不是所有的解释器语言都有 GIL （尽管 Python 和 Ruby 里面都有）, 也并不是没有尝试过去除 GIL, 但是每次去除都会导致单线程性能的下降。所以暂时保留。</p>\n<p>GIL 对程序中的影响：</p>\n<blockquote>\n<p>一个线程运行 Python , 而其他 N 个睡眠或者等待 I/O - <strong>同一时刻只有一个线程对共享资源进行存取</strong> , Python 线程也可以等待 threading.Lock 或者线程模块中的其他同步对象；</p>\n</blockquote>\n<h5 id=\"协同式多任务处理\"><a class=\"v-toc-item\" href=\"#协同式多任务处理\">#</a> 协同式多任务处理</h5>\n<p>如果有两个线程，同时进行 IO 请求，当其中一个线程连接之后，立即会<strong>主动让出 GIL</strong>, 其他线程就可以运行。</p>\n<blockquote>\n<p>当 N 个线程在网络 I/O 堵塞，或等待重新获取 GIL，而一个线程运行 Python。</p>\n</blockquote>\n<p>让出之后还要执行代码呀，所以要有个收回 GIL 的动作。</p>\n<h5 id=\"抢占式多任务处理\"><a class=\"v-toc-item\" href=\"#抢占式多任务处理\">#</a> 抢占式多任务处理</h5>\n<p>Python 2 GIL , 尝试收回 GIL 为 执行 1000 字节码。<br>\nPython 3 GIL , 尝试收回 GIL 检测间隔为 15ms</p>\n<h5 id=\"线程安全\"><a class=\"v-toc-item\" href=\"#线程安全\">#</a> 线程安全</h5>\n<p>原子操作：sort 之类不需要<br>\n非原子操作：n=n+2 的字节码分为 加载 n , 加载 2 , 相加，存储 n, 四个步骤，由于不是原子性，很可能被由于 15 ms 而被打断。</p>\n<p>当然，懒人一向是 : <strong>优先级不决加括号，线程不决加 lock</strong></p>\n<p>对于 Java, 程序员努力在尽可能短的时间内加锁存取共享数据，减轻线程的争夺，实现最大并行。但 Python 中，线程无法并行运行，细粒度的锁就没有了优势。</p>\n<h3 id=\"正则表达式\"><a class=\"v-toc-item\" href=\"#正则表达式\">#</a> 正则表达式</h3>\n<h2 id=\"0x03-高级技巧\"><a class=\"v-toc-item\" href=\"#0x03-高级技巧\">#</a> 0x03 高级技巧</h2>\n<h2 id=\"0x04-标准库\"><a class=\"v-toc-item\" href=\"#0x04-标准库\">#</a> 0x04 标准库</h2>\n<h3 id=\"常用内建模块\"><a class=\"v-toc-item\" href=\"#常用内建模块\">#</a> 常用内建模块</h3>\n<h3 id=\"系统化模块\"><a class=\"v-toc-item\" href=\"#系统化模块\">#</a> 系统化模块</h3>\n<ol>\n<li>Introduction</li>\n<li>Built-in Functions</li>\n<li>Built-in Constants</li>\n<li>Built-in Types</li>\n<li>Built-in Exceptions</li>\n<li>Text Processing Services</li>\n<li>Binary Data Services</li>\n<li>Data Types</li>\n<li>Numeric and Mathematical Modules</li>\n<li>Functional Programming Modules</li>\n<li>File and Directory Access</li>\n<li>Data Persistence</li>\n<li>Data Compression and Archiving</li>\n<li>File Formats</li>\n<li>Cryptographic Services</li>\n<li>Generic Operating System Services</li>\n<li>Concurrent Execution</li>\n<li>Interprocess Communication and Networking</li>\n<li>Internet Data Handling</li>\n<li>Structured Markup Processing Tools</li>\n<li>Internet Protocols and Support</li>\n<li>Multimedia Services</li>\n<li>Internationalization</li>\n<li>Program Frameworks</li>\n<li>Graphical User Interfaces with Tk</li>\n<li>Development Tools</li>\n<li>Debugging and Profiling</li>\n<li>Software Packaging and Distribution</li>\n<li>Python Runtime Services</li>\n<li>Custom Python Interpreters</li>\n<li>Importing Modules</li>\n<li>Python Language Services</li>\n<li>Miscellaneous Services</li>\n<li>MS Windows Specific Services</li>\n<li>Unix Specific Services</li>\n<li>Superseded Modules</li>\n<li>Undocumented Modules</li>\n</ol>\n<h2 id=\"0x05-第三方库\"><a class=\"v-toc-item\" href=\"#0x05-第三方库\">#</a> 0x05 第三方库</h2>\n<ul>\n<li>Requests : API 人性化</li>\n</ul>\n<h2 id=\"0x06-代码质量\"><a class=\"v-toc-item\" href=\"#0x06-代码质量\">#</a> 0x06 代码质量</h2>\n<h3 id=\"正确性\"><a class=\"v-toc-item\" href=\"#正确性\">#</a> 正确性</h3>\n<ul>\n<li>外部<strong>不该</strong>引用 protected member （单下划线）</li>\n<li>lambda 为一次使用，最好不要赋值。</li>\n<li>不要给 buildin 函数赋值</li>\n<li>py3 直接 super()</li>\n<li>for in else 如果不内置 break 则出会在最后 for in 为 empty 的时候再执行 else 中的语句</li>\n<li>context exit 如果不 catch 掉异常让其自然向上一级抛出错误的话，必须为 (self, exception_type, exception_value, traceback):</li>\n<li>不要在 init 里面 return 数据</li>\n<li>不要混用 tab 和 space</li>\n<li>4 个 space 缩进</li>\n<li>staticmethod 直接是 参数，classmethod 第一个参数为 cls</li>\n<li>可变的 default value 是不能作为 参数的。（可能是解释器在确定函数的定义的时候完成赋值？)</li>\n<li>遵循 exception hierachy <a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></li>\n<li>defaultdict defaultdict(lambda : 6) , 必须 callable</li>\n<li>尽量 unpack 赋值</li>\n<li>字典用获取用 get(“myk”,None) , 赋值用 dictionary.setdefault(“list”, []).append(“list_item”)</li>\n</ul>\n<h3 id=\"可维护性\"><a class=\"v-toc-item\" href=\"#可维护性\">#</a> 可维护性</h3>\n<ul>\n<li>避免使用 import * , 我觉得这点值得商榷 , 如果是某个模块下，完全可以先把模块拆分成多个，最后 import 进来，接着使用 all.</li>\n<li>getxxx 获取实际值，如果不为实际值，返回 None 显然不如 try catch 来的实在。</li>\n<li>避免使用 global</li>\n<li>命名要注意</li>\n<li>动态创建方法 , 我觉得这点值得商榷。</li>\n</ul>\n<h3 id=\"可读性\"><a class=\"v-toc-item\" href=\"#可读性\">#</a> 可读性</h3>\n<ul>\n<li>不要检查，如果可能有异常，尽量抛出异常来 trycatch 解决。</li>\n<li>a is None , if flag</li>\n<li>isinstance , not type® is types.ListType</li>\n<li>“{name}{city}”.format(**info_dict)</li>\n<li>for k , v in infodict.items()</li>\n<li>使用 poiinfo = namedtuple(“poiinfo”,[“name”,“lng”,“lat”]) 返回 poiinfo[‘上海’,121.00,23] 最后返回值打印 <a href=\"http://poi.name\">poi.name</a> , poi.lng , poi lat</li>\n<li>for numbers_value, letters_value in zip(numbers, letters):</li>\n<li>enumerate</li>\n<li>如果能用 listcomp 则不使用 map 和 filter</li>\n</ul>\n<h3 id=\"安全性\"><a class=\"v-toc-item\" href=\"#安全性\">#</a> 安全性</h3>\n<h3 id=\"性能\"><a class=\"v-toc-item\" href=\"#性能\">#</a> 性能</h3>\n<ul>\n<li>用 set</li>\n<li>d.iteritems() 比 items() 省内存</li>\n</ul>\n<h2 id=\"0xee-文章更新\"><a class=\"v-toc-item\" href=\"#0xee-文章更新\">#</a> 0xEE 文章更新</h2>\n<ul>\n<li><strong>2017-05-11 19:43:00</strong> : 增加代码质量模块</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x01-%E5%89%8D%E8%A8%80\">0x01 前言</a></li>\n<li><a href=\"#0x00-%E7%AE%80%E4%BB%8B\">0x00 简介</a>\n<ul>\n<li><a href=\"#1-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-python\">1. 为什么是 Python</a></li>\n<li><a href=\"#2-%E5%B7%A5%E5%85%B7%E9%93%BE\">2. 工具链</a></li>\n<li><a href=\"#4-%E6%96%87%E6%A1%A3\">4. 文档</a></li>\n<li><a href=\"#5-%E7%A4%BE%E5%8C%BA\">5. 社区</a></li>\n<li><a href=\"#6-%E4%B9%A6%E7%B1%8D\">6. 书籍</a></li>\n</ul>\n</li>\n<li><a href=\"#0x01-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">0x01 基本概念</a>\n<ul>\n<li><a href=\"#1-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">1. 数据类型</a></li>\n<li><a href=\"#2-%E6%93%8D%E4%BD%9C\">2. 操作</a>\n<ul>\n<li><a href=\"#%E6%93%8D%E4%BD%9C\">操作</a></li>\n<li><a href=\"#%E6%93%8D%E4%BD%9C-2\">操作</a></li>\n</ul>\n</li>\n<li><a href=\"#3-%E8%AF%AD%E5%8F%A5\">3. 语句</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-%E4%B8%AD%E7%BA%A7%E6%A6%82%E5%BF%B5\">0x02 中级概念</a>\n<ul>\n<li><a href=\"#%E5%87%BD%E6%95%B0\">函数</a>\n<ul>\n<li><a href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F\">作用域</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A8%A1%E5%9D%97\">模块</a></li>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\">面向对象</a></li>\n<li><a href=\"#%E9%94%99%E8%AF%AF-%E8%B0%83%E8%AF%95%E6%B5%8B%E8%AF%95\">错误 / 调试测试</a></li>\n<li><a href=\"#io-%E7%BC%96%E7%A8%8B\">IO 编程</a></li>\n<li><a href=\"#%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B\">进程和线程</a>\n<ul>\n<li><a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B\">多线程</a></li>\n<li><a href=\"#%E5%A4%9A%E8%BF%9B%E7%A8%8B\">多进程</a></li>\n<li><a href=\"#gil\">GIL</a>\n<ul>\n<li><a href=\"#%E5%8D%8F%E5%90%8C%E5%BC%8F%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86\">协同式多任务处理</a></li>\n<li><a href=\"#%E6%8A%A2%E5%8D%A0%E5%BC%8F%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86\">抢占式多任务处理</a></li>\n<li><a href=\"#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8\">线程安全</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\">正则表达式</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7\">0x03 高级技巧</a></li>\n<li><a href=\"#0x04-%E6%A0%87%E5%87%86%E5%BA%93\">0x04 标准库</a>\n<ul>\n<li><a href=\"#%E5%B8%B8%E7%94%A8%E5%86%85%E5%BB%BA%E6%A8%A1%E5%9D%97\">常用内建模块</a></li>\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E5%8C%96%E6%A8%A1%E5%9D%97\">系统化模块</a></li>\n</ul>\n</li>\n<li><a href=\"#0x05-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93\">0x05 第三方库</a></li>\n<li><a href=\"#0x06-%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F\">0x06 代码质量</a>\n<ul>\n<li><a href=\"#%E6%AD%A3%E7%A1%AE%E6%80%A7\">正确性</a></li>\n<li><a href=\"#%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7\">可维护性</a></li>\n<li><a href=\"#%E5%8F%AF%E8%AF%BB%E6%80%A7\">可读性</a></li>\n<li><a href=\"#%E5%AE%89%E5%85%A8%E6%80%A7\">安全性</a></li>\n<li><a href=\"#%E6%80%A7%E8%83%BD\">性能</a></li>\n</ul>\n</li>\n<li><a href=\"#0xee-%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0\">0xEE 文章更新</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}