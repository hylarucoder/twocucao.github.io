{"pageProps":{"post":{"tags":["Python","系列文章"],"path":"20190525_PyCode_06.md","title":"如何写出整洁的 Python 代码 上","slug":"如何写出整洁的 Python 代码 上","date":"2019-05-25","category":"Python 项目代码健壮性和性能","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<p>本文是《提升你的 Python 项目代码健壮性和性能》系列的第六篇文章。</p>\n<p>接下来的三篇，围绕另一个主题</p>\n<blockquote>\n<p>如何写出整洁的代码</p>\n</blockquote>\n<p>『整洁』三篇是基于**『代码整洁之道』和『架构整洁之道』**的一些切身的理解和体会。</p>\n<p>感谢这两本书的作者 Bob 大叔。</p>\n<blockquote>\n<p>PPS: 某东读书 VIP 会员有不少 IT 资源类的书籍可以免费看，比如『代码整洁之道』</p>\n</blockquote>\n<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<h3 id=\"软件系统的腐败之路\"><a class=\"v-toc-item\" href=\"#软件系统的腐败之路\">#</a> 软件系统的腐败之路</h3>\n<p>随着项目代码行数的增加，不可避免的遇到软件架构腐败的问题。</p>\n<p>具体表现为：<strong>随着每一次产品版本的发布，对现有流程进行优化和修改就格外的费事和吃力。工程师的生产力就开始直线下降。</strong></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8c681642ce7e6a9230ce7f45d3e92cf5_b.jpg\" alt=\"\"></p>\n<p>所谓</p>\n<blockquote>\n<p><strong>眼看他起朱楼，眼看他宴宾客，眼看他楼塌了。 清 孔尚任《桃花扇》</strong></p>\n</blockquote>\n<h2 id=\"0x01-讨论\"><a class=\"v-toc-item\" href=\"#0x01-讨论\">#</a> 0x01 讨论</h2>\n<h3 id=\"为什么会出现腐败的系统\"><a class=\"v-toc-item\" href=\"#为什么会出现腐败的系统\">#</a> 为什么会出现腐败的系统</h3>\n<p>原因可能是多方面的，比如常见的场景：</p>\n<pre><code class=\"language-bash\">步骤 <span class=\"token number\">1.</span> 领域建模的人对业务里概念的理解不到位，流程不深入了解。\n步骤 <span class=\"token number\">2.</span> 工程师在实现的时候，按照自己的理解，没有梳理整个流程。就开始动手实现。并且全程人肉测试。\n步骤 <span class=\"token number\">3.</span> 需求变动，流程更改。\n</code></pre>\n<p><strong>第一步容易埋下坑点：</strong></p>\n<ol>\n<li>对『该领域』理解的不到位，导致『流程』就不清晰，也导致原型设计等同于 Axure 画的『表单』。</li>\n<li>『关键概念』没有解释，『关键字段』没有解释，也没有『流程图』，也没有关于业务主体『状态图』，前后端面向表单开发。(Form Oriented Programming)</li>\n</ol>\n<p>接着，领域理解不到位就会带来另一个问题。</p>\n<ol>\n<li>对于需要『建模的实施者』一般是后端工程师，将花费比较多的时间来梳理流程。</li>\n<li>前后端代码结构不清晰。比如，前端页面的路由命名不清晰，Page 组件命名不清晰，请求 API 接口不清晰。比如，后端路由命名不清晰，view func 不清晰，serializer 不清晰，table 命名不清晰。</li>\n</ol>\n<p>经验老道的程序员会通过一些手段，比如让这些命名不清晰的东西统一一下，然后等概念清晰了。再改回来。</p>\n<p><strong>第二步容易埋下坑点：</strong></p>\n<ol>\n<li>全程口头对需求，『没有文档』落下来，产品之间和开发之间**『缺乏共通的文档理解指南』**。</li>\n</ol>\n<p>当更改已有流程或者是出问题的时候，除了一脸懵逼就还剩下甩锅了。</p>\n<p><strong>第三步容易继续在坑里埋坑：</strong></p>\n<p><strong>资本市场里，树欲静而风不止，想重构而时不我待。</strong></p>\n<ol>\n<li>领域建模的产品经理会继续叠加新的功能，至于是否已经牵扯到了已有功能，最多和工程师口头说明一下，是不会考虑落实到具体文档里面的。</li>\n<li>工程师需要不断的去满足需求，而疯狂叠加代码。不但要搬砖，而且要快速的把方螺丝强行拧到圆螺母里面。</li>\n</ol>\n<p><strong>最后，</strong></p>\n<blockquote>\n<p><strong>屠龙少年变成了恶龙，而产品和工程师们经过不懈努力，终于堆出了『代码屎山』-- 腐败系统</strong></p>\n</blockquote>\n<h3 id=\"衡量系统的两个指标\"><a class=\"v-toc-item\" href=\"#衡量系统的两个指标\">#</a> 衡量系统的两个指标</h3>\n<p>腐败系统有一句成语可以概括，叫做<strong>金玉其外，败絮其中。</strong></p>\n<p>什么是外，什么是中？</p>\n<ul>\n<li><strong>所谓外，就是软件的行为价值 – 软件系统的行为是否正常运行，是否满足需求</strong></li>\n<li><strong>所谓内，就是软件的架构价值 – 软件系统的架构是否清晰，是否灵活，是否可维护</strong></li>\n</ul>\n<p>看起来有点抽象，打个比方就清晰多了。</p>\n<p>所谓软件系统，可以比作是人。</p>\n<ul>\n<li>所谓外，就是人的能力 – 即革命的本事。</li>\n<li>所谓内，就是人的健康 – 即革命的本钱。</li>\n</ul>\n<p>身体是革命的本钱，所以，要经常锻炼身体。同理可知系统也是如此。</p>\n<p>业务方和管理层仅在意软件系统的外在。</p>\n<p>优秀的软件工程师，做的就是平衡这两者。必要的时候，需要和业务方以及管理层进行沟通。</p>\n<h3 id=\"代码是写出来的吗\"><a class=\"v-toc-item\" href=\"#代码是写出来的吗\">#</a> 代码是写出来的吗？</h3>\n<p>不一定。</p>\n<p>假如你是做业务逻辑的。</p>\n<p>首先，好代码可能是聊出来的。</p>\n<p>比如需求确认这一块，多问多画流程图少动手。就可以减少后期很多麻烦事情。<br>\n如果在没有理解透需求的情况下动了手，就会做得越多，错的越多。我相信很多工程师都有<br>\n这种感觉。</p>\n<p>当然，这是基本上不怎么可控的外部条件。所以，不在本文的讨论范围之内。</p>\n<p>其次，好代码可能是边读边写出来的。</p>\n<p>回顾一下一天的工作，你会发现，不管是，你写文章，或者是做一些其他的东西。</p>\n<ol>\n<li><strong>读代码，大部分都是跳转代码，文件内跳转，文件外跳转，分屏浏览。</strong></li>\n<li><strong>在这个过程中不断整理和梳理原有的概念。最后落实到代码上。</strong></li>\n<li><strong>代码的直接修改。占到你很少的时间。</strong></li>\n</ol>\n<p>最后，好代码是改出来的。</p>\n<h3 id=\"好代码的标准\"><a class=\"v-toc-item\" href=\"#好代码的标准\">#</a> 好代码的标准</h3>\n<p>我们只讨论如何保持代码的清晰整洁</p>\n<blockquote>\n<p>什么是好的代码？</p>\n</blockquote>\n<p>引用 C++ 创始人的说法，我喜欢优雅而高效的代码，</p>\n<ol>\n<li><strong>代码逻辑应该直截了当，叫缺陷难以隐藏；</strong></li>\n<li><strong>尽量减少依赖关系，使之便于维护；</strong></li>\n<li><strong>依据某种分层战略完善错误处理代码；</strong></li>\n<li><strong>性能调至最优，省的引诱别人做没规矩的优化。</strong></li>\n<li><strong>整洁的代码只做好一件事情。</strong></li>\n</ol>\n<p>其实还有一些保证代码整洁的手段：</p>\n<blockquote>\n<p>比如本系列的文章讲解</p>\n</blockquote>\n<h2 id=\"0x02-变量命名之道\"><a class=\"v-toc-item\" href=\"#0x02-变量命名之道\">#</a> 0x02 变量命名之道</h2>\n<blockquote>\n<p><strong>名不正，则言不顺；言不顺，则事不成。事不成，则礼乐不兴；</strong></p>\n</blockquote>\n<p>写代码就是这样。</p>\n<h3 id=\"使用业务领域命名\"><a class=\"v-toc-item\" href=\"#使用业务领域命名\">#</a> 使用业务领域命名</h3>\n<p>对于具体业务而言，**起不好名字有一半的锅都是产品经理的锅，因为这是概念认知不清晰的表现。**不要小看这一点，产品经理对项目的理解不到位会在编写代码的过程中被放大。</p>\n<p>遇到这种情况，务必要把产品经理拉过来认认真真的扯扯犊子。</p>\n<h3 id=\"代码命名\"><a class=\"v-toc-item\" href=\"#代码命名\">#</a> 代码命名</h3>\n<p>对于实际代码而言，</p>\n<ul>\n<li>涉及到具体业务名称，起不好名字就是程序员的锅，因为这是跟着产品经理犯傻，继续坚持概念认知不清晰的表现。</li>\n<li>涉及到非业务的名称，务必要统一，比如 Button 就是 Button, 如果团队统一叫做 Btn 那就统一叫做 Btn.</li>\n</ul>\n<blockquote>\n<p>务必不要用单字母命名，取名字要准确，如无必要，也尽量规避掉缩写。</p>\n</blockquote>\n<pre><code class=\"language-python\"># 差\nd <span class=\"token operator\">=</span> Column # 消逝的时间\n\n# 好\nelapsedTimeInDays\ndaysSinceCreation\ndaysSinceModification\nfileAgeInDays\n</code></pre>\n<ul>\n<li>一个单词一个意思，假设你需要往 group 里面添加 member, 那么出现 add/insert/append 三个词的意义就应该完全不一致。</li>\n</ul>\n<blockquote>\n<p>不要做无意义的区分</p>\n</blockquote>\n<pre><code class=\"language-python\">fetchAccountList 就不如 fetchAccounts\nfetchAccountRecord <span class=\"token operator\">/</span> fetchAccountInfo <span class=\"token operator\">/</span> fetchAccountData 就不如 fetchAccount\n</code></pre>\n<blockquote>\n<p>变量是名词，路由是名词，方法是动宾结构。</p>\n</blockquote>\n<p><strong>即便是名字起的不好，也应该很统一。</strong></p>\n<h2 id=\"0x03-函数整洁之道\"><a class=\"v-toc-item\" href=\"#0x03-函数整洁之道\">#</a> 0x03 函数整洁之道</h2>\n<h3 id=\"短小精悍\"><a class=\"v-toc-item\" href=\"#短小精悍\">#</a> 短小精悍</h3>\n<p>每个函数都要做到短小精悍</p>\n<ol>\n<li>短小</li>\n<li>只做一件事（无副作用）</li>\n<li>一个函数一个抽象层级</li>\n</ol>\n<h3 id=\"调用层次清晰\"><a class=\"v-toc-item\" href=\"#调用层次清晰\">#</a> 调用层次清晰</h3>\n<p>不同抽象层级</p>\n<pre><code class=\"language-python\">def <span class=\"token function\">日常</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\t用 <span class=\"token constant\">XX</span> <span class=\"token function\">点外卖</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">去厨房拿筷子</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">等小哥送来外卖</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">睡觉</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">打豆豆</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>为什么是不同抽象层级呢？ 点外卖不一定是日常。可能自己偶尔也会做饭。</p>\n<p>并且，从业务角度来说，吃饭，睡觉，打豆豆比较符合业务人员的认知。</p>\n<p>同一抽象层级</p>\n<pre><code class=\"language-python\">def <span class=\"token function\">点外卖吃饭</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\t用 <span class=\"token constant\">XX</span> <span class=\"token function\">点外卖</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">去厨房拿筷子</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">等小哥送来外卖</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndef <span class=\"token function\">吃饭</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> 今天比较懒：\n\t\t<span class=\"token function\">点外卖吃饭</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndef <span class=\"token function\">日常</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">吃饭</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">睡觉</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">打豆豆</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这样写出来的函数，比较符合自顶向下的阅读方式。</p>\n<h3 id=\"控制参数\"><a class=\"v-toc-item\" href=\"#控制参数\">#</a> 控制参数</h3>\n<p>参数尽量不要超过三个。</p>\n<p>因为超过三个之后，就很难用几个单词把这个方法的意义给概括出来。</p>\n<p>如果超过三个，这就需要谨慎的考虑将其中的一部分参数是封装为结构体或者是类。</p>\n<h3 id=\"如何写函数\"><a class=\"v-toc-item\" href=\"#如何写函数\">#</a> 如何写函数</h3>\n<ol>\n<li>不要为了炫技而炫技。</li>\n<li>先写对函数。</li>\n<li>然后打磨函数，即修改名称，消除重复，适当重构</li>\n</ol>\n<h2 id=\"0x04-注释整洁之道\"><a class=\"v-toc-item\" href=\"#0x04-注释整洁之道\">#</a> 0x04 注释整洁之道</h2>\n<ol>\n<li>注释不能美化糟糕的代码。</li>\n<li>适当解释意图。有的时候 hardcode 却是最好的解决方案。</li>\n<li>能用变量名 / 方法名 / 函数名表达清楚的，就不要讲废话。</li>\n</ol>\n<h2 id=\"0x05-格式整洁之道\"><a class=\"v-toc-item\" href=\"#0x05-格式整洁之道\">#</a> 0x05 格式整洁之道</h2>\n<h3 id=\"排版整齐\"><a class=\"v-toc-item\" href=\"#排版整齐\">#</a> 排版整齐</h3>\n<p>代码一定要排版整齐</p>\n<ul>\n<li>缩进</li>\n<li>每行最大字符串数？</li>\n<li>字符串选择单引号还是双引号？</li>\n<li>团队协作 diff 同一段代码的时候还是 diff 出来不同的效果。</li>\n</ul>\n<p>反正是我记不住 pep8 里面要求的那些标准的。当然，flake8 为你提供了比较好的 lint 标准。</p>\n<p>在这里推荐两个工具：</p>\n<ol>\n<li>flake8</li>\n<li>black <a href=\"https://link.zhihu.com/?target=https%3A//github.com/ambv/black\">https://github.com/ambv/black</a></li>\n</ol>\n<p>至于 black, 是类似于 javascript 圈里面的 prettier 的存在。</p>\n<p>在每次 commit 的时候，执行 flake8 和 black, 让你的代码整整齐齐。</p>\n<h3 id=\"上下文相关\"><a class=\"v-toc-item\" href=\"#上下文相关\">#</a> 上下文相关</h3>\n<ol>\n<li>如果我使用了一个方法，如果不是从其他文件里使用，一般会在我编写的代码块的上方不远处。</li>\n<li>如果我使用了一个变量，应该只在起到作用的作用域里。</li>\n<li>如果我针对一个概念编写方法，那么在这个文件里，相关概念的代码应该是放在一起的。</li>\n</ol>\n<h2 id=\"0xee-参考连接\"><a class=\"v-toc-item\" href=\"#0xee-参考连接\">#</a> 0xEE 参考连接</h2>\n<ul>\n<li>《代码整洁之道》</li>\n<li>《架构整洁之道》</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a>\n<ul>\n<li><a href=\"#%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%85%90%E8%B4%A5%E4%B9%8B%E8%B7%AF\">软件系统的腐败之路</a></li>\n</ul>\n</li>\n<li><a href=\"#0x01-%E8%AE%A8%E8%AE%BA\">0x01 讨论</a>\n<ul>\n<li><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%87%BA%E7%8E%B0%E8%85%90%E8%B4%A5%E7%9A%84%E7%B3%BB%E7%BB%9F\">为什么会出现腐败的系统</a></li>\n<li><a href=\"#%E8%A1%A1%E9%87%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%8C%87%E6%A0%87\">衡量系统的两个指标</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E6%98%AF%E5%86%99%E5%87%BA%E6%9D%A5%E7%9A%84%E5%90%97\">代码是写出来的吗？</a></li>\n<li><a href=\"#%E5%A5%BD%E4%BB%A3%E7%A0%81%E7%9A%84%E6%A0%87%E5%87%86\">好代码的标准</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E4%B9%8B%E9%81%93\">0x02 变量命名之道</a>\n<ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E4%B8%9A%E5%8A%A1%E9%A2%86%E5%9F%9F%E5%91%BD%E5%90%8D\">使用业务领域命名</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E5%91%BD%E5%90%8D\">代码命名</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-%E5%87%BD%E6%95%B0%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93\">0x03 函数整洁之道</a>\n<ul>\n<li><a href=\"#%E7%9F%AD%E5%B0%8F%E7%B2%BE%E6%82%8D\">短小精悍</a></li>\n<li><a href=\"#%E8%B0%83%E7%94%A8%E5%B1%82%E6%AC%A1%E6%B8%85%E6%99%B0\">调用层次清晰</a></li>\n<li><a href=\"#%E6%8E%A7%E5%88%B6%E5%8F%82%E6%95%B0\">控制参数</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BD%E6%95%B0\">如何写函数</a></li>\n</ul>\n</li>\n<li><a href=\"#0x04-%E6%B3%A8%E9%87%8A%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93\">0x04 注释整洁之道</a></li>\n<li><a href=\"#0x05-%E6%A0%BC%E5%BC%8F%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93\">0x05 格式整洁之道</a>\n<ul>\n<li><a href=\"#%E6%8E%92%E7%89%88%E6%95%B4%E9%BD%90\">排版整齐</a></li>\n<li><a href=\"#%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9B%B8%E5%85%B3\">上下文相关</a></li>\n</ul>\n</li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83%E8%BF%9E%E6%8E%A5\">0xEE 参考连接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}