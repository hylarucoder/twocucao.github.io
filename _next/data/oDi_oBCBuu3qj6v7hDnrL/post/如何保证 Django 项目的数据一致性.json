{"pageProps":{"post":{"tags":["Python","系列文章"],"path":"20190308_PyCode_03.md","title":"如何保证 Django 项目的数据一致性","slug":"如何保证 Django 项目的数据一致性","date":"2019-03-08","category":"Python 项目代码健壮性和性能","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>本文是《提升你的 Python 项目代码健壮性和性能》系列的第三篇文章。</p>\n<ul>\n<li><strong>第一篇，讲的是如何 <a href=\"https://zhuanlan.zhihu.com/p/56863684\">用 Type Annotation 提升你的 Python 代码健壮性</a></strong></li>\n<li><strong>第二篇，讲的是<a href=\"https://zhuanlan.zhihu.com/p/57510222\">如何通过测试提升 Python 代码的健壮性</a></strong></li>\n</ul>\n<p>第三篇，即本文，我们来谈谈 Django 项目并发可能带来的问题以及如何保持 Django 项目的数据一致性。</p>\n<p>本文目录如下：</p>\n<pre><code class=\"language-text\">   <span class=\"token number\">0x00</span> 前言 <span class=\"token operator\">:</span> section\n▼ <span class=\"token number\">0x01</span> 背景知识 <span class=\"token operator\">:</span> section\n\t\t并发会带来数据不一致 <span class=\"token operator\">:</span> section\n▼ <span class=\"token number\">0x02</span> Django 项目如何解决项目 <span class=\"token operator\">:</span> section\n\t\t悲观的方式 <span class=\"token operator\">:</span> section\n\t\t乐观的方式 <span class=\"token operator\">:</span> section\n\t\t没有银弹 <span class=\"token operator\">:</span> section\n\t<span class=\"token number\">0x03</span> 解决超卖问题 <span class=\"token operator\">:</span> section\n▼ <span class=\"token number\">0x04</span> 番外篇 数据库隔离级别 <span class=\"token operator\">:</span> section\n\t\t<span class=\"token constant\">READ</span><span class=\"token operator\">-</span><span class=\"token constant\">UNCOMMITTED</span> <span class=\"token operator\">:</span> section\n\t\t<span class=\"token constant\">READ</span><span class=\"token operator\">-</span><span class=\"token constant\">COMMITTED</span> <span class=\"token operator\">:</span> section\n\t\t<span class=\"token constant\">REPEATABLE</span><span class=\"token operator\">-</span><span class=\"token constant\">READ</span> <span class=\"token operator\">:</span> section\n\t\t<span class=\"token constant\">SERIALIZABLE</span> <span class=\"token operator\">:</span> section\n\t<span class=\"token number\">0xEE</span> 参考链接 <span class=\"token operator\">:</span> section\n</code></pre>\n<p>本文讨论的场景如下：</p>\n<p><strong>一个简单的秒杀系统，商品还剩 200 件。有一些用户来访问并下单。</strong></p>\n<p>这个项目的接口的简单写法就是：</p>\n<pre><code class=\"language-text\">@db_transaction\ndef <span class=\"token function\">user_order_by_product</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>product<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">if</span> product<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n        product<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token function\">make_order</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>product<span class=\"token punctuation\">)</span>\n        product<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>显然，这个写法确实简洁。</p>\n<p>但问题就来了。</p>\n<blockquote>\n<p><strong>商品会超卖</strong>, 除非你的应用没什么人访问。</p>\n</blockquote>\n<p>为什么呢？</p>\n<h2 id=\"0x01-背景知识\"><a class=\"v-toc-item\" href=\"#0x01-背景知识\">#</a> 0x01 背景知识</h2>\n<h3 id=\"并发会带来数据不一致\"><a class=\"v-toc-item\" href=\"#并发会带来数据不一致\">#</a> 并发会带来数据不一致</h3>\n<p>看图</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c016d0d69ca5facc17cdc5cbadc5bac0_b.jpg\" alt=\"\"></p>\n<p>知道问题出在哪儿了吧？</p>\n<ul>\n<li><strong>理解了？</strong></li>\n<li><strong>你确定理解了？</strong></li>\n<li><strong>你确定你真的理解了？</strong></li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/v2-f766e78611ac56f55e8984f950a94149_b.jpg\" alt=\"\"></p>\n<p>其实是我给读者挖了一个坑，<strong>我画的这张图其实是有预设的，比如 NOTE2 处确保了 B 用户读到的是 2。</strong></p>\n<p>如果数据库隔离级别是 read uncommitted, NOTE2 处读到的也有可能是 1 ,</p>\n<p>本文仅仅针对于 read committed 隔离级别下的 <strong>MYSQL</strong> <strong>/ PostgreSQL</strong>。</p>\n<p>在上图中。</p>\n<p>一般人写程序</p>\n<ol>\n<li><strong>往往不是</strong>用 Django 的 F 表达式，来实现 update balance = balance - 20 的操作。 <strong>update balance = balance - 20 where id = 1</strong></li>\n<li><strong>而是计算</strong> 出新的 balance 然后 user.balance = 80, 接着 user.save()</li>\n</ol>\n<blockquote>\n<p><strong>这就会放大了问题</strong></p>\n</blockquote>\n<p>在低并发量的情况下，这个用户手动不断的下单，下单到 200 的时候，后端准时的报卖完了。</p>\n<p>假如我现在是 20 个用户同时在下单，很可能机会出现上图的情况。</p>\n<blockquote>\n<p><strong>出了问题要解决问题 看到问题就要想法子</strong></p>\n</blockquote>\n<ul>\n<li><strong>鲁迅说过，一见短袖子，立刻想到白臂膊，立刻想到全 X 体，立刻想到…</strong></li>\n<li><strong>我也说过，提到并发，就想到锁，就想到乐观锁，就想到悲观锁。</strong></li>\n</ul>\n<h2 id=\"0x02-django-项目如何解决项目\"><a class=\"v-toc-item\" href=\"#0x02-django-项目如何解决项目\">#</a> 0x02 Django 项目如何解决项目</h2>\n<p>有乐观的方式和悲观的方式，即所谓的乐观锁和悲观锁。是不是有高下之分呢、? 不一定。</p>\n<blockquote>\n<p>这就好比乐观和悲观本身也并不见的有高下之分。如同有的人乐观，并不见得一定就是乐观，搞不好是傻乐呵，有的人的悲观，只是底色比较悲凉，但内心还是积极向上的。</p>\n</blockquote>\n<p>本小节内容依照自己的理解厚颜无耻的援引了这篇文章的代码</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//medium.com/%40hakibenita/how-to-manage-concurrency-in-django-models-b240fed4ee2\">https://medium.com/@hakibenita/how-to-manage-concurrency-in-django-models-b240fed4ee2</a></p>\n<h3 id=\"悲观的方式\"><a class=\"v-toc-item\" href=\"#悲观的方式\">#</a> 悲观的方式</h3>\n<p>悲观的方式就是锁住某个资源，不让其他人使用（排他），直到完成工作后释放。</p>\n<p>为什么使用数据库的锁（准确来说是关系型数据库的锁）</p>\n<ol>\n<li>数据库非常擅长处理锁来完成数据一致性。</li>\n<li>数据库级别的锁可以保护其他进程修改数据。</li>\n</ol>\n<pre><code class=\"language-text\">@classmethod\ndef <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n   <span class=\"token keyword\">with</span> transaction<span class=\"token punctuation\">.</span><span class=\"token function\">atomic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n       account <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n           cls<span class=\"token punctuation\">.</span>objects\n           <span class=\"token punctuation\">.</span><span class=\"token function\">select_for_update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span>id<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">)</span>\n\n       account<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">+=</span> amount\n       account<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> account\n\n@classmethod\ndef <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n   <span class=\"token keyword\">with</span> transaction<span class=\"token punctuation\">.</span><span class=\"token function\">atomic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n       account <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n           cls<span class=\"token punctuation\">.</span>objects\n           <span class=\"token punctuation\">.</span><span class=\"token function\">select_for_update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span>id<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">)</span>\n\n       <span class=\"token keyword\">if</span> account<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">&lt;</span> amount<span class=\"token operator\">:</span>\n           raise errors<span class=\"token punctuation\">.</span><span class=\"token function\">InsufficentFunds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       account<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">-=</span> amount\n       account<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">return</span> account\n</code></pre>\n<p>使用 select_for_update 锁住这个 object 直到事务结束</p>\n<p>在使用悲观锁的情况下，存钱和取钱流程如下</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1c75458108c69d13bcb0d07bdacab0c5_b.jpg\" alt=\"\"></p>\n<h3 id=\"乐观的方式\"><a class=\"v-toc-item\" href=\"#乐观的方式\">#</a> 乐观的方式</h3>\n<p>乐观的方式就是新建一个 version column, 每次修改余额的时候，版本增 1</p>\n<p>同样我厚颜无耻的援引了 hakibenita 的代码</p>\n<pre><code class=\"language-text\">def <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n   updated <span class=\"token operator\">=</span> Account<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n       id<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n       version<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>\n       balance<span class=\"token operator\">=</span>balance <span class=\"token operator\">+</span> amount<span class=\"token punctuation\">,</span>\n       version<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>version <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> updated <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n\ndef <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n   <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">&lt;</span> amount<span class=\"token operator\">:</span>\n       raise errors<span class=\"token punctuation\">.</span><span class=\"token function\">InsufficentFunds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n   updated <span class=\"token operator\">=</span> Account<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n       id<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n       version<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>\n       balance<span class=\"token operator\">=</span>balance <span class=\"token operator\">-</span> amount<span class=\"token punctuation\">,</span>\n       version<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>version <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">return</span> updated <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n</code></pre>\n<p>django 默认会返回修改成功的行数，于是，是不是存取成功，就看 updated 是否大于 0 了</p>\n<h3 id=\"没有银弹\"><a class=\"v-toc-item\" href=\"#没有银弹\">#</a> 没有银弹</h3>\n<p>计算机世界里面，多快好省的场景就不存在。一切看场景。</p>\n<p>同样在并发量大的情况下</p>\n<p>1. 如果对某几行修改比较频繁，版本更新频繁，可能乐观锁的 retry 就比较浪费了。<br>\n2. 如果是对整张表的更新比较频繁，而不是频繁修改某几行。乐观锁，就比较合适了。</p>\n<ul>\n<li>乐观方式在应用层，无法阻拦数据库的操作。不会存在死锁的问题。</li>\n<li>悲观方式是数据库实现，他阻止数据库写操作。</li>\n</ul>\n<h2 id=\"0x03-如何解决超卖问题\"><a class=\"v-toc-item\" href=\"#0x03-如何解决超卖问题\">#</a> 0x03 如何解决超卖问题</h2>\n<ol>\n<li>把数量和已卖放到 redis 里面呢？</li>\n<li>交给 deamon 呢？</li>\n<li>用 celery 然后排个队异步任务呢？</li>\n</ol>\n<p>搞个再复杂一点点的，</p>\n<ol>\n<li>在 Redis 里面直接生成 200 个订单号</li>\n<li>然后用户来一个取走一个订单号码</li>\n<li>通过 Celery 削峰 排队走异步任务</li>\n<li>最后通过数据表的 uniq 约束来防止下单超过 200 个。</li>\n</ol>\n<p>嗯，就是这么简单。</p>\n<h2 id=\"0x04-番外篇-数据库隔离级别\"><a class=\"v-toc-item\" href=\"#0x04-番外篇-数据库隔离级别\">#</a> 0x04 番外篇 数据库隔离级别</h2>\n<p>提到了数据库隔离级别，就利用上面的例子顺手讲解一下数据库隔离级别吧。</p>\n<h3 id=\"read-uncommitted\"><a class=\"v-toc-item\" href=\"#read-uncommitted\">#</a> READ-UNCOMMITTED</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-739b559c1747e1d7365187d00a7e3b78_b.jpg\" alt=\"\"></p>\n<h3 id=\"read-committed\"><a class=\"v-toc-item\" href=\"#read-committed\">#</a> READ-COMMITTED</h3>\n<p><img src=\"https://pic4.zhimg.com/v2-5750ab71fb047d99465912af95a6d323_b.jpg\" alt=\"\"></p>\n<h3 id=\"repeatable-read\"><a class=\"v-toc-item\" href=\"#repeatable-read\">#</a> REPEATABLE-READ</h3>\n<p><img src=\"https://pic4.zhimg.com/v2-200ffcc69005fe5d6e37034f72c4a5f3_b.jpg\" alt=\"\"></p>\n<h3 id=\"serializable\"><a class=\"v-toc-item\" href=\"#serializable\">#</a> SERIALIZABLE</h3>\n<p>这个就不放图了。没啥好讲的。性能太低… 我是基本上没怎么使用过的</p>\n<p>性能上 RU &gt; RC &gt; RR &gt; S</p>\n<p>一般人用 RC 和 RR 会多一些，比如我的项目里就使用了 RC , 但什么时候我可能会考虑用 RR 呢、? 比如，我想在一个 Session 里面选两次 最近两个月的用户数据，但是并不希望 出现新的用户。</p>\n<h2 id=\"0x05-番外篇-django-orm\"><a class=\"v-toc-item\" href=\"#0x05-番外篇-django-orm\">#</a> 0x05 番外篇 Django ORM</h2>\n<p><strong>评论区</strong></p>\n<p><a href=\"//www.zhihu.com/people/f4ca959f981c310af429ca25b3b4721d\">@灵魂对撞机</a></p>\n<p>提出了防止超卖的另一种解决方案</p>\n<pre><code class=\"language-python3\">先做订单记录，在直接 sql 改数量，前提库存大于 <span class=\"token number\">0</span>，失败一个就事务回滚，抢购失败。\n\n即如下\n\ndef <span class=\"token function\">do_order</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n   <span class=\"token keyword\">with</span> transaction<span class=\"token punctuation\">.</span><span class=\"token function\">atomic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n       order <span class=\"token operator\">=</span> <span class=\"token function\">make_order</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span>\n       # 他的思路 是 RawSQL\n       # updated <span class=\"token operator\">=</span> <span class=\"token function\">sqlexecute</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">\"update from product set quantity = quantity - 1 where id = {product.id} and quantity > 0 \"</span><span class=\"token punctuation\">)</span>\n       # 在这个基础上，其实可以写出 django orm 对应的语句\n       updated <span class=\"token operator\">=</span> Product<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n           id<span class=\"token operator\">=</span>id<span class=\"token punctuation\">,</span>\n           quantity_gt<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>\n           quantity<span class=\"token operator\">=</span>quantity <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">if</span> updated <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n           transaction<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>面向业务设计的表，和面向数据分析的表应该是两种设计思路。orm 是实体和记录的映射，比较适合面向业务设计的表。</p>\n<p><a href=\"//www.zhihu.com/people/f4ca959f981c310af429ca25b3b4721d\">@灵魂对撞机</a></p>\n<p>也提到<strong>表关联查询太痛苦了</strong></p>\n<p><strong>在我的认知里</strong></p>\n<ol>\n<li><strong>Django 本身是支持 RawSQL 查询的</strong></li>\n<li>当你想要的 object 和 row 是一一对应关系的时候，ORM 写起来特别舒服</li>\n</ol>\n<pre><code class=\"language-text\"><span class=\"token operator\">-</span> django orm 写过滤条件是很舒服的。（抛开性能来说）\n<span class=\"token operator\">-</span> 针对 Object 的修改也很方便，比如商品数量减少。比如自增 update。\n</code></pre>\n<p>这也是 orm 的不足之处，显式多表连续 join 的话过滤条件就很麻烦。</p>\n<p>如果需要<strong>关联查询</strong>这也应该看情况</p>\n<ol>\n<li><strong>如果一般的多表连续 join 如果能使用 nested queries 的话，用 Django 写起来也是特别的舒服。（如果你不是使用 mysql 这种对 nested query 几乎无优化的数据库）</strong></li>\n</ol>\n<pre><code class=\"language-python\">VoteActivity<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>filter\\<span class=\"token punctuation\">(</span>category<span class=\"token operator\">=</span>obj<span class=\"token punctuation\">.</span>category<span class=\"token punctuation\">,</span> user\\_\\_name\\_contains\\<span class=\"token punctuation\">(</span><span class=\"token string\">\"王\"</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user\\_\\_city\\_\\_type<span class=\"token operator\">=</span><span class=\"token string\">\"一线城市\"</span>\\<span class=\"token punctuation\">)</span> # 伪代码\n</code></pre>\n<p><strong>2. 或许是应该走 ETL 或者是把数据丢到 ES 或者针对查询优化的表会更加合适、?</strong></p>\n<p>当然，这也就看具体的情况了。</p>\n<h2 id=\"0xee-参考链接\"><a class=\"v-toc-item\" href=\"#0xee-参考链接\">#</a> 0xEE 参考链接</h2>\n<ol>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/huanongying/p/7021555.html\">https://www.cnblogs.com/huanongying/p/7021555.html</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//ewencp.org/blog/django-and-mysql-isolation-levels/index.html\">Django and MySQL</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//medium.com/%40hakibenita/how-to-manage-concurrency-in-django-models-b240fed4ee2\">https://medium.com/@hakibenita/how-to-manage-concurrency-in-django-models-b240fed4ee2</a></li>\n</ol>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AF%86\">0x01 背景知识</a>\n<ul>\n<li><a href=\"#%E5%B9%B6%E5%8F%91%E4%BC%9A%E5%B8%A6%E6%9D%A5%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4\">并发会带来数据不一致</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-django-%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%A1%B9%E7%9B%AE\">0x02 Django 项目如何解决项目</a>\n<ul>\n<li><a href=\"#%E6%82%B2%E8%A7%82%E7%9A%84%E6%96%B9%E5%BC%8F\">悲观的方式</a></li>\n<li><a href=\"#%E4%B9%90%E8%A7%82%E7%9A%84%E6%96%B9%E5%BC%8F\">乐观的方式</a></li>\n<li><a href=\"#%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9\">没有银弹</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98\">0x03 如何解决超卖问题</a></li>\n<li><a href=\"#0x04-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB\">0x04 番外篇 数据库隔离级别</a>\n<ul>\n<li><a href=\"#read-uncommitted\">READ-UNCOMMITTED</a></li>\n<li><a href=\"#read-committed\">READ-COMMITTED</a></li>\n<li><a href=\"#repeatable-read\">REPEATABLE-READ</a></li>\n<li><a href=\"#serializable\">SERIALIZABLE</a></li>\n</ul>\n</li>\n<li><a href=\"#0x05-%E7%95%AA%E5%A4%96%E7%AF%87-django-orm\">0x05 番外篇 Django ORM</a></li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">0xEE 参考链接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}