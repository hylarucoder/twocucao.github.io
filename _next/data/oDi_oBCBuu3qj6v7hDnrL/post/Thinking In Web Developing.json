{"pageProps":{"post":{"tags":["Web Develop"],"path":"20180904_系统设计入门笔记.md","title":"Thinking In Web Developing","slug":"Thinking In Web Developing","date":"2018-09-04","category":"系统设计","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<h2 id=\"0x02-前端\"><a class=\"v-toc-item\" href=\"#0x02-前端\">#</a> 0x02 前端</h2>\n<h3 id=\"cdn\"><a class=\"v-toc-item\" href=\"#cdn\">#</a> CDN</h3>\n<p>代理服务器分布式网络，它从靠近用户的位置提供内容</p>\n<h4 id=\"更新方式\"><a class=\"v-toc-item\" href=\"#更新方式\">#</a> 更新方式</h4>\n<p>推送 PUSH</p>\n<p>当服务器内容发生变动，推送 CDN 接受新的内容。</p>\n<ul>\n<li>更新最快</li>\n<li>流量最小化</li>\n<li>存储最大化</li>\n</ul>\n<p>拉取 PULL</p>\n<p>当用户请求该资源的时候，从服务器拉取资源。</p>\n<ul>\n<li>更新有延迟</li>\n<li>存储最小化</li>\n</ul>\n<h4 id=\"缺点\"><a class=\"v-toc-item\" href=\"#缺点\">#</a> 缺点</h4>\n<ol>\n<li>CDN 成本可能会很高</li>\n<li>TTL 过期之前更新内容，CDN 缓存内容可能会过时</li>\n</ol>\n<h2 id=\"0x02-后端组件\"><a class=\"v-toc-item\" href=\"#0x02-后端组件\">#</a> 0x02 后端组件</h2>\n<h3 id=\"负载均衡器\"><a class=\"v-toc-item\" href=\"#负载均衡器\">#</a> 负载均衡器</h3>\n<p>负载均衡起到了一个均衡负载的作用</p>\n<ol>\n<li>防止请求进入运行情况糟糕的服务器。</li>\n<li>防止资源过载。</li>\n<li>帮助消除单一故障点。</li>\n</ol>\n<p>额外的功能：</p>\n<ol>\n<li>SSL 终结：解密传入的请求，并加密服务器响应。</li>\n</ol>\n<p>工作-备用 / 双工作</p>\n<h4 id=\"选-worker\"><a class=\"v-toc-item\" href=\"#选-worker\">#</a> 选 Worker</h4>\n<ul>\n<li>Random</li>\n<li>Round Robin</li>\n<li>Least Busy</li>\n<li>Sticky session / Cookie</li>\n<li>By request paramters</li>\n</ul>\n<h4 id=\"路由流量\"><a class=\"v-toc-item\" href=\"#路由流量\">#</a> 路由流量</h4>\n<ul>\n<li>随机</li>\n<li>最少负载</li>\n<li>Session/Cookie</li>\n<li>轮询调度或加权轮询调度</li>\n<li>四层负载均衡</li>\n<li>七层负载均衡</li>\n</ul>\n<h3 id=\"反向代理\"><a class=\"v-toc-item\" href=\"#反向代理\">#</a> 反向代理</h3>\n<ul>\n<li>安全性：隐藏后端服务器信息</li>\n<li>可扩展性和灵活性：客户端只能看到服务器，服务端</li>\n<li>本地终结 SSL 会话：</li>\n<li>压缩：</li>\n<li>缓存：</li>\n<li>静态内容：</li>\n</ul>\n<h2 id=\"0x08-http-server-model\"><a class=\"v-toc-item\" href=\"#0x08-http-server-model\">#</a> 0x08 Http Server Model</h2>\n<h3 id=\"master\"><a class=\"v-toc-item\" href=\"#master\">#</a> Master</h3>\n<p>主进程监听不同的进程信号，并且作出反馈。</p>\n<ul>\n<li>TTIN TTOU 告诉 master 升高或者降低运行的 worker</li>\n<li>CHLD 子进程已结束</li>\n</ul>\n<h3 id=\"四种-worker\"><a class=\"v-toc-item\" href=\"#四种-worker\">#</a> 四种 Worker</h3>\n<h4 id=\"同步-workers\"><a class=\"v-toc-item\" href=\"#同步-workers\">#</a> 同步 Workers</h4>\n<p>单请求单 worker, 并且不支持 persistent connections</p>\n<p>在 CPU 和网络贷款上资源有限。（啥意思，,)</p>\n<p>即请求时间不定的情况应该是要避免的。</p>\n<h4 id=\"异步-workers\"><a class=\"v-toc-item\" href=\"#异步-workers\">#</a> 异步 Workers</h4>\n<p>异步场景</p>\n<ul>\n<li>Applications making long blocking calls (Ie, external web services)</li>\n<li>Serving requests directly to the internet</li>\n<li>Streaming requests and responses</li>\n<li>Long polling</li>\n<li>Web sockets</li>\n<li>Comet （其实就是推送）</li>\n</ul>\n<p>通过 eventlet / gevent 使用 Greenlets</p>\n<h4 id=\"tornado-workers\"><a class=\"v-toc-item\" href=\"#tornado-workers\">#</a> Tornado Workers</h4>\n<p>tornado</p>\n<h4 id=\"asyncio-workers\"><a class=\"v-toc-item\" href=\"#asyncio-workers\">#</a> AsyncIO Workers</h4>\n<ul>\n<li>gthread</li>\n<li>gaiohttp</li>\n</ul>\n<h3 id=\"pre-fork-web-server\"><a class=\"v-toc-item\" href=\"#pre-fork-web-server\">#</a> Pre-fork Web Server</h3>\n<p><a href=\"https://stackoverflow.com/questions/25834333/what-exactly-is-a-pre-fork-web-server-model\">https://stackoverflow.com/questions/25834333/what-exactly-is-a-pre-fork-web-server-model</a></p>\n<p>pre-forking 意味着 一个 master 创建了多个 fork 来处理请求。每一个分叉意味着一个独立的 *nix 进程（不一定吧，异步 worker 怎么算？)。</p>\n<p>The pre in pre-fork means that these processes are forked before a request comes in. They can however usually be increased or decreased as the load goes up and down.</p>\n<p>libev / libuv</p>\n<p>epoll or kqueue, it is always indispensable to the asynchronous topic.</p>\n<p>asyncio</p>\n<p>sanic<br>\nlibuv<br>\nuvloop</p>\n<h2 id=\"0xee-结论\"><a class=\"v-toc-item\" href=\"#0xee-结论\">#</a> 0xEE 结论</h2>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x02-%E5%89%8D%E7%AB%AF\">0x02 前端</a>\n<ul>\n<li><a href=\"#cdn\">CDN</a>\n<ul>\n<li><a href=\"#%E6%9B%B4%E6%96%B0%E6%96%B9%E5%BC%8F\">更新方式</a></li>\n<li><a href=\"#%E7%BC%BA%E7%82%B9\">缺点</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#0x02-%E5%90%8E%E7%AB%AF%E7%BB%84%E4%BB%B6\">0x02 后端组件</a>\n<ul>\n<li><a href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8\">负载均衡器</a>\n<ul>\n<li><a href=\"#%E9%80%89-worker\">选 Worker</a></li>\n<li><a href=\"#%E8%B7%AF%E7%94%B1%E6%B5%81%E9%87%8F\">路由流量</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\">反向代理</a></li>\n</ul>\n</li>\n<li><a href=\"#0x08-http-server-model\">0x08 Http Server Model</a>\n<ul>\n<li><a href=\"#master\">Master</a></li>\n<li><a href=\"#%E5%9B%9B%E7%A7%8D-worker\">四种 Worker</a>\n<ul>\n<li><a href=\"#%E5%90%8C%E6%AD%A5-workers\">同步 Workers</a></li>\n<li><a href=\"#%E5%BC%82%E6%AD%A5-workers\">异步 Workers</a></li>\n<li><a href=\"#tornado-workers\">Tornado Workers</a></li>\n<li><a href=\"#asyncio-workers\">AsyncIO Workers</a></li>\n</ul>\n</li>\n<li><a href=\"#pre-fork-web-server\">Pre-fork Web Server</a></li>\n</ul>\n</li>\n<li><a href=\"#0xee-%E7%BB%93%E8%AE%BA\">0xEE 结论</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}