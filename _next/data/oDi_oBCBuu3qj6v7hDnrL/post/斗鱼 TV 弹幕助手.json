{"pageProps":{"post":{"tags":["Ruby"],"path":"20160204_斗鱼TV弹幕助手.md","title":"斗鱼 TV 弹幕助手","slug":"斗鱼 TV 弹幕助手","date":"2016-02-04","category":"善用佳软","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h1 id=\"斗鱼弹幕助手\"><a class=\"v-toc-item\" href=\"#斗鱼弹幕助手\">#</a> 斗鱼弹幕助手</h1>\n<h2 id=\"0-前言\"><a class=\"v-toc-item\" href=\"#0-前言\">#</a> 0. 前言</h2>\n<p>前几天闲着无聊，看到舍友们都在看斗鱼 TV，虽然我对那些网络游戏东西都不是非常感兴趣。只是我突然间想到，如果我可以获取上面的弹幕内容。不就有点意思了么？</p>\n<h2 id=\"1-分析阶段\"><a class=\"v-toc-item\" href=\"#1-分析阶段\">#</a> 1. 分析阶段</h2>\n<p>如果我想要抓取网页上面的东西，无非就是两种方法</p>\n<!-- more -->\n<ol>\n<li>使用浏览器，手工（自己点击）或者非手工（使用 JS 脚本），存取我想要的东西。</li>\n<li>编写 HTTP 客户端（斗鱼无 HTTPS 通讯）</li>\n</ol>\n<p>第一种方法是万能的，但显然是不行的， 原因如下：</p>\n<ul>\n<li>手动保存实在是不可行，程序员不为也。</li>\n<li>浏览器与本地交互有限，换而言之，也就是即使我抓取了对应的弹幕，我也没有办法解决持久化的问题。</li>\n<li>假设你选择的是 Chrome 或者 firefox 浏览器，也不是不能实现持久化，但这需要写扩展，Chrome 扩展没有写过，也不是很感兴趣。</li>\n</ul>\n<p>第二种方法显然是一个正常的程序员的做法。</p>\n<p>写一个客户端，也就是写一个小爬虫，使用的场景：</p>\n<blockquote>\n<p>用户在终端执行命令</p>\n</blockquote>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>回想一下抓取网站的方法</p>\n<p>四步走：请求网页（原始数据） - 提取数据（提纯数据） - 保存数据 - 分析数据</p>\n<p>很显然，只要解决了请求网页，其他的也就无非解析和 SQL 语句什么的。</p>\n<h3 id=\"11-斗鱼-tv-弹幕抓取的思路确定\"><a class=\"v-toc-item\" href=\"#11-斗鱼-tv-弹幕抓取的思路确定\">#</a> 1.1. 斗鱼 TV 弹幕抓取的思路确定</h3>\n<p>如果是像我上面说的那么简单，也就不必再写一篇文章。毕竟，网页小爬虫没有什么技术含量。分布式爬虫才有。</p>\n<p>通常情况下的网页小爬虫无非要解决如下问题：</p>\n<p>请求，如果对方有一定策略的反爬虫，那需要反反爬虫。比如，</p>\n<ul>\n<li>header 带上 host，带上 refer，带上其他</li>\n<li>需要验证，那就申请用户名和密码，然后登陆</li>\n<li>如果在登录时期有防跨站机制，那就先获取一次登录页面，然后解析出 token，带上对应的 token 然后登陆。</li>\n<li>在程序中加入 Log，并且存到本地。防止出现各种各样的反爬虫机制 ban 掉了程序，从而方便进行下一步防反爬虫对策。</li>\n</ul>\n<p>并且，由于请求响应机制的存在，通常情况下，每一个请求对应一个响应，如果出错了，要么超时，要么有状态码，所以 web 爬虫实在也相对而言比较容易些。</p>\n<p>那么，斗鱼 TV 的站点是不是这样子的容易爬取呢？</p>\n<p>你猜到了，答案是“不是”。</p>\n<p>由于弹幕具有实时性，就决定了斗鱼 TV 的弹幕无法通过保存完整指定时间端弹幕的 XML（比如 BILIBILI 的一个视频弹幕是存在一段 xml 中的）或者 Json 数据来显示弹幕。要不然的话，那主播操作很出色的时候，观众的弹幕岂不是无法实时显示了么？</p>\n<p>那么，肯定就是 WebSocket 了，于是，我一如既往的打开 F12，查看网络流量。</p>\n<blockquote>\n<p>正如你想到的那样，没有任何的弹幕流量来往。一个 WebSocket 的消息都没有。</p>\n</blockquote>\n<p>那么，消息肯定是有的，但是消息并不是通过 HTTP 协议或者 WebSocket 协议传输的，那么问题会出在哪呢？</p>\n<p>分析前端的代码，找出获取弹幕的 JS 代码，苦于代码太多，找了很久没有找到。那也就是执行逻辑可能在 flash 里面。</p>\n<p>于是祭出大杀器 WireShark，抓一下流量。终于看到弹幕的样子了。</p>\n<p>是这样的。</p>\n<p><img src=\"/images/douyutveachmsg.png\" alt=\"每条消息的内容\"></p>\n<p>原来使用的是 Flash 的 Socket 功能。</p>\n<p>多分析几组数据，但还是对发送消息内容缺乏把握，特别是在用户认证，用户接收弹幕这一块。在搜索引擎上搜索了一阵，发现知乎上有个帖子，读完终于解了我的疑惑。</p>\n<p>省略若干消息分析过程。</p>\n<p>总结后得出斗鱼 TV 网站的服务器分布。</p>\n<p><img src=\"/images/douyutvinfo.jpg\" alt=\"猜测网站架构图\"></p>\n<h3 id=\"12-房间信息和弹幕认证服务器获取\"><a class=\"v-toc-item\" href=\"#12-房间信息和弹幕认证服务器获取\">#</a> 1.2. 房间信息和弹幕认证服务器获取</h3>\n<p>首先我们拿随便一个主播房间来说，比如，mkk</p>\n<p>Ta 的房间链接分为两种</p>\n<ul>\n<li><a href=\"http://www.douyutv.com/mkk\">http://www.douyutv.com/mkk</a></li>\n<li><a href=\"http://www.douyutv.com/%E3%80%8E%E6%88%BF%E9%97%B4\">http://www.douyutv.com/『房间</a> id]</li>\n</ul>\n<p>对这个主播房间页面请求，正常，所有的有用信息都不是放在 HTML 中渲染出来，而是放在 HTML 中内置的 JS 脚本中，这是为了减少服务器渲染 HTML 的压力？可是渲染放在 JS 里面不也一样需要渲染？（不明白）总之，就是程序先加载没有具体数据填充页面，然后 JS 更新数据。</p>\n<p>内置的两段 JS 脚本，JS 脚本中有两个变量，该变量很容易转换成 JSON 数据，也就是两段 JSON 数据，一个是关于主播的个人信息，另一个是关于弹幕认证服务器的列表（该列表中的任意一个服务器均可以认证，但每一次请求主播页面得到的认证服务器列表都不一样）</p>\n<p>通过这步，我们就拿到了主播的信息以及弹幕服务器的认证地址，端口。</p>\n<h3 id=\"13-发送-socket-消息的流程简介\"><a class=\"v-toc-item\" href=\"#13-发送-socket-消息的流程简介\">#</a> 1.3. 发送 Socket 消息的流程简介</h3>\n<p>我们通过抓包，分析那一大坨数据包，可以确定以下通过以下的流程便可以获取弹幕消息。（分析过程比较繁琐）</p>\n<p>首先建立两个 Socket。一个用于认证 (@danmu_auth_socket)，另一个用户获取弹幕 (@danmu_client)。</p>\n<ul>\n<li><strong>步骤 1:</strong> @danmu_auth_socket 发送消息登陆，获取消息 1 解析出匿名用户的用户名，再获取消息 2 解析出 gid</li>\n<li><strong>步骤 2:</strong> @danmu_auth_socket 发送 qrl 消息，获取两个没有什么用的消息</li>\n<li><strong>步骤 3:</strong> @danmu_auth_socket 发送 keeplive 消息</li>\n<li><strong>步骤 4:</strong> @danmu_socket 发送伪登陆消息（所有匿名用户都一样只需要输入步骤一中用户名就行了，因为认证已经在上面做过了）</li>\n<li><strong>步骤 5:</strong> @danmu_socket 发送 join_group 消息需要步骤一中国的 gid</li>\n<li><strong>步骤 6:</strong> @danmu_socket 不断的 recv 消息就可以获取弹幕消息了</li>\n</ul>\n<p>后面会详细解释</p>\n<h3 id=\"21-消息-socket-消息格式以及发送一条消息\"><a class=\"v-toc-item\" href=\"#21-消息-socket-消息格式以及发送一条消息\">#</a> 2.1. 消息 Socket 消息格式以及发送一条消息</h3>\n<p>既然是发消息，那么每条消息总是有些格式的。</p>\n<p>斗鱼的消息格式大致如下：</p>\n<p><img src=\"/images/douyutveachmsg.png\" alt=\"每条消息的内容\"></p>\n<p>并遵循下面的格式：</p>\n<ol>\n<li>通信协议长度，后四个部分的长度，四个字节</li>\n<li>第二部分与第一部分一样</li>\n<li>请求代码，发送给斗鱼的话，内容为 0xb1,0x02, 斗鱼返回的代码为 0xb2,0x02</li>\n<li>发送内容</li>\n<li>末尾字节</li>\n</ol>\n<pre><code class=\"language-ruby\"># <span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token operator\">-</span> encoding <span class=\"token operator\">:</span> utf<span class=\"token operator\">-</span><span class=\"token number\">8</span> <span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Message</span>\n  # 向斗鱼发送的消息\n  # <span class=\"token number\">1.</span> 通信协议长度，后四个部分的长度，四个字节\n  # <span class=\"token number\">2.</span> 第二部分与第一部分一样\n  # <span class=\"token number\">3.</span> 请求代码，发送给斗鱼的话，内容为 <span class=\"token number\">0xb1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> 斗鱼返回的代码为 <span class=\"token number\">0xb2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x02</span>\n  # <span class=\"token number\">4.</span> 发送内容\n  # <span class=\"token number\">5.</span> 末尾字节\n  <span class=\"token function\">#pack</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c*'</span><span class=\"token punctuation\">)</span> 是字节数组转字符串的一种诡异的转化方式\n  def <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n    @length <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>content<span class=\"token punctuation\">.</span>size <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c*'</span><span class=\"token punctuation\">)</span>\n    @code <span class=\"token operator\">=</span> @length<span class=\"token punctuation\">.</span>dup\n    @magic <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0xb1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c*'</span><span class=\"token punctuation\">)</span>\n    @content  <span class=\"token operator\">=</span> content\n    @end <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c*'</span><span class=\"token punctuation\">)</span>\n  end\n\n  def to_s\n    @length <span class=\"token operator\">+</span> @code <span class=\"token operator\">+</span> @magic <span class=\"token operator\">+</span> @content <span class=\"token operator\">+</span> @end\n  end\n\nend\n\n</code></pre>\n<p>经过封装，我们仅仅关注那些可见的字符串，也就是 Content 部分就可以了。<br>\ncontent 部分，也就是发送消息的内容，在文章后面将会详解。</p>\n<p>开启两个 Socket，一个用户认证，另一个用于弹幕的获取。</p>\n<p>用于用户弹幕认证的，是 2.1 中所说的认证服务器列表中任意一个。挑选出来一组 ip 和端口</p>\n<blockquote>\n<p>@danmu_auth_socket = TCPSocket.new @auth_dst_ip,@auth_dst_port</p>\n</blockquote>\n<p>用户获取弹幕的只要为</p>\n<pre><code class=\"language-ruby\">danmu<span class=\"token punctuation\">.</span>douyutv<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span><span class=\"token number\">8601</span>\ndanmu<span class=\"token punctuation\">.</span>douyutv<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span><span class=\"token number\">8602</span>\ndanmu<span class=\"token punctuation\">.</span>douyutv<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span><span class=\"token number\">12601</span>\ndanmu<span class=\"token punctuation\">.</span>douyutv<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span><span class=\"token number\">12602</span>\n</code></pre>\n<p>四组域名：端口均可以作为如下的 DANMU_SERVER 和 PORT</p>\n<blockquote>\n<p>@danmu_socket = TCPSocket.new DANMU_SERVER,DANMU_PORT</p>\n</blockquote>\n<p>发送一条消息只需如此</p>\n<pre><code class=\"language-ruby\">    data <span class=\"token operator\">=</span> <span class=\"token string\">\"type@=loginreq/username@=\"</span><span class=\"token operator\">+</span>@username<span class=\"token operator\">+</span><span class=\"token string\">\"/password@=1234567890123456/roomid@=\"</span> <span class=\"token operator\">+</span> @room_id<span class=\"token punctuation\">.</span>to_s <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span>\n    all_data <span class=\"token operator\">=</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    @danmu_socket<span class=\"token punctuation\">.</span>write all_data\n</code></pre>\n<p><strong>接下来，我们需处理上面说的六个步骤</strong></p>\n<h3 id=\"22-发送消息详细流程之步骤一\"><a class=\"v-toc-item\" href=\"#22-发送消息详细流程之步骤一\">#</a> 2.2. 发送消息详细流程之步骤一</h3>\n<p>发送消息内容为：</p>\n<blockquote>\n<p>type@=loginreq/username@=/ct@=0/password@=/roomid@=156277/devid@=DF9E4515E0EE766B39F8D8A2E928BB7C/rt@=1453795822/vk@=4fc6e613fc650a058757331ed6c8a619/ver@=20150929/</p>\n</blockquote>\n<p>我们需要注意的内容如下：</p>\n<pre><code class=\"language-ruby\">type 表示消息的类型登陆消息为 loginreq\nusername 不需要，请求登陆以后系统会自动的返回对应的游客账号。\nct 不清楚什么意思，默认为 <span class=\"token number\">0</span> 并无影响\npassword 不需要\nroomid 房间的 id\ndevid 为设备标识，无所谓，所以我们使用随机的 <span class=\"token constant\">UUID</span> 生成\nrt 应该是 runtime 吧，时间戳\nvk 为时间戳 <span class=\"token operator\">+</span><span class=\"token string\">\"7oE9nPEG9xXV69phU31FYCLUagKeYtsF\"</span><span class=\"token operator\">+</span>devid 的字符串拼接结果的 <span class=\"token constant\">MD5</span> 值（这个是参考了一篇文章，关于这一处我也不大明白怎么探究出来的）\nver 默认\n</code></pre>\n<p>通过这一步，我们可以获取两条消息，并从消息中使用正则表达式获取对应的用户名以及 gid</p>\n<pre><code class=\"language-ruby\">    str <span class=\"token operator\">=</span> @danmu_auth_socket<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span>\n    @username<span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/username@=(.+)\\/nickname</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    str <span class=\"token operator\">=</span> @danmu_auth_socket<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span>\n    @gid <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/gid@=(\\d+)\\/</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h3 id=\"23-发送消息详细流程之步骤二\"><a class=\"v-toc-item\" href=\"#23-发送消息详细流程之步骤二\">#</a> 2.3. 发送消息详细流程之步骤二</h3>\n<p>发送的消息内容为</p>\n<blockquote>\n<p>“type@=qrl/rid@=” + @room_id.to_s + “/”</p>\n</blockquote>\n<p>无需多说，类型为 qrl，rid 为 roomid，直接发送这条消息就好。返回的两条消息也没有什么价值。</p>\n<pre><code class=\"language-ruby\">    <span class=\"token function\">send_message</span><span class=\"token punctuation\">(</span><span class=\"token operator\">:</span>qrl<span class=\"token punctuation\">,</span>@danmu_auth_socket<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    str <span class=\"token operator\">=</span> @danmu_auth_socket<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span>\n    str <span class=\"token operator\">=</span> @danmu_auth_socket<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"24-发送消息详细流程之步骤三\"><a class=\"v-toc-item\" href=\"#24-发送消息详细流程之步骤三\">#</a> 2.4. 发送消息详细流程之步骤三</h3>\n<p>发送的消息内容为</p>\n<blockquote>\n<p>“type@=keeplive/tick@=” + timestamp + “/vbw@=0/k@=19beba41da8ac2b4c7895a66cab81e23/”</p>\n</blockquote>\n<p>直接发送。无太大意义。</p>\n<pre><code class=\"language-ruby\">    <span class=\"token function\">send_message</span><span class=\"token punctuation\">(</span><span class=\"token operator\">:</span>keeplive<span class=\"token punctuation\">,</span>@danmu_auth_socket<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    str <span class=\"token operator\">=</span> @danmu_auth_socket<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>前三步，也就是 2.2-2.3-2.4 三步骤，也就是使用 @danmu_auth_socket 完成获取 username 和 gid 的重要步骤。获取这两个字段以后，也就完成了它存在的使命。</strong></p>\n<p>接下来的就是 @danmu_socket 获取弹幕的时候了！</p>\n<h3 id=\"25-发送消息详细流程之步骤四\"><a class=\"v-toc-item\" href=\"#25-发送消息详细流程之步骤四\">#</a> 2.5. 发送消息详细流程之步骤四</h3>\n<p>消息内容为：“type@=loginreq/username@=”+@username+“/password@=1234567890123456/roomid@=” + @room_id.to_s + “/”</p>\n<p>和上面 2.2 中略有不同。但是，需要注意的是</p>\n<pre><code class=\"language-ruby\">username 为 <span class=\"token number\">2.2</span> 中所得到的 username\npassword 的变化\n少了几个字段\n</code></pre>\n<pre><code class=\"language-ruby\">    data <span class=\"token operator\">=</span> <span class=\"token string\">\"type@=loginreq/username@=\"</span><span class=\"token operator\">+</span>@username<span class=\"token operator\">+</span><span class=\"token string\">\"/password@=1234567890123456/roomid@=\"</span> <span class=\"token operator\">+</span> @room_id<span class=\"token punctuation\">.</span>to_s <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span>\n    all_data <span class=\"token operator\">=</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    @danmu_socket<span class=\"token punctuation\">.</span>write all_data\n    str <span class=\"token operator\">=</span> @danmu_socket<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"26-发送消息详细流程之步骤五\"><a class=\"v-toc-item\" href=\"#26-发送消息详细流程之步骤五\">#</a> 2.6. 发送消息详细流程之步骤五</h3>\n<p>接下来就是完成认证的最后一步了，join_group 的消息内容为</p>\n<blockquote>\n<p>“type@=joingroup/rid@=” + @room_id.to_s + “/gid@=”+@gid+“/”</p>\n</blockquote>\n<p>gid 为 2.2 中所得到的 gid。</p>\n<pre><code class=\"language-ruby\">    <span class=\"token function\">send_message</span><span class=\"token punctuation\">(</span><span class=\"token operator\">:</span>join_group<span class=\"token punctuation\">,</span>@danmu_socket<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"27-发送消息详细流程之步骤六\"><a class=\"v-toc-item\" href=\"#27-发送消息详细流程之步骤六\">#</a> 2.7. 发送消息详细流程之步骤六</h3>\n<p>获取弹幕，并且打印出来。</p>\n<pre><code class=\"language-ruby\">    danmu_data <span class=\"token operator\">=</span> @danmu_socket<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span>\n    type <span class=\"token operator\">=</span> danmu_data<span class=\"token punctuation\">[</span>danmu_data<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type@=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n    puts type<span class=\"token punctuation\">.</span><span class=\"token function\">gsub</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sui'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gsub</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@S'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gsub</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@A='</span><span class=\"token punctuation\">,</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gsub</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@='</span><span class=\"token punctuation\">,</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>后三步，则是 @danmu_socket</strong> 获取弹幕的步骤。</p>\n<p>于是，通过这些步骤，就可以完成了简单的 douutv 的和新代码，接下来的步骤就是完善，重构这些代码了。</p>\n<h2 id=\"总结\"><a class=\"v-toc-item\" href=\"#总结\">#</a> 总结</h2>\n<h3 id=\"1-痛点一头疼的过度封装\"><a class=\"v-toc-item\" href=\"#1-痛点一头疼的过度封装\">#</a> 1. 痛点一，头疼的过度封装</h3>\n<p>我们知道，在编写 Ruby 的 Socket Server 和 Client 的时候，非常方便，特别是传输的 socket 消息内容为字符串的时候。</p>\n<p>但是，当处理的消息内容不可打印的字符串的时候，必须要转化成字节数组的时候，让我着实混乱了一阵，直到使用了 pack(”c*“) 和 unpack(“c*”), 并且通过 wireshark 抓包验证了自己的发送的数据包和接受的数据包才安心使用 pack 与 unpack。</p>\n<h3 id=\"2-痛点二至今还没有解决-rtmp-地址的获取\"><a class=\"v-toc-item\" href=\"#2-痛点二至今还没有解决-rtmp-地址的获取\">#</a> 2. 痛点二，至今还没有解决 rtmp 地址的获取</h3>\n<p>找了很久没有办法解决 rtmp 地址的自动获取：</p>\n<p>路径如下</p>\n<p><a href=\"http://www.douyutv.com/swf_api/room/301712?cdn=&amp;nofan=yes&amp;_t=24243097&amp;sign=3b2efb130cb25a85e621f477f95c7341\">http://www.douyutv.com/swf_api/room/301712?cdn=&amp;nofan=yes&amp;_t=24243097&amp;sign=3b2efb130cb25a85e621f477f95c7341</a></p>\n<p>这一处的请求不是 XHR，也就是不是 JS 脚本通过 XMLHttpRequest 异步加载；那么，八成是 flash 通过 http 协议获取的。我估计八成执行逻辑应该是在 flash 之中。</p>\n<h2 id=\"代码\"><a class=\"v-toc-item\" href=\"#代码\">#</a> 代码</h2>\n<p>核心代码的地址为：</p>\n<p>重构版本即将出炉。</p>\n<p>还请轻拍。</p>\n<h2 id=\"参考链接\"><a class=\"v-toc-item\" href=\"#参考链接\">#</a> 参考链接</h2>\n<p>PS: 如果有问题可以在下方留言或者发送 email 到 <a href=\"mailto:twocucao@gmail.com\">twocucao@gmail.com</a> 给我。</p>\n<h2 id=\"changelog\"><a class=\"v-toc-item\" href=\"#changelog\">#</a> ChangeLog</h2>\n<p>2016-02-09 09:01:00 - 重写部分内容。增加 Ruby Socket 部分。</p>\n","toc":"<ul class=\"v-article-toc\">\n<li><a href=\"#%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95%E5%8A%A9%E6%89%8B\">斗鱼弹幕助手</a>\n<ul>\n<li><a href=\"#0-%E5%89%8D%E8%A8%80\">0. 前言</a></li>\n<li><a href=\"#1-%E5%88%86%E6%9E%90%E9%98%B6%E6%AE%B5\">1. 分析阶段</a>\n<ul>\n<li><a href=\"#11-%E6%96%97%E9%B1%BC-tv-%E5%BC%B9%E5%B9%95%E6%8A%93%E5%8F%96%E7%9A%84%E6%80%9D%E8%B7%AF%E7%A1%AE%E5%AE%9A\">1.1. 斗鱼 TV 弹幕抓取的思路确定</a></li>\n<li><a href=\"#12-%E6%88%BF%E9%97%B4%E4%BF%A1%E6%81%AF%E5%92%8C%E5%BC%B9%E5%B9%95%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8E%B7%E5%8F%96\">1.2. 房间信息和弹幕认证服务器获取</a></li>\n<li><a href=\"#13-%E5%8F%91%E9%80%81-socket-%E6%B6%88%E6%81%AF%E7%9A%84%E6%B5%81%E7%A8%8B%E7%AE%80%E4%BB%8B\">1.3. 发送 Socket 消息的流程简介</a></li>\n<li><a href=\"#21-%E6%B6%88%E6%81%AF-socket-%E6%B6%88%E6%81%AF%E6%A0%BC%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%8F%91%E9%80%81%E4%B8%80%E6%9D%A1%E6%B6%88%E6%81%AF\">2.1. 消息 Socket 消息格式以及发送一条消息</a></li>\n<li><a href=\"#22-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E8%AF%A6%E7%BB%86%E6%B5%81%E7%A8%8B%E4%B9%8B%E6%AD%A5%E9%AA%A4%E4%B8%80\">2.2. 发送消息详细流程之步骤一</a></li>\n<li><a href=\"#23-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E8%AF%A6%E7%BB%86%E6%B5%81%E7%A8%8B%E4%B9%8B%E6%AD%A5%E9%AA%A4%E4%BA%8C\">2.3. 发送消息详细流程之步骤二</a></li>\n<li><a href=\"#24-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E8%AF%A6%E7%BB%86%E6%B5%81%E7%A8%8B%E4%B9%8B%E6%AD%A5%E9%AA%A4%E4%B8%89\">2.4. 发送消息详细流程之步骤三</a></li>\n<li><a href=\"#25-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E8%AF%A6%E7%BB%86%E6%B5%81%E7%A8%8B%E4%B9%8B%E6%AD%A5%E9%AA%A4%E5%9B%9B\">2.5. 发送消息详细流程之步骤四</a></li>\n<li><a href=\"#26-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E8%AF%A6%E7%BB%86%E6%B5%81%E7%A8%8B%E4%B9%8B%E6%AD%A5%E9%AA%A4%E4%BA%94\">2.6. 发送消息详细流程之步骤五</a></li>\n<li><a href=\"#27-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E8%AF%A6%E7%BB%86%E6%B5%81%E7%A8%8B%E4%B9%8B%E6%AD%A5%E9%AA%A4%E5%85%AD\">2.7. 发送消息详细流程之步骤六</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a>\n<ul>\n<li><a href=\"#1-%E7%97%9B%E7%82%B9%E4%B8%80%E5%A4%B4%E7%96%BC%E7%9A%84%E8%BF%87%E5%BA%A6%E5%B0%81%E8%A3%85\">1. 痛点一，头疼的过度封装</a></li>\n<li><a href=\"#2-%E7%97%9B%E7%82%B9%E4%BA%8C%E8%87%B3%E4%BB%8A%E8%BF%98%E6%B2%A1%E6%9C%89%E8%A7%A3%E5%86%B3-rtmp-%E5%9C%B0%E5%9D%80%E7%9A%84%E8%8E%B7%E5%8F%96\">2. 痛点二，至今还没有解决 rtmp 地址的获取</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81\">代码</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">参考链接</a></li>\n<li><a href=\"#changelog\">ChangeLog</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}