{"pageProps":{"post":{"tags":["PipEnv"],"path":"20180523_PipEnv.md","title":"PyCon 2018 之 pipenv -- 未来的 Python 依赖管理工具","slug":"PyCon 2018 之 pipenv -- 未来的 Python 依赖管理工具","date":"2018-05-23","category":"Python","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>PyCon 2018 有很多精彩的演讲，今天的文章里，介绍一下 K 神的演讲 『Python 未来的包管理工具 pipenv』</p>\n<p>Kenneth Reitz 出品，必属精品。</p>\n<h3 id=\"python-打包历史\"><a class=\"v-toc-item\" href=\"#python-打包历史\">#</a> Python 打包历史</h3>\n<p>刚开始的时候，我们是这样安装包的。</p>\n<pre><code>curl http://pypi.python.org/packages/alsdasdl/requests.tar.gz | tar zxf\ncd requests/\npython setup.py install\n</code></pre>\n<p>这个问题初看起来不是问题，但是随着你安装程序的增多就知道有多么痛苦了。</p>\n<ol>\n<li>有的依赖库依赖别的库你怎么解决？比如 pandas 需要安装 numpy</li>\n<li>有的依赖库依赖 c 库怎么办？比如 LXML</li>\n<li>在 python2.6.5 下，如果我需要安装两个不同版本的 Django 开发不同的软件怎么办？难道只能动态复制文件到 site-packages 里面？</li>\n</ol>\n<p>后来，我们是这样安装包的。</p>\n<pre><code>easy_install requests\n</code></pre>\n<p>我们可以直接从 pypi 进行安装了。但尼玛，为什么 easy_install 安装很 easy, 但是没有 easy_uninstall?</p>\n<p>好，2010 年后，我们继续前进：</p>\n<ul>\n<li>可以通过 pip 替代 easy_install 了。</li>\n<li>可以通过 virtualenv 管理项目的依赖库了。虽然说，还是不能像 ruby gem 一样同时把多个版本的的软件装在同一个系统里。</li>\n<li>可以通过 requirements 锁依赖了。</li>\n</ul>\n<p>但，同期的其他编程语言社区分别出现了如下的包管理工具：</p>\n<ul>\n<li>node -&gt; yarn &amp;&amp; npm , 有 lockfile</li>\n<li>php -&gt; composer , 有 lockfile</li>\n<li>rust -&gt; cargo , 有 lockfile</li>\n<li>ruby -&gt; bundler , 有 lockfile</li>\n</ul>\n<p>而我大 Python 居然没跟上潮流</p>\n<ul>\n<li>python -&gt; pip &amp;&amp; virtualenv/venv , 无 lockfile</li>\n</ul>\n<blockquote>\n<p>PS: Python3.3 之后，默认可以直接使用 venv 模块，不需要再安装 virtualenv 了。但还是需要手动，并且用起来比较反直觉。</p>\n</blockquote>\n<p>关于 requirements.txt</p>\n<ul>\n<li>如果你使用 pip freeze 来形成这个文件，则不直观，完全看不出来哪个依赖库依赖哪个依赖。</li>\n<li>如果你直接手动指定你所需要的库，比如 flask 的话，似乎又有些太直观了。</li>\n</ul>\n<p>如果能有一个东西，既可以表示 freeze 的结果 (what you want)，又可以表示你需要的库 (what you need). 就好了。</p>\n<blockquote>\n<p>这当然可以考虑用两份 requirements 来解决。先安装 what you need 用来开发，然后 freeze 为 what you want 去部署。</p>\n</blockquote>\n<p>当然，铺垫了这么多 K 神肯定是来介绍他的 pipenv 的。</p>\n<p>比如说，我想查看，本项目的依赖库，直接 pipenv graph</p>\n<pre><code>coverage==4.5.1\nfabric==2.0.1\n  - cryptography [required: &gt;=1.1, installed: 2.2.2]\n    - asn1crypto [required: &gt;=0.21.0, installed: 0.24.0]\n    - cffi [required: &gt;=1.7, installed: 1.11.5]\n      - pycparser [required: Any, installed: 2.18]\n    - idna [required: &gt;=2.1, installed: 2.6]\n    - six [required: &gt;=1.4.1, installed: 1.11.0]\n  - invoke [required: &lt;2.0,&gt;=1.0, installed: 1.0.0]\n  - paramiko [required: &gt;=2.4, installed: 2.4.1]\n    - bcrypt [required: &gt;=3.1.3, installed: 3.1.4]\n      - cffi [required: &gt;=1.1, installed: 1.11.5]\n        - pycparser [required: Any, installed: 2.18]\n      - six [required: &gt;=1.4.1, installed: 1.11.0]\n    - cryptography [required: &gt;=1.5, installed: 2.2.2]\n      - asn1crypto [required: &gt;=0.21.0, installed: 0.24.0]\n      - cffi [required: &gt;=1.7, installed: 1.11.5]\n        - pycparser [required: Any, installed: 2.18]\n      - idna [required: &gt;=2.1, installed: 2.6]\n      - six [required: &gt;=1.4.1, installed: 1.11.0]\n    - pyasn1 [required: &gt;=0.1.7, installed: 0.4.2]\n    - pynacl [required: &gt;=1.0.1, installed: 1.2.1]\n      - cffi [required: &gt;=1.4.1, installed: 1.11.5]\n        - pycparser [required: Any, installed: 2.18]\n      - six [required: Any, installed: 1.11.0]\nflake8==3.5.0\n  - mccabe [required: &gt;=0.6.0,&lt;0.7.0, installed: 0.6.1]\n  - pycodestyle [required: &lt;2.4.0,&gt;=2.0.0, installed: 2.3.1]\n  - pyflakes [required: &gt;=1.5.0,&lt;1.7.0, installed: 1.6.0]\n# 其他省略\n</code></pre>\n<p>如何尝鲜？我最近更新到了之前写的一个库（代码写的惨不忍赌，最近准备重构，勿喷）</p>\n<pre><code>git clone git@github.com:twocucao/YaPyLib.git\ncd YaPyLib/\nbrew install pipenv\npipenv --three\npipenv install --dev\npipenv shell\n</code></pre>\n<p>记住几个命令</p>\n<pre><code>pipenv --venv # 查看 venv 位置\npipenv --python 3.6.5\nexit 退出 pipenv shell\n</code></pre>\n<p>至于其他的功能，参考官网自己摸索吧。</p>\n<h3 id=\"faq-环节\"><a class=\"v-toc-item\" href=\"#faq-环节\">#</a> FAQ 环节</h3>\n<p>FAQ 环节有一个问题非常有趣，应该把 lockfile 放在 git 仓库里面吗？</p>\n<p>k 神是这么回答的 yes。 这个问题很久之前就在 issue 上回答过了</p>\n<p><a href=\"https://github.com/pypa/pipenv/issues/598\">https://github.com/pypa/pipenv/issues/598</a></p>\n<p>我刚开始觉得不提交会好一些，后来觉得 track 一下也无妨。</p>\n<h2 id=\"写在最后\"><a class=\"v-toc-item\" href=\"#写在最后\">#</a> 写在最后</h2>\n<blockquote>\n<p>在用 npm 和 yarn 的时候，我有这么一个想法，希望 python 圈子里面能出一个类似于包管理工具。今年 2 月份的时候把自己的项目迁移过来，发现 pipenv 用起来很挺舒服的。</p>\n</blockquote>\n<blockquote>\n<p>pipenv 是未来。火速用上吧。</p>\n</blockquote>\n<blockquote>\n<p>觉得有趣就点个赞或者关注下呗。</p>\n</blockquote>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a>\n<ul>\n<li><a href=\"#python-%E6%89%93%E5%8C%85%E5%8E%86%E5%8F%B2\">Python 打包历史</a></li>\n<li><a href=\"#faq-%E7%8E%AF%E8%8A%82\">FAQ 环节</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E\">写在最后</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}