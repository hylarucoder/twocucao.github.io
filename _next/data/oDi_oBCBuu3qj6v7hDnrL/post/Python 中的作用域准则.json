{"pageProps":{"post":{"tags":["Python"],"path":"20171120_PythonClosureAndScopes.md","title":"Python 中的作用域准则","slug":"Python 中的作用域准则","date":"2017-11-20","category":"Python","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>因为最早用的是 Java 和 C#，写 Python 的时候自然也把 Python 作用域的想的和原有的一致。</p>\n<p>Python 的作用域变量遵循在大部分情况下是一致的，但也有例外的情况。</p>\n<p>本文着通过遇到的一个作用域的小问题来说说 Python 的作用域</p>\n<!-- more -->\n<h2 id=\"0x01-作用域的几个实例\"><a class=\"v-toc-item\" href=\"#0x01-作用域的几个实例\">#</a> 0x01 作用域的几个实例</h2>\n<p>Python 的作用域变量遵循在大部分情况下与其他语言一致，但也有例外的情况。比如：</p>\n<h3 id=\"11-第一个例子\"><a class=\"v-toc-item\" href=\"#11-第一个例子\">#</a> 1.1 第一个例子</h3>\n<p>作用域第一版代码如下</p>\n<pre><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> # 打印 <span class=\"token number\">1</span> <span class=\"token number\">4465620064</span>\ndef <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  # 打印 <span class=\"token number\">1</span> <span class=\"token number\">4465620064</span>\n</code></pre>\n<p>作用域第一版对应字节码如下</p>\n<pre><code>  4           0 LOAD_GLOBAL              0 (print)\n              3 LOAD_GLOBAL              1 (a)\n              6 LOAD_GLOBAL              2 (id)\n              9 LOAD_GLOBAL              1 (a)\n             12 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\n             15 CALL_FUNCTION            2 (2 positional, 0 keyword pair)\n             18 POP_TOP\n             19 LOAD_CONST               0 (None)\n             22 RETURN_VALUE\n</code></pre>\n<blockquote>\n<p>PS: 行 4 表示 代码行数 0 / 3 / 9 … 不知道是啥，我就先管他叫做<strong>条</strong>吧 是 load global<br>\nPPS: 注意条 3/6 LOAD_GLOBAL 为从全局变量中加载</p>\n</blockquote>\n<p>顺手附上本文需要着重理解的几个指令</p>\n<pre><code>LOAD_GLOBA          : Loads the global named co_names[namei] onto the stack.\nLOAD_FAST(var_num)  : Pushes a reference to the local co_varnames[var_num] onto the stack.\nSTORE_FAST(var_num) : Stores TOS into the local co_varnames[var_num].\n</code></pre>\n<p>这点似乎挺符合我们认知的，那么，再深一点呢？既然这个变量是可以 Load 进来的就可以修改咯？</p>\n<h3 id=\"12-第二个例子\"><a class=\"v-toc-item\" href=\"#12-第二个例子\">#</a> 1.2 第二个例子</h3>\n<p>然而并不是，我们看作用域第二版对应代码如下</p>\n<pre><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> # 打印 <span class=\"token number\">1</span> <span class=\"token number\">4465620064</span>\ndef <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> # 打印 <span class=\"token number\">2</span> <span class=\"token number\">4465620096</span>\n</code></pre>\n<p>一看，WTF, 两个 a 内存值不一样。证明这两个变量是完全两个变量。</p>\n<p>作用域第二版对应字节码如下</p>\n<pre><code>  4           0 LOAD_CONST               1 (2)\n              3 STORE_FAST               0 (a)\n\n  5           6 LOAD_GLOBAL              0 (print)\n              9 LOAD_FAST                0 (a)\n             12 LOAD_GLOBAL              1 (id)\n             15 LOAD_FAST                0 (a)\n             18 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\n             21 CALL_FUNCTION            2 (2 positional, 0 keyword pair)\n             24 POP_TOP\n             25 LOAD_CONST               0 (None)\n             28 RETURN_VALUE\n</code></pre>\n<blockquote>\n<p>注意行 4 条 3 (STORE_FAST) 以及行 5 条 9/15 (LOAD_FAST)</p>\n</blockquote>\n<p>这说明了这里的 a 并不是 LOAD_GLOBAL 而来，而是从该函数的作用域 LOAD_FAST 而来。</p>\n<h3 id=\"13-第三个例子\"><a class=\"v-toc-item\" href=\"#13-第三个例子\">#</a> 1.3 第三个例子</h3>\n<p>那我们在函数体重修改一下 a 值看看。</p>\n<pre><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\ndef <span class=\"token function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> # 注释掉此行不影响结论\n    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> # 当调用到这里的时候 local variable <span class=\"token string\">'a'</span> referenced before assignment\n# 即 a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span> 这里的第二个 a 报错鸟\n</code></pre>\n<pre><code>  3           0 LOAD_GLOBAL              0 (print)\n              3 LOAD_FAST                0 (a)\n              6 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\n              9 POP_TOP\n\n  4          10 LOAD_FAST                0 (a)\n             13 LOAD_CONST               1 (1)\n             16 BINARY_ADD\n             17 STORE_FAST               0 (a)\n\n  5          20 LOAD_GLOBAL              0 (print)\n             23 LOAD_FAST                0 (a)\n             26 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\n             29 POP_TOP\n             30 LOAD_CONST               0 (None)\n             33 RETURN_VALUE\n</code></pre>\n<p>那么，func3 也就自然而言由于没有无法 LOAD_FAST 对应的 a 变量，则报了引用错误。</p>\n<p>然后问题来了，a 为基本类型的时候是这样的。如果引用类型呢？我们直接仿照 func3 的实例把 a 改成 list 类型。如下</p>\n<h3 id=\"14-第四个例子\"><a class=\"v-toc-item\" href=\"#14-第四个例子\">#</a> 1.4 第四个例子</h3>\n<pre><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ndef <span class=\"token function\">func4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> # 这条注不注释掉都一样\n    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> # 这里我故意写错 按理来说应该是 a<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">func4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n# 当调用到这里的时候 local variable <span class=\"token string\">'a'</span> referenced before assignment\n</code></pre>\n<p>╮(╯▽╰)╭ 看来事情那么简单，结果变量 a 依旧是无法修改。</p>\n<p>可按理来说跟应该报下面的错误呀</p>\n<pre><code>'int' object is not iterable\n</code></pre>\n<h3 id=\"15-第五个例子\"><a class=\"v-toc-item\" href=\"#15-第五个例子\">#</a> 1.5 第五个例子</h3>\n<pre><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ndef <span class=\"token function\">func5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">func5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n# <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">4500243208</span>\n# <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">4500243208</span>\n</code></pre>\n<p>这下可以修改了。看一下字节码。</p>\n<pre><code>  3           0 LOAD_GLOBAL              0 (print)\n              3 LOAD_GLOBAL              1 (a)\n              6 LOAD_GLOBAL              2 (id)\n              9 LOAD_GLOBAL              1 (a)\n             12 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\n             15 CALL_FUNCTION            2 (2 positional, 0 keyword pair)\n             18 POP_TOP\n\n  4          19 LOAD_GLOBAL              1 (a)\n             22 LOAD_ATTR                3 (append)\n             25 LOAD_CONST               1 (1)\n             28 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\n             31 POP_TOP\n\n  5          32 LOAD_GLOBAL              0 (print)\n             35 LOAD_GLOBAL              1 (a)\n             38 LOAD_GLOBAL              2 (id)\n             41 LOAD_GLOBAL              1 (a)\n             44 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\n             47 CALL_FUNCTION            2 (2 positional, 0 keyword pair)\n             50 POP_TOP\n             51 LOAD_CONST               0 (None)\n             54 RETURN_VALUE\n</code></pre>\n<p>从全局拿来 a 变量，执行 append 方法。</p>\n<h2 id=\"0x02-作用域准则以及本地赋值准则\"><a class=\"v-toc-item\" href=\"#0x02-作用域准则以及本地赋值准则\">#</a> 0x02 作用域准则以及本地赋值准则</h2>\n<h3 id=\"21-作用域准则\"><a class=\"v-toc-item\" href=\"#21-作用域准则\">#</a> 2.1 作用域准则</h3>\n<p>看来这是解释器遵循了某种变量查找的法则，似乎就只能从原理上而不是在 CPython 的实现上解释这个问题了。</p>\n<p>查找了一些资料，发现 Python 解释器在依据 基于 LEGB 准则 （顺手吐槽一下不是 LGBT）</p>\n<p>LEGB 指的变量查找遵循</p>\n<ul>\n<li>Local</li>\n<li>Enclosing-function locals</li>\n<li>Global</li>\n<li>Built-In</li>\n</ul>\n<p>StackOverFlow 上 martineau 提供了一个不错的例子用来说明</p>\n<pre><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1. Global x:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    y <span class=\"token operator\">=</span> x\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2. Enclosed y:\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3. Enclosed x:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\n    def <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4. Enclosed self.x\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5. Global x\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        except NameError <span class=\"token keyword\">as</span> e<span class=\"token operator\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6.\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n\n    def <span class=\"token function\">method_local_ref</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        except UnboundLocalError <span class=\"token keyword\">as</span> e<span class=\"token operator\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"7.\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> <span class=\"token number\">200</span> # causing <span class=\"token number\">7</span> because has same name\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8. Local x\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\ninst <span class=\"token operator\">=</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token function\">method_local_ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>我们试着用变量查找准则去解释 <strong>第一个例子</strong> 的时候，是解释的通的。</p>\n<p>第二个例子，发现函数体内的 a 变量已经不是那个 a 变量了。要是按照这个查找原则的话，似乎有点说不通了。</p>\n<p>但当解释第三个例子的时候，就完全说不通了。</p>\n<pre><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\ndef <span class=\"token function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> # 注释掉此行不影响结论\n    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> # 当调用到这里的时候 local variable <span class=\"token string\">'a'</span> referenced before assignment\n# 即 a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span> 这里的第二个 a 报错鸟\n</code></pre>\n<p>按照我的猜想，这里的代码执行可能有两种情况：</p>\n<ul>\n<li>当代码执行到第三行的时候可能是向从 local 找 a, 发现没有，再找 Enclosing-function 发现没有，最后应该在 Global 里面找到才是。注释掉第三行的时候也是同理。</li>\n<li>当代码执行到第三行的时候可能是向下从 local 找 a, 发现有，然后代码执行，结束。</li>\n</ul>\n<p>但如果真的和我的想法接近的话，这两种情况都可以执行，除了变量作用域之外还是有一些其他的考量。我把这个叫做<strong>本地赋值准则</strong> （拍脑袋起的名称）</p>\n<p>一般我们管这种考量叫做 <s>Python 作者就是觉得这种编码方式好你爱写不写</s> Python 作者对于变量作用域的权衡。</p>\n<p>事实上，当解释器编译函数体为字节码的时候，如果是一个赋值操作 (list.append 之流不是赋值操作），则会被限定这个变量认为是一个 local 变量。如果在 local 中找不到，并不向上查找，就报引用错误。</p>\n<pre><code>这不是 BUG\n这不是 BUG\n这不是 BUG\n</code></pre>\n<p>这是一种设计权衡 Python 认为 虽然不强求强制声明类型，但假定被赋值的变量是一个 Local 变量。这样减少避免动态语言比如 JavaScript 动不动就修改掉了全局变量的坑。</p>\n<p>这也就解释了第四个例子中赋值操作报错，以及第五个例子 append 为什么可以正常执行。</p>\n<p>如果我偏要勉强呢？ 可以通过 global 和 nonlocal 来 引入模块级变量 or 上一级变量。</p>\n<blockquote>\n<p>PS: JS 也开始使用 let 进行声明，小箭头函数内部赋值查找变量也是向上查找。</p>\n</blockquote>\n<h2 id=\"0xee-参考链接\"><a class=\"v-toc-item\" href=\"#0xee-参考链接\">#</a> 0xEE 参考链接</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/291978/short-description-of-the-scoping-rules\">Martineau 的例子</a></li>\n</ul>\n<hr>\n<p>ChangeLog:</p>\n<ul>\n<li><strong>2017-11-20</strong> 从原有笔记中抽取本文整理而成</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E5%87%A0%E4%B8%AA%E5%AE%9E%E4%BE%8B\">0x01 作用域的几个实例</a>\n<ul>\n<li><a href=\"#11-%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90\">1.1 第一个例子</a></li>\n<li><a href=\"#12-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E4%BE%8B%E5%AD%90\">1.2 第二个例子</a></li>\n<li><a href=\"#13-%E7%AC%AC%E4%B8%89%E4%B8%AA%E4%BE%8B%E5%AD%90\">1.3 第三个例子</a></li>\n<li><a href=\"#14-%E7%AC%AC%E5%9B%9B%E4%B8%AA%E4%BE%8B%E5%AD%90\">1.4 第四个例子</a></li>\n<li><a href=\"#15-%E7%AC%AC%E4%BA%94%E4%B8%AA%E4%BE%8B%E5%AD%90\">1.5 第五个例子</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%87%86%E5%88%99%E4%BB%A5%E5%8F%8A%E6%9C%AC%E5%9C%B0%E8%B5%8B%E5%80%BC%E5%87%86%E5%88%99\">0x02 作用域准则以及本地赋值准则</a>\n<ul>\n<li><a href=\"#21-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%87%86%E5%88%99\">2.1 作用域准则</a></li>\n</ul>\n</li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">0xEE 参考链接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}