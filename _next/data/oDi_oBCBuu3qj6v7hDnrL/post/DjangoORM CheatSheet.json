{"pageProps":{"post":{"tags":["Django","ORM"],"path":"20180428_DjangoORMCheatSheet.md","title":"DjangoORM CheatSheet","slug":"DjangoORM CheatSheet","date":"2018-04-28","category":"Django","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<p>本文是《Python ORM 三部曲的第二部 - Django ORM 的用法 / 原理 / 优化》</p>\n<p>上一部的地址为《Python ORM 三部曲的第一部 - Python ORM 的三种实现模式》</p>\n<p>本文基于最新 Django 版本</p>\n<ol>\n<li>模型定义</li>\n<li>Create/Update/Delete</li>\n<li>各种查询 / 链式调用 / F 表达式 / Window 函数 /Lazy Loading / Eager Loading</li>\n<li>Join</li>\n<li>DEBUG 和 Profile 技巧</li>\n</ol>\n<p>本文是《Python ORM 三部曲的第一部 - Python 的三种数据源架构模式》</p>\n<p>本文适用于：</p>\n<ol>\n<li>好奇 or 喜欢折腾的程序员</li>\n<li>想深入了解 ORM 的程序员</li>\n</ol>\n<p>本文将解决你以下的疑惑：</p>\n<ol>\n<li>能不能不用 ORM?</li>\n<li>ORM 为什么在某些场景下会胜于写 SQL</li>\n<li>不同的 ORM 实现机制会带来什么差异？</li>\n</ol>\n<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>新工作的技术栈是以 Flask 为主，SQLAlchemy 是 许多玩 Flask 的人的标配。好，文档读起来，笔记搞起来。</p>\n<blockquote>\n<p>所以，本文记录的是 Django ORM</p>\n</blockquote>\n<p>逃。</p>\n<p>这篇文章也是我对比 SqlAlchemy 以及 DjangoORM 的产物</p>\n<h2 id=\"0x01-如何快速上手\"><a class=\"v-toc-item\" href=\"#0x01-如何快速上手\">#</a> 0x01 如何快速上手</h2>\n<p>Django 世界里面，Django 的文档每次刷都会有新的发现。</p>\n<h2 id=\"0x02-djangoorm-的基本功能\"><a class=\"v-toc-item\" href=\"#0x02-djangoorm-的基本功能\">#</a> 0x02 DjangoORM 的基本功能</h2>\n<h3 id=\"21-模型定义-model\"><a class=\"v-toc-item\" href=\"#21-模型定义-model\">#</a> 2.1 模型定义 Model</h3>\n<pre><code>from django.db import models\n\nclass Musician(models.Model):\n    first_name = models.CharField(max_length=50) # Field\n    last_name = models.CharField(max_length=50)\n    instrument = models.CharField(max_length=100)\n\nclass Album(models.Model):\n    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    release_date = models.DateField()\n    num_stars = models.IntegerField()\n\n    class Meta: # Model Meta\n        order_with_respect_to = 'question'\n</code></pre>\n<p>可以看出，包含如下的部分：</p>\n<ol>\n<li>Model 与 Model 内部的 Meta</li>\n<li>Field 与 Field 内部的 Options</li>\n<li>Model 与 Model 之间的关系</li>\n<li>其他，比如索引</li>\n</ol>\n<h4 id=\"models-与-meta\"><a class=\"v-toc-item\" href=\"#models-与-meta\">#</a> Models 与 Meta</h4>\n<blockquote>\n<p>DjangoORM 是 ActivityRecord 模式的一种实现，在该模式下，Model 与 session 耦合。</p>\n</blockquote>\n<h4 id=\"field-与-field-options\"><a class=\"v-toc-item\" href=\"#field-与-field-options\">#</a> Field 与 Field Options</h4>\n<h5 id=\"field\"><a class=\"v-toc-item\" href=\"#field\">#</a> Field</h5>\n<ul>\n<li>AutoField</li>\n<li>BigAutoField</li>\n<li>BigIntegerField</li>\n<li>BinaryField</li>\n<li>BooleanField</li>\n<li>CharField</li>\n<li>DateField</li>\n<li>DateTimeField</li>\n<li>DecimalField</li>\n<li>DurationField</li>\n<li>EmailField</li>\n<li>FileField</li>\n<li>FileField and FieldFile</li>\n<li>FilePathField</li>\n<li>FloatField</li>\n<li>ImageField</li>\n<li>IntegerField</li>\n<li>GenericIPAddressField</li>\n<li>NullBooleanField</li>\n<li>PositiveIntegerField</li>\n<li>PositiveSmallIntegerField</li>\n<li>SlugField</li>\n<li>SmallIntegerField</li>\n<li>TextField</li>\n<li>TimeField</li>\n<li>URLField</li>\n<li>UUIDField</li>\n</ul>\n<p>虽然有这么多东东，其实常用的如下</p>\n<ul>\n<li>BigIntegerField</li>\n<li>BooleanField</li>\n<li>CharField</li>\n<li>DateField</li>\n<li>DateTimeField</li>\n<li>DecimalField</li>\n<li>IntegerField</li>\n<li>TextField</li>\n<li>TimeField</li>\n</ul>\n<p>有的字段属于那种，有也可以，没有也可以的。</p>\n<p>FileField 之类的 往往现在都被 CDN 取代</p>\n<h5 id=\"field-options\"><a class=\"v-toc-item\" href=\"#field-options\">#</a> Field Options</h5>\n<ul>\n<li>null</li>\n<li>blank</li>\n<li>choices\n<ul>\n<li>p.shirt_size</li>\n<li>p.get_shirt_size_display()</li>\n</ul>\n</li>\n<li>db_column</li>\n<li>db_index</li>\n<li>db_tablespace</li>\n<li>default</li>\n<li>editable</li>\n<li>error_messages</li>\n<li>help_text</li>\n<li>primary_key</li>\n<li>unique</li>\n<li>unique_for_date</li>\n<li>unique_for_month</li>\n<li>unique_for_year</li>\n<li>verbose_name</li>\n<li>validators</li>\n</ul>\n<p>如此可见，Django 的 ORM 比起 SQLAlchemy 做了不少应用层的校验，一些 help_text</p>\n<h4 id=\"relationship\"><a class=\"v-toc-item\" href=\"#relationship\">#</a> Relationship</h4>\n<p>表和表之间的关系</p>\n<ol>\n<li>A 表和 B 表 一对多 / 多对一</li>\n<li>A 表和 B 表 一对一 （特殊的一对多）</li>\n<li>A 表和 B 表 简单多对多 （借助中间的 Mapping 表进行映射）</li>\n<li>A 表和 B 表 复杂多对多</li>\n<li>A 表和 B 表 一对多</li>\n</ol>\n<pre><code>from django.db import models\n\nclass Manufacturer(models.Model):\n    # ...\n    pass\n\nclass Car(models.Model):\n    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)\n    # ...\n</code></pre>\n<pre><code>from django.db import models\n\nclass Topping(models.Model):\n    # ...\n    pass\n\nclass Pizza(models.Model):\n    # ...\n    toppings = models.ManyToManyField(Topping)\n</code></pre>\n<pre><code>from django.db import models\n\nclass Person(models.Model):\n    name = models.CharField(max_length=128)\n\n    def __str__(self):\n        return self.name\n\nclass Group(models.Model):\n    name = models.CharField(max_length=128)\n    members = models.ManyToManyField(Person, through='Membership')\n\n    def __str__(self):\n        return self.name\n\nclass Membership(models.Model):\n    person = models.ForeignKey(Person, on_delete=models.CASCADE)\n    group = models.ForeignKey(Group, on_delete=models.CASCADE)\n    date_joined = models.DateField()\n    invite_reason = models.CharField(max_length=64)\n</code></pre>\n<pre><code>Models across files\n</code></pre>\n<pre><code>objects\n</code></pre>\n<pre><code>Models 重写方法\n</code></pre>\n<pre><code>Models 继承\nhttps://docs.djangoproject.com/en/2.0/topics/db/models/#model-inheritance\n</code></pre>\n<pre><code>组织代码 - 以及应对循环引用\n</code></pre>\n<h3 id=\"22-queryset\"><a class=\"v-toc-item\" href=\"#22-queryset\">#</a> 2.2 QuerySet</h3>\n<h4 id=\"create\"><a class=\"v-toc-item\" href=\"#create\">#</a> Create</h4>\n<pre><code>c = Child(name=&quot;苏轼&quot;)\nc.save()\np = Parent(name=&quot;苏辙&quot;)\np.best_child = c\np.children.add([c,c2,c3,c4])\np.save()\n</code></pre>\n<h4 id=\"retrieve\"><a class=\"v-toc-item\" href=\"#retrieve\">#</a> Retrieve</h4>\n<p>过滤</p>\n<p>filter(**kwargs)<br>\nexclude(**kwargs)<br>\n.all()</p>\n<h5 id=\"跨关系跨表查询\"><a class=\"v-toc-item\" href=\"#跨关系跨表查询\">#</a> 跨关系（跨表）查询</h5>\n<p>Blog.objects.filter(entry<strong>headline</strong>contains=‘Lennon’)</p>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/topics/db/queries/#lookups-that-span-relationships\">https://docs.djangoproject.com/en/2.0/topics/db/queries/#lookups-that-span-relationships</a></p>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/topics/db/queries/#spanning-multi-valued-relationships\">https://docs.djangoproject.com/en/2.0/topics/db/queries/#spanning-multi-valued-relationships</a></p>\n<h5 id=\"prefetch_related-select_related\"><a class=\"v-toc-item\" href=\"#prefetch_related-select_related\">#</a> prefetch_related &amp;&amp; select_related</h5>\n<pre><code>select_related\n\n生成 join 的 SQL, 可以用来减少 N+1 , 不过仅仅支持一对多，和一对一\n\nprefetch_related\n</code></pre>\n<h5 id=\"limit-offset-分页\"><a class=\"v-toc-item\" href=\"#limit-offset-分页\">#</a> Limit / Offset / 分页</h5>\n<p>Blog.objects.filter(entry<strong>headline</strong>contains=‘Lennon’)[30:20]</p>\n<h5 id=\"链式调用\"><a class=\"v-toc-item\" href=\"#链式调用\">#</a> 链式调用</h5>\n<p>query = query.filter(**kwargs)<br>\nquery = query.exclude(**kwargs)</p>\n<h5 id=\"表达式\"><a class=\"v-toc-item\" href=\"#表达式\">#</a> 表达式</h5>\n<p>Django 里面最强大的就是其 Q 表达式了</p>\n<p>Q(question<strong>startswith=‘Who’) | Q(question</strong>startswith=‘What’)</p>\n<p>Poll.objects.get(<br>\nQ(question__startswith=‘Who’),<br>\nQ(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))<br>\n)</p>\n<p>这个表达式甚至可以嵌套超级深从而完成一个比较深的跨表查询。</p>\n<blockquote>\n<p>并且，这种 API 查询反而在写前端 API 的时候，可以传入 question__startswith 这类参数，从而直接完成一组搜索。</p>\n</blockquote>\n<p>Q / F</p>\n<h5 id=\"执行查询\"><a class=\"v-toc-item\" href=\"#执行查询\">#</a> 执行查询</h5>\n<p>需要注意的的是，SQLAlchemy 必须显式执行查询，而 Django 不一定。</p>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/ref/models/querysets/#when-querysets-are-evaluated\">https://docs.djangoproject.com/en/2.0/ref/models/querysets/#when-querysets-are-evaluated</a></p>\n<p>在 Django 内部实现的时候，一个 queryset 创建 / 过滤 / 切片 / 传送，<strong>除非这个 queryset 被 evaluated 了</strong>, 否则不会做数据库的操作。</p>\n<ul>\n<li>iteration</li>\n<li>Slicing</li>\n<li>Pickling/Caching</li>\n<li>repr</li>\n<li>len</li>\n<li>list</li>\n<li>bool</li>\n</ul>\n<pre><code>all()\nfirst()\nlast()\nexist()\n</code></pre>\n<h5 id=\"比较\"><a class=\"v-toc-item\" href=\"#比较\">#</a> 比较</h5>\n<ul>\n<li>pk</li>\n<li>model</li>\n</ul>\n<h5 id=\"复制-实例\"><a class=\"v-toc-item\" href=\"#复制-实例\">#</a> 复制 实例</h5>\n<pre><code>blog = Blog(name='My blog', tagline='Blogging is easy')\nblog.save() # blog.pk == 1\n\nblog.pk = None\nblog.save() # blog.pk == 2\n\n# 但这个并不拷贝外键？???\nhttps://docs.djangoproject.com/en/2.0/topics/db/queries/#copying-model-instances\n</code></pre>\n<h5 id=\"其他\"><a class=\"v-toc-item\" href=\"#其他\">#</a> 其他</h5>\n<pre><code># 默认查询的是所有字段，但我希望查询部分字段\n# TODO: 阿萨德\n# Distinct\n# OrderBy\n\n</code></pre>\n<h5 id=\"缓存机制\"><a class=\"v-toc-item\" href=\"#缓存机制\">#</a> 缓存机制</h5>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/topics/db/queries/#caching-and-querysets\">https://docs.djangoproject.com/en/2.0/topics/db/queries/#caching-and-querysets</a></p>\n<h4 id=\"update\"><a class=\"v-toc-item\" href=\"#update\">#</a> Update</h4>\n<p>单个 object 更新</p>\n<pre><code>blog.title = &quot;大宝天天见&quot;\nblog.save()\n</code></pre>\n<p>批量更新</p>\n<pre><code>query.update(headline=F('blog__name'))\n</code></pre>\n<p>一对多的更新（类似于 Set 操作）</p>\n<pre><code>add(obj1, obj2, ...)\ncreate(**kwargs)\nremove(obj1, obj2, ...)\nclear()\nset(objs)\n</code></pre>\n<h4 id=\"delete\"><a class=\"v-toc-item\" href=\"#delete\">#</a> Delete</h4>\n<h5 id=\"foreignkey\"><a class=\"v-toc-item\" href=\"#foreignkey\">#</a> ForeignKey</h5>\n<pre><code>class Car(models.Model):\n    manufacturer = models.ForeignKey(\n        'production.Manufacturer', # 用来解决循环 circular import\n        on_delete=models.CASCADE,\n    )\n</code></pre>\n<p>on_delete 的情况</p>\n<ul>\n<li>PROTECT 阻止</li>\n<li>CASCADE 应用层的级联删除</li>\n<li>SET_NULL 应用层的级联 SET_NULL</li>\n<li>SET_DEFAULT</li>\n<li>DO_NOTHING</li>\n<li>SET() 一个 callback</li>\n</ul>\n<h4 id=\"聚集查询\"><a class=\"v-toc-item\" href=\"#聚集查询\">#</a> 聚集查询</h4>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/topics/db/aggregation/\">https://docs.djangoproject.com/en/2.0/topics/db/aggregation/</a></p>\n<pre><code>Book.objects.all().aggregate(Max('price'))\nBook.objects.aggregate(price_diff=Max('price', output_field=FloatField()) - Avg('price'))\nBook.objects.annotate(num_authors=Count('authors'))\nBook.objects.annotate(num_authors=Count('authors')).aggregate(Avg('num_authors')) # {'num_authors__avg': 1.66}\n</code></pre>\n<h4 id=\"search\"><a class=\"v-toc-item\" href=\"#search\">#</a> Search</h4>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/topics/db/search/\">https://docs.djangoproject.com/en/2.0/topics/db/search/</a></p>\n<h4 id=\"window-function\"><a class=\"v-toc-item\" href=\"#window-function\">#</a> Window Function</h4>\n<pre><code>Option.objects.annotate(\n\t\trank_num=Window(\n\t\t\t\texpression=Rank(),\n\t\t\t\tpartition_by=F(&quot;vote_id&quot;),\n\t\t\t\torder_by=[F(&quot;current_vote_count&quot;).desc(), F(&quot;id&quot;).desc()],\n\t\t),\n\t\tlag_vote_num=Window(\n\t\t\t\texpression=Lag(&quot;current_vote_count&quot;),\n\t\t\t\tpartition_by=F(&quot;vote_id&quot;),\n\t\t\t\torder_by=[F(&quot;current_vote_count&quot;).desc(), F(&quot;id&quot;).desc()],\n\t\t),\n)\n.filter(vote=obj.vote)\n.order_by(&quot;-current_vote_count&quot;, &quot;id&quot;)\n.values(&quot;id&quot;, &quot;rank_num&quot;, &quot;current_vote_count&quot;, &quot;lag_vote_num&quot;)\n</code></pre>\n<h3 id=\"22-model-instances\"><a class=\"v-toc-item\" href=\"#22-model-instances\">#</a> 2.2 Model Instances</h3>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/ref/models/instances/\">https://docs.djangoproject.com/en/2.0/ref/models/instances/</a></p>\n<h3 id=\"23-模型实例\"><a class=\"v-toc-item\" href=\"#23-模型实例\">#</a> 2.3 模型实例</h3>\n<h3 id=\"24-迁移机制\"><a class=\"v-toc-item\" href=\"#24-迁移机制\">#</a> 2.4 迁移机制</h3>\n<ol>\n<li>加 INSTALLED_APPS</li>\n</ol>\n<h2 id=\"0x03-django-orm-的高级功能\"><a class=\"v-toc-item\" href=\"#0x03-django-orm-的高级功能\">#</a> 0x03 Django ORM 的高级功能</h2>\n<h3 id=\"maneger\"><a class=\"v-toc-item\" href=\"#maneger\">#</a> maneger</h3>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/topics/db/managers/\">https://docs.djangoproject.com/en/2.0/topics/db/managers/</a></p>\n<h3 id=\"raw-sql\"><a class=\"v-toc-item\" href=\"#raw-sql\">#</a> raw sql</h3>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/topics/db/sql/\">https://docs.djangoproject.com/en/2.0/topics/db/sql/</a></p>\n<h4 id=\"database-fuction\"><a class=\"v-toc-item\" href=\"#database-fuction\">#</a> database-fuction</h4>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/ref/models/database-functions/\">https://docs.djangoproject.com/en/2.0/ref/models/database-functions/</a></p>\n<h2 id=\"0x04-database-access-optimization\"><a class=\"v-toc-item\" href=\"#0x04-database-access-optimization\">#</a> 0x04 Database Access Optimization</h2>\n<h3 id=\"41-使用连接池\"><a class=\"v-toc-item\" href=\"#41-使用连接池\">#</a> 4.1 使用连接池</h3>\n<p>连接池是一种永远在线模型的实现</p>\n<p>连接池：驱动程序类型</p>\n<p>连接池：代理类型</p>\n<h3 id=\"42-减少对-mysql-的访问\"><a class=\"v-toc-item\" href=\"#42-减少对-mysql-的访问\">#</a> 4.2 减少对 MySQL 的访问</h3>\n<pre><code>select count(*) from pg_stat_activity where pid &lt;&gt; pg_backend_pid() and usename = current_user;\n\n</code></pre>\n<h3 id=\"before\"><a class=\"v-toc-item\" href=\"#before\">#</a> Before</h3>\n<pre><code>select count(*) from pg_stat_activity where pid &lt;&gt; pg_backend_pid() and usename = current_user;\n\n</code></pre>\n<h3 id=\"profile-first\"><a class=\"v-toc-item\" href=\"#profile-first\">#</a> Profile First</h3>\n<ol>\n<li>django-extentions</li>\n<li>django-debug-toolbar</li>\n</ol>\n<p>手动</p>\n<pre><code>queryset.explain\n\nfrom django.db import connection\nconnection.queries\n\nfrom django.db import reset_queries\nreset_queries()\n</code></pre>\n<h2 id=\"0x05-django-orm-under-the-hood\"><a class=\"v-toc-item\" href=\"#0x05-django-orm-under-the-hood\">#</a> 0x05 Django ORM Under The Hood</h2>\n<h3 id=\"理解-queryset\"><a class=\"v-toc-item\" href=\"#理解-queryset\">#</a> 理解 QuerySet</h3>\n<ul>\n<li>querysets-are-lazy when-querysets-are-evaluated\n<ul>\n<li>Iteration</li>\n<li>Slicing</li>\n<li>Pickling/Caching</li>\n<li>len</li>\n<li>repr</li>\n<li>list</li>\n<li>bool</li>\n</ul>\n</li>\n</ul>\n<pre><code>obj == nobj # obj.id == nobj.id\n</code></pre>\n<ul>\n<li>caching-and-querysets</li>\n</ul>\n<h3 id=\"理解-cached-attributes\"><a class=\"v-toc-item\" href=\"#理解-cached-attributes\">#</a> 理解 cached attributes</h3>\n<pre><code>&gt;&gt;&gt; entry = Entry.objects.get(id=1)\n&gt;&gt;&gt; entry.blog   # Blog object is retrieved at this point\n&gt;&gt;&gt; entry.blog   # cached version, no DB access\n\n&gt;&gt;&gt; entry = Entry.objects.get(id=1)\n&gt;&gt;&gt; entry.authors.all()   # query performed\n&gt;&gt;&gt; entry.authors.all()   # query performed again\n</code></pre>\n<h2 id=\"0xee-参考链接\"><a class=\"v-toc-item\" href=\"#0xee-参考链接\">#</a> 0xEE 参考链接</h2>\n<hr>\n<p>ChangeLog:</p>\n<ul>\n<li><strong>2018-03-09</strong> 重修文字</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B\">0x01 如何快速上手</a></li>\n<li><a href=\"#0x02-djangoorm-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD\">0x02 DjangoORM 的基本功能</a>\n<ul>\n<li><a href=\"#21-%E6%A8%A1%E5%9E%8B%E5%AE%9A%E4%B9%89-model\">2.1 模型定义 Model</a>\n<ul>\n<li><a href=\"#models-%E4%B8%8E-meta\">Models 与 Meta</a></li>\n<li><a href=\"#field-%E4%B8%8E-field-options\">Field 与 Field Options</a>\n<ul>\n<li><a href=\"#field\">Field</a></li>\n<li><a href=\"#field-options\">Field Options</a></li>\n</ul>\n</li>\n<li><a href=\"#relationship\">Relationship</a></li>\n</ul>\n</li>\n<li><a href=\"#22-queryset\">2.2 QuerySet</a>\n<ul>\n<li><a href=\"#create\">Create</a></li>\n<li><a href=\"#retrieve\">Retrieve</a>\n<ul>\n<li><a href=\"#%E8%B7%A8%E5%85%B3%E7%B3%BB%E8%B7%A8%E8%A1%A8%E6%9F%A5%E8%AF%A2\">跨关系（跨表）查询</a></li>\n<li><a href=\"#prefetch_related-select_related\">prefetch_related &amp;&amp; select_related</a></li>\n<li><a href=\"#limit-offset-%E5%88%86%E9%A1%B5\">Limit / Offset / 分页</a></li>\n<li><a href=\"#%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8\">链式调用</a></li>\n<li><a href=\"#%E8%A1%A8%E8%BE%BE%E5%BC%8F\">表达式</a></li>\n<li><a href=\"#%E6%89%A7%E8%A1%8C%E6%9F%A5%E8%AF%A2\">执行查询</a></li>\n<li><a href=\"#%E6%AF%94%E8%BE%83\">比较</a></li>\n<li><a href=\"#%E5%A4%8D%E5%88%B6-%E5%AE%9E%E4%BE%8B\">复制 实例</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96\">其他</a></li>\n<li><a href=\"#%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6\">缓存机制</a></li>\n</ul>\n</li>\n<li><a href=\"#update\">Update</a></li>\n<li><a href=\"#delete\">Delete</a>\n<ul>\n<li><a href=\"#foreignkey\">ForeignKey</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%81%9A%E9%9B%86%E6%9F%A5%E8%AF%A2\">聚集查询</a></li>\n<li><a href=\"#search\">Search</a></li>\n<li><a href=\"#window-function\">Window Function</a></li>\n</ul>\n</li>\n<li><a href=\"#22-model-instances\">2.2 Model Instances</a></li>\n<li><a href=\"#23-%E6%A8%A1%E5%9E%8B%E5%AE%9E%E4%BE%8B\">2.3 模型实例</a></li>\n<li><a href=\"#24-%E8%BF%81%E7%A7%BB%E6%9C%BA%E5%88%B6\">2.4 迁移机制</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-django-orm-%E7%9A%84%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD\">0x03 Django ORM 的高级功能</a>\n<ul>\n<li><a href=\"#maneger\">maneger</a></li>\n<li><a href=\"#raw-sql\">raw sql</a>\n<ul>\n<li><a href=\"#database-fuction\">database-fuction</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#0x04-database-access-optimization\">0x04 Database Access Optimization</a>\n<ul>\n<li><a href=\"#41-%E4%BD%BF%E7%94%A8%E8%BF%9E%E6%8E%A5%E6%B1%A0\">4.1 使用连接池</a></li>\n<li><a href=\"#42-%E5%87%8F%E5%B0%91%E5%AF%B9-mysql-%E7%9A%84%E8%AE%BF%E9%97%AE\">4.2 减少对 MySQL 的访问</a></li>\n<li><a href=\"#before\">Before</a></li>\n<li><a href=\"#profile-first\">Profile First</a></li>\n</ul>\n</li>\n<li><a href=\"#0x05-django-orm-under-the-hood\">0x05 Django ORM Under The Hood</a>\n<ul>\n<li><a href=\"#%E7%90%86%E8%A7%A3-queryset\">理解 QuerySet</a></li>\n<li><a href=\"#%E7%90%86%E8%A7%A3-cached-attributes\">理解 cached attributes</a></li>\n</ul>\n</li>\n<li><a href=\"#0xee-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">0xEE 参考链接</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}