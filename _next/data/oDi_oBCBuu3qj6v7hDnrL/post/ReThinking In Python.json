{"pageProps":{"post":{"tags":["Python"],"path":"20170804_RethinkingInPython.md","title":"ReThinking In Python","slug":"ReThinking In Python","date":"2017-08-04","category":"Python","lastMod":"2020-01-01","description":"这篇文章展示了基本的 Markdown 语法和格式.","thumbnail":"","content":"<h2 id=\"0x00-前言\"><a class=\"v-toc-item\" href=\"#0x00-前言\">#</a> 0x00 前言</h2>\n<p>本文诞生于利用 Topic Reading 方法读 Python 和 JavaScript 若干本技术书籍这个过程中结合自己的开发常见场景记录下来的一些笔记。</p>\n<h2 id=\"0x01-python-胡论\"><a class=\"v-toc-item\" href=\"#0x01-python-胡论\">#</a> 0x01 Python 胡论</h2>\n<h3 id=\"why-python\"><a class=\"v-toc-item\" href=\"#why-python\">#</a> Why Python</h3>\n<p>是要用一门编程语言无非是两种原因：</p>\n<ul>\n<li>这门技术很火，能挣钱</li>\n<li>写起来很舒服，开发效率高</li>\n</ul>\n<p>这也是我在涉猎了很多编程语言为什么选择了 Python 和 TypeScript 作为自己的主要技能树。</p>\n<p>Python 具备这两点，TS （更加准确的说是 JavaScript）具备前一点。</p>\n<p>Python 写起来真的特别舒服，语法简洁，第三方库丰富，而且也比较火。</p>\n<p>有什么东西比，写代码效率高、生态圈好还重要了。</p>\n<p>生态圈好，比如</p>\n<ul>\n<li>Web 开发用 Django/Flask</li>\n<li>数据抓取用 Requests</li>\n<li>数据分析清洗用 Pandas</li>\n<li>机器学习 Tensorflow SCIPY</li>\n</ul>\n<!-- more -->\n<h3 id=\"工具链\"><a class=\"v-toc-item\" href=\"#工具链\">#</a> 工具链</h3>\n<p><a href=\"./ch04/s03_Pythonista_%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86.md\">Pythonista 的工具集</a></p>\n<h3 id=\"文档\"><a class=\"v-toc-item\" href=\"#文档\">#</a> 文档</h3>\n<h3 id=\"社区\"><a class=\"v-toc-item\" href=\"#社区\">#</a> 社区</h3>\n<h3 id=\"书籍\"><a class=\"v-toc-item\" href=\"#书籍\">#</a> 书籍</h3>\n<h2 id=\"0x02-基础概念\"><a class=\"v-toc-item\" href=\"#0x02-基础概念\">#</a> 0x02 基础概念</h2>\n<h3 id=\"21-数据类型\"><a class=\"v-toc-item\" href=\"#21-数据类型\">#</a> 2.1 数据类型</h3>\n<h4 id=\"常量\"><a class=\"v-toc-item\" href=\"#常量\">#</a> 常量</h4>\n<pre><code>False\nTrue\nNone\nNotImplemented\nElilipsis ...\n</code></pre>\n<h5 id=\"布尔\"><a class=\"v-toc-item\" href=\"#布尔\">#</a> 布尔</h5>\n<p>布尔常量</p>\n<pre><code>None\nFalse\n0 0.0 0j\n'' () []\n{}\n一个对象 __bool__() = False , 如果上一个为 True 则__len__()\n</code></pre>\n<p>布尔运算符</p>\n<pre><code>x or y\nx and y\nnot x\n</code></pre>\n<p>布尔比较值</p>\n<pre><code># 可以定制\n&lt; &lt;= &gt;= &gt; == !=\n# 无法定制\nis / is not\n</code></pre>\n<h5 id=\"字符串\"><a class=\"v-toc-item\" href=\"#字符串\">#</a> 字符串</h5>\n<p>五种 format 方式</p>\n<ol>\n<li>古代 %</li>\n<li>近代 format</li>\n<li>现代 f 字符串</li>\n<li>内置的 template</li>\n<li>jinja2 的模板</li>\n</ol>\n<h4 id=\"数字类型\"><a class=\"v-toc-item\" href=\"#数字类型\">#</a> 数字类型</h4>\n<ul>\n<li>int</li>\n<li>float</li>\n<li>complex</li>\n</ul>\n<h5 id=\"操作符\"><a class=\"v-toc-item\" href=\"#操作符\">#</a> 操作符</h5>\n<pre><code>+ - * / // % -n +n abs() int() float()\ncomplex(re,im)\nc.conjugate()\ndivmod(x,y)\npow(x,y) x ** y\nmath.trunc(x)\nmath.round(x[,n])\nmath.floor(x) &lt;=x\nmath.ceil(x)  &gt;=x\n| ^ &amp; &lt;&lt; &gt;&gt; ~x\n</code></pre>\n<p>注意</p>\n<pre><code>(-1) / 2 # -1\n1 / (-2) # -1\n</code></pre>\n<h5 id=\"数值哈希\"><a class=\"v-toc-item\" href=\"#数值哈希\">#</a> 数值哈希</h5>\n<p>// TODO : 麻蛋居然没看懂 4.4.4. Hashing of numeric types</p>\n<h4 id=\"迭代器类型\"><a class=\"v-toc-item\" href=\"#迭代器类型\">#</a> 迭代器类型</h4>\n<p>迭代器类型</p>\n<h4 id=\"序列类型\"><a class=\"v-toc-item\" href=\"#序列类型\">#</a> 序列类型</h4>\n<p>C 实现的按照 item 是否为同一类型分为：</p>\n<ul>\n<li><strong>Container sequences</strong>: list, tuple, and collections.deque can hold items of different types.</li>\n<li><strong>Flat sequences</strong>: str, bytes, bytearray, memoryview, and array.array hold items of one type.</li>\n</ul>\n<p>C 实现按照 item 是否可修改分为：</p>\n<ul>\n<li><strong>Mutable sequences</strong>: list, bytearray, array.array, collections.deque, and memoryview</li>\n<li><strong>Immutable sequences</strong>: tuple, str, and bytes</li>\n</ul>\n<h5 id=\"通用序列操作\"><a class=\"v-toc-item\" href=\"#通用序列操作\">#</a> 通用序列操作</h5>\n<pre><code class=\"language-bash\">x <span class=\"token keyword\">in</span> s\nx not <span class=\"token keyword\">in</span> s\ns <span class=\"token operator\">+</span> t\ns <span class=\"token operator\">*</span> n 或者 n <span class=\"token operator\">*</span> s\ns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\ns<span class=\"token punctuation\">[</span>i<span class=\"token operator\">:</span>j<span class=\"token punctuation\">]</span>\ns<span class=\"token punctuation\">[</span>i<span class=\"token operator\">:</span>j<span class=\"token operator\">:</span>s<span class=\"token punctuation\">]</span>\n<span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token function\">min</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token function\">max</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// TODO 封装 deepEqual</span>\n</code></pre>\n<p>切片</p>\n<p>为何 Slice 和 Range 会排除 最后一个 Item?</p>\n<p>书中讲的太复杂，其实这个和尺子是一个作用，尺子从 0 刻度开始，这样方便丈量。</p>\n<p>比如说：</p>\n<ul>\n<li>items[0:10] 为 10 厘米</li>\n<li>items[10] 为 10 刻度后一个单位，即 items[10:11]</li>\n<li>items[2:] 为 2 刻度后面若干个单位</li>\n<li>items[::3] 以三为单位，从 0 刻度开始，最后为结尾，每三个</li>\n</ul>\n<pre><code class=\"language-python\">a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> # 调用 a<span class=\"token punctuation\">.</span><span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h5 id=\"不可变序列\"><a class=\"v-toc-item\" href=\"#不可变序列\">#</a> 不可变序列</h5>\n<ul>\n<li>解包赋值</li>\n<li>不要手贱加逗号</li>\n<li>下划线可以用作临时变量 （但是 django 中下划线用于中英文）</li>\n</ul>\n<pre><code class=\"language-python\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rest <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> # <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rest <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> # <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rest <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> # <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\na<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>body<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> # <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> # <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>namedtuple</li>\n</ul>\n<pre><code class=\"language-python\">City <span class=\"token operator\">=</span> <span class=\"token function\">namedtuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">'City'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name country population coordinates'</span><span class=\"token punctuation\">)</span>\ntokyo <span class=\"token operator\">=</span> <span class=\"token function\">City</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tokyo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'JP'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36.933</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">35.689722</span><span class=\"token punctuation\">,</span> <span class=\"token number\">139.691667</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntokyo<span class=\"token punctuation\">.</span>population\ntokyo<span class=\"token punctuation\">.</span>coordinates\ntokyo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nCity<span class=\"token punctuation\">.</span>_fields # tuple\n</code></pre>\n<h5 id=\"可变序列\"><a class=\"v-toc-item\" href=\"#可变序列\">#</a> 可变序列</h5>\n<pre><code>s[i] = x\ns[i:j] = t\ndel s[i:j]\ns[i:j:k] = t\ndel s[i:j:k]\ns.append(x)\ns.clear()\ns.copy()\ns.extend(t) 或者 s += t\n\n</code></pre>\n<h5 id=\"list-comprehensions-and-generator-expressions\"><a class=\"v-toc-item\" href=\"#list-comprehensions-and-generator-expressions\">#</a> List Comprehensions and Generator Expressions</h5>\n<pre><code class=\"language-python\">new_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">]</span>\nnew_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nnew_items <span class=\"token operator\">=</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>lambda x<span class=\"token operator\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n# 可写成\nnew_items <span class=\"token operator\">=</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>lambda x<span class=\"token operator\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>list 往往和 map filter 以及 listcomp 用于创建简单的序列</p>\n<h5 id=\"序列赋值\"><a class=\"v-toc-item\" href=\"#序列赋值\">#</a> 序列赋值</h5>\n<pre><code class=\"language-python\">对于不可变类型 赋值 l <span class=\"token operator\">*=</span> <span class=\"token number\">2</span> 在内存中则是创建了新的两个长度的元祖，然后赋值\n而由于字符串则需要注意，str_a <span class=\"token operator\">+=</span> <span class=\"token string\">\"str b\"</span> <span class=\"token punctuation\">,</span> 虽然为不可变变量，但并不需要拷贝整个字符串（特殊情况）<span class=\"token punctuation\">,</span> 但字符串的拼接建议还是<span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nt<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">]</span>\n# 结果为既赋值成功，又报错\n# 但 t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> 可以赋值成功\n<span class=\"token keyword\">import</span> dis\ndis<span class=\"token punctuation\">.</span><span class=\"token function\">dis</span><span class=\"token punctuation\">(</span><span class=\"token string\">'s[a] += b'</span><span class=\"token punctuation\">)</span> # 可以查看字节码\n</code></pre>\n<ol>\n<li>尽量不要在不可变变量内保存可变变量</li>\n<li>t[2] += [50,60] 并不是原子操作，因为，当做了一半的时候，抛出的错误。</li>\n</ol>\n<h5 id=\"objssort-与-sorted\"><a class=\"v-toc-item\" href=\"#objssort-与-sorted\">#</a> objs.sort 与 sorted()</h5>\n<p>对于 sort 和 sorted 来说，reverse 代表 desc,key 为单参数用于计算每一个值的结果的函数。<br>\nlist.sort 直接针对列表排序，并且返回 None（出于编程习惯的问题，直接返回 None 的函数大多是对程序有一定的修改）</p>\n<h5 id=\"二分搜索\"><a class=\"v-toc-item\" href=\"#二分搜索\">#</a> 二分搜索</h5>\n<pre><code class=\"language-python\"><span class=\"token keyword\">import</span> bisect\nbisect <span class=\"token operator\">-</span><span class=\"token operator\">></span> bisect_right\nbisect_left\ninsort <span class=\"token operator\">-</span><span class=\"token operator\">></span> insort_left\ninsort_right\n# 搜索可以用来划分档次\ndef <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">,</span> breakpoints<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> grades<span class=\"token operator\">=</span><span class=\"token string\">'FDCBA'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    i <span class=\"token operator\">=</span> bisect<span class=\"token punctuation\">.</span><span class=\"token function\">bisect</span><span class=\"token punctuation\">(</span>breakpoints<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> grades<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> score <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> # <span class=\"token punctuation\">[</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h5 id=\"列表\"><a class=\"v-toc-item\" href=\"#列表\">#</a> 列表</h5>\n<p>list 是一种 mix-typed 的数据结构，即可以存放不同种类型的数据结构，由此带来的问题自然是性能问题：</p>\n<ul>\n<li>list 第一是 mix-typed 的数据结构</li>\n<li>动态数组，并非数组</li>\n</ul>\n<p>当考虑性能的时候，则需要考虑是不是要换一个更好的数据结构：</p>\n<ul>\n<li>适用于类型单一的 array</li>\n<li>增删比较多，或者需要使用 FIFO,LIFO, 则使用 deque (double-ended queue)</li>\n</ul>\n<pre><code class=\"language-python\"># Arrays\nfloats <span class=\"token operator\">=</span> <span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n# NumPy and SciPy\n\n# Deques and Other Queue\n</code></pre>\n<h5 id=\"queue-与-deque\"><a class=\"v-toc-item\" href=\"#queue-与-deque\">#</a> Queue 与 Deque</h5>\n<ul>\n<li>Deque</li>\n<li>queue 线程安全 Queue, LifoQueue, and PriorityQueue</li>\n<li>multiprocessing Queue 和 JoinableQueue</li>\n<li>asyncio Queue, LifoQueue, PriorityQueue, and JoinableQueue</li>\n</ul>\n<h3 id=\"22-语句\"><a class=\"v-toc-item\" href=\"#22-语句\">#</a> 2.2 语句</h3>\n<p>语句</p>\n<h3 id=\"23-函数\"><a class=\"v-toc-item\" href=\"#23-函数\">#</a> 2.3 函数</h3>\n<h4 id=\"参数\"><a class=\"v-toc-item\" href=\"#参数\">#</a> 参数</h4>\n<h4 id=\"闭包与作用域\"><a class=\"v-toc-item\" href=\"#闭包与作用域\">#</a> 闭包与作用域</h4>\n<p>本部分具备一定文字量，故单独抽取出来到文章，请参考 Python 中的闭包和作用域。</p>\n<h4 id=\"高阶函数\"><a class=\"v-toc-item\" href=\"#高阶函数\">#</a> 高阶函数</h4>\n<ul>\n<li>map</li>\n<li>reduce</li>\n<li>filter</li>\n</ul>\n<h4 id=\"特殊方法\"><a class=\"v-toc-item\" href=\"#特殊方法\">#</a> 特殊方法</h4>\n<pre><code class=\"language-python\">obj<span class=\"token punctuation\">.</span><span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nobj<span class=\"token punctuation\">.</span>__\n</code></pre>\n<p>对于内置类型 (list, str , bytearray) 解释器在调用特殊方法的时候调用 C 库，比如 CPython 实现的 len 方法一般直接会调用 PyVarObject C Struct ob_size</p>\n<p>特殊方法往往并不是显示调用，而是被隐式调用。比如 init 在 new 中的作用，比如 for item in items 世界上会调用 iter(items), 这也会隐式调用 items.<strong>iter</strong>() .</p>\n<p>一般当大量使用特殊方法的时候，都是在进行元编程。</p>\n<pre><code class=\"language-python\"><span class=\"token function\">bool</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> 先调用 x<span class=\"token punctuation\">.</span><span class=\"token function\">__bool__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> 如果 x<span class=\"token punctuation\">.</span><span class=\"token function\">__bool__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 没有实现，则调用 x<span class=\"token punctuation\">.</span><span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 如果为 <span class=\"token number\">0</span> 则返回 False\n<span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> 可以直接返回 arr，arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 是排序内部。\n</code></pre>\n<p>特殊方法名 （有操作符）</p>\n<table>\n<thead>\n<tr>\n<th>种类</th>\n<th>方法名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String/Bytes</td>\n<td>repr , str , format , bytes</td>\n</tr>\n<tr>\n<td>Conversion to number</td>\n<td>abs , bool , complex , init , float , hash , index</td>\n</tr>\n<tr>\n<td>Emulating collections</td>\n<td>len , getitem , setitem , delitem , contains</td>\n</tr>\n<tr>\n<td>Iteration</td>\n<td>iter, reversed , next</td>\n</tr>\n<tr>\n<td>Emulating callables</td>\n<td>call</td>\n</tr>\n<tr>\n<td>Context management</td>\n<td>enter, exit</td>\n</tr>\n<tr>\n<td>Instance creation &amp; destruction</td>\n<td>new , init , del</td>\n</tr>\n<tr>\n<td>Attribute management</td>\n<td>getattr , getattribute , setattr , delattr, dir</td>\n</tr>\n<tr>\n<td>Attribute descriptors</td>\n<td>get , set ,delete</td>\n</tr>\n<tr>\n<td>Class service</td>\n<td>prepare , instancecheck , subclasscheck</td>\n</tr>\n</tbody>\n</table>\n<p>特殊方法名 （无操作符）</p>\n<table>\n<thead>\n<tr>\n<th>种类</th>\n<th>方法名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unary numeric operators</td>\n<td>neg , pos , abs</td>\n</tr>\n<tr>\n<td>Rich comparison operators</td>\n<td>lt , le , eq , ne , gt , ge</td>\n</tr>\n<tr>\n<td>Arithmetic operators</td>\n<td>add ,sub , mul ,truediv ,floordiv ,mod , divmod , pow , round round</td>\n</tr>\n<tr>\n<td>Reversed arithmetic operators</td>\n<td>radd , rsub , rmul , rtruediv, rfloordiv , rmod , rdivmod, rpow</td>\n</tr>\n<tr>\n<td>Augmented assignment mathmatic</td>\n<td>iadd , isub , imul , itruediv, ifloordiv</td>\n</tr>\n<tr>\n<td>Bitwise operators</td>\n<td>invert , lshift , rshift , and , or</td>\n</tr>\n<tr>\n<td>Reversed bitwise operators</td>\n<td>rlshift , rrshift , rand , rxor , ror</td>\n</tr>\n<tr>\n<td>Augmented assignment bitwise</td>\n<td>ilshift , irshift , iand , ixor , ior</td>\n</tr>\n</tbody>\n</table>\n<p>Why len Is Not a Method</p>\n<pre><code class=\"language-python\">因为对 不同类型并不是一定调用 __len__ <span class=\"token punctuation\">,</span> 对于基本类型查看 c struct 中长度，对于其他类型直接调用 __len__ <span class=\"token punctuation\">,</span> 这种区分对待\n</code></pre>\n<h3 id=\"24-生成器\"><a class=\"v-toc-item\" href=\"#24-生成器\">#</a> 2.4 生成器</h3>\n<pre><code class=\"language-python\">def <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span>\n    # 这里为了省事，标记 <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> 但是一般会有个循环，或者多个循环\n\ngen # <span class=\"token operator\">&lt;</span><span class=\"token keyword\">function</span> __main__<span class=\"token punctuation\">.</span>gen<span class=\"token operator\">></span>\n# 显式调用，返回方法对象\ng <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> # <span class=\"token operator\">&lt;</span>generator object gen at <span class=\"token number\">0x10ec23dc0</span><span class=\"token operator\">></span>\n<span class=\"token function\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n<span class=\"token function\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n<span class=\"token function\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n<span class=\"token function\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span> # 执行到结尾部分或者其他报错 StopIteration\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>生成器的作用就在于将遍历 lazy 化。嗯？其实编写代码的时候完全不中写生成器也可以 lazy 化很多操作。</p>\n<p>需要注意的是，generator 后面支持了一个方法叫做 send(), 是 next() 的升级版本。将原来的数据的单向流通变成了双向流通。</p>\n<p>见 <a href=\"#423-%E5%8D%8F%E7%A8%8B\">协程</a></p>\n<h2 id=\"0x03-中级概念\"><a class=\"v-toc-item\" href=\"#0x03-中级概念\">#</a> 0x03 中级概念</h2>\n<h3 id=\"类和对象\"><a class=\"v-toc-item\" href=\"#类和对象\">#</a> 类和对象</h3>\n<p>包含元编程</p>\n<h3 id=\"模块与包\"><a class=\"v-toc-item\" href=\"#模块与包\">#</a> 模块与包</h3>\n<h4 id=\"单下划线与双下划线\"><a class=\"v-toc-item\" href=\"#单下划线与双下划线\">#</a> 单下划线与双下划线</h4>\n<pre><code>前缀单下划线 _var # 在类中被认为是私有变量，在模块中可以通过 amodule._func() 来使用，但是没有办法 from xx.amodule import * 然后调用。\n后缀单下划线 var_ # 一般用于表示被占用的关键字 比如 default_ int_ class_ object_\n前缀双下划线 __var # 放在类中的话，实例化的时候会被转成'_A__size', 这个解释器进行的操作叫做 name mangling\n\nIn [13]: class A:\n    ...:     def __init__(self):\n    ...:         self.__eq__ = 2\n    ...:         self.__size = 34\n    ...:         self.__size__ = 44\n\n前后双下划线 __var__\n单下划线 _\n</code></pre>\n<h3 id=\"错误-调试测试\"><a class=\"v-toc-item\" href=\"#错误-调试测试\">#</a> 错误 / 调试测试</h3>\n<h3 id=\"io-编程\"><a class=\"v-toc-item\" href=\"#io-编程\">#</a> IO 编程</h3>\n<h3 id=\"正则表达式\"><a class=\"v-toc-item\" href=\"#正则表达式\">#</a> 正则表达式</h3>\n<pre><code class=\"language-python\"><span class=\"token punctuation\">.</span> <span class=\"token operator\">^</span> $ <span class=\"token operator\">*</span> <span class=\"token operator\">+</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> \\ <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>\n\nRegular String\n\n<span class=\"token string\">\"ab*\"</span>\n<span class=\"token string\">\"\\\\\\\\section\"</span>\n<span class=\"token string\">\"\\\\w+\\\\s+\\\\1\"</span>\n\nRaw string\n\nr<span class=\"token string\">\"ab*\"</span>\nr<span class=\"token string\">\"\\\\section\"</span>\nr<span class=\"token string\">\"\\w+\\s+\\1\"</span>\n</code></pre>\n<h2 id=\"0x04-高级概念\"><a class=\"v-toc-item\" href=\"#0x04-高级概念\">#</a> 0x04 高级概念</h2>\n<h3 id=\"元编程\"><a class=\"v-toc-item\" href=\"#元编程\">#</a> 元编程</h3>\n<h4 id=\"装饰器\"><a class=\"v-toc-item\" href=\"#装饰器\">#</a> 装饰器</h4>\n<pre><code>enforcing access control and authentication\ninstrumentation and timing functions\nrate-limiting\ncaching, and more”\n</code></pre>\n<h4 id=\"dynamic-attributes-and-properties\"><a class=\"v-toc-item\" href=\"#dynamic-attributes-and-properties\">#</a> Dynamic Attributes and Properties</h4>\n<pre><code class=\"language-python\">obj<span class=\"token punctuation\">.</span>attr\n\n重写__getattr__\n\n<span class=\"token comment\">// TODO: 什么时候完成 python 的 DICT 以及 JSON 的相等？</span>\n\naccessor<span class=\"token operator\">?</span>\n__new__ 是一个 <span class=\"token keyword\">class</span> <span class=\"token class-name\">method</span><span class=\"token punctuation\">,</span> 但是并没有 xxx\n\nx <span class=\"token operator\">=</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n\ndef <span class=\"token function\">object_maker</span><span class=\"token punctuation\">(</span>the_class<span class=\"token punctuation\">,</span> some_arg<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    new_object <span class=\"token operator\">=</span> the_class<span class=\"token punctuation\">.</span><span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>some_arg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">isinstance</span><span class=\"token punctuation\">(</span>new_object<span class=\"token punctuation\">,</span> the_class<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        the_class<span class=\"token punctuation\">.</span><span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>new_object<span class=\"token punctuation\">,</span> some_arg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> new_object\n\nx <span class=\"token operator\">=</span> <span class=\"token function\">object_maker</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"attributes-descriptors\"><a class=\"v-toc-item\" href=\"#attributes-descriptors\">#</a> Attributes Descriptors</h4>\n<pre><code class=\"language-python\">@property\n\n__class__ # 接近 <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n__dict__\n__slot__\n\n<span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> # 与__dict__接近\ngetattr\nsetattr\nhasattr\n\n</code></pre>\n<h4 id=\"class-metaprogramming\"><a class=\"v-toc-item\" href=\"#class-metaprogramming\">#</a> Class MetaProgramming</h4>\n<h3 id=\"并发编程\"><a class=\"v-toc-item\" href=\"#并发编程\">#</a> 并发编程</h3>\n<h4 id=\"gil-global-interpreter-lock\"><a class=\"v-toc-item\" href=\"#gil-global-interpreter-lock\">#</a> GIL - Global Interpreter Lock</h4>\n<p>并不是所有的解释器语言都有 GIL （尽管 Python 和 Ruby 里面都有）, 也并不是没有尝试过去除 GIL, 但是每次去除都会导致单线程性能的下降。所以暂时保留。</p>\n<p>GIL 对程序中的影响：</p>\n<blockquote>\n<p>一个线程运行 Python , 而其他 N 个睡眠或者等待 I/O - <strong>同一时刻只有一个线程对共享资源进行存取</strong> , Python 线程也可以等待 threading.Lock 或者线程模块中的其他同步对象；</p>\n</blockquote>\n<h5 id=\"协同式多任务处理\"><a class=\"v-toc-item\" href=\"#协同式多任务处理\">#</a> 协同式多任务处理</h5>\n<p>如果有两个线程，同时进行 IO 请求，当其中一个线程连接之后，立即会<strong>主动让出 GIL</strong>, 其他线程就可以运行。</p>\n<blockquote>\n<p>当 N 个线程在网络 I/O 堵塞，或等待重新获取 GIL，而一个线程运行 Python。</p>\n</blockquote>\n<p>让出之后还要执行代码呀，所以要有个收回 GIL 的动作。</p>\n<h5 id=\"抢占式多任务处理\"><a class=\"v-toc-item\" href=\"#抢占式多任务处理\">#</a> 抢占式多任务处理</h5>\n<p>Python 2 GIL , 尝试收回 GIL 为 执行 1000 字节码。<br>\nPython 3 GIL , 尝试收回 GIL 检测间隔为 15ms</p>\n<h5 id=\"线程安全\"><a class=\"v-toc-item\" href=\"#线程安全\">#</a> 线程安全</h5>\n<p>原子操作：sort 之类不需要<br>\n非原子操作：n=n+2 的字节码分为 加载 n , 加载 2 , 相加，存储 n, 四个步骤，由于不是原子性，很可能被由于 15 ms 而被打断。</p>\n<p>当然，懒人一向是 : <strong>优先级不决加括号，线程不决加 lock</strong></p>\n<p>对于 Java, 程序员努力在尽可能短的时间内加锁存取共享数据，减轻线程的争夺，实现最大并行。但 Python 中，线程无法并行运行，细粒度的锁就没有了优势。</p>\n<h4 id=\"多线程\"><a class=\"v-toc-item\" href=\"#多线程\">#</a> 多线程</h4>\n<blockquote>\n<p>Python 多线程约等于并发。</p>\n</blockquote>\n<h4 id=\"多进程\"><a class=\"v-toc-item\" href=\"#多进程\">#</a> 多进程</h4>\n<h4 id=\"协程\"><a class=\"v-toc-item\" href=\"#协程\">#</a> 协程</h4>\n<p>Python 中，协程在语法上接近于生成器（函数内包含 yield 关键字）.</p>\n<pre><code class=\"language-python\"># 生成器\ndef <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">yield</span> a\n    pass\n</code></pre>\n<pre><code class=\"language-python\"># 协程\ndef <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    # b <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> a\n    b <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span>\n    pass\n</code></pre>\n<p>协程在</p>\n<h2 id=\"0x05-标准库与第三方库\"><a class=\"v-toc-item\" href=\"#0x05-标准库与第三方库\">#</a> 0x05 标准库与第三方库</h2>\n<h3 id=\"数据结构与算法\"><a class=\"v-toc-item\" href=\"#数据结构与算法\">#</a> 数据结构与算法</h3>\n<h3 id=\"字符串与文本\"><a class=\"v-toc-item\" href=\"#字符串与文本\">#</a> 字符串与文本</h3>\n<h3 id=\"数字日期与时间\"><a class=\"v-toc-item\" href=\"#数字日期与时间\">#</a> 数字日期与时间</h3>\n<h3 id=\"迭代器与生成器\"><a class=\"v-toc-item\" href=\"#迭代器与生成器\">#</a> 迭代器与生成器</h3>\n<ol>\n<li>Introduction</li>\n<li>Built-in Functions</li>\n<li>Built-in Constants</li>\n<li>Built-in Types</li>\n<li>Built-in Exceptions</li>\n<li>Text Processing Services</li>\n<li>Binary Data Services</li>\n<li>Data Types</li>\n<li>Numeric and Mathematical Modules</li>\n<li>Functional Programming Modules</li>\n<li>File and Directory Access</li>\n<li>Data Persistence</li>\n<li>Data Compression and Archiving</li>\n<li>File Formats</li>\n<li>Cryptographic Services</li>\n<li>Generic Operating System Services</li>\n<li>Concurrent Execution</li>\n<li>Interprocess Communication and Networking</li>\n<li>Internet Data Handling</li>\n<li>Structured Markup Processing Tools</li>\n<li>Internet Protocols and Support</li>\n<li>Multimedia Services</li>\n<li>Internationalization</li>\n<li>Program Frameworks</li>\n<li>Graphical User Interfaces with Tk</li>\n<li>Development Tools</li>\n<li>Debugging and Profiling</li>\n<li>Software Packaging and Distribution</li>\n<li>Python Runtime Services</li>\n<li>Custom Python Interpreters</li>\n<li>Importing Modules</li>\n<li>Python Language Services</li>\n<li>Miscellaneous Services</li>\n<li>MS Windows Specific Services</li>\n<li>Unix Specific Services</li>\n<li>Superseded Modules</li>\n<li>Undocumented Modules</li>\n</ol>\n<h2 id=\"0xaa-测试\"><a class=\"v-toc-item\" href=\"#0xaa-测试\">#</a> 0xAA 测试</h2>\n<h3 id=\"单元测试\"><a class=\"v-toc-item\" href=\"#单元测试\">#</a> 单元测试</h3>\n<p>单元测试我只用 pytest</p>\n<ol>\n<li>给对象打补丁</li>\n<li>测试异常情况</li>\n<li>测试输出到日志文件</li>\n</ol>\n<pre><code>pytest --pdb\npytest --tb=long    # exhaustive, informative traceback formatting\n</code></pre>\n<h2 id=\"0xbb-调试技巧\"><a class=\"v-toc-item\" href=\"#0xbb-调试技巧\">#</a> 0xBB 调试技巧</h2>\n<h3 id=\"ipython\"><a class=\"v-toc-item\" href=\"#ipython\">#</a> IPython</h3>\n<h3 id=\"ipdb\"><a class=\"v-toc-item\" href=\"#ipdb\">#</a> IPdb</h3>\n<h2 id=\"0xcc-优化技巧\"><a class=\"v-toc-item\" href=\"#0xcc-优化技巧\">#</a> 0xCC 优化技巧</h2>\n<pre><code>cProfile\n</code></pre>\n<h3 id=\"统计型优化\"><a class=\"v-toc-item\" href=\"#统计型优化\">#</a> 统计型优化</h3>\n<p><a href=\"https://github.com/what-studio/profiling\">https://github.com/what-studio/profiling</a></p>\n<h2 id=\"0xdd-代码质量\"><a class=\"v-toc-item\" href=\"#0xdd-代码质量\">#</a> 0xDD 代码质量</h2>\n<h3 id=\"社区推崇的代码风格-pythonic\"><a class=\"v-toc-item\" href=\"#社区推崇的代码风格-pythonic\">#</a> 社区推崇的代码风格 Pythonic</h3>\n<pre><code>    The Zen of Python, by Tim Peters\n\n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n</code></pre>\n<h3 id=\"python-代码质量\"><a class=\"v-toc-item\" href=\"#python-代码质量\">#</a> Python 代码质量</h3>\n<pre><code>https://github.com/ambv/black\n</code></pre>\n<h4 id=\"正确性\"><a class=\"v-toc-item\" href=\"#正确性\">#</a> 正确性</h4>\n<ul>\n<li>外部<strong>不该</strong>引用 protected member （单下划线）</li>\n<li>lambda 为一次使用，最好不要赋值。</li>\n<li>不要给 buildin 函数赋值</li>\n<li>py3 直接 super()</li>\n<li>for in else 如果不内置 break 则出会在最后 for in 为 empty 的时候再执行 else 中的语句</li>\n<li>context exit 如果不 catch 掉异常让其自然向上一级抛出错误的话，必须为 (self, exception_type, exception_value, traceback):</li>\n<li>不要在 init 里面 return 数据</li>\n<li>不要混用 tab 和 space</li>\n<li>4 个 space 缩进</li>\n<li>staticmethod 直接是 参数，classmethod 第一个参数为 cls</li>\n<li>可变的 default value 是不能作为 参数的。（可能是解释器在确定函数的定义的时候完成赋值？)</li>\n<li>遵循 exception hierachy <a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></li>\n<li>defaultdict defaultdict(lambda : 6) , 必须 callable</li>\n<li>尽量 unpack 赋值</li>\n<li>字典用获取用 get(“myk”,None) , 赋值用 dictionary.setdefault(“list”, []).append(“list_item”)</li>\n</ul>\n<h4 id=\"可维护性\"><a class=\"v-toc-item\" href=\"#可维护性\">#</a> 可维护性</h4>\n<ul>\n<li>避免使用 import * , 我觉得这点值得商榷 , 如果是某个模块下，完全可以先把模块拆分成多个，最后 import 进来，接着使用 all.</li>\n<li>getxxx 获取实际值，如果不为实际值，返回 None 显然不如 try catch 来的实在。</li>\n<li>避免使用 global</li>\n<li>命名要注意</li>\n<li>动态创建方法 , 我觉得这点值得商榷。</li>\n</ul>\n<h4 id=\"可读性\"><a class=\"v-toc-item\" href=\"#可读性\">#</a> 可读性</h4>\n<ul>\n<li>不要检查，如果可能有异常，尽量抛出异常来 trycatch 解决。</li>\n<li>a is None , if flag</li>\n<li>isinstance , not type® is types.ListType</li>\n<li>“{name}{city}”.format(**info_dict)</li>\n<li>for k , v in infodict.items()</li>\n<li>使用 poiinfo = namedtuple(“poiinfo”,[“name”,“lng”,“lat”]) 返回 poiinfo[‘上海’,121.00,23] 最后返回值打印 <a href=\"http://poi.name\">poi.name</a> , poi.lng , poi lat</li>\n<li>for numbers_value, letters_value in zip(numbers, letters):</li>\n<li>enumerate</li>\n<li>如果能用 listcomp 则不使用 map 和 filter</li>\n</ul>\n<h4 id=\"性能\"><a class=\"v-toc-item\" href=\"#性能\">#</a> 性能</h4>\n<ul>\n<li>用 set</li>\n<li>d.iteritems() 比 items() 省内存</li>\n</ul>\n<h2 id=\"0xee-文章更新\"><a class=\"v-toc-item\" href=\"#0xee-文章更新\">#</a> 0xEE 文章更新</h2>\n<ul>\n<li><strong>2017-05-11 19:43:00</strong> : 增加代码质量模块</li>\n<li><strong>2017-08-04 19:43:00</strong> : 增加部分 Fluent Python 的笔记</li>\n</ul>\n","toc":"<ul class=\"v-article-toc\">\n<li>\n<ul>\n<li><a href=\"#0x00-%E5%89%8D%E8%A8%80\">0x00 前言</a></li>\n<li><a href=\"#0x01-python-%E8%83%A1%E8%AE%BA\">0x01 Python 胡论</a>\n<ul>\n<li><a href=\"#why-python\">Why Python</a></li>\n<li><a href=\"#%E5%B7%A5%E5%85%B7%E9%93%BE\">工具链</a></li>\n<li><a href=\"#%E6%96%87%E6%A1%A3\">文档</a></li>\n<li><a href=\"#%E7%A4%BE%E5%8C%BA\">社区</a></li>\n<li><a href=\"#%E4%B9%A6%E7%B1%8D\">书籍</a></li>\n</ul>\n</li>\n<li><a href=\"#0x02-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\">0x02 基础概念</a>\n<ul>\n<li><a href=\"#21-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">2.1 数据类型</a>\n<ul>\n<li><a href=\"#%E5%B8%B8%E9%87%8F\">常量</a>\n<ul>\n<li><a href=\"#%E5%B8%83%E5%B0%94\">布尔</a></li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\">字符串</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B\">数字类型</a>\n<ul>\n<li><a href=\"#%E6%93%8D%E4%BD%9C%E7%AC%A6\">操作符</a></li>\n<li><a href=\"#%E6%95%B0%E5%80%BC%E5%93%88%E5%B8%8C\">数值哈希</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%B1%BB%E5%9E%8B\">迭代器类型</a></li>\n<li><a href=\"#%E5%BA%8F%E5%88%97%E7%B1%BB%E5%9E%8B\">序列类型</a>\n<ul>\n<li><a href=\"#%E9%80%9A%E7%94%A8%E5%BA%8F%E5%88%97%E6%93%8D%E4%BD%9C\">通用序列操作</a></li>\n<li><a href=\"#%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%BA%8F%E5%88%97\">不可变序列</a></li>\n<li><a href=\"#%E5%8F%AF%E5%8F%98%E5%BA%8F%E5%88%97\">可变序列</a></li>\n<li><a href=\"#list-comprehensions-and-generator-expressions\">List Comprehensions and Generator Expressions</a></li>\n<li><a href=\"#%E5%BA%8F%E5%88%97%E8%B5%8B%E5%80%BC\">序列赋值</a></li>\n<li><a href=\"#objssort-%E4%B8%8E-sorted\">objs.sort 与 sorted()</a></li>\n<li><a href=\"#%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2\">二分搜索</a></li>\n<li><a href=\"#%E5%88%97%E8%A1%A8\">列表</a></li>\n<li><a href=\"#queue-%E4%B8%8E-deque\">Queue 与 Deque</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#22-%E8%AF%AD%E5%8F%A5\">2.2 语句</a></li>\n<li><a href=\"#23-%E5%87%BD%E6%95%B0\">2.3 函数</a>\n<ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0\">参数</a></li>\n<li><a href=\"#%E9%97%AD%E5%8C%85%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F\">闭包与作用域</a></li>\n<li><a href=\"#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\">高阶函数</a></li>\n<li><a href=\"#%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95\">特殊方法</a></li>\n</ul>\n</li>\n<li><a href=\"#24-%E7%94%9F%E6%88%90%E5%99%A8\">2.4 生成器</a></li>\n</ul>\n</li>\n<li><a href=\"#0x03-%E4%B8%AD%E7%BA%A7%E6%A6%82%E5%BF%B5\">0x03 中级概念</a>\n<ul>\n<li><a href=\"#%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1\">类和对象</a></li>\n<li><a href=\"#%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85\">模块与包</a>\n<ul>\n<li><a href=\"#%E5%8D%95%E4%B8%8B%E5%88%92%E7%BA%BF%E4%B8%8E%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF\">单下划线与双下划线</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%94%99%E8%AF%AF-%E8%B0%83%E8%AF%95%E6%B5%8B%E8%AF%95\">错误 / 调试测试</a></li>\n<li><a href=\"#io-%E7%BC%96%E7%A8%8B\">IO 编程</a></li>\n<li><a href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\">正则表达式</a></li>\n</ul>\n</li>\n<li><a href=\"#0x04-%E9%AB%98%E7%BA%A7%E6%A6%82%E5%BF%B5\">0x04 高级概念</a>\n<ul>\n<li><a href=\"#%E5%85%83%E7%BC%96%E7%A8%8B\">元编程</a>\n<ul>\n<li><a href=\"#%E8%A3%85%E9%A5%B0%E5%99%A8\">装饰器</a></li>\n<li><a href=\"#dynamic-attributes-and-properties\">Dynamic Attributes and Properties</a></li>\n<li><a href=\"#attributes-descriptors\">Attributes Descriptors</a></li>\n<li><a href=\"#class-metaprogramming\">Class MetaProgramming</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B\">并发编程</a>\n<ul>\n<li><a href=\"#gil-global-interpreter-lock\">GIL - Global Interpreter Lock</a>\n<ul>\n<li><a href=\"#%E5%8D%8F%E5%90%8C%E5%BC%8F%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86\">协同式多任务处理</a></li>\n<li><a href=\"#%E6%8A%A2%E5%8D%A0%E5%BC%8F%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86\">抢占式多任务处理</a></li>\n<li><a href=\"#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8\">线程安全</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B\">多线程</a></li>\n<li><a href=\"#%E5%A4%9A%E8%BF%9B%E7%A8%8B\">多进程</a></li>\n<li><a href=\"#%E5%8D%8F%E7%A8%8B\">协程</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#0x05-%E6%A0%87%E5%87%86%E5%BA%93%E4%B8%8E%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93\">0x05 标准库与第三方库</a>\n<ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95\">数据结构与算法</a></li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%96%87%E6%9C%AC\">字符串与文本</a></li>\n<li><a href=\"#%E6%95%B0%E5%AD%97%E6%97%A5%E6%9C%9F%E4%B8%8E%E6%97%B6%E9%97%B4\">数字日期与时间</a></li>\n<li><a href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8\">迭代器与生成器</a></li>\n</ul>\n</li>\n<li><a href=\"#0xaa-%E6%B5%8B%E8%AF%95\">0xAA 测试</a>\n<ul>\n<li><a href=\"#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95\">单元测试</a></li>\n</ul>\n</li>\n<li><a href=\"#0xbb-%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7\">0xBB 调试技巧</a>\n<ul>\n<li><a href=\"#ipython\">IPython</a></li>\n<li><a href=\"#ipdb\">IPdb</a></li>\n</ul>\n</li>\n<li><a href=\"#0xcc-%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7\">0xCC 优化技巧</a>\n<ul>\n<li><a href=\"#%E7%BB%9F%E8%AE%A1%E5%9E%8B%E4%BC%98%E5%8C%96\">统计型优化</a></li>\n</ul>\n</li>\n<li><a href=\"#0xdd-%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F\">0xDD 代码质量</a>\n<ul>\n<li><a href=\"#%E7%A4%BE%E5%8C%BA%E6%8E%A8%E5%B4%87%E7%9A%84%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC-pythonic\">社区推崇的代码风格 Pythonic</a></li>\n<li><a href=\"#python-%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F\">Python 代码质量</a>\n<ul>\n<li><a href=\"#%E6%AD%A3%E7%A1%AE%E6%80%A7\">正确性</a></li>\n<li><a href=\"#%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7\">可维护性</a></li>\n<li><a href=\"#%E5%8F%AF%E8%AF%BB%E6%80%A7\">可读性</a></li>\n<li><a href=\"#%E6%80%A7%E8%83%BD\">性能</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#0xee-%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0\">0xEE 文章更新</a></li>\n</ul>\n</li>\n</ul>\n"}},"__N_SSG":true}