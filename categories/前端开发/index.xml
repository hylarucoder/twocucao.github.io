<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>前端开发 - 分类 - 海拉鲁编程客</title>
        <link>http://twocucao.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</link>
        <description>前端开发 - 分类 - 海拉鲁编程客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>twocucao@gmail.com (twocucao)</managingEditor>
            <webMaster>twocucao@gmail.com (twocucao)</webMaster><lastBuildDate>Wed, 02 Dec 2020 18:59:58 &#43;0800</lastBuildDate><atom:link href="http://twocucao.xyz/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" rel="self" type="application/rss+xml" /><item>
    <title>React Stack</title>
    <link>http://twocucao.xyz/posts/20201202_react_stack/</link>
    <pubDate>Wed, 02 Dec 2020 18:59:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20201202_react_stack/</guid>
    <description><![CDATA[0x00 前言 16 年~20 年先后折腾过
 vue 2 angular 4 react class component angular 4 react hooks vue 3  综合考虑了
 开发工具链 社区生态 跨端方案 与 Typescript 的结合程度  最后形成了较为稳定的 react 技术栈
0x01 桌面端 https://github.com/twocucao/react-starter
 react hooks typescript mobx css tailwindcss format with prettier lint with eslint  0x02 移动端 https://github.com/twocucao/react-starter
0x03 小程序端 https://github.com/twocucao/react-starter-remaxjs
https://github.com/twocucao/react-starter-taro
 All Feature Supported By RemaxJS Type Hint - Typescript for better multi-user developing experience style management - tailwind like utils which called minimal.]]></description>
</item><item>
    <title>Vue 项目漫谈 2018 版</title>
    <link>http://twocucao.xyz/posts/20180801_vueprojecttalking/</link>
    <pubDate>Wed, 01 Aug 2018 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20180801_vueprojecttalking/</guid>
    <description><![CDATA[0x00 前言 之前草草整理过一些 Vue 的小技巧，最近温习了一遍文档，重聊一遍。
鉴于 VueCLI 越做越臃肿，我最后还是选择了自己搭架子。
https://github.com/twocucao/vue-starter-kit
0x01 项目结构 # 根文件 public/ # 部署文件 src/ # 源码 .babelrc .editorconfig .eslintignore .eslintrc .gitignore .postcssrc.js LICENSE README.md jsconfig.json package-lock.json package.json webpack.common.js webpack.dev.js webpack.dll.js webpack.prod.js # 在 src 文件夹下面 api # 相关的 Web API 定义 assets # 静态资源，对于已经压缩的，还是直接放在 Static 下面 components # 公用组件 mixins # mixin directives # 定义指令，比如 v-loading pages # 页面 store # Store App.vue # CORE 组件 consts.js #定义常量名称 index.]]></description>
</item><item>
    <title>关于 CSS 你应该知道的一切</title>
    <link>http://twocucao.xyz/posts/20171228_allstuffaboutcss/</link>
    <pubDate>Thu, 28 Dec 2017 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20171228_allstuffaboutcss/</guid>
    <description><![CDATA[0x00 前言 本笔记诞生于很久前零零散散记录的笔记，拿出来发布一下。
0x01 CSS 是如何工作的？ HTML 是元素的标记语言。
CSS 被用来 样式和网页布局的。
样式和布局都有哪些呢？
 字体 颜色 大小 内容间距 多列 动画  通过 DOM 树的节点和样式节点结合，生成渲染树，然后交给浏览器进行渲染从而使得外观发生变化。
0x02 CSS 基本语法 CSS 基本语法有三个组成部分：
 规则 选择器 属性  2.1 CSS 规则 h1 { colour: blue; background-color: yellow; border: 1px solid black; } // @规则 @import @charset @media @font-face /* in shorthand like padding and margin, the values are applied in the order top, right, bottom, left (the same order as an analog clock).]]></description>
</item><item>
    <title>VueJS 文档阅读笔记</title>
    <link>http://twocucao.xyz/posts/20170915_readingvuedocuments/</link>
    <pubDate>Fri, 15 Sep 2017 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20170915_readingvuedocuments/</guid>
    <description><![CDATA[0x01 Essential 1.1 The Vue Instance 当 Vue 实例被创建时，添加所有在 Data 对象中的属性到 Reactivity System 中。
 而创建之后添加赋值新属性，则不 Reactive
 而实例被创建之时，会自带前缀为 $ 的一系列属性和方法
1.1.1 内置方法和属性 Instance Properties vm.$data vm.$props vm.$el vm.$options vm.$parent vm.$root vm.$children vm.$slots vm.$scopedSlots vm.$refs vm.$isServer vm.$attrs vm.$listeners
Instance Methods / Data vm.$watch vm.$set vm.$delete
Instance Methods / Events vm.$on vm.$once vm.$off vm.$emit
Instance Methods / Lifecycle vm.$mount vm.$forceUpdate vm.$nextTick vm.$destroy
1.1.2 生命周期 1.2 Template Syntax VueJS 编译 模板为 VirtualDOM render 函数，如果对 VirtualDom 非常熟悉的话，则可以使用]]></description>
</item><item>
    <title>React CheatSheet</title>
    <link>http://twocucao.xyz/posts/20170726_reactcheatsheet/</link>
    <pubDate>Wed, 26 Jul 2017 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20170726_reactcheatsheet/</guid>
    <description><![CDATA[0x00. 前言  备注：由于目前没有上 React 的打算，本文暂时太监
 之前一直使用 VueJS 进行开发，心血来潮想换换口味，于是就借着自己的一个开源的项目尝试一下 ReactJS , 代码分为两部分，如下：
 前台系统（支持 SSR) YaReactBlog 后台系统 YaReactAdmin  TODO: 本文目录
 前端、单页与 React 开发 官网的 Tutorial / Guide 要点 Dva 下使用 React JS 的要点  0x00. 前端、单页与 React 开发 0.1. 前端 前端开发，是最近几年才出现的独立工种。
在我的印象中，以前的人很少会区分前端和后端，现在的前端的职责往往是由后端的人顺手做掉的。当然，这种界面一般情况下都比较丑。
后来，随着浏览器的功能越来越强大，性能越来越好，用户对于界面要求也就越来越高。甚至到后来，对于用户界面的操作的复杂程度要求也越来越高。 传统的后端渲染 Template + 简单的 Ajax 不能满足要求了。
 要界面，要交互，要复杂
 于是便出现了单页应用。
0.2. 单页 单页完全可以当做一个性能不是很强的，运行在浏览器中的，使用 HTML CSS JS 来编写的小型客户端。
写单页和写客户端基本一致的情况下，于是在这种情况下，前端开发在使用单页后，直接可以 Mock 数据，接着编写界面，接着调通页面的状态和操作，最后发布。
0.3. ReactJS 为什么选用 ReactJS 呢？]]></description>
</item><item>
    <title>Rethinking In JavaScript</title>
    <link>http://twocucao.xyz/posts/20170704_rethinkinginjavascript/</link>
    <pubDate>Tue, 04 Jul 2017 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20170704_rethinkinginjavascript/</guid>
    <description><![CDATA[0x00. 前言 JavaScript 这门语言已经不容小觑了，在项目中的前端部分基于 VueJS 和 ElementUI 之后，我也就顺应历史潮流深入了解了一下这门不容小觑的语言。
1. 为什么是 JavaScript 为什么是 JavaScript 呢？
因为太火，不得不认真学习一下。
我本人对 JavaScript 这种语言是有偏见的，这点我不会掩饰，我始终记得在正常的语言 Python / Java / C# 中实现一个休眠的简单功能和在 JS 中实现一个休眠功能的差别。
在 Python 中有很多语法糖，内置数据结构丰富，而 JS 则并不是如此，数据类型相对少，Bool 判断混乱，而今天，这门混乱的语言在流行程度上几乎接近于 Java 这门语言，即便是存在这样或者那样的问题，JavaScript 依然是一种奇葩的王者。
在服务端，有多少功能是 Python 完不成而 JavaScript（即 NodeJS) 可以胜任的呢？而且，NodeJS 写起来的感觉比起 Python 来说，还是差了很多，所以，我比较倾向于把计算类和 IO 类的操作用 Python 来写，至于浏览器端就交给 JavaScript 好了。
那么，对 JS 的这种定位，也使得我对 JS 生态圈的掌握程度不会超过 Vue/React 系。
2. 工具链 2.1. 浏览器端 2.2. 桌面端 2.3. 客户端 4. 文档 5. 社区 6. 书籍 0x01 基本概念 1.]]></description>
</item></channel>
</rss>
