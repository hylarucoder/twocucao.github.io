<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Python 项目代码健壮性和性能 - 分类 - 海拉鲁编程客</title>
        <link>http://twocucao.xyz/categories/python-%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E5%81%A5%E5%A3%AE%E6%80%A7%E5%92%8C%E6%80%A7%E8%83%BD/</link>
        <description>Python 项目代码健壮性和性能 - 分类 - 海拉鲁编程客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>twocucao@gmail.com (twocucao)</managingEditor>
            <webMaster>twocucao@gmail.com (twocucao)</webMaster><lastBuildDate>Tue, 24 Sep 2019 21:57:40 &#43;0800</lastBuildDate><atom:link href="http://twocucao.xyz/categories/python-%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E5%81%A5%E5%A3%AE%E6%80%A7%E5%92%8C%E6%80%A7%E8%83%BD/" rel="self" type="application/rss+xml" /><item>
    <title>如何写出整洁的 Python 代码 下</title>
    <link>http://twocucao.xyz/posts/20190924_pycode_08/</link>
    <pubDate>Tue, 24 Sep 2019 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20190924_pycode_08/</guid>
    <description><![CDATA[本文是《提升你的 Python 项目代码健壮性和性能》系列的第八篇文章。
 第一篇，讲的是如何 用 Type Annotation 提升你的 Python 代码健壮性 第二篇，讲的是 如何通过测试提升 Python 代码的健壮性 第三篇，讲的是在一定并发量的情况下，如何保证 Django 项目的数据一致性 第四篇，讲的是如何定位性能问题 这几招，让你快速提升 Python 项目的性能 第五篇，讲的是 为你的项目快速搭建 ELKFA 日志系统 第六篇，为《整洁上篇》讲的是 从变量命名 / 函数 / 注释整洁 / 格式整洁上写出干净的代码 第七篇，为《整洁中篇》讲的是 一些的编程时候的基本原则，比如，避免过深的缩进，SOLID 法则，边界  本文是《整洁下篇》，本文的诞生，要感谢我前公司的技术主管豪蔚老师和产品主管刚哥，在上海工作这几年，总是和能优秀的人工作，确实是我幸运的地方。
目录如下
▼ 如何写出整洁的 Python 代码 下篇 : section 0x00 前言 : section 0x01 处理需求的姿势 : section ▼ 0x02 敏捷开发 : section 看板和晨会 : section 敏捷的时间安排：周一到周五 : section 人员安排 : section ▼ 0x03 代码全局观 : section 起个好名字 : section 本质复杂度和偶然复杂度 : section 0xEE 后记 : section 0x00 前言 这篇文章憋了很久，思考了许久，《整洁下篇》干脆就聊聊编程中，不是写代码的部分；]]></description>
</item><item>
    <title>如何写出整洁的 Python 代码 中</title>
    <link>http://twocucao.xyz/posts/20190526_pycode_07/</link>
    <pubDate>Sun, 26 May 2019 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20190526_pycode_07/</guid>
    <description><![CDATA[本文是《提升你的 Python 项目代码健壮性和性能》系列的第七篇文章。
 第一篇，讲的是如何 用 Type Annotation 提升你的 Python 代码健壮性 第二篇，讲的是 如何通过测试提升 Python 代码的健壮性 第三篇，讲的是在一定并发量的情况下，如何保证 Django 项目的数据一致性 第四篇，讲的是如何定位性能问题 这几招，让你快速提升 Python 项目的性能 第五篇，讲的是 为你的项目快速搭建 ELKFA 日志系统 第六篇，《如何写出整洁的代码 上》 从变量命名 / 函数 / 注释整洁 / 格式整洁上写出干净的代码  目录
▼ 如何写出整洁的 Python 代码 中 : section 0x00 前言 : section 0x01 避免过深的缩进 : section 0x02 使用异常 : section 0x03 类与 OOP : section ▼ 0x04 SOLID 设计原则 : section 单一职责 : section 开闭原则 : section 里氏替换原则 : section 接口隔离原则 : section 依赖反转原则 : section 0x05 边界和第三方库的挑选 : section 0xDD 结论 : section 0xEE 参考 : section 0x00 前言 上篇地址在这里 https://zhuanlan.]]></description>
</item><item>
    <title>如何写出整洁的 Python 代码 上</title>
    <link>http://twocucao.xyz/posts/20190525_pycode_06/</link>
    <pubDate>Sat, 25 May 2019 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20190525_pycode_06/</guid>
    <description><![CDATA[本文是《提升你的 Python 项目代码健壮性和性能》系列的第六篇文章。
 第一篇，讲的是如何 用 Type Annotation 提升你的 Python 代码健壮性 第二篇，讲的是 如何通过测试提升 Python 代码的健壮性 第三篇，讲的是在一定并发量的情况下，如何保证 Django 项目的数据一致性 第四篇，讲的是如何定位性能问题 这几招，让你快速提升 Python 项目的性能 第五篇，讲的是 为你的项目快速搭建 ELKFA 日志系统  接下来的三篇，围绕另一个主题
 如何写出整洁的代码
 『整洁』三篇是基于**『代码整洁之道』和『架构整洁之道』**的一些切身的理解和体会。
感谢这两本书的作者 Bob 大叔。
 PPS: 某东读书 VIP 会员有不少 IT 资源类的书籍可以免费看，比如『代码整洁之道』
 本文目录如下
▼ 如何写出整洁代码 上篇 : section ▼ 0x00 前言 : section 软件系统的腐败之路 : section ▼ 0x01 讨论 : section 为什么会出现腐败的系统 : section 衡量系统的两个指标 : section 代码是写出来的吗？ : section 好代码的标准 : section ▼ 0x02 变量命名之道 : section 使用业务领域命名 : section 代码命名 : section ▼ 0x03 函数整洁之道 : section 短小精悍 : section 调用层次清晰 : section 控制参数 : section 如何写函数 : section 0x04 注释整洁之道 : section ▼ 0x05 格式整洁之道 : section 排版整齐 : section 上下文相关 : section 0xEE 参考连接 : section 0x00 前言 软件系统的腐败之路 随着项目代码行数的增加，不可避免的遇到软件架构腐败的问题。]]></description>
</item><item>
    <title>如何通过测试提升 Python 代码的健壮性</title>
    <link>http://twocucao.xyz/posts/20190216_pycode_02/</link>
    <pubDate>Sat, 23 Mar 2019 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20190216_pycode_02/</guid>
    <description><![CDATA[本文是《提升你的 Python 项目代码健壮性和性能》系列的第二篇文章。
本系列仅仅从笔者的项目经历来讲解一些提升代码健壮性的姿势和小技巧。
 用 Type Annotation 提升你的 Python 代码健壮性 https://zhuanlan.zhihu.com/p/56863684  0x00 前言 本文的更多的是写给 Python 后端的程序员。
来简单分享一下我对写测试的理解。
在上一篇文章中，我提到了代码覆盖率，即测试的一种指标。
本期就聊聊测试这件小事情。
本文目录如下：
▼ 如何通过测试提升 Python 代码的健壮性 : section 0x00 前言 : section ▼ 0x01 测试的分类 : section 后端主要关注哪些测试 : section ▼ 0x02 为什么要写测试 : section 让新手更快的了解代码 : section 让发布代码的时候更加有底气 : section 让程序更容易重构 : section 加快团队的开发速度 : section ▼ 0x03 为什么不要写测试 : section 测试不能解决的问题 : section 不适当的测试为什么是负担 : section 并不是所有地方都容易测试的 : section ▼ 0x04 写 Python 测试的一些注意事项 : section 项目的环境隔离 : section 测试的基本环境 : section 单测 / 功测 / 端对端 : section 如何处理外部服务 : section 其他 Pytest 小技巧 : section 0xEE 参考 : section 0x01 测试的分类 测试有很多种，]]></description>
</item><item>
    <title>为你的项目快速搭建 ELKFA 日志系统</title>
    <link>http://twocucao.xyz/posts/20190310_pycode_05/</link>
    <pubDate>Sun, 10 Mar 2019 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20190310_pycode_05/</guid>
    <description><![CDATA[本文是《提升你的 Python 项目代码健壮性和性能》系列的第五篇文章。
 第一篇，讲的是如何 用 Type Annotation 提升你的 Python 代码健壮性 第二篇，讲的是 如何通过测试提升 Python 代码的健壮性 第三篇，讲的是在一定并发量的情况下，如何保证 Django 项目的数据一致性 第四篇，讲的是如何定位性能问题 这几招，让你快速提升 Python 项目的性能  第五篇，即本文 讲的是日志系统 ELKFA 的搭建
0x00 前言 : section ▼ 0x01 任务 1: 分析 Nginx 日志 : section 第一步：配置 Nginx : section 第二步：拉取 Nginx 日志 : section 第三步：开启 ELFKA : section 第四步：日志探秘 : section 第五步：扩展思考，日志解决方案 : section ▼ 0x02 任务 2: 监控 Flask App 的 APM : section 第一步：开启 ELFKA : section 第二步：开启 flask app : section 第三步：APM 探秘 : section 第四步：扩展思考 : section ▼ 0x03 结论 : section 0xEE 参考链接 : section 0x00 前言 什么是 ELKFA?]]></description>
</item><item>
    <title>如何保证 Django 项目的数据一致性</title>
    <link>http://twocucao.xyz/posts/20190308_pycode_03/</link>
    <pubDate>Fri, 08 Mar 2019 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20190308_pycode_03/</guid>
    <description><![CDATA[0x00 前言 本文是《提升你的 Python 项目代码健壮性和性能》系列的第三篇文章。
 第一篇，讲的是如何 用 Type Annotation 提升你的 Python 代码健壮性 第二篇，讲的是如何通过测试提升 Python 代码的健壮性  第三篇，即本文，我们来谈谈 Django 项目并发可能带来的问题以及如何保持 Django 项目的数据一致性。
本文目录如下：
0x00 前言 : section ▼ 0x01 背景知识 : section 并发会带来数据不一致 : section ▼ 0x02 Django 项目如何解决项目 : section 悲观的方式 : section 乐观的方式 : section 没有银弹 : section 0x03 解决超卖问题 : section ▼ 0x04 番外篇 数据库隔离级别 : section READ-UNCOMMITTED : section READ-COMMITTED : section REPEATABLE-READ : section SERIALIZABLE : section 0xEE 参考链接 : section 本文讨论的场景如下：]]></description>
</item><item>
    <title>这几招，让你快速提升 Python 项目的性能</title>
    <link>http://twocucao.xyz/posts/20190309_pycode_04/</link>
    <pubDate>Tue, 05 Mar 2019 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20190309_pycode_04/</guid>
    <description><![CDATA[本文是《提升你的 Python 项目代码健壮性和性能》系列的第四篇文章。
第一篇，讲的是如何 用 Type Annotation 提升你的 Python 代码健壮性 第二篇，讲的是 如何通过测试提升 Python 代码的健壮性 第三篇，讲的是在一定并发量的情况下，如何保证 Django 项目的数据一致性
第四篇，即本文，9012 年
 当你觉得某个地方运行比较慢了，此时此刻的你，有哪些小技巧可以快速的帮 你定位性能问题。
 目录如下
▼ 这几招，让你快速提升 Python 项目的性能 : section 0x00 前言 : section ▼ 0x01 Python 优化的五件武器 : section 第一件武器 timeit : section 第二件武器 profile 与 cprofile : section 第三件武器 line profiler : section 第四件武器 memory profiler : section 第五件武器 pympler : section 其他神器 : section ▼ 0x02 优化 Web 项目 : section 提前优化 : section 做好监控 : section ▼ 0x03 性能优化建议 : section 建议 1.]]></description>
</item><item>
    <title>用 Type Anotation 提升你的 Python 代码健壮性</title>
    <link>http://twocucao.xyz/posts/20181210_pycode_01/</link>
    <pubDate>Mon, 10 Dec 2018 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20181210_pycode_01/</guid>
    <description><![CDATA[0x00 前言 本文是《提升你的 Python 项目代码健壮性和性能》系列的第一篇文章。
当我刚知道 Python 要添加类型的时候，我的内心是拒绝的。
Why, Why, Why? 就是因为不喜欢类型，也不喜欢特别动态的语言。
但是，尝试了俩个疗程之后，腰也不疼了，腿也不疼了，走起路来都有劲了
 嗯，真香。
 0x01 Why Type Annotation 人们常说
 动态类型一时爽，代码重构火葬场。
 在刚写 Python 的前两年里并没有感受很深。
直到，开始和别人协作的时候，才发现各种莫名其妙的问题。
 大量的使用魔法方法 flake8 分析出某个函数过于复杂 send_message 里面有不少的参数，一不小心就传参错误 None 值  动态类型给人极大的灵活性，写的时候很爽，但如果解放了双手，撸起袖子一通写，自己写起来爽了，自己重构的时候或者其他人来看代码的时候，头发就会加速掉落。
聪明的你很容易反问，只要我们团队不犯这些错误，不就好了么？
是的，当我们讨论 Python Annotation 的时候，往往陷入类型之争。
我并不想讨论静态类型和动态类型孰好孰坏。
我想讨论的是加了 Typing 极大的提升代码的健壮性。
先从 Gradual Typing 说起吧。
0x02 Gradual Typing 在你刚入门一门编程语言的时候，我们常常说，Java 是强类型静态语言，Python 是强类型动态语言
从这两位诞生开始，静态类型和动态类型就一直进行旷日持久的圣战。
然而，而现在的发展趋势是：
 静态类型的语言觉得自己太过静态，以至于写起来很啰嗦。于是引入了很多类型推断。 Java / Go 动态类型的语言觉得自己太过动态，以至于协作的过程中总是出现低级错误。于是引入了 Gradual Typing , Typescript / Flow / Python Type Annotation  什么是 Gradual Typing?]]></description>
</item></channel>
</rss>
