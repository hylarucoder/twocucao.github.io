<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Flask - 分类 - 海拉鲁编程客</title>
        <link>http://twocucao.xyz/categories/flask/</link>
        <description>Flask - 分类 - 海拉鲁编程客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>twocucao@gmail.com (twocucao)</managingEditor>
            <webMaster>twocucao@gmail.com (twocucao)</webMaster><lastBuildDate>Sat, 31 Mar 2018 21:57:40 &#43;0800</lastBuildDate><atom:link href="http://twocucao.xyz/categories/flask/" rel="self" type="application/rss+xml" /><item>
    <title>SQLAlchemy CheatSheet</title>
    <link>http://twocucao.xyz/posts/20180331_sqlalchemycheatsheet/</link>
    <pubDate>Sat, 31 Mar 2018 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20180331_sqlalchemycheatsheet/</guid>
    <description><![CDATA[SQLAlchemy 入门，看本文就好了
0x00 前言 大约一年前，工作从 Django 开发切到 Flask 开发，ORM 选用的是 SQLAlchemy, 用了大半年后，借着这个机会重新回顾一下 SQLAchemy 和 Django ORM, 补充一下文档。
这篇文章算是笔记吧
Python 圈内有两大 ORM 框架
 SQLAlchemy Django ORM  当然，也有 peewee 之类的其他 ORM。
0x01 ORM 解决了什么问题？ 了解一个框架，最好是从下面几处入手：
 官方 Tuorial 官方 Example 官方 Guide 官方 APIDocument 源码  对框架掌握越深，就越需要使用者多多从上开始逐渐向下了解。
其实还有一些途径：
 Github 上面的 issue Stack Overflow 的高 vote 常见问题 如果作者有一些活跃的社区的话，可以火速前往  鉴于我们的目标在于入手，所以可以火速过一下：
 官方 Tuorial 官方 Example 官方 Guide Github 上面的 issue Stack Overflow 的高 vote 常见问题 如果作者有一些活跃的社区的话，可以火速前往  0x02 SQLAlchemy 的基本功能 2.]]></description>
</item><item>
    <title>Flask 文档阅读笔记</title>
    <link>http://twocucao.xyz/posts/20180309_flask%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
    <pubDate>Fri, 09 Mar 2018 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20180309_flask%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
    <description><![CDATA[0x00 前言 因为最近需要新增一个 Flask 技术栈，所以准备趁这休息的时候更新关于 Flask 的两篇文章。
前者是文档阅读笔记，后者是源码初步解析。
 嗯，其实这篇就是做了一些搬运的活。
 0x01 文档 由于 Flask 还依赖 Jinja2 与 Werkzeug, 并且往往大家在使用 Flask 的时候还是会使用 itsdangerous. 所以，当大家说 Flask 代码少的时候，我还是不服的。但如果你说，Flask 本身实现确实是简洁，扩展性强，我还是服气的。
Flask 的文档有三种类型（其他框架类文档也是如此）：
 Tutorial 类，即教程类 Guide 类，即指南类 API 类，即接口级别的文档  当你是一个老手，还想快速上手一个框架的时候，认真读一读前两者，然后挑选一个项目多看几遍即可。
但是当你深入到框架里面的设计与实现的时候，则必须要多读读 API Document , 由于通常情况下 API Document 的内容往往是代码中的注释，加上 Flask 代码量本来就不多。所以，有的时候阅读 Flask 代码代码也会比 API 好很多。
0x02 Guide 2.1 Templates 快速 Get 模板语言无非就是掌握：
 上下文变量 条件语法 列表语法 模板的继承 (extend 语法）与组合 (include) 额外的一些语法糖，比如 filter 的使用 / 组成  2.]]></description>
</item><item>
    <title>Flask 源码初步解读</title>
    <link>http://twocucao.xyz/posts/20180309_flask%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
    <pubDate>Fri, 09 Mar 2018 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20180309_flask%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
    <description><![CDATA[0x00 前言 系列文章先暂时停更一下。今天换换口味。
久闻 Flask 是众多 Pythonist 喜欢的框架。这次借着换工作的机会熟悉一下 Flask
 本文先分享我阅读代码的一些小经验 接着通过最简单的一个 WSGI APP 开始，带着如何设计一个 Web 框架这个问题，先头脑风暴，从而脑补（而不是实现）出一个 Web 框架的基本要素。 从源码角度理解，Flask 从启动到接受第一个请求、返回第一个响应期间都发生了什么。 最后交代一些自己在这个过程中的一些突发的想法。   将解读 Flask 的源码放在一篇文章里，势必会造成广度有余而深度不足。所以本想定位于 Flask 源码初步解读。
 0x01 阅读 Flask 代码的一种较好的姿势 之前在 https://www.zhihu.com/question/28509408/answer/299763091 分享过自己一点阅读代码的粗浅的经验，是以阅读一个 Django 的应用为案例的。这里借着读 Flask 本身分享一下我的看法。
读源码，是一个技术活。一是忌讳要想读懂全部，另一个忌讳是以为自己能一下子毫无障碍的读懂全部代码。
建议 0 : 看源码的时候，务必务必带着问题去读。每一次阅读其实都是在尝试回答或小或大的问题（当然，读书看文章莫不如是）。 建议 1 : 先读现成的文档，不要上来就对着代码一通瞎看。 建议 2 : 所谓『横看成岭侧成峰，远近高低都不同』 你需要从不同的角度来读源码。 建议 3 : 抓大放小，该略读就略读（比如知道 Nginx 的大致作用就好，做优化请求响应的时候再翻看文档），该精读则精读（具体一个关键的功能）。   好，坐好，预备，开车。
 0x02 问题 1: 如何设计一个 Web 框架 头脑风暴 Flask 是一个微 Web 框架，换而言之，代码量少的 Web 框架。当然，其实 Flask 框架是一个微框架，但『常规的 Flask 应用』本身的代码加起来一点都不比『Django 应用』少。这个地方我们后面会讲到。]]></description>
</item></channel>
</rss>
