<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>善用佳软 - 分类 - 海拉鲁编程客</title>
        <link>http://twocucao.xyz/categories/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/</link>
        <description>善用佳软 - 分类 - 海拉鲁编程客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>twocucao@gmail.com (twocucao)</managingEditor>
            <webMaster>twocucao@gmail.com (twocucao)</webMaster><lastBuildDate>Mon, 30 Nov 2020 18:19:17 &#43;0800</lastBuildDate><atom:link href="http://twocucao.xyz/categories/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/" rel="self" type="application/rss+xml" /><item>
    <title>Modern Shell</title>
    <link>http://twocucao.xyz/posts/20201201_modern_shell/</link>
    <pubDate>Mon, 30 Nov 2020 18:19:17 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20201201_modern_shell/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/5625783/100601457-8efe8a80-333d-11eb-803e-861352bd1715.jpg" referrerpolicy="no-referrer">
            </div>0x01 更好的替代品 find -&gt; fd {}: A placeholder token that will be replaced with the path of the search result (documents/images/party.jpg). {.}: Like {}, but without the file extension (documents/images/party). {/}: A placeholder that will be replaced by the basename of the search result (party.jpg). {//}: Uses the parent of the discovered path (documents/images). {/.}: Uses the basename, with the extension removed (party). # Convert all jpg files to png files: fd -e jpg -x convert {} {.]]></description>
</item><item>
    <title>如何优雅的使用 Windows 10</title>
    <link>http://twocucao.xyz/posts/20190413_%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8windows10/</link>
    <pubDate>Wed, 03 Apr 2019 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20190413_%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8windows10/</guid>
    <description><![CDATA[0x00 前言 最近入手了 SP6, 于是把 2015 年写的这篇文章修订为 2019 版
 笔者已过了爱折腾的年纪，仅从提升工作效率方面来说。
 背景：
Pythonista &amp;&amp; Nodejs 工作机 MBP 2017 款机器 生活机 Surface Pro 6, 轻办公，有时也用来调试 Windows 上的程序。  本文目录
▼ 0x00 前言 : section 0x01 文件整理 : section ▼ 0x02 自带功能 : section 2.1 快捷键 : section 2.2 触摸板 : section 2.3 Win+R -- 运行 : section ▼ 0x03 必备软件 : section 3.1 文件管理 : section 3.2 资讯浏览 : section 3.]]></description>
</item><item>
    <title>Final Cut Pro X CheatSheat</title>
    <link>http://twocucao.xyz/posts/20181125_finalcutprox/</link>
    <pubDate>Sun, 25 Nov 2018 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20181125_finalcutprox/</guid>
    <description><![CDATA[0x00 前言 本文诞生于用 Final Cut Pro X 剪了几次视频之后的复盘总结
部分内容来自于
 Final Cut Pro X 10.1 非线性编辑高级教程 Final Cut Pro X 影视包装剪辑完全自学教程  0x01 剪辑流程 所有的剪辑流程都是想法的具体实现，这意味着在剪辑之前，需要做好前期准备
1. 确定大致思路 2. 调好参数摄影  然后
 素材导入 片段整理 前期剪辑 精剪 分享  0x01 前期准备 本文复盘的是古墓丽影暗影假预告片剪辑。
热血的预告片通常具有如下的特征：
 有一条主线，但不剧透，通常这个主线往往是有人在说话，引出了整个故事 霸气磅礴的背景音乐 频繁而不冗余的镜头切换 踩节奏踩的非常精准  0x02 素材导入  建立 Library 游戏 建立 Event 古墓丽影暗影，导入游戏视频 建立 Project 古墓丽影暗影盗梦空间预告片  素材导入没什么好说的，因为 PS4 里录制成什么样子，就是什么样子。
开启转码和分析的话，可以分析出更多的片段类型。
注意点  建议开启『创建优化的媒体』 看存储情况如果存储不是很足的话，开启『创建优化的代理文件』  尽量将素材管理的任务交给 FCPX 来做，所以，如果可能的话，直接拷贝进资料库最好。]]></description>
</item><item>
    <title>用 tmux 与 tmuxinator 打造开发工作流</title>
    <link>http://twocucao.xyz/posts/20180128_tmuxwithtmuxinatorworkflow/</link>
    <pubDate>Sun, 28 Jan 2018 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20180128_tmuxwithtmuxinatorworkflow/</guid>
    <description><![CDATA[0x00. 前言 本文就我最近开发的一个前后端的项目（名字叫做 yavueblog) 来简单介绍两个神器
 一个是 tmux 一个是 tmuxinator  我在开发这个前后端的项目的时候要开启要通过不少的命令来启动服务：
 （前端开发）运行 npm run dev 进行开发前端页面 （前端开发）运行 npm run dev:theme , 当主题的 SCSS 发生变化的同时，编译 SCSS （前端开发）运行 npm run dev:iconfont, 当移入了新的 svg 图标的时候，自动构建出新的字体文件与 iconfont.css 。 （后端开发）运行 make dockerup 中开启 Django 应用。启动 Django 服务，PostgreSQL 数据库，Redis 等等，  我的需求如下：
 一键启动这些脚本，前两个任务，放在第一个终端。 后面两个任务放在第二、三个终端里。  以前的做法都是新建三个终端选项卡，然后第一个终端分两屏，然后分别到各个终端 cd 或者 autojump 到对应的目录，然后手动运行命令。
加上运行 npm run dev:theme 的时候，我是通过 Python 的 watchdog 来实现对指定目录和指定类型文件的变化进行监听的，所以还要切换 PyEnv 自定义的 Python 的环境中。]]></description>
</item><item>
    <title>macOS 的系统与软件</title>
    <link>http://twocucao.xyz/posts/20171223_macosindepth/</link>
    <pubDate>Sat, 23 Dec 2017 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20171223_macosindepth/</guid>
    <description><![CDATA[0x00 前言 折腾了 Windows 很多年，后来出于个人开发需求转投 Mac，使用起来一直很顺手。现在也开始从顺手开始到了解更深一点的东西。
0x01 系统安全架构 1.1 系统架构概述 非开发人员分层：
 User Experience  Aqua Dashboard Spotlight Dock 输入法 屏保 辅助功能 语音 位置与地图 搜索 etc   Application Framework  Cocoa   Graphics and Media  核心框架，OpenAL,Quartz,SceneKit,SpriteKit   Darwin  系统内核与 Shell 环境    开发人员分层：
 Cocoa Layer: Cocoa 框架层 包括了用于开发界面程序的框架集合。 Foundation Layer: 提供了程序开发室使用到的基础数据类型、数值处理、网络、IO 和 日期等 Media Layer: 提供了图像、声音、视频、动画及游戏开发需要的接口 Core Service Layer: 系统安全、底层内部数据访问以及存储接口。比如 AddressBook,CoreData,QuickLook 用于快速浏览插件开发。CoreFoundation 框架也属于这一层。 Core OS Layer: 加速器，蓝牙，异常处理，网络扩展，系统配置 Kernel &amp; Driver Layer: 内核与驱动层。包括开发设备驱动程序与内核扩展所需的一些框架。  应用程序是一个 bundle 文件，一般为 xxx.]]></description>
</item><item>
    <title>Shell CheatSheat</title>
    <link>http://twocucao.xyz/posts/20150418_shellcheatsheet/</link>
    <pubDate>Fri, 01 Dec 2017 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20150418_shellcheatsheet/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/5625783/100601457-8efe8a80-333d-11eb-803e-861352bd1715.jpg" referrerpolicy="no-referrer">
            </div>0x00 前言 本文为 Cheatsheet 类型文章，用于记录我在日常编程中经常使用的 Shell 单行命令。
0x01 快捷键 - 「c-c」 : 中断当前命令。 - 「c-z」 : 当前程序暂停，bg 切换后台运行，使用 fg 可以调回 - 「tab」 : 补全 - 「tabx2」 : 补全提示 - 「c-r」 : 搜索命令行 - 「c-w」 : 同 vim - 「c-u」 : 删除整行 - 「a-b/a-f」 : 移动一个词 - 「c-a」 : 移动至行首 - 「c-e」 : 移动至行尾 - 「c-k」 : 删除光标到行尾 - 「c-l」 : 清屏 - 「c-x,c-e」 : 用默认编辑器编辑当前命令（这样就可以把其他文本移动扔掉了。) 0x02 帮助 查找帮助
- man - whatis / which / where - tldr 值得一提的就是 tldr, 直接可以在上面查看命令的常规使用。实在是碉堡了。]]></description>
</item><item>
    <title>如何优雅地使用 macOS</title>
    <link>http://twocucao.xyz/posts/20171007_elegantmac/</link>
    <pubDate>Sat, 07 Oct 2017 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20171007_elegantmac/</guid>
    <description><![CDATA[如何优雅的使用 macOS 0x01 macOS 系统操作 快捷键 - cmd 为 command 按键，通常情况下为所有桌面程序通用性的快捷键。 - ctrl ，通常情况下是针对程序的功能进行加强，并且此功能往往是非 cmd 类（窗口操作，选择，复制粘贴等等）操作。 - shift 按键通常用于加强操作。一般会让操作更进一步 or 相反操作。 - cmd+tab =~ alt+tab 程序之间的切换 - cmd+\` 应用内窗口切换 - cmd+h 窗口 hide - cmd+m 窗口 minimize - cmd+n 新建窗口 - cmd+o 打开 - cmd+s 保存 - cmd+shift+s 另存为 - cmd+p 打印 print - cmd+w 关闭 - cmd+q quit - cmd+a select all - cmd+i show info - cmd+n create a new folder - cmd+f search - cmd+c copy - cmd+v paste - cmd+delete 删除选中文件 - cmd+shift+delete 清空回收站 - cmd+= 放大 - cmd+- 缩小 - cmd+t 新建选项卡 - cmd+r 刷新 - cmd+shift+3 截取整个屏幕 - cmd+shift+4 截取选择区域 - cmd+shift+4+SPACE 截取选择窗口 - cmd+ 鼠标点击 -&gt; 选中不连续文件 - control+ 鼠标点击 -&gt; 相当于 win 中右键点击 - fn+left home - fn+right end - fn+up pageup - fn+down pagedown 触摸板 - 单指点击 - 单击 - 单指滑动 - 滑动鼠标光标 - 双指点击 - 相当于 Windows 的鼠标右键 - 三指点击 - 划词查找 - 双指上下滑动 - 滚动 - 双指缩放 - 与 Android 上图片缩放一致 - 双指双击 - 只能缩放 - 双指旋转 - 旋转 - 双指左右滑动 - 应用内切换网页 - 双指头从右往左 - 三指头左右滑动 - 全屏幕 App 切换 - 大拇指和食中无名缩放 - launchpad 0x02 日常软件   iTunes]]></description>
</item><item>
    <title>Git CheatSheet</title>
    <link>http://twocucao.xyz/posts/20170615_gitcheatsheet/</link>
    <pubDate>Thu, 15 Jun 2017 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20170615_gitcheatsheet/</guid>
    <description><![CDATA[0x00 前言 Git 是一种分布式版本管理工具。
0x01 Git 命令范论  基础命令 （本地修改类） 合作命令 （本地与仓库类） 综合命令 管理命令  前两种命令是入门 Git 的程序员都必须要会的。
而队伍里的技术管理人员必须要会前三。
1.1 基础命令  git-init(1) to create a new repository. git-log(1) to see what happened. git-checkout(1) and git-branch(1) to switch branches. git-add(1) to manage the index file. git-diff(1) and git-status(1) to see what you are in the middle of doing. git-commit(1) to advance the current branch. git-reset(1) and git-checkout(1) (with pathname parameters) to undo changes.]]></description>
</item><item>
    <title>CVim</title>
    <link>http://twocucao.xyz/posts/20170623_vimcheatsheet/</link>
    <pubDate>Sat, 03 Jun 2017 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20170623_vimcheatsheet/</guid>
    <description><![CDATA[0x00 什么是 CVim 呢？ CVim 基于 NeoVim 0.5+ , 整理 cvim 的配置，将大部分从 vimscript 迁移到 lua 中
 only tested on neovim 0.5
 优势  Vim, Not Vim like 更现代的编辑界面  开始页面 via. vim-startify 菜单栏 via. QuickUI 上下文菜单 via. QuickUI Context Menu 文件栏 via. LuaTree Tag 栏 via. Vista 更好的 Finder via. telescope  ctrl + p 文件搜索   侧边栏 via  vim-signature vim-signify     全文搜索  Enhenced Basic Keys  j/k via accelerated f/F/t/T via sneak   Enhenced Select  缩进选择     更现代化的编辑，如 For TypeScript/Python/Golang FullStack Engineer  Python Golang TypeScript    劣势  self used, use it with your own caution]]></description>
</item><item>
    <title>VSCode CheatSheet</title>
    <link>http://twocucao.xyz/posts/20170527_vscodecheatsheet/</link>
    <pubDate>Sat, 27 May 2017 21:57:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://twocucao.xyz/posts/20170527_vscodecheatsheet/</guid>
    <description><![CDATA[0x00 前言 本文为 Cheatsheet 类型文章，用于记录我使用 VSCode 的一些开发小技巧。
不定期更新。
VSCode 是一种编辑器，这显然是一句废话。
这个问题应该是，我为什么要使用 VSCode 作为主力编辑器。有人说：微软出品一定是精品。这个理由很软粉，但是不能打动我更换编辑器的欲望。
使用编辑器自然是求其轻量，高效的文字处理，以及编程的相关环境的支持，以及跨平台和可扩展性。
 轻量是求其打开速度快，编辑不卡顿。这一点，用 Vim , Emacs , Sublime Text 完全都可以。 高效的文字处理是因为满足日常编写文字和代码的需求。 编程相关环境的支持是因为作为一个学习东西很杂乱的人来说，最痛苦的事情就在于 IDE 常常来不及给一些新技术予以足够的支持，比如说 Docker, 比如说 ansible。 跨平台和可扩展性 跨平台是必须的，可扩展性则是从插件资源和编写插件的难度考虑。  本文的目录结构如下：
 VSCode 常用命令  0x01 VSCode 相关配置 安装完毕之后，cmd-s-p shell command install
0x02 VSCode 常用命令  Command Palette : cmd-s-p cmd-p : cmd-p 显示状态 : cmd-s-m 下一个错误 : F8 / shift-F8 **** : c-s-p **** : c-s-p **** : c-s-p **** : c-s-p **** : c-s-p **** : c-s-p **** : c-s-p  0x03 VS 扩展相关 0x04 ]]></description>
</item></channel>
</rss>
